(function ($hx_exports) { "use strict";
$hx_exports.lime = $hx_exports.lime || {};
$hx_exports.openfl = $hx_exports.openfl || {};
var $hxClasses = {},$estr = function() { return js.Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = ["ApplicationMain"];
ApplicationMain.config = null;
ApplicationMain.preloader = null;
ApplicationMain.create = function() {
	var app = new lime.app.Application();
	app.create(ApplicationMain.config);
	openfl.Lib.application = app;
	var stage = new openfl.display.Stage(app.windows[0].__width,app.windows[0].__height,ApplicationMain.config.background);
	stage.addChild(openfl.Lib.current);
	app.addModule(stage);
	var display = new NMEPreloader();
	ApplicationMain.preloader = new openfl.display.Preloader(display);
	ApplicationMain.preloader.onComplete = ApplicationMain.init;
	ApplicationMain.preloader.create(ApplicationMain.config);
	var urls = [];
	var types = [];
	urls.push("img/atlas.png");
	types.push("IMAGE");
	urls.push("img/atlas.xml");
	types.push("TEXT");
	urls.push("img/landscape.jpg");
	types.push("IMAGE");
	urls.push("img/stars.pex");
	types.push("TEXT");
	urls.push("img/stars.png");
	types.push("IMAGE");
	urls.push("xml/config.xml");
	types.push("TEXT");
	urls.push("xml/_example_config.xml");
	types.push("TEXT");
	if(ApplicationMain.config.assetsPrefix != null) {
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(types[i] != "FONT") urls[i] = ApplicationMain.config.assetsPrefix + urls[i];
		}
	}
	ApplicationMain.preloader.load(urls,types);
	var result = app.exec();
};
ApplicationMain.init = function() {
	var loaded = 0;
	var total = 0;
	var library_onLoad = function(__) {
		loaded++;
		if(loaded == total) ApplicationMain.start();
	};
	ApplicationMain.preloader = null;
	if(loaded == total) ApplicationMain.start();
};
ApplicationMain.main = function() {
	ApplicationMain.config = { antialiasing : 0, background : 0, borderless : false, company : "P.J.Shand", depthBuffer : false, file : "ImagRobotlegsStarling", fps : 60, fullscreen : true, height : 0, orientation : "", packageName : "com.imagination.robotlegs.starling.ImagRobotlegsStarling", resizable : true, stencilBuffer : true, title : "ImagRobotlegsStarling", version : "1.0.0", vsync : false, width : 0};
};
ApplicationMain.start = function() {
	var hasMain = false;
	var entryPoint = Type.resolveClass("com.imagination.robotlegs.starling.Main");
	var _g = 0;
	var _g1 = Type.getClassFields(entryPoint);
	while(_g < _g1.length) {
		var methodName = _g1[_g];
		++_g;
		if(methodName == "main") {
			hasMain = true;
			break;
		}
	}
	lime.Assets.initialize();
	if(hasMain) Reflect.callMethod(entryPoint,Reflect.field(entryPoint,"main"),[]); else {
		var instance = Type.createInstance(DocumentClass,[]);
	}
	openfl.Lib.current.stage.dispatchEvent(new openfl.events.Event(openfl.events.Event.RESIZE,false,false));
};
var openfl = {};
openfl.events = {};
openfl.events.IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl.events.IEventDispatcher;
openfl.events.IEventDispatcher.__name__ = ["openfl","events","IEventDispatcher"];
openfl.events.IEventDispatcher.prototype = {
	addEventListener: null
	,dispatchEvent: null
	,hasEventListener: null
	,removeEventListener: null
	,willTrigger: null
	,__class__: openfl.events.IEventDispatcher
};
openfl.events.EventDispatcher = function(target) {
	if(target != null) this.__targetDispatcher = target;
};
$hxClasses["openfl.events.EventDispatcher"] = openfl.events.EventDispatcher;
openfl.events.EventDispatcher.__name__ = ["openfl","events","EventDispatcher"];
openfl.events.EventDispatcher.__interfaces__ = [openfl.events.IEventDispatcher];
openfl.events.EventDispatcher.__sortByPriority = function(l1,l2) {
	if(l1.priority == l2.priority) return 0; else if(l1.priority > l2.priority) return -1; else return 1;
};
openfl.events.EventDispatcher.prototype = {
	__targetDispatcher: null
	,__eventMap: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		if(this.__eventMap == null) this.__eventMap = new haxe.ds.StringMap();
		if(!this.__eventMap.exists(type)) {
			var list = new Array();
			list.push(new openfl.events._EventDispatcher.Listener(listener,useCapture,priority));
			this.__eventMap.set(type,list);
		} else {
			var list1 = this.__eventMap.get(type);
			var _g1 = 0;
			var _g = list1.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(Reflect.compareMethods(list1[i].callback,listener)) return;
			}
			list1.push(new openfl.events._EventDispatcher.Listener(listener,useCapture,priority));
			list1.sort(openfl.events.EventDispatcher.__sortByPriority);
		}
	}
	,dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) return false;
		var list = this.__eventMap.get(event.type);
		if(list == null) return false;
		if(event.target == null) {
			if(this.__targetDispatcher != null) event.target = this.__targetDispatcher; else event.target = this;
		}
		event.currentTarget = this;
		var capture = event.eventPhase == openfl.events.EventPhase.CAPTURING_PHASE;
		var index = 0;
		var listener;
		while(index < list.length) {
			listener = list[index];
			if(listener.useCapture == capture) {
				listener.callback(event);
				if(event.__isCancelledNow) return true;
			}
			if(listener == list[index]) index++;
		}
		return true;
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) return false;
		return this.__eventMap.exists(type);
	}
	,removeEventListener: function(type,listener,capture) {
		if(capture == null) capture = false;
		if(this.__eventMap == null) return;
		var list = this.__eventMap.get(type);
		if(list == null) return;
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].match(listener,capture)) {
				list.splice(i,1);
				break;
			}
		}
		if(list.length == 0) this.__eventMap.remove(type);
		if(!this.__eventMap.iterator().hasNext()) this.__eventMap = null;
	}
	,toString: function() {
		var full = Type.getClassName(Type.getClass(this));
		var $short = full.split(".").pop();
		return "[object " + $short + "]";
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__class__: openfl.events.EventDispatcher
};
openfl.display = {};
openfl.display.IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl.display.IBitmapDrawable;
openfl.display.IBitmapDrawable.__name__ = ["openfl","display","IBitmapDrawable"];
openfl.display.IBitmapDrawable.prototype = {
	__worldTransform: null
	,__worldColorTransform: null
	,blendMode: null
	,__renderCanvas: null
	,__renderGL: null
	,__renderMask: null
	,__updateChildren: null
	,__updateMask: null
	,__class__: openfl.display.IBitmapDrawable
};
openfl.display.DisplayObject = function() {
	this.__maskCached = false;
	openfl.events.EventDispatcher.call(this);
	this.__alpha = 1;
	this.__rotation = 0;
	this.__scaleX = 1;
	this.__scaleY = 1;
	this.__visible = true;
	this.__x = 0;
	this.__y = 0;
	this.__worldAlpha = 1;
	this.__worldTransform = new openfl.geom.Matrix();
	this.__rotationCache = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__worldColorTransform = new openfl.geom.ColorTransform();
	this.__worldVisible = true;
	this.set_name("instance" + ++openfl.display.DisplayObject.__instanceCount);
};
$hxClasses["openfl.display.DisplayObject"] = openfl.display.DisplayObject;
openfl.display.DisplayObject.__name__ = ["openfl","display","DisplayObject"];
openfl.display.DisplayObject.__interfaces__ = [openfl.display.IBitmapDrawable];
openfl.display.DisplayObject.__super__ = openfl.events.EventDispatcher;
openfl.display.DisplayObject.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	blendMode: null
	,cacheAsBitmap: null
	,loaderInfo: null
	,mouseX: null
	,mouseY: null
	,opaqueBackground: null
	,parent: null
	,root: null
	,scale9Grid: null
	,stage: null
	,__worldTransform: null
	,__worldColorTransform: null
	,__alpha: null
	,__filters: null
	,__graphics: null
	,__interactive: null
	,__isMask: null
	,__mask: null
	,__maskGraphics: null
	,__maskCached: null
	,__name: null
	,__renderable: null
	,__renderDirty: null
	,__rotation: null
	,__rotationCache: null
	,__rotationCosine: null
	,__rotationSine: null
	,__scaleX: null
	,__scaleY: null
	,__scrollRect: null
	,__transform: null
	,__transformDirty: null
	,__visible: null
	,__worldAlpha: null
	,__worldAlphaChanged: null
	,__worldClip: null
	,__worldClipChanged: null
	,__worldTransformCache: null
	,__worldTransformChanged: null
	,__worldVisible: null
	,__worldVisibleChanged: null
	,__worldZ: null
	,__x: null
	,__y: null
	,__canvas: null
	,__context: null
	,__style: null
	,dispatchEvent: function(event) {
		var result = openfl.events.EventDispatcher.prototype.dispatchEvent.call(this,event);
		if(event.__isCancelled) return true;
		if(event.bubbles && this.parent != null && this.parent != this) {
			event.eventPhase = openfl.events.EventPhase.BUBBLING_PHASE;
			this.parent.dispatchEvent(event);
		}
		return result;
	}
	,getBounds: function(targetCoordinateSpace) {
		var matrix = this.__getTransform();
		if(targetCoordinateSpace != null) {
			matrix = new openfl.geom.Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
			matrix.concat(targetCoordinateSpace.__worldTransform.clone().invert());
		}
		var bounds = new openfl.geom.Rectangle();
		this.__getBounds(bounds,matrix);
		return bounds;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,globalToLocal: function(pos) {
		return this.__getTransform().clone().invert().transformPoint(pos);
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			var currentBounds = this.getBounds(this);
			var targetBounds = obj.getBounds(this);
			return currentBounds.intersects(targetBounds);
		}
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		if(this.parent != null) {
			var bounds = new openfl.geom.Rectangle();
			this.__getBounds(bounds,null);
			return bounds.containsPoint(new openfl.geom.Point(x,y));
		}
		return false;
	}
	,localToGlobal: function(point) {
		return this.__getTransform().transformPoint(point);
	}
	,__broadcast: function(event,notifyChilden) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl.events.EventDispatcher.prototype.dispatchEvent.call(this,event);
			if(event.__isCancelled) return true;
			return result;
		}
		return false;
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) this.__graphics.__getBounds(rect,matrix != null?matrix:this.__worldTransform);
	}
	,__getCursor: function() {
		return null;
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getLocalBounds: function(rect) {
		this.__getTransform();
		this.__getBounds(rect,new openfl.geom.Matrix());
	}
	,__getTransform: function() {
		if(this.__transformDirty || openfl.display.DisplayObject.__worldTransformDirty > 0) {
			var list = [];
			var current = this;
			var transformDirty = this.__transformDirty;
			if(this.parent == null) {
				if(transformDirty) this.__update(true,false);
			} else while(current.parent != null) {
				list.push(current);
				current = current.parent;
				if(current.__transformDirty) transformDirty = true;
			}
			if(transformDirty) {
				var i = list.length;
				while(--i >= 0) list[i].__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(this.__graphics != null) {
			if(this.get_visible() && this.__graphics.__hitTest(x,y,shapeFlag,this.__getTransform())) {
				if(!interactiveOnly) stack.push(this);
				return true;
			}
		}
		return false;
	}
	,__renderCanvas: function(renderSession) {
		if(this.__graphics != null) openfl._internal.renderer.canvas.CanvasShape.render(this,renderSession);
	}
	,__renderDOM: function(renderSession) {
		if(this.__graphics != null) openfl._internal.renderer.dom.DOMShape.render(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.__graphics != null) openfl._internal.renderer.opengl.utils.GraphicsRenderer.render(this,renderSession);
	}
	,__renderMask: function(renderSession) {
		if(this.__graphics != null) openfl._internal.renderer.canvas.CanvasGraphics.renderMask(this.__graphics,renderSession);
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) this.dispatchEvent(new openfl.events.Event(openfl.events.Event.REMOVED_FROM_STAGE,false,false));
			this.stage = stage;
			if(stage != null) this.dispatchEvent(new openfl.events.Event(openfl.events.Event.ADDED_TO_STAGE,false,false));
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			openfl.display.DisplayObject.__worldRenderDirty++;
		}
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl.display.DisplayObject.__worldTransformDirty++;
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		if(this.get_rotation() != this.__rotationCache) {
			this.__rotationCache = this.get_rotation();
			var radians = this.get_rotation() * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
		}
		if(this.parent != null) {
			var parentTransform = this.parent.__worldTransform;
			var a00 = this.__rotationCosine * this.get_scaleX();
			var a01 = this.__rotationSine * this.get_scaleX();
			var a10 = -this.__rotationSine * this.get_scaleY();
			var a11 = this.__rotationCosine * this.get_scaleY();
			var b00 = parentTransform.a;
			var b01 = parentTransform.b;
			var b10 = parentTransform.c;
			var b11 = parentTransform.d;
			if(this.__worldTransform == null) this.__worldTransform = new openfl.geom.Matrix();
			this.__worldTransform.a = a00 * b00 + a01 * b10;
			this.__worldTransform.b = a00 * b01 + a01 * b11;
			this.__worldTransform.c = a10 * b00 + a11 * b10;
			this.__worldTransform.d = a10 * b01 + a11 * b11;
			if(this.get_scrollRect() == null) {
				this.__worldTransform.tx = this.get_x() * b00 + this.get_y() * b10 + parentTransform.tx;
				this.__worldTransform.ty = this.get_x() * b01 + this.get_y() * b11 + parentTransform.ty;
			} else {
				this.__worldTransform.tx = (this.get_x() - this.get_scrollRect().x) * b00 + (this.get_y() - this.get_scrollRect().y) * b10 + parentTransform.tx;
				this.__worldTransform.ty = (this.get_x() - this.get_scrollRect().x) * b01 + (this.get_y() - this.get_scrollRect().y) * b11 + parentTransform.ty;
			}
			if(this.__isMask) this.__maskCached = false;
		} else {
			this.__worldTransform.a = this.__rotationCosine * this.get_scaleX();
			this.__worldTransform.c = -this.__rotationSine * this.get_scaleY();
			this.__worldTransform.b = this.__rotationSine * this.get_scaleX();
			this.__worldTransform.d = this.__rotationCosine * this.get_scaleY();
			if(this.get_scrollRect() == null) {
				this.__worldTransform.tx = this.get_x();
				this.__worldTransform.ty = this.get_y();
			} else {
				this.__worldTransform.tx = this.get_y() - this.get_scrollRect().x;
				this.__worldTransform.ty = this.get_y() - this.get_scrollRect().y;
			}
		}
		if(updateChildren && this.__transformDirty) {
			this.__transformDirty = false;
			openfl.display.DisplayObject.__worldTransformDirty--;
		}
		if(!transformOnly && this.__mask != null && !this.__mask.__maskCached) {
			if(this.__maskGraphics == null) this.__maskGraphics = new openfl.display.Graphics();
			this.__maskGraphics.clear();
			this.__mask.__update(true,true,this.__maskGraphics);
			this.__mask.__maskCached = true;
		}
		if(maskGraphics != null) this.__updateMask(maskGraphics);
		if(!transformOnly) {
			this.__worldTransformChanged = !this.__worldTransform.equals(this.__worldTransformCache);
			this.__worldTransformCache = this.__worldTransform.clone();
			var worldClip = null;
			if(!this.__worldColorTransform.__equals(this.get_transform().get_colorTransform())) this.__worldColorTransform = this.get_transform().get_colorTransform().__clone();
			if(this.parent != null) {
				var worldVisible = this.parent.__worldVisible && this.get_visible();
				this.__worldVisibleChanged = this.__worldVisible != worldVisible;
				this.__worldVisible = worldVisible;
				var worldAlpha = this.get_alpha() * this.parent.__worldAlpha;
				this.__worldAlphaChanged = this.__worldAlpha != worldAlpha;
				this.__worldAlpha = worldAlpha;
				if(this.parent.__worldClip != null) worldClip = this.parent.__worldClip.clone();
				if(this.get_scrollRect() != null) {
					var bounds = this.get_scrollRect().clone();
					bounds = bounds.transform(this.__worldTransform);
					if(worldClip != null) bounds.__contract(worldClip.x - this.get_scrollRect().x,worldClip.y - this.get_scrollRect().y,worldClip.width,worldClip.height);
					worldClip = bounds;
				}
			} else {
				this.__worldAlpha = this.get_alpha();
				this.__worldVisibleChanged = this.__worldVisible != this.get_visible();
				this.__worldVisible = this.get_visible();
				this.__worldAlphaChanged = this.__worldAlpha != this.get_alpha();
				if(this.get_scrollRect() != null) worldClip = this.get_scrollRect().clone().transform(this.__worldTransform);
			}
			this.__worldClipChanged = worldClip == null && this.__worldClip != null || worldClip != null && !worldClip.equals(this.__worldClip);
			this.__worldClip = worldClip;
			if(updateChildren && this.__renderDirty) this.__renderDirty = false;
		}
	}
	,__updateChildren: function(transformOnly) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		if(!this.__renderable && !this.__isMask) return;
		this.__worldAlpha = this.get_alpha();
		if(this.__transformDirty) {
			this.__transformDirty = false;
			openfl.display.DisplayObject.__worldTransformDirty--;
		}
	}
	,__updateMask: function(maskGraphics) {
		if(this.__graphics != null) {
			maskGraphics.__commands.push(openfl.display.DrawCommand.OverrideMatrix(this.__worldTransform));
			maskGraphics.__commands = maskGraphics.__commands.concat(this.__graphics.__commands);
			maskGraphics.set___dirty(true);
			maskGraphics.__visible = true;
			if(maskGraphics.__bounds == null) maskGraphics.__bounds = new openfl.geom.Rectangle();
			this.__graphics.__getBounds(maskGraphics.__bounds,openfl.geom.Matrix.__identity);
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value != this.__alpha) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__alpha = value;
	}
	,get_filters: function() {
		if(this.__filters == null) return new Array(); else return this.__filters.slice();
	}
	,set_filters: function(value) {
		return value;
	}
	,get_height: function() {
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		return bounds.height * this.get_scaleY();
	}
	,set_height: function(value) {
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		if(value != bounds.height) this.set_scaleY(value / bounds.height); else this.set_scaleY(1);
		return value;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value != this.__mask) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			this.__mask.__maskCached = false;
			this.__mask.__setTransformDirty();
			this.__mask.__setRenderDirty();
			this.__maskGraphics = null;
		}
		if(value != null) value.__isMask = true;
		return this.__mask = value;
	}
	,get_mouseX: function() {
		if(this.stage != null) return this.globalToLocal(new openfl.geom.Point(this.stage.__mouseX,0)).x;
		return 0;
	}
	,get_mouseY: function() {
		if(this.stage != null) return this.globalToLocal(new openfl.geom.Point(0,this.stage.__mouseY)).y;
		return 0;
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_root: function() {
		if(this.stage != null) return openfl.Lib.current;
		return null;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__rotation = value;
	}
	,get_scaleX: function() {
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(value != this.__scaleX) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scaleX = value;
	}
	,get_scaleY: function() {
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(this.__scaleY != value) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scaleY = value;
	}
	,get_scrollRect: function() {
		return this.__scrollRect;
	}
	,set_scrollRect: function(value) {
		if(value != this.__scrollRect) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__scrollRect = value;
	}
	,get_transform: function() {
		if(this.__transform == null) this.__transform = new openfl.geom.Transform(this);
		return this.__transform;
	}
	,set_transform: function(value) {
		if(value == null) throw new openfl.errors.TypeError("Parameter transform must be non-null.");
		if(this.__transform == null) this.__transform = new openfl.geom.Transform(this);
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl.display.DisplayObject.__worldTransformDirty++;
		}
		this.__transform.set_matrix(value.get_matrix().clone());
		this.__transform.set_colorTransform(value.get_colorTransform().__clone());
		return this.__transform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		return bounds.width * this.get_scaleX();
	}
	,set_width: function(value) {
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		if(value != bounds.width) this.set_scaleX(value / bounds.width); else this.set_scaleX(1);
		return value;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		if(value != this.__x) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__x = value;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		if(value != this.__y) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__y = value;
	}
	,__class__: openfl.display.DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_transform:"get_transform",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",get_root:"get_root",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
openfl.display.InteractiveObject = function() {
	openfl.display.DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.tabEnabled = true;
	this.tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl.display.InteractiveObject;
openfl.display.InteractiveObject.__name__ = ["openfl","display","InteractiveObject"];
openfl.display.InteractiveObject.__super__ = openfl.display.DisplayObject;
openfl.display.InteractiveObject.prototype = $extend(openfl.display.DisplayObject.prototype,{
	doubleClickEnabled: null
	,focusRect: null
	,mouseEnabled: null
	,needsSoftKeyboard: null
	,softKeyboardInputAreaOfInterest: null
	,tabEnabled: null
	,tabIndex: null
	,requestSoftKeyboard: function() {
		openfl.Lib.notImplemented("InteractiveObject.requestSoftKeyboard");
		return false;
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) this.parent.__getInteractive(stack);
		}
		return true;
	}
	,__class__: openfl.display.InteractiveObject
});
openfl.display.DisplayObjectContainer = function() {
	openfl.display.InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__children = new Array();
	this.__removedChildren = new Array();
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl.display.DisplayObjectContainer;
openfl.display.DisplayObjectContainer.__name__ = ["openfl","display","DisplayObjectContainer"];
openfl.display.DisplayObjectContainer.__super__ = openfl.display.InteractiveObject;
openfl.display.DisplayObjectContainer.prototype = $extend(openfl.display.InteractiveObject.prototype,{
	mouseChildren: null
	,numChildren: null
	,tabChildren: null
	,__children: null
	,__removedChildren: null
	,addChild: function(child) {
		if(child != null) {
			if(child.parent != null) child.parent.removeChild(child);
			this.__children.push(child);
			child.parent = this;
			if(this.stage != null) child.__setStageReference(this.stage);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl.events.Event(openfl.events.Event.ADDED,true);
			event.target = child;
			child.dispatchEvent(event);
		}
		return child;
	}
	,addChildAt: function(child,index) {
		if(index > this.__children.length || index < 0) throw "Invalid index position " + index;
		if(child.parent == this) HxOverrides.remove(this.__children,child); else {
			if(child.parent != null) child.parent.removeChild(child);
			child.parent = this;
			if(this.stage != null) child.__setStageReference(this.stage);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl.events.Event(openfl.events.Event.ADDED,true);
			event.target = child;
			child.dispatchEvent(event);
		}
		this.__children.splice(index,0,child);
		return child;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		while(child != this && child != null) child = child.parent;
		return child == this;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.__children[index];
		return null;
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) return child;
		}
		return null;
	}
	,getChildIndex: function(child) {
		var _g1 = 0;
		var _g = this.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__children[i] == child) return i;
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		point = this.localToGlobal(point);
		var stack = new Array();
		this.__hitTest(point.x,point.y,false,stack,false);
		stack.reverse();
		return stack;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			if(this.stage != null) child.__setStageReference(null);
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
			child.dispatchEvent(new openfl.events.Event(openfl.events.Event.REMOVED,true));
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.removeChild(this.__children[index]);
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) return;
		}
		if(beginIndex > this.__children.length - 1) return; else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) throw new openfl.errors.RangeError("The supplied index is out of bounds.");
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			numRemovals--;
		}
	}
	,setChildIndex: function(child,index) {
		if(index >= 0 && index <= this.__children.length && child.parent == this) {
			HxOverrides.remove(this.__children,child);
			this.__children.splice(index,0,child);
		}
	}
	,swapChildren: function(child1,child2) {
		if(child1.parent == this && child2.parent == this) {
			var index1 = HxOverrides.indexOf(this.__children,child1,0);
			var index2 = HxOverrides.indexOf(this.__children,child2,0);
			this.__children[index1] = child2;
			this.__children[index2] = child1;
		}
	}
	,swapChildrenAt: function(child1,child2) {
		var swap = this.__children[child1];
		this.__children[child1] = this.__children[child2];
		this.__children[child2] = swap;
		swap = null;
	}
	,__broadcast: function(event,notifyChilden) {
		if(event.target == null) event.target = this;
		if(notifyChilden) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__broadcast(event,true);
				if(event.__isCancelled) return true;
			}
		}
		return openfl.display.InteractiveObject.prototype.__broadcast.call(this,event,notifyChilden);
	}
	,__getBounds: function(rect,matrix) {
		openfl.display.InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) return;
		var matrixCache = null;
		if(matrix != null) {
			matrixCache = this.__worldTransform;
			this.__worldTransform = matrix;
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(!child.__renderable) continue;
			child.__getBounds(rect,null);
		}
		if(matrix != null) {
			this.__worldTransform = matrixCache;
			this.__updateChildren(true);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || interactiveOnly && !this.mouseEnabled) return false;
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true)) {
					if(stack != null) stack.push(this);
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true)) {
							hitTest = true;
							if(interactive) break;
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,this);
					return true;
				}
			}
		} else while(--i >= 0) this.__children[i].__hitTest(x,y,shapeFlag,stack,false);
		return false;
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		openfl.display.InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		if(this.get_scrollRect() != null) {
		}
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCanvas(renderSession);
		}
		this.__removedChildren = [];
		if(this.__mask != null) renderSession.maskManager.popMask();
		if(this.get_scrollRect() != null) {
		}
	}
	,__renderDOM: function(renderSession) {
		openfl.display.InteractiveObject.prototype.__renderDOM.call(this,renderSession);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderDOM(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.length) {
			var orphan = _g11[_g2];
			++_g2;
			if(orphan.stage == null) orphan.__renderDOM(renderSession);
		}
		this.__removedChildren = [];
		if(this.__mask != null) renderSession.maskManager.popMask();
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		var masked = this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.length > 0;
		if(masked) {
			renderSession.spriteBatch.stop();
			renderSession.maskManager.pushMask(this,renderSession);
			renderSession.spriteBatch.start();
		}
		openfl.display.InteractiveObject.prototype.__renderGL.call(this,renderSession);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderGL(renderSession);
		}
		if(masked) {
			renderSession.spriteBatch.stop();
			renderSession.maskManager.popMask(this,renderSession);
			renderSession.spriteBatch.start();
		}
		this.__removedChildren = [];
	}
	,__renderMask: function(renderSession) {
		if(this.__graphics != null) openfl._internal.renderer.canvas.CanvasGraphics.renderMask(this.__graphics,renderSession);
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		renderSession.context.rect(0,0,bounds.width,bounds.height);
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) this.dispatchEvent(new openfl.events.Event(openfl.events.Event.REMOVED_FROM_STAGE,false,false));
			this.stage = stage;
			if(stage != null) this.dispatchEvent(new openfl.events.Event(openfl.events.Event.ADDED_TO_STAGE,false,false));
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setStageReference(stage);
				}
			}
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		openfl.display.InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren,maskGraphics);
		if(!this.__renderable && !this.__isMask && !this.__worldAlphaChanged && !this.__worldClipChanged && !this.__worldTransformChanged && !this.__worldVisibleChanged) return;
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true,maskGraphics);
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl.display.InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__update(transformOnly,true);
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,__class__: openfl.display.DisplayObjectContainer
	,__properties__: $extend(openfl.display.InteractiveObject.prototype.__properties__,{get_numChildren:"get_numChildren"})
});
openfl.display.Sprite = function() {
	openfl.display.DisplayObjectContainer.call(this);
	this.buttonMode = false;
	this.useHandCursor = true;
	this.loaderInfo = openfl.display.LoaderInfo.create(null);
};
$hxClasses["openfl.display.Sprite"] = openfl.display.Sprite;
openfl.display.Sprite.__name__ = ["openfl","display","Sprite"];
openfl.display.Sprite.__super__ = openfl.display.DisplayObjectContainer;
openfl.display.Sprite.prototype = $extend(openfl.display.DisplayObjectContainer.prototype,{
	buttonMode: null
	,graphics: null
	,useHandCursor: null
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
		if(this.stage != null) this.stage.__startDrag(this,lockCenter,bounds);
	}
	,stopDrag: function() {
		if(this.stage != null) this.stage.__stopDrag(this);
	}
	,__getCursor: function() {
		if(this.buttonMode && this.useHandCursor) return lime.ui.MouseCursor.POINTER; else return null;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || interactiveOnly && !this.mouseEnabled) return false;
		var length = 0;
		if(stack != null) length = stack.length;
		if(openfl.display.DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly)) return interactiveOnly; else if(this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getTransform())) {
			if(stack != null) stack.push(this);
			return true;
		}
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl.display.Graphics();
			this.__graphics.__owner = this;
		}
		return this.__graphics;
	}
	,__class__: openfl.display.Sprite
	,__properties__: $extend(openfl.display.DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics"})
});
var com = {};
com.imagination = {};
com.imagination.robotlegs = {};
com.imagination.robotlegs.starling = {};
com.imagination.robotlegs.starling.Main = function() {
	openfl.display.Sprite.call(this);
	this._context = new robotlegs.bender.framework.impl.Context().install([robotlegs.bender.bundles.ImagBundle,robotlegs.bender.bundles.Away3DBundle,robotlegs.bender.bundles.StarlingBundle]).configure(new com.imagination.robotlegs.starling.model.config.ConfigModel()).configure([com.imagination.robotlegs.starling.commands.CommandConfig,com.imagination.robotlegs.starling.model.ModelConfig,com.imagination.robotlegs.starling.services.ServiceConfig,com.imagination.robotlegs.starling.view.ViewConfig]).configure(new robotlegs.bender.extensions.contextView.ContextView(this));
};
$hxClasses["com.imagination.robotlegs.starling.Main"] = com.imagination.robotlegs.starling.Main;
com.imagination.robotlegs.starling.Main.__name__ = ["com","imagination","robotlegs","starling","Main"];
com.imagination.robotlegs.starling.Main.__super__ = openfl.display.Sprite;
com.imagination.robotlegs.starling.Main.prototype = $extend(openfl.display.Sprite.prototype,{
	_context: null
	,__class__: com.imagination.robotlegs.starling.Main
});
var DocumentClass = function() {
	openfl.Lib.current.addChild(this);
	com.imagination.robotlegs.starling.Main.call(this);
	this.dispatchEvent(new openfl.events.Event(openfl.events.Event.ADDED_TO_STAGE,false,false));
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = ["DocumentClass"];
DocumentClass.__super__ = com.imagination.robotlegs.starling.Main;
DocumentClass.prototype = $extend(com.imagination.robotlegs.starling.Main.prototype,{
	__class__: DocumentClass
});
var lime = {};
lime.AssetLibrary = function() {
};
$hxClasses["lime.AssetLibrary"] = lime.AssetLibrary;
lime.AssetLibrary.__name__ = ["lime","AssetLibrary"];
lime.AssetLibrary.prototype = {
	eventCallback: null
	,exists: function(id,type) {
		return false;
	}
	,getAudioBuffer: function(id) {
		return null;
	}
	,getBytes: function(id) {
		return null;
	}
	,getFont: function(id) {
		return null;
	}
	,getImage: function(id) {
		return null;
	}
	,getPath: function(id) {
		return null;
	}
	,getText: function(id) {
		var bytes = this.getBytes(id);
		if(bytes == null) return null; else return bytes.readUTFBytes(bytes.length);
	}
	,isLocal: function(id,type) {
		return true;
	}
	,list: function(type) {
		return null;
	}
	,load: function(handler) {
		handler(this);
	}
	,loadAudioBuffer: function(id,handler) {
		handler(this.getAudioBuffer(id));
	}
	,loadBytes: function(id,handler) {
		handler(this.getBytes(id));
	}
	,loadFont: function(id,handler) {
		handler(this.getFont(id));
	}
	,loadImage: function(id,handler) {
		handler(this.getImage(id));
	}
	,loadText: function(id,handler) {
		var callback = function(bytes) {
			if(bytes == null) handler(null); else handler(bytes.readUTFBytes(bytes.length));
		};
		this.loadBytes(id,callback);
	}
	,__class__: lime.AssetLibrary
};
var DefaultAssetLibrary = function() {
	this.type = new haxe.ds.StringMap();
	this.path = new haxe.ds.StringMap();
	this.className = new haxe.ds.StringMap();
	lime.AssetLibrary.call(this);
	var id;
	id = "img/atlas.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/atlas.xml";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "img/landscape.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/stars.pex";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "img/stars.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "xml/config.xml";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "xml/_example_config.xml";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	var assetsPrefix = ApplicationMain.config.assetsPrefix;
	if(assetsPrefix != null) {
		var $it0 = this.path.keys();
		while( $it0.hasNext() ) {
			var k = $it0.next();
			var value = assetsPrefix + this.path.get(k);
			this.path.set(k,value);
		}
	}
};
$hxClasses["DefaultAssetLibrary"] = DefaultAssetLibrary;
DefaultAssetLibrary.__name__ = ["DefaultAssetLibrary"];
DefaultAssetLibrary.__super__ = lime.AssetLibrary;
DefaultAssetLibrary.prototype = $extend(lime.AssetLibrary.prototype,{
	className: null
	,path: null
	,type: null
	,lastModified: null
	,timer: null
	,exists: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js.Boot.__cast(type , String); else requestedType = null;
		var assetType = this.type.get(id);
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) return true;
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") return true;
		}
		return false;
	}
	,getAudioBuffer: function(id) {
		return null;
	}
	,getBytes: function(id) {
		var bytes = null;
		var data = ((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = lime.app.Preloader.loaders.get(key);
			return $r;
		}(this))).data;
		if(typeof(data) == "string") {
			bytes = new lime.utils.ByteArray();
			bytes.writeUTFBytes(data);
		} else if(js.Boot.__instanceof(data,lime.utils.ByteArray)) bytes = data; else bytes = null;
		if(bytes != null) {
			bytes.position = 0;
			return bytes;
		} else return null;
	}
	,getFont: function(id) {
		return js.Boot.__cast(Type.createInstance(this.className.get(id),[]) , lime.text.Font);
	}
	,getImage: function(id) {
		return lime.graphics.Image.fromImageElement((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = lime.app.Preloader.images.get(key);
			return $r;
		}(this)));
	}
	,getPath: function(id) {
		return this.path.get(id);
	}
	,getText: function(id) {
		var bytes = null;
		var data = ((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = lime.app.Preloader.loaders.get(key);
			return $r;
		}(this))).data;
		if(typeof(data) == "string") return data; else if(js.Boot.__instanceof(data,lime.utils.ByteArray)) bytes = data; else bytes = null;
		if(bytes != null) {
			bytes.position = 0;
			return bytes.readUTFBytes(bytes.length);
		} else return null;
	}
	,isLocal: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js.Boot.__cast(type , String); else requestedType = null;
		return true;
	}
	,list: function(type) {
		var requestedType;
		if(type != null) requestedType = js.Boot.__cast(type , String); else requestedType = null;
		var items = [];
		var $it0 = this.type.keys();
		while( $it0.hasNext() ) {
			var id = $it0.next();
			if(requestedType == null || this.exists(id,type)) items.push(id);
		}
		return items;
	}
	,loadAudioBuffer: function(id,handler) {
		handler(this.getAudioBuffer(id));
	}
	,loadBytes: function(id,handler) {
		handler(this.getBytes(id));
	}
	,loadImage: function(id,handler) {
		handler(this.getImage(id));
	}
	,loadText: function(id,handler) {
		var callback = function(bytes) {
			if(bytes == null) handler(null); else handler(bytes.readUTFBytes(bytes.length));
		};
		this.loadBytes(id,callback);
	}
	,__class__: DefaultAssetLibrary
});
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) this.r.lastIndex = 0;
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) return this.r.m[n]; else throw "EReg::matched";
	}
	,matchedRight: function() {
		if(this.r.m == null) throw "No string matched";
		var sz = this.r.m.index + this.r.m[0].length;
		return this.r.s.substr(sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) throw "No string matched";
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(pos != null && pos != 0 && len != null && len < 0) return "";
	if(len == null) len = s.length;
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) pos = 0;
	} else if(len < 0) len = s.length + len - pos;
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) i = 0;
	}
	while(i < len) {
		if(a[i] === obj) return i;
		i++;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = HxOverrides.indexOf(a,obj,0);
	if(i == -1) return false;
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.foreach = function(it,f) {
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(!f(x)) return false;
	}
	return true;
};
Lambda.indexOf = function(it,v) {
	var i = 0;
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var v2 = $it0.next();
		if(v == v2) return i;
		i++;
	}
	return -1;
};
var IMap = function() { };
$hxClasses["IMap"] = IMap;
IMap.__name__ = ["IMap"];
IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,__class__: IMap
};
Math.__name__ = ["Math"];
var NMEPreloader = function() {
	openfl.display.Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var r = backgroundColor >> 16 & 255;
	var g = backgroundColor >> 8 & 255;
	var b = backgroundColor & 255;
	var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
	var color = 0;
	if(perceivedLuminosity < 70) color = 16777215;
	var x = 30;
	var height = 7;
	var y = this.getHeight() / 2 - height / 2;
	var width = this.getWidth() - x * 2;
	var padding = 2;
	this.outline = new openfl.display.Sprite();
	this.outline.get_graphics().beginFill(color,0.07);
	this.outline.get_graphics().drawRect(0,0,width,height);
	this.outline.set_x(x);
	this.outline.set_y(y);
	this.addChild(this.outline);
	this.progress = new openfl.display.Sprite();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - padding * 2,height - padding * 2);
	this.progress.set_x(x + padding);
	this.progress.set_y(y + padding);
	this.progress.set_scaleX(0);
	this.addChild(this.progress);
};
$hxClasses["NMEPreloader"] = NMEPreloader;
NMEPreloader.__name__ = ["NMEPreloader"];
NMEPreloader.__super__ = openfl.display.Sprite;
NMEPreloader.prototype = $extend(openfl.display.Sprite.prototype,{
	outline: null
	,progress: null
	,getBackgroundColor: function() {
		return 0;
	}
	,getHeight: function() {
		var height = 0;
		if(height > 0) return height; else return openfl.Lib.current.stage.stageHeight;
	}
	,getWidth: function() {
		var width = 0;
		if(width > 0) return width; else return openfl.Lib.current.stage.stageWidth;
	}
	,onInit: function() {
	}
	,onLoaded: function() {
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.COMPLETE));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = bytesLoaded / bytesTotal;
		if(percentLoaded > 1) percentLoaded = 1;
		this.progress.set_scaleX(percentLoaded);
	}
	,__class__: NMEPreloader
});
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) return null; else if(o.__properties__ && (tmp = o.__properties__["get_" + field])) return o[tmp](); else return o[field];
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	if(o.__properties__ && (tmp = o.__properties__["set_" + field])) o[tmp](value); else o[field] = value;
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) a.push(f);
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	return typeof(f) == "function" && !(f.__name__ || f.__ename__);
};
Reflect.compare = function(a,b) {
	if(a == b) return 0; else if(a > b) return 1; else return -1;
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) return true;
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) return false;
	return f1.scope == f2.scope && f1.method == f2.method && f1.method != null;
};
Reflect.isObject = function(v) {
	if(v == null) return false;
	var t = typeof(v);
	return t == "string" || t == "object" && v.__enum__ == null || t == "function" && (v.__name__ || v.__ename__) != null;
};
Reflect.isEnumValue = function(v) {
	return v != null && v.__enum__ != null;
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) return false;
	delete(o[field]);
	return true;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std["is"] = function(v,t) {
	return js.Boot.__instanceof(v,t);
};
Std.string = function(s) {
	return js.Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) v = parseInt(x);
	if(isNaN(v)) return null;
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,add: function(x) {
		this.b += Std.string(x);
	}
	,addSub: function(s,pos,len) {
		if(len == null) this.b += HxOverrides.substr(s,pos,null); else this.b += HxOverrides.substr(s,pos,len);
	}
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
};
StringTools.urlDecode = function(s) {
	return decodeURIComponent(s.split("+").join(" "));
};
StringTools.startsWith = function(s,start) {
	return s.length >= start.length && HxOverrides.substr(s,0,start.length) == start;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) while(s.length < digits) s = "0" + s;
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClass = function(o) {
	if(o == null) return null;
	return js.Boot.getClass(o);
};
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) return null;
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) return null;
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	default:
		throw "Too many arguments";
	}
	return null;
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type.enumEq = function(a,b) {
	if(a == b) return true;
	try {
		if(a[0] != b[0]) return false;
		var _g1 = 2;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!Type.enumEq(a[i],b[i])) return false;
		}
		var e = a.__enum__;
		if(e != b.__enum__ || e == null) return false;
	} catch( e1 ) {
		return false;
	}
	return true;
};
var _UInt = {};
_UInt.UInt_Impl_ = function() { };
$hxClasses["_UInt.UInt_Impl_"] = _UInt.UInt_Impl_;
_UInt.UInt_Impl_.__name__ = ["_UInt","UInt_Impl_"];
var XmlType = $hxClasses["XmlType"] = { __ename__ : true, __constructs__ : [] };
var Xml = function() {
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.Element = null;
Xml.PCData = null;
Xml.CData = null;
Xml.Comment = null;
Xml.DocType = null;
Xml.ProcessingInstruction = null;
Xml.Document = null;
Xml.parse = function(str) {
	return haxe.xml.Parser.parse(str);
};
Xml.createElement = function(name) {
	var r = new Xml();
	r.nodeType = Xml.Element;
	r._children = new Array();
	r._attributes = new haxe.ds.StringMap();
	r.set_nodeName(name);
	return r;
};
Xml.createPCData = function(data) {
	var r = new Xml();
	r.nodeType = Xml.PCData;
	r.set_nodeValue(data);
	return r;
};
Xml.createCData = function(data) {
	var r = new Xml();
	r.nodeType = Xml.CData;
	r.set_nodeValue(data);
	return r;
};
Xml.createComment = function(data) {
	var r = new Xml();
	r.nodeType = Xml.Comment;
	r.set_nodeValue(data);
	return r;
};
Xml.createDocType = function(data) {
	var r = new Xml();
	r.nodeType = Xml.DocType;
	r.set_nodeValue(data);
	return r;
};
Xml.createProcessingInstruction = function(data) {
	var r = new Xml();
	r.nodeType = Xml.ProcessingInstruction;
	r.set_nodeValue(data);
	return r;
};
Xml.createDocument = function() {
	var r = new Xml();
	r.nodeType = Xml.Document;
	r._children = new Array();
	return r;
};
Xml.prototype = {
	nodeType: null
	,_nodeName: null
	,_nodeValue: null
	,_attributes: null
	,_children: null
	,_parent: null
	,get_nodeName: function() {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._nodeName;
	}
	,set_nodeName: function(n) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._nodeName = n;
	}
	,set_nodeValue: function(v) {
		if(this.nodeType == Xml.Element || this.nodeType == Xml.Document) throw "bad nodeType";
		return this._nodeValue = v;
	}
	,get: function(att) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._attributes.get(att);
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		this._attributes.set(att,value);
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._attributes.exists(att);
	}
	,iterator: function() {
		if(this._children == null) throw "bad nodetype";
		return { cur : 0, x : this._children, hasNext : function() {
			return this.cur < this.x.length;
		}, next : function() {
			return this.x[this.cur++];
		}};
	}
	,elements: function() {
		if(this._children == null) throw "bad nodetype";
		return { cur : 0, x : this._children, hasNext : function() {
			var k = this.cur;
			var l = this.x.length;
			while(k < l) {
				if(this.x[k].nodeType == Xml.Element) break;
				k += 1;
			}
			this.cur = k;
			return k < l;
		}, next : function() {
			var k1 = this.cur;
			var l1 = this.x.length;
			while(k1 < l1) {
				var n = this.x[k1];
				k1 += 1;
				if(n.nodeType == Xml.Element) {
					this.cur = k1;
					return n;
				}
			}
			return null;
		}};
	}
	,elementsNamed: function(name) {
		if(this._children == null) throw "bad nodetype";
		return { cur : 0, x : this._children, hasNext : function() {
			var k = this.cur;
			var l = this.x.length;
			while(k < l) {
				var n = this.x[k];
				if(n.nodeType == Xml.Element && n._nodeName == name) break;
				k++;
			}
			this.cur = k;
			return k < l;
		}, next : function() {
			var k1 = this.cur;
			var l1 = this.x.length;
			while(k1 < l1) {
				var n1 = this.x[k1];
				k1++;
				if(n1.nodeType == Xml.Element && n1._nodeName == name) {
					this.cur = k1;
					return n1;
				}
			}
			return null;
		}};
	}
	,firstChild: function() {
		if(this._children == null) throw "bad nodetype";
		return this._children[0];
	}
	,firstElement: function() {
		if(this._children == null) throw "bad nodetype";
		var cur = 0;
		var l = this._children.length;
		while(cur < l) {
			var n = this._children[cur];
			if(n.nodeType == Xml.Element) return n;
			cur++;
		}
		return null;
	}
	,addChild: function(x) {
		if(this._children == null) throw "bad nodetype";
		if(x._parent != null) HxOverrides.remove(x._parent._children,x);
		x._parent = this;
		this._children.push(x);
	}
	,__class__: Xml
	,__properties__: {set_nodeValue:"set_nodeValue",set_nodeName:"set_nodeName",get_nodeName:"get_nodeName"}
};
var away3d = {};
away3d.Away3D = function() { };
$hxClasses["away3d.Away3D"] = away3d.Away3D;
away3d.Away3D.__name__ = ["away3d","Away3D"];
away3d.animators = {};
away3d.animators.IAnimationSet = function() { };
$hxClasses["away3d.animators.IAnimationSet"] = away3d.animators.IAnimationSet;
away3d.animators.IAnimationSet.__name__ = ["away3d","animators","IAnimationSet"];
away3d.animators.IAnimationSet.prototype = {
	hasAnimation: null
	,getAnimation: null
	,get_usesCPU: null
	,resetGPUCompatibility: null
	,cancelGPUCompatibility: null
	,getAGALVertexCode: null
	,getAGALFragmentCode: null
	,getAGALUVCode: null
	,doneAGALCode: null
	,activate: null
	,deactivate: null
	,__class__: away3d.animators.IAnimationSet
	,__properties__: {get_usesCPU:"get_usesCPU"}
};
away3d.animators.IAnimator = function() { };
$hxClasses["away3d.animators.IAnimator"] = away3d.animators.IAnimator;
away3d.animators.IAnimator.__name__ = ["away3d","animators","IAnimator"];
away3d.animators.IAnimator.prototype = {
	get_animationSet: null
	,setRenderState: null
	,testGPUCompatibility: null
	,addOwner: null
	,removeOwner: null
	,getAnimationState: null
	,getAnimationStateByName: null
	,clone: null
	,dispose: null
	,__class__: away3d.animators.IAnimator
	,__properties__: {get_animationSet:"get_animationSet"}
};
away3d.materials = {};
away3d.materials.compilation = {};
away3d.materials.compilation.ShaderRegisterCache = function(profile) {
	this._profile = profile;
};
$hxClasses["away3d.materials.compilation.ShaderRegisterCache"] = away3d.materials.compilation.ShaderRegisterCache;
away3d.materials.compilation.ShaderRegisterCache.__name__ = ["away3d","materials","compilation","ShaderRegisterCache"];
away3d.materials.compilation.ShaderRegisterCache.prototype = {
	_fragmentTempCache: null
	,_vertexTempCache: null
	,_varyingCache: null
	,_fragmentConstantsCache: null
	,_vertexConstantsCache: null
	,_textureCache: null
	,_vertexAttributesCache: null
	,_vertexConstantOffset: null
	,_vertexAttributesOffset: null
	,_varyingsOffset: null
	,_fragmentConstantOffset: null
	,_fragmentOutputRegister: null
	,_vertexOutputRegister: null
	,_numUsedVertexConstants: null
	,_numUsedFragmentConstants: null
	,_numUsedStreams: null
	,_numUsedTextures: null
	,_numUsedVaryings: null
	,_profile: null
	,reset: function() {
		this._fragmentTempCache = new away3d.materials.compilation.RegisterPool("ft",8,false);
		this._vertexTempCache = new away3d.materials.compilation.RegisterPool("vt",8,false);
		this._varyingCache = new away3d.materials.compilation.RegisterPool("v",8);
		this._textureCache = new away3d.materials.compilation.RegisterPool("fs",8);
		this._vertexAttributesCache = new away3d.materials.compilation.RegisterPool("va",8);
		this._fragmentConstantsCache = new away3d.materials.compilation.RegisterPool("fc",28);
		this._vertexConstantsCache = new away3d.materials.compilation.RegisterPool("vc",128);
		this._fragmentOutputRegister = new away3d.materials.compilation.ShaderRegisterElement("oc",-1);
		this._vertexOutputRegister = new away3d.materials.compilation.ShaderRegisterElement("op",-1);
		this._numUsedVertexConstants = 0;
		this._numUsedStreams = 0;
		this._numUsedTextures = 0;
		this._numUsedVaryings = 0;
		this._numUsedFragmentConstants = 0;
		var i;
		i = 0;
		while(i < this._vertexAttributesOffset) {
			this.getFreeVertexAttribute();
			++i;
		}
		i = 0;
		while(i < this._vertexConstantOffset) {
			this.getFreeVertexConstant();
			++i;
		}
		i = 0;
		while(i < this._varyingsOffset) {
			this.getFreeVarying();
			++i;
		}
		i = 0;
		while(i < this._fragmentConstantOffset) {
			this.getFreeFragmentConstant();
			++i;
		}
	}
	,dispose: function() {
		this._fragmentTempCache.dispose();
		this._vertexTempCache.dispose();
		this._varyingCache.dispose();
		this._fragmentConstantsCache.dispose();
		this._vertexAttributesCache.dispose();
		this._fragmentTempCache = null;
		this._vertexTempCache = null;
		this._varyingCache = null;
		this._fragmentConstantsCache = null;
		this._vertexAttributesCache = null;
		this._fragmentOutputRegister = null;
		this._vertexOutputRegister = null;
	}
	,addFragmentTempUsages: function(register,usageCount) {
		this._fragmentTempCache.addUsage(register,usageCount);
	}
	,removeFragmentTempUsage: function(register) {
		this._fragmentTempCache.removeUsage(register);
	}
	,addVertexTempUsages: function(register,usageCount) {
		this._vertexTempCache.addUsage(register,usageCount);
	}
	,removeVertexTempUsage: function(register) {
		this._vertexTempCache.removeUsage(register);
	}
	,getFreeFragmentVectorTemp: function() {
		return this._fragmentTempCache.requestFreeVectorReg();
	}
	,getFreeFragmentSingleTemp: function() {
		return this._fragmentTempCache.requestFreeRegComponent();
	}
	,getFreeVarying: function() {
		++this._numUsedVaryings;
		return this._varyingCache.requestFreeVectorReg();
	}
	,getFreeFragmentConstant: function() {
		++this._numUsedFragmentConstants;
		return this._fragmentConstantsCache.requestFreeVectorReg();
	}
	,getFreeVertexConstant: function() {
		++this._numUsedVertexConstants;
		return this._vertexConstantsCache.requestFreeVectorReg();
	}
	,getFreeVertexVectorTemp: function() {
		return this._vertexTempCache.requestFreeVectorReg();
	}
	,getFreeVertexSingleTemp: function() {
		return this._vertexTempCache.requestFreeRegComponent();
	}
	,getFreeVertexAttribute: function() {
		++this._numUsedStreams;
		return this._vertexAttributesCache.requestFreeVectorReg();
	}
	,getFreeTextureReg: function() {
		++this._numUsedTextures;
		return this._textureCache.requestFreeVectorReg();
	}
	,get_vertexConstantOffset: function() {
		return this._vertexConstantOffset;
	}
	,set_vertexConstantOffset: function(vertexConstantOffset) {
		this._vertexConstantOffset = vertexConstantOffset;
		return vertexConstantOffset;
	}
	,get_vertexAttributesOffset: function() {
		return this._vertexAttributesOffset;
	}
	,set_vertexAttributesOffset: function(value) {
		this._vertexAttributesOffset = value;
		return value;
	}
	,get_varyingsOffset: function() {
		return this._varyingsOffset;
	}
	,set_varyingsOffset: function(value) {
		this._varyingsOffset = value;
		return value;
	}
	,get_fragmentConstantOffset: function() {
		return this._fragmentConstantOffset;
	}
	,set_fragmentConstantOffset: function(value) {
		this._fragmentConstantOffset = value;
		return value;
	}
	,get_fragmentOutputRegister: function() {
		return this._fragmentOutputRegister;
	}
	,get_numUsedVertexConstants: function() {
		return this._numUsedVertexConstants;
	}
	,get_numUsedFragmentConstants: function() {
		return this._numUsedFragmentConstants;
	}
	,get_numUsedStreams: function() {
		return this._numUsedStreams;
	}
	,get_numUsedTextures: function() {
		return this._numUsedTextures;
	}
	,get_numUsedVaryings: function() {
		return this._numUsedVaryings;
	}
	,__class__: away3d.materials.compilation.ShaderRegisterCache
	,__properties__: {get_numUsedVaryings:"get_numUsedVaryings",get_numUsedTextures:"get_numUsedTextures",get_numUsedStreams:"get_numUsedStreams",get_numUsedFragmentConstants:"get_numUsedFragmentConstants",get_numUsedVertexConstants:"get_numUsedVertexConstants",get_fragmentOutputRegister:"get_fragmentOutputRegister",set_fragmentConstantOffset:"set_fragmentConstantOffset",get_fragmentConstantOffset:"get_fragmentConstantOffset",set_varyingsOffset:"set_varyingsOffset",get_varyingsOffset:"get_varyingsOffset",set_vertexAttributesOffset:"set_vertexAttributesOffset",get_vertexAttributesOffset:"get_vertexAttributesOffset",set_vertexConstantOffset:"set_vertexConstantOffset",get_vertexConstantOffset:"get_vertexConstantOffset"}
};
away3d.animators.data = {};
away3d.animators.data.AnimationRegisterCache = function(profile) {
	away3d.materials.compilation.ShaderRegisterCache.call(this,profile);
	this.indexDictionary = new haxe.ds.ObjectMap();
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.vertexConstantData = this1;
	var this3;
	this3 = new openfl.VectorData();
	var this4;
	this4 = new Array(0);
	this3.data = this4;
	this3.length = 0;
	this3.fixed = false;
	this.fragmentConstantData = this3;
};
$hxClasses["away3d.animators.data.AnimationRegisterCache"] = away3d.animators.data.AnimationRegisterCache;
away3d.animators.data.AnimationRegisterCache.__name__ = ["away3d","animators","data","AnimationRegisterCache"];
away3d.animators.data.AnimationRegisterCache.__super__ = away3d.materials.compilation.ShaderRegisterCache;
away3d.animators.data.AnimationRegisterCache.prototype = $extend(away3d.materials.compilation.ShaderRegisterCache.prototype,{
	positionAttribute: null
	,uvAttribute: null
	,positionTarget: null
	,scaleAndRotateTarget: null
	,velocityTarget: null
	,vertexTime: null
	,vertexLife: null
	,vertexZeroConst: null
	,vertexOneConst: null
	,vertexTwoConst: null
	,uvTarget: null
	,colorAddTarget: null
	,colorMulTarget: null
	,colorAddVary: null
	,colorMulVary: null
	,uvVar: null
	,rotationRegisters: null
	,needFragmentAnimation: null
	,needUVAnimation: null
	,sourceRegisters: null
	,targetRegisters: null
	,indexDictionary: null
	,hasUVNode: null
	,needVelocity: null
	,hasBillboard: null
	,hasColorMulNode: null
	,hasColorAddNode: null
	,reset: function() {
		away3d.materials.compilation.ShaderRegisterCache.prototype.reset.call(this);
		this.rotationRegisters = new Array();
		this.positionAttribute = this.getRegisterFromString(this.sourceRegisters[0]);
		this.scaleAndRotateTarget = this.getRegisterFromString(this.targetRegisters[0]);
		this.addVertexTempUsages(this.scaleAndRotateTarget,1);
		var i = 1;
		while(i < this.targetRegisters.length) {
			this.rotationRegisters.push(this.getRegisterFromString(this.targetRegisters[i]));
			this.addVertexTempUsages(this.rotationRegisters[i - 1],1);
			i++;
		}
		this.scaleAndRotateTarget = new away3d.materials.compilation.ShaderRegisterElement(this.scaleAndRotateTarget.get_regName(),this.scaleAndRotateTarget.get_index());
		this.vertexZeroConst = this.getFreeVertexConstant();
		this.vertexZeroConst = new away3d.materials.compilation.ShaderRegisterElement(this.vertexZeroConst.get_regName(),this.vertexZeroConst.get_index(),0);
		this.vertexOneConst = new away3d.materials.compilation.ShaderRegisterElement(this.vertexZeroConst.get_regName(),this.vertexZeroConst.get_index(),1);
		this.vertexTwoConst = new away3d.materials.compilation.ShaderRegisterElement(this.vertexZeroConst.get_regName(),this.vertexZeroConst.get_index(),2);
		this.positionTarget = this.getFreeVertexVectorTemp();
		this.addVertexTempUsages(this.positionTarget,1);
		this.positionTarget = new away3d.materials.compilation.ShaderRegisterElement(this.positionTarget.get_regName(),this.positionTarget.get_index());
		if(this.needVelocity) {
			this.velocityTarget = this.getFreeVertexVectorTemp();
			this.addVertexTempUsages(this.velocityTarget,1);
			this.velocityTarget = new away3d.materials.compilation.ShaderRegisterElement(this.velocityTarget.get_regName(),this.velocityTarget.get_index());
			this.vertexTime = new away3d.materials.compilation.ShaderRegisterElement(this.velocityTarget.get_regName(),this.velocityTarget.get_index(),3);
			this.vertexLife = new away3d.materials.compilation.ShaderRegisterElement(this.positionTarget.get_regName(),this.positionTarget.get_index(),3);
		} else {
			var tempTime = this.getFreeVertexVectorTemp();
			this.addVertexTempUsages(tempTime,1);
			this.vertexTime = new away3d.materials.compilation.ShaderRegisterElement(tempTime.get_regName(),tempTime.get_index(),0);
			this.vertexLife = new away3d.materials.compilation.ShaderRegisterElement(tempTime.get_regName(),tempTime.get_index(),1);
		}
	}
	,setUVSourceAndTarget: function(UVAttribute,UVVaring) {
		this.uvVar = this.getRegisterFromString(UVVaring);
		this.uvAttribute = this.getRegisterFromString(UVAttribute);
		this.uvTarget = new away3d.materials.compilation.ShaderRegisterElement(this.positionTarget.get_regName(),this.positionTarget.get_index());
	}
	,setRegisterIndex: function(node,parameterIndex,registerIndex) {
		var aNode;
		if(this.indexDictionary.h.__keys__[node.__id__] != null) aNode = this.indexDictionary.h[node.__id__]; else aNode = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8,0);
		aNode[parameterIndex] = registerIndex;
		this.indexDictionary.set(node,aNode);
	}
	,getRegisterIndex: function(node,parameterIndex) {
		return this.indexDictionary.h[node.__id__][parameterIndex];
	}
	,getInitCode: function() {
		var len = this.sourceRegisters.length;
		var code = "";
		var i = 0;
		while(i < len) {
			code += "mov " + this.targetRegisters[i] + "," + this.sourceRegisters[i] + "\n";
			i++;
		}
		code += "mov " + Std.string(this.positionTarget) + ".xyz," + this.vertexZeroConst.toString() + "\n";
		if(this.needVelocity) code += "mov " + Std.string(this.velocityTarget) + ".xyz," + this.vertexZeroConst.toString() + "\n";
		return code;
	}
	,getCombinationCode: function() {
		return "add " + Std.string(this.scaleAndRotateTarget) + ".xyz," + Std.string(this.scaleAndRotateTarget) + ".xyz," + Std.string(this.positionTarget) + ".xyz\n";
	}
	,initColorRegisters: function() {
		var code = "";
		if(this.hasColorMulNode) {
			this.colorMulTarget = this.getFreeVertexVectorTemp();
			this.addVertexTempUsages(this.colorMulTarget,1);
			this.colorMulVary = this.getFreeVarying();
			code += "mov " + Std.string(this.colorMulTarget) + "," + Std.string(this.vertexOneConst) + "\n";
		}
		if(this.hasColorAddNode) {
			this.colorAddTarget = this.getFreeVertexVectorTemp();
			this.addVertexTempUsages(this.colorAddTarget,1);
			this.colorAddVary = this.getFreeVarying();
			code += "mov " + Std.string(this.colorAddTarget) + "," + Std.string(this.vertexZeroConst) + "\n";
		}
		return code;
	}
	,getColorPassCode: function() {
		var code = "";
		if(this.needFragmentAnimation && (this.hasColorAddNode || this.hasColorMulNode)) {
			if(this.hasColorMulNode) code += "mov " + Std.string(this.colorMulVary) + "," + Std.string(this.colorMulTarget) + "\n";
			if(this.hasColorAddNode) code += "mov " + Std.string(this.colorAddVary) + "," + Std.string(this.colorAddTarget) + "\n";
		}
		return code;
	}
	,getColorCombinationCode: function(shadedTarget) {
		var code = "";
		if(this.needFragmentAnimation && (this.hasColorAddNode || this.hasColorMulNode)) {
			var colorTarget = this.getRegisterFromString(shadedTarget);
			this.addFragmentTempUsages(colorTarget,1);
			if(this.hasColorMulNode) code += "mul " + Std.string(colorTarget) + "," + Std.string(colorTarget) + "," + Std.string(this.colorMulVary) + "\n";
			if(this.hasColorAddNode) code += "add " + Std.string(colorTarget) + "," + Std.string(colorTarget) + "," + Std.string(this.colorAddVary) + "\n";
		}
		return code;
	}
	,getRegisterFromString: function(code) {
		var er = new EReg("([a-z]+)([\\d]+)","");
		er.match(code);
		return new away3d.materials.compilation.ShaderRegisterElement(er.matched(1),Std.parseInt(er.matched(2)));
	}
	,vertexConstantData: null
	,fragmentConstantData: null
	,_numVertexConstant: null
	,_numFragmentConstant: null
	,get_numVertexConstant: function() {
		return this._numVertexConstant;
	}
	,get_numFragmentConstant: function() {
		return this._numFragmentConstant;
	}
	,setDataLength: function() {
		this._numVertexConstant = this._numUsedVertexConstants - this._vertexConstantOffset;
		this._numFragmentConstant = this._numUsedFragmentConstants - this._fragmentConstantOffset;
		away3d.utils.ArrayUtils.reSize(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB(this.vertexConstantData),this._numVertexConstant * 4);
		away3d.utils.ArrayUtils.reSize(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB(this.fragmentConstantData),this._numFragmentConstant * 4);
	}
	,setVertexConst: function(index,x,y,z,w) {
		if(w == null) w = 0;
		if(z == null) z = 0;
		if(y == null) y = 0;
		if(x == null) x = 0;
		var _index = (index - this._vertexConstantOffset) * 4;
		var this1 = this.vertexConstantData;
		var key = _index++;
		if(!this1.fixed) {
			if(key >= this1.length) this1.length = key + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[key] = x;
		var this3 = this.vertexConstantData;
		var key1 = _index++;
		if(!this3.fixed) {
			if(key1 >= this3.length) this3.length = key1 + 1;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[key1] = y;
		var this5 = this.vertexConstantData;
		var key2 = _index++;
		if(!this5.fixed) {
			if(key2 >= this5.length) this5.length = key2 + 1;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[key2] = z;
		var this7 = this.vertexConstantData;
		if(!this7.fixed) {
			if(_index >= this7.length) this7.length = _index + 1;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[_index] = w;
	}
	,setVertexConstFromVector: function(index,data) {
		var _index = (index - this._vertexConstantOffset) * 4;
		var i = 0;
		while(i < data.length) {
			var this1 = this.vertexConstantData;
			var key = _index++;
			if(!this1.fixed) {
				if(key >= this1.length) this1.length = key + 1;
				if(this1.data.length < this1.length) {
					var data1;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data1 = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data1,0,this1.data.length);
					this1.data = data1;
				}
			}
			this1.data[key] = data[i];
			i++;
		}
	}
	,setVertexConstFromMatrix: function(index,matrix) {
		var rawData = matrix.rawData;
		var _index = (index - this._vertexConstantOffset) * 4;
		var this1 = this.vertexConstantData;
		var key = _index++;
		if(!this1.fixed) {
			if(key >= this1.length) this1.length = key + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[key] = rawData.data[0];
		var this3 = this.vertexConstantData;
		var key1 = _index++;
		if(!this3.fixed) {
			if(key1 >= this3.length) this3.length = key1 + 1;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[key1] = rawData.data[4];
		var this5 = this.vertexConstantData;
		var key2 = _index++;
		if(!this5.fixed) {
			if(key2 >= this5.length) this5.length = key2 + 1;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[key2] = rawData.data[8];
		var this7 = this.vertexConstantData;
		var key3 = _index++;
		if(!this7.fixed) {
			if(key3 >= this7.length) this7.length = key3 + 1;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[key3] = rawData.data[12];
		var this9 = this.vertexConstantData;
		var key4 = _index++;
		if(!this9.fixed) {
			if(key4 >= this9.length) this9.length = key4 + 1;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[key4] = rawData.data[1];
		var this11 = this.vertexConstantData;
		var key5 = _index++;
		if(!this11.fixed) {
			if(key5 >= this11.length) this11.length = key5 + 1;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[key5] = rawData.data[5];
		var this13 = this.vertexConstantData;
		var key6 = _index++;
		if(!this13.fixed) {
			if(key6 >= this13.length) this13.length = key6 + 1;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[key6] = rawData.data[9];
		var this15 = this.vertexConstantData;
		var key7 = _index++;
		if(!this15.fixed) {
			if(key7 >= this15.length) this15.length = key7 + 1;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[key7] = rawData.data[13];
		var this17 = this.vertexConstantData;
		var key8 = _index++;
		if(!this17.fixed) {
			if(key8 >= this17.length) this17.length = key8 + 1;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[key8] = rawData.data[2];
		var this19 = this.vertexConstantData;
		var key9 = _index++;
		if(!this19.fixed) {
			if(key9 >= this19.length) this19.length = key9 + 1;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[key9] = rawData.data[6];
		var this21 = this.vertexConstantData;
		var key10 = _index++;
		if(!this21.fixed) {
			if(key10 >= this21.length) this21.length = key10 + 1;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[key10] = rawData.data[10];
		var this23 = this.vertexConstantData;
		var key11 = _index++;
		if(!this23.fixed) {
			if(key11 >= this23.length) this23.length = key11 + 1;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[key11] = rawData.data[14];
		var this25 = this.vertexConstantData;
		var key12 = _index++;
		if(!this25.fixed) {
			if(key12 >= this25.length) this25.length = key12 + 1;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[key12] = rawData.data[3];
		var this27 = this.vertexConstantData;
		var key13 = _index++;
		if(!this27.fixed) {
			if(key13 >= this27.length) this27.length = key13 + 1;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[key13] = rawData.data[7];
		var this29 = this.vertexConstantData;
		var key14 = _index++;
		if(!this29.fixed) {
			if(key14 >= this29.length) this29.length = key14 + 1;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[key14] = rawData.data[11];
		var this31 = this.vertexConstantData;
		if(!this31.fixed) {
			if(_index >= this31.length) this31.length = _index + 1;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[_index] = rawData.data[15];
	}
	,setFragmentConst: function(index,x,y,z,w) {
		if(w == null) w = 0;
		if(z == null) z = 0;
		if(y == null) y = 0;
		if(x == null) x = 0;
		var _index = (index - this._fragmentConstantOffset) * 4;
		var this1 = this.fragmentConstantData;
		var key = _index++;
		if(!this1.fixed) {
			if(key >= this1.length) this1.length = key + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[key] = x;
		var this3 = this.fragmentConstantData;
		var key1 = _index++;
		if(!this3.fixed) {
			if(key1 >= this3.length) this3.length = key1 + 1;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[key1] = y;
		var this5 = this.fragmentConstantData;
		var key2 = _index++;
		if(!this5.fixed) {
			if(key2 >= this5.length) this5.length = key2 + 1;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[key2] = z;
		var this7 = this.fragmentConstantData;
		if(!this7.fixed) {
			if(_index >= this7.length) this7.length = _index + 1;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[_index] = w;
	}
	,__class__: away3d.animators.data.AnimationRegisterCache
	,__properties__: $extend(away3d.materials.compilation.ShaderRegisterCache.prototype.__properties__,{get_numFragmentConstant:"get_numFragmentConstant",get_numVertexConstant:"get_numVertexConstant"})
});
away3d.animators.data.AnimationSubGeometry = function() {
	this._vertexBuffer = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(0);
			this1.data = this2;
		}
		this1.length = 0;
		this1.fixed = false;
		$r = this1;
		return $r;
	}(this))),8);
	this._bufferContext = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this3;
		this3 = new openfl.VectorData();
		{
			var this4;
			this4 = new Array(0);
			this3.data = this4;
		}
		this3.length = 0;
		this3.fixed = false;
		$r = this3;
		return $r;
	}(this))),8);
	this._bufferDirty = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this5;
		this5 = new openfl.VectorData();
		{
			var this6;
			this6 = new Array(0);
			this5.data = this6;
		}
		this5.length = 0;
		this5.fixed = false;
		$r = this5;
		return $r;
	}(this))),8);
	this.numProcessedVertices = 0;
	this.previousTime = Math.NEGATIVE_INFINITY;
	var this7;
	this7 = new openfl.VectorData();
	var this8;
	this8 = new Array(0);
	this7.data = this8;
	this7.length = 0;
	this7.fixed = false;
	this.animationParticles = this7;
	var i = 0;
	while(i < 8) {
		var this9 = this._bufferDirty;
		if(!this9.fixed) {
			if(i >= this9.length) this9.length = i + 1;
			if(this9.data.length < this9.length) {
				var data;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data,0,this9.data.length);
				this9.data = data;
			}
		}
		this9.data[i] = true;
		i++;
	}
};
$hxClasses["away3d.animators.data.AnimationSubGeometry"] = away3d.animators.data.AnimationSubGeometry;
away3d.animators.data.AnimationSubGeometry.__name__ = ["away3d","animators","data","AnimationSubGeometry"];
away3d.animators.data.AnimationSubGeometry.prototype = {
	_vertexData: null
	,_vertexBuffer: null
	,_bufferContext: null
	,_bufferDirty: null
	,_numVertices: null
	,_totalLenOfOneVertex: null
	,numProcessedVertices: null
	,previousTime: null
	,animationParticles: null
	,createVertexData: function(numVertices,totalLenOfOneVertex) {
		this._numVertices = numVertices;
		this._totalLenOfOneVertex = totalLenOfOneVertex;
		this._vertexData = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
			var $r;
			var this1;
			this1 = new openfl.VectorData();
			{
				var this2;
				this2 = new Array(0);
				this1.data = this2;
			}
			this1.length = 0;
			this1.fixed = false;
			$r = this1;
			return $r;
		}(this))),numVertices * totalLenOfOneVertex,0);
	}
	,activateVertexBuffer: function(index,bufferOffset,stage3DProxy,format) {
		var contextIndex = stage3DProxy.get_stage3DIndex();
		var context = stage3DProxy.get_context3D();
		var buffer = this._vertexBuffer.data[contextIndex];
		if(buffer == null || this._bufferContext.data[contextIndex] != context) {
			var this1 = this._vertexBuffer;
			var value = stage3DProxy.createVertexBuffer(this._numVertices,this._totalLenOfOneVertex);
			if(!this1.fixed) {
				if(contextIndex >= this1.length) this1.length = contextIndex + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			buffer = this1.data[contextIndex] = value;
			var this3 = this._bufferContext;
			if(!this3.fixed) {
				if(contextIndex >= this3.length) this3.length = contextIndex + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[contextIndex] = context;
			var this5 = this._bufferDirty;
			if(!this5.fixed) {
				if(contextIndex >= this5.length) this5.length = contextIndex + 1;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[contextIndex] = true;
		}
		if(this._bufferDirty.data[contextIndex]) {
			buffer.uploadFromVector(this._vertexData,0,this._numVertices);
			var this7 = this._bufferDirty;
			if(!this7.fixed) {
				if(contextIndex >= this7.length) this7.length = contextIndex + 1;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[contextIndex] = false;
		}
		context.setVertexBufferAt(index,buffer,bufferOffset,format);
	}
	,dispose: function() {
		while(this._vertexBuffer.length > 0) {
			var vertexBuffer;
			var this1 = this._vertexBuffer;
			var value = null;
			if(!this1.fixed) {
				if(this1.length > 0) {
					this1.length--;
					value = this1.data[this1.length];
				}
			}
			vertexBuffer = value;
			if(vertexBuffer != null) away3d.core.managers.Stage3DProxy.disposeVertexBuffer(vertexBuffer);
		}
	}
	,invalidateBuffer: function() {
		var i = 0;
		while(i < 8) {
			var this1 = this._bufferDirty;
			if(!this1.fixed) {
				if(i >= this1.length) this1.length = i + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[i] = true;
			i++;
		}
	}
	,get_vertexData: function() {
		return this._vertexData;
	}
	,get_numVertices: function() {
		return this._numVertices;
	}
	,get_totalLenOfOneVertex: function() {
		return this._totalLenOfOneVertex;
	}
	,__class__: away3d.animators.data.AnimationSubGeometry
	,__properties__: {get_totalLenOfOneVertex:"get_totalLenOfOneVertex",get_numVertices:"get_numVertices",get_vertexData:"get_vertexData"}
};
away3d.animators.data.ParticleAnimationData = function(index,startTime,duration,delay,particle) {
	this.index = index;
	this.startTime = startTime;
	this.totalTime = duration + delay;
	this.duration = duration;
	this.delay = delay;
	this.startVertexIndex = particle.startVertexIndex;
	this.numVertices = particle.numVertices;
};
$hxClasses["away3d.animators.data.ParticleAnimationData"] = away3d.animators.data.ParticleAnimationData;
away3d.animators.data.ParticleAnimationData.__name__ = ["away3d","animators","data","ParticleAnimationData"];
away3d.animators.data.ParticleAnimationData.prototype = {
	index: null
	,startTime: null
	,totalTime: null
	,duration: null
	,delay: null
	,startVertexIndex: null
	,numVertices: null
	,__class__: away3d.animators.data.ParticleAnimationData
};
away3d.library = {};
away3d.library.assets = {};
away3d.library.assets.NamedAssetBase = function(name) {
	if(name == null) name = "null";
	this._name = name;
	this._originalName = name;
	this.updateFullPath();
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["away3d.library.assets.NamedAssetBase"] = away3d.library.assets.NamedAssetBase;
away3d.library.assets.NamedAssetBase.__name__ = ["away3d","library","assets","NamedAssetBase"];
away3d.library.assets.NamedAssetBase.__super__ = openfl.events.EventDispatcher;
away3d.library.assets.NamedAssetBase.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	_originalName: null
	,_namespace: null
	,_name: null
	,_id: null
	,_full_path: null
	,get_originalName: function() {
		return this._originalName;
	}
	,get_id: function() {
		return this._id;
	}
	,set_id: function(newID) {
		this._id = newID;
		return newID;
	}
	,get_name: function() {
		return this._name;
	}
	,set_name: function(val) {
		var prev;
		prev = this._name;
		this._name = val;
		if(this._name == null) this._name = "null";
		this.updateFullPath();
		if(this.hasEventListener(away3d.events.Asset3DEvent.ASSET_RENAME)) this.dispatchEvent(new away3d.events.Asset3DEvent(away3d.events.Asset3DEvent.ASSET_RENAME,js.Boot.__cast(this , away3d.library.assets.IAsset),prev));
		return val;
	}
	,get_assetNamespace: function() {
		return this._namespace;
	}
	,get_assetFullPath: function() {
		return this._full_path;
	}
	,assetPathEquals: function(name,ns) {
		return this._name == name && (ns == null || this._namespace == ns);
	}
	,resetAssetPath: function(name,ns,overrideOriginal) {
		if(overrideOriginal == null) overrideOriginal = true;
		if(name != null) this._name = name; else this._name = "null";
		if(ns != null) this._namespace = ns; else this._namespace = away3d.library.assets.NamedAssetBase.DEFAULT_NAMESPACE;
		if(overrideOriginal) this._originalName = this._name;
		this.updateFullPath();
	}
	,updateFullPath: function() {
		this._full_path = [this._namespace,this._name];
	}
	,__class__: away3d.library.assets.NamedAssetBase
	,__properties__: {get_assetFullPath:"get_assetFullPath",get_assetNamespace:"get_assetNamespace",set_name:"set_name",get_name:"get_name",set_id:"set_id",get_id:"get_id",get_originalName:"get_originalName"}
});
away3d.library.assets.IAsset = function() { };
$hxClasses["away3d.library.assets.IAsset"] = away3d.library.assets.IAsset;
away3d.library.assets.IAsset.__name__ = ["away3d","library","assets","IAsset"];
away3d.library.assets.IAsset.__interfaces__ = [openfl.events.IEventDispatcher];
away3d.library.assets.IAsset.prototype = {
	get_name: null
	,set_name: null
	,get_id: null
	,set_id: null
	,get_assetNamespace: null
	,get_assetType: null
	,get_assetFullPath: null
	,assetPathEquals: null
	,resetAssetPath: null
	,dispose: null
	,__class__: away3d.library.assets.IAsset
	,__properties__: {get_assetFullPath:"get_assetFullPath",get_assetType:"get_assetType",get_assetNamespace:"get_assetNamespace",set_id:"set_id",get_id:"get_id",set_name:"set_name",get_name:"get_name"}
};
away3d.animators.nodes = {};
away3d.animators.nodes.AnimationNodeBase = function() {
	away3d.library.assets.NamedAssetBase.call(this);
};
$hxClasses["away3d.animators.nodes.AnimationNodeBase"] = away3d.animators.nodes.AnimationNodeBase;
away3d.animators.nodes.AnimationNodeBase.__name__ = ["away3d","animators","nodes","AnimationNodeBase"];
away3d.animators.nodes.AnimationNodeBase.__interfaces__ = [away3d.library.assets.IAsset];
away3d.animators.nodes.AnimationNodeBase.__super__ = away3d.library.assets.NamedAssetBase;
away3d.animators.nodes.AnimationNodeBase.prototype = $extend(away3d.library.assets.NamedAssetBase.prototype,{
	_stateClass: null
	,get_stateClass: function() {
		return this._stateClass;
	}
	,dispose: function() {
	}
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.ANIMATION_NODE;
	}
	,__class__: away3d.animators.nodes.AnimationNodeBase
	,__properties__: $extend(away3d.library.assets.NamedAssetBase.prototype.__properties__,{get_assetType:"get_assetType",get_stateClass:"get_stateClass"})
});
away3d.animators.states = {};
away3d.animators.states.IAnimationState = function() { };
$hxClasses["away3d.animators.states.IAnimationState"] = away3d.animators.states.IAnimationState;
away3d.animators.states.IAnimationState.__name__ = ["away3d","animators","states","IAnimationState"];
away3d.animators.states.IAnimationState.prototype = {
	get_positionDelta: null
	,offset: null
	,update: null
	,phase: null
	,__class__: away3d.animators.states.IAnimationState
	,__properties__: {get_positionDelta:"get_positionDelta"}
};
away3d.animators.states.AnimationStateBase = function(animator,animationNode) {
	this._time = this._startTime = 0;
	this._rootDelta = new openfl.geom.Vector3D();
	this._positionDeltaDirty = true;
	this._animator = animator;
	this._animationNode = animationNode;
};
$hxClasses["away3d.animators.states.AnimationStateBase"] = away3d.animators.states.AnimationStateBase;
away3d.animators.states.AnimationStateBase.__name__ = ["away3d","animators","states","AnimationStateBase"];
away3d.animators.states.AnimationStateBase.__interfaces__ = [away3d.animators.states.IAnimationState];
away3d.animators.states.AnimationStateBase.prototype = {
	_animationNode: null
	,_rootDelta: null
	,_positionDeltaDirty: null
	,_time: null
	,_startTime: null
	,_animator: null
	,get_positionDelta: function() {
		if(this._positionDeltaDirty) this.updatePositionDelta();
		return this._rootDelta;
	}
	,offset: function(startTime) {
		this._startTime = startTime;
		this._positionDeltaDirty = true;
	}
	,update: function(time) {
		if(this._time == time - this._startTime) return;
		this.updateTime(time);
	}
	,phase: function(value) {
	}
	,updateTime: function(time) {
		this._time = time - this._startTime;
		this._positionDeltaDirty = true;
	}
	,updatePositionDelta: function() {
	}
	,__class__: away3d.animators.states.AnimationStateBase
	,__properties__: {get_positionDelta:"get_positionDelta"}
};
away3d.bounds = {};
away3d.bounds.BoundingVolumeBase = function() {
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this._aabbPoints = this1;
	this._aabbPointsDirty = true;
	this._min = new openfl.geom.Vector3D();
	this._max = new openfl.geom.Vector3D();
};
$hxClasses["away3d.bounds.BoundingVolumeBase"] = away3d.bounds.BoundingVolumeBase;
away3d.bounds.BoundingVolumeBase.__name__ = ["away3d","bounds","BoundingVolumeBase"];
away3d.bounds.BoundingVolumeBase.prototype = {
	_min: null
	,_max: null
	,_aabbPoints: null
	,_aabbPointsDirty: null
	,_boundingRenderable: null
	,get_max: function() {
		return this._max;
	}
	,get_min: function() {
		return this._min;
	}
	,get_aabbPoints: function() {
		if(this._aabbPointsDirty) this.updateAABBPoints();
		return this._aabbPoints;
	}
	,get_boundingRenderable: function() {
		if(this._boundingRenderable == null) {
			this._boundingRenderable = this.createBoundingRenderable();
			this.updateBoundingRenderable();
		}
		return this._boundingRenderable;
	}
	,nullify: function() {
		this._min.x = this._min.y = this._min.z = 0;
		this._max.x = this._max.y = this._max.z = 0;
		this._aabbPointsDirty = true;
		if(this._boundingRenderable != null) this.updateBoundingRenderable();
	}
	,disposeRenderable: function() {
		if(this._boundingRenderable != null) this._boundingRenderable.dispose();
		this._boundingRenderable = null;
	}
	,fromVertices: function(vertices) {
		var i = 0;
		var len = vertices.length;
		var minX;
		var minY;
		var minZ;
		var maxX;
		var maxY;
		var maxZ;
		if(len == 0) {
			this.nullify();
			return;
		}
		var v;
		minX = (function($this) {
			var $r;
			var index = i++;
			$r = maxX = vertices.data[index];
			return $r;
		}(this));
		minY = (function($this) {
			var $r;
			var index1 = i++;
			$r = maxY = vertices.data[index1];
			return $r;
		}(this));
		minZ = (function($this) {
			var $r;
			var index2 = i++;
			$r = maxZ = vertices.data[index2];
			return $r;
		}(this));
		while(i < len) {
			var index3 = i++;
			v = vertices.data[index3];
			if(v < minX) minX = v; else if(v > maxX) maxX = v;
			var index4 = i++;
			v = vertices.data[index4];
			if(v < minY) minY = v; else if(v > maxY) maxY = v;
			var index5 = i++;
			v = vertices.data[index5];
			if(v < minZ) minZ = v; else if(v > maxZ) maxZ = v;
		}
		this.fromExtremes(minX,minY,minZ,maxX,maxY,maxZ);
	}
	,fromGeometry: function(geometry) {
		var subGeoms = geometry.get_subGeometries();
		var numSubGeoms = subGeoms.length;
		var minX;
		var minY;
		var minZ;
		var maxX;
		var maxY;
		var maxZ;
		if(numSubGeoms > 0) {
			var j = 0;
			minX = minY = minZ = Math.POSITIVE_INFINITY;
			maxX = maxY = maxZ = Math.NEGATIVE_INFINITY;
			while(j < numSubGeoms) {
				var subGeom;
				var index = j++;
				subGeom = subGeoms.data[index];
				var vertices = subGeom.get_vertexData();
				var vertexDataLen = vertices.length;
				var i = subGeom.get_vertexOffset();
				var stride = subGeom.get_vertexStride();
				while(i < vertexDataLen) {
					var v = vertices.data[i];
					if(v < minX) minX = v; else if(v > maxX) maxX = v;
					v = vertices.data[i + 1];
					if(v < minY) minY = v; else if(v > maxY) maxY = v;
					v = vertices.data[i + 2];
					if(v < minZ) minZ = v; else if(v > maxZ) maxZ = v;
					i += stride;
				}
			}
			this.fromExtremes(minX,minY,minZ,maxX,maxY,maxZ);
		} else this.fromExtremes(0,0,0,0,0,0);
	}
	,fromSphere: function(center,radius) {
		this.fromExtremes(center.x - radius,center.y - radius,center.z - radius,center.x + radius,center.y + radius,center.z + radius);
	}
	,fromExtremes: function(minX,minY,minZ,maxX,maxY,maxZ) {
		this._min.x = minX;
		this._min.y = minY;
		this._min.z = minZ;
		this._max.x = maxX;
		this._max.y = maxY;
		this._max.z = maxZ;
		this._aabbPointsDirty = true;
		if(this._boundingRenderable != null) this.updateBoundingRenderable();
	}
	,isInFrustum: function(planes,numPlanes) {
		throw new away3d.errors.AbstractMethodError();
		return false;
	}
	,overlaps: function(bounds) {
		var min = bounds._min;
		var max = bounds._max;
		return this._max.x > min.x && this._min.x < max.x && this._max.y > min.y && this._min.y < max.y && this._max.z > min.z && this._min.z < max.z;
	}
	,clone: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,rayIntersection: function(position,direction,targetNormal) {
		return -1;
	}
	,containsPoint: function(position) {
		return false;
	}
	,updateAABBPoints: function() {
		var maxX = this._max.x;
		var maxY = this._max.y;
		var maxZ = this._max.z;
		var minX = this._min.x;
		var minY = this._min.y;
		var minZ = this._min.z;
		var this1 = this._aabbPoints;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = minX;
		var this3 = this._aabbPoints;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = minY;
		var this5 = this._aabbPoints;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = minZ;
		var this7 = this._aabbPoints;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = maxX;
		var this9 = this._aabbPoints;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[4] = minY;
		var this11 = this._aabbPoints;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = minZ;
		var this13 = this._aabbPoints;
		if(!this13.fixed) {
			if(6 >= this13.length) this13.length = 7;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[6] = minX;
		var this15 = this._aabbPoints;
		if(!this15.fixed) {
			if(7 >= this15.length) this15.length = 8;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[7] = maxY;
		var this17 = this._aabbPoints;
		if(!this17.fixed) {
			if(8 >= this17.length) this17.length = 9;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[8] = minZ;
		var this19 = this._aabbPoints;
		if(!this19.fixed) {
			if(9 >= this19.length) this19.length = 10;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[9] = maxX;
		var this21 = this._aabbPoints;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = maxY;
		var this23 = this._aabbPoints;
		if(!this23.fixed) {
			if(11 >= this23.length) this23.length = 12;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[11] = minZ;
		var this25 = this._aabbPoints;
		if(!this25.fixed) {
			if(12 >= this25.length) this25.length = 13;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[12] = minX;
		var this27 = this._aabbPoints;
		if(!this27.fixed) {
			if(13 >= this27.length) this27.length = 14;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[13] = minY;
		var this29 = this._aabbPoints;
		if(!this29.fixed) {
			if(14 >= this29.length) this29.length = 15;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[14] = maxZ;
		var this31 = this._aabbPoints;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = maxX;
		var this33 = this._aabbPoints;
		if(!this33.fixed) {
			if(16 >= this33.length) this33.length = 17;
			if(this33.data.length < this33.length) {
				var data16;
				var this34;
				this34 = new Array(this33.data.length + 10);
				data16 = this34;
				haxe.ds._Vector.Vector_Impl_.blit(this33.data,0,data16,0,this33.data.length);
				this33.data = data16;
			}
		}
		this33.data[16] = minY;
		var this35 = this._aabbPoints;
		if(!this35.fixed) {
			if(17 >= this35.length) this35.length = 18;
			if(this35.data.length < this35.length) {
				var data17;
				var this36;
				this36 = new Array(this35.data.length + 10);
				data17 = this36;
				haxe.ds._Vector.Vector_Impl_.blit(this35.data,0,data17,0,this35.data.length);
				this35.data = data17;
			}
		}
		this35.data[17] = maxZ;
		var this37 = this._aabbPoints;
		if(!this37.fixed) {
			if(18 >= this37.length) this37.length = 19;
			if(this37.data.length < this37.length) {
				var data18;
				var this38;
				this38 = new Array(this37.data.length + 10);
				data18 = this38;
				haxe.ds._Vector.Vector_Impl_.blit(this37.data,0,data18,0,this37.data.length);
				this37.data = data18;
			}
		}
		this37.data[18] = minX;
		var this39 = this._aabbPoints;
		if(!this39.fixed) {
			if(19 >= this39.length) this39.length = 20;
			if(this39.data.length < this39.length) {
				var data19;
				var this40;
				this40 = new Array(this39.data.length + 10);
				data19 = this40;
				haxe.ds._Vector.Vector_Impl_.blit(this39.data,0,data19,0,this39.data.length);
				this39.data = data19;
			}
		}
		this39.data[19] = maxY;
		var this41 = this._aabbPoints;
		if(!this41.fixed) {
			if(20 >= this41.length) this41.length = 21;
			if(this41.data.length < this41.length) {
				var data20;
				var this42;
				this42 = new Array(this41.data.length + 10);
				data20 = this42;
				haxe.ds._Vector.Vector_Impl_.blit(this41.data,0,data20,0,this41.data.length);
				this41.data = data20;
			}
		}
		this41.data[20] = maxZ;
		var this43 = this._aabbPoints;
		if(!this43.fixed) {
			if(21 >= this43.length) this43.length = 22;
			if(this43.data.length < this43.length) {
				var data21;
				var this44;
				this44 = new Array(this43.data.length + 10);
				data21 = this44;
				haxe.ds._Vector.Vector_Impl_.blit(this43.data,0,data21,0,this43.data.length);
				this43.data = data21;
			}
		}
		this43.data[21] = maxX;
		var this45 = this._aabbPoints;
		if(!this45.fixed) {
			if(22 >= this45.length) this45.length = 23;
			if(this45.data.length < this45.length) {
				var data22;
				var this46;
				this46 = new Array(this45.data.length + 10);
				data22 = this46;
				haxe.ds._Vector.Vector_Impl_.blit(this45.data,0,data22,0,this45.data.length);
				this45.data = data22;
			}
		}
		this45.data[22] = maxY;
		var this47 = this._aabbPoints;
		if(!this47.fixed) {
			if(23 >= this47.length) this47.length = 24;
			if(this47.data.length < this47.length) {
				var data23;
				var this48;
				this48 = new Array(this47.data.length + 10);
				data23 = this48;
				haxe.ds._Vector.Vector_Impl_.blit(this47.data,0,data23,0,this47.data.length);
				this47.data = data23;
			}
		}
		this47.data[23] = maxZ;
		this._aabbPointsDirty = false;
	}
	,updateBoundingRenderable: function() {
		throw new away3d.errors.AbstractMethodError();
	}
	,createBoundingRenderable: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,classifyToPlane: function(plane) {
		throw new away3d.errors.AbstractMethodError();
		return 0;
	}
	,transformFrom: function(bounds,matrix) {
		throw new away3d.errors.AbstractMethodError();
	}
	,__class__: away3d.bounds.BoundingVolumeBase
	,__properties__: {get_boundingRenderable:"get_boundingRenderable",get_aabbPoints:"get_aabbPoints",get_min:"get_min",get_max:"get_max"}
};
away3d.bounds.AxisAlignedBoundingBox = function() {
	this._centerX = 0;
	this._centerY = 0;
	this._centerZ = 0;
	this._halfExtentsX = 0;
	this._halfExtentsY = 0;
	this._halfExtentsZ = 0;
	away3d.bounds.BoundingVolumeBase.call(this);
};
$hxClasses["away3d.bounds.AxisAlignedBoundingBox"] = away3d.bounds.AxisAlignedBoundingBox;
away3d.bounds.AxisAlignedBoundingBox.__name__ = ["away3d","bounds","AxisAlignedBoundingBox"];
away3d.bounds.AxisAlignedBoundingBox.__super__ = away3d.bounds.BoundingVolumeBase;
away3d.bounds.AxisAlignedBoundingBox.prototype = $extend(away3d.bounds.BoundingVolumeBase.prototype,{
	_centerX: null
	,_centerY: null
	,_centerZ: null
	,_halfExtentsX: null
	,_halfExtentsY: null
	,_halfExtentsZ: null
	,nullify: function() {
		away3d.bounds.BoundingVolumeBase.prototype.nullify.call(this);
		this._centerX = this._centerY = this._centerZ = 0;
		this._halfExtentsX = this._halfExtentsY = this._halfExtentsZ = 0;
	}
	,isInFrustum: function(planes,numPlanes) {
		var i = 0;
		while(i < numPlanes) {
			var plane = planes.data[i];
			var a = plane.a;
			var b = plane.b;
			var c = plane.c;
			var flippedExtentX;
			if(a < 0) flippedExtentX = -this._halfExtentsX; else flippedExtentX = this._halfExtentsX;
			var flippedExtentY;
			if(b < 0) flippedExtentY = -this._halfExtentsY; else flippedExtentY = this._halfExtentsY;
			var flippedExtentZ;
			if(c < 0) flippedExtentZ = -this._halfExtentsZ; else flippedExtentZ = this._halfExtentsZ;
			var projDist = a * (this._centerX + flippedExtentX) + b * (this._centerY + flippedExtentY) + c * (this._centerZ + flippedExtentZ) - plane.d;
			if(projDist < 0) return false;
			++i;
		}
		return true;
	}
	,rayIntersection: function(position,direction,targetNormal) {
		if(this.containsPoint(position)) return 0;
		var px = position.x - this._centerX;
		var py = position.y - this._centerY;
		var pz = position.z - this._centerZ;
		var vx = direction.x;
		var vy = direction.y;
		var vz = direction.z;
		var ix;
		var iy;
		var iz;
		var rayEntryDistance = 0;
		var intersects = false;
		if(vx < 0) {
			rayEntryDistance = (this._halfExtentsX - px) / vx;
			if(rayEntryDistance > 0) {
				iy = py + rayEntryDistance * vy;
				iz = pz + rayEntryDistance * vz;
				if(iy > -this._halfExtentsY && iy < this._halfExtentsY && iz > -this._halfExtentsZ && iz < this._halfExtentsZ) {
					targetNormal.x = 1;
					targetNormal.y = 0;
					targetNormal.z = 0;
					intersects = true;
				}
			}
		}
		if(!intersects && vx > 0) {
			rayEntryDistance = (-this._halfExtentsX - px) / vx;
			if(rayEntryDistance > 0) {
				iy = py + rayEntryDistance * vy;
				iz = pz + rayEntryDistance * vz;
				if(iy > -this._halfExtentsY && iy < this._halfExtentsY && iz > -this._halfExtentsZ && iz < this._halfExtentsZ) {
					targetNormal.x = -1;
					targetNormal.y = 0;
					targetNormal.z = 0;
					intersects = true;
				}
			}
		}
		if(!intersects && vy < 0) {
			rayEntryDistance = (this._halfExtentsY - py) / vy;
			if(rayEntryDistance > 0) {
				ix = px + rayEntryDistance * vx;
				iz = pz + rayEntryDistance * vz;
				if(ix > -this._halfExtentsX && ix < this._halfExtentsX && iz > -this._halfExtentsZ && iz < this._halfExtentsZ) {
					targetNormal.x = 0;
					targetNormal.y = 1;
					targetNormal.z = 0;
					intersects = true;
				}
			}
		}
		if(!intersects && vy > 0) {
			rayEntryDistance = (-this._halfExtentsY - py) / vy;
			if(rayEntryDistance > 0) {
				ix = px + rayEntryDistance * vx;
				iz = pz + rayEntryDistance * vz;
				if(ix > -this._halfExtentsX && ix < this._halfExtentsX && iz > -this._halfExtentsZ && iz < this._halfExtentsZ) {
					targetNormal.x = 0;
					targetNormal.y = -1;
					targetNormal.z = 0;
					intersects = true;
				}
			}
		}
		if(!intersects && vz < 0) {
			rayEntryDistance = (this._halfExtentsZ - pz) / vz;
			if(rayEntryDistance > 0) {
				ix = px + rayEntryDistance * vx;
				iy = py + rayEntryDistance * vy;
				if(iy > -this._halfExtentsY && iy < this._halfExtentsY && ix > -this._halfExtentsX && ix < this._halfExtentsX) {
					targetNormal.x = 0;
					targetNormal.y = 0;
					targetNormal.z = 1;
					intersects = true;
				}
			}
		}
		if(!intersects && vz > 0) {
			rayEntryDistance = (-this._halfExtentsZ - pz) / vz;
			if(rayEntryDistance > 0) {
				ix = px + rayEntryDistance * vx;
				iy = py + rayEntryDistance * vy;
				if(iy > -this._halfExtentsY && iy < this._halfExtentsY && ix > -this._halfExtentsX && ix < this._halfExtentsX) {
					targetNormal.x = 0;
					targetNormal.y = 0;
					targetNormal.z = -1;
					intersects = true;
				}
			}
		}
		if(intersects) return rayEntryDistance; else return -1;
	}
	,containsPoint: function(position) {
		var px = position.x - this._centerX;
		var py = position.y - this._centerY;
		var pz = position.z - this._centerZ;
		return px <= this._halfExtentsX && px >= -this._halfExtentsX && py <= this._halfExtentsY && py >= -this._halfExtentsY && pz <= this._halfExtentsZ && pz >= -this._halfExtentsZ;
	}
	,fromExtremes: function(minX,minY,minZ,maxX,maxY,maxZ) {
		this._centerX = (maxX + minX) * .5;
		this._centerY = (maxY + minY) * .5;
		this._centerZ = (maxZ + minZ) * .5;
		this._halfExtentsX = (maxX - minX) * .5;
		this._halfExtentsY = (maxY - minY) * .5;
		this._halfExtentsZ = (maxZ - minZ) * .5;
		away3d.bounds.BoundingVolumeBase.prototype.fromExtremes.call(this,minX,minY,minZ,maxX,maxY,maxZ);
	}
	,clone: function() {
		var clone = new away3d.bounds.AxisAlignedBoundingBox();
		clone.fromExtremes(this._min.x,this._min.y,this._min.z,this._max.x,this._max.y,this._max.z);
		return clone;
	}
	,get_halfExtentsX: function() {
		return this._halfExtentsX;
	}
	,get_halfExtentsY: function() {
		return this._halfExtentsY;
	}
	,get_halfExtentsZ: function() {
		return this._halfExtentsZ;
	}
	,closestPointToPoint: function(point,target) {
		var p;
		if(target == null) target = new openfl.geom.Vector3D();
		p = point.x;
		if(p < this._min.x) p = this._min.x;
		if(p > this._max.x) p = this._max.x;
		target.x = p;
		p = point.y;
		if(p < this._min.y) p = this._min.y;
		if(p > this._max.y) p = this._max.y;
		target.y = p;
		p = point.z;
		if(p < this._min.z) p = this._min.z;
		if(p > this._max.z) p = this._max.z;
		target.z = p;
		return target;
	}
	,updateBoundingRenderable: function() {
		this._boundingRenderable.set_scaleX(Math.max(this._halfExtentsX * 2,0.001));
		this._boundingRenderable.set_scaleY(Math.max(this._halfExtentsY * 2,0.001));
		this._boundingRenderable.set_scaleZ(Math.max(this._halfExtentsZ * 2,0.001));
		this._boundingRenderable.set_x(this._centerX);
		this._boundingRenderable.set_y(this._centerY);
		this._boundingRenderable.set_z(this._centerZ);
	}
	,createBoundingRenderable: function() {
		return new away3d.primitives.WireframeCube(1,1,1,16777215,0.5);
	}
	,classifyToPlane: function(plane) {
		var a = plane.a;
		var b = plane.b;
		var c = plane.c;
		var centerDistance = a * this._centerX + b * this._centerY + c * this._centerZ - plane.d;
		if(a < 0) a = -a;
		if(b < 0) b = -b;
		if(c < 0) c = -c;
		var boundOffset = a * this._halfExtentsX + b * this._halfExtentsY + c * this._halfExtentsZ;
		if(centerDistance > boundOffset) return away3d.core.math.PlaneClassification.FRONT; else if(centerDistance < -boundOffset) return away3d.core.math.PlaneClassification.BACK; else return away3d.core.math.PlaneClassification.INTERSECT;
	}
	,transformFrom: function(bounds,matrix) {
		var aabb;
		aabb = js.Boot.__cast(bounds , away3d.bounds.AxisAlignedBoundingBox);
		var cx = aabb._centerX;
		var cy = aabb._centerY;
		var cz = aabb._centerZ;
		var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
		matrix.copyRawDataTo(raw);
		var m11 = raw.data[0];
		var m12 = raw.data[4];
		var m13 = raw.data[8];
		var m14 = raw.data[12];
		var m21 = raw.data[1];
		var m22 = raw.data[5];
		var m23 = raw.data[9];
		var m24 = raw.data[13];
		var m31 = raw.data[2];
		var m32 = raw.data[6];
		var m33 = raw.data[10];
		var m34 = raw.data[14];
		this._centerX = cx * m11 + cy * m12 + cz * m13 + m14;
		this._centerY = cx * m21 + cy * m22 + cz * m23 + m24;
		this._centerZ = cx * m31 + cy * m32 + cz * m33 + m34;
		if(m11 < 0) m11 = -m11;
		if(m12 < 0) m12 = -m12;
		if(m13 < 0) m13 = -m13;
		if(m21 < 0) m21 = -m21;
		if(m22 < 0) m22 = -m22;
		if(m23 < 0) m23 = -m23;
		if(m31 < 0) m31 = -m31;
		if(m32 < 0) m32 = -m32;
		if(m33 < 0) m33 = -m33;
		var hx = aabb._halfExtentsX;
		var hy = aabb._halfExtentsY;
		var hz = aabb._halfExtentsZ;
		this._halfExtentsX = hx * m11 + hy * m12 + hz * m13;
		this._halfExtentsY = hx * m21 + hy * m22 + hz * m23;
		this._halfExtentsZ = hx * m31 + hy * m32 + hz * m33;
		this._min.x = this._centerX - this._halfExtentsX;
		this._min.y = this._centerY - this._halfExtentsY;
		this._min.z = this._centerZ - this._halfExtentsZ;
		this._max.x = this._centerX + this._halfExtentsX;
		this._max.y = this._centerY + this._halfExtentsY;
		this._max.z = this._centerZ + this._halfExtentsZ;
	}
	,__class__: away3d.bounds.AxisAlignedBoundingBox
	,__properties__: $extend(away3d.bounds.BoundingVolumeBase.prototype.__properties__,{get_halfExtentsZ:"get_halfExtentsZ",get_halfExtentsY:"get_halfExtentsY",get_halfExtentsX:"get_halfExtentsX"})
});
away3d.bounds.BoundingSphere = function() {
	this._radius = 0;
	this._centerX = 0;
	this._centerY = 0;
	this._centerZ = 0;
	away3d.bounds.BoundingVolumeBase.call(this);
};
$hxClasses["away3d.bounds.BoundingSphere"] = away3d.bounds.BoundingSphere;
away3d.bounds.BoundingSphere.__name__ = ["away3d","bounds","BoundingSphere"];
away3d.bounds.BoundingSphere.__super__ = away3d.bounds.BoundingVolumeBase;
away3d.bounds.BoundingSphere.prototype = $extend(away3d.bounds.BoundingVolumeBase.prototype,{
	_radius: null
	,_centerX: null
	,_centerY: null
	,_centerZ: null
	,get_radius: function() {
		return this._radius;
	}
	,nullify: function() {
		away3d.bounds.BoundingVolumeBase.prototype.nullify.call(this);
		this._centerX = this._centerY = this._centerZ = 0;
		this._radius = 0;
	}
	,isInFrustum: function(planes,numPlanes) {
		var i = 0;
		while(i < numPlanes) {
			var plane = planes.data[i];
			var flippedExtentX;
			if(plane.a < 0) flippedExtentX = -this._radius; else flippedExtentX = this._radius;
			var flippedExtentY;
			if(plane.b < 0) flippedExtentY = -this._radius; else flippedExtentY = this._radius;
			var flippedExtentZ;
			if(plane.c < 0) flippedExtentZ = -this._radius; else flippedExtentZ = this._radius;
			var projDist = plane.a * (this._centerX + flippedExtentX) + plane.b * (this._centerY + flippedExtentY) + plane.c * (this._centerZ + flippedExtentZ) - plane.d;
			if(projDist < 0) return false;
			++i;
		}
		return true;
	}
	,fromSphere: function(center,radius) {
		this._centerX = center.x;
		this._centerY = center.y;
		this._centerZ = center.z;
		this._radius = radius;
		this._max.x = this._centerX + radius;
		this._max.y = this._centerY + radius;
		this._max.z = this._centerZ + radius;
		this._min.x = this._centerX - radius;
		this._min.y = this._centerY - radius;
		this._min.z = this._centerZ - radius;
		this._aabbPointsDirty = true;
		if(this._boundingRenderable != null) this.updateBoundingRenderable();
	}
	,fromExtremes: function(minX,minY,minZ,maxX,maxY,maxZ) {
		this._centerX = (maxX + minX) * .5;
		this._centerY = (maxY + minY) * .5;
		this._centerZ = (maxZ + minZ) * .5;
		var d = maxX - minX;
		var y = maxY - minY;
		var z = maxZ - minZ;
		if(y > d) d = y;
		if(z > d) d = z;
		this._radius = d * Math.sqrt(.5);
		away3d.bounds.BoundingVolumeBase.prototype.fromExtremes.call(this,minX,minY,minZ,maxX,maxY,maxZ);
	}
	,clone: function() {
		var clone = new away3d.bounds.BoundingSphere();
		clone.fromSphere(new openfl.geom.Vector3D(this._centerX,this._centerY,this._centerZ),this._radius);
		return clone;
	}
	,rayIntersection: function(position,direction,targetNormal) {
		if(this.containsPoint(position)) return 0;
		var px = position.x - this._centerX;
		var py = position.y - this._centerY;
		var pz = position.z - this._centerZ;
		var vx = direction.x;
		var vy = direction.y;
		var vz = direction.z;
		var rayEntryDistance;
		var a = vx * vx + vy * vy + vz * vz;
		var b = 2 * (px * vx + py * vy + pz * vz);
		var c = px * px + py * py + pz * pz - this._radius * this._radius;
		var det = b * b - 4 * a * c;
		if(det >= 0) {
			var sqrtDet = Math.sqrt(det);
			rayEntryDistance = (-b - sqrtDet) / (2 * a);
			if(rayEntryDistance >= 0) {
				targetNormal.x = px + rayEntryDistance * vx;
				targetNormal.y = py + rayEntryDistance * vy;
				targetNormal.z = pz + rayEntryDistance * vz;
				targetNormal.normalize();
				return rayEntryDistance;
			}
		}
		return -1;
	}
	,containsPoint: function(position) {
		var px = position.x - this._centerX;
		var py = position.y - this._centerY;
		var pz = position.z - this._centerZ;
		var distance = Math.sqrt(px * px + py * py + pz * pz);
		return distance <= this._radius;
	}
	,updateBoundingRenderable: function() {
		var sc = this._radius;
		if(sc == 0) sc = 0.001;
		this._boundingRenderable.set_scaleX(sc);
		this._boundingRenderable.set_scaleY(sc);
		this._boundingRenderable.set_scaleZ(sc);
		this._boundingRenderable.set_x(this._centerX);
		this._boundingRenderable.set_y(this._centerY);
		this._boundingRenderable.set_z(this._centerZ);
	}
	,createBoundingRenderable: function() {
		return new away3d.primitives.WireframeSphere(1,16,12,16777215,0.5);
	}
	,classifyToPlane: function(plane) {
		var a = plane.a;
		var b = plane.b;
		var c = plane.c;
		var dd = a * this._centerX + b * this._centerY + c * this._centerZ - plane.d;
		if(a < 0) a = -a;
		if(b < 0) b = -b;
		if(c < 0) c = -c;
		var rr = (a + b + c) * this._radius;
		if(dd > rr) return away3d.core.math.PlaneClassification.FRONT; else if(dd < -rr) return away3d.core.math.PlaneClassification.BACK; else return away3d.core.math.PlaneClassification.INTERSECT;
	}
	,transformFrom: function(bounds,matrix) {
		var sphere;
		sphere = js.Boot.__cast(bounds , away3d.bounds.BoundingSphere);
		var cx = sphere._centerX;
		var cy = sphere._centerY;
		var cz = sphere._centerZ;
		var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
		matrix.copyRawDataTo(raw);
		var m11 = raw.data[0];
		var m12 = raw.data[4];
		var m13 = raw.data[8];
		var m14 = raw.data[12];
		var m21 = raw.data[1];
		var m22 = raw.data[5];
		var m23 = raw.data[9];
		var m24 = raw.data[13];
		var m31 = raw.data[2];
		var m32 = raw.data[6];
		var m33 = raw.data[10];
		var m34 = raw.data[14];
		this._centerX = cx * m11 + cy * m12 + cz * m13 + m14;
		this._centerY = cx * m21 + cy * m22 + cz * m23 + m24;
		this._centerZ = cx * m31 + cy * m32 + cz * m33 + m34;
		if(m11 < 0) m11 = -m11;
		if(m12 < 0) m12 = -m12;
		if(m13 < 0) m13 = -m13;
		if(m21 < 0) m21 = -m21;
		if(m22 < 0) m22 = -m22;
		if(m23 < 0) m23 = -m23;
		if(m31 < 0) m31 = -m31;
		if(m32 < 0) m32 = -m32;
		if(m33 < 0) m33 = -m33;
		var r = sphere._radius;
		var rx = m11 + m12 + m13;
		var ry = m21 + m22 + m23;
		var rz = m31 + m32 + m33;
		this._radius = r * Math.sqrt(rx * rx + ry * ry + rz * rz);
		this._min.x = this._centerX - this._radius;
		this._min.y = this._centerY - this._radius;
		this._min.z = this._centerZ - this._radius;
		this._max.x = this._centerX + this._radius;
		this._max.y = this._centerY + this._radius;
		this._max.z = this._centerZ + this._radius;
	}
	,__class__: away3d.bounds.BoundingSphere
	,__properties__: $extend(away3d.bounds.BoundingVolumeBase.prototype.__properties__,{get_radius:"get_radius"})
});
away3d.bounds.NullBounds = function(alwaysIn,renderable) {
	if(alwaysIn == null) alwaysIn = true;
	away3d.bounds.BoundingVolumeBase.call(this);
	this._alwaysIn = alwaysIn;
	this._renderable = renderable;
	this._max.x = this._max.y = this._max.z = Math.POSITIVE_INFINITY;
	this._min.x = this._min.y = this._alwaysIn?this._min.z = Math.NEGATIVE_INFINITY:this._min.z = Math.POSITIVE_INFINITY;
};
$hxClasses["away3d.bounds.NullBounds"] = away3d.bounds.NullBounds;
away3d.bounds.NullBounds.__name__ = ["away3d","bounds","NullBounds"];
away3d.bounds.NullBounds.__super__ = away3d.bounds.BoundingVolumeBase;
away3d.bounds.NullBounds.prototype = $extend(away3d.bounds.BoundingVolumeBase.prototype,{
	_alwaysIn: null
	,_renderable: null
	,clone: function() {
		return new away3d.bounds.NullBounds(this._alwaysIn);
	}
	,createBoundingRenderable: function() {
		if(this._renderable != null) return this._renderable; else return new away3d.primitives.WireframeSphere(100,16,12,16777215,0.5);
	}
	,isInFrustum: function(planes,numPlanes) {
		return this._alwaysIn;
	}
	,fromGeometry: function(geometry) {
	}
	,fromSphere: function(center,radius) {
	}
	,fromExtremes: function(minX,minY,minZ,maxX,maxY,maxZ) {
	}
	,classifyToPlane: function(plane) {
		return away3d.core.math.PlaneClassification.INTERSECT;
	}
	,transformFrom: function(bounds,matrix) {
		this._alwaysIn = (js.Boot.__cast(bounds , away3d.bounds.NullBounds))._alwaysIn;
	}
	,__class__: away3d.bounds.NullBounds
});
away3d.core = {};
away3d.core.base = {};
away3d.core.base.Object3D = function() {
	this._smallestNumber = 0.0000000000000000000001;
	this._transformDirty = true;
	this._rotationX = 0;
	this._rotationY = 0;
	this._rotationZ = 0;
	this._eulers = new openfl.geom.Vector3D();
	this._flipY = new openfl.geom.Matrix3D();
	this._zOffset = 0;
	this._transform = new openfl.geom.Matrix3D();
	this._scaleX = 1;
	this._scaleY = 1;
	this._scaleZ = 1;
	this._x = 0;
	this._y = 0;
	this._z = 0;
	this._pivotPoint = new openfl.geom.Vector3D();
	this._pivotZero = true;
	this._pos = new openfl.geom.Vector3D();
	this._rot = new openfl.geom.Vector3D();
	this._sca = new openfl.geom.Vector3D();
	this._transformComponents = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(3);
			this1.data = this2;
		}
		this1.length = 3;
		this1.fixed = false;
		$r = this1;
		return $r;
	}(this))),3);
	var this3 = this._transformComponents;
	if(!this3.fixed) {
		if(0 >= this3.length) this3.length = 1;
		if(this3.data.length < this3.length) {
			var data;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data = this4;
			haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
			this3.data = data;
		}
	}
	this3.data[0] = this._pos;
	var this5 = this._transformComponents;
	if(!this5.fixed) {
		if(1 >= this5.length) this5.length = 2;
		if(this5.data.length < this5.length) {
			var data1;
			var this6;
			this6 = new Array(this5.data.length + 10);
			data1 = this6;
			haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data1,0,this5.data.length);
			this5.data = data1;
		}
	}
	this5.data[1] = this._rot;
	var this7 = this._transformComponents;
	if(!this7.fixed) {
		if(2 >= this7.length) this7.length = 3;
		if(this7.data.length < this7.length) {
			var data2;
			var this8;
			this8 = new Array(this7.data.length + 10);
			data2 = this8;
			haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data2,0,this7.data.length);
			this7.data = data2;
		}
	}
	this7.data[2] = this._sca;
	this._transform.identity();
	this._flipY.appendScale(1,-1,1);
	away3d.library.assets.NamedAssetBase.call(this);
};
$hxClasses["away3d.core.base.Object3D"] = away3d.core.base.Object3D;
away3d.core.base.Object3D.__name__ = ["away3d","core","base","Object3D"];
away3d.core.base.Object3D.__super__ = away3d.library.assets.NamedAssetBase;
away3d.core.base.Object3D.prototype = $extend(away3d.library.assets.NamedAssetBase.prototype,{
	_controller: null
	,_smallestNumber: null
	,_transformDirty: null
	,_positionDirty: null
	,_rotationDirty: null
	,_scaleDirty: null
	,_positionChanged: null
	,_rotationChanged: null
	,_scaleChanged: null
	,_rotationX: null
	,_rotationY: null
	,_rotationZ: null
	,_eulers: null
	,_flipY: null
	,_listenToPositionChanged: null
	,_listenToRotationChanged: null
	,_listenToScaleChanged: null
	,_zOffset: null
	,invalidatePivot: function() {
		this._pivotZero = this._pivotPoint.x == 0 && this._pivotPoint.y == 0 && this._pivotPoint.z == 0;
		this.invalidateTransform();
	}
	,invalidatePosition: function() {
		if(this._positionDirty) return;
		this._positionDirty = true;
		this.invalidateTransform();
		if(this._listenToPositionChanged) this.notifyPositionChanged();
	}
	,notifyPositionChanged: function() {
		if(this._positionChanged == null) this._positionChanged = new away3d.events.Object3DEvent(away3d.events.Object3DEvent.POSITION_CHANGED,this);
		this.dispatchEvent(this._positionChanged);
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		away3d.library.assets.NamedAssetBase.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
		switch(type) {
		case away3d.events.Object3DEvent.POSITION_CHANGED:
			this._listenToPositionChanged = true;
			break;
		case away3d.events.Object3DEvent.ROTATION_CHANGED:
			this._listenToRotationChanged = true;
			break;
		case away3d.events.Object3DEvent.SCALE_CHANGED:
			this._listenToRotationChanged = true;
			break;
		}
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
		away3d.library.assets.NamedAssetBase.prototype.removeEventListener.call(this,type,listener,useCapture);
		if(this.hasEventListener(type)) return;
		switch(type) {
		case away3d.events.Object3DEvent.POSITION_CHANGED:
			this._listenToPositionChanged = false;
			break;
		case away3d.events.Object3DEvent.ROTATION_CHANGED:
			this._listenToRotationChanged = false;
			break;
		case away3d.events.Object3DEvent.SCALE_CHANGED:
			this._listenToScaleChanged = false;
			break;
		}
	}
	,invalidateRotation: function() {
		if(this._rotationDirty) return;
		this._rotationDirty = true;
		this.invalidateTransform();
		if(this._listenToRotationChanged) this.notifyRotationChanged();
	}
	,notifyRotationChanged: function() {
		if(this._rotationChanged == null) this._rotationChanged = new away3d.events.Object3DEvent(away3d.events.Object3DEvent.ROTATION_CHANGED,this);
		this.dispatchEvent(this._rotationChanged);
	}
	,invalidateScale: function() {
		if(this._scaleDirty) return;
		this._scaleDirty = true;
		this.invalidateTransform();
		if(this._listenToScaleChanged) this.notifyScaleChanged();
	}
	,notifyScaleChanged: function() {
		if(this._scaleChanged == null) this._scaleChanged = new away3d.events.Object3DEvent(away3d.events.Object3DEvent.SCALE_CHANGED,this);
		this.dispatchEvent(this._scaleChanged);
	}
	,_transform: null
	,_scaleX: null
	,_scaleY: null
	,_scaleZ: null
	,_x: null
	,_y: null
	,_z: null
	,_pivotPoint: null
	,_pivotZero: null
	,_pos: null
	,_rot: null
	,_sca: null
	,_transformComponents: null
	,extra: null
	,get_x: function() {
		return this._x;
	}
	,set_x: function(val) {
		if(Math.isNaN(val)) val = 0;
		if(this._x == val) return val;
		this._x = val;
		this.invalidatePosition();
		return val;
	}
	,get_y: function() {
		return this._y;
	}
	,set_y: function(val) {
		if(Math.isNaN(val)) val = 0;
		if(this._y == val) return val;
		this._y = val;
		this.invalidatePosition();
		return val;
	}
	,get_z: function() {
		return this._z;
	}
	,set_z: function(val) {
		if(Math.isNaN(val)) val = 0;
		if(this._z == val) return val;
		this._z = val;
		this.invalidatePosition();
		return val;
	}
	,get_rotationX: function() {
		return this._rotationX * away3d.core.math.MathConsts.RADIANS_TO_DEGREES;
	}
	,set_rotationX: function(val) {
		if(Math.isNaN(val)) val = 0;
		if(this.get_rotationX() == val) return val;
		this._rotationX = val * away3d.core.math.MathConsts.DEGREES_TO_RADIANS;
		this.invalidateRotation();
		return val;
	}
	,get_rotationY: function() {
		return this._rotationY * away3d.core.math.MathConsts.RADIANS_TO_DEGREES;
	}
	,set_rotationY: function(val) {
		if(Math.isNaN(val)) val = 0;
		if(this.get_rotationY() == val) return val;
		this._rotationY = val * away3d.core.math.MathConsts.DEGREES_TO_RADIANS;
		this.invalidateRotation();
		return val;
	}
	,get_rotationZ: function() {
		return this._rotationZ * away3d.core.math.MathConsts.RADIANS_TO_DEGREES;
	}
	,set_rotationZ: function(val) {
		if(Math.isNaN(val)) val = 0;
		if(this.get_rotationZ() == val) return val;
		this._rotationZ = val * away3d.core.math.MathConsts.DEGREES_TO_RADIANS;
		this.invalidateRotation();
		return val;
	}
	,get_scaleX: function() {
		return this._scaleX;
	}
	,set_scaleX: function(val) {
		if(Math.isNaN(val)) val = 0;
		if(this._scaleX == val) return val;
		this._scaleX = val;
		this.invalidateScale();
		return val;
	}
	,get_scaleY: function() {
		return this._scaleY;
	}
	,set_scaleY: function(val) {
		if(Math.isNaN(val)) val = 0;
		if(this._scaleY == val) return val;
		this._scaleY = val;
		this.invalidateScale();
		return val;
	}
	,get_scaleZ: function() {
		return this._scaleZ;
	}
	,set_scaleZ: function(val) {
		if(Math.isNaN(val)) val = 0;
		if(this._scaleZ == val) return val;
		this._scaleZ = val;
		this.invalidateScale();
		return val;
	}
	,get_eulers: function() {
		this._eulers.x = this._rotationX * away3d.core.math.MathConsts.RADIANS_TO_DEGREES;
		this._eulers.y = this._rotationY * away3d.core.math.MathConsts.RADIANS_TO_DEGREES;
		this._eulers.z = this._rotationZ * away3d.core.math.MathConsts.RADIANS_TO_DEGREES;
		return this._eulers;
	}
	,set_eulers: function(value) {
		this._rotationX = value.x * away3d.core.math.MathConsts.DEGREES_TO_RADIANS;
		this._rotationY = value.y * away3d.core.math.MathConsts.DEGREES_TO_RADIANS;
		this._rotationZ = value.z * away3d.core.math.MathConsts.DEGREES_TO_RADIANS;
		this.invalidateRotation();
		return value;
	}
	,get_transform: function() {
		if(this._transformDirty) this.updateTransform();
		return this._transform;
	}
	,set_transform: function(val) {
		if(val.rawData.data[0] == 0) {
			var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
			val.copyRawDataTo(raw);
			if(!raw.fixed) {
				if(0 >= raw.length) raw.length = 1;
				if(raw.data.length < raw.length) {
					var data;
					var this1;
					this1 = new Array(raw.data.length + 10);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data,0,raw.data.length);
					raw.data = data;
				}
			}
			raw.data[0] = this._smallestNumber;
			val.copyRawDataFrom(raw);
		}
		var elements = val.decompose();
		var vec;
		vec = elements.data[0];
		if(this._x != vec.x || this._y != vec.y || this._z != vec.z) {
			this._x = vec.x;
			this._y = vec.y;
			this._z = vec.z;
			this.invalidatePosition();
		}
		vec = elements.data[1];
		if(this._rotationX != vec.x || this._rotationY != vec.y || this._rotationZ != vec.z) {
			this._rotationX = vec.x;
			this._rotationY = vec.y;
			this._rotationZ = vec.z;
			this.invalidateRotation();
		}
		vec = elements.data[2];
		if(this._scaleX != vec.x || this._scaleY != vec.y || this._scaleZ != vec.z) {
			this._scaleX = vec.x;
			this._scaleY = vec.y;
			this._scaleZ = vec.z;
			this.invalidateScale();
		}
		return val;
	}
	,get_pivotPoint: function() {
		return this._pivotPoint;
	}
	,set_pivotPoint: function(pivot) {
		this._pivotPoint = new openfl.geom.Vector3D(pivot.x,pivot.y,pivot.z,pivot.w);
		this.invalidatePivot();
		return pivot;
	}
	,get_position: function() {
		this.get_transform().copyColumnTo(3,this._pos);
		return this._pos.clone();
	}
	,set_position: function(value) {
		this._x = value.x;
		this._y = value.y;
		this._z = value.z;
		this.invalidatePosition();
		return value;
	}
	,get_forwardVector: function() {
		return away3d.core.math.Matrix3DUtils.getForward(this.get_transform());
	}
	,get_rightVector: function() {
		return away3d.core.math.Matrix3DUtils.getRight(this.get_transform());
	}
	,get_upVector: function() {
		return away3d.core.math.Matrix3DUtils.getUp(this.get_transform());
	}
	,get_backVector: function() {
		var director = away3d.core.math.Matrix3DUtils.getForward(this.get_transform());
		director.x *= -1;
		director.y *= -1;
		director.z *= -1;
		return director;
	}
	,get_leftVector: function() {
		var director = away3d.core.math.Matrix3DUtils.getRight(this.get_transform());
		director.x *= -1;
		director.y *= -1;
		director.z *= -1;
		return director;
	}
	,get_downVector: function() {
		var director = away3d.core.math.Matrix3DUtils.getUp(this.get_transform());
		director.x *= -1;
		director.y *= -1;
		director.z *= -1;
		return director;
	}
	,scale: function(value) {
		this._scaleX *= value;
		this._scaleY *= value;
		this._scaleZ *= value;
		this.invalidateScale();
	}
	,moveForward: function(distance) {
		this.translateLocal(new openfl.geom.Vector3D(0,0,1),distance);
	}
	,moveBackward: function(distance) {
		this.translateLocal(new openfl.geom.Vector3D(0,0,1),-distance);
	}
	,moveLeft: function(distance) {
		this.translateLocal(new openfl.geom.Vector3D(1,0,0),-distance);
	}
	,moveRight: function(distance) {
		this.translateLocal(new openfl.geom.Vector3D(1,0,0),distance);
	}
	,moveUp: function(distance) {
		this.translateLocal(new openfl.geom.Vector3D(0,1,0),distance);
	}
	,moveDown: function(distance) {
		this.translateLocal(new openfl.geom.Vector3D(0,1,0),-distance);
	}
	,moveTo: function(dx,dy,dz) {
		if(this._x == dx && this._y == dy && this._z == dz) return;
		this._x = dx;
		this._y = dy;
		this._z = dz;
		this.invalidatePosition();
	}
	,movePivot: function(dx,dy,dz) {
		if(this._pivotPoint == null) this._pivotPoint = new openfl.geom.Vector3D();
		this._pivotPoint.x += dx;
		this._pivotPoint.y += dy;
		this._pivotPoint.z += dz;
		this.invalidatePivot();
	}
	,translate: function(axis,distance) {
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var len = distance / Math.sqrt(x * x + y * y + z * z);
		this._x += x * len;
		this._y += y * len;
		this._z += z * len;
		this.invalidatePosition();
	}
	,translateLocal: function(axis,distance) {
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var len = distance / Math.sqrt(x * x + y * y + z * z);
		this.get_transform().prependTranslation(x * len,y * len,z * len);
		this._transform.copyColumnTo(3,this._pos);
		this._x = this._pos.x;
		this._y = this._pos.y;
		this._z = this._pos.z;
		this.invalidatePosition();
	}
	,pitch: function(angle) {
		this.rotate(new openfl.geom.Vector3D(1,0,0),angle);
	}
	,yaw: function(angle) {
		this.rotate(new openfl.geom.Vector3D(0,1,0),angle);
	}
	,roll: function(angle) {
		this.rotate(new openfl.geom.Vector3D(0,0,1),angle);
	}
	,clone: function() {
		var clone = new away3d.core.base.Object3D();
		clone.set_pivotPoint(this.get_pivotPoint());
		clone.set_transform(this.get_transform());
		clone.set_name(this.get_name());
		return clone;
	}
	,rotateTo: function(ax,ay,az) {
		this._rotationX = ax * away3d.core.math.MathConsts.DEGREES_TO_RADIANS;
		this._rotationY = ay * away3d.core.math.MathConsts.DEGREES_TO_RADIANS;
		this._rotationZ = az * away3d.core.math.MathConsts.DEGREES_TO_RADIANS;
		this.invalidateRotation();
	}
	,rotate: function(axis,angle) {
		var m = new openfl.geom.Matrix3D();
		m.prependRotation(angle,axis,null);
		var vec;
		var this1 = m.decompose();
		vec = this1.data[1];
		this._rotationX += vec.x;
		this._rotationY += vec.y;
		this._rotationZ += vec.z;
		this.invalidateRotation();
	}
	,lookAt: function(target,upAxis) {
		var yAxis;
		var zAxis;
		var xAxis;
		var raw;
		if(upAxis == null) upAxis = new openfl.geom.Vector3D(0,1,0);
		zAxis = target.subtract(this.get_position());
		zAxis.normalize();
		xAxis = new openfl.geom.Vector3D(upAxis.y * zAxis.z - upAxis.z * zAxis.y,upAxis.z * zAxis.x - upAxis.x * zAxis.z,upAxis.x * zAxis.y - upAxis.y * zAxis.x,1);
		xAxis.normalize();
		if(Math.sqrt(xAxis.x * xAxis.x + xAxis.y * xAxis.y + xAxis.z * xAxis.z) < .05) xAxis = upAxis.crossProduct(new openfl.geom.Vector3D(0,0,1));
		yAxis = new openfl.geom.Vector3D(zAxis.y * xAxis.z - zAxis.z * xAxis.y,zAxis.z * xAxis.x - zAxis.x * xAxis.z,zAxis.x * xAxis.y - zAxis.y * xAxis.x,1);
		raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
		if(!raw.fixed) {
			if(0 >= raw.length) raw.length = 1;
			if(raw.data.length < raw.length) {
				var data;
				var this1;
				this1 = new Array(raw.data.length + 10);
				data = this1;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data,0,raw.data.length);
				raw.data = data;
			}
		}
		raw.data[0] = this._scaleX * xAxis.x;
		if(!raw.fixed) {
			if(1 >= raw.length) raw.length = 2;
			if(raw.data.length < raw.length) {
				var data1;
				var this2;
				this2 = new Array(raw.data.length + 10);
				data1 = this2;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data1,0,raw.data.length);
				raw.data = data1;
			}
		}
		raw.data[1] = this._scaleX * xAxis.y;
		if(!raw.fixed) {
			if(2 >= raw.length) raw.length = 3;
			if(raw.data.length < raw.length) {
				var data2;
				var this3;
				this3 = new Array(raw.data.length + 10);
				data2 = this3;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data2,0,raw.data.length);
				raw.data = data2;
			}
		}
		raw.data[2] = this._scaleX * xAxis.z;
		if(!raw.fixed) {
			if(3 >= raw.length) raw.length = 4;
			if(raw.data.length < raw.length) {
				var data3;
				var this4;
				this4 = new Array(raw.data.length + 10);
				data3 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data3,0,raw.data.length);
				raw.data = data3;
			}
		}
		raw.data[3] = 0;
		if(!raw.fixed) {
			if(4 >= raw.length) raw.length = 5;
			if(raw.data.length < raw.length) {
				var data4;
				var this5;
				this5 = new Array(raw.data.length + 10);
				data4 = this5;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data4,0,raw.data.length);
				raw.data = data4;
			}
		}
		raw.data[4] = this._scaleY * yAxis.x;
		if(!raw.fixed) {
			if(5 >= raw.length) raw.length = 6;
			if(raw.data.length < raw.length) {
				var data5;
				var this6;
				this6 = new Array(raw.data.length + 10);
				data5 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data5,0,raw.data.length);
				raw.data = data5;
			}
		}
		raw.data[5] = this._scaleY * yAxis.y;
		if(!raw.fixed) {
			if(6 >= raw.length) raw.length = 7;
			if(raw.data.length < raw.length) {
				var data6;
				var this7;
				this7 = new Array(raw.data.length + 10);
				data6 = this7;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data6,0,raw.data.length);
				raw.data = data6;
			}
		}
		raw.data[6] = this._scaleY * yAxis.z;
		if(!raw.fixed) {
			if(7 >= raw.length) raw.length = 8;
			if(raw.data.length < raw.length) {
				var data7;
				var this8;
				this8 = new Array(raw.data.length + 10);
				data7 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data7,0,raw.data.length);
				raw.data = data7;
			}
		}
		raw.data[7] = 0;
		if(!raw.fixed) {
			if(8 >= raw.length) raw.length = 9;
			if(raw.data.length < raw.length) {
				var data8;
				var this9;
				this9 = new Array(raw.data.length + 10);
				data8 = this9;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data8,0,raw.data.length);
				raw.data = data8;
			}
		}
		raw.data[8] = this._scaleZ * zAxis.x;
		if(!raw.fixed) {
			if(9 >= raw.length) raw.length = 10;
			if(raw.data.length < raw.length) {
				var data9;
				var this10;
				this10 = new Array(raw.data.length + 10);
				data9 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data9,0,raw.data.length);
				raw.data = data9;
			}
		}
		raw.data[9] = this._scaleZ * zAxis.y;
		if(!raw.fixed) {
			if(10 >= raw.length) raw.length = 11;
			if(raw.data.length < raw.length) {
				var data10;
				var this11;
				this11 = new Array(raw.data.length + 10);
				data10 = this11;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data10,0,raw.data.length);
				raw.data = data10;
			}
		}
		raw.data[10] = this._scaleZ * zAxis.z;
		if(!raw.fixed) {
			if(11 >= raw.length) raw.length = 12;
			if(raw.data.length < raw.length) {
				var data11;
				var this12;
				this12 = new Array(raw.data.length + 10);
				data11 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data11,0,raw.data.length);
				raw.data = data11;
			}
		}
		raw.data[11] = 0;
		if(!raw.fixed) {
			if(12 >= raw.length) raw.length = 13;
			if(raw.data.length < raw.length) {
				var data12;
				var this13;
				this13 = new Array(raw.data.length + 10);
				data12 = this13;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data12,0,raw.data.length);
				raw.data = data12;
			}
		}
		raw.data[12] = this._x;
		if(!raw.fixed) {
			if(13 >= raw.length) raw.length = 14;
			if(raw.data.length < raw.length) {
				var data13;
				var this14;
				this14 = new Array(raw.data.length + 10);
				data13 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data13,0,raw.data.length);
				raw.data = data13;
			}
		}
		raw.data[13] = this._y;
		if(!raw.fixed) {
			if(14 >= raw.length) raw.length = 15;
			if(raw.data.length < raw.length) {
				var data14;
				var this15;
				this15 = new Array(raw.data.length + 10);
				data14 = this15;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data14,0,raw.data.length);
				raw.data = data14;
			}
		}
		raw.data[14] = this._z;
		if(!raw.fixed) {
			if(15 >= raw.length) raw.length = 16;
			if(raw.data.length < raw.length) {
				var data15;
				var this16;
				this16 = new Array(raw.data.length + 10);
				data15 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data15,0,raw.data.length);
				raw.data = data15;
			}
		}
		raw.data[15] = 1;
		this._transform.copyRawDataFrom(raw);
		this.set_transform(this.get_transform());
		if(zAxis.z < 0) {
			this.set_rotationY(180 - this.get_rotationY());
			var _g = this;
			_g.set_rotationX(_g.get_rotationX() - 180);
			var _g1 = this;
			_g1.set_rotationZ(_g1.get_rotationZ() - 180);
		}
	}
	,dispose: function() {
	}
	,disposeAsset: function() {
		this.dispose();
	}
	,invalidateTransform: function() {
		this._transformDirty = true;
	}
	,updateTransform: function() {
		this._pos.x = this._x;
		this._pos.y = this._y;
		this._pos.z = this._z;
		this._rot.x = this._rotationX;
		this._rot.y = this._rotationY;
		this._rot.z = this._rotationZ;
		this._sca.x = this._scaleX;
		this._sca.y = this._scaleY;
		this._sca.z = this._scaleZ;
		this._transform.recompose(this._transformComponents);
		if(!this._pivotZero) {
			this._transform.prependTranslation(-this._pivotPoint.x,-this._pivotPoint.y,-this._pivotPoint.z);
			this._transform.appendTranslation(this._pivotPoint.x,this._pivotPoint.y,this._pivotPoint.z);
		}
		this._transformDirty = false;
		this._positionDirty = false;
		this._rotationDirty = false;
		this._scaleDirty = false;
	}
	,get_zOffset: function() {
		return this._zOffset;
	}
	,set_zOffset: function(value) {
		this._zOffset = value;
		return value;
	}
	,__class__: away3d.core.base.Object3D
	,__properties__: $extend(away3d.library.assets.NamedAssetBase.prototype.__properties__,{set_zOffset:"set_zOffset",get_zOffset:"get_zOffset",get_downVector:"get_downVector",get_leftVector:"get_leftVector",get_backVector:"get_backVector",get_upVector:"get_upVector",get_rightVector:"get_rightVector",get_forwardVector:"get_forwardVector",set_position:"set_position",get_position:"get_position",set_pivotPoint:"set_pivotPoint",get_pivotPoint:"get_pivotPoint",set_transform:"set_transform",get_transform:"get_transform",set_eulers:"set_eulers",get_eulers:"get_eulers",set_scaleZ:"set_scaleZ",get_scaleZ:"get_scaleZ",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotationZ:"set_rotationZ",get_rotationZ:"get_rotationZ",set_rotationY:"set_rotationY",get_rotationY:"get_rotationY",set_rotationX:"set_rotationX",get_rotationX:"get_rotationX",set_z:"set_z",get_z:"get_z",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"})
});
away3d.containers = {};
away3d.containers.ObjectContainer3D = function() {
	this._sceneTransform = new openfl.geom.Matrix3D();
	this._sceneTransformDirty = true;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this._children = this1;
	this._mouseChildren = true;
	this._inverseSceneTransform = new openfl.geom.Matrix3D();
	this._inverseSceneTransformDirty = true;
	this._scenePosition = new openfl.geom.Vector3D();
	this._scenePositionDirty = true;
	this._explicitVisibility = true;
	this._implicitVisibility = true;
	this._ignoreTransform = false;
	away3d.core.base.Object3D.call(this);
};
$hxClasses["away3d.containers.ObjectContainer3D"] = away3d.containers.ObjectContainer3D;
away3d.containers.ObjectContainer3D.__name__ = ["away3d","containers","ObjectContainer3D"];
away3d.containers.ObjectContainer3D.__interfaces__ = [away3d.library.assets.IAsset];
away3d.containers.ObjectContainer3D.__super__ = away3d.core.base.Object3D;
away3d.containers.ObjectContainer3D.prototype = $extend(away3d.core.base.Object3D.prototype,{
	_ancestorsAllowMouseEnabled: null
	,_isRoot: null
	,_scene: null
	,_parent: null
	,_sceneTransform: null
	,_sceneTransformDirty: null
	,_explicitPartition: null
	,_implicitPartition: null
	,_mouseEnabled: null
	,_sceneTransformChanged: null
	,_scenechanged: null
	,_children: null
	,_mouseChildren: null
	,_oldScene: null
	,_inverseSceneTransform: null
	,_inverseSceneTransformDirty: null
	,_scenePosition: null
	,_scenePositionDirty: null
	,_explicitVisibility: null
	,_implicitVisibility: null
	,_listenToSceneTransformChanged: null
	,_listenToSceneChanged: null
	,_ignoreTransform: null
	,get_ignoreTransform: function() {
		return this._ignoreTransform;
	}
	,set_ignoreTransform: function(value) {
		this._ignoreTransform = value;
		this._sceneTransformDirty = !value;
		this._inverseSceneTransformDirty = !value;
		this._scenePositionDirty = !value;
		if(!value) {
			this._sceneTransform.identity();
			this._scenePosition.x = 0;
			this._scenePosition.y = 0;
			this._scenePosition.z = 0;
		}
		return value;
	}
	,get_implicitPartition: function() {
		return this._implicitPartition;
	}
	,set_implicitPartition: function(value) {
		if(value == this._implicitPartition) return value;
		var i = 0;
		var len = this._children.length;
		var child;
		this._implicitPartition = value;
		while(i < len) {
			var index = i++;
			child = this._children.data[index];
			if(child._explicitPartition == null) child.set_implicitPartition(value);
		}
		return value;
	}
	,get_isVisible: function() {
		return this._implicitVisibility && this._explicitVisibility;
	}
	,setParent: function(value) {
		this._parent = value;
		this.updateMouseChildren();
		if(value == null) {
			this.set_scene(null);
			return;
		}
		this.notifySceneTransformChange();
		this.notifySceneChange();
	}
	,notifySceneTransformChange: function() {
		if(this._sceneTransformDirty || this._ignoreTransform) return;
		this.invalidateSceneTransform();
		var i = 0;
		var len = this._children.length;
		while(i < len) ((function($this) {
			var $r;
			var index = i++;
			$r = $this._children.data[index];
			return $r;
		}(this))).notifySceneTransformChange();
		if(this._listenToSceneTransformChanged) {
			if(this._sceneTransformChanged == null) this._sceneTransformChanged = new away3d.events.Object3DEvent(away3d.events.Object3DEvent.SCENETRANSFORM_CHANGED,this);
			this.dispatchEvent(this._sceneTransformChanged);
		}
	}
	,notifySceneChange: function() {
		this.notifySceneTransformChange();
		var i = 0;
		var len = this._children.length;
		while(i < len) ((function($this) {
			var $r;
			var index = i++;
			$r = $this._children.data[index];
			return $r;
		}(this))).notifySceneChange();
		if(this._listenToSceneChanged) {
			if(this._scenechanged == null) this._scenechanged = new away3d.events.Object3DEvent(away3d.events.Object3DEvent.SCENE_CHANGED,this);
			this.dispatchEvent(this._scenechanged);
		}
	}
	,updateMouseChildren: function() {
		if(this._parent != null && !this._parent._isRoot) this._ancestorsAllowMouseEnabled = this.get_parent()._ancestorsAllowMouseEnabled && this._parent.get_mouseChildren(); else this._ancestorsAllowMouseEnabled = this.get_mouseChildren();
		var len = this._children.length;
		var i = 0;
		while(i < len) {
			this._children.data[i].updateMouseChildren();
			++i;
		}
	}
	,get_mouseEnabled: function() {
		return this._mouseEnabled;
	}
	,set_mouseEnabled: function(value) {
		this._mouseEnabled = value;
		this.updateMouseChildren();
		return value;
	}
	,invalidateTransform: function() {
		away3d.core.base.Object3D.prototype.invalidateTransform.call(this);
		this.notifySceneTransformChange();
	}
	,invalidateSceneTransform: function() {
		this._sceneTransformDirty = !this._ignoreTransform;
		this._inverseSceneTransformDirty = !this._ignoreTransform;
		this._scenePositionDirty = !this._ignoreTransform;
	}
	,updateSceneTransform: function() {
		if(this._parent != null && !this._parent._isRoot) {
			this._sceneTransform.copyFrom(this._parent.get_sceneTransform());
			this._sceneTransform.prepend(this.get_transform());
		} else this._sceneTransform.copyFrom(this.get_transform());
		this._sceneTransformDirty = false;
	}
	,get_mouseChildren: function() {
		return this._mouseChildren;
	}
	,set_mouseChildren: function(value) {
		this._mouseChildren = value;
		this.updateMouseChildren();
		return value;
	}
	,get_visible: function() {
		return this._explicitVisibility;
	}
	,set_visible: function(value) {
		var len = this._children.length;
		this._explicitVisibility = value;
		var i = 0;
		while(i < len) {
			this._children.data[i].updateImplicitVisibility();
			++i;
		}
		return value;
	}
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.CONTAINER;
	}
	,get_scenePosition: function() {
		if(this._scenePositionDirty) {
			this.get_sceneTransform().copyColumnTo(3,this._scenePosition);
			this._scenePositionDirty = false;
		}
		return this._scenePosition;
	}
	,get_minX: function() {
		var i = 0;
		var len = this._children.length;
		var min = Math.POSITIVE_INFINITY;
		var m;
		while(i < len) {
			var child;
			var index = i++;
			child = this._children.data[index];
			m = child.get_minX() + child.get_x();
			if(m < min) min = m;
		}
		return min;
	}
	,get_minY: function() {
		var i = 0;
		var len = this._children.length;
		var min = Math.POSITIVE_INFINITY;
		var m;
		while(i < len) {
			var child;
			var index = i++;
			child = this._children.data[index];
			m = child.get_minY() + child.get_y();
			if(m < min) min = m;
		}
		return min;
	}
	,get_minZ: function() {
		var i = 0;
		var len = this._children.length;
		var min = Math.POSITIVE_INFINITY;
		var m;
		while(i < len) {
			var child;
			var index = i++;
			child = this._children.data[index];
			m = child.get_minZ() + child.get_z();
			if(m < min) min = m;
		}
		return min;
	}
	,get_maxX: function() {
		var i = 0;
		var len = this._children.length;
		var max = Math.NEGATIVE_INFINITY;
		var m;
		while(i < len) {
			var child;
			var index = i++;
			child = this._children.data[index];
			m = child.get_maxX() + child.get_x();
			if(m > max) max = m;
		}
		return max;
	}
	,get_maxY: function() {
		var i = 0;
		var len = this._children.length;
		var max = Math.NEGATIVE_INFINITY;
		var m;
		while(i < len) {
			var child;
			var index = i++;
			child = this._children.data[index];
			m = child.get_maxY() + child.get_y();
			if(m > max) max = m;
		}
		return max;
	}
	,get_maxZ: function() {
		var i = 0;
		var len = this._children.length;
		var max = Math.NEGATIVE_INFINITY;
		var m;
		while(i < len) {
			var child;
			var index = i++;
			child = this._children.data[index];
			m = child.get_maxZ() + child.get_z();
			if(m > max) max = m;
		}
		return max;
	}
	,get_partition: function() {
		return this._explicitPartition;
	}
	,set_partition: function(value) {
		this._explicitPartition = value;
		this.set_implicitPartition(value != null?value:this._parent != null?this._parent.get_implicitPartition():null);
		return value;
	}
	,get_sceneTransform: function() {
		if(this._sceneTransformDirty) this.updateSceneTransform();
		return this._sceneTransform;
	}
	,get_scene: function() {
		return this._scene;
	}
	,set_scene: function(value) {
		var i = 0;
		var len = this._children.length;
		while(i < len) ((function($this) {
			var $r;
			var index = i++;
			$r = $this._children.data[index];
			return $r;
		}(this))).set_scene(value);
		if(this._scene == value) return value;
		if(value == null) this._oldScene = this._scene;
		if(this._explicitPartition != null && this._oldScene != null && this._oldScene != this._scene) this.set_partition(null);
		if(value != null) this._oldScene = null;
		this._scene = value;
		if(this._scene != null) this._scene.dispatchEvent(new away3d.events.Scene3DEvent(away3d.events.Scene3DEvent.ADDED_TO_SCENE,this)); else if(this._oldScene != null) this._oldScene.dispatchEvent(new away3d.events.Scene3DEvent(away3d.events.Scene3DEvent.REMOVED_FROM_SCENE,this));
		return value;
	}
	,get_inverseSceneTransform: function() {
		if(this._inverseSceneTransformDirty) {
			this._inverseSceneTransform.copyFrom(this.get_sceneTransform());
			this._inverseSceneTransform.invert();
			this._inverseSceneTransformDirty = false;
		}
		return this._inverseSceneTransform;
	}
	,get_parent: function() {
		return this._parent;
	}
	,contains: function(child) {
		return (function($this) {
			var $r;
			var this1 = $this._children;
			var value = -1;
			{
				var _g1 = 0;
				var _g = this1.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(this1.data[i] == child) {
						value = i;
						break;
					}
				}
			}
			$r = value;
			return $r;
		}(this)) >= 0;
	}
	,addChild: function(child) {
		if(child == null) throw new openfl.errors.Error("Parameter child cannot be null.");
		if(child._parent != null) child._parent.removeChild(child);
		if(child._explicitPartition == null) child.set_implicitPartition(this._implicitPartition);
		child.setParent(this);
		child.set_scene(this._scene);
		child.notifySceneTransformChange();
		child.updateMouseChildren();
		child.updateImplicitVisibility();
		var this1 = this._children;
		if(!this1.fixed) {
			this1.length++;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
			this1.data[this1.length - 1] = child;
		}
		this1.length;
		return child;
	}
	,addChildren: function(childarray) {
		var _g = 0;
		while(_g < childarray.length) {
			var child = childarray.data[_g];
			++_g;
			this.addChild(child);
		}
	}
	,removeChild: function(child) {
		if(child == null) throw new openfl.errors.Error("Parameter child cannot be null");
		var childIndex;
		var this1 = this._children;
		var value = -1;
		var _g1 = 0;
		var _g = this1.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this1.data[i] == child) {
				value = i;
				break;
			}
		}
		childIndex = value;
		if(childIndex == -1) throw new openfl.errors.Error("Parameter is not a child of the caller");
		this.removeChildInternal(childIndex,child);
	}
	,removeChildAt: function(index) {
		var child = this._children.data[index];
		this.removeChildInternal(index,child);
	}
	,removeChildInternal: function(childIndex,child) {
		var this1 = this._children;
		var pos = childIndex;
		var len = 1;
		if(pos < 0) pos += this1.length;
		if(pos + len > this1.length) len = this1.length - pos;
		if(len < 0) len = 0;
		var vectorData = new openfl.VectorData();
		vectorData.length = len;
		vectorData.fixed = false;
		var this2;
		this2 = new Array(len);
		vectorData.data = this2;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos,vectorData.data,0,len);
		if(len > 0) {
			this1.length -= len;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos + len,this1.data,pos,this1.length - pos);
		}
		vectorData;
		child.setParent(null);
		if(child._explicitPartition == null) child.set_implicitPartition(null);
	}
	,getChildAt: function(index) {
		return this._children.data[index];
	}
	,get_numChildren: function() {
		return this._children.length;
	}
	,lookAt: function(target,upAxis) {
		away3d.core.base.Object3D.prototype.lookAt.call(this,target,upAxis);
		this.notifySceneTransformChange();
	}
	,translateLocal: function(axis,distance) {
		away3d.core.base.Object3D.prototype.translateLocal.call(this,axis,distance);
		this.notifySceneTransformChange();
	}
	,dispose: function() {
		if(this.get_parent() != null) this.get_parent().removeChild(this);
	}
	,disposeWithChildren: function() {
		this.dispose();
		while(this.get_numChildren() > 0) this.getChildAt(0).dispose();
	}
	,clone: function() {
		var clone = new away3d.containers.ObjectContainer3D();
		clone.set_pivotPoint(this.get_pivotPoint());
		clone.set_transform(this.get_transform());
		clone.set_partition(this.get_partition());
		clone.set_name(this.get_name());
		var len = this._children.length;
		var i = 0;
		while(i < len) {
			clone.addChild(js.Boot.__cast(this._children.data[i].clone() , away3d.containers.ObjectContainer3D));
			++i;
		}
		return clone;
	}
	,rotate: function(axis,angle) {
		away3d.core.base.Object3D.prototype.rotate.call(this,axis,angle);
		this.notifySceneTransformChange();
	}
	,dispatchEvent: function(event) {
		var ret = away3d.core.base.Object3D.prototype.dispatchEvent.call(this,event);
		if(event.bubbles) {
			if(this._parent != null) this._parent.dispatchEvent(event); else if(this._scene != null) this._scene.dispatchEvent(event);
		}
		return ret;
	}
	,updateImplicitVisibility: function() {
		var len = this._children.length;
		this._implicitVisibility = this._parent._explicitVisibility && this._parent._implicitVisibility;
		var i = 0;
		while(i < len) {
			this._children.data[i].updateImplicitVisibility();
			++i;
		}
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		away3d.core.base.Object3D.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
		switch(type) {
		case away3d.events.Object3DEvent.SCENETRANSFORM_CHANGED:
			this._listenToSceneTransformChanged = true;
			break;
		case away3d.events.Object3DEvent.SCENE_CHANGED:
			this._listenToSceneChanged = true;
			break;
		}
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
		away3d.core.base.Object3D.prototype.removeEventListener.call(this,type,listener,useCapture);
		if(this.hasEventListener(type)) return;
		switch(type) {
		case away3d.events.Object3DEvent.SCENETRANSFORM_CHANGED:
			this._listenToSceneTransformChanged = false;
			break;
		case away3d.events.Object3DEvent.SCENE_CHANGED:
			this._listenToSceneChanged = false;
			break;
		}
	}
	,__class__: away3d.containers.ObjectContainer3D
	,__properties__: $extend(away3d.core.base.Object3D.prototype.__properties__,{get_numChildren:"get_numChildren",get_parent:"get_parent",get_inverseSceneTransform:"get_inverseSceneTransform",set_scene:"set_scene",get_scene:"get_scene",get_sceneTransform:"get_sceneTransform",set_partition:"set_partition",get_partition:"get_partition",get_maxZ:"get_maxZ",get_maxY:"get_maxY",get_maxX:"get_maxX",get_minZ:"get_minZ",get_minY:"get_minY",get_minX:"get_minX",get_scenePosition:"get_scenePosition",get_assetType:"get_assetType",set_visible:"set_visible",get_visible:"get_visible",set_mouseChildren:"set_mouseChildren",get_mouseChildren:"get_mouseChildren",set_mouseEnabled:"set_mouseEnabled",get_mouseEnabled:"get_mouseEnabled",get_isVisible:"get_isVisible",set_implicitPartition:"set_implicitPartition",get_implicitPartition:"get_implicitPartition",set_ignoreTransform:"set_ignoreTransform",get_ignoreTransform:"get_ignoreTransform"})
});
away3d.entities = {};
away3d.entities.Entity = function() {
	this._boundsIsShown = false;
	this._boundsInvalid = true;
	this._worldBoundsInvalid = true;
	away3d.containers.ObjectContainer3D.call(this);
	this._bounds = this.getDefaultBoundingVolume();
	this._worldBounds = this.getDefaultBoundingVolume();
};
$hxClasses["away3d.entities.Entity"] = away3d.entities.Entity;
away3d.entities.Entity.__name__ = ["away3d","entities","Entity"];
away3d.entities.Entity.__super__ = away3d.containers.ObjectContainer3D;
away3d.entities.Entity.prototype = $extend(away3d.containers.ObjectContainer3D.prototype,{
	_showBounds: null
	,_partitionNode: null
	,_boundsIsShown: null
	,_shaderPickingDetails: null
	,_pickingCollisionVO: null
	,_pickingCollider: null
	,_staticNode: null
	,_bounds: null
	,_boundsInvalid: null
	,_worldBounds: null
	,_worldBoundsInvalid: null
	,set_ignoreTransform: function(value) {
		if(this._scene != null) this._scene.invalidateEntityBounds(this);
		away3d.containers.ObjectContainer3D.prototype.set_ignoreTransform.call(this,value);
		return value;
	}
	,get_shaderPickingDetails: function() {
		return this._shaderPickingDetails;
	}
	,set_shaderPickingDetails: function(value) {
		this._shaderPickingDetails = value;
		return value;
	}
	,get_staticNode: function() {
		return this._staticNode;
	}
	,set_staticNode: function(value) {
		this._staticNode = value;
		return value;
	}
	,get_pickingCollisionVO: function() {
		if(this._pickingCollisionVO == null) this._pickingCollisionVO = new away3d.core.pick.PickingCollisionVO(this);
		return this._pickingCollisionVO;
	}
	,collidesBefore: function(shortestCollisionDistance,findClosest) {
		return true;
	}
	,get_showBounds: function() {
		return this._showBounds;
	}
	,set_showBounds: function(value) {
		if(value == this._showBounds) return value;
		this._showBounds = value;
		if(this._showBounds) this.addBounds(); else this.removeBounds();
		return value;
	}
	,get_minX: function() {
		if(this._boundsInvalid) this.updateBounds();
		return this._bounds.get_min().x;
	}
	,get_minY: function() {
		if(this._boundsInvalid) this.updateBounds();
		return this._bounds.get_min().y;
	}
	,get_minZ: function() {
		if(this._boundsInvalid) this.updateBounds();
		return this._bounds.get_min().z;
	}
	,get_maxX: function() {
		if(this._boundsInvalid) this.updateBounds();
		return this._bounds.get_max().x;
	}
	,get_maxY: function() {
		if(this._boundsInvalid) this.updateBounds();
		return this._bounds.get_max().y;
	}
	,get_maxZ: function() {
		if(this._boundsInvalid) this.updateBounds();
		return this._bounds.get_max().z;
	}
	,get_bounds: function() {
		if(this._boundsInvalid) this.updateBounds();
		return this._bounds;
	}
	,set_bounds: function(value) {
		this.removeBounds();
		this._bounds = value;
		this._worldBounds = value.clone();
		this.invalidateBounds();
		if(this._showBounds) this.addBounds();
		return value;
	}
	,get_worldBounds: function() {
		if(this._worldBoundsInvalid) this.updateWorldBounds();
		return this._worldBounds;
	}
	,updateWorldBounds: function() {
		this._worldBounds.transformFrom(this.get_bounds(),this.get_sceneTransform());
		this._worldBoundsInvalid = false;
	}
	,set_implicitPartition: function(value) {
		if(value == this._implicitPartition) return value;
		if(this._implicitPartition != null) this.notifyPartitionUnassigned();
		away3d.containers.ObjectContainer3D.prototype.set_implicitPartition.call(this,value);
		this.notifyPartitionAssigned();
		return value;
	}
	,set_scene: function(value) {
		if(value == this._scene) return value;
		if(this._scene != null) this._scene.unregisterEntity(this);
		if(value != null) value.registerEntity(this);
		away3d.containers.ObjectContainer3D.prototype.set_scene.call(this,value);
		return value;
	}
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.ENTITY;
	}
	,get_pickingCollider: function() {
		return this._pickingCollider;
	}
	,set_pickingCollider: function(value) {
		this._pickingCollider = value;
		return value;
	}
	,getEntityPartitionNode: function() {
		if(this._partitionNode == null) this._partitionNode = this.createEntityPartitionNode();
		return this._partitionNode;
	}
	,isIntersectingRay: function(rayPosition,rayDirection) {
		var localRayPosition = this.get_inverseSceneTransform().transformVector(rayPosition);
		var localRayDirection = this.get_inverseSceneTransform().deltaTransformVector(rayDirection);
		if(this.get_pickingCollisionVO().localNormal == null) this.get_pickingCollisionVO().localNormal = new openfl.geom.Vector3D();
		var rayEntryDistance = this.get_bounds().rayIntersection(localRayPosition,localRayDirection,this.get_pickingCollisionVO().localNormal);
		if(rayEntryDistance < 0) return false;
		this.get_pickingCollisionVO().rayEntryDistance = rayEntryDistance;
		this.get_pickingCollisionVO().localRayPosition = localRayPosition;
		this.get_pickingCollisionVO().localRayDirection = localRayDirection;
		this.get_pickingCollisionVO().rayPosition = rayPosition;
		this.get_pickingCollisionVO().rayDirection = rayDirection;
		this.get_pickingCollisionVO().rayOriginIsInsideBounds = rayEntryDistance == 0;
		return true;
	}
	,createEntityPartitionNode: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,getDefaultBoundingVolume: function() {
		return new away3d.bounds.AxisAlignedBoundingBox();
	}
	,updateBounds: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,invalidateSceneTransform: function() {
		if(!this._ignoreTransform) {
			away3d.containers.ObjectContainer3D.prototype.invalidateSceneTransform.call(this);
			this._worldBoundsInvalid = true;
			this.notifySceneBoundsInvalid();
		}
	}
	,invalidateBounds: function() {
		this._boundsInvalid = true;
		this._worldBoundsInvalid = true;
		this.notifySceneBoundsInvalid();
	}
	,updateMouseChildren: function() {
		if(this._parent == null && this.get_pickingCollider() != null) {
			if(js.Boot.__instanceof(this._parent,away3d.entities.Entity)) {
				var collider = (js.Boot.__cast(this._parent , away3d.entities.Entity)).get_pickingCollider();
				if(collider != null) this.set_pickingCollider(collider);
			}
		}
		away3d.containers.ObjectContainer3D.prototype.updateMouseChildren.call(this);
	}
	,notifySceneBoundsInvalid: function() {
		if(this._scene != null) this._scene.invalidateEntityBounds(this);
	}
	,notifyPartitionAssigned: function() {
		if(this._scene != null) this._scene.registerPartition(this);
	}
	,notifyPartitionUnassigned: function() {
		if(this._scene != null) this._scene.unregisterPartition(this);
	}
	,addBounds: function() {
		if(!this._boundsIsShown) {
			this._boundsIsShown = true;
			this.addChild(this._bounds.get_boundingRenderable());
		}
	}
	,removeBounds: function() {
		if(this._boundsIsShown) {
			this._boundsIsShown = false;
			this.removeChild(this._bounds.get_boundingRenderable());
			this._bounds.disposeRenderable();
		}
	}
	,internalUpdate: function() {
		if(this._controller != null) this._controller.update();
	}
	,__class__: away3d.entities.Entity
	,__properties__: $extend(away3d.containers.ObjectContainer3D.prototype.__properties__,{set_pickingCollider:"set_pickingCollider",get_pickingCollider:"get_pickingCollider",get_worldBounds:"get_worldBounds",set_bounds:"set_bounds",get_bounds:"get_bounds",set_showBounds:"set_showBounds",get_showBounds:"get_showBounds",get_pickingCollisionVO:"get_pickingCollisionVO",set_staticNode:"set_staticNode",get_staticNode:"get_staticNode",set_shaderPickingDetails:"set_shaderPickingDetails",get_shaderPickingDetails:"get_shaderPickingDetails"})
});
away3d.cameras = {};
away3d.cameras.Camera3D = function(lens) {
	this._viewProjection = new openfl.geom.Matrix3D();
	this._viewProjectionDirty = true;
	this._frustumPlanesDirty = true;
	away3d.entities.Entity.call(this);
	this._lens = lens;
	if(this._lens == null) this._lens = new away3d.cameras.lenses.PerspectiveLens();
	this._lens.addEventListener(away3d.events.LensEvent.MATRIX_CHANGED,$bind(this,this.onLensMatrixChanged));
	this._frustumPlanes = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(0);
			this1.data = this2;
		}
		this1.length = 0;
		this1.fixed = false;
		$r = this1;
		return $r;
	}(this))),6);
	var i = 0;
	while(i < 6) {
		var this3 = this._frustumPlanes;
		var value = new away3d.core.math.Plane3D();
		if(!this3.fixed) {
			if(i >= this3.length) this3.length = i + 1;
			if(this3.data.length < this3.length) {
				var data;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
				this3.data = data;
			}
		}
		this3.data[i] = value;
		++i;
	}
	this.set_z(-1000);
};
$hxClasses["away3d.cameras.Camera3D"] = away3d.cameras.Camera3D;
away3d.cameras.Camera3D.__name__ = ["away3d","cameras","Camera3D"];
away3d.cameras.Camera3D.__super__ = away3d.entities.Entity;
away3d.cameras.Camera3D.prototype = $extend(away3d.entities.Entity.prototype,{
	_viewProjection: null
	,_viewProjectionDirty: null
	,_lens: null
	,_frustumPlanes: null
	,_frustumPlanesDirty: null
	,getDefaultBoundingVolume: function() {
		return new away3d.bounds.NullBounds();
	}
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.CAMERA;
	}
	,onLensMatrixChanged: function(event) {
		this._viewProjectionDirty = true;
		this._frustumPlanesDirty = true;
		this.dispatchEvent(event);
	}
	,get_frustumPlanes: function() {
		if(this._frustumPlanesDirty) this.updateFrustum();
		return this._frustumPlanes;
	}
	,updateFrustum: function() {
		var a;
		var b;
		var c;
		var c11;
		var c12;
		var c13;
		var c14;
		var c21;
		var c22;
		var c23;
		var c24;
		var c31;
		var c32;
		var c33;
		var c34;
		var c41;
		var c42;
		var c43;
		var c44;
		var p;
		var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
		var invLen;
		this.get_viewProjection().copyRawDataTo(raw);
		c11 = raw.data[0];
		c12 = raw.data[4];
		c13 = raw.data[8];
		c14 = raw.data[12];
		c21 = raw.data[1];
		c22 = raw.data[5];
		c23 = raw.data[9];
		c24 = raw.data[13];
		c31 = raw.data[2];
		c32 = raw.data[6];
		c33 = raw.data[10];
		c34 = raw.data[14];
		c41 = raw.data[3];
		c42 = raw.data[7];
		c43 = raw.data[11];
		c44 = raw.data[15];
		p = this._frustumPlanes.data[0];
		a = c41 + c11;
		b = c42 + c12;
		c = c43 + c13;
		invLen = 1 / Math.sqrt(a * a + b * b + c * c);
		p.a = a * invLen;
		p.b = b * invLen;
		p.c = c * invLen;
		p.d = -(c44 + c14) * invLen;
		p = this._frustumPlanes.data[1];
		a = c41 - c11;
		b = c42 - c12;
		c = c43 - c13;
		invLen = 1 / Math.sqrt(a * a + b * b + c * c);
		p.a = a * invLen;
		p.b = b * invLen;
		p.c = c * invLen;
		p.d = (c14 - c44) * invLen;
		p = this._frustumPlanes.data[2];
		a = c41 + c21;
		b = c42 + c22;
		c = c43 + c23;
		invLen = 1 / Math.sqrt(a * a + b * b + c * c);
		p.a = a * invLen;
		p.b = b * invLen;
		p.c = c * invLen;
		p.d = -(c44 + c24) * invLen;
		p = this._frustumPlanes.data[3];
		a = c41 - c21;
		b = c42 - c22;
		c = c43 - c23;
		invLen = 1 / Math.sqrt(a * a + b * b + c * c);
		p.a = a * invLen;
		p.b = b * invLen;
		p.c = c * invLen;
		p.d = (c24 - c44) * invLen;
		p = this._frustumPlanes.data[4];
		a = c31;
		b = c32;
		c = c33;
		invLen = 1 / Math.sqrt(a * a + b * b + c * c);
		p.a = a * invLen;
		p.b = b * invLen;
		p.c = c * invLen;
		p.d = -c34 * invLen;
		p = this._frustumPlanes.data[5];
		a = c41 - c31;
		b = c42 - c32;
		c = c43 - c33;
		invLen = 1 / Math.sqrt(a * a + b * b + c * c);
		p.a = a * invLen;
		p.b = b * invLen;
		p.c = c * invLen;
		p.d = (c34 - c44) * invLen;
		this._frustumPlanesDirty = false;
	}
	,invalidateSceneTransform: function() {
		away3d.entities.Entity.prototype.invalidateSceneTransform.call(this);
		this._viewProjectionDirty = true;
		this._frustumPlanesDirty = true;
	}
	,updateBounds: function() {
		this._bounds.nullify();
		this._boundsInvalid = false;
	}
	,createEntityPartitionNode: function() {
		return new away3d.core.partition.CameraNode(this);
	}
	,get_lens: function() {
		return this._lens;
	}
	,set_lens: function(value) {
		if(this._lens == value) return value;
		if(value == null) throw new openfl.errors.Error("Lens cannot be null!");
		this._lens.removeEventListener(away3d.events.LensEvent.MATRIX_CHANGED,$bind(this,this.onLensMatrixChanged));
		this._lens = value;
		this._lens.addEventListener(away3d.events.LensEvent.MATRIX_CHANGED,$bind(this,this.onLensMatrixChanged));
		this.dispatchEvent(new away3d.events.CameraEvent(away3d.events.CameraEvent.LENS_CHANGED,this));
		return value;
	}
	,get_viewProjection: function() {
		if(this._viewProjectionDirty) {
			this._viewProjection.copyFrom(this.get_inverseSceneTransform());
			this._viewProjection.append(this._lens.get_matrix());
			this._viewProjectionDirty = false;
		}
		return this._viewProjection;
	}
	,unproject: function(nX,nY,sZ) {
		return this.get_sceneTransform().transformVector(this.get_lens().unproject(nX,nY,sZ));
	}
	,getRay: function(nX,nY,sZ) {
		return this.get_sceneTransform().deltaTransformVector(this.get_lens().unproject(nX,nY,sZ));
	}
	,project: function(point3d) {
		return this.get_lens().project(this.get_inverseSceneTransform().transformVector(point3d));
	}
	,__class__: away3d.cameras.Camera3D
	,__properties__: $extend(away3d.entities.Entity.prototype.__properties__,{get_viewProjection:"get_viewProjection",set_lens:"set_lens",get_lens:"get_lens",get_frustumPlanes:"get_frustumPlanes"})
});
away3d.cameras.lenses = {};
away3d.cameras.lenses.LensBase = function() {
	openfl.events.EventDispatcher.call(this);
	this._scissorRect = new openfl.geom.Rectangle();
	this._viewPort = new openfl.geom.Rectangle();
	this._near = 20;
	this._far = 3000;
	this._aspectRatio = 1;
	this._matrixInvalid = true;
	this._frustumCorners = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),24,0);
	this._unprojectionInvalid = true;
	this._matrix = new openfl.geom.Matrix3D();
};
$hxClasses["away3d.cameras.lenses.LensBase"] = away3d.cameras.lenses.LensBase;
away3d.cameras.lenses.LensBase.__name__ = ["away3d","cameras","lenses","LensBase"];
away3d.cameras.lenses.LensBase.__super__ = openfl.events.EventDispatcher;
away3d.cameras.lenses.LensBase.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	_matrix: null
	,_scissorRect: null
	,_viewPort: null
	,_near: null
	,_far: null
	,_aspectRatio: null
	,_matrixInvalid: null
	,_frustumCorners: null
	,_unprojection: null
	,_unprojectionInvalid: null
	,get_frustumCorners: function() {
		return this._frustumCorners;
	}
	,set_frustumCorners: function(frustumCorners) {
		this._frustumCorners = frustumCorners;
		return frustumCorners;
	}
	,get_matrix: function() {
		if(this._matrixInvalid) {
			this.updateMatrix();
			this._matrixInvalid = false;
		}
		return this._matrix;
	}
	,set_matrix: function(value) {
		this._matrix = value;
		this.invalidateMatrix();
		return value;
	}
	,get_near: function() {
		return this._near;
	}
	,set_near: function(value) {
		if(value == this._near) return value;
		this._near = value;
		this.invalidateMatrix();
		return value;
	}
	,get_far: function() {
		return this._far;
	}
	,set_far: function(value) {
		if(value == this._far) return value;
		this._far = value;
		this.invalidateMatrix();
		return value;
	}
	,project: function(point3d) {
		var v = this.get_matrix().transformVector(point3d);
		v.x = v.x / v.w;
		v.y = -v.y / v.w;
		v.z = point3d.z;
		return v;
	}
	,get_unprojectionMatrix: function() {
		if(this._unprojectionInvalid) {
			if(this._unprojection == null) this._unprojection = new openfl.geom.Matrix3D();
			this._unprojection.copyFrom(this.get_matrix());
			this._unprojection.invert();
			this._unprojectionInvalid = false;
		}
		return this._unprojection;
	}
	,unproject: function(nX,nY,sZ) {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,clone: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,get_aspectRatio: function() {
		return this._aspectRatio;
	}
	,set_aspectRatio: function(value) {
		if(this._aspectRatio == value || value * 0 != 0) return value;
		this._aspectRatio = value;
		this.invalidateMatrix();
		return value;
	}
	,invalidateMatrix: function() {
		this._matrixInvalid = true;
		this._unprojectionInvalid = true;
		this.dispatchEvent(new away3d.events.LensEvent(away3d.events.LensEvent.MATRIX_CHANGED,this));
	}
	,updateMatrix: function() {
		throw new away3d.errors.AbstractMethodError();
	}
	,updateScissorRect: function(x,y,width,height) {
		this._scissorRect.x = x;
		this._scissorRect.y = y;
		this._scissorRect.width = width;
		this._scissorRect.height = height;
		this.invalidateMatrix();
	}
	,updateViewport: function(x,y,width,height) {
		this._viewPort.x = x;
		this._viewPort.y = y;
		this._viewPort.width = width;
		this._viewPort.height = height;
		this.invalidateMatrix();
	}
	,__class__: away3d.cameras.lenses.LensBase
	,__properties__: {set_aspectRatio:"set_aspectRatio",get_aspectRatio:"get_aspectRatio",get_unprojectionMatrix:"get_unprojectionMatrix",set_far:"set_far",get_far:"get_far",set_near:"set_near",get_near:"get_near",set_matrix:"set_matrix",get_matrix:"get_matrix",set_frustumCorners:"set_frustumCorners",get_frustumCorners:"get_frustumCorners"}
});
away3d.cameras.lenses.FreeMatrixLens = function() {
	away3d.cameras.lenses.LensBase.call(this);
	this._matrix.copyFrom(new away3d.cameras.lenses.PerspectiveLens().get_matrix());
};
$hxClasses["away3d.cameras.lenses.FreeMatrixLens"] = away3d.cameras.lenses.FreeMatrixLens;
away3d.cameras.lenses.FreeMatrixLens.__name__ = ["away3d","cameras","lenses","FreeMatrixLens"];
away3d.cameras.lenses.FreeMatrixLens.__super__ = away3d.cameras.lenses.LensBase;
away3d.cameras.lenses.FreeMatrixLens.prototype = $extend(away3d.cameras.lenses.LensBase.prototype,{
	set_near: function(value) {
		this._near = value;
		return value;
	}
	,set_far: function(value) {
		this._far = value;
		return value;
	}
	,set_aspectRatio: function(value) {
		this._aspectRatio = value;
		return value;
	}
	,clone: function() {
		var clone = new away3d.cameras.lenses.FreeMatrixLens();
		clone._matrix.copyFrom(this._matrix);
		clone._near = this._near;
		clone._far = this._far;
		clone._aspectRatio = this._aspectRatio;
		clone.invalidateMatrix();
		return clone;
	}
	,updateMatrix: function() {
		this._matrixInvalid = false;
	}
	,__class__: away3d.cameras.lenses.FreeMatrixLens
});
away3d.cameras.lenses.PerspectiveLens = function(fieldOfView) {
	if(fieldOfView == null) fieldOfView = 60;
	away3d.cameras.lenses.LensBase.call(this);
	this.set_fieldOfView(fieldOfView);
};
$hxClasses["away3d.cameras.lenses.PerspectiveLens"] = away3d.cameras.lenses.PerspectiveLens;
away3d.cameras.lenses.PerspectiveLens.__name__ = ["away3d","cameras","lenses","PerspectiveLens"];
away3d.cameras.lenses.PerspectiveLens.__super__ = away3d.cameras.lenses.LensBase;
away3d.cameras.lenses.PerspectiveLens.prototype = $extend(away3d.cameras.lenses.LensBase.prototype,{
	_fieldOfView: null
	,_focalLength: null
	,_focalLengthInv: null
	,_yMax: null
	,_xMax: null
	,get_fieldOfView: function() {
		return this._fieldOfView;
	}
	,set_fieldOfView: function(value) {
		if(value == this._fieldOfView) return value;
		this._fieldOfView = value;
		this._focalLengthInv = Math.tan(this._fieldOfView * Math.PI / 360);
		this._focalLength = 1 / this._focalLengthInv;
		this.invalidateMatrix();
		return value;
	}
	,get_focalLength: function() {
		return this._focalLength;
	}
	,set_focalLength: function(value) {
		if(value == this._focalLength) return value;
		this._focalLength = value;
		this._focalLengthInv = 1 / this._focalLength;
		this._fieldOfView = Math.atan(this._focalLengthInv) * 360 / Math.PI;
		this.invalidateMatrix();
		return value;
	}
	,unproject: function(nX,nY,sZ) {
		var v = new openfl.geom.Vector3D(nX,-nY,sZ,1.0);
		v.x *= sZ;
		v.y *= sZ;
		v = this.get_unprojectionMatrix().transformVector(v);
		v.z = sZ;
		return v;
	}
	,clone: function() {
		var clone = new away3d.cameras.lenses.PerspectiveLens(this._fieldOfView);
		clone._near = this._near;
		clone._far = this._far;
		clone._aspectRatio = this._aspectRatio;
		return clone;
	}
	,updateMatrix: function() {
		var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
		this._yMax = this._near * this._focalLengthInv;
		this._xMax = this._yMax * this._aspectRatio;
		var left;
		var right;
		var top;
		var bottom;
		if(this._scissorRect.x == 0 && this._scissorRect.y == 0 && this._scissorRect.width == this._viewPort.width && this._scissorRect.height == this._viewPort.height) {
			left = -this._xMax;
			right = this._xMax;
			top = -this._yMax;
			bottom = this._yMax;
			if(!raw.fixed) {
				if(0 >= raw.length) raw.length = 1;
				if(raw.data.length < raw.length) {
					var data;
					var this1;
					this1 = new Array(raw.data.length + 10);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data,0,raw.data.length);
					raw.data = data;
				}
			}
			raw.data[0] = this._near / this._xMax;
			if(!raw.fixed) {
				if(5 >= raw.length) raw.length = 6;
				if(raw.data.length < raw.length) {
					var data1;
					var this2;
					this2 = new Array(raw.data.length + 10);
					data1 = this2;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data1,0,raw.data.length);
					raw.data = data1;
				}
			}
			raw.data[5] = this._near / this._yMax;
			if(!raw.fixed) {
				if(10 >= raw.length) raw.length = 11;
				if(raw.data.length < raw.length) {
					var data2;
					var this3;
					this3 = new Array(raw.data.length + 10);
					data2 = this3;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data2,0,raw.data.length);
					raw.data = data2;
				}
			}
			raw.data[10] = this._far / (this._far - this._near);
			if(!raw.fixed) {
				if(11 >= raw.length) raw.length = 12;
				if(raw.data.length < raw.length) {
					var data3;
					var this4;
					this4 = new Array(raw.data.length + 10);
					data3 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data3,0,raw.data.length);
					raw.data = data3;
				}
			}
			raw.data[11] = 1;
			var value;
			var value1;
			var value2;
			var value3;
			var value4;
			var value5;
			var value6;
			var value7;
			var value8;
			var value9;
			if(!raw.fixed) {
				if(15 >= raw.length) raw.length = 16;
				if(raw.data.length < raw.length) {
					var data4;
					var this5;
					this5 = new Array(raw.data.length + 10);
					data4 = this5;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data4,0,raw.data.length);
					raw.data = data4;
				}
			}
			value9 = raw.data[15] = 0;
			if(!raw.fixed) {
				if(13 >= raw.length) raw.length = 14;
				if(raw.data.length < raw.length) {
					var data5;
					var this6;
					this6 = new Array(raw.data.length + 10);
					data5 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data5,0,raw.data.length);
					raw.data = data5;
				}
			}
			value8 = raw.data[13] = value9;
			if(!raw.fixed) {
				if(12 >= raw.length) raw.length = 13;
				if(raw.data.length < raw.length) {
					var data6;
					var this7;
					this7 = new Array(raw.data.length + 10);
					data6 = this7;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data6,0,raw.data.length);
					raw.data = data6;
				}
			}
			value7 = raw.data[12] = value8;
			if(!raw.fixed) {
				if(9 >= raw.length) raw.length = 10;
				if(raw.data.length < raw.length) {
					var data7;
					var this8;
					this8 = new Array(raw.data.length + 10);
					data7 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data7,0,raw.data.length);
					raw.data = data7;
				}
			}
			value6 = raw.data[9] = value7;
			if(!raw.fixed) {
				if(8 >= raw.length) raw.length = 9;
				if(raw.data.length < raw.length) {
					var data8;
					var this9;
					this9 = new Array(raw.data.length + 10);
					data8 = this9;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data8,0,raw.data.length);
					raw.data = data8;
				}
			}
			value5 = raw.data[8] = value6;
			if(!raw.fixed) {
				if(7 >= raw.length) raw.length = 8;
				if(raw.data.length < raw.length) {
					var data9;
					var this10;
					this10 = new Array(raw.data.length + 10);
					data9 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data9,0,raw.data.length);
					raw.data = data9;
				}
			}
			value4 = raw.data[7] = value5;
			if(!raw.fixed) {
				if(6 >= raw.length) raw.length = 7;
				if(raw.data.length < raw.length) {
					var data10;
					var this11;
					this11 = new Array(raw.data.length + 10);
					data10 = this11;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data10,0,raw.data.length);
					raw.data = data10;
				}
			}
			value3 = raw.data[6] = value4;
			if(!raw.fixed) {
				if(4 >= raw.length) raw.length = 5;
				if(raw.data.length < raw.length) {
					var data11;
					var this12;
					this12 = new Array(raw.data.length + 10);
					data11 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data11,0,raw.data.length);
					raw.data = data11;
				}
			}
			value2 = raw.data[4] = value3;
			if(!raw.fixed) {
				if(3 >= raw.length) raw.length = 4;
				if(raw.data.length < raw.length) {
					var data12;
					var this13;
					this13 = new Array(raw.data.length + 10);
					data12 = this13;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data12,0,raw.data.length);
					raw.data = data12;
				}
			}
			value1 = raw.data[3] = value2;
			if(!raw.fixed) {
				if(2 >= raw.length) raw.length = 3;
				if(raw.data.length < raw.length) {
					var data13;
					var this14;
					this14 = new Array(raw.data.length + 10);
					data13 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data13,0,raw.data.length);
					raw.data = data13;
				}
			}
			value = raw.data[2] = value1;
			if(!raw.fixed) {
				if(1 >= raw.length) raw.length = 2;
				if(raw.data.length < raw.length) {
					var data14;
					var this15;
					this15 = new Array(raw.data.length + 10);
					data14 = this15;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data14,0,raw.data.length);
					raw.data = data14;
				}
			}
			raw.data[1] = value;
			if(!raw.fixed) {
				if(14 >= raw.length) raw.length = 15;
				if(raw.data.length < raw.length) {
					var data15;
					var this16;
					this16 = new Array(raw.data.length + 10);
					data15 = this16;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data15,0,raw.data.length);
					raw.data = data15;
				}
			}
			raw.data[14] = -this._near * raw.data[10];
		} else {
			var xWidth = this._xMax * (this._viewPort.width / this._scissorRect.width);
			var yHgt = this._yMax * (this._viewPort.height / this._scissorRect.height);
			var center = this._xMax * (this._scissorRect.x * 2 - this._viewPort.width) / this._scissorRect.width + this._xMax;
			var middle = -this._yMax * (this._scissorRect.y * 2 - this._viewPort.height) / this._scissorRect.height - this._yMax;
			left = center - xWidth;
			right = center + xWidth;
			top = middle - yHgt;
			bottom = middle + yHgt;
			if(!raw.fixed) {
				if(0 >= raw.length) raw.length = 1;
				if(raw.data.length < raw.length) {
					var data16;
					var this17;
					this17 = new Array(raw.data.length + 10);
					data16 = this17;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data16,0,raw.data.length);
					raw.data = data16;
				}
			}
			raw.data[0] = 2 * this._near / (right - left);
			if(!raw.fixed) {
				if(5 >= raw.length) raw.length = 6;
				if(raw.data.length < raw.length) {
					var data17;
					var this18;
					this18 = new Array(raw.data.length + 10);
					data17 = this18;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data17,0,raw.data.length);
					raw.data = data17;
				}
			}
			raw.data[5] = 2 * this._near / (bottom - top);
			if(!raw.fixed) {
				if(8 >= raw.length) raw.length = 9;
				if(raw.data.length < raw.length) {
					var data18;
					var this19;
					this19 = new Array(raw.data.length + 10);
					data18 = this19;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data18,0,raw.data.length);
					raw.data = data18;
				}
			}
			raw.data[8] = (right + left) / (right - left);
			if(!raw.fixed) {
				if(9 >= raw.length) raw.length = 10;
				if(raw.data.length < raw.length) {
					var data19;
					var this20;
					this20 = new Array(raw.data.length + 10);
					data19 = this20;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data19,0,raw.data.length);
					raw.data = data19;
				}
			}
			raw.data[9] = (bottom + top) / (bottom - top);
			if(!raw.fixed) {
				if(10 >= raw.length) raw.length = 11;
				if(raw.data.length < raw.length) {
					var data20;
					var this21;
					this21 = new Array(raw.data.length + 10);
					data20 = this21;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data20,0,raw.data.length);
					raw.data = data20;
				}
			}
			raw.data[10] = (this._far + this._near) / (this._far - this._near);
			if(!raw.fixed) {
				if(11 >= raw.length) raw.length = 12;
				if(raw.data.length < raw.length) {
					var data21;
					var this22;
					this22 = new Array(raw.data.length + 10);
					data21 = this22;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data21,0,raw.data.length);
					raw.data = data21;
				}
			}
			raw.data[11] = 1;
			var value10;
			var value11;
			var value12;
			var value13;
			var value14;
			var value15;
			var value16;
			var value17;
			if(!raw.fixed) {
				if(15 >= raw.length) raw.length = 16;
				if(raw.data.length < raw.length) {
					var data22;
					var this23;
					this23 = new Array(raw.data.length + 10);
					data22 = this23;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data22,0,raw.data.length);
					raw.data = data22;
				}
			}
			value17 = raw.data[15] = 0;
			if(!raw.fixed) {
				if(13 >= raw.length) raw.length = 14;
				if(raw.data.length < raw.length) {
					var data23;
					var this24;
					this24 = new Array(raw.data.length + 10);
					data23 = this24;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data23,0,raw.data.length);
					raw.data = data23;
				}
			}
			value16 = raw.data[13] = value17;
			if(!raw.fixed) {
				if(12 >= raw.length) raw.length = 13;
				if(raw.data.length < raw.length) {
					var data24;
					var this25;
					this25 = new Array(raw.data.length + 10);
					data24 = this25;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data24,0,raw.data.length);
					raw.data = data24;
				}
			}
			value15 = raw.data[12] = value16;
			if(!raw.fixed) {
				if(7 >= raw.length) raw.length = 8;
				if(raw.data.length < raw.length) {
					var data25;
					var this26;
					this26 = new Array(raw.data.length + 10);
					data25 = this26;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data25,0,raw.data.length);
					raw.data = data25;
				}
			}
			value14 = raw.data[7] = value15;
			if(!raw.fixed) {
				if(6 >= raw.length) raw.length = 7;
				if(raw.data.length < raw.length) {
					var data26;
					var this27;
					this27 = new Array(raw.data.length + 10);
					data26 = this27;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data26,0,raw.data.length);
					raw.data = data26;
				}
			}
			value13 = raw.data[6] = value14;
			if(!raw.fixed) {
				if(4 >= raw.length) raw.length = 5;
				if(raw.data.length < raw.length) {
					var data27;
					var this28;
					this28 = new Array(raw.data.length + 10);
					data27 = this28;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data27,0,raw.data.length);
					raw.data = data27;
				}
			}
			value12 = raw.data[4] = value13;
			if(!raw.fixed) {
				if(3 >= raw.length) raw.length = 4;
				if(raw.data.length < raw.length) {
					var data28;
					var this29;
					this29 = new Array(raw.data.length + 10);
					data28 = this29;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data28,0,raw.data.length);
					raw.data = data28;
				}
			}
			value11 = raw.data[3] = value12;
			if(!raw.fixed) {
				if(2 >= raw.length) raw.length = 3;
				if(raw.data.length < raw.length) {
					var data29;
					var this30;
					this30 = new Array(raw.data.length + 10);
					data29 = this30;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data29,0,raw.data.length);
					raw.data = data29;
				}
			}
			value10 = raw.data[2] = value11;
			if(!raw.fixed) {
				if(1 >= raw.length) raw.length = 2;
				if(raw.data.length < raw.length) {
					var data30;
					var this31;
					this31 = new Array(raw.data.length + 10);
					data30 = this31;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data30,0,raw.data.length);
					raw.data = data30;
				}
			}
			raw.data[1] = value10;
			if(!raw.fixed) {
				if(14 >= raw.length) raw.length = 15;
				if(raw.data.length < raw.length) {
					var data31;
					var this32;
					this32 = new Array(raw.data.length + 10);
					data31 = this32;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data31,0,raw.data.length);
					raw.data = data31;
				}
			}
			raw.data[14] = -2 * this._far * this._near / (this._far - this._near);
		}
		this._matrix.copyRawDataFrom(raw);
		var yMaxFar = this._far * this._focalLengthInv;
		var xMaxFar = yMaxFar * this._aspectRatio;
		this._frustumCorners[0] = this._frustumCorners[9] = left;
		this._frustumCorners[3] = this._frustumCorners[6] = right;
		this._frustumCorners[1] = this._frustumCorners[4] = top;
		this._frustumCorners[7] = this._frustumCorners[10] = bottom;
		this._frustumCorners[12] = this._frustumCorners[21] = -xMaxFar;
		this._frustumCorners[15] = this._frustumCorners[18] = xMaxFar;
		this._frustumCorners[13] = this._frustumCorners[16] = -yMaxFar;
		this._frustumCorners[19] = this._frustumCorners[22] = yMaxFar;
		this._frustumCorners[2] = this._frustumCorners[5] = this._frustumCorners[8] = this._frustumCorners[11] = this._near;
		this._frustumCorners[14] = this._frustumCorners[17] = this._frustumCorners[20] = this._frustumCorners[23] = this._far;
		this._matrixInvalid = false;
	}
	,__class__: away3d.cameras.lenses.PerspectiveLens
	,__properties__: $extend(away3d.cameras.lenses.LensBase.prototype.__properties__,{set_focalLength:"set_focalLength",get_focalLength:"get_focalLength",set_fieldOfView:"set_fieldOfView",get_fieldOfView:"get_fieldOfView"})
});
away3d.containers.Scene3D = function() {
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this._partitions = this1;
	this._sceneGraphRoot = new away3d.containers.ObjectContainer3D();
	this._sceneGraphRoot.set_scene(this);
	this._sceneGraphRoot._isRoot = true;
	this._sceneGraphRoot.set_partition(new away3d.core.partition.Partition3D(new away3d.core.partition.NodeBase()));
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["away3d.containers.Scene3D"] = away3d.containers.Scene3D;
away3d.containers.Scene3D.__name__ = ["away3d","containers","Scene3D"];
away3d.containers.Scene3D.__super__ = openfl.events.EventDispatcher;
away3d.containers.Scene3D.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	_sceneGraphRoot: null
	,_partitions: null
	,traversePartitions: function(traverser) {
		var i = 0;
		var len = this._partitions.length;
		traverser.scene = this;
		while(i < len) ((function($this) {
			var $r;
			var index = i++;
			$r = $this._partitions.data[index];
			return $r;
		}(this))).traverse(traverser);
	}
	,get_partition: function() {
		return this._sceneGraphRoot.get_partition();
	}
	,set_partition: function(value) {
		this._sceneGraphRoot.set_partition(value);
		this.dispatchEvent(new away3d.events.Scene3DEvent(away3d.events.Scene3DEvent.PARTITION_CHANGED,this._sceneGraphRoot));
		return value;
	}
	,contains: function(child) {
		return this._sceneGraphRoot.contains(child);
	}
	,addChild: function(child) {
		return this._sceneGraphRoot.addChild(child);
	}
	,removeChild: function(child) {
		this._sceneGraphRoot.removeChild(child);
	}
	,removeChildAt: function(index) {
		this._sceneGraphRoot.removeChildAt(index);
	}
	,getChildAt: function(index) {
		return this._sceneGraphRoot.getChildAt(index);
	}
	,get_numChildren: function() {
		return this._sceneGraphRoot.get_numChildren();
	}
	,registerEntity: function(entity) {
		var partition = entity.get_implicitPartition();
		this.addPartitionUnique(partition);
		partition.markForUpdate(entity);
	}
	,unregisterEntity: function(entity) {
		entity.get_implicitPartition().removeEntity(entity);
	}
	,invalidateEntityBounds: function(entity) {
		entity.get_implicitPartition().markForUpdate(entity);
	}
	,registerPartition: function(entity) {
		this.addPartitionUnique(entity.get_implicitPartition());
	}
	,unregisterPartition: function(entity) {
		entity.get_implicitPartition().removeEntity(entity);
	}
	,addPartitionUnique: function(partition) {
		if((function($this) {
			var $r;
			var this1 = $this._partitions;
			var value = -1;
			{
				var _g1 = 0;
				var _g = this1.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(this1.data[i] == partition) {
						value = i;
						break;
					}
				}
			}
			$r = value;
			return $r;
		}(this)) == -1) {
			var this2 = this._partitions;
			if(!this2.fixed) {
				this2.length++;
				if(this2.data.length < this2.length) {
					var data;
					var this3;
					this3 = new Array(this2.data.length + 10);
					data = this3;
					haxe.ds._Vector.Vector_Impl_.blit(this2.data,0,data,0,this2.data.length);
					this2.data = data;
				}
				this2.data[this2.length - 1] = partition;
			}
			this2.length;
		}
	}
	,__class__: away3d.containers.Scene3D
	,__properties__: {get_numChildren:"get_numChildren",set_partition:"set_partition",get_partition:"get_partition"}
});
away3d.containers.View3D = function(scene,camera,renderer,forceSoftware,profile,contextIndex) {
	if(contextIndex == null) contextIndex = -1;
	if(profile == null) profile = "baseline";
	if(forceSoftware == null) forceSoftware = false;
	this._contextIndex = -1;
	this._layeredView = false;
	this._width = 0;
	this._height = 0;
	this._localPos = new openfl.geom.Point();
	this._globalPos = new openfl.geom.Point();
	openfl.display.Sprite.call(this);
	this._time = 0;
	this._backgroundColor = 0;
	this._backgroundAlpha = 1;
	this._depthTextureInvalid = true;
	this._backBufferInvalid = true;
	this._rightClickMenuEnabled = true;
	this._shareContext = false;
	this._scissorRectDirty = true;
	this._viewportDirty = true;
	this._layeredView = false;
	this._profile = profile;
	if(scene != null) this._scene = scene; else this._scene = new away3d.containers.Scene3D();
	this._scene.addEventListener(away3d.events.Scene3DEvent.PARTITION_CHANGED,$bind(this,this.onScenePartitionChanged));
	if(camera != null) this._camera = camera; else this._camera = new away3d.cameras.Camera3D();
	if(renderer != null) this._renderer = renderer; else this._renderer = new away3d.core.render.DefaultRenderer();
	this._depthRenderer = new away3d.core.render.DepthRenderer();
	this._forceSoftware = forceSoftware;
	this._contextIndex = contextIndex;
	this._entityCollector = this._renderer.createEntityCollector();
	this._entityCollector.set_camera(this._camera);
	this._scissorRect = new openfl.geom.Rectangle();
	this.initHitField();
	this._mouse3DManager = new away3d.core.managers.Mouse3DManager();
	this._mouse3DManager.enableMouseListeners(this);
	this._touch3DManager = new away3d.core.managers.Touch3DManager();
	this.addEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.onAddedToStage),false,0,true);
	this.addEventListener(openfl.events.Event.ADDED,$bind(this,this.onAdded),false,0,true);
	this._camera.addEventListener(away3d.events.CameraEvent.LENS_CHANGED,$bind(this,this.onLensChanged));
	this._camera.set_partition(this._scene.get_partition());
};
$hxClasses["away3d.containers.View3D"] = away3d.containers.View3D;
away3d.containers.View3D.__name__ = ["away3d","containers","View3D"];
away3d.containers.View3D.__super__ = openfl.display.Sprite;
away3d.containers.View3D.prototype = $extend(openfl.display.Sprite.prototype,{
	_width: null
	,_height: null
	,_localPos: null
	,_globalPos: null
	,_globalPosDirty: null
	,_scene: null
	,_camera: null
	,_entityCollector: null
	,_aspectRatio: null
	,_time: null
	,_deltaTime: null
	,_backgroundColor: null
	,_backgroundAlpha: null
	,_mouse3DManager: null
	,_touch3DManager: null
	,_renderer: null
	,_depthRenderer: null
	,_addedToStage: null
	,_forceSoftware: null
	,_filter3DRenderer: null
	,_requireDepthRender: null
	,_depthRender: null
	,_depthTextureInvalid: null
	,_hitField: null
	,_parentIsStage: null
	,_background: null
	,_stage3DProxy: null
	,_backBufferInvalid: null
	,_antiAlias: null
	,_rttBufferManager: null
	,_rightClickMenuEnabled: null
	,_sourceURL: null
	,_shareContext: null
	,_scissorRect: null
	,_scissorRectDirty: null
	,_viewportDirty: null
	,_depthPrepass: null
	,_profile: null
	,_layeredView: null
	,_callbackMethod: null
	,_contextIndex: null
	,get_depthPrepass: function() {
		return this._depthPrepass;
	}
	,set_depthPrepass: function(value) {
		this._depthPrepass = value;
		return value;
	}
	,onScenePartitionChanged: function(event) {
		if(this._camera != null) this._camera.set_partition(this.get_scene().get_partition());
	}
	,get_stage3DProxy: function() {
		return this._stage3DProxy;
	}
	,set_stage3DProxy: function(stage3DProxy) {
		if(this._stage3DProxy != null) this._stage3DProxy.removeEventListener(away3d.events.Stage3DEvent.VIEWPORT_UPDATED,$bind(this,this.onViewportUpdated));
		this._stage3DProxy = stage3DProxy;
		this._stage3DProxy.addEventListener(away3d.events.Stage3DEvent.VIEWPORT_UPDATED,$bind(this,this.onViewportUpdated));
		this._renderer.set_stage3DProxy(this._depthRenderer.set_stage3DProxy(this._stage3DProxy));
		this._globalPosDirty = true;
		this._backBufferInvalid = true;
		return this._stage3DProxy;
	}
	,get_forceMouseMove: function() {
		return this._mouse3DManager.get_forceMouseMove();
	}
	,set_forceMouseMove: function(value) {
		this._mouse3DManager.set_forceMouseMove(value);
		return value;
	}
	,get_background: function() {
		return this._background;
	}
	,set_background: function(value) {
		this._background = value;
		this._renderer.set_background(this._background);
		return this._background;
	}
	,get_layeredView: function() {
		return this._layeredView;
	}
	,set_layeredView: function(value) {
		this._layeredView = value;
		return this._layeredView;
	}
	,initHitField: function() {
		this._hitField = new openfl.display.Sprite();
		this._hitField.set_alpha(0);
		this._hitField.doubleClickEnabled = true;
		this._hitField.get_graphics().beginFill(0);
		this._hitField.get_graphics().drawRect(0,0,100,100);
		this.addChild(this._hitField);
	}
	,get_filters3d: function() {
		if(this._filter3DRenderer != null) return this._filter3DRenderer.get_filters(); else return null;
	}
	,set_filters3d: function(value) {
		if(value != null && value.length == 0) value = null;
		if(this._filter3DRenderer != null && value == null) {
			this._filter3DRenderer.dispose();
			this._filter3DRenderer = null;
		} else if(this._filter3DRenderer == null && value != null) {
			this._filter3DRenderer = new away3d.core.render.Filter3DRenderer(this.get_stage3DProxy());
			this._filter3DRenderer.set_filters(value);
		}
		if(this._filter3DRenderer != null) {
			this._filter3DRenderer.set_filters(value);
			this._requireDepthRender = this._filter3DRenderer.get_requireDepthRender();
		} else {
			this._requireDepthRender = false;
			if(this._depthRender != null) {
				this._depthRender.dispose();
				this._depthRender = null;
			}
		}
		return value;
	}
	,get_renderer: function() {
		return this._renderer;
	}
	,set_renderer: function(value) {
		this._renderer.dispose();
		this._renderer = value;
		this._entityCollector = this._renderer.createEntityCollector();
		this._entityCollector.set_camera(this._camera);
		this._renderer.set_stage3DProxy(this._stage3DProxy);
		this._renderer.set_antiAlias(this._antiAlias);
		this._renderer.set_backgroundR((function($this) {
			var $r;
			var $int = $this._backgroundColor >> 16 & 255;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) / (function($this) {
			var $r;
			var int1 = 255;
			$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
			return $r;
		}(this)));
		this._renderer.set_backgroundG((function($this) {
			var $r;
			var int2 = $this._backgroundColor >> 8 & 255;
			$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
			return $r;
		}(this)) / (function($this) {
			var $r;
			var int3 = 255;
			$r = int3 < 0?4294967296.0 + int3:int3 + 0.0;
			return $r;
		}(this)));
		this._renderer.set_backgroundB((function($this) {
			var $r;
			var int4 = $this._backgroundColor & 255;
			$r = int4 < 0?4294967296.0 + int4:int4 + 0.0;
			return $r;
		}(this)) / (function($this) {
			var $r;
			var int5 = 255;
			$r = int5 < 0?4294967296.0 + int5:int5 + 0.0;
			return $r;
		}(this)));
		this._renderer.set_backgroundAlpha(this._backgroundAlpha);
		this._renderer.set_viewWidth(this._width);
		this._renderer.set_viewHeight(this._height);
		this._backBufferInvalid = true;
		return this._renderer;
	}
	,get_backgroundColor: function() {
		return this._backgroundColor;
	}
	,set_backgroundColor: function(value) {
		this._backgroundColor = value;
		this._renderer.set_backgroundR((function($this) {
			var $r;
			var $int = value >> 16 & 255;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) / (function($this) {
			var $r;
			var int1 = 255;
			$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
			return $r;
		}(this)));
		this._renderer.set_backgroundG((function($this) {
			var $r;
			var int2 = value >> 8 & 255;
			$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
			return $r;
		}(this)) / (function($this) {
			var $r;
			var int3 = 255;
			$r = int3 < 0?4294967296.0 + int3:int3 + 0.0;
			return $r;
		}(this)));
		this._renderer.set_backgroundB((function($this) {
			var $r;
			var int4 = value & 255;
			$r = int4 < 0?4294967296.0 + int4:int4 + 0.0;
			return $r;
		}(this)) / (function($this) {
			var $r;
			var int5 = 255;
			$r = int5 < 0?4294967296.0 + int5:int5 + 0.0;
			return $r;
		}(this)));
		return value;
	}
	,get_backgroundAlpha: function() {
		return this._backgroundAlpha;
	}
	,set_backgroundAlpha: function(value) {
		if(value > 1) value = 1; else if(value < 0) value = 0;
		this._renderer.set_backgroundAlpha(value);
		this._backgroundAlpha = value;
		return value;
	}
	,get_camera: function() {
		return this._camera;
	}
	,set_camera: function(camera) {
		this._camera.removeEventListener(away3d.events.CameraEvent.LENS_CHANGED,$bind(this,this.onLensChanged));
		this._camera = camera;
		this._entityCollector.set_camera(this._camera);
		if(this._scene != null) this._camera.set_partition(this._scene.get_partition());
		this._camera.addEventListener(away3d.events.CameraEvent.LENS_CHANGED,$bind(this,this.onLensChanged));
		this._scissorRectDirty = true;
		this._viewportDirty = true;
		return camera;
	}
	,get_scene: function() {
		return this._scene;
	}
	,set_scene: function(scene) {
		this._scene.removeEventListener(away3d.events.Scene3DEvent.PARTITION_CHANGED,$bind(this,this.onScenePartitionChanged));
		this._scene = scene;
		this._scene.addEventListener(away3d.events.Scene3DEvent.PARTITION_CHANGED,$bind(this,this.onScenePartitionChanged));
		if(this._camera != null) this._camera.set_partition(this._scene.get_partition());
		return this._scene;
	}
	,deltaTime: null
	,get_deltaTime: function() {
		return this._deltaTime;
	}
	,get_width: function() {
		return this._width;
	}
	,set_width: function(value) {
		if(this._stage3DProxy != null && this._stage3DProxy.get_usesSoftwareRendering() && value > 2048) value = 2048;
		if(this._width == value) return value;
		if(this._rttBufferManager != null) this._rttBufferManager.set_viewWidth(value | 0);
		this._hitField.set_width(value);
		this._width = value;
		this._aspectRatio = this._width / this._height;
		this._camera.get_lens().set_aspectRatio(this._aspectRatio);
		this._depthTextureInvalid = true;
		this._renderer.set_viewWidth(value);
		this._scissorRect.width = value;
		this._backBufferInvalid = true;
		this._scissorRectDirty = true;
		return value;
	}
	,get_height: function() {
		return this._height;
	}
	,set_height: function(value) {
		if(this._stage3DProxy != null && this._stage3DProxy.get_usesSoftwareRendering() && value > 2048) value = 2048;
		if(this._height == value) return value;
		if(this._rttBufferManager != null) this._rttBufferManager.set_viewHeight(value | 0);
		this._hitField.set_height(value);
		this._height = value;
		this._aspectRatio = this._width / this._height;
		this._camera.get_lens().set_aspectRatio(this._aspectRatio);
		this._depthTextureInvalid = true;
		this._renderer.set_viewHeight(value);
		this._scissorRect.height = value;
		this._backBufferInvalid = true;
		this._scissorRectDirty = true;
		return value;
	}
	,set_x: function(value) {
		if(this.get_x() == value) return this.get_x();
		this._localPos.x = openfl.display.Sprite.prototype.set_x.call(this,value);
		if(this.parent != null) this._globalPos.x = this.parent.localToGlobal(this._localPos).x; else this._globalPos.x = value;
		this._globalPosDirty = true;
		return this.get_x();
	}
	,set_y: function(value) {
		if(this.get_y() == value) return this.get_y();
		this._localPos.y = openfl.display.Sprite.prototype.set_y.call(this,value);
		if(this.parent != null) this._globalPos.y = this.parent.localToGlobal(this._localPos).y; else this._globalPos.y = value;
		this._globalPosDirty = true;
		return this.get_y();
	}
	,set_visible: function(value) {
		openfl.display.Sprite.prototype.set_visible.call(this,value);
		if(this._stage3DProxy != null && !this._shareContext) this._stage3DProxy.set_visible(value);
		return value;
	}
	,get_antiAlias: function() {
		return this._antiAlias;
	}
	,set_antiAlias: function(value) {
		this._antiAlias = value;
		this._renderer.set_antiAlias(value);
		this._backBufferInvalid = true;
		return this._antiAlias;
	}
	,renderedFacesCount: null
	,get_renderedFacesCount: function() {
		return this._entityCollector.get_numTriangles();
	}
	,get_shareContext: function() {
		return this._shareContext;
	}
	,set_shareContext: function(value) {
		if(this._shareContext == value) return value;
		this._shareContext = value;
		this._globalPosDirty = true;
		return value;
	}
	,updateBackBuffer: function() {
		if(this._stage3DProxy.get_context3D() != null && !this._shareContext) {
			if(this._width > 0 && this._height > 0) {
				if(this._stage3DProxy.get_usesSoftwareRendering()) {
					if(this._width > 2048) this._width = 2048;
					if(this._height > 2048) this._height = 2048;
				}
				this._stage3DProxy.configureBackBuffer(this._width | 0,this._height | 0,this._antiAlias,true);
				this._backBufferInvalid = false;
			} else {
				this.set_width(this.stage.stageWidth);
				this.set_height(this.stage.stageHeight);
			}
		}
	}
	,setRenderCallback: function(func) {
		if(this._stage3DProxy != null) this._stage3DProxy.setRenderCallback(func);
		this._callbackMethod = func;
	}
	,render: function() {
		if(!this.get_stage3DProxy().recoverFromDisposal()) {
			this._backBufferInvalid = true;
			return;
		}
		if(this._backBufferInvalid) this.updateBackBuffer();
		if(this._shareContext && this._layeredView) this.get_stage3DProxy().clearDepthBuffer();
		if(!this._parentIsStage) {
			var globalPos = this.parent.localToGlobal(this._localPos);
			if(this._globalPos.x != globalPos.x || this._globalPos.y != globalPos.y) {
				this._globalPos = globalPos;
				this._globalPosDirty = true;
			}
		}
		if(this._globalPosDirty) this.updateGlobalPos();
		this.updateTime();
		this.updateViewSizeData();
		this._entityCollector.clear();
		this._scene.traversePartitions(this._entityCollector);
		this._mouse3DManager.updateCollider(this);
		if(this._requireDepthRender) this.renderSceneDepthToTexture(this._entityCollector);
		if(this._depthPrepass) this.renderDepthPrepass(this._entityCollector);
		this._renderer.set_clearOnRender(!this._depthPrepass);
		if(this._filter3DRenderer != null && this._stage3DProxy._context3D != null) {
			this._renderer.render(this._entityCollector,this._filter3DRenderer.getMainInputTexture(this._stage3DProxy),this._rttBufferManager.get_renderToTextureRect());
			this._filter3DRenderer.render(this._stage3DProxy,this.get_camera(),this._depthRender);
		} else {
			this._renderer.set_shareContext(this._shareContext);
			if(this._shareContext) this._renderer.render(this._entityCollector,null,this._scissorRect); else this._renderer.render(this._entityCollector);
		}
		if(!this._shareContext) {
			this.get_stage3DProxy().present();
			this._mouse3DManager.fireMouseEvents();
		}
		this._entityCollector.cleanUp();
		this.get_stage3DProxy().set_bufferClear(false);
	}
	,updateGlobalPos: function() {
		this._globalPosDirty = false;
		if(this._stage3DProxy == null) return;
		if(this._shareContext) {
			this._scissorRect.x = this._globalPos.x - this._stage3DProxy.get_x();
			this._scissorRect.y = this._globalPos.y - this._stage3DProxy.get_y();
		} else {
			this._scissorRect.x = 0;
			this._scissorRect.y = 0;
			this._stage3DProxy.set_x(this._globalPos.x);
			this._stage3DProxy.set_y(this._globalPos.y);
		}
		this._scissorRectDirty = true;
	}
	,updateTime: function() {
		var time = openfl.Lib.getTimer();
		if((function($this) {
			var $r;
			var $int = $this._time;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) == 0) this._time = time;
		this._deltaTime = time - this._time;
		this._time = time;
	}
	,updateViewSizeData: function() {
		this._camera.get_lens().set_aspectRatio(this._aspectRatio);
		if(this._scissorRectDirty) {
			this._scissorRectDirty = false;
			this._camera.get_lens().updateScissorRect(this._scissorRect.x,this._scissorRect.y,this._scissorRect.width,this._scissorRect.height);
		}
		if(this._viewportDirty) {
			this._viewportDirty = false;
			this._camera.get_lens().updateViewport(this._stage3DProxy.get_viewPort().x,this._stage3DProxy.get_viewPort().y,this._stage3DProxy.get_viewPort().width,this._stage3DProxy.get_viewPort().height);
		}
		if(this._filter3DRenderer != null || this._renderer.get_renderToTexture()) {
			this._renderer.set_textureRatioX(this._rttBufferManager.get_textureRatioX());
			this._renderer.set_textureRatioY(this._rttBufferManager.get_textureRatioY());
		} else {
			this._renderer.set_textureRatioX(1);
			this._renderer.set_textureRatioY(1);
		}
	}
	,renderDepthPrepass: function(entityCollector) {
		this._depthRenderer.set_disableColor(true);
		if(this._filter3DRenderer != null || this._renderer.get_renderToTexture()) {
			this._depthRenderer.set_textureRatioX(this._rttBufferManager.get_textureRatioX());
			this._depthRenderer.set_textureRatioY(this._rttBufferManager.get_textureRatioY());
			this._depthRenderer.render(entityCollector,this._filter3DRenderer.getMainInputTexture(this._stage3DProxy),this._rttBufferManager.get_renderToTextureRect());
		} else {
			this._depthRenderer.set_textureRatioX(1);
			this._depthRenderer.set_textureRatioY(1);
			this._depthRenderer.render(entityCollector);
		}
		this._depthRenderer.set_disableColor(false);
	}
	,renderSceneDepthToTexture: function(entityCollector) {
		if(this._depthTextureInvalid || this._depthRender == null) this.initDepthTexture(this._stage3DProxy._context3D);
		this._depthRenderer.set_textureRatioX(this._rttBufferManager.get_textureRatioX());
		this._depthRenderer.set_textureRatioY(this._rttBufferManager.get_textureRatioY());
		this._depthRenderer.render(entityCollector,this._depthRender);
	}
	,initDepthTexture: function(context) {
		this._depthTextureInvalid = false;
		if(this._depthRender != null) this._depthRender.dispose();
		this._depthRender = context.createTexture(this._rttBufferManager.get_textureWidth(),this._rttBufferManager.get_textureHeight(),openfl.display3D.Context3DTextureFormat.BGRA,true);
	}
	,dispose: function() {
		this._stage3DProxy.removeEventListener(away3d.events.Stage3DEvent.VIEWPORT_UPDATED,$bind(this,this.onViewportUpdated));
		if(!this.get_shareContext()) this._stage3DProxy.dispose();
		this._renderer.dispose();
		if(this._depthRender != null) this._depthRender.dispose();
		if(this._rttBufferManager != null) this._rttBufferManager.dispose();
		this._mouse3DManager.disableMouseListeners(this);
		this._mouse3DManager.dispose();
		this._rttBufferManager = null;
		this._depthRender = null;
		this._mouse3DManager = null;
		this._depthRenderer = null;
		this._stage3DProxy = null;
		this._renderer = null;
		this._entityCollector = null;
	}
	,project: function(point3d) {
		var v = this._camera.project(point3d);
		v.x = (v.x + 1.0) * this._width / 2.0;
		v.y = (v.y + 1.0) * this._height / 2.0;
		return v;
	}
	,unproject: function(sX,sY,sZ) {
		return this._camera.unproject((sX * 2 - this._width) / this._stage3DProxy.get_width(),(sY * 2 - this._height) / this._stage3DProxy.get_height(),sZ);
	}
	,getRay: function(sX,sY,sZ) {
		return this._camera.getRay((sX * 2 - this._width) / this._width,(sY * 2 - this._height) / this._height,sZ);
	}
	,get_mousePicker: function() {
		return this._mouse3DManager.get_mousePicker();
	}
	,set_mousePicker: function(value) {
		this._mouse3DManager.set_mousePicker(value);
		return value;
	}
	,get_touchPicker: function() {
		return this._touch3DManager.get_touchPicker();
	}
	,set_touchPicker: function(value) {
		this._touch3DManager.set_touchPicker(value);
		return value;
	}
	,entityCollector: null
	,get_entityCollector: function() {
		return this._entityCollector;
	}
	,onLensChanged: function(event) {
		this._scissorRectDirty = true;
		this._viewportDirty = true;
	}
	,onAddedToStage: function(event) {
		if(this._addedToStage) return;
		this._addedToStage = true;
		if(this._stage3DProxy == null) {
			if(this._contextIndex == -1) this._stage3DProxy = away3d.core.managers.Stage3DManager.getInstance(this.stage).getFreeStage3DProxy(this._forceSoftware,this._profile); else this._stage3DProxy = away3d.core.managers.Stage3DManager.getInstance(this.stage).getStage3DProxy(this._contextIndex,this._forceSoftware,this._profile);
			this._stage3DProxy.addEventListener(away3d.events.Stage3DEvent.VIEWPORT_UPDATED,$bind(this,this.onViewportUpdated));
			if(this._callbackMethod != null) this._stage3DProxy.setRenderCallback(this._callbackMethod);
		}
		this._globalPosDirty = true;
		this._rttBufferManager = away3d.core.managers.RTTBufferManager.getInstance(this._stage3DProxy);
		this._renderer.set_stage3DProxy(this._depthRenderer.set_stage3DProxy(this._stage3DProxy));
		if(this._width == 0) this.set_width(this.stage.stageWidth); else this._rttBufferManager.set_viewWidth(this._width | 0);
		if(this._height == 0) this.set_height(this.stage.stageHeight); else this._rttBufferManager.set_viewHeight(this._height | 0);
		if(this._shareContext) this._mouse3DManager.addViewLayer(this);
	}
	,onAdded: function(event) {
		this._parentIsStage = this.parent == this.stage;
		this._globalPos = this.parent.localToGlobal(this._localPos);
		this._globalPosDirty = true;
	}
	,onViewportUpdated: function(event) {
		if(this._shareContext) {
			this._scissorRect.x = this._globalPos.x - this._stage3DProxy.get_x();
			this._scissorRect.y = this._globalPos.y - this._stage3DProxy.get_y();
			this._scissorRectDirty = true;
		}
		this._viewportDirty = true;
	}
	,__class__: away3d.containers.View3D
	,__properties__: $extend(openfl.display.Sprite.prototype.__properties__,{get_entityCollector:"get_entityCollector",set_touchPicker:"set_touchPicker",get_touchPicker:"get_touchPicker",set_mousePicker:"set_mousePicker",get_mousePicker:"get_mousePicker",set_shareContext:"set_shareContext",get_shareContext:"get_shareContext",get_renderedFacesCount:"get_renderedFacesCount",set_antiAlias:"set_antiAlias",get_antiAlias:"get_antiAlias",get_deltaTime:"get_deltaTime",set_scene:"set_scene",get_scene:"get_scene",set_camera:"set_camera",get_camera:"get_camera",set_backgroundAlpha:"set_backgroundAlpha",get_backgroundAlpha:"get_backgroundAlpha",set_backgroundColor:"set_backgroundColor",get_backgroundColor:"get_backgroundColor",set_renderer:"set_renderer",get_renderer:"get_renderer",set_filters3d:"set_filters3d",get_filters3d:"get_filters3d",set_layeredView:"set_layeredView",get_layeredView:"get_layeredView",set_background:"set_background",get_background:"get_background",set_forceMouseMove:"set_forceMouseMove",get_forceMouseMove:"get_forceMouseMove",set_stage3DProxy:"set_stage3DProxy",get_stage3DProxy:"get_stage3DProxy",set_depthPrepass:"set_depthPrepass",get_depthPrepass:"get_depthPrepass"})
});
away3d.controllers = {};
away3d.controllers.ControllerBase = function(targetObject) {
	this._autoUpdate = true;
	this.set_targetObject(targetObject);
};
$hxClasses["away3d.controllers.ControllerBase"] = away3d.controllers.ControllerBase;
away3d.controllers.ControllerBase.__name__ = ["away3d","controllers","ControllerBase"];
away3d.controllers.ControllerBase.prototype = {
	_autoUpdate: null
	,_targetObject: null
	,notifyUpdate: function() {
		if(this._targetObject != null && this._targetObject.get_implicitPartition() != null && this._autoUpdate) this._targetObject.get_implicitPartition().markForUpdate(this._targetObject);
	}
	,get_targetObject: function() {
		return this._targetObject;
	}
	,set_targetObject: function(val) {
		if(this._targetObject == val) return val;
		if(this._targetObject != null && this._autoUpdate) this._targetObject._controller = null;
		this._targetObject = val;
		if(this._targetObject != null && this._autoUpdate) this._targetObject._controller = this;
		this.notifyUpdate();
		return val;
	}
	,get_autoUpdate: function() {
		return this._autoUpdate;
	}
	,set_autoUpdate: function(val) {
		if(this._autoUpdate == val) return val;
		this._autoUpdate = val;
		if(this._targetObject != null) {
			if(this._autoUpdate) this._targetObject._controller = this; else this._targetObject._controller = null;
		}
		return val;
	}
	,update: function(interpolate) {
		if(interpolate == null) interpolate = true;
		throw new away3d.errors.AbstractMethodError();
	}
	,__class__: away3d.controllers.ControllerBase
	,__properties__: {set_autoUpdate:"set_autoUpdate",get_autoUpdate:"get_autoUpdate",set_targetObject:"set_targetObject",get_targetObject:"get_targetObject"}
};
away3d.core.base.SubGeometryBase = function() {
	this._faceNormalsDirty = true;
	this._faceTangentsDirty = true;
	this._indexBuffer = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(0);
			this1.data = this2;
		}
		this1.length = 0;
		this1.fixed = false;
		$r = this1;
		return $r;
	}(this))),8);
	this._indexBufferContext = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this3;
		this3 = new openfl.VectorData();
		{
			var this4;
			this4 = new Array(0);
			this3.data = this4;
		}
		this3.length = 0;
		this3.fixed = false;
		$r = this3;
		return $r;
	}(this))),8);
	this._indicesInvalid = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this5;
		this5 = new openfl.VectorData();
		{
			var this6;
			this6 = new Array(0);
			this5.data = this6;
		}
		this5.length = 0;
		this5.fixed = false;
		$r = this5;
		return $r;
	}(this))),8);
	this._autoDeriveVertexNormals = true;
	this._autoDeriveVertexTangents = true;
	this._autoGenerateUVs = false;
	this._useFaceWeights = false;
	this._vertexNormalsDirty = true;
	this._vertexTangentsDirty = true;
	this._scaleU = 1;
	this._scaleV = 1;
	this._uvsDirty = true;
};
$hxClasses["away3d.core.base.SubGeometryBase"] = away3d.core.base.SubGeometryBase;
away3d.core.base.SubGeometryBase.__name__ = ["away3d","core","base","SubGeometryBase"];
away3d.core.base.SubGeometryBase.prototype = {
	_parentGeometry: null
	,_vertexData: null
	,_faceNormalsDirty: null
	,_faceTangentsDirty: null
	,_faceTangents: null
	,_indices: null
	,_indexBuffer: null
	,_numIndices: null
	,_indexBufferContext: null
	,_indicesInvalid: null
	,_numTriangles: null
	,_autoDeriveVertexNormals: null
	,_autoDeriveVertexTangents: null
	,_autoGenerateUVs: null
	,_useFaceWeights: null
	,_vertexNormalsDirty: null
	,_vertexTangentsDirty: null
	,_faceNormals: null
	,_faceWeights: null
	,_scaleU: null
	,_scaleV: null
	,_uvsDirty: null
	,get_autoGenerateDummyUVs: function() {
		return this._autoGenerateUVs;
	}
	,set_autoGenerateDummyUVs: function(value) {
		this._autoGenerateUVs = value;
		this._uvsDirty = value;
		return value;
	}
	,get_autoDeriveVertexNormals: function() {
		return this._autoDeriveVertexNormals;
	}
	,set_autoDeriveVertexNormals: function(value) {
		this._autoDeriveVertexNormals = value;
		this._vertexNormalsDirty = value;
		return value;
	}
	,get_useFaceWeights: function() {
		return this._useFaceWeights;
	}
	,set_useFaceWeights: function(value) {
		this._useFaceWeights = value;
		if(this._autoDeriveVertexNormals) this._vertexNormalsDirty = true;
		if(this._autoDeriveVertexTangents) this._vertexTangentsDirty = true;
		this._faceNormalsDirty = true;
		return value;
	}
	,get_numTriangles: function() {
		return this._numTriangles;
	}
	,getIndexBuffer: function(stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._indexBuffer.data[contextIndex] == null || this._indexBufferContext.data[contextIndex] != context) {
			var this1 = this._indexBuffer;
			var value = stage3DProxy.createIndexBuffer(this._numIndices);
			if(!this1.fixed) {
				if(contextIndex >= this1.length) this1.length = contextIndex + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[contextIndex] = value;
			var this3 = this._indexBufferContext;
			if(!this3.fixed) {
				if(contextIndex >= this3.length) this3.length = contextIndex + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[contextIndex] = context;
			var this5 = this._indicesInvalid;
			if(!this5.fixed) {
				if(contextIndex >= this5.length) this5.length = contextIndex + 1;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[contextIndex] = true;
		}
		if(this._indicesInvalid.data[contextIndex]) {
			this._indexBuffer.data[contextIndex].uploadFromVector(this._indices,0,this._numIndices);
			var this7 = this._indicesInvalid;
			if(!this7.fixed) {
				if(contextIndex >= this7.length) this7.length = contextIndex + 1;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[contextIndex] = false;
		}
		return this._indexBuffer.data[contextIndex];
	}
	,updateFaceTangents: function() {
		var i = 0;
		var index1;
		var index2;
		var index3;
		var len = this._indices.length;
		var ui;
		var vi;
		var v0;
		var dv1;
		var dv2;
		var denom;
		var x0;
		var y0;
		var z0;
		var dx1;
		var dy1;
		var dz1;
		var dx2;
		var dy2;
		var dz2;
		var cx;
		var cy;
		var cz;
		var vertices = this._vertexData;
		var uvs = this.get_UVData();
		var posStride = this.get_vertexStride();
		var posOffset = this.get_vertexOffset();
		var texStride = this.get_UVStride();
		var texOffset = this.get_UVOffset();
		if(this._faceTangents == null) this._faceTangents = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
			var $r;
			var this1;
			this1 = new openfl.VectorData();
			{
				var this2;
				this2 = new Array(0);
				this1.data = this2;
			}
			this1.length = 0;
			this1.fixed = false;
			$r = this1;
			return $r;
		}(this))),this._indices.length);
		while(i < len) {
			index1 = this._indices.data[i];
			index2 = this._indices.data[i + 1];
			index3 = this._indices.data[i + 2];
			ui = texOffset + index1 * texStride + 1;
			v0 = uvs.data[ui];
			ui = texOffset + index2 * texStride + 1;
			dv1 = uvs.data[ui] - v0;
			ui = texOffset + index3 * texStride + 1;
			dv2 = uvs.data[ui] - v0;
			vi = posOffset + index1 * posStride;
			x0 = vertices.data[vi];
			y0 = vertices.data[vi + 1];
			z0 = vertices.data[vi + 2];
			vi = posOffset + index2 * posStride;
			dx1 = vertices.data[vi] - x0;
			dy1 = vertices.data[vi + 1] - y0;
			dz1 = vertices.data[vi + 2] - z0;
			vi = posOffset + index3 * posStride;
			dx2 = vertices.data[vi] - x0;
			dy2 = vertices.data[vi + 1] - y0;
			dz2 = vertices.data[vi + 2] - z0;
			cx = dv2 * dx1 - dv1 * dx2;
			cy = dv2 * dy1 - dv1 * dy2;
			cz = dv2 * dz1 - dv1 * dz2;
			denom = 1 / Math.sqrt(cx * cx + cy * cy + cz * cz);
			var this3 = this._faceTangents;
			var key = i++;
			if(!this3.fixed) {
				if(key >= this3.length) this3.length = key + 1;
				if(this3.data.length < this3.length) {
					var data;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
					this3.data = data;
				}
			}
			this3.data[key] = denom * cx;
			var this5 = this._faceTangents;
			var key1 = i++;
			if(!this5.fixed) {
				if(key1 >= this5.length) this5.length = key1 + 1;
				if(this5.data.length < this5.length) {
					var data1;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data1 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data1,0,this5.data.length);
					this5.data = data1;
				}
			}
			this5.data[key1] = denom * cy;
			var this7 = this._faceTangents;
			var key2 = i++;
			if(!this7.fixed) {
				if(key2 >= this7.length) this7.length = key2 + 1;
				if(this7.data.length < this7.length) {
					var data2;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data2 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data2,0,this7.data.length);
					this7.data = data2;
				}
			}
			this7.data[key2] = denom * cz;
		}
		this._faceTangentsDirty = false;
	}
	,updateFaceNormals: function() {
		var i = 0;
		var j = 0;
		var k = 0;
		var index;
		var len = this._indices.length;
		var x1;
		var x2;
		var x3;
		var y1;
		var y2;
		var y3;
		var z1;
		var z2;
		var z3;
		var dx1;
		var dy1;
		var dz1;
		var dx2;
		var dy2;
		var dz2;
		var cx;
		var cy;
		var cz;
		var d;
		var vertices = this._vertexData;
		var posStride = this.get_vertexStride();
		var posOffset = this.get_vertexOffset();
		if(this._faceNormals == null) this._faceNormals = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
			var $r;
			var this1;
			this1 = new openfl.VectorData();
			{
				var this2;
				this2 = new Array(0);
				this1.data = this2;
			}
			this1.length = 0;
			this1.fixed = false;
			$r = this1;
			return $r;
		}(this))),len,0);
		if(this._faceWeights == null) this._faceWeights = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
			var $r;
			var this3;
			this3 = new openfl.VectorData();
			{
				var this4;
				this4 = new Array(0);
				this3.data = this4;
			}
			this3.length = 0;
			this3.fixed = false;
			$r = this3;
			return $r;
		}(this))),len / 3 | 0,0);
		while(i < len) {
			var b;
			var a;
			var index1 = i++;
			a = this._indices.data[index1];
			b = a * posStride;
			index = posOffset + b;
			x1 = vertices.data[index];
			y1 = vertices.data[index + 1];
			z1 = vertices.data[index + 2];
			var b1;
			var a1;
			var index2 = i++;
			a1 = this._indices.data[index2];
			b1 = a1 * posStride;
			index = posOffset + b1;
			x2 = vertices.data[index];
			y2 = vertices.data[index + 1];
			z2 = vertices.data[index + 2];
			var b2;
			var a2;
			var index3 = i++;
			a2 = this._indices.data[index3];
			b2 = a2 * posStride;
			index = posOffset + b2;
			x3 = vertices.data[index];
			y3 = vertices.data[index + 1];
			z3 = vertices.data[index + 2];
			dx1 = x3 - x1;
			dy1 = y3 - y1;
			dz1 = z3 - z1;
			dx2 = x2 - x1;
			dy2 = y2 - y1;
			dz2 = z2 - z1;
			cx = dz1 * dy2 - dy1 * dz2;
			cy = dx1 * dz2 - dz1 * dx2;
			cz = dy1 * dx2 - dx1 * dy2;
			d = Math.sqrt(cx * cx + cy * cy + cz * cz);
			if(this._useFaceWeights) {
				var w = d * 10000;
				if(w < 1) w = 1;
				var this5 = this._faceWeights;
				var key = k++;
				if(!this5.fixed) {
					if(key >= this5.length) this5.length = key + 1;
					if(this5.data.length < this5.length) {
						var data;
						var this6;
						this6 = new Array(this5.data.length + 10);
						data = this6;
						haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data,0,this5.data.length);
						this5.data = data;
					}
				}
				this5.data[key] = w;
			}
			d = 1 / d;
			var this7 = this._faceNormals;
			var key1 = j++;
			if(!this7.fixed) {
				if(key1 >= this7.length) this7.length = key1 + 1;
				if(this7.data.length < this7.length) {
					var data1;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data1 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data1,0,this7.data.length);
					this7.data = data1;
				}
			}
			this7.data[key1] = cx * d;
			var this9 = this._faceNormals;
			var key2 = j++;
			if(!this9.fixed) {
				if(key2 >= this9.length) this9.length = key2 + 1;
				if(this9.data.length < this9.length) {
					var data2;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data2 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data2,0,this9.data.length);
					this9.data = data2;
				}
			}
			this9.data[key2] = cy * d;
			var this11 = this._faceNormals;
			var key3 = j++;
			if(!this11.fixed) {
				if(key3 >= this11.length) this11.length = key3 + 1;
				if(this11.data.length < this11.length) {
					var data3;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data3 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data3,0,this11.data.length);
					this11.data = data3;
				}
			}
			this11.data[key3] = cz * d;
		}
		this._faceNormalsDirty = false;
	}
	,updateVertexNormals: function(target) {
		if(this._faceNormalsDirty) this.updateFaceNormals();
		var v1;
		var f1 = 0;
		var f2 = 1;
		var f3 = 2;
		var lenV = this._vertexData.length;
		var normalStride = this.get_vertexNormalStride();
		var normalOffset = this.get_vertexNormalOffset();
		if(target == null) target = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
			var $r;
			var this1;
			this1 = new openfl.VectorData();
			{
				var this2;
				this2 = new Array(0);
				this1.data = this2;
			}
			this1.length = 0;
			this1.fixed = false;
			$r = this1;
			return $r;
		}(this))),lenV,0);
		v1 = normalOffset;
		while(v1 < lenV) {
			if(!target.fixed) {
				if(v1 >= target.length) target.length = v1 + 1;
				if(target.data.length < target.length) {
					var data;
					var this3;
					this3 = new Array(target.data.length + 10);
					data = this3;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data,0,target.data.length);
					target.data = data;
				}
			}
			target.data[v1] = 0.0;
			var key = v1 + 1;
			if(!target.fixed) {
				if(key >= target.length) target.length = key + 1;
				if(target.data.length < target.length) {
					var data1;
					var this4;
					this4 = new Array(target.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data1,0,target.data.length);
					target.data = data1;
				}
			}
			target.data[key] = 0.0;
			var key1 = v1 + 2;
			if(!target.fixed) {
				if(key1 >= target.length) target.length = key1 + 1;
				if(target.data.length < target.length) {
					var data2;
					var this5;
					this5 = new Array(target.data.length + 10);
					data2 = this5;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data2,0,target.data.length);
					target.data = data2;
				}
			}
			target.data[key1] = 0.0;
			v1 += normalStride;
		}
		var i = 0;
		var k = 0;
		var lenI = this._indices.length;
		var index;
		var weight;
		while(i < lenI) {
			if(this._useFaceWeights) {
				var index1 = k++;
				weight = this._faceWeights.data[index1];
			} else weight = 1;
			var b;
			var a;
			var index2 = i++;
			a = this._indices.data[index2];
			b = a * normalStride;
			index = normalOffset + b;
			var _g = index++;
			if(!target.fixed) {
				if(_g >= target.length) target.length = _g + 1;
				if(target.data.length < target.length) {
					var data3;
					var this6;
					this6 = new Array(target.data.length + 10);
					data3 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data3,0,target.data.length);
					target.data = data3;
				}
			}
			target.data[_g] = target.data[_g] + this._faceNormals.data[f1] * weight;
			var _g1 = index++;
			if(!target.fixed) {
				if(_g1 >= target.length) target.length = _g1 + 1;
				if(target.data.length < target.length) {
					var data4;
					var this7;
					this7 = new Array(target.data.length + 10);
					data4 = this7;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data4,0,target.data.length);
					target.data = data4;
				}
			}
			target.data[_g1] = target.data[_g1] + this._faceNormals.data[f2] * weight;
			var _g2 = index;
			if(!target.fixed) {
				if(_g2 >= target.length) target.length = _g2 + 1;
				if(target.data.length < target.length) {
					var data5;
					var this8;
					this8 = new Array(target.data.length + 10);
					data5 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data5,0,target.data.length);
					target.data = data5;
				}
			}
			target.data[_g2] = target.data[_g2] + this._faceNormals.data[f3] * weight;
			var b1;
			var a1;
			var index3 = i++;
			a1 = this._indices.data[index3];
			b1 = a1 * normalStride;
			index = normalOffset + b1;
			var _g3 = index++;
			if(!target.fixed) {
				if(_g3 >= target.length) target.length = _g3 + 1;
				if(target.data.length < target.length) {
					var data6;
					var this9;
					this9 = new Array(target.data.length + 10);
					data6 = this9;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data6,0,target.data.length);
					target.data = data6;
				}
			}
			target.data[_g3] = target.data[_g3] + this._faceNormals.data[f1] * weight;
			var _g4 = index++;
			if(!target.fixed) {
				if(_g4 >= target.length) target.length = _g4 + 1;
				if(target.data.length < target.length) {
					var data7;
					var this10;
					this10 = new Array(target.data.length + 10);
					data7 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data7,0,target.data.length);
					target.data = data7;
				}
			}
			target.data[_g4] = target.data[_g4] + this._faceNormals.data[f2] * weight;
			var _g5 = index;
			if(!target.fixed) {
				if(_g5 >= target.length) target.length = _g5 + 1;
				if(target.data.length < target.length) {
					var data8;
					var this11;
					this11 = new Array(target.data.length + 10);
					data8 = this11;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data8,0,target.data.length);
					target.data = data8;
				}
			}
			target.data[_g5] = target.data[_g5] + this._faceNormals.data[f3] * weight;
			var b2;
			var a2;
			var index4 = i++;
			a2 = this._indices.data[index4];
			b2 = a2 * normalStride;
			index = normalOffset + b2;
			var _g6 = index++;
			if(!target.fixed) {
				if(_g6 >= target.length) target.length = _g6 + 1;
				if(target.data.length < target.length) {
					var data9;
					var this12;
					this12 = new Array(target.data.length + 10);
					data9 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data9,0,target.data.length);
					target.data = data9;
				}
			}
			target.data[_g6] = target.data[_g6] + this._faceNormals.data[f1] * weight;
			var _g7 = index++;
			if(!target.fixed) {
				if(_g7 >= target.length) target.length = _g7 + 1;
				if(target.data.length < target.length) {
					var data10;
					var this13;
					this13 = new Array(target.data.length + 10);
					data10 = this13;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data10,0,target.data.length);
					target.data = data10;
				}
			}
			target.data[_g7] = target.data[_g7] + this._faceNormals.data[f2] * weight;
			var _g8 = index;
			if(!target.fixed) {
				if(_g8 >= target.length) target.length = _g8 + 1;
				if(target.data.length < target.length) {
					var data11;
					var this14;
					this14 = new Array(target.data.length + 10);
					data11 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data11,0,target.data.length);
					target.data = data11;
				}
			}
			target.data[_g8] = target.data[_g8] + this._faceNormals.data[f3] * weight;
			f1 += 3;
			f2 += 3;
			f3 += 3;
		}
		v1 = normalOffset;
		while(v1 < lenV) {
			var vx = target.data[v1];
			var vy = target.data[v1 + 1];
			var vz = target.data[v1 + 2];
			var d = 1.0 / Math.sqrt(vx * vx + vy * vy + vz * vz);
			if(!target.fixed) {
				if(v1 >= target.length) target.length = v1 + 1;
				if(target.data.length < target.length) {
					var data12;
					var this15;
					this15 = new Array(target.data.length + 10);
					data12 = this15;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data12,0,target.data.length);
					target.data = data12;
				}
			}
			target.data[v1] = vx * d;
			var key2 = v1 + 1;
			if(!target.fixed) {
				if(key2 >= target.length) target.length = key2 + 1;
				if(target.data.length < target.length) {
					var data13;
					var this16;
					this16 = new Array(target.data.length + 10);
					data13 = this16;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data13,0,target.data.length);
					target.data = data13;
				}
			}
			target.data[key2] = vy * d;
			var key3 = v1 + 2;
			if(!target.fixed) {
				if(key3 >= target.length) target.length = key3 + 1;
				if(target.data.length < target.length) {
					var data14;
					var this17;
					this17 = new Array(target.data.length + 10);
					data14 = this17;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data14,0,target.data.length);
					target.data = data14;
				}
			}
			target.data[key3] = vz * d;
			v1 += normalStride;
		}
		this._vertexNormalsDirty = false;
		return target;
	}
	,updateVertexTangents: function(target) {
		if(this._faceTangentsDirty) this.updateFaceTangents();
		var i = 0;
		var lenV = this._vertexData.length;
		var tangentStride = this.get_vertexTangentStride();
		var tangentOffset = this.get_vertexTangentOffset();
		if(target == null) target = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
			var $r;
			var this1;
			this1 = new openfl.VectorData();
			{
				var this2;
				this2 = new Array(0);
				this1.data = this2;
			}
			this1.length = 0;
			this1.fixed = false;
			$r = this1;
			return $r;
		}(this))),lenV,0);
		i = tangentOffset;
		while(i < lenV) {
			if(!target.fixed) {
				if(i >= target.length) target.length = i + 1;
				if(target.data.length < target.length) {
					var data;
					var this3;
					this3 = new Array(target.data.length + 10);
					data = this3;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data,0,target.data.length);
					target.data = data;
				}
			}
			target.data[i] = 0.0;
			var key = i + 1;
			if(!target.fixed) {
				if(key >= target.length) target.length = key + 1;
				if(target.data.length < target.length) {
					var data1;
					var this4;
					this4 = new Array(target.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data1,0,target.data.length);
					target.data = data1;
				}
			}
			target.data[key] = 0.0;
			var key1 = i + 2;
			if(!target.fixed) {
				if(key1 >= target.length) target.length = key1 + 1;
				if(target.data.length < target.length) {
					var data2;
					var this5;
					this5 = new Array(target.data.length + 10);
					data2 = this5;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data2,0,target.data.length);
					target.data = data2;
				}
			}
			target.data[key1] = 0.0;
			i += tangentStride;
		}
		var k = 0;
		var lenI = this._indices.length;
		var index;
		var weight;
		var f1 = 0;
		var f2 = 1;
		var f3 = 2;
		i = 0;
		while(i < lenI) {
			if(this._useFaceWeights) {
				var index1 = k++;
				weight = this._faceWeights.data[index1];
			} else weight = 1;
			var b;
			var a;
			var index2 = i++;
			a = this._indices.data[index2];
			b = a * tangentStride;
			index = tangentOffset + b;
			var _g = index++;
			if(!target.fixed) {
				if(_g >= target.length) target.length = _g + 1;
				if(target.data.length < target.length) {
					var data3;
					var this6;
					this6 = new Array(target.data.length + 10);
					data3 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data3,0,target.data.length);
					target.data = data3;
				}
			}
			target.data[_g] = target.data[_g] + this._faceTangents.data[f1] * weight;
			var _g1 = index++;
			if(!target.fixed) {
				if(_g1 >= target.length) target.length = _g1 + 1;
				if(target.data.length < target.length) {
					var data4;
					var this7;
					this7 = new Array(target.data.length + 10);
					data4 = this7;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data4,0,target.data.length);
					target.data = data4;
				}
			}
			target.data[_g1] = target.data[_g1] + this._faceTangents.data[f2] * weight;
			var _g2 = index;
			if(!target.fixed) {
				if(_g2 >= target.length) target.length = _g2 + 1;
				if(target.data.length < target.length) {
					var data5;
					var this8;
					this8 = new Array(target.data.length + 10);
					data5 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data5,0,target.data.length);
					target.data = data5;
				}
			}
			target.data[_g2] = target.data[_g2] + this._faceTangents.data[f3] * weight;
			var b1;
			var a1;
			var index3 = i++;
			a1 = this._indices.data[index3];
			b1 = a1 * tangentStride;
			index = tangentOffset + b1;
			var _g3 = index++;
			if(!target.fixed) {
				if(_g3 >= target.length) target.length = _g3 + 1;
				if(target.data.length < target.length) {
					var data6;
					var this9;
					this9 = new Array(target.data.length + 10);
					data6 = this9;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data6,0,target.data.length);
					target.data = data6;
				}
			}
			target.data[_g3] = target.data[_g3] + this._faceTangents.data[f1] * weight;
			var _g4 = index++;
			if(!target.fixed) {
				if(_g4 >= target.length) target.length = _g4 + 1;
				if(target.data.length < target.length) {
					var data7;
					var this10;
					this10 = new Array(target.data.length + 10);
					data7 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data7,0,target.data.length);
					target.data = data7;
				}
			}
			target.data[_g4] = target.data[_g4] + this._faceTangents.data[f2] * weight;
			var _g5 = index;
			if(!target.fixed) {
				if(_g5 >= target.length) target.length = _g5 + 1;
				if(target.data.length < target.length) {
					var data8;
					var this11;
					this11 = new Array(target.data.length + 10);
					data8 = this11;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data8,0,target.data.length);
					target.data = data8;
				}
			}
			target.data[_g5] = target.data[_g5] + this._faceTangents.data[f3] * weight;
			var b2;
			var a2;
			var index4 = i++;
			a2 = this._indices.data[index4];
			b2 = a2 * tangentStride;
			index = tangentOffset + b2;
			var _g6 = index++;
			if(!target.fixed) {
				if(_g6 >= target.length) target.length = _g6 + 1;
				if(target.data.length < target.length) {
					var data9;
					var this12;
					this12 = new Array(target.data.length + 10);
					data9 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data9,0,target.data.length);
					target.data = data9;
				}
			}
			target.data[_g6] = target.data[_g6] + this._faceTangents.data[f1] * weight;
			var _g7 = index++;
			if(!target.fixed) {
				if(_g7 >= target.length) target.length = _g7 + 1;
				if(target.data.length < target.length) {
					var data10;
					var this13;
					this13 = new Array(target.data.length + 10);
					data10 = this13;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data10,0,target.data.length);
					target.data = data10;
				}
			}
			target.data[_g7] = target.data[_g7] + this._faceTangents.data[f2] * weight;
			var _g8 = index;
			if(!target.fixed) {
				if(_g8 >= target.length) target.length = _g8 + 1;
				if(target.data.length < target.length) {
					var data11;
					var this14;
					this14 = new Array(target.data.length + 10);
					data11 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data11,0,target.data.length);
					target.data = data11;
				}
			}
			target.data[_g8] = target.data[_g8] + this._faceTangents.data[f3] * weight;
			f1 += 3;
			f2 += 3;
			f3 += 3;
		}
		i = tangentOffset;
		while(i < lenV) {
			var vx = target.data[i];
			var vy = target.data[i + 1];
			var vz = target.data[i + 2];
			var d = 1.0 / Math.sqrt(vx * vx + vy * vy + vz * vz);
			if(!target.fixed) {
				if(i >= target.length) target.length = i + 1;
				if(target.data.length < target.length) {
					var data12;
					var this15;
					this15 = new Array(target.data.length + 10);
					data12 = this15;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data12,0,target.data.length);
					target.data = data12;
				}
			}
			target.data[i] = vx * d;
			var key2 = i + 1;
			if(!target.fixed) {
				if(key2 >= target.length) target.length = key2 + 1;
				if(target.data.length < target.length) {
					var data13;
					var this16;
					this16 = new Array(target.data.length + 10);
					data13 = this16;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data13,0,target.data.length);
					target.data = data13;
				}
			}
			target.data[key2] = vy * d;
			var key3 = i + 2;
			if(!target.fixed) {
				if(key3 >= target.length) target.length = key3 + 1;
				if(target.data.length < target.length) {
					var data14;
					var this17;
					this17 = new Array(target.data.length + 10);
					data14 = this17;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data14,0,target.data.length);
					target.data = data14;
				}
			}
			target.data[key3] = vz * d;
			i += tangentStride;
		}
		this._vertexTangentsDirty = false;
		return target;
	}
	,dispose: function() {
		this.disposeIndexBuffers(this._indexBuffer);
		this._indices = null;
		this._indexBufferContext = null;
		this._faceNormals = null;
		this._faceWeights = null;
		this._faceTangents = null;
		this._vertexData = null;
	}
	,get_indexData: function() {
		return this._indices;
	}
	,updateIndexData: function(indices) {
		this._indices = indices;
		this._numIndices = indices.length;
		var numTriangles = this._numIndices / 3 | 0;
		if(this._numTriangles != numTriangles) this.disposeIndexBuffers(this._indexBuffer);
		this._numTriangles = numTriangles;
		this.invalidateBuffers(this._indicesInvalid);
		this._faceNormalsDirty = true;
		if(this._autoDeriveVertexNormals) this._vertexNormalsDirty = true;
		if(this._autoDeriveVertexTangents) this._vertexTangentsDirty = true;
	}
	,disposeIndexBuffers: function(buffers) {
		var i = 0;
		while(i < 8) {
			if(buffers.data[i] != null) {
				away3d.core.managers.Stage3DProxy.disposeIndexBuffer(buffers.data[i]);
				if(!buffers.fixed) {
					if(i >= buffers.length) buffers.length = i + 1;
					if(buffers.data.length < buffers.length) {
						var data;
						var this1;
						this1 = new Array(buffers.data.length + 10);
						data = this1;
						haxe.ds._Vector.Vector_Impl_.blit(buffers.data,0,data,0,buffers.data.length);
						buffers.data = data;
					}
				}
				buffers.data[i] = null;
			}
			++i;
		}
	}
	,disposeVertexBuffers: function(buffers) {
		var i = 0;
		while(i < 8) {
			if(buffers.data[i] != null) {
				away3d.core.managers.Stage3DProxy.disposeVertexBuffer(buffers.data[i]);
				if(!buffers.fixed) {
					if(i >= buffers.length) buffers.length = i + 1;
					if(buffers.data.length < buffers.length) {
						var data;
						var this1;
						this1 = new Array(buffers.data.length + 10);
						data = this1;
						haxe.ds._Vector.Vector_Impl_.blit(buffers.data,0,data,0,buffers.data.length);
						buffers.data = data;
					}
				}
				buffers.data[i] = null;
			}
			++i;
		}
	}
	,get_autoDeriveVertexTangents: function() {
		return this._autoDeriveVertexTangents;
	}
	,set_autoDeriveVertexTangents: function(value) {
		this._autoDeriveVertexTangents = value;
		this._vertexTangentsDirty = value;
		return value;
	}
	,get_faceNormals: function() {
		if(this._faceNormalsDirty) this.updateFaceNormals();
		return this._faceNormals;
	}
	,invalidateBuffers: function(invalid) {
		var i = 0;
		while(i < 8) {
			if(!invalid.fixed) {
				if(i >= invalid.length) invalid.length = i + 1;
				if(invalid.data.length < invalid.length) {
					var data;
					var this1;
					this1 = new Array(invalid.data.length + 10);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(invalid.data,0,data,0,invalid.data.length);
					invalid.data = data;
				}
			}
			invalid.data[i] = true;
			++i;
		}
	}
	,get_UVStride: function() {
		throw new away3d.errors.AbstractMethodError();
		return 0;
	}
	,get_vertexData: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,get_vertexPositionData: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,get_vertexNormalData: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,get_vertexTangentData: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,get_UVData: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,get_vertexStride: function() {
		throw new away3d.errors.AbstractMethodError();
		return 0;
	}
	,get_vertexNormalStride: function() {
		throw new away3d.errors.AbstractMethodError();
		return 0;
	}
	,get_vertexTangentStride: function() {
		throw new away3d.errors.AbstractMethodError();
		return 0;
	}
	,get_vertexOffset: function() {
		throw new away3d.errors.AbstractMethodError();
		return 0;
	}
	,get_vertexNormalOffset: function() {
		throw new away3d.errors.AbstractMethodError();
		return 0;
	}
	,get_vertexTangentOffset: function() {
		throw new away3d.errors.AbstractMethodError();
		return 0;
	}
	,get_UVOffset: function() {
		throw new away3d.errors.AbstractMethodError();
		return 0;
	}
	,invalidateBounds: function() {
		if(this._parentGeometry != null) this._parentGeometry.invalidateBounds(js.Boot.__cast(this , away3d.core.base.ISubGeometry));
	}
	,get_parentGeometry: function() {
		return this._parentGeometry;
	}
	,set_parentGeometry: function(value) {
		this._parentGeometry = value;
		return value;
	}
	,get_scaleU: function() {
		return this._scaleU;
	}
	,get_scaleV: function() {
		return this._scaleV;
	}
	,scaleUV: function(scaleU,scaleV) {
		if(scaleV == null) scaleV = 1;
		if(scaleU == null) scaleU = 1;
		var offset = this.get_UVOffset();
		var stride = this.get_UVStride();
		var uvs = this.get_UVData();
		var len = uvs.length;
		var ratioU = scaleU / this._scaleU;
		var ratioV = scaleV / this._scaleV;
		var i = offset;
		while(i < len) {
			var _g = i;
			if(!uvs.fixed) {
				if(_g >= uvs.length) uvs.length = _g + 1;
				if(uvs.data.length < uvs.length) {
					var data;
					var this1;
					this1 = new Array(uvs.data.length + 10);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(uvs.data,0,data,0,uvs.data.length);
					uvs.data = data;
				}
			}
			uvs.data[_g] = uvs.data[_g] * ratioU;
			var _g1 = i + 1;
			if(!uvs.fixed) {
				if(_g1 >= uvs.length) uvs.length = _g1 + 1;
				if(uvs.data.length < uvs.length) {
					var data1;
					var this2;
					this2 = new Array(uvs.data.length + 10);
					data1 = this2;
					haxe.ds._Vector.Vector_Impl_.blit(uvs.data,0,data1,0,uvs.data.length);
					uvs.data = data1;
				}
			}
			uvs.data[_g1] = uvs.data[_g1] * ratioV;
			i += stride;
		}
		this._scaleU = scaleU;
		this._scaleV = scaleV;
	}
	,scale: function(scale) {
		var vertices = this.get_UVData();
		var len = vertices.length;
		var offset = this.get_vertexOffset();
		var stride = this.get_vertexStride();
		var i = offset;
		while(i < len) {
			var _g = i;
			if(!vertices.fixed) {
				if(_g >= vertices.length) vertices.length = _g + 1;
				if(vertices.data.length < vertices.length) {
					var data;
					var this1;
					this1 = new Array(vertices.data.length + 10);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data,0,vertices.data.length);
					vertices.data = data;
				}
			}
			vertices.data[_g] = vertices.data[_g] * scale;
			var _g1 = i + 1;
			if(!vertices.fixed) {
				if(_g1 >= vertices.length) vertices.length = _g1 + 1;
				if(vertices.data.length < vertices.length) {
					var data1;
					var this2;
					this2 = new Array(vertices.data.length + 10);
					data1 = this2;
					haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data1,0,vertices.data.length);
					vertices.data = data1;
				}
			}
			vertices.data[_g1] = vertices.data[_g1] * scale;
			var _g2 = i + 2;
			if(!vertices.fixed) {
				if(_g2 >= vertices.length) vertices.length = _g2 + 1;
				if(vertices.data.length < vertices.length) {
					var data2;
					var this3;
					this3 = new Array(vertices.data.length + 10);
					data2 = this3;
					haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data2,0,vertices.data.length);
					vertices.data = data2;
				}
			}
			vertices.data[_g2] = vertices.data[_g2] * scale;
			i += stride;
		}
	}
	,applyTransformation: function(transform) {
		var vertices = this._vertexData;
		var normals = this.get_vertexNormalData();
		var tangents = this.get_vertexTangentData();
		var posStride = this.get_vertexStride();
		var normalStride = this.get_vertexNormalStride();
		var tangentStride = this.get_vertexTangentStride();
		var posOffset = this.get_vertexOffset();
		var normalOffset = this.get_vertexNormalOffset();
		var tangentOffset = this.get_vertexTangentOffset();
		var len = vertices.length / posStride | 0;
		var i = 0;
		var i1;
		var i2;
		var vector = new openfl.geom.Vector3D();
		var bakeNormals = normals != null;
		var bakeTangents = tangents != null;
		var invTranspose = null;
		if(bakeNormals || bakeTangents) {
			invTranspose = transform.clone();
			invTranspose.invert();
			invTranspose.transpose();
		}
		var vi0 = posOffset;
		var ni0 = normalOffset;
		var ti0 = tangentOffset;
		i = 0;
		while(i < len) {
			i1 = vi0 + 1;
			i2 = vi0 + 2;
			vector.x = vertices.data[vi0];
			vector.y = vertices.data[i1];
			vector.z = vertices.data[i2];
			vector = transform.transformVector(vector);
			if(!vertices.fixed) {
				if(vi0 >= vertices.length) vertices.length = vi0 + 1;
				if(vertices.data.length < vertices.length) {
					var data;
					var this1;
					this1 = new Array(vertices.data.length + 10);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data,0,vertices.data.length);
					vertices.data = data;
				}
			}
			vertices.data[vi0] = vector.x;
			if(!vertices.fixed) {
				if(i1 >= vertices.length) vertices.length = i1 + 1;
				if(vertices.data.length < vertices.length) {
					var data1;
					var this2;
					this2 = new Array(vertices.data.length + 10);
					data1 = this2;
					haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data1,0,vertices.data.length);
					vertices.data = data1;
				}
			}
			vertices.data[i1] = vector.y;
			if(!vertices.fixed) {
				if(i2 >= vertices.length) vertices.length = i2 + 1;
				if(vertices.data.length < vertices.length) {
					var data2;
					var this3;
					this3 = new Array(vertices.data.length + 10);
					data2 = this3;
					haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data2,0,vertices.data.length);
					vertices.data = data2;
				}
			}
			vertices.data[i2] = vector.z;
			vi0 += posStride;
			if(bakeNormals) {
				i1 = ni0 + 1;
				i2 = ni0 + 2;
				vector.x = normals.data[ni0];
				vector.y = normals.data[i1];
				vector.z = normals.data[i2];
				vector = invTranspose.deltaTransformVector(vector);
				vector.normalize();
				if(!normals.fixed) {
					if(ni0 >= normals.length) normals.length = ni0 + 1;
					if(normals.data.length < normals.length) {
						var data3;
						var this4;
						this4 = new Array(normals.data.length + 10);
						data3 = this4;
						haxe.ds._Vector.Vector_Impl_.blit(normals.data,0,data3,0,normals.data.length);
						normals.data = data3;
					}
				}
				normals.data[ni0] = vector.x;
				if(!normals.fixed) {
					if(i1 >= normals.length) normals.length = i1 + 1;
					if(normals.data.length < normals.length) {
						var data4;
						var this5;
						this5 = new Array(normals.data.length + 10);
						data4 = this5;
						haxe.ds._Vector.Vector_Impl_.blit(normals.data,0,data4,0,normals.data.length);
						normals.data = data4;
					}
				}
				normals.data[i1] = vector.y;
				if(!normals.fixed) {
					if(i2 >= normals.length) normals.length = i2 + 1;
					if(normals.data.length < normals.length) {
						var data5;
						var this6;
						this6 = new Array(normals.data.length + 10);
						data5 = this6;
						haxe.ds._Vector.Vector_Impl_.blit(normals.data,0,data5,0,normals.data.length);
						normals.data = data5;
					}
				}
				normals.data[i2] = vector.z;
				ni0 += normalStride;
			}
			if(bakeTangents) {
				i1 = ti0 + 1;
				i2 = ti0 + 2;
				vector.x = tangents.data[ti0];
				vector.y = tangents.data[i1];
				vector.z = tangents.data[i2];
				vector = invTranspose.deltaTransformVector(vector);
				vector.normalize();
				if(!tangents.fixed) {
					if(ti0 >= tangents.length) tangents.length = ti0 + 1;
					if(tangents.data.length < tangents.length) {
						var data6;
						var this7;
						this7 = new Array(tangents.data.length + 10);
						data6 = this7;
						haxe.ds._Vector.Vector_Impl_.blit(tangents.data,0,data6,0,tangents.data.length);
						tangents.data = data6;
					}
				}
				tangents.data[ti0] = vector.x;
				if(!tangents.fixed) {
					if(i1 >= tangents.length) tangents.length = i1 + 1;
					if(tangents.data.length < tangents.length) {
						var data7;
						var this8;
						this8 = new Array(tangents.data.length + 10);
						data7 = this8;
						haxe.ds._Vector.Vector_Impl_.blit(tangents.data,0,data7,0,tangents.data.length);
						tangents.data = data7;
					}
				}
				tangents.data[i1] = vector.y;
				if(!tangents.fixed) {
					if(i2 >= tangents.length) tangents.length = i2 + 1;
					if(tangents.data.length < tangents.length) {
						var data8;
						var this9;
						this9 = new Array(tangents.data.length + 10);
						data8 = this9;
						haxe.ds._Vector.Vector_Impl_.blit(tangents.data,0,data8,0,tangents.data.length);
						tangents.data = data8;
					}
				}
				tangents.data[i2] = vector.z;
				ti0 += tangentStride;
			}
			++i;
		}
	}
	,updateDummyUVs: function(target) {
		this._uvsDirty = false;
		var idx;
		var uvIdx;
		var stride = this.get_UVStride();
		var skip = stride - 2;
		var len = Std["int"](this._vertexData.length / this.get_vertexStride() * stride);
		if(target == null) {
			var this1;
			this1 = new openfl.VectorData();
			var this2;
			this2 = new Array(0);
			this1.data = this2;
			this1.length = 0;
			this1.fixed = false;
			target = this1;
		}
		away3d.utils.ArrayUtils.reSize(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB(target),len,0);
		idx = this.get_UVOffset();
		uvIdx = 0;
		while(idx < len) {
			var key = idx++;
			if(!target.fixed) {
				if(key >= target.length) target.length = key + 1;
				if(target.data.length < target.length) {
					var data;
					var this3;
					this3 = new Array(target.data.length + 10);
					data = this3;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data,0,target.data.length);
					target.data = data;
				}
			}
			target.data[key] = uvIdx * .5;
			var key1 = idx++;
			if(!target.fixed) {
				if(key1 >= target.length) target.length = key1 + 1;
				if(target.data.length < target.length) {
					var data1;
					var this4;
					this4 = new Array(target.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data1,0,target.data.length);
					target.data = data1;
				}
			}
			target.data[key1] = 1.0 - (uvIdx & 1);
			idx += skip;
			if(++uvIdx == 3) uvIdx = 0;
		}
		return target;
	}
	,__class__: away3d.core.base.SubGeometryBase
	,__properties__: {get_scaleV:"get_scaleV",get_scaleU:"get_scaleU",set_parentGeometry:"set_parentGeometry",get_parentGeometry:"get_parentGeometry",get_UVOffset:"get_UVOffset",get_vertexTangentOffset:"get_vertexTangentOffset",get_vertexNormalOffset:"get_vertexNormalOffset",get_vertexOffset:"get_vertexOffset",get_vertexTangentStride:"get_vertexTangentStride",get_vertexNormalStride:"get_vertexNormalStride",get_vertexStride:"get_vertexStride",get_UVData:"get_UVData",get_vertexTangentData:"get_vertexTangentData",get_vertexNormalData:"get_vertexNormalData",get_vertexPositionData:"get_vertexPositionData",get_vertexData:"get_vertexData",get_UVStride:"get_UVStride",get_faceNormals:"get_faceNormals",set_autoDeriveVertexTangents:"set_autoDeriveVertexTangents",get_autoDeriveVertexTangents:"get_autoDeriveVertexTangents",get_indexData:"get_indexData",get_numTriangles:"get_numTriangles",set_useFaceWeights:"set_useFaceWeights",get_useFaceWeights:"get_useFaceWeights",set_autoDeriveVertexNormals:"set_autoDeriveVertexNormals",get_autoDeriveVertexNormals:"get_autoDeriveVertexNormals",set_autoGenerateDummyUVs:"set_autoGenerateDummyUVs",get_autoGenerateDummyUVs:"get_autoGenerateDummyUVs"}
};
away3d.core.base.ISubGeometry = function() { };
$hxClasses["away3d.core.base.ISubGeometry"] = away3d.core.base.ISubGeometry;
away3d.core.base.ISubGeometry.__name__ = ["away3d","core","base","ISubGeometry"];
away3d.core.base.ISubGeometry.prototype = {
	get_numVertices: null
	,get_numTriangles: null
	,get_vertexStride: null
	,get_vertexNormalStride: null
	,get_vertexTangentStride: null
	,get_UVStride: null
	,get_secondaryUVStride: null
	,activateVertexBuffer: null
	,activateUVBuffer: null
	,activateSecondaryUVBuffer: null
	,activateVertexNormalBuffer: null
	,activateVertexTangentBuffer: null
	,getIndexBuffer: null
	,get_vertexData: null
	,get_vertexNormalData: null
	,get_vertexTangentData: null
	,get_vertexOffset: null
	,get_vertexNormalOffset: null
	,get_vertexTangentOffset: null
	,get_UVOffset: null
	,get_secondaryUVOffset: null
	,get_indexData: null
	,get_UVData: null
	,applyTransformation: null
	,scale: null
	,dispose: null
	,clone: null
	,get_scaleU: null
	,get_scaleV: null
	,scaleUV: null
	,get_parentGeometry: null
	,set_parentGeometry: null
	,get_faceNormals: null
	,cloneWithSeperateBuffers: null
	,get_autoDeriveVertexNormals: null
	,set_autoDeriveVertexNormals: null
	,get_autoDeriveVertexTangents: null
	,set_autoDeriveVertexTangents: null
	,fromVectors: null
	,get_vertexPositionData: null
	,__class__: away3d.core.base.ISubGeometry
	,__properties__: {get_vertexPositionData:"get_vertexPositionData",set_autoDeriveVertexTangents:"set_autoDeriveVertexTangents",get_autoDeriveVertexTangents:"get_autoDeriveVertexTangents",set_autoDeriveVertexNormals:"set_autoDeriveVertexNormals",get_autoDeriveVertexNormals:"get_autoDeriveVertexNormals",get_faceNormals:"get_faceNormals",set_parentGeometry:"set_parentGeometry",get_parentGeometry:"get_parentGeometry",get_scaleV:"get_scaleV",get_scaleU:"get_scaleU",get_UVData:"get_UVData",get_indexData:"get_indexData",get_secondaryUVOffset:"get_secondaryUVOffset",get_UVOffset:"get_UVOffset",get_vertexTangentOffset:"get_vertexTangentOffset",get_vertexNormalOffset:"get_vertexNormalOffset",get_vertexOffset:"get_vertexOffset",get_vertexTangentData:"get_vertexTangentData",get_vertexNormalData:"get_vertexNormalData",get_vertexData:"get_vertexData",get_secondaryUVStride:"get_secondaryUVStride",get_UVStride:"get_UVStride",get_vertexTangentStride:"get_vertexTangentStride",get_vertexNormalStride:"get_vertexNormalStride",get_vertexStride:"get_vertexStride",get_numTriangles:"get_numTriangles",get_numVertices:"get_numVertices"}
};
away3d.core.base.CompactSubGeometry = function() {
	away3d.core.base.SubGeometryBase.call(this);
	this._vertexDataInvalid = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(0);
			this1.data = this2;
		}
		this1.length = 0;
		this1.fixed = false;
		$r = this1;
		return $r;
	}(this))),8,false);
	var this3;
	this3 = new openfl.VectorData();
	var this4;
	this4 = new Array(8);
	this3.data = this4;
	this3.length = 8;
	this3.fixed = false;
	this._vertexBuffer = this3;
	var this5;
	this5 = new openfl.VectorData();
	var this6;
	this6 = new Array(8);
	this5.data = this6;
	this5.length = 8;
	this5.fixed = false;
	this._bufferContext = this5;
	this._autoDeriveVertexNormals = false;
	this._autoDeriveVertexTangents = false;
};
$hxClasses["away3d.core.base.CompactSubGeometry"] = away3d.core.base.CompactSubGeometry;
away3d.core.base.CompactSubGeometry.__name__ = ["away3d","core","base","CompactSubGeometry"];
away3d.core.base.CompactSubGeometry.__interfaces__ = [away3d.core.base.ISubGeometry];
away3d.core.base.CompactSubGeometry.__super__ = away3d.core.base.SubGeometryBase;
away3d.core.base.CompactSubGeometry.prototype = $extend(away3d.core.base.SubGeometryBase.prototype,{
	_vertexDataInvalid: null
	,_vertexBuffer: null
	,_bufferContext: null
	,_numVertices: null
	,_contextIndex: null
	,_activeBuffer: null
	,_activeContext: null
	,_activeDataInvalid: null
	,_isolatedVertexPositionData: null
	,_isolatedVertexPositionDataDirty: null
	,get_numVertices: function() {
		return this._numVertices;
	}
	,updateData: function(data) {
		if(this._autoDeriveVertexNormals) this._vertexNormalsDirty = true;
		if(this._autoDeriveVertexTangents) this._vertexTangentsDirty = true;
		this._faceNormalsDirty = true;
		this._faceTangentsDirty = true;
		this._isolatedVertexPositionDataDirty = true;
		this._vertexData = data;
		var numVertices = this._vertexData.length / 13 | 0;
		if(numVertices != this._numVertices) this.disposeVertexBuffers(this._vertexBuffer);
		this._numVertices = numVertices;
		if(this._numVertices == 0) throw new openfl.errors.Error("Bad data: geometry can't have zero triangles");
		this.invalidateBuffers(this._vertexDataInvalid);
		this.invalidateBounds();
	}
	,activateVertexBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(contextIndex != this._contextIndex) this.updateActiveBuffer(contextIndex);
		if(this._activeBuffer == null || this._activeContext != context) this.createBuffer(contextIndex,context,stage3DProxy);
		if(this._activeDataInvalid) this.uploadData(contextIndex);
		context.setVertexBufferAt(index,this._activeBuffer,0,openfl.display3D.Context3DVertexBufferFormat.FLOAT_3);
	}
	,activateUVBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._uvsDirty && this._autoGenerateUVs) {
			this._vertexData = this.updateDummyUVs(this._vertexData);
			this.invalidateBuffers(this._vertexDataInvalid);
		}
		if(contextIndex != this._contextIndex) this.updateActiveBuffer(contextIndex);
		if(this._activeBuffer == null || this._activeContext != context) this.createBuffer(contextIndex,context,stage3DProxy);
		if(this._activeDataInvalid) this.uploadData(contextIndex);
		context.setVertexBufferAt(index,this._activeBuffer,9,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
	}
	,activateSecondaryUVBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(contextIndex != this._contextIndex) this.updateActiveBuffer(contextIndex);
		if(this._activeBuffer == null || this._activeContext != context) this.createBuffer(contextIndex,context,stage3DProxy);
		if(this._activeDataInvalid) this.uploadData(contextIndex);
		context.setVertexBufferAt(index,this._activeBuffer,11,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
	}
	,uploadData: function(contextIndex) {
		this._activeBuffer.uploadFromVector(this._vertexData,0,this._numVertices);
		var this1 = this._vertexDataInvalid;
		var value = this._activeDataInvalid = false;
		if(!this1.fixed) {
			if(contextIndex >= this1.length) this1.length = contextIndex + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[contextIndex] = value;
	}
	,activateVertexNormalBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(contextIndex != this._contextIndex) this.updateActiveBuffer(contextIndex);
		if(this._activeBuffer == null || this._activeContext != context) this.createBuffer(contextIndex,context,stage3DProxy);
		if(this._activeDataInvalid) this.uploadData(contextIndex);
		context.setVertexBufferAt(index,this._activeBuffer,3,openfl.display3D.Context3DVertexBufferFormat.FLOAT_3);
	}
	,activateVertexTangentBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(contextIndex != this._contextIndex) this.updateActiveBuffer(contextIndex);
		if(this._activeBuffer == null || this._activeContext != context) this.createBuffer(contextIndex,context,stage3DProxy);
		if(this._activeDataInvalid) this.uploadData(contextIndex);
		context.setVertexBufferAt(index,this._activeBuffer,6,openfl.display3D.Context3DVertexBufferFormat.FLOAT_3);
	}
	,createBuffer: function(contextIndex,context,stage3DProxy) {
		var this1 = this._vertexBuffer;
		var value = this._activeBuffer = stage3DProxy.createVertexBuffer(this._numVertices,13);
		if(!this1.fixed) {
			if(contextIndex >= this1.length) this1.length = contextIndex + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[contextIndex] = value;
		var this3 = this._bufferContext;
		var value1 = this._activeContext = context;
		if(!this3.fixed) {
			if(contextIndex >= this3.length) this3.length = contextIndex + 1;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[contextIndex] = value1;
		var this5 = this._vertexDataInvalid;
		var value2 = this._activeDataInvalid = true;
		if(!this5.fixed) {
			if(contextIndex >= this5.length) this5.length = contextIndex + 1;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[contextIndex] = value2;
	}
	,updateActiveBuffer: function(contextIndex) {
		this._contextIndex = contextIndex;
		this._activeDataInvalid = this._vertexDataInvalid.data[contextIndex];
		this._activeBuffer = this._vertexBuffer.data[contextIndex];
		this._activeContext = this._bufferContext.data[contextIndex];
	}
	,get_vertexData: function() {
		if(this._autoDeriveVertexNormals && this._vertexNormalsDirty) this._vertexData = this.updateVertexNormals(this._vertexData);
		if(this._autoDeriveVertexTangents && this._vertexTangentsDirty) this._vertexData = this.updateVertexTangents(this._vertexData);
		if(this._uvsDirty && this._autoGenerateUVs) this._vertexData = this.updateDummyUVs(this._vertexData);
		return this._vertexData;
	}
	,updateVertexNormals: function(target) {
		this.invalidateBuffers(this._vertexDataInvalid);
		return away3d.core.base.SubGeometryBase.prototype.updateVertexNormals.call(this,target);
	}
	,updateVertexTangents: function(target) {
		if(this._vertexNormalsDirty) this._vertexData = this.updateVertexNormals(this._vertexData);
		this.invalidateBuffers(this._vertexDataInvalid);
		return away3d.core.base.SubGeometryBase.prototype.updateVertexTangents.call(this,target);
	}
	,get_vertexNormalData: function() {
		if(this._autoDeriveVertexNormals && this._vertexNormalsDirty) this._vertexData = this.updateVertexNormals(this._vertexData);
		return this._vertexData;
	}
	,get_vertexTangentData: function() {
		if(this._autoDeriveVertexTangents && this._vertexTangentsDirty) this._vertexData = this.updateVertexTangents(this._vertexData);
		return this._vertexData;
	}
	,get_UVData: function() {
		if(this._uvsDirty && this._autoGenerateUVs) {
			this._vertexData = this.updateDummyUVs(this._vertexData);
			this.invalidateBuffers(this._vertexDataInvalid);
		}
		return this._vertexData;
	}
	,applyTransformation: function(transform) {
		away3d.core.base.SubGeometryBase.prototype.applyTransformation.call(this,transform);
		this.invalidateBuffers(this._vertexDataInvalid);
	}
	,scale: function(scale) {
		away3d.core.base.SubGeometryBase.prototype.scale.call(this,scale);
		this.invalidateBuffers(this._vertexDataInvalid);
	}
	,clone: function() {
		var clone = new away3d.core.base.CompactSubGeometry();
		clone._autoDeriveVertexNormals = this._autoDeriveVertexNormals;
		clone._autoDeriveVertexTangents = this._autoDeriveVertexTangents;
		clone.updateData((function($this) {
			var $r;
			var this1 = $this._vertexData;
			var vectorData = new openfl.VectorData();
			vectorData.length = this1.length;
			vectorData.fixed = this1.fixed;
			{
				var this2;
				this2 = new Array(this1.length);
				vectorData.data = this2;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
			$r = vectorData;
			return $r;
		}(this)));
		clone.updateIndexData((function($this) {
			var $r;
			var this3 = $this._indices;
			var vectorData1 = new openfl.VectorData();
			vectorData1.length = this3.length;
			vectorData1.fixed = this3.fixed;
			{
				var this4;
				this4 = new Array(this3.length);
				vectorData1.data = this4;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,vectorData1.data,0,this3.length);
			$r = vectorData1;
			return $r;
		}(this)));
		return clone;
	}
	,scaleUV: function(scaleU,scaleV) {
		if(scaleV == null) scaleV = 1;
		if(scaleU == null) scaleU = 1;
		away3d.core.base.SubGeometryBase.prototype.scaleUV.call(this,scaleU,scaleV);
		this.invalidateBuffers(this._vertexDataInvalid);
	}
	,get_vertexStride: function() {
		return 13;
	}
	,get_vertexNormalStride: function() {
		return 13;
	}
	,get_vertexTangentStride: function() {
		return 13;
	}
	,get_UVStride: function() {
		return 13;
	}
	,get_secondaryUVStride: function() {
		return 13;
	}
	,get_vertexOffset: function() {
		return 0;
	}
	,get_vertexNormalOffset: function() {
		return 3;
	}
	,get_vertexTangentOffset: function() {
		return 6;
	}
	,get_UVOffset: function() {
		return 9;
	}
	,get_secondaryUVOffset: function() {
		return 11;
	}
	,dispose: function() {
		away3d.core.base.SubGeometryBase.prototype.dispose.call(this);
		this.disposeVertexBuffers(this._vertexBuffer);
		this._vertexBuffer = null;
	}
	,disposeVertexBuffers: function(buffers) {
		away3d.core.base.SubGeometryBase.prototype.disposeVertexBuffers.call(this,buffers);
		this._activeBuffer = null;
	}
	,invalidateBuffers: function(invalid) {
		away3d.core.base.SubGeometryBase.prototype.invalidateBuffers.call(this,invalid);
		this._activeDataInvalid = true;
	}
	,cloneWithSeperateBuffers: function() {
		var clone = new away3d.core.base.SubGeometry();
		clone.updateVertexData(this._isolatedVertexPositionData != null?this._isolatedVertexPositionData:this._isolatedVertexPositionData = this.stripBuffer(0,3));
		clone.set_autoDeriveVertexNormals(this._autoDeriveVertexNormals);
		clone.set_autoDeriveVertexTangents(this._autoDeriveVertexTangents);
		if(!this._autoDeriveVertexNormals) clone.updateVertexNormalData(this.stripBuffer(3,3));
		if(!this._autoDeriveVertexTangents) clone.updateVertexTangentData(this.stripBuffer(6,3));
		clone.updateUVData(this.stripBuffer(9,2));
		clone.updateSecondaryUVData(this.stripBuffer(11,2));
		clone.updateIndexData((function($this) {
			var $r;
			var this1 = $this.get_indexData();
			var vectorData = new openfl.VectorData();
			vectorData.length = this1.length;
			vectorData.fixed = this1.fixed;
			{
				var this2;
				this2 = new Array(this1.length);
				vectorData.data = this2;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
			$r = vectorData;
			return $r;
		}(this)));
		return clone;
	}
	,get_vertexPositionData: function() {
		if(this._isolatedVertexPositionDataDirty || this._isolatedVertexPositionData == null) {
			this._isolatedVertexPositionData = this.stripBuffer(0,3);
			this._isolatedVertexPositionDataDirty = false;
		}
		return this._isolatedVertexPositionData;
	}
	,stripBuffer: function(offset,numEntries) {
		var data = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
			var $r;
			var this1;
			this1 = new openfl.VectorData();
			{
				var this2;
				this2 = new Array(0);
				this1.data = this2;
			}
			this1.length = 0;
			this1.fixed = false;
			$r = this1;
			return $r;
		}(this))),this._numVertices * numEntries);
		var i = 0;
		var j = offset;
		var skip = 13 - numEntries;
		var v = 0;
		while(v < this._numVertices) {
			var k = 0;
			while(k < numEntries) {
				var key = i++;
				var value;
				var index = j++;
				value = this._vertexData.data[index];
				if(!data.fixed) {
					if(key >= data.length) data.length = key + 1;
					if(data.data.length < data.length) {
						var data1;
						var this3;
						this3 = new Array(data.data.length + 10);
						data1 = this3;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data1,0,data.data.length);
						data.data = data1;
					}
				}
				data.data[key] = value;
				++k;
			}
			j += skip;
			++v;
		}
		return data;
	}
	,fromVectors: function(verts,uvs,normals,tangents) {
		var vertLen = verts.length / 3 * 13 | 0;
		var index = 0;
		var v = 0;
		var n = 0;
		var t = 0;
		var u = 0;
		var data;
		var this1;
		this1 = new openfl.VectorData();
		var this2;
		this2 = new Array(vertLen);
		this1.data = this2;
		this1.length = vertLen;
		this1.fixed = false;
		data = this1;
		while(index < vertLen) {
			var key = index++;
			var value;
			var index1 = v++;
			value = verts.data[index1];
			if(!data.fixed) {
				if(key >= data.length) data.length = key + 1;
				if(data.data.length < data.length) {
					var data1;
					var this3;
					this3 = new Array(data.data.length + 10);
					data1 = this3;
					haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data1,0,data.data.length);
					data.data = data1;
				}
			}
			data.data[key] = value;
			var key1 = index++;
			var value1;
			var index2 = v++;
			value1 = verts.data[index2];
			if(!data.fixed) {
				if(key1 >= data.length) data.length = key1 + 1;
				if(data.data.length < data.length) {
					var data2;
					var this4;
					this4 = new Array(data.data.length + 10);
					data2 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data2,0,data.data.length);
					data.data = data2;
				}
			}
			data.data[key1] = value1;
			var key2 = index++;
			var value2;
			var index3 = v++;
			value2 = verts.data[index3];
			if(!data.fixed) {
				if(key2 >= data.length) data.length = key2 + 1;
				if(data.data.length < data.length) {
					var data3;
					var this5;
					this5 = new Array(data.data.length + 10);
					data3 = this5;
					haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data3,0,data.data.length);
					data.data = data3;
				}
			}
			data.data[key2] = value2;
			if(normals != null && normals.length > 0) {
				var key3 = index++;
				var value3;
				var index4 = n++;
				value3 = normals.data[index4];
				if(!data.fixed) {
					if(key3 >= data.length) data.length = key3 + 1;
					if(data.data.length < data.length) {
						var data4;
						var this6;
						this6 = new Array(data.data.length + 10);
						data4 = this6;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data4,0,data.data.length);
						data.data = data4;
					}
				}
				data.data[key3] = value3;
				var key4 = index++;
				var value4;
				var index5 = n++;
				value4 = normals.data[index5];
				if(!data.fixed) {
					if(key4 >= data.length) data.length = key4 + 1;
					if(data.data.length < data.length) {
						var data5;
						var this7;
						this7 = new Array(data.data.length + 10);
						data5 = this7;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data5,0,data.data.length);
						data.data = data5;
					}
				}
				data.data[key4] = value4;
				var key5 = index++;
				var value5;
				var index6 = n++;
				value5 = normals.data[index6];
				if(!data.fixed) {
					if(key5 >= data.length) data.length = key5 + 1;
					if(data.data.length < data.length) {
						var data6;
						var this8;
						this8 = new Array(data.data.length + 10);
						data6 = this8;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data6,0,data.data.length);
						data.data = data6;
					}
				}
				data.data[key5] = value5;
			} else {
				var key6 = index++;
				if(!data.fixed) {
					if(key6 >= data.length) data.length = key6 + 1;
					if(data.data.length < data.length) {
						var data7;
						var this9;
						this9 = new Array(data.data.length + 10);
						data7 = this9;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data7,0,data.data.length);
						data.data = data7;
					}
				}
				data.data[key6] = 0;
				var key7 = index++;
				if(!data.fixed) {
					if(key7 >= data.length) data.length = key7 + 1;
					if(data.data.length < data.length) {
						var data8;
						var this10;
						this10 = new Array(data.data.length + 10);
						data8 = this10;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data8,0,data.data.length);
						data.data = data8;
					}
				}
				data.data[key7] = 0;
				var key8 = index++;
				if(!data.fixed) {
					if(key8 >= data.length) data.length = key8 + 1;
					if(data.data.length < data.length) {
						var data9;
						var this11;
						this11 = new Array(data.data.length + 10);
						data9 = this11;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data9,0,data.data.length);
						data.data = data9;
					}
				}
				data.data[key8] = 0;
			}
			if(tangents != null && tangents.length > 0) {
				var key9 = index++;
				var value6;
				var index7 = t++;
				value6 = tangents.data[index7];
				if(!data.fixed) {
					if(key9 >= data.length) data.length = key9 + 1;
					if(data.data.length < data.length) {
						var data10;
						var this12;
						this12 = new Array(data.data.length + 10);
						data10 = this12;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data10,0,data.data.length);
						data.data = data10;
					}
				}
				data.data[key9] = value6;
				var key10 = index++;
				var value7;
				var index8 = t++;
				value7 = tangents.data[index8];
				if(!data.fixed) {
					if(key10 >= data.length) data.length = key10 + 1;
					if(data.data.length < data.length) {
						var data11;
						var this13;
						this13 = new Array(data.data.length + 10);
						data11 = this13;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data11,0,data.data.length);
						data.data = data11;
					}
				}
				data.data[key10] = value7;
				var key11 = index++;
				var value8;
				var index9 = t++;
				value8 = tangents.data[index9];
				if(!data.fixed) {
					if(key11 >= data.length) data.length = key11 + 1;
					if(data.data.length < data.length) {
						var data12;
						var this14;
						this14 = new Array(data.data.length + 10);
						data12 = this14;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data12,0,data.data.length);
						data.data = data12;
					}
				}
				data.data[key11] = value8;
			} else {
				var key12 = index++;
				if(!data.fixed) {
					if(key12 >= data.length) data.length = key12 + 1;
					if(data.data.length < data.length) {
						var data13;
						var this15;
						this15 = new Array(data.data.length + 10);
						data13 = this15;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data13,0,data.data.length);
						data.data = data13;
					}
				}
				data.data[key12] = 0;
				var key13 = index++;
				if(!data.fixed) {
					if(key13 >= data.length) data.length = key13 + 1;
					if(data.data.length < data.length) {
						var data14;
						var this16;
						this16 = new Array(data.data.length + 10);
						data14 = this16;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data14,0,data.data.length);
						data.data = data14;
					}
				}
				data.data[key13] = 0;
				var key14 = index++;
				if(!data.fixed) {
					if(key14 >= data.length) data.length = key14 + 1;
					if(data.data.length < data.length) {
						var data15;
						var this17;
						this17 = new Array(data.data.length + 10);
						data15 = this17;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data15,0,data.data.length);
						data.data = data15;
					}
				}
				data.data[key14] = 0;
			}
			if(uvs != null && uvs.length > 0) {
				var key15 = index++;
				if(!data.fixed) {
					if(key15 >= data.length) data.length = key15 + 1;
					if(data.data.length < data.length) {
						var data16;
						var this18;
						this18 = new Array(data.data.length + 10);
						data16 = this18;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data16,0,data.data.length);
						data.data = data16;
					}
				}
				data.data[key15] = uvs.data[u];
				var key16 = index++;
				if(!data.fixed) {
					if(key16 >= data.length) data.length = key16 + 1;
					if(data.data.length < data.length) {
						var data17;
						var this19;
						this19 = new Array(data.data.length + 10);
						data17 = this19;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data17,0,data.data.length);
						data.data = data17;
					}
				}
				data.data[key16] = uvs.data[u + 1];
				var key17 = index++;
				var value9;
				var index10 = u++;
				value9 = uvs.data[index10];
				if(!data.fixed) {
					if(key17 >= data.length) data.length = key17 + 1;
					if(data.data.length < data.length) {
						var data18;
						var this20;
						this20 = new Array(data.data.length + 10);
						data18 = this20;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data18,0,data.data.length);
						data.data = data18;
					}
				}
				data.data[key17] = value9;
				var key18 = index++;
				var value10;
				var index11 = u++;
				value10 = uvs.data[index11];
				if(!data.fixed) {
					if(key18 >= data.length) data.length = key18 + 1;
					if(data.data.length < data.length) {
						var data19;
						var this21;
						this21 = new Array(data.data.length + 10);
						data19 = this21;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data19,0,data.data.length);
						data.data = data19;
					}
				}
				data.data[key18] = value10;
			} else {
				var key19 = index++;
				if(!data.fixed) {
					if(key19 >= data.length) data.length = key19 + 1;
					if(data.data.length < data.length) {
						var data20;
						var this22;
						this22 = new Array(data.data.length + 10);
						data20 = this22;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data20,0,data.data.length);
						data.data = data20;
					}
				}
				data.data[key19] = 0;
				var key20 = index++;
				if(!data.fixed) {
					if(key20 >= data.length) data.length = key20 + 1;
					if(data.data.length < data.length) {
						var data21;
						var this23;
						this23 = new Array(data.data.length + 10);
						data21 = this23;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data21,0,data.data.length);
						data.data = data21;
					}
				}
				data.data[key20] = 0;
				var key21 = index++;
				if(!data.fixed) {
					if(key21 >= data.length) data.length = key21 + 1;
					if(data.data.length < data.length) {
						var data22;
						var this24;
						this24 = new Array(data.data.length + 10);
						data22 = this24;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data22,0,data.data.length);
						data.data = data22;
					}
				}
				data.data[key21] = 0;
				var key22 = index++;
				if(!data.fixed) {
					if(key22 >= data.length) data.length = key22 + 1;
					if(data.data.length < data.length) {
						var data23;
						var this25;
						this25 = new Array(data.data.length + 10);
						data23 = this25;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data23,0,data.data.length);
						data.data = data23;
					}
				}
				data.data[key22] = 0;
			}
		}
		this.set_autoDeriveVertexNormals(!(normals != null && normals.length > 0));
		this.set_autoDeriveVertexTangents(!(tangents != null && tangents.length > 0));
		this.set_autoGenerateDummyUVs(!(uvs != null && uvs.length > 0));
		this.updateData(data);
	}
	,__class__: away3d.core.base.CompactSubGeometry
	,__properties__: $extend(away3d.core.base.SubGeometryBase.prototype.__properties__,{get_secondaryUVOffset:"get_secondaryUVOffset",get_secondaryUVStride:"get_secondaryUVStride",get_numVertices:"get_numVertices"})
});
away3d.core.base.Geometry = function() {
	away3d.library.assets.NamedAssetBase.call(this);
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this._subGeometries = this1;
};
$hxClasses["away3d.core.base.Geometry"] = away3d.core.base.Geometry;
away3d.core.base.Geometry.__name__ = ["away3d","core","base","Geometry"];
away3d.core.base.Geometry.__interfaces__ = [away3d.library.assets.IAsset];
away3d.core.base.Geometry.__super__ = away3d.library.assets.NamedAssetBase;
away3d.core.base.Geometry.prototype = $extend(away3d.library.assets.NamedAssetBase.prototype,{
	_subGeometries: null
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.GEOMETRY;
	}
	,get_subGeometries: function() {
		return this._subGeometries;
	}
	,applyTransformation: function(transform) {
		var len = this._subGeometries.length;
		var i = 0;
		while(i < len) {
			this._subGeometries.data[i].applyTransformation(transform);
			++i;
		}
	}
	,addSubGeometry: function(subGeometry) {
		var this1 = this._subGeometries;
		if(!this1.fixed) {
			this1.length++;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
			this1.data[this1.length - 1] = subGeometry;
		}
		this1.length;
		subGeometry.set_parentGeometry(this);
		if(this.hasEventListener(away3d.events.GeometryEvent.SUB_GEOMETRY_ADDED)) this.dispatchEvent(new away3d.events.GeometryEvent(away3d.events.GeometryEvent.SUB_GEOMETRY_ADDED,subGeometry));
		this.invalidateBounds(subGeometry);
	}
	,removeSubGeometry: function(subGeometry) {
		var this1 = this._subGeometries;
		var pos;
		var this2 = this._subGeometries;
		var value = -1;
		var _g1 = 0;
		var _g = this2.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this2.data[i] == subGeometry) {
				value = i;
				break;
			}
		}
		pos = value;
		var len = 1;
		if(pos < 0) pos += this1.length;
		if(pos + len > this1.length) len = this1.length - pos;
		if(len < 0) len = 0;
		var vectorData = new openfl.VectorData();
		vectorData.length = len;
		vectorData.fixed = false;
		var this3;
		this3 = new Array(len);
		vectorData.data = this3;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos,vectorData.data,0,len);
		if(len > 0) {
			this1.length -= len;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos + len,this1.data,pos,this1.length - pos);
		}
		vectorData;
		subGeometry.set_parentGeometry(null);
		if(this.hasEventListener(away3d.events.GeometryEvent.SUB_GEOMETRY_REMOVED)) this.dispatchEvent(new away3d.events.GeometryEvent(away3d.events.GeometryEvent.SUB_GEOMETRY_REMOVED,subGeometry));
		this.invalidateBounds(subGeometry);
	}
	,clone: function() {
		var clone = new away3d.core.base.Geometry();
		var len = this._subGeometries.length;
		var i = 0;
		while(i < len) {
			clone.addSubGeometry(this._subGeometries.data[i].clone());
			++i;
		}
		return clone;
	}
	,scale: function(scale) {
		var numSubGeoms = this._subGeometries.length;
		var i = 0;
		while(i < numSubGeoms) {
			this._subGeometries.data[i].scale(scale);
			++i;
		}
	}
	,dispose: function() {
		var numSubGeoms = this._subGeometries.length;
		var i = 0;
		while(i < numSubGeoms) {
			var subGeom = this._subGeometries.data[0];
			this.removeSubGeometry(subGeom);
			subGeom.dispose();
			++i;
		}
	}
	,scaleUV: function(scaleU,scaleV) {
		if(scaleV == null) scaleV = 1;
		if(scaleU == null) scaleU = 1;
		var numSubGeoms = this._subGeometries.length;
		var i = 0;
		while(i < numSubGeoms) {
			this._subGeometries.data[i].scaleUV(scaleU,scaleV);
			++i;
		}
	}
	,convertToSeparateBuffers: function() {
		var subGeom;
		var numSubGeoms = this._subGeometries.length;
		var _removableCompactSubGeometries;
		var this1;
		this1 = new openfl.VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		_removableCompactSubGeometries = this1;
		var i = 0;
		while(i < numSubGeoms) {
			subGeom = this._subGeometries.data[i];
			if(js.Boot.__instanceof(subGeom,away3d.core.base.SubGeometry)) {
				++i;
				continue;
			}
			if(!_removableCompactSubGeometries.fixed) {
				_removableCompactSubGeometries.length++;
				if(_removableCompactSubGeometries.data.length < _removableCompactSubGeometries.length) {
					var data;
					var this3;
					this3 = new Array(_removableCompactSubGeometries.data.length + 10);
					data = this3;
					haxe.ds._Vector.Vector_Impl_.blit(_removableCompactSubGeometries.data,0,data,0,_removableCompactSubGeometries.data.length);
					_removableCompactSubGeometries.data = data;
				}
				_removableCompactSubGeometries.data[_removableCompactSubGeometries.length - 1] = subGeom;
			}
			_removableCompactSubGeometries.length;
			this.addSubGeometry(subGeom.cloneWithSeperateBuffers());
			++i;
		}
		var _g = 0;
		while(_g < _removableCompactSubGeometries.length) {
			var s = _removableCompactSubGeometries.data[_g];
			++_g;
			this.removeSubGeometry(s);
			s.dispose();
		}
	}
	,validate: function() {
	}
	,invalidateBounds: function(subGeom) {
		if(this.hasEventListener(away3d.events.GeometryEvent.BOUNDS_INVALID)) this.dispatchEvent(new away3d.events.GeometryEvent(away3d.events.GeometryEvent.BOUNDS_INVALID,subGeom));
	}
	,__class__: away3d.core.base.Geometry
	,__properties__: $extend(away3d.library.assets.NamedAssetBase.prototype.__properties__,{get_subGeometries:"get_subGeometries",get_assetType:"get_assetType"})
});
away3d.core.base.IMaterialOwner = function() { };
$hxClasses["away3d.core.base.IMaterialOwner"] = away3d.core.base.IMaterialOwner;
away3d.core.base.IMaterialOwner.__name__ = ["away3d","core","base","IMaterialOwner"];
away3d.core.base.IMaterialOwner.prototype = {
	get_material: null
	,set_material: null
	,get_animator: null
	,__class__: away3d.core.base.IMaterialOwner
	,__properties__: {get_animator:"get_animator",set_material:"set_material",get_material:"get_material"}
};
away3d.core.base.IRenderable = function() { };
$hxClasses["away3d.core.base.IRenderable"] = away3d.core.base.IRenderable;
away3d.core.base.IRenderable.__name__ = ["away3d","core","base","IRenderable"];
away3d.core.base.IRenderable.__interfaces__ = [away3d.core.base.IMaterialOwner];
away3d.core.base.IRenderable.prototype = {
	get_sceneTransform: null
	,getRenderSceneTransform: null
	,get_inverseSceneTransform: null
	,get_mouseEnabled: null
	,get_sourceEntity: null
	,get_castsShadows: null
	,get_uvTransform: null
	,get_shaderPickingDetails: null
	,get_numVertices: null
	,get_numTriangles: null
	,get_vertexStride: null
	,activateVertexBuffer: null
	,activateUVBuffer: null
	,activateSecondaryUVBuffer: null
	,activateVertexNormalBuffer: null
	,activateVertexTangentBuffer: null
	,getIndexBuffer: null
	,get_vertexData: null
	,get_vertexNormalData: null
	,get_vertexTangentData: null
	,get_indexData: null
	,get_UVData: null
	,__class__: away3d.core.base.IRenderable
	,__properties__: {get_UVData:"get_UVData",get_indexData:"get_indexData",get_vertexTangentData:"get_vertexTangentData",get_vertexNormalData:"get_vertexNormalData",get_vertexData:"get_vertexData",get_vertexStride:"get_vertexStride",get_numTriangles:"get_numTriangles",get_numVertices:"get_numVertices",get_shaderPickingDetails:"get_shaderPickingDetails",get_uvTransform:"get_uvTransform",get_castsShadows:"get_castsShadows",get_sourceEntity:"get_sourceEntity",get_mouseEnabled:"get_mouseEnabled",get_inverseSceneTransform:"get_inverseSceneTransform",get_sceneTransform:"get_sceneTransform"}
};
away3d.core.base.SkinnedSubGeometry = function(jointsPerVertex) {
	this._jointWeightsBuffer = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(0);
			this1.data = this2;
		}
		this1.length = 0;
		this1.fixed = false;
		$r = this1;
		return $r;
	}(this))),8);
	this._jointIndexBuffer = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this3;
		this3 = new openfl.VectorData();
		{
			var this4;
			this4 = new Array(0);
			this3.data = this4;
		}
		this3.length = 0;
		this3.fixed = false;
		$r = this3;
		return $r;
	}(this))),8);
	this._jointWeightsInvalid = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this5;
		this5 = new openfl.VectorData();
		{
			var this6;
			this6 = new Array(0);
			this5.data = this6;
		}
		this5.length = 0;
		this5.fixed = false;
		$r = this5;
		return $r;
	}(this))),8,false);
	this._jointIndicesInvalid = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this7;
		this7 = new openfl.VectorData();
		{
			var this8;
			this8 = new Array(0);
			this7.data = this8;
		}
		this7.length = 0;
		this7.fixed = false;
		$r = this7;
		return $r;
	}(this))),8,false);
	this._jointWeightContext = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this9;
		this9 = new openfl.VectorData();
		{
			var this10;
			this10 = new Array(0);
			this9.data = this10;
		}
		this9.length = 0;
		this9.fixed = false;
		$r = this9;
		return $r;
	}(this))),8);
	this._jointIndexContext = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this11;
		this11 = new openfl.VectorData();
		{
			var this12;
			this12 = new Array(0);
			this11.data = this12;
		}
		this11.length = 0;
		this11.fixed = false;
		$r = this11;
		return $r;
	}(this))),8);
	away3d.core.base.CompactSubGeometry.call(this);
	this._jointsPerVertex = jointsPerVertex;
	this._bufferFormat = this.getVertexBufferFormat(this._jointsPerVertex);
};
$hxClasses["away3d.core.base.SkinnedSubGeometry"] = away3d.core.base.SkinnedSubGeometry;
away3d.core.base.SkinnedSubGeometry.__name__ = ["away3d","core","base","SkinnedSubGeometry"];
away3d.core.base.SkinnedSubGeometry.__super__ = away3d.core.base.CompactSubGeometry;
away3d.core.base.SkinnedSubGeometry.prototype = $extend(away3d.core.base.CompactSubGeometry.prototype,{
	_bufferFormat: null
	,_jointWeightsData: null
	,_jointIndexData: null
	,_animatedData: null
	,_jointWeightsBuffer: null
	,_jointIndexBuffer: null
	,_jointWeightsInvalid: null
	,_jointIndicesInvalid: null
	,_jointWeightContext: null
	,_jointIndexContext: null
	,_jointsPerVertex: null
	,_condensedJointIndexData: null
	,_condensedIndexLookUp: null
	,_numCondensedJoints: null
	,getVertexBufferFormat: function(size) {
		switch(size) {
		case 1:
			return openfl.display3D.Context3DVertexBufferFormat.FLOAT_1;
		case 2:
			return openfl.display3D.Context3DVertexBufferFormat.FLOAT_2;
		case 3:
			return openfl.display3D.Context3DVertexBufferFormat.FLOAT_3;
		case 4:
			return openfl.display3D.Context3DVertexBufferFormat.FLOAT_3;
		default:
			return null;
		}
	}
	,get_condensedIndexLookUp: function() {
		return this._condensedIndexLookUp;
	}
	,get_numCondensedJoints: function() {
		return this._numCondensedJoints;
	}
	,get_animatedData: function() {
		if(this._animatedData != null) return this._animatedData;
		var this1 = this._vertexData;
		var vectorData = new openfl.VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
		return vectorData;
	}
	,updateAnimatedData: function(value) {
		this._animatedData = value;
		this.invalidateBuffers(this._vertexDataInvalid);
	}
	,activateJointWeightsBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._jointWeightContext.data[contextIndex] != context || this._jointWeightsBuffer.data[contextIndex] == null) {
			var this1 = this._jointWeightsBuffer;
			var value = stage3DProxy.createVertexBuffer(this._numVertices,this._jointsPerVertex);
			if(!this1.fixed) {
				if(contextIndex >= this1.length) this1.length = contextIndex + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[contextIndex] = value;
			var this3 = this._jointWeightContext;
			if(!this3.fixed) {
				if(contextIndex >= this3.length) this3.length = contextIndex + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[contextIndex] = context;
			var this5 = this._jointWeightsInvalid;
			if(!this5.fixed) {
				if(contextIndex >= this5.length) this5.length = contextIndex + 1;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[contextIndex] = true;
		}
		if(this._jointWeightsInvalid.data[contextIndex]) {
			this._jointWeightsBuffer.data[contextIndex].uploadFromVector(this._jointWeightsData,0,this._jointWeightsData.length / this._jointsPerVertex | 0);
			var this7 = this._jointWeightsInvalid;
			if(!this7.fixed) {
				if(contextIndex >= this7.length) this7.length = contextIndex + 1;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[contextIndex] = false;
		}
		context.setVertexBufferAt(index,this._jointWeightsBuffer.data[contextIndex],0,this._bufferFormat);
	}
	,activateJointIndexBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._jointIndexContext.data[contextIndex] != context || this._jointIndexBuffer.data[contextIndex] == null) {
			var this1 = this._jointIndexBuffer;
			var value = stage3DProxy.createVertexBuffer(this._numVertices,this._jointsPerVertex);
			if(!this1.fixed) {
				if(contextIndex >= this1.length) this1.length = contextIndex + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[contextIndex] = value;
			var this3 = this._jointIndexContext;
			if(!this3.fixed) {
				if(contextIndex >= this3.length) this3.length = contextIndex + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[contextIndex] = context;
			var this5 = this._jointIndicesInvalid;
			if(!this5.fixed) {
				if(contextIndex >= this5.length) this5.length = contextIndex + 1;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[contextIndex] = true;
		}
		if(this._jointIndicesInvalid.data[contextIndex]) {
			this._jointIndexBuffer.data[contextIndex].uploadFromVector(this._numCondensedJoints > 0?this._condensedJointIndexData:this._jointIndexData,0,this._jointIndexData.length / this._jointsPerVertex | 0);
			var this7 = this._jointIndicesInvalid;
			if(!this7.fixed) {
				if(contextIndex >= this7.length) this7.length = contextIndex + 1;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[contextIndex] = false;
		}
		context.setVertexBufferAt(index,this._jointIndexBuffer.data[contextIndex],0,this._bufferFormat);
	}
	,uploadData: function(contextIndex) {
		if(this._animatedData != null) {
			this._activeBuffer.uploadFromVector(this._animatedData,0,this._numVertices);
			var this1 = this._vertexDataInvalid;
			var value = this._activeDataInvalid = false;
			if(!this1.fixed) {
				if(contextIndex >= this1.length) this1.length = contextIndex + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[contextIndex] = value;
		} else away3d.core.base.CompactSubGeometry.prototype.uploadData.call(this,contextIndex);
	}
	,clone: function() {
		var clone = new away3d.core.base.SkinnedSubGeometry(this._jointsPerVertex);
		clone.updateData((function($this) {
			var $r;
			var this1 = $this._vertexData;
			var vectorData = new openfl.VectorData();
			vectorData.length = this1.length;
			vectorData.fixed = this1.fixed;
			{
				var this2;
				this2 = new Array(this1.length);
				vectorData.data = this2;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
			$r = vectorData;
			return $r;
		}(this)));
		clone.updateIndexData((function($this) {
			var $r;
			var this3 = $this._indices;
			var vectorData1 = new openfl.VectorData();
			vectorData1.length = this3.length;
			vectorData1.fixed = this3.fixed;
			{
				var this4;
				this4 = new Array(this3.length);
				vectorData1.data = this4;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,vectorData1.data,0,this3.length);
			$r = vectorData1;
			return $r;
		}(this)));
		clone.updateJointIndexData((function($this) {
			var $r;
			var this5 = $this._jointIndexData;
			var vectorData2 = new openfl.VectorData();
			vectorData2.length = this5.length;
			vectorData2.fixed = this5.fixed;
			{
				var this6;
				this6 = new Array(this5.length);
				vectorData2.data = this6;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,vectorData2.data,0,this5.length);
			$r = vectorData2;
			return $r;
		}(this)));
		clone.updateJointWeightsData((function($this) {
			var $r;
			var this7 = $this._jointWeightsData;
			var vectorData3 = new openfl.VectorData();
			vectorData3.length = this7.length;
			vectorData3.fixed = this7.fixed;
			{
				var this8;
				this8 = new Array(this7.length);
				vectorData3.data = this8;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,vectorData3.data,0,this7.length);
			$r = vectorData3;
			return $r;
		}(this)));
		clone._autoDeriveVertexNormals = this._autoDeriveVertexNormals;
		clone._autoDeriveVertexTangents = this._autoDeriveVertexTangents;
		clone._numCondensedJoints = this._numCondensedJoints;
		clone._condensedIndexLookUp = this._condensedIndexLookUp;
		clone._condensedJointIndexData = this._condensedJointIndexData;
		return clone;
	}
	,dispose: function() {
		away3d.core.base.CompactSubGeometry.prototype.dispose.call(this);
		this.disposeVertexBuffers(this._jointWeightsBuffer);
		this.disposeVertexBuffers(this._jointIndexBuffer);
	}
	,condenseIndexData: function() {
		var len = this._jointIndexData.length;
		var oldIndex;
		var newIndex = 0;
		var dic = new haxe.ds.IntMap();
		this._condensedJointIndexData = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
			var $r;
			var this1;
			this1 = new openfl.VectorData();
			{
				var this2;
				this2 = new Array(0);
				this1.data = this2;
			}
			this1.length = 0;
			this1.fixed = false;
			$r = this1;
			return $r;
		}(this))),len,0);
		var this3;
		this3 = new openfl.VectorData();
		var this4;
		this4 = new Array(0);
		this3.data = this4;
		this3.length = 0;
		this3.fixed = false;
		this._condensedIndexLookUp = this3;
		var i = 0;
		while(i < len) {
			oldIndex = this._jointIndexData.data[i];
			if(!dic.exists(oldIndex)) {
				dic.set(oldIndex,newIndex);
				var this5 = this._condensedIndexLookUp;
				var key = newIndex++;
				if(!this5.fixed) {
					if(key >= this5.length) this5.length = key + 1;
					if(this5.data.length < this5.length) {
						var data;
						var this6;
						this6 = new Array(this5.data.length + 10);
						data = this6;
						haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data,0,this5.data.length);
						this5.data = data;
					}
				}
				this5.data[key] = oldIndex;
				var this7 = this._condensedIndexLookUp;
				var key1 = newIndex++;
				if(!this7.fixed) {
					if(key1 >= this7.length) this7.length = key1 + 1;
					if(this7.data.length < this7.length) {
						var data1;
						var this8;
						this8 = new Array(this7.data.length + 10);
						data1 = this8;
						haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data1,0,this7.data.length);
						this7.data = data1;
					}
				}
				this7.data[key1] = oldIndex + 1;
				var this9 = this._condensedIndexLookUp;
				var key2 = newIndex++;
				if(!this9.fixed) {
					if(key2 >= this9.length) this9.length = key2 + 1;
					if(this9.data.length < this9.length) {
						var data2;
						var this10;
						this10 = new Array(this9.data.length + 10);
						data2 = this10;
						haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data2,0,this9.data.length);
						this9.data = data2;
					}
				}
				this9.data[key2] = oldIndex + 2;
			}
			var this11 = this._condensedJointIndexData;
			var value = dic.get(oldIndex);
			if(!this11.fixed) {
				if(i >= this11.length) this11.length = i + 1;
				if(this11.data.length < this11.length) {
					var data3;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data3 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data3,0,this11.data.length);
					this11.data = data3;
				}
			}
			this11.data[i] = value;
			++i;
		}
		this._numCondensedJoints = newIndex / 3 | 0;
		this.invalidateBuffers(this._jointIndicesInvalid);
	}
	,get_jointWeightsData: function() {
		return this._jointWeightsData;
	}
	,updateJointWeightsData: function(value) {
		this._numCondensedJoints = 0;
		this._condensedIndexLookUp = null;
		this._condensedJointIndexData = null;
		this._jointWeightsData = value;
		this.invalidateBuffers(this._jointWeightsInvalid);
	}
	,get_jointIndexData: function() {
		return this._jointIndexData;
	}
	,updateJointIndexData: function(value) {
		this._jointIndexData = value;
		this.invalidateBuffers(this._jointIndicesInvalid);
	}
	,__class__: away3d.core.base.SkinnedSubGeometry
	,__properties__: $extend(away3d.core.base.CompactSubGeometry.prototype.__properties__,{get_jointIndexData:"get_jointIndexData",get_jointWeightsData:"get_jointWeightsData",get_animatedData:"get_animatedData",get_numCondensedJoints:"get_numCondensedJoints",get_condensedIndexLookUp:"get_condensedIndexLookUp"})
});
away3d.core.base.SubGeometry = function() {
	away3d.core.base.SubGeometryBase.call(this);
	this._verticesInvalid = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(0);
			this1.data = this2;
		}
		this1.length = 0;
		this1.fixed = false;
		$r = this1;
		return $r;
	}(this))),8);
	this._uvsInvalid = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this3;
		this3 = new openfl.VectorData();
		{
			var this4;
			this4 = new Array(0);
			this3.data = this4;
		}
		this3.length = 0;
		this3.fixed = false;
		$r = this3;
		return $r;
	}(this))),8);
	this._secondaryUvsInvalid = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this5;
		this5 = new openfl.VectorData();
		{
			var this6;
			this6 = new Array(0);
			this5.data = this6;
		}
		this5.length = 0;
		this5.fixed = false;
		$r = this5;
		return $r;
	}(this))),8);
	this._normalsInvalid = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this7;
		this7 = new openfl.VectorData();
		{
			var this8;
			this8 = new Array(0);
			this7.data = this8;
		}
		this7.length = 0;
		this7.fixed = false;
		$r = this7;
		return $r;
	}(this))),8);
	this._tangentsInvalid = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this9;
		this9 = new openfl.VectorData();
		{
			var this10;
			this10 = new Array(0);
			this9.data = this10;
		}
		this9.length = 0;
		this9.fixed = false;
		$r = this9;
		return $r;
	}(this))),8);
	var this11;
	this11 = new openfl.VectorData();
	var this12;
	this12 = new Array(8);
	this11.data = this12;
	this11.length = 8;
	this11.fixed = false;
	this._vertexBuffer = this11;
	var this13;
	this13 = new openfl.VectorData();
	var this14;
	this14 = new Array(8);
	this13.data = this14;
	this13.length = 8;
	this13.fixed = false;
	this._uvBuffer = this13;
	var this15;
	this15 = new openfl.VectorData();
	var this16;
	this16 = new Array(8);
	this15.data = this16;
	this15.length = 8;
	this15.fixed = false;
	this._secondaryUvBuffer = this15;
	var this17;
	this17 = new openfl.VectorData();
	var this18;
	this18 = new Array(8);
	this17.data = this18;
	this17.length = 8;
	this17.fixed = false;
	this._vertexNormalBuffer = this17;
	var this19;
	this19 = new openfl.VectorData();
	var this20;
	this20 = new Array(8);
	this19.data = this20;
	this19.length = 8;
	this19.fixed = false;
	this._vertexTangentBuffer = this19;
	var this21;
	this21 = new openfl.VectorData();
	var this22;
	this22 = new Array(8);
	this21.data = this22;
	this21.length = 8;
	this21.fixed = false;
	this._vertexBufferContext = this21;
	var this23;
	this23 = new openfl.VectorData();
	var this24;
	this24 = new Array(8);
	this23.data = this24;
	this23.length = 8;
	this23.fixed = false;
	this._uvBufferContext = this23;
	var this25;
	this25 = new openfl.VectorData();
	var this26;
	this26 = new Array(8);
	this25.data = this26;
	this25.length = 8;
	this25.fixed = false;
	this._secondaryUvBufferContext = this25;
	var this27;
	this27 = new openfl.VectorData();
	var this28;
	this28 = new Array(8);
	this27.data = this28;
	this27.length = 8;
	this27.fixed = false;
	this._vertexNormalBufferContext = this27;
	var this29;
	this29 = new openfl.VectorData();
	var this30;
	this30 = new Array(8);
	this29.data = this30;
	this29.length = 8;
	this29.fixed = false;
	this._vertexTangentBufferContext = this29;
};
$hxClasses["away3d.core.base.SubGeometry"] = away3d.core.base.SubGeometry;
away3d.core.base.SubGeometry.__name__ = ["away3d","core","base","SubGeometry"];
away3d.core.base.SubGeometry.__interfaces__ = [away3d.core.base.ISubGeometry];
away3d.core.base.SubGeometry.__super__ = away3d.core.base.SubGeometryBase;
away3d.core.base.SubGeometry.prototype = $extend(away3d.core.base.SubGeometryBase.prototype,{
	_uvs: null
	,_secondaryUvs: null
	,_vertexNormals: null
	,_vertexTangents: null
	,_verticesInvalid: null
	,_uvsInvalid: null
	,_secondaryUvsInvalid: null
	,_normalsInvalid: null
	,_tangentsInvalid: null
	,_vertexBuffer: null
	,_uvBuffer: null
	,_secondaryUvBuffer: null
	,_vertexNormalBuffer: null
	,_vertexTangentBuffer: null
	,_vertexBufferContext: null
	,_uvBufferContext: null
	,_secondaryUvBufferContext: null
	,_vertexNormalBufferContext: null
	,_vertexTangentBufferContext: null
	,_numVertices: null
	,get_numVertices: function() {
		return this._numVertices;
	}
	,activateVertexBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._vertexBuffer.data[contextIndex] == null || this._vertexBufferContext.data[contextIndex] != context) {
			var this1 = this._vertexBuffer;
			var value = stage3DProxy.createVertexBuffer(this._numVertices,3);
			if(!this1.fixed) {
				if(contextIndex >= this1.length) this1.length = contextIndex + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[contextIndex] = value;
			var this3 = this._vertexBufferContext;
			if(!this3.fixed) {
				if(contextIndex >= this3.length) this3.length = contextIndex + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[contextIndex] = context;
			var this5 = this._verticesInvalid;
			if(!this5.fixed) {
				if(contextIndex >= this5.length) this5.length = contextIndex + 1;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[contextIndex] = true;
		}
		if(this._verticesInvalid.data[contextIndex]) {
			this._vertexBuffer.data[contextIndex].uploadFromVector(this._vertexData,0,this._numVertices);
			var this7 = this._verticesInvalid;
			if(!this7.fixed) {
				if(contextIndex >= this7.length) this7.length = contextIndex + 1;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[contextIndex] = false;
		}
		context.setVertexBufferAt(index,this._vertexBuffer.data[contextIndex],0,openfl.display3D.Context3DVertexBufferFormat.FLOAT_3);
	}
	,activateUVBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._autoGenerateUVs && this._uvsDirty) this._uvs = this.updateDummyUVs(this._uvs);
		if(this._uvBuffer.data[contextIndex] == null || this._uvBufferContext.data[contextIndex] != context) {
			var this1 = this._uvBuffer;
			var value = stage3DProxy.createVertexBuffer(this._numVertices,2);
			if(!this1.fixed) {
				if(contextIndex >= this1.length) this1.length = contextIndex + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[contextIndex] = value;
			var this3 = this._uvBufferContext;
			if(!this3.fixed) {
				if(contextIndex >= this3.length) this3.length = contextIndex + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[contextIndex] = context;
			var this5 = this._uvsInvalid;
			if(!this5.fixed) {
				if(contextIndex >= this5.length) this5.length = contextIndex + 1;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[contextIndex] = true;
		}
		if(this._uvsInvalid.data[contextIndex]) {
			this._uvBuffer.data[contextIndex].uploadFromVector(this._uvs,0,this._numVertices);
			var this7 = this._uvsInvalid;
			if(!this7.fixed) {
				if(contextIndex >= this7.length) this7.length = contextIndex + 1;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[contextIndex] = false;
		}
		context.setVertexBufferAt(index,this._uvBuffer.data[contextIndex],0,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
	}
	,activateSecondaryUVBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._secondaryUvBuffer.data[contextIndex] == null || this._secondaryUvBufferContext.data[contextIndex] != context) {
			var this1 = this._secondaryUvBuffer;
			var value = stage3DProxy.createVertexBuffer(this._numVertices,2);
			if(!this1.fixed) {
				if(contextIndex >= this1.length) this1.length = contextIndex + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[contextIndex] = value;
			var this3 = this._secondaryUvBufferContext;
			if(!this3.fixed) {
				if(contextIndex >= this3.length) this3.length = contextIndex + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[contextIndex] = context;
			var this5 = this._secondaryUvsInvalid;
			if(!this5.fixed) {
				if(contextIndex >= this5.length) this5.length = contextIndex + 1;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[contextIndex] = true;
		}
		if(this._secondaryUvsInvalid.data[contextIndex]) {
			this._secondaryUvBuffer.data[contextIndex].uploadFromVector(this._secondaryUvs,0,this._numVertices);
			var this7 = this._secondaryUvsInvalid;
			if(!this7.fixed) {
				if(contextIndex >= this7.length) this7.length = contextIndex + 1;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[contextIndex] = false;
		}
		context.setVertexBufferAt(index,this._secondaryUvBuffer.data[contextIndex],0,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
	}
	,activateVertexNormalBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._autoDeriveVertexNormals && this._vertexNormalsDirty) this._vertexNormals = this.updateVertexNormals(this._vertexNormals);
		if(this._vertexNormalBuffer.data[contextIndex] == null || this._vertexNormalBufferContext.data[contextIndex] != context) {
			var this1 = this._vertexNormalBuffer;
			var value = stage3DProxy.createVertexBuffer(this._numVertices,3);
			if(!this1.fixed) {
				if(contextIndex >= this1.length) this1.length = contextIndex + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[contextIndex] = value;
			var this3 = this._vertexNormalBufferContext;
			if(!this3.fixed) {
				if(contextIndex >= this3.length) this3.length = contextIndex + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[contextIndex] = context;
			var this5 = this._normalsInvalid;
			if(!this5.fixed) {
				if(contextIndex >= this5.length) this5.length = contextIndex + 1;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[contextIndex] = true;
		}
		if(this._normalsInvalid.data[contextIndex]) {
			this._vertexNormalBuffer.data[contextIndex].uploadFromVector(this._vertexNormals,0,this._numVertices);
			var this7 = this._normalsInvalid;
			if(!this7.fixed) {
				if(contextIndex >= this7.length) this7.length = contextIndex + 1;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[contextIndex] = false;
		}
		context.setVertexBufferAt(index,this._vertexNormalBuffer.data[contextIndex],0,openfl.display3D.Context3DVertexBufferFormat.FLOAT_3);
	}
	,activateVertexTangentBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._vertexTangentsDirty) this._vertexTangents = this.updateVertexTangents(this._vertexTangents);
		if(this._vertexTangentBuffer.data[contextIndex] == null || this._vertexTangentBufferContext.data[contextIndex] != context) {
			var this1 = this._vertexTangentBuffer;
			var value = stage3DProxy.createVertexBuffer(this._numVertices,3);
			if(!this1.fixed) {
				if(contextIndex >= this1.length) this1.length = contextIndex + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[contextIndex] = value;
			var this3 = this._vertexTangentBufferContext;
			if(!this3.fixed) {
				if(contextIndex >= this3.length) this3.length = contextIndex + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[contextIndex] = context;
			var this5 = this._tangentsInvalid;
			if(!this5.fixed) {
				if(contextIndex >= this5.length) this5.length = contextIndex + 1;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[contextIndex] = true;
		}
		if(this._tangentsInvalid.data[contextIndex]) {
			this._vertexTangentBuffer.data[contextIndex].uploadFromVector(this._vertexTangents,0,this._numVertices);
			var this7 = this._tangentsInvalid;
			if(!this7.fixed) {
				if(contextIndex >= this7.length) this7.length = contextIndex + 1;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[contextIndex] = false;
		}
		context.setVertexBufferAt(index,this._vertexTangentBuffer.data[contextIndex],0,openfl.display3D.Context3DVertexBufferFormat.FLOAT_3);
	}
	,applyTransformation: function(transform) {
		away3d.core.base.SubGeometryBase.prototype.applyTransformation.call(this,transform);
		this.invalidateBuffers(this._verticesInvalid);
		this.invalidateBuffers(this._normalsInvalid);
		this.invalidateBuffers(this._tangentsInvalid);
	}
	,clone: function() {
		var clone = new away3d.core.base.SubGeometry();
		clone.updateVertexData((function($this) {
			var $r;
			var this1 = $this._vertexData;
			var vectorData = new openfl.VectorData();
			vectorData.length = this1.length;
			vectorData.fixed = this1.fixed;
			{
				var this2;
				this2 = new Array(this1.length);
				vectorData.data = this2;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
			$r = vectorData;
			return $r;
		}(this)));
		clone.updateUVData((function($this) {
			var $r;
			var this3 = $this._uvs;
			var vectorData1 = new openfl.VectorData();
			vectorData1.length = this3.length;
			vectorData1.fixed = this3.fixed;
			{
				var this4;
				this4 = new Array(this3.length);
				vectorData1.data = this4;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,vectorData1.data,0,this3.length);
			$r = vectorData1;
			return $r;
		}(this)));
		clone.updateIndexData((function($this) {
			var $r;
			var this5 = $this._indices;
			var vectorData2 = new openfl.VectorData();
			vectorData2.length = this5.length;
			vectorData2.fixed = this5.fixed;
			{
				var this6;
				this6 = new Array(this5.length);
				vectorData2.data = this6;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,vectorData2.data,0,this5.length);
			$r = vectorData2;
			return $r;
		}(this)));
		if(this._secondaryUvs != null) clone.updateSecondaryUVData((function($this) {
			var $r;
			var this7 = $this._secondaryUvs;
			var vectorData3 = new openfl.VectorData();
			vectorData3.length = this7.length;
			vectorData3.fixed = this7.fixed;
			{
				var this8;
				this8 = new Array(this7.length);
				vectorData3.data = this8;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,vectorData3.data,0,this7.length);
			$r = vectorData3;
			return $r;
		}(this)));
		if(!this._autoDeriveVertexNormals) clone.updateVertexNormalData((function($this) {
			var $r;
			var this9 = $this._vertexNormals;
			var vectorData4 = new openfl.VectorData();
			vectorData4.length = this9.length;
			vectorData4.fixed = this9.fixed;
			{
				var this10;
				this10 = new Array(this9.length);
				vectorData4.data = this10;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,vectorData4.data,0,this9.length);
			$r = vectorData4;
			return $r;
		}(this)));
		if(!this._autoDeriveVertexTangents) clone.updateVertexTangentData((function($this) {
			var $r;
			var this11 = $this._vertexTangents;
			var vectorData5 = new openfl.VectorData();
			vectorData5.length = this11.length;
			vectorData5.fixed = this11.fixed;
			{
				var this12;
				this12 = new Array(this11.length);
				vectorData5.data = this12;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,vectorData5.data,0,this11.length);
			$r = vectorData5;
			return $r;
		}(this)));
		return clone;
	}
	,scale: function(scale) {
		away3d.core.base.SubGeometryBase.prototype.scale.call(this,scale);
		this.invalidateBuffers(this._verticesInvalid);
	}
	,scaleUV: function(scaleU,scaleV) {
		if(scaleV == null) scaleV = 1;
		if(scaleU == null) scaleU = 1;
		away3d.core.base.SubGeometryBase.prototype.scaleUV.call(this,scaleU,scaleV);
		this.invalidateBuffers(this._uvsInvalid);
	}
	,dispose: function() {
		away3d.core.base.SubGeometryBase.prototype.dispose.call(this);
		this.disposeAllVertexBuffers();
		this._vertexBuffer = null;
		this._vertexNormalBuffer = null;
		this._uvBuffer = null;
		this._secondaryUvBuffer = null;
		this._vertexTangentBuffer = null;
		this._indexBuffer = null;
		this._uvs = null;
		this._secondaryUvs = null;
		this._vertexNormals = null;
		this._vertexTangents = null;
		this._vertexBufferContext = null;
		this._uvBufferContext = null;
		this._secondaryUvBufferContext = null;
		this._vertexNormalBufferContext = null;
		this._vertexTangentBufferContext = null;
	}
	,disposeAllVertexBuffers: function() {
		this.disposeVertexBuffers(this._vertexBuffer);
		this.disposeVertexBuffers(this._vertexNormalBuffer);
		this.disposeVertexBuffers(this._uvBuffer);
		this.disposeVertexBuffers(this._secondaryUvBuffer);
		this.disposeVertexBuffers(this._vertexTangentBuffer);
	}
	,get_vertexData: function() {
		return this._vertexData;
	}
	,get_vertexPositionData: function() {
		return this._vertexData;
	}
	,updateVertexData: function(vertices) {
		if(this._autoDeriveVertexNormals) this._vertexNormalsDirty = true;
		if(this._autoDeriveVertexTangents) this._vertexTangentsDirty = true;
		this._faceNormalsDirty = true;
		this._vertexData = vertices;
		var numVertices = vertices.length / 3 | 0;
		if(numVertices != this._numVertices) this.disposeAllVertexBuffers();
		this._numVertices = numVertices;
		this.invalidateBuffers(this._verticesInvalid);
		this.invalidateBounds();
	}
	,get_UVData: function() {
		if(this._uvsDirty && this._autoGenerateUVs) this._uvs = this.updateDummyUVs(this._uvs);
		return this._uvs;
	}
	,get_secondaryUVData: function() {
		return this._secondaryUvs;
	}
	,updateUVData: function(uvs) {
		if(this._autoDeriveVertexTangents) this._vertexTangentsDirty = true;
		this._faceTangentsDirty = true;
		this._uvs = uvs;
		this.invalidateBuffers(this._uvsInvalid);
	}
	,updateSecondaryUVData: function(uvs) {
		this._secondaryUvs = uvs;
		this.invalidateBuffers(this._secondaryUvsInvalid);
	}
	,get_vertexNormalData: function() {
		if(this._autoDeriveVertexNormals && this._vertexNormalsDirty) this._vertexNormals = this.updateVertexNormals(this._vertexNormals);
		return this._vertexNormals;
	}
	,updateVertexNormalData: function(vertexNormals) {
		this._vertexNormalsDirty = false;
		this._autoDeriveVertexNormals = vertexNormals == null;
		this._vertexNormals = vertexNormals;
		this.invalidateBuffers(this._normalsInvalid);
	}
	,get_vertexTangentData: function() {
		if(this._autoDeriveVertexTangents && this._vertexTangentsDirty) this._vertexTangents = this.updateVertexTangents(this._vertexTangents);
		return this._vertexTangents;
	}
	,updateVertexTangentData: function(vertexTangents) {
		this._vertexTangentsDirty = false;
		this._autoDeriveVertexTangents = vertexTangents == null;
		this._vertexTangents = vertexTangents;
		this.invalidateBuffers(this._tangentsInvalid);
	}
	,fromVectors: function(vertices,uvs,normals,tangents) {
		this.updateVertexData(vertices);
		this.updateUVData(uvs);
		this.updateVertexNormalData(normals);
		this.updateVertexTangentData(tangents);
	}
	,updateVertexNormals: function(target) {
		this.invalidateBuffers(this._normalsInvalid);
		return away3d.core.base.SubGeometryBase.prototype.updateVertexNormals.call(this,target);
	}
	,updateVertexTangents: function(target) {
		if(this._vertexNormalsDirty) this._vertexNormals = this.updateVertexNormals(this._vertexNormals);
		this.invalidateBuffers(this._tangentsInvalid);
		return away3d.core.base.SubGeometryBase.prototype.updateVertexTangents.call(this,target);
	}
	,updateDummyUVs: function(target) {
		this.invalidateBuffers(this._uvsInvalid);
		return away3d.core.base.SubGeometryBase.prototype.updateDummyUVs.call(this,target);
	}
	,disposeForStage3D: function(stage3DProxy) {
		var index = stage3DProxy._stage3DIndex;
		if(this._vertexBuffer.data[index] != null) {
			away3d.core.managers.Stage3DProxy.disposeVertexBuffer(this._vertexBuffer.data[index]);
			var this1 = this._vertexBuffer;
			if(!this1.fixed) {
				if(index >= this1.length) this1.length = index + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[index] = null;
		}
		if(this._uvBuffer.data[index] != null) {
			away3d.core.managers.Stage3DProxy.disposeVertexBuffer(this._uvBuffer.data[index]);
			var this3 = this._uvBuffer;
			if(!this3.fixed) {
				if(index >= this3.length) this3.length = index + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[index] = null;
		}
		if(this._secondaryUvBuffer.data[index] != null) {
			away3d.core.managers.Stage3DProxy.disposeVertexBuffer(this._secondaryUvBuffer.data[index]);
			var this5 = this._secondaryUvBuffer;
			if(!this5.fixed) {
				if(index >= this5.length) this5.length = index + 1;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[index] = null;
		}
		if(this._vertexNormalBuffer.data[index] != null) {
			away3d.core.managers.Stage3DProxy.disposeVertexBuffer(this._vertexNormalBuffer.data[index]);
			var this7 = this._vertexNormalBuffer;
			if(!this7.fixed) {
				if(index >= this7.length) this7.length = index + 1;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[index] = null;
		}
		if(this._vertexTangentBuffer.data[index] != null) {
			away3d.core.managers.Stage3DProxy.disposeVertexBuffer(this._vertexTangentBuffer.data[index]);
			var this9 = this._vertexTangentBuffer;
			if(!this9.fixed) {
				if(index >= this9.length) this9.length = index + 1;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[index] = null;
		}
		if(this._indexBuffer.data[index] != null) away3d.core.managers.Stage3DProxy.disposeIndexBuffer(this._indexBuffer.data[index]);
	}
	,get_vertexStride: function() {
		return 3;
	}
	,get_vertexTangentStride: function() {
		return 3;
	}
	,get_vertexNormalStride: function() {
		return 3;
	}
	,get_UVStride: function() {
		return 2;
	}
	,get_secondaryUVStride: function() {
		return 2;
	}
	,get_vertexOffset: function() {
		return 0;
	}
	,get_vertexNormalOffset: function() {
		return 0;
	}
	,get_vertexTangentOffset: function() {
		return 0;
	}
	,get_UVOffset: function() {
		return 0;
	}
	,get_secondaryUVOffset: function() {
		return 0;
	}
	,cloneWithSeperateBuffers: function() {
		return js.Boot.__cast(this.clone() , away3d.core.base.SubGeometry);
	}
	,__class__: away3d.core.base.SubGeometry
	,__properties__: $extend(away3d.core.base.SubGeometryBase.prototype.__properties__,{get_secondaryUVOffset:"get_secondaryUVOffset",get_secondaryUVStride:"get_secondaryUVStride",get_secondaryUVData:"get_secondaryUVData",get_numVertices:"get_numVertices"})
});
away3d.core.base.SubMesh = function(subGeometry,parentMesh,material) {
	this._uvRotation = 0;
	this._scaleU = 1;
	this._scaleV = 1;
	this._offsetU = 0;
	this._offsetV = 0;
	this._parentMesh = parentMesh;
	this._subGeometry = subGeometry;
	this.set_material(material);
};
$hxClasses["away3d.core.base.SubMesh"] = away3d.core.base.SubMesh;
away3d.core.base.SubMesh.__name__ = ["away3d","core","base","SubMesh"];
away3d.core.base.SubMesh.__interfaces__ = [away3d.core.base.IRenderable];
away3d.core.base.SubMesh.prototype = {
	_material: null
	,_parentMesh: null
	,_subGeometry: null
	,_index: null
	,_uvTransform: null
	,_uvTransformDirty: null
	,_uvRotation: null
	,_scaleU: null
	,_scaleV: null
	,_offsetU: null
	,_offsetV: null
	,animationSubGeometry: null
	,animatorSubGeometry: null
	,get_shaderPickingDetails: function() {
		return this.get_sourceEntity().get_shaderPickingDetails();
	}
	,get_offsetU: function() {
		return this._offsetU;
	}
	,set_offsetU: function(value) {
		if(value == this._offsetU) return value;
		this._offsetU = value;
		this._uvTransformDirty = true;
		return value;
	}
	,get_offsetV: function() {
		return this._offsetV;
	}
	,set_offsetV: function(value) {
		if(value == this._offsetV) return value;
		this._offsetV = value;
		this._uvTransformDirty = true;
		return value;
	}
	,get_scaleU: function() {
		return this._scaleU;
	}
	,set_scaleU: function(value) {
		if(value == this._scaleU) return value;
		this._scaleU = value;
		this._uvTransformDirty = true;
		return value;
	}
	,get_scaleV: function() {
		return this._scaleV;
	}
	,set_scaleV: function(value) {
		if(value == this._scaleV) return value;
		this._scaleV = value;
		this._uvTransformDirty = true;
		return value;
	}
	,get_uvRotation: function() {
		return this._uvRotation;
	}
	,set_uvRotation: function(value) {
		if(value == this._uvRotation) return value;
		this._uvRotation = value;
		this._uvTransformDirty = true;
		return value;
	}
	,get_sourceEntity: function() {
		return this._parentMesh;
	}
	,get_subGeometry: function() {
		return this._subGeometry;
	}
	,set_subGeometry: function(value) {
		this._subGeometry = value;
		return value;
	}
	,get_material: function() {
		if(this._material != null) return this._material;
		return this._parentMesh.get_material();
	}
	,set_material: function(value) {
		if(this._material != null) this._material.removeOwner(this);
		this._material = value;
		if(this._material != null) this._material.addOwner(this);
		return value;
	}
	,get_sceneTransform: function() {
		return this._parentMesh.get_sceneTransform();
	}
	,get_inverseSceneTransform: function() {
		return this._parentMesh.get_inverseSceneTransform();
	}
	,activateVertexBuffer: function(index,stage3DProxy) {
		this._subGeometry.activateVertexBuffer(index,stage3DProxy);
	}
	,activateVertexNormalBuffer: function(index,stage3DProxy) {
		this._subGeometry.activateVertexNormalBuffer(index,stage3DProxy);
	}
	,activateVertexTangentBuffer: function(index,stage3DProxy) {
		this._subGeometry.activateVertexTangentBuffer(index,stage3DProxy);
	}
	,activateUVBuffer: function(index,stage3DProxy) {
		this._subGeometry.activateUVBuffer(index,stage3DProxy);
	}
	,activateSecondaryUVBuffer: function(index,stage3DProxy) {
		this._subGeometry.activateSecondaryUVBuffer(index,stage3DProxy);
	}
	,getIndexBuffer: function(stage3DProxy) {
		return this._subGeometry.getIndexBuffer(stage3DProxy);
	}
	,get_numTriangles: function() {
		return this._subGeometry.get_numTriangles();
	}
	,get_animator: function() {
		return this._parentMesh.get_animator();
	}
	,get_mouseEnabled: function() {
		return this._parentMesh.get_mouseEnabled() || this._parentMesh._ancestorsAllowMouseEnabled;
	}
	,get_castsShadows: function() {
		return this._parentMesh.get_castsShadows();
	}
	,get_parentMesh: function() {
		return this._parentMesh;
	}
	,set_parentMesh: function(value) {
		this._parentMesh = value;
		return value;
	}
	,get_uvTransform: function() {
		if(this._uvTransformDirty) this.updateUVTransform();
		return this._uvTransform;
	}
	,updateUVTransform: function() {
		if(this._uvTransform == null) this._uvTransform = new openfl.geom.Matrix();
		this._uvTransform.identity();
		if(this._uvRotation != 0) this._uvTransform.rotate(this._uvRotation);
		if(this._scaleU != 1 || this._scaleV != 1) this._uvTransform.scale(this._scaleU,this._scaleV);
		this._uvTransform.translate(this._offsetU,this._offsetV);
		this._uvTransformDirty = false;
	}
	,dispose: function() {
		this.set_material(null);
	}
	,get_vertexData: function() {
		return this._subGeometry.get_vertexData();
	}
	,get_indexData: function() {
		return this._subGeometry.get_indexData();
	}
	,get_UVData: function() {
		return this._subGeometry.get_UVData();
	}
	,get_bounds: function() {
		return this._parentMesh.get_bounds();
	}
	,get_visible: function() {
		return this._parentMesh.get_visible();
	}
	,get_numVertices: function() {
		return this._subGeometry.get_numVertices();
	}
	,get_vertexStride: function() {
		return this._subGeometry.get_vertexStride();
	}
	,get_UVStride: function() {
		return this._subGeometry.get_UVStride();
	}
	,get_vertexNormalData: function() {
		return this._subGeometry.get_vertexNormalData();
	}
	,get_vertexTangentData: function() {
		return this._subGeometry.get_vertexTangentData();
	}
	,get_UVOffset: function() {
		return this._subGeometry.get_UVOffset();
	}
	,get_vertexOffset: function() {
		return this._subGeometry.get_vertexOffset();
	}
	,get_vertexNormalOffset: function() {
		return this._subGeometry.get_vertexNormalOffset();
	}
	,get_vertexTangentOffset: function() {
		return this._subGeometry.get_vertexTangentOffset();
	}
	,getRenderSceneTransform: function(camera) {
		return this._parentMesh.get_sceneTransform();
	}
	,__class__: away3d.core.base.SubMesh
	,__properties__: {get_vertexTangentOffset:"get_vertexTangentOffset",get_vertexNormalOffset:"get_vertexNormalOffset",get_vertexOffset:"get_vertexOffset",get_UVOffset:"get_UVOffset",get_vertexTangentData:"get_vertexTangentData",get_vertexNormalData:"get_vertexNormalData",get_UVStride:"get_UVStride",get_vertexStride:"get_vertexStride",get_numVertices:"get_numVertices",get_visible:"get_visible",get_bounds:"get_bounds",get_UVData:"get_UVData",get_indexData:"get_indexData",get_vertexData:"get_vertexData",get_uvTransform:"get_uvTransform",set_parentMesh:"set_parentMesh",get_parentMesh:"get_parentMesh",get_castsShadows:"get_castsShadows",get_mouseEnabled:"get_mouseEnabled",get_animator:"get_animator",get_numTriangles:"get_numTriangles",get_inverseSceneTransform:"get_inverseSceneTransform",get_sceneTransform:"get_sceneTransform",set_material:"set_material",get_material:"get_material",set_subGeometry:"set_subGeometry",get_subGeometry:"get_subGeometry",get_sourceEntity:"get_sourceEntity",set_uvRotation:"set_uvRotation",get_uvRotation:"get_uvRotation",set_scaleV:"set_scaleV",get_scaleV:"get_scaleV",set_scaleU:"set_scaleU",get_scaleU:"get_scaleU",set_offsetV:"set_offsetV",get_offsetV:"get_offsetV",set_offsetU:"set_offsetU",get_offsetU:"get_offsetU",get_shaderPickingDetails:"get_shaderPickingDetails"}
};
away3d.core.base.data = {};
away3d.core.base.data.ParticleData = function() {
};
$hxClasses["away3d.core.base.data.ParticleData"] = away3d.core.base.data.ParticleData;
away3d.core.base.data.ParticleData.__name__ = ["away3d","core","base","data","ParticleData"];
away3d.core.base.data.ParticleData.prototype = {
	particleIndex: null
	,numVertices: null
	,startVertexIndex: null
	,subGeometry: null
	,__class__: away3d.core.base.data.ParticleData
};
away3d.core.data = {};
away3d.core.data.EntityListItem = function() {
};
$hxClasses["away3d.core.data.EntityListItem"] = away3d.core.data.EntityListItem;
away3d.core.data.EntityListItem.__name__ = ["away3d","core","data","EntityListItem"];
away3d.core.data.EntityListItem.prototype = {
	entity: null
	,next: null
	,__class__: away3d.core.data.EntityListItem
};
away3d.core.data.EntityListItemPool = function() {
	this._index = 0;
	this._poolSize = 0;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this._pool = this1;
};
$hxClasses["away3d.core.data.EntityListItemPool"] = away3d.core.data.EntityListItemPool;
away3d.core.data.EntityListItemPool.__name__ = ["away3d","core","data","EntityListItemPool"];
away3d.core.data.EntityListItemPool.prototype = {
	_pool: null
	,_index: null
	,_poolSize: null
	,getItem: function() {
		var item;
		if(this._index == this._poolSize) {
			item = new away3d.core.data.EntityListItem();
			var this1 = this._pool;
			var key = this._index++;
			if(!this1.fixed) {
				if(key >= this1.length) this1.length = key + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[key] = item;
			++this._poolSize;
		} else {
			var index = this._index++;
			item = this._pool.data[index];
		}
		return item;
	}
	,freeAll: function() {
		this._index = 0;
	}
	,dispose: function() {
		var value = [];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(value.length);
		vec = this1;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = value[i];
		}
		vectorData.data = vec;
		this._pool = vectorData;
	}
	,__class__: away3d.core.data.EntityListItemPool
};
away3d.core.data.RenderableListItem = function() {
};
$hxClasses["away3d.core.data.RenderableListItem"] = away3d.core.data.RenderableListItem;
away3d.core.data.RenderableListItem.__name__ = ["away3d","core","data","RenderableListItem"];
away3d.core.data.RenderableListItem.prototype = {
	next: null
	,renderable: null
	,materialId: null
	,renderOrderId: null
	,zIndex: null
	,renderSceneTransform: null
	,cascaded: null
	,__class__: away3d.core.data.RenderableListItem
};
away3d.core.data.RenderableListItemPool = function() {
	this._index = 0;
	this._poolSize = 0;
	this._pool = new Array();
};
$hxClasses["away3d.core.data.RenderableListItemPool"] = away3d.core.data.RenderableListItemPool;
away3d.core.data.RenderableListItemPool.__name__ = ["away3d","core","data","RenderableListItemPool"];
away3d.core.data.RenderableListItemPool.prototype = {
	_pool: null
	,_index: null
	,_poolSize: null
	,getItem: function() {
		if(this._index == this._poolSize) {
			var item = new away3d.core.data.RenderableListItem();
			this._pool[this._index++] = item;
			++this._poolSize;
			return item;
		} else return this._pool[this._index++];
	}
	,freeAll: function() {
		this._index = 0;
	}
	,dispose: function() {
		this._pool = [];
	}
	,__class__: away3d.core.data.RenderableListItemPool
};
away3d.core.managers = {};
away3d.core.managers.AGALProgram3DCache = function(stage3DProxy) {
	this._stage3DProxy = stage3DProxy;
	this._program3Ds = new haxe.ds.StringMap();
	this._ids = new haxe.ds.StringMap();
	this._usages = [];
	this._keys = [];
};
$hxClasses["away3d.core.managers.AGALProgram3DCache"] = away3d.core.managers.AGALProgram3DCache;
away3d.core.managers.AGALProgram3DCache.__name__ = ["away3d","core","managers","AGALProgram3DCache"];
away3d.core.managers.AGALProgram3DCache._instances = null;
away3d.core.managers.AGALProgram3DCache.getInstance = function(stage3DProxy) {
	var index = stage3DProxy.get_stage3DIndex();
	if(away3d.core.managers.AGALProgram3DCache._instances == null) away3d.core.managers.AGALProgram3DCache._instances = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8);
	if(away3d.core.managers.AGALProgram3DCache._instances[index] == null) {
		away3d.core.managers.AGALProgram3DCache._instances[index] = new away3d.core.managers.AGALProgram3DCache(stage3DProxy);
		stage3DProxy.addEventListener(away3d.events.Stage3DEvent.CONTEXT3D_DISPOSED,away3d.core.managers.AGALProgram3DCache.onContext3DDisposed,false,0,true);
		stage3DProxy.addEventListener(away3d.events.Stage3DEvent.CONTEXT3D_CREATED,away3d.core.managers.AGALProgram3DCache.onContext3DDisposed,false,0,true);
		stage3DProxy.addEventListener(away3d.events.Stage3DEvent.CONTEXT3D_RECREATED,away3d.core.managers.AGALProgram3DCache.onContext3DDisposed,false,0,true);
	}
	return away3d.core.managers.AGALProgram3DCache._instances[index];
};
away3d.core.managers.AGALProgram3DCache.getInstanceFromIndex = function(index) {
	if(away3d.core.managers.AGALProgram3DCache._instances[index] == null) throw new openfl.errors.Error("Instance not created yet!");
	return away3d.core.managers.AGALProgram3DCache._instances[index];
};
away3d.core.managers.AGALProgram3DCache.onContext3DDisposed = function(event) {
	var stage3DProxy;
	stage3DProxy = js.Boot.__cast(event.target , away3d.core.managers.Stage3DProxy);
	var index = stage3DProxy.get_stage3DIndex();
	away3d.core.managers.AGALProgram3DCache._instances[index].dispose();
	away3d.core.managers.AGALProgram3DCache._instances[index] = null;
	stage3DProxy.removeEventListener(away3d.events.Stage3DEvent.CONTEXT3D_DISPOSED,away3d.core.managers.AGALProgram3DCache.onContext3DDisposed);
	stage3DProxy.removeEventListener(away3d.events.Stage3DEvent.CONTEXT3D_CREATED,away3d.core.managers.AGALProgram3DCache.onContext3DDisposed);
	stage3DProxy.removeEventListener(away3d.events.Stage3DEvent.CONTEXT3D_RECREATED,away3d.core.managers.AGALProgram3DCache.onContext3DDisposed);
};
away3d.core.managers.AGALProgram3DCache.prototype = {
	_stage3DProxy: null
	,_program3Ds: null
	,_ids: null
	,_usages: null
	,_keys: null
	,dispose: function() {
		var keys = this._program3Ds.keys();
		while( keys.hasNext() ) {
			var key = keys.next();
			this.destroyProgram(key);
		}
		this._keys = null;
		this._program3Ds = null;
		this._usages = null;
	}
	,setProgram3D: function(pass,vertexCode,fragmentCode) {
		var stageIndex = this._stage3DProxy.get_stage3DIndex();
		var program;
		var key = vertexCode + "---" + fragmentCode;
		if(!this._program3Ds.exists(key)) {
			this._keys[away3d.core.managers.AGALProgram3DCache._currentId] = key;
			this._usages[away3d.core.managers.AGALProgram3DCache._currentId] = 0;
			this._ids.set(key,away3d.core.managers.AGALProgram3DCache._currentId);
			++away3d.core.managers.AGALProgram3DCache._currentId;
			program = this._stage3DProxy.get_context3D().createProgram();
			var vertexByteCode = openfl.display3D._shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.VERTEX,vertexCode);
			var fragmentByteCode = openfl.display3D._shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.FRAGMENT,fragmentCode);
			program.upload(vertexByteCode,fragmentByteCode);
			this._program3Ds.set(key,program);
		}
		var oldId = pass._program3Dids[stageIndex];
		var newId = this._ids.get(key);
		if(oldId != newId) {
			if(oldId >= 0) this.freeProgram3D(oldId);
			this._usages[newId]++;
		}
		pass._program3Dids[stageIndex] = newId;
		pass._program3Ds[stageIndex] = this._program3Ds.get(key);
	}
	,freeProgram3D: function(programId) {
		this._usages[programId]--;
		if(this._usages[programId] == 0) this.destroyProgram(this._keys[programId]);
	}
	,destroyProgram: function(key) {
		this._program3Ds.get(key).dispose();
		this._program3Ds.remove(key);
		this._ids.set(key,-1);
	}
	,getKey: function(vertexCode,fragmentCode) {
		return vertexCode + "---" + fragmentCode;
	}
	,__class__: away3d.core.managers.AGALProgram3DCache
};
away3d.core.managers.AGALProgram3DCacheSingletonEnforcer = function() {
};
$hxClasses["away3d.core.managers.AGALProgram3DCacheSingletonEnforcer"] = away3d.core.managers.AGALProgram3DCacheSingletonEnforcer;
away3d.core.managers.AGALProgram3DCacheSingletonEnforcer.__name__ = ["away3d","core","managers","AGALProgram3DCacheSingletonEnforcer"];
away3d.core.managers.AGALProgram3DCacheSingletonEnforcer.prototype = {
	__class__: away3d.core.managers.AGALProgram3DCacheSingletonEnforcer
};
openfl.events.Event = function(type,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = openfl.events.EventPhase.AT_TARGET;
};
$hxClasses["openfl.events.Event"] = openfl.events.Event;
openfl.events.Event.__name__ = ["openfl","events","Event"];
openfl.events.Event.prototype = {
	bubbles: null
	,cancelable: null
	,currentTarget: null
	,eventPhase: null
	,target: null
	,type: null
	,__isCancelled: null
	,__isCancelledNow: null
	,clone: function() {
		var event = new openfl.events.Event(this.type,this.bubbles,this.cancelable);
		event.eventPhase = this.eventPhase;
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		return event;
	}
	,isDefaultPrevented: function() {
		return this.__isCancelled || this.__isCancelledNow;
	}
	,preventDefault: function() {
		this.__isCancelled = true;
	}
	,stopImmediatePropagation: function() {
		this.__isCancelled = true;
		this.__isCancelledNow = true;
	}
	,stopPropagation: function() {
		this.__isCancelled = true;
	}
	,toString: function() {
		return "[Event type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + "]";
	}
	,__class__: openfl.events.Event
};
away3d.events = {};
away3d.events.MouseEvent3D = function(type) {
	this._allowedToPropagate = true;
	openfl.events.Event.call(this,type,true,true);
};
$hxClasses["away3d.events.MouseEvent3D"] = away3d.events.MouseEvent3D;
away3d.events.MouseEvent3D.__name__ = ["away3d","events","MouseEvent3D"];
away3d.events.MouseEvent3D.__super__ = openfl.events.Event;
away3d.events.MouseEvent3D.prototype = $extend(openfl.events.Event.prototype,{
	_allowedToPropagate: null
	,_parentEvent: null
	,screenX: null
	,screenY: null
	,view: null
	,object: null
	,renderable: null
	,material: null
	,uv: null
	,index: null
	,subGeometryIndex: null
	,localPosition: null
	,localNormal: null
	,ctrlKey: null
	,altKey: null
	,shiftKey: null
	,delta: null
	,stopPropagation: function() {
		openfl.events.Event.prototype.stopPropagation.call(this);
		this._allowedToPropagate = false;
		if(this._parentEvent != null) this._parentEvent.stopPropagation();
	}
	,stopImmediatePropagation: function() {
		openfl.events.Event.prototype.stopImmediatePropagation.call(this);
		this._allowedToPropagate = false;
		if(this._parentEvent != null) this._parentEvent.stopImmediatePropagation();
	}
	,clone: function() {
		var result = new away3d.events.MouseEvent3D(this.type);
		result.screenX = this.screenX;
		result.screenY = this.screenY;
		result.view = this.view;
		result.object = this.object;
		result.renderable = this.renderable;
		result.material = this.material;
		result.uv = this.uv;
		result.localPosition = this.localPosition;
		result.localNormal = this.localNormal;
		result.index = this.index;
		result.subGeometryIndex = this.subGeometryIndex;
		result.delta = this.delta;
		result.ctrlKey = this.ctrlKey;
		result.shiftKey = this.shiftKey;
		result._parentEvent = this;
		result._allowedToPropagate = this._allowedToPropagate;
		return result;
	}
	,get_scenePosition: function() {
		if(js.Boot.__instanceof(this.object,away3d.containers.ObjectContainer3D)) return (js.Boot.__cast(this.object , away3d.containers.ObjectContainer3D)).get_sceneTransform().transformVector(this.localPosition); else return this.localPosition;
	}
	,get_sceneNormal: function() {
		if(js.Boot.__instanceof(this.object,away3d.containers.ObjectContainer3D)) {
			var sceneNormal = (js.Boot.__cast(this.object , away3d.containers.ObjectContainer3D)).get_sceneTransform().deltaTransformVector(this.localNormal);
			sceneNormal.normalize();
			return sceneNormal;
		} else return this.localNormal;
	}
	,__class__: away3d.events.MouseEvent3D
	,__properties__: {get_sceneNormal:"get_sceneNormal",get_scenePosition:"get_scenePosition"}
});
openfl.events.EventPhase = $hxClasses["openfl.events.EventPhase"] = { __ename__ : true, __constructs__ : ["CAPTURING_PHASE","AT_TARGET","BUBBLING_PHASE"] };
openfl.events.EventPhase.CAPTURING_PHASE = ["CAPTURING_PHASE",0];
openfl.events.EventPhase.CAPTURING_PHASE.toString = $estr;
openfl.events.EventPhase.CAPTURING_PHASE.__enum__ = openfl.events.EventPhase;
openfl.events.EventPhase.AT_TARGET = ["AT_TARGET",1];
openfl.events.EventPhase.AT_TARGET.toString = $estr;
openfl.events.EventPhase.AT_TARGET.__enum__ = openfl.events.EventPhase;
openfl.events.EventPhase.BUBBLING_PHASE = ["BUBBLING_PHASE",2];
openfl.events.EventPhase.BUBBLING_PHASE.toString = $estr;
openfl.events.EventPhase.BUBBLING_PHASE.__enum__ = openfl.events.EventPhase;
away3d.core.managers.Mouse3DManager = function() {
	this._updateDirty = true;
	this._nullVector = new openfl.geom.Vector3D();
	this._mouseMoveEvent = new openfl.events.MouseEvent(openfl.events.MouseEvent.MOUSE_MOVE);
	this._mousePicker = away3d.core.pick.PickingType.RAYCAST_FIRST_ENCOUNTERED;
	this._childDepth = 0;
	if(away3d.core.managers.Mouse3DManager._view3Ds == null) {
		away3d.core.managers.Mouse3DManager._view3Ds = new haxe.ds.ObjectMap();
		away3d.core.managers.Mouse3DManager._view3DLookup = new Array();
	}
};
$hxClasses["away3d.core.managers.Mouse3DManager"] = away3d.core.managers.Mouse3DManager;
away3d.core.managers.Mouse3DManager.__name__ = ["away3d","core","managers","Mouse3DManager"];
away3d.core.managers.Mouse3DManager._view3Ds = null;
away3d.core.managers.Mouse3DManager._view3DLookup = null;
away3d.core.managers.Mouse3DManager._collidingObject = null;
away3d.core.managers.Mouse3DManager._previousCollidingObject = null;
away3d.core.managers.Mouse3DManager._collidingViewObjects = null;
away3d.core.managers.Mouse3DManager.prototype = {
	_activeView: null
	,_updateDirty: null
	,_nullVector: null
	,_mouseMoveEvent: null
	,_forceMouseMove: null
	,_mousePicker: null
	,_childDepth: null
	,_collidingDownObject: null
	,_collidingUpObject: null
	,updateCollider: function(view) {
		away3d.core.managers.Mouse3DManager._previousCollidingView = away3d.core.managers.Mouse3DManager._collidingView;
		if(view != null) {
			if(view.get_stage3DProxy().get_bufferClear()) away3d.core.managers.Mouse3DManager._collidingViewObjects = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),away3d.core.managers.Mouse3DManager._viewCount);
			if(!view.get_shareContext()) {
				if(view == this._activeView && (this._forceMouseMove || this._updateDirty)) away3d.core.managers.Mouse3DManager._collidingObject = this._mousePicker.getViewCollision(view.get_mouseX(),view.get_mouseY(),view);
			} else if(view.parent.getBounds(null).contains(view.get_mouseX() + view.get_x(),view.get_mouseY() + view.get_y())) {
				if(away3d.core.managers.Mouse3DManager._collidingViewObjects == null) away3d.core.managers.Mouse3DManager._collidingViewObjects = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),away3d.core.managers.Mouse3DManager._viewCount);
				away3d.core.managers.Mouse3DManager._collidingObject = away3d.core.managers.Mouse3DManager._collidingViewObjects[away3d.core.managers.Mouse3DManager._view3Ds.h[view.__id__]] = this._mousePicker.getViewCollision(view.get_mouseX(),view.get_mouseY(),view);
			}
		}
	}
	,fireMouseEvents: function() {
		var i = 0;
		var len;
		var event;
		var dispatcher;
		if(away3d.core.managers.Mouse3DManager._collidingViewObjects != null) {
			away3d.core.managers.Mouse3DManager._collidingObject = null;
			var distance = Math.POSITIVE_INFINITY;
			var view;
			var v = away3d.core.managers.Mouse3DManager._viewCount - 1;
			while(v >= 0) {
				view = away3d.core.managers.Mouse3DManager._view3DLookup[v];
				if(away3d.core.managers.Mouse3DManager._collidingViewObjects[v] != null && (view.get_layeredView() || away3d.core.managers.Mouse3DManager._collidingViewObjects[v].rayEntryDistance < distance)) {
					distance = away3d.core.managers.Mouse3DManager._collidingViewObjects[v].rayEntryDistance;
					away3d.core.managers.Mouse3DManager._collidingObject = away3d.core.managers.Mouse3DManager._collidingViewObjects[v];
					if(view.get_layeredView()) break;
				}
				v--;
			}
		}
		if(away3d.core.managers.Mouse3DManager._collidingObject != away3d.core.managers.Mouse3DManager._previousCollidingObject) {
			if(away3d.core.managers.Mouse3DManager._previousCollidingObject != null) this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseOut,this._mouseMoveEvent,away3d.core.managers.Mouse3DManager._previousCollidingObject);
			if(away3d.core.managers.Mouse3DManager._collidingObject != null) this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseOver,this._mouseMoveEvent,away3d.core.managers.Mouse3DManager._collidingObject);
		}
		if(this._forceMouseMove && away3d.core.managers.Mouse3DManager._collidingObject != null) this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseMove,this._mouseMoveEvent,away3d.core.managers.Mouse3DManager._collidingObject);
		len = away3d.core.managers.Mouse3DManager._queuedEvents.length;
		i = 0;
		while(i < len) {
			event = away3d.core.managers.Mouse3DManager._queuedEvents[i];
			dispatcher = event.object;
			while(dispatcher != null && !dispatcher._ancestorsAllowMouseEnabled) dispatcher = dispatcher.get_parent();
			if(dispatcher != null) dispatcher.dispatchEvent(event);
			++i;
		}
		away3d.core.managers.Mouse3DManager._queuedEvents = [];
		this._updateDirty = false;
		away3d.core.managers.Mouse3DManager._previousCollidingObject = away3d.core.managers.Mouse3DManager._collidingObject;
	}
	,addViewLayer: function(view) {
		var stg = view.stage;
		if(view.get_stage3DProxy().get_mouse3DManager() == null) view.get_stage3DProxy().set_mouse3DManager(this);
		if(!this.hasKey(view)) away3d.core.managers.Mouse3DManager._view3Ds.set(view,0);
		this._childDepth = 0;
		this.traverseDisplayObjects(stg);
		away3d.core.managers.Mouse3DManager._viewCount = this._childDepth;
	}
	,enableMouseListeners: function(view) {
		view.addEventListener(openfl.events.MouseEvent.CLICK,$bind(this,this.onClick));
		view.addEventListener(openfl.events.MouseEvent.DOUBLE_CLICK,$bind(this,this.onDoubleClick));
		view.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseDown));
		view.addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.onMouseMove));
		view.addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.onMouseUp));
		view.addEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this.onMouseWheel));
		view.addEventListener(openfl.events.MouseEvent.MOUSE_OVER,$bind(this,this.onMouseOver));
		view.addEventListener(openfl.events.MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
	}
	,disableMouseListeners: function(view) {
		view.removeEventListener(openfl.events.MouseEvent.CLICK,$bind(this,this.onClick));
		view.removeEventListener(openfl.events.MouseEvent.DOUBLE_CLICK,$bind(this,this.onDoubleClick));
		view.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseDown));
		view.removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.onMouseMove));
		view.removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.onMouseUp));
		view.removeEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this.onMouseWheel));
		view.removeEventListener(openfl.events.MouseEvent.MOUSE_OVER,$bind(this,this.onMouseOver));
		view.removeEventListener(openfl.events.MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
	}
	,dispose: function() {
		this._mousePicker.dispose();
	}
	,queueDispatch: function(event,sourceEvent,collider) {
		event.ctrlKey = sourceEvent.ctrlKey;
		event.altKey = sourceEvent.altKey;
		event.shiftKey = sourceEvent.shiftKey;
		event.delta = sourceEvent.delta;
		event.screenX = sourceEvent.localX;
		event.screenY = sourceEvent.localY;
		if(collider == null) collider = away3d.core.managers.Mouse3DManager._collidingObject;
		if(collider != null) {
			event.object = collider.entity;
			event.renderable = collider.renderable;
			event.uv = collider.uv;
			if(collider.localPosition != null) event.localPosition = collider.localPosition.clone(); else event.localPosition = null;
			if(collider.localNormal != null) event.localNormal = collider.localNormal.clone(); else event.localNormal = null;
			event.index = collider.index;
			event.subGeometryIndex = collider.subGeometryIndex;
		} else {
			event.uv = null;
			event.object = null;
			event.localPosition = this._nullVector;
			event.localNormal = this._nullVector;
			event.index = 0;
			event.subGeometryIndex = 0;
		}
		away3d.core.managers.Mouse3DManager._queuedEvents.push(event);
	}
	,reThrowEvent: function(event) {
		if(this._activeView == null || this._activeView != null && !this._activeView.get_shareContext()) return;
		var keys = away3d.core.managers.Mouse3DManager._view3Ds.keys();
		while( keys.hasNext() ) {
			var v = keys.next();
			if(v != this._activeView && away3d.core.managers.Mouse3DManager._view3Ds.h[v.__id__] < away3d.core.managers.Mouse3DManager._view3Ds.h[this._activeView.__id__]) v.dispatchEvent(event);
		}
	}
	,hasKey: function(view) {
		var keys = away3d.core.managers.Mouse3DManager._view3Ds.keys();
		while( keys.hasNext() ) {
			var v = keys.next();
			if(v == view) return true;
		}
		return false;
	}
	,traverseDisplayObjects: function(container) {
	}
	,onMouseMove: function(event) {
		if(away3d.core.managers.Mouse3DManager._collidingObject != null) this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseMove,this._mouseMoveEvent = event); else this.reThrowEvent(event);
		this._updateDirty = true;
	}
	,onMouseOut: function(event) {
		this._activeView = null;
		if(away3d.core.managers.Mouse3DManager._collidingObject != null) this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseOut,event,away3d.core.managers.Mouse3DManager._collidingObject);
		this._updateDirty = true;
	}
	,onMouseOver: function(event) {
		this._activeView = js.Boot.__cast(event.currentTarget , away3d.containers.View3D);
		if(away3d.core.managers.Mouse3DManager._collidingObject != null && away3d.core.managers.Mouse3DManager._previousCollidingObject != away3d.core.managers.Mouse3DManager._collidingObject) this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseOver,event,away3d.core.managers.Mouse3DManager._collidingObject); else this.reThrowEvent(event);
		this._updateDirty = true;
	}
	,onClick: function(event) {
		if(away3d.core.managers.Mouse3DManager._collidingObject != null) this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseClick,event); else this.reThrowEvent(event);
		this._updateDirty = true;
	}
	,onDoubleClick: function(event) {
		if(away3d.core.managers.Mouse3DManager._collidingObject != null) this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseDoubleClick,event); else this.reThrowEvent(event);
		this._updateDirty = true;
	}
	,onMouseDown: function(event) {
		this._activeView = js.Boot.__cast(event.currentTarget , away3d.containers.View3D);
		this.updateCollider(this._activeView);
		if(away3d.core.managers.Mouse3DManager._collidingObject != null) {
			this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseDown,event);
			away3d.core.managers.Mouse3DManager._previousCollidingObject = away3d.core.managers.Mouse3DManager._collidingObject;
		} else this.reThrowEvent(event);
		this._updateDirty = true;
	}
	,onMouseUp: function(event) {
		if(away3d.core.managers.Mouse3DManager._collidingObject != null) {
			this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseUp,event);
			away3d.core.managers.Mouse3DManager._previousCollidingObject = away3d.core.managers.Mouse3DManager._collidingObject;
		} else this.reThrowEvent(event);
		this._updateDirty = true;
	}
	,onMouseWheel: function(event) {
		if(away3d.core.managers.Mouse3DManager._collidingObject != null) this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseWheel,event); else this.reThrowEvent(event);
		this._updateDirty = true;
	}
	,get_forceMouseMove: function() {
		return this._forceMouseMove;
	}
	,set_forceMouseMove: function(value) {
		this._forceMouseMove = value;
		return value;
	}
	,get_mousePicker: function() {
		return this._mousePicker;
	}
	,set_mousePicker: function(value) {
		this._mousePicker = value;
		return value;
	}
	,__class__: away3d.core.managers.Mouse3DManager
	,__properties__: {set_mousePicker:"set_mousePicker",get_mousePicker:"get_mousePicker",set_forceMouseMove:"set_forceMouseMove",get_forceMouseMove:"get_forceMouseMove"}
};
away3d.core.managers.RTTBufferManager = function(se,stage3DProxy) {
	this._viewWidth = -1;
	this._viewHeight = -1;
	this._textureWidth = -1;
	this._textureHeight = -1;
	this._buffersInvalid = true;
	if(se == null) throw new openfl.errors.Error("No cheating the multiton!");
	this._renderToTextureRect = new openfl.geom.Rectangle();
	this._stage3DProxy = stage3DProxy;
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["away3d.core.managers.RTTBufferManager"] = away3d.core.managers.RTTBufferManager;
away3d.core.managers.RTTBufferManager.__name__ = ["away3d","core","managers","RTTBufferManager"];
away3d.core.managers.RTTBufferManager._instances = null;
away3d.core.managers.RTTBufferManager.getInstance = function(stage3DProxy) {
	if(stage3DProxy == null) throw new openfl.errors.Error("stage3DProxy key cannot be null!");
	if(away3d.core.managers.RTTBufferManager._instances == null) away3d.core.managers.RTTBufferManager._instances = new haxe.ds.ObjectMap();
	var rttb = away3d.core.managers.RTTBufferManager._instances.h[stage3DProxy.__id__];
	if(rttb == null) {
		rttb = new away3d.core.managers.RTTBufferManager(new away3d.core.managers.SingletonEnforcer(),stage3DProxy);
		away3d.core.managers.RTTBufferManager._instances.set(stage3DProxy,rttb);
	}
	return rttb;
};
away3d.core.managers.RTTBufferManager.__super__ = openfl.events.EventDispatcher;
away3d.core.managers.RTTBufferManager.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	_renderToTextureVertexBuffer: null
	,_renderToScreenVertexBuffer: null
	,_indexBuffer: null
	,_stage3DProxy: null
	,_viewWidth: null
	,_viewHeight: null
	,_textureWidth: null
	,_textureHeight: null
	,_renderToTextureRect: null
	,_buffersInvalid: null
	,_textureRatioX: null
	,_textureRatioY: null
	,get_textureRatioX: function() {
		if(this._buffersInvalid) this.updateRTTBuffers();
		return this._textureRatioX;
	}
	,get_textureRatioY: function() {
		if(this._buffersInvalid) this.updateRTTBuffers();
		return this._textureRatioY;
	}
	,get_viewWidth: function() {
		return this._viewWidth;
	}
	,set_viewWidth: function(value) {
		if(value == this._viewWidth) return value;
		this._viewWidth = value;
		this._buffersInvalid = true;
		this._textureWidth = away3d.tools.utils.TextureUtils.getBestPowerOf2(this._viewWidth);
		if(this._textureWidth > this._viewWidth) {
			this._renderToTextureRect.x = (this._textureWidth - this._viewWidth) * .5 | 0;
			this._renderToTextureRect.width = this._viewWidth;
		} else {
			this._renderToTextureRect.x = 0;
			this._renderToTextureRect.width = this._textureWidth;
		}
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.RESIZE));
		return value;
	}
	,get_viewHeight: function() {
		return this._viewHeight;
	}
	,set_viewHeight: function(value) {
		if(value == this._viewHeight) return value;
		this._viewHeight = value;
		this._buffersInvalid = true;
		this._textureHeight = away3d.tools.utils.TextureUtils.getBestPowerOf2(this._viewHeight);
		if(this._textureHeight > this._viewHeight) {
			this._renderToTextureRect.y = (this._textureHeight - this._viewHeight) * .5 | 0;
			this._renderToTextureRect.height = this._viewHeight;
		} else {
			this._renderToTextureRect.y = 0;
			this._renderToTextureRect.height = this._textureHeight;
		}
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.RESIZE));
		return value;
	}
	,get_renderToTextureVertexBuffer: function() {
		if(this._buffersInvalid) this.updateRTTBuffers();
		return this._renderToTextureVertexBuffer;
	}
	,get_renderToScreenVertexBuffer: function() {
		if(this._buffersInvalid) this.updateRTTBuffers();
		return this._renderToScreenVertexBuffer;
	}
	,get_indexBuffer: function() {
		return this._indexBuffer;
	}
	,get_renderToTextureRect: function() {
		if(this._buffersInvalid) this.updateRTTBuffers();
		return this._renderToTextureRect;
	}
	,get_textureWidth: function() {
		return this._textureWidth;
	}
	,get_textureHeight: function() {
		return this._textureHeight;
	}
	,dispose: function() {
		away3d.core.managers.RTTBufferManager._instances.remove(this._stage3DProxy);
		if(this._indexBuffer != null) {
			away3d.core.managers.Stage3DProxy.disposeIndexBuffer(this._indexBuffer);
			away3d.core.managers.Stage3DProxy.disposeVertexBuffer(this._renderToScreenVertexBuffer);
			away3d.core.managers.Stage3DProxy.disposeVertexBuffer(this._renderToTextureVertexBuffer);
			this._renderToScreenVertexBuffer = null;
			this._renderToTextureVertexBuffer = null;
			this._indexBuffer = null;
		}
	}
	,updateRTTBuffers: function() {
		var context = this._stage3DProxy.get_context3D();
		var textureVerts;
		var screenVerts;
		var x;
		var y;
		if(this._renderToTextureVertexBuffer == null) this._renderToTextureVertexBuffer = this._stage3DProxy.createVertexBuffer(4,5);
		if(this._renderToScreenVertexBuffer == null) this._renderToScreenVertexBuffer = this._stage3DProxy.createVertexBuffer(4,5);
		if(this._indexBuffer == null) {
			this._indexBuffer = this._stage3DProxy.createIndexBuffer(6);
			var tmp_data;
			var a = [2,1,0,3,2,0];
			var vectorData = new openfl.VectorData();
			vectorData.length = a.length;
			vectorData.fixed = true;
			var vec;
			var this1;
			this1 = new Array(a.length);
			vec = this1;
			var _g1 = 0;
			var _g = a.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = a[i];
			}
			vectorData.data = vec;
			tmp_data = vectorData;
			this._indexBuffer.uploadFromVector(tmp_data,0,6);
		}
		this._textureRatioX = x = Math.min(this._viewWidth / this._textureWidth,1);
		this._textureRatioY = y = Math.min(this._viewHeight / this._textureHeight,1);
		var u1 = (1 - x) * .5;
		var u2 = (x + 1) * .5;
		var v1 = 1 - (y + 1) * .5;
		var v2 = 1 - (1 - y) * .5;
		var a1 = [-x,-y,u1,v1,0,x,-y,u2,v1,1,x,y,u2,v2,2,-x,y,u1,v2,3];
		var vectorData1 = new openfl.VectorData();
		vectorData1.length = a1.length;
		vectorData1.fixed = true;
		var vec1;
		var this2;
		this2 = new Array(a1.length);
		vec1 = this2;
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			vec1[i1] = a1[i1];
		}
		vectorData1.data = vec1;
		textureVerts = vectorData1;
		var a2 = [-1,-1,u1,v1,0,1,-1,u2,v1,1,1,1,u2,v2,2,-1,1,u1,v2,3];
		var vectorData2 = new openfl.VectorData();
		vectorData2.length = a2.length;
		vectorData2.fixed = true;
		var vec2;
		var this3;
		this3 = new Array(a2.length);
		vec2 = this3;
		var _g12 = 0;
		var _g3 = a2.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			vec2[i2] = a2[i2];
		}
		vectorData2.data = vec2;
		screenVerts = vectorData2;
		this._renderToTextureVertexBuffer.uploadFromVector(textureVerts,0,4);
		this._renderToScreenVertexBuffer.uploadFromVector(screenVerts,0,4);
		this._buffersInvalid = false;
	}
	,__class__: away3d.core.managers.RTTBufferManager
	,__properties__: {get_textureHeight:"get_textureHeight",get_textureWidth:"get_textureWidth",get_renderToTextureRect:"get_renderToTextureRect",get_indexBuffer:"get_indexBuffer",get_renderToScreenVertexBuffer:"get_renderToScreenVertexBuffer",get_renderToTextureVertexBuffer:"get_renderToTextureVertexBuffer",set_viewHeight:"set_viewHeight",get_viewHeight:"get_viewHeight",set_viewWidth:"set_viewWidth",get_viewWidth:"get_viewWidth",get_textureRatioY:"get_textureRatioY",get_textureRatioX:"get_textureRatioX"}
});
away3d.core.managers.SingletonEnforcer = function() {
};
$hxClasses["away3d.core.managers.SingletonEnforcer"] = away3d.core.managers.SingletonEnforcer;
away3d.core.managers.SingletonEnforcer.__name__ = ["away3d","core","managers","SingletonEnforcer"];
away3d.core.managers.SingletonEnforcer.prototype = {
	__class__: away3d.core.managers.SingletonEnforcer
};
away3d.core.managers.Stage3DManager = function(stage,Stage3DManagerSingletonEnforcer) {
	if(Stage3DManagerSingletonEnforcer == null) throw new openfl.errors.Error("This class is a multiton and cannot be instantiated manually. Use Stage3DManager.getInstance instead.");
	this._stage = stage;
	this.stage3DsLength = 1;
	if(away3d.core.managers.Stage3DManager._stageProxies == null) away3d.core.managers.Stage3DManager._stageProxies = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(0);
			this1.data = this2;
		}
		this1.length = 0;
		this1.fixed = false;
		$r = this1;
		return $r;
	}(this))),this.stage3DsLength);
};
$hxClasses["away3d.core.managers.Stage3DManager"] = away3d.core.managers.Stage3DManager;
away3d.core.managers.Stage3DManager.__name__ = ["away3d","core","managers","Stage3DManager"];
away3d.core.managers.Stage3DManager._instances = null;
away3d.core.managers.Stage3DManager._stageProxies = null;
away3d.core.managers.Stage3DManager.getInstance = function(stage) {
	if(away3d.core.managers.Stage3DManager._instances == null) away3d.core.managers.Stage3DManager._instances = new haxe.ds.ObjectMap();
	var manager = away3d.core.managers.Stage3DManager._instances.h[stage.__id__];
	if(manager == null) {
		manager = new away3d.core.managers.Stage3DManager(stage,new away3d.core.managers.Stage3DManagerSingletonEnforcer());
		away3d.core.managers.Stage3DManager._instances.set(stage,manager);
	}
	return manager;
};
away3d.core.managers.Stage3DManager.prototype = {
	_stage: null
	,stage3DsLength: null
	,getStage3DProxy: function(index,forceSoftware,profile) {
		if(profile == null) profile = "baseline";
		if(forceSoftware == null) forceSoftware = false;
		if(away3d.core.managers.Stage3DManager._stageProxies.data[index] == null) {
			away3d.core.managers.Stage3DManager._numStageProxies++;
			var this1 = away3d.core.managers.Stage3DManager._stageProxies;
			var value = new away3d.core.managers.Stage3DProxy(index,this._stage.stage3Ds.data[index],this,forceSoftware,profile);
			if(!this1.fixed) {
				if(index >= this1.length) this1.length = index + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[index] = value;
		}
		return away3d.core.managers.Stage3DManager._stageProxies.data[index];
	}
	,removeStage3DProxy: function(stage3DProxy) {
		away3d.core.managers.Stage3DManager._numStageProxies--;
		var this1 = away3d.core.managers.Stage3DManager._stageProxies;
		var key = stage3DProxy.get_stage3DIndex();
		if(!this1.fixed) {
			if(key >= this1.length) this1.length = key + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[key] = null;
	}
	,getFreeStage3DProxy: function(forceSoftware,profile) {
		if(profile == null) profile = "baseline";
		if(forceSoftware == null) forceSoftware = false;
		var i = 0;
		var len = this.stage3DsLength;
		while(i < len) {
			if(away3d.core.managers.Stage3DManager._stageProxies.data[i] == null) {
				this.getStage3DProxy(i,forceSoftware,profile);
				away3d.core.managers.Stage3DManager._stageProxies.data[i].set_width(this._stage.stageWidth);
				away3d.core.managers.Stage3DManager._stageProxies.data[i].set_height(this._stage.stageHeight);
				return away3d.core.managers.Stage3DManager._stageProxies.data[i];
			}
			++i;
		}
		throw new openfl.errors.Error("Too many Stage3D instances used!");
		return null;
	}
	,get_hasFreeStage3DProxy: function() {
		if((away3d.core.managers.Stage3DManager._numStageProxies | 0) < away3d.core.managers.Stage3DManager._stageProxies.length) return true; else return false;
	}
	,get_numProxySlotsFree: function() {
		return away3d.core.managers.Stage3DManager._stageProxies.length - away3d.core.managers.Stage3DManager._numStageProxies;
	}
	,get_numProxySlotsUsed: function() {
		return away3d.core.managers.Stage3DManager._numStageProxies;
	}
	,get_numProxySlotsTotal: function() {
		return away3d.core.managers.Stage3DManager._stageProxies.length;
	}
	,__class__: away3d.core.managers.Stage3DManager
	,__properties__: {get_numProxySlotsTotal:"get_numProxySlotsTotal",get_numProxySlotsUsed:"get_numProxySlotsUsed",get_numProxySlotsFree:"get_numProxySlotsFree",get_hasFreeStage3DProxy:"get_hasFreeStage3DProxy"}
};
away3d.core.managers.Stage3DManagerSingletonEnforcer = function() {
};
$hxClasses["away3d.core.managers.Stage3DManagerSingletonEnforcer"] = away3d.core.managers.Stage3DManagerSingletonEnforcer;
away3d.core.managers.Stage3DManagerSingletonEnforcer.__name__ = ["away3d","core","managers","Stage3DManagerSingletonEnforcer"];
away3d.core.managers.Stage3DManagerSingletonEnforcer.prototype = {
	__class__: away3d.core.managers.Stage3DManagerSingletonEnforcer
};
openfl.display.Shape = function() {
	openfl.display.DisplayObject.call(this);
};
$hxClasses["openfl.display.Shape"] = openfl.display.Shape;
openfl.display.Shape.__name__ = ["openfl","display","Shape"];
openfl.display.Shape.__super__ = openfl.display.DisplayObject;
openfl.display.Shape.prototype = $extend(openfl.display.DisplayObject.prototype,{
	graphics: null
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl.display.Graphics();
			this.__graphics.__owner = this;
		}
		return this.__graphics;
	}
	,__class__: openfl.display.Shape
	,__properties__: $extend(openfl.display.DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
openfl.geom = {};
openfl.geom.Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
	this.__array = new Float32Array([a,b,c,d,tx,ty,0,0,1]);
};
$hxClasses["openfl.geom.Matrix"] = openfl.geom.Matrix;
openfl.geom.Matrix.__name__ = ["openfl","geom","Matrix"];
openfl.geom.Matrix.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,__array: null
	,clone: function() {
		return new openfl.geom.Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector3D) {
		if(column > 2) throw "Column " + column + " out of bounds (2)"; else if(column == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(column == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyColumnTo: function(column,vector3D) {
		if(column > 2) throw "Column " + column + " out of bounds (2)"; else if(column == 0) {
			vector3D.x = this.a;
			vector3D.y = this.c;
			vector3D.z = 0;
		} else if(column == 1) {
			vector3D.x = this.b;
			vector3D.y = this.d;
			vector3D.z = 0;
		} else {
			vector3D.x = this.tx;
			vector3D.y = this.ty;
			vector3D.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,copyRowFrom: function(row,vector3D) {
		if(row > 2) throw "Row " + row + " out of bounds (2)"; else if(row == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(row == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyRowTo: function(row,vector3D) {
		if(row > 2) throw "Row " + row + " out of bounds (2)"; else if(row == 0) {
			vector3D.x = this.a;
			vector3D.y = this.b;
			vector3D.z = this.tx;
		} else if(row == 1) {
			vector3D.x = this.c;
			vector3D.y = this.d;
			vector3D.z = this.ty;
		} else {
			vector3D.x = 0;
			vector3D.y = 0;
			vector3D.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,deltaTransformPoint: function(point) {
		return new openfl.geom.Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,equals: function(matrix) {
		return matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c && this.d == matrix.d;
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new openfl.geom.Matrix();
		result.a = this.a * m.a + this.b * m.c;
		result.b = this.a * m.b + this.b * m.d;
		result.c = this.c * m.a + this.d * m.c;
		result.d = this.c * m.b + this.d * m.d;
		result.tx = this.tx * m.a + this.ty * m.c + m.tx;
		result.ty = this.tx * m.b + this.ty * m.d + m.ty;
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) scale = 1;
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos) {
		return new openfl.geom.Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		var m = new openfl.geom.Matrix();
		m.tx = dx;
		m.ty = dy;
		this.concat(m);
	}
	,toArray: function(transpose) {
		if(transpose == null) transpose = false;
		if(transpose) {
			this.__array[0] = this.a;
			this.__array[1] = this.b;
			this.__array[2] = 0;
			this.__array[3] = this.c;
			this.__array[4] = this.d;
			this.__array[5] = 0;
			this.__array[6] = this.tx;
			this.__array[7] = this.ty;
			this.__array[8] = 1;
		} else {
			this.__array[0] = this.a;
			this.__array[1] = this.c;
			this.__array[2] = this.tx;
			this.__array[3] = this.b;
			this.__array[4] = this.d;
			this.__array[5] = this.ty;
			this.__array[6] = 0;
			this.__array[7] = 0;
			this.__array[8] = 1;
		}
		return this.__array;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__transformX: function(pos) {
		return pos.x * this.a + pos.y * this.c + this.tx;
	}
	,__transformY: function(pos) {
		return pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__translateTransformed: function(pos) {
		this.tx = pos.x * this.a + pos.y * this.c + this.tx;
		this.ty = pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__class__: openfl.geom.Matrix
};
openfl.geom.ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) alphaOffset = 0;
	if(blueOffset == null) blueOffset = 0;
	if(greenOffset == null) greenOffset = 0;
	if(redOffset == null) redOffset = 0;
	if(alphaMultiplier == null) alphaMultiplier = 1;
	if(blueMultiplier == null) blueMultiplier = 1;
	if(greenMultiplier == null) greenMultiplier = 1;
	if(redMultiplier == null) redMultiplier = 1;
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl.geom.ColorTransform;
openfl.geom.ColorTransform.__name__ = ["openfl","geom","ColorTransform"];
openfl.geom.ColorTransform.prototype = {
	alphaMultiplier: null
	,alphaOffset: null
	,blueMultiplier: null
	,blueOffset: null
	,greenMultiplier: null
	,greenOffset: null
	,redMultiplier: null
	,redOffset: null
	,concat: function(second) {
		this.redMultiplier += second.redMultiplier;
		this.greenMultiplier += second.greenMultiplier;
		this.blueMultiplier += second.blueMultiplier;
		this.alphaMultiplier += second.alphaMultiplier;
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__equals: function(ct,skipAlphaMultiplier) {
		if(skipAlphaMultiplier == null) skipAlphaMultiplier = false;
		return ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (skipAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset && this.alphaOffset == ct.alphaOffset;
	}
	,__clone: function() {
		return new openfl.geom.ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,__toLimeColorMatrix: function() {
		return new Float32Array([this.redMultiplier,0,0,0,this.redOffset / 255,0,this.greenMultiplier,0,0,this.greenOffset / 255,0,0,this.blueMultiplier,0,this.blueOffset / 255,0,0,0,this.alphaMultiplier,this.alphaOffset / 255]);
	}
	,__class__: openfl.geom.ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
};
away3d.core.managers.Stage3DProxy = function(stage3DIndex,stage3D,stage3DManager,forceSoftware,profile) {
	if(profile == null) profile = "baseline";
	if(forceSoftware == null) forceSoftware = false;
	this._stage3DIndex = -1;
	this._stage3DIndex = stage3DIndex;
	this._stage3D = stage3D;
	this._stage3D.x = 0;
	this._stage3D.y = 0;
	this._stage3D.visible = true;
	this._stage3DManager = stage3DManager;
	this._viewPort = new openfl.geom.Rectangle();
	this._enableDepthAndStencil = true;
	openfl.events.EventDispatcher.call(this);
	this.forceSoftware = forceSoftware;
	this._profile = profile;
	if(this._stage3D.context3D == null) {
		this._stage3D.addEventListener(openfl.events.Event.CONTEXT3D_CREATE,$bind(this,this.onContext3DUpdate),false,1000,false);
		this.requestContext(forceSoftware,this._profile);
	} else this.onContext3DUpdate(null);
};
$hxClasses["away3d.core.managers.Stage3DProxy"] = away3d.core.managers.Stage3DProxy;
away3d.core.managers.Stage3DProxy.__name__ = ["away3d","core","managers","Stage3DProxy"];
away3d.core.managers.Stage3DProxy.getVertexBufferCount = function() {
	return away3d.core.managers.Stage3DProxy._vbCount;
};
away3d.core.managers.Stage3DProxy.getIndexBufferCount = function() {
	return away3d.core.managers.Stage3DProxy._ibCount;
};
away3d.core.managers.Stage3DProxy.disposeVertexBuffer = function(vb) {
	vb.dispose();
	away3d.core.managers.Stage3DProxy._vbCount--;
};
away3d.core.managers.Stage3DProxy.disposeIndexBuffer = function(ib) {
	ib.dispose();
	away3d.core.managers.Stage3DProxy._ibCount--;
};
away3d.core.managers.Stage3DProxy.uploadVertexBufferFromVector = function(vb,data,startVertex,numVertices) {
	vb.uploadFromVector(data,startVertex,numVertices);
	away3d.core.managers.Stage3DProxy._vbUploadCount++;
};
away3d.core.managers.Stage3DProxy.uploadIndexBufferFromVector = function(ib,data,startOffset,count) {
	ib.uploadFromVector(data,startOffset,count);
	away3d.core.managers.Stage3DProxy._ibUploadCount++;
};
away3d.core.managers.Stage3DProxy.__super__ = openfl.events.EventDispatcher;
away3d.core.managers.Stage3DProxy.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	_context3D: null
	,_stage3DIndex: null
	,_usesSoftwareRendering: null
	,_profile: null
	,_stage3D: null
	,_activeProgram3D: null
	,_stage3DManager: null
	,_backBufferWidth: null
	,_backBufferHeight: null
	,_antiAlias: null
	,_enableDepthAndStencil: null
	,_contextRequested: null
	,_renderTarget: null
	,_renderSurfaceSelector: null
	,_scissorRect: null
	,_color: null
	,_backBufferDirty: null
	,_viewPort: null
	,_enterFrame: null
	,_exitFrame: null
	,_viewportUpdated: null
	,_viewportDirty: null
	,_bufferClear: null
	,_mouse3DManager: null
	,_touch3DManager: null
	,_callbackMethod: null
	,notifyViewportUpdated: function() {
		if(this._viewportDirty) return;
		this._viewportDirty = true;
		if(!this.hasEventListener(away3d.events.Stage3DEvent.VIEWPORT_UPDATED)) return;
		this._viewportUpdated = new away3d.events.Stage3DEvent(away3d.events.Stage3DEvent.VIEWPORT_UPDATED);
		this.dispatchEvent(this._viewportUpdated);
	}
	,notifyEnterFrame: function() {
		if(!this.hasEventListener(openfl.events.Event.ENTER_FRAME)) return;
		if(this._enterFrame == null) this._enterFrame = new openfl.events.Event(openfl.events.Event.ENTER_FRAME);
		this.dispatchEvent(this._enterFrame);
	}
	,forceSoftware: null
	,get_profile: function() {
		return this._profile;
	}
	,dispose: function() {
		this._stage3DManager.removeStage3DProxy(this);
		this._stage3D.removeEventListener(openfl.events.Event.CONTEXT3D_CREATE,$bind(this,this.onContext3DUpdate));
		this.freeContext3D();
		this._stage3D = null;
		this._stage3DManager = null;
		this._stage3DIndex = -1;
	}
	,setRenderCallback: function(func) {
		if(this._context3D != null) {
			if(this._callbackMethod != null) this._context3D.removeRenderMethod(func);
			if(func != null) this._context3D.setRenderMethod(func);
		}
		this._callbackMethod = func;
	}
	,configureBackBuffer: function(backBufferWidth,backBufferHeight,antiAlias,enableDepthAndStencil) {
		var oldWidth = this._backBufferWidth;
		var oldHeight = this._backBufferHeight;
		this._viewPort.width = this._backBufferWidth = backBufferWidth;
		this._viewPort.height = this._backBufferHeight = backBufferHeight;
		if(oldWidth != this._backBufferWidth || oldHeight != this._backBufferHeight) this.notifyViewportUpdated();
		this._antiAlias = antiAlias;
		this._enableDepthAndStencil = enableDepthAndStencil;
		if(this._context3D != null) this._context3D.configureBackBuffer(backBufferWidth,backBufferHeight,antiAlias,enableDepthAndStencil);
	}
	,get_enableDepthAndStencil: function() {
		return this._enableDepthAndStencil;
	}
	,set_enableDepthAndStencil: function(enableDepthAndStencil) {
		this._enableDepthAndStencil = enableDepthAndStencil;
		this._backBufferDirty = true;
		return enableDepthAndStencil;
	}
	,get_renderTarget: function() {
		return this._renderTarget;
	}
	,get_renderSurfaceSelector: function() {
		return this._renderSurfaceSelector;
	}
	,setRenderTarget: function(target,enableDepthAndStencil,surfaceSelector) {
		if(surfaceSelector == null) surfaceSelector = 0;
		if(enableDepthAndStencil == null) enableDepthAndStencil = false;
		if(this._renderTarget == target && surfaceSelector == this._renderSurfaceSelector && this._enableDepthAndStencil == enableDepthAndStencil) return;
		this._renderTarget = target;
		this._renderSurfaceSelector = surfaceSelector;
		this._enableDepthAndStencil = enableDepthAndStencil;
		if(target != null) this._context3D.setRenderToTexture(target,enableDepthAndStencil,this._antiAlias,surfaceSelector); else {
			this._context3D.setRenderToBackBuffer();
			this._context3D.configureBackBuffer(this._backBufferWidth,this._backBufferHeight,this._antiAlias,this._enableDepthAndStencil);
		}
	}
	,clear: function() {
		if(this._context3D == null) return;
		if(this._backBufferDirty) {
			this.configureBackBuffer(this._backBufferWidth,this._backBufferHeight,this._antiAlias,this._enableDepthAndStencil);
			this._backBufferDirty = false;
		}
		this._context3D.clear((this._color >> 16 & 255) / 255.0,(this._color >> 8 & 255) / 255.0,(this._color & 255) / 255.0,(this._color >> 24 & 255) / 255.0);
		this._bufferClear = true;
	}
	,present: function() {
		if(this._context3D == null) return;
		this._context3D.present();
		this._activeProgram3D = null;
		if(this._mouse3DManager != null) this._mouse3DManager.fireMouseEvents();
	}
	,get_scissorRect: function() {
		return this._scissorRect;
	}
	,set_scissorRect: function(value) {
		this._scissorRect = value;
		this._context3D.setScissorRectangle(this._scissorRect);
		return value;
	}
	,get_stage3DIndex: function() {
		return this._stage3DIndex;
	}
	,get_stage3D: function() {
		return this._stage3D;
	}
	,get_context3D: function() {
		return this._context3D;
	}
	,get_driverInfo: function() {
		if(this._context3D != null) return this._context3D.driverInfo; else return null;
	}
	,get_usesSoftwareRendering: function() {
		return this._usesSoftwareRendering;
	}
	,get_x: function() {
		return this._stage3D.x;
	}
	,set_x: function(value) {
		if(this._viewPort.x == value) return value;
		this._stage3D.x = this._viewPort.x = value;
		this.notifyViewportUpdated();
		return value;
	}
	,get_y: function() {
		return this._stage3D.y;
	}
	,set_y: function(value) {
		if(this._viewPort.y == value) return value;
		this._stage3D.y = this._viewPort.y = value;
		this.notifyViewportUpdated();
		return value;
	}
	,get_width: function() {
		return this._backBufferWidth;
	}
	,set_width: function(width) {
		if(this._viewPort.width == width) return width;
		this._viewPort.width = this._backBufferWidth = width;
		this._backBufferDirty = true;
		this.notifyViewportUpdated();
		return width;
	}
	,get_height: function() {
		return this._backBufferHeight;
	}
	,set_height: function(height) {
		if(this._viewPort.height == height) return height;
		this._viewPort.height = this._backBufferHeight = height;
		this._backBufferDirty = true;
		this.notifyViewportUpdated();
		return height;
	}
	,get_antiAlias: function() {
		return this._antiAlias;
	}
	,set_antiAlias: function(antiAlias) {
		this._antiAlias = antiAlias;
		this._backBufferDirty = true;
		return antiAlias;
	}
	,get_viewPort: function() {
		this._viewportDirty = false;
		return this._viewPort;
	}
	,get_color: function() {
		return this._color;
	}
	,set_color: function(color) {
		this._color = color;
		return color;
	}
	,get_visible: function() {
		return this._stage3D.visible;
	}
	,set_visible: function(value) {
		this._stage3D.visible = value;
		return value;
	}
	,get_bufferClear: function() {
		return this._bufferClear;
	}
	,set_bufferClear: function(newBufferClear) {
		this._bufferClear = newBufferClear;
		return newBufferClear;
	}
	,get_mouse3DManager: function() {
		return this._mouse3DManager;
	}
	,set_mouse3DManager: function(value) {
		this._mouse3DManager = value;
		return value;
	}
	,get_touch3DManager: function() {
		return this._touch3DManager;
	}
	,set_touch3DManager: function(value) {
		this._touch3DManager = value;
		return value;
	}
	,freeContext3D: function() {
		if(this._context3D != null) {
			this._context3D.dispose();
			this.dispatchEvent(new away3d.events.Stage3DEvent(away3d.events.Stage3DEvent.CONTEXT3D_DISPOSED));
		}
		this._context3D = null;
	}
	,onContext3DUpdate: function(event) {
		if(this._stage3D.context3D != null) {
			var hadContext = this._context3D != null;
			this._context3D = this._stage3D.context3D;
			this._context3D.enableErrorChecking = away3d.debug.Debug.active;
			if(this._backBufferWidth > 0 && this._backBufferHeight > 0) this._context3D.configureBackBuffer(this._backBufferWidth,this._backBufferHeight,this._antiAlias,this._enableDepthAndStencil);
			this.setRenderCallback(this._callbackMethod);
			this.dispatchEvent(new away3d.events.Stage3DEvent(hadContext?away3d.events.Stage3DEvent.CONTEXT3D_RECREATED:away3d.events.Stage3DEvent.CONTEXT3D_CREATED));
		} else throw new openfl.errors.Error("Rendering context lost!");
	}
	,requestContext: function(forceSoftware,profile) {
		if(profile == null) profile = "baseline";
		if(forceSoftware == null) forceSoftware = false;
		if(!this._usesSoftwareRendering) this._usesSoftwareRendering = forceSoftware;
		this._profile = profile;
		var renderMode;
		if(forceSoftware) renderMode = openfl.display3D.Context3DRenderMode.SOFTWARE; else renderMode = openfl.display3D.Context3DRenderMode.AUTO;
		this._stage3D.requestContext3D(Std.string(renderMode));
		this._contextRequested = true;
	}
	,onEnterFrame: function(event) {
		if(this._context3D == null) return;
		this.clear();
		this.notifyEnterFrame();
		this.present();
	}
	,recoverFromDisposal: function() {
		if(this._context3D == null) return false;
		if(this._context3D.driverInfo == "Disposed") {
			this._context3D = null;
			this.dispatchEvent(new away3d.events.Stage3DEvent(away3d.events.Stage3DEvent.CONTEXT3D_DISPOSED));
			return false;
		}
		return true;
	}
	,clearDepthBuffer: function() {
		if(this._context3D == null) return;
		this._context3D.clear(0,0,0,1,1,0,256);
	}
	,createVertexBuffer: function(numVertices,data32PerVertex) {
		away3d.core.managers.Stage3DProxy._vbCount++;
		return this._context3D.createVertexBuffer(numVertices,data32PerVertex);
	}
	,createIndexBuffer: function(numIndices) {
		away3d.core.managers.Stage3DProxy._ibCount++;
		return this._context3D.createIndexBuffer(numIndices);
	}
	,__class__: away3d.core.managers.Stage3DProxy
	,__properties__: {set_touch3DManager:"set_touch3DManager",get_touch3DManager:"get_touch3DManager",set_mouse3DManager:"set_mouse3DManager",get_mouse3DManager:"get_mouse3DManager",set_bufferClear:"set_bufferClear",get_bufferClear:"get_bufferClear",set_visible:"set_visible",get_visible:"get_visible",set_color:"set_color",get_color:"get_color",get_viewPort:"get_viewPort",set_antiAlias:"set_antiAlias",get_antiAlias:"get_antiAlias",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",get_usesSoftwareRendering:"get_usesSoftwareRendering",get_driverInfo:"get_driverInfo",get_context3D:"get_context3D",get_stage3D:"get_stage3D",get_stage3DIndex:"get_stage3DIndex",set_scissorRect:"set_scissorRect",get_scissorRect:"get_scissorRect",get_renderSurfaceSelector:"get_renderSurfaceSelector",get_renderTarget:"get_renderTarget",set_enableDepthAndStencil:"set_enableDepthAndStencil",get_enableDepthAndStencil:"get_enableDepthAndStencil",get_profile:"get_profile"}
});
var haxe = {};
haxe.ds = {};
haxe.ds.IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe.ds.IntMap;
haxe.ds.IntMap.__name__ = ["haxe","ds","IntMap"];
haxe.ds.IntMap.__interfaces__ = [IMap];
haxe.ds.IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe.ds.IntMap
};
openfl.VectorData = function() {
	this.length = 0;
};
$hxClasses["openfl.VectorData"] = openfl.VectorData;
openfl.VectorData.__name__ = ["openfl","VectorData"];
openfl.VectorData.prototype = {
	data: null
	,fixed: null
	,length: null
	,__class__: openfl.VectorData
};
away3d.core.managers.Touch3DManager = function() {
	this._updateDirty = true;
	this._nullVector = new openfl.geom.Vector3D();
	this._touchMoveEvent = new openfl.events.TouchEvent("touchMove");
	this._touchPicker = away3d.core.pick.PickingType.RAYCAST_FIRST_ENCOUNTERED;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this._touchPoints = this1;
	this._touchPointFromId = new haxe.ds.IntMap();
};
$hxClasses["away3d.core.managers.Touch3DManager"] = away3d.core.managers.Touch3DManager;
away3d.core.managers.Touch3DManager.__name__ = ["away3d","core","managers","Touch3DManager"];
away3d.core.managers.Touch3DManager.prototype = {
	_updateDirty: null
	,_nullVector: null
	,_numTouchPoints: null
	,_touchPoint: null
	,_collidingObject: null
	,_previousCollidingObject: null
	,_touchPoints: null
	,_touchPointFromId: null
	,_touchMoveEvent: null
	,_forceTouchMove: null
	,_touchPicker: null
	,_view: null
	,updateCollider: function() {
		if(this._forceTouchMove || this._updateDirty) {
			var _g1 = 0;
			var _g = this._numTouchPoints;
			while(_g1 < _g) {
				var i = _g1++;
				this._touchPoint = this._touchPoints.data[i];
				this._collidingObject = this._touchPicker.getViewCollision(this._touchPoint.x,this._touchPoint.y,this._view);
				away3d.core.managers.Touch3DManager._collidingObjectFromTouchId.set(this._touchPoint.id,this._collidingObject);
			}
		}
	}
	,fireTouchEvents: function() {
		var i;
		var len;
		var event;
		var dispatcher;
		var _g1 = 0;
		var _g = this._numTouchPoints;
		while(_g1 < _g) {
			var i1 = _g1++;
			this._touchPoint = this._touchPoints.data[i1];
			this._collidingObject = away3d.core.managers.Touch3DManager._collidingObjectFromTouchId.get(this._touchPoint.id);
			this._previousCollidingObject = away3d.core.managers.Touch3DManager._previousCollidingObjectFromTouchId.get(this._touchPoint.id);
			if(this._collidingObject != this._previousCollidingObject) {
				if(this._previousCollidingObject != null) this.queueDispatch(away3d.events.TouchEvent3D.TOUCH_OUT,this._touchMoveEvent,this._previousCollidingObject,this._touchPoint);
				if(this._collidingObject != null) this.queueDispatch(away3d.events.TouchEvent3D.TOUCH_OVER,this._touchMoveEvent,this._collidingObject,this._touchPoint);
			}
			if(this._forceTouchMove && this._collidingObject != null) this.queueDispatch(away3d.events.TouchEvent3D.TOUCH_MOVE,this._touchMoveEvent,this._collidingObject,this._touchPoint);
		}
		len = away3d.core.managers.Touch3DManager._queuedEvents.length;
		var _g2 = 0;
		while(_g2 < len) {
			var i2 = _g2++;
			event = away3d.core.managers.Touch3DManager._queuedEvents.data[i2];
			dispatcher = event.object;
			while(dispatcher != null && !dispatcher._ancestorsAllowMouseEnabled) dispatcher = dispatcher.get_parent();
			if(dispatcher != null) dispatcher.dispatchEvent(event);
		}
		var value = [];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(value.length);
		vec = this1;
		var _g11 = 0;
		var _g3 = value.length;
		while(_g11 < _g3) {
			var i3 = _g11++;
			vec[i3] = value[i3];
		}
		vectorData.data = vec;
		away3d.core.managers.Touch3DManager._queuedEvents = vectorData;
		this._updateDirty = false;
		var _g12 = 0;
		var _g4 = this._numTouchPoints;
		while(_g12 < _g4) {
			var i4 = _g12++;
			this._touchPoint = this._touchPoints.data[i4];
			away3d.core.managers.Touch3DManager._previousCollidingObjectFromTouchId.set(this._touchPoint.id,away3d.core.managers.Touch3DManager._collidingObjectFromTouchId.get(this._touchPoint.id));
		}
	}
	,enableTouchListeners: function(view) {
		view.addEventListener("touchBegin",$bind(this,this.onTouchBegin));
		view.addEventListener("touchMove",$bind(this,this.onTouchMove));
		view.addEventListener("touchEnd",$bind(this,this.onTouchEnd));
	}
	,disableTouchListeners: function(view) {
		view.removeEventListener("touchBegin",$bind(this,this.onTouchBegin));
		view.removeEventListener("touchMove",$bind(this,this.onTouchMove));
		view.removeEventListener("touchEnd",$bind(this,this.onTouchEnd));
	}
	,dispose: function() {
		this._touchPicker.dispose();
		this._touchPoints = null;
		this._touchPointFromId = null;
		away3d.core.managers.Touch3DManager._collidingObjectFromTouchId = null;
		away3d.core.managers.Touch3DManager._previousCollidingObjectFromTouchId = null;
	}
	,queueDispatch: function(emitType,sourceEvent,collider,touch) {
		var event = new away3d.events.TouchEvent3D(emitType);
		event.ctrlKey = sourceEvent.ctrlKey;
		event.altKey = sourceEvent.altKey;
		event.shiftKey = sourceEvent.shiftKey;
		event.screenX = touch.x;
		event.screenY = touch.y;
		event.touchPointID = touch.id;
		if(collider != null) {
			event.object = collider.entity;
			event.renderable = collider.renderable;
			event.uv = collider.uv;
			if(collider.localPosition != null) event.localPosition = collider.localPosition.clone(); else event.localPosition = null;
			if(collider.localNormal != null) event.localNormal = collider.localNormal.clone(); else event.localNormal = null;
			event.index = collider.index;
			event.subGeometryIndex = collider.subGeometryIndex;
		} else {
			event.uv = null;
			event.object = null;
			event.localPosition = this._nullVector;
			event.localNormal = this._nullVector;
			event.index = 0;
			event.subGeometryIndex = 0;
		}
		var this1 = away3d.core.managers.Touch3DManager._queuedEvents;
		if(!this1.fixed) {
			this1.length++;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
			this1.data[this1.length - 1] = event;
		}
		this1.length;
	}
	,onTouchBegin: function(event) {
		var touch = new away3d.core.managers.TouchPoint();
		touch.id = event.touchPointID;
		touch.x = event.stageX;
		touch.y = event.stageY;
		this._numTouchPoints++;
		var this1 = this._touchPoints;
		if(!this1.fixed) {
			this1.length++;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
			this1.data[this1.length - 1] = touch;
		}
		this1.length;
		this._touchPointFromId.set(touch.id,touch);
		this.updateCollider();
		this._collidingObject = away3d.core.managers.Touch3DManager._collidingObjectFromTouchId.get(touch.id);
		if(this._collidingObject != null) this.queueDispatch(away3d.events.TouchEvent3D.TOUCH_BEGIN,event,this._collidingObject,touch);
		this._updateDirty = true;
	}
	,onTouchMove: function(event) {
		var touch = this._touchPointFromId.get(event.touchPointID);
		touch.x = event.stageX;
		touch.y = event.stageY;
		this._collidingObject = away3d.core.managers.Touch3DManager._collidingObjectFromTouchId.get(touch.id);
		if(this._collidingObject != null) this.queueDispatch(away3d.events.TouchEvent3D.TOUCH_MOVE,this._touchMoveEvent = event,this._collidingObject,touch);
		this._updateDirty = true;
	}
	,onTouchEnd: function(event) {
		var touch = this._touchPointFromId.get(event.touchPointID);
		this._collidingObject = away3d.core.managers.Touch3DManager._collidingObjectFromTouchId.get(touch.id);
		if(this._collidingObject != null) this.queueDispatch(away3d.events.TouchEvent3D.TOUCH_END,event,this._collidingObject,touch);
		this._touchPointFromId.remove(touch.id);
		this._numTouchPoints--;
		var this1 = this._touchPoints;
		var pos;
		var this2 = this._touchPoints;
		var value = -1;
		var _g1 = 0;
		var _g = this2.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this2.data[i] == touch) {
				value = i;
				break;
			}
		}
		pos = value;
		var len = 1;
		if(pos < 0) pos += this1.length;
		if(pos + len > this1.length) len = this1.length - pos;
		if(len < 0) len = 0;
		var vectorData = new openfl.VectorData();
		vectorData.length = len;
		vectorData.fixed = false;
		var this3;
		this3 = new Array(len);
		vectorData.data = this3;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos,vectorData.data,0,len);
		if(len > 0) {
			this1.length -= len;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos + len,this1.data,pos,this1.length - pos);
		}
		vectorData;
		this._updateDirty = true;
	}
	,get_forceTouchMove: function() {
		return this._forceTouchMove;
	}
	,set_forceTouchMove: function(value) {
		this._forceTouchMove = value;
		return value;
	}
	,get_touchPicker: function() {
		return this._touchPicker;
	}
	,set_touchPicker: function(value) {
		this._touchPicker = value;
		return value;
	}
	,set_view: function(value) {
		this._view = value;
		return value;
	}
	,__class__: away3d.core.managers.Touch3DManager
	,__properties__: {set_view:"set_view",set_touchPicker:"set_touchPicker",get_touchPicker:"get_touchPicker",set_forceTouchMove:"set_forceTouchMove",get_forceTouchMove:"get_forceTouchMove"}
};
away3d.core.managers.TouchPoint = function() {
};
$hxClasses["away3d.core.managers.TouchPoint"] = away3d.core.managers.TouchPoint;
away3d.core.managers.TouchPoint.__name__ = ["away3d","core","managers","TouchPoint"];
away3d.core.managers.TouchPoint.prototype = {
	id: null
	,x: null
	,y: null
	,__class__: away3d.core.managers.TouchPoint
};
away3d.core.math = {};
away3d.core.math.MathConsts = function() { };
$hxClasses["away3d.core.math.MathConsts"] = away3d.core.math.MathConsts;
away3d.core.math.MathConsts.__name__ = ["away3d","core","math","MathConsts"];
away3d.core.math.Matrix3DUtils = function() { };
$hxClasses["away3d.core.math.Matrix3DUtils"] = away3d.core.math.Matrix3DUtils;
away3d.core.math.Matrix3DUtils.__name__ = ["away3d","core","math","Matrix3DUtils"];
away3d.core.math.Matrix3DUtils.__properties__ = {get_CALCULATION_MATRIX:"get_CALCULATION_MATRIX",get_RAW_DATA_CONTAINER:"get_RAW_DATA_CONTAINER"}
away3d.core.math.Matrix3DUtils.RAW_DATA_CONTAINER = null;
away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER = function() {
	var value = [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0];
	var vectorData = new openfl.VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(value.length);
	vec = this1;
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = value[i];
	}
	vectorData.data = vec;
	return vectorData;
};
away3d.core.math.Matrix3DUtils.CALCULATION_MATRIX = null;
away3d.core.math.Matrix3DUtils.get_CALCULATION_MATRIX = function() {
	return new openfl.geom.Matrix3D();
};
away3d.core.math.Matrix3DUtils.quaternion2matrix = function(quarternion,m) {
	var x = quarternion.x;
	var y = quarternion.y;
	var z = quarternion.z;
	var w = quarternion.w;
	var xx = x * x;
	var xy = x * y;
	var xz = x * z;
	var xw = x * w;
	var yy = y * y;
	var yz = y * z;
	var yw = y * w;
	var zz = z * z;
	var zw = z * w;
	var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
	if(!raw.fixed) {
		if(0 >= raw.length) raw.length = 1;
		if(raw.data.length < raw.length) {
			var data;
			var this1;
			this1 = new Array(raw.data.length + 10);
			data = this1;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data,0,raw.data.length);
			raw.data = data;
		}
	}
	raw.data[0] = 1 - 2 * (yy + zz);
	if(!raw.fixed) {
		if(1 >= raw.length) raw.length = 2;
		if(raw.data.length < raw.length) {
			var data1;
			var this2;
			this2 = new Array(raw.data.length + 10);
			data1 = this2;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data1,0,raw.data.length);
			raw.data = data1;
		}
	}
	raw.data[1] = 2 * (xy + zw);
	if(!raw.fixed) {
		if(2 >= raw.length) raw.length = 3;
		if(raw.data.length < raw.length) {
			var data2;
			var this3;
			this3 = new Array(raw.data.length + 10);
			data2 = this3;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data2,0,raw.data.length);
			raw.data = data2;
		}
	}
	raw.data[2] = 2 * (xz - yw);
	if(!raw.fixed) {
		if(4 >= raw.length) raw.length = 5;
		if(raw.data.length < raw.length) {
			var data3;
			var this4;
			this4 = new Array(raw.data.length + 10);
			data3 = this4;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data3,0,raw.data.length);
			raw.data = data3;
		}
	}
	raw.data[4] = 2 * (xy - zw);
	if(!raw.fixed) {
		if(5 >= raw.length) raw.length = 6;
		if(raw.data.length < raw.length) {
			var data4;
			var this5;
			this5 = new Array(raw.data.length + 10);
			data4 = this5;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data4,0,raw.data.length);
			raw.data = data4;
		}
	}
	raw.data[5] = 1 - 2 * (xx + zz);
	if(!raw.fixed) {
		if(6 >= raw.length) raw.length = 7;
		if(raw.data.length < raw.length) {
			var data5;
			var this6;
			this6 = new Array(raw.data.length + 10);
			data5 = this6;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data5,0,raw.data.length);
			raw.data = data5;
		}
	}
	raw.data[6] = 2 * (yz + xw);
	if(!raw.fixed) {
		if(8 >= raw.length) raw.length = 9;
		if(raw.data.length < raw.length) {
			var data6;
			var this7;
			this7 = new Array(raw.data.length + 10);
			data6 = this7;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data6,0,raw.data.length);
			raw.data = data6;
		}
	}
	raw.data[8] = 2 * (xz + yw);
	if(!raw.fixed) {
		if(9 >= raw.length) raw.length = 10;
		if(raw.data.length < raw.length) {
			var data7;
			var this8;
			this8 = new Array(raw.data.length + 10);
			data7 = this8;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data7,0,raw.data.length);
			raw.data = data7;
		}
	}
	raw.data[9] = 2 * (yz - xw);
	if(!raw.fixed) {
		if(10 >= raw.length) raw.length = 11;
		if(raw.data.length < raw.length) {
			var data8;
			var this9;
			this9 = new Array(raw.data.length + 10);
			data8 = this9;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data8,0,raw.data.length);
			raw.data = data8;
		}
	}
	raw.data[10] = 1 - 2 * (xx + yy);
	var value;
	var value1;
	var value2;
	var value3;
	var value4;
	if(!raw.fixed) {
		if(14 >= raw.length) raw.length = 15;
		if(raw.data.length < raw.length) {
			var data9;
			var this10;
			this10 = new Array(raw.data.length + 10);
			data9 = this10;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data9,0,raw.data.length);
			raw.data = data9;
		}
	}
	value4 = raw.data[14] = 0;
	if(!raw.fixed) {
		if(13 >= raw.length) raw.length = 14;
		if(raw.data.length < raw.length) {
			var data10;
			var this11;
			this11 = new Array(raw.data.length + 10);
			data10 = this11;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data10,0,raw.data.length);
			raw.data = data10;
		}
	}
	value3 = raw.data[13] = value4;
	if(!raw.fixed) {
		if(12 >= raw.length) raw.length = 13;
		if(raw.data.length < raw.length) {
			var data11;
			var this12;
			this12 = new Array(raw.data.length + 10);
			data11 = this12;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data11,0,raw.data.length);
			raw.data = data11;
		}
	}
	value2 = raw.data[12] = value3;
	if(!raw.fixed) {
		if(11 >= raw.length) raw.length = 12;
		if(raw.data.length < raw.length) {
			var data12;
			var this13;
			this13 = new Array(raw.data.length + 10);
			data12 = this13;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data12,0,raw.data.length);
			raw.data = data12;
		}
	}
	value1 = raw.data[11] = value2;
	if(!raw.fixed) {
		if(7 >= raw.length) raw.length = 8;
		if(raw.data.length < raw.length) {
			var data13;
			var this14;
			this14 = new Array(raw.data.length + 10);
			data13 = this14;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data13,0,raw.data.length);
			raw.data = data13;
		}
	}
	value = raw.data[7] = value1;
	if(!raw.fixed) {
		if(3 >= raw.length) raw.length = 4;
		if(raw.data.length < raw.length) {
			var data14;
			var this15;
			this15 = new Array(raw.data.length + 10);
			data14 = this15;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data14,0,raw.data.length);
			raw.data = data14;
		}
	}
	raw.data[3] = value;
	if(!raw.fixed) {
		if(15 >= raw.length) raw.length = 16;
		if(raw.data.length < raw.length) {
			var data15;
			var this16;
			this16 = new Array(raw.data.length + 10);
			data15 = this16;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data15,0,raw.data.length);
			raw.data = data15;
		}
	}
	raw.data[15] = 1;
	if(m != null) {
		m.copyRawDataFrom(raw);
		return m;
	} else return new openfl.geom.Matrix3D(raw);
};
away3d.core.math.Matrix3DUtils.getForward = function(m,v) {
	if(v == null) v = new openfl.geom.Vector3D(0.0,0.0,0.0);
	m.copyColumnTo(2,v);
	v.normalize();
	return v;
};
away3d.core.math.Matrix3DUtils.getUp = function(m,v) {
	if(v == null) v = new openfl.geom.Vector3D(0.0,0.0,0.0);
	m.copyColumnTo(1,v);
	v.normalize();
	return v;
};
away3d.core.math.Matrix3DUtils.getRight = function(m,v) {
	if(v == null) v = new openfl.geom.Vector3D(0.0,0.0,0.0);
	m.copyColumnTo(0,v);
	v.normalize();
	return v;
};
away3d.core.math.Matrix3DUtils.compare = function(m1,m2) {
	var r1 = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
	var r2 = m2.rawData;
	m1.copyRawDataTo(r1);
	var i = 0;
	while(i < 16) {
		if(r1.data[i] != r2.data[i]) return false;
		++i;
	}
	return true;
};
away3d.core.math.Matrix3DUtils.lookAt = function(matrix,pos,dir,up) {
	var dirN;
	var upN;
	var lftN;
	var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
	lftN = new openfl.geom.Vector3D(dir.y * up.z - dir.z * up.y,dir.z * up.x - dir.x * up.z,dir.x * up.y - dir.y * up.x,1);
	lftN.normalize();
	upN = new openfl.geom.Vector3D(lftN.y * dir.z - lftN.z * dir.y,lftN.z * dir.x - lftN.x * dir.z,lftN.x * dir.y - lftN.y * dir.x,1);
	upN.normalize();
	dirN = new openfl.geom.Vector3D(dir.x,dir.y,dir.z,dir.w);
	dirN.normalize();
	if(!raw.fixed) {
		if(0 >= raw.length) raw.length = 1;
		if(raw.data.length < raw.length) {
			var data;
			var this1;
			this1 = new Array(raw.data.length + 10);
			data = this1;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data,0,raw.data.length);
			raw.data = data;
		}
	}
	raw.data[0] = lftN.x;
	if(!raw.fixed) {
		if(1 >= raw.length) raw.length = 2;
		if(raw.data.length < raw.length) {
			var data1;
			var this2;
			this2 = new Array(raw.data.length + 10);
			data1 = this2;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data1,0,raw.data.length);
			raw.data = data1;
		}
	}
	raw.data[1] = upN.x;
	if(!raw.fixed) {
		if(2 >= raw.length) raw.length = 3;
		if(raw.data.length < raw.length) {
			var data2;
			var this3;
			this3 = new Array(raw.data.length + 10);
			data2 = this3;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data2,0,raw.data.length);
			raw.data = data2;
		}
	}
	raw.data[2] = -dirN.x;
	if(!raw.fixed) {
		if(3 >= raw.length) raw.length = 4;
		if(raw.data.length < raw.length) {
			var data3;
			var this4;
			this4 = new Array(raw.data.length + 10);
			data3 = this4;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data3,0,raw.data.length);
			raw.data = data3;
		}
	}
	raw.data[3] = 0.0;
	if(!raw.fixed) {
		if(4 >= raw.length) raw.length = 5;
		if(raw.data.length < raw.length) {
			var data4;
			var this5;
			this5 = new Array(raw.data.length + 10);
			data4 = this5;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data4,0,raw.data.length);
			raw.data = data4;
		}
	}
	raw.data[4] = lftN.y;
	if(!raw.fixed) {
		if(5 >= raw.length) raw.length = 6;
		if(raw.data.length < raw.length) {
			var data5;
			var this6;
			this6 = new Array(raw.data.length + 10);
			data5 = this6;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data5,0,raw.data.length);
			raw.data = data5;
		}
	}
	raw.data[5] = upN.y;
	if(!raw.fixed) {
		if(6 >= raw.length) raw.length = 7;
		if(raw.data.length < raw.length) {
			var data6;
			var this7;
			this7 = new Array(raw.data.length + 10);
			data6 = this7;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data6,0,raw.data.length);
			raw.data = data6;
		}
	}
	raw.data[6] = -dirN.y;
	if(!raw.fixed) {
		if(7 >= raw.length) raw.length = 8;
		if(raw.data.length < raw.length) {
			var data7;
			var this8;
			this8 = new Array(raw.data.length + 10);
			data7 = this8;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data7,0,raw.data.length);
			raw.data = data7;
		}
	}
	raw.data[7] = 0.0;
	if(!raw.fixed) {
		if(8 >= raw.length) raw.length = 9;
		if(raw.data.length < raw.length) {
			var data8;
			var this9;
			this9 = new Array(raw.data.length + 10);
			data8 = this9;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data8,0,raw.data.length);
			raw.data = data8;
		}
	}
	raw.data[8] = lftN.z;
	if(!raw.fixed) {
		if(9 >= raw.length) raw.length = 10;
		if(raw.data.length < raw.length) {
			var data9;
			var this10;
			this10 = new Array(raw.data.length + 10);
			data9 = this10;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data9,0,raw.data.length);
			raw.data = data9;
		}
	}
	raw.data[9] = upN.z;
	if(!raw.fixed) {
		if(10 >= raw.length) raw.length = 11;
		if(raw.data.length < raw.length) {
			var data10;
			var this11;
			this11 = new Array(raw.data.length + 10);
			data10 = this11;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data10,0,raw.data.length);
			raw.data = data10;
		}
	}
	raw.data[10] = -dirN.z;
	if(!raw.fixed) {
		if(11 >= raw.length) raw.length = 12;
		if(raw.data.length < raw.length) {
			var data11;
			var this12;
			this12 = new Array(raw.data.length + 10);
			data11 = this12;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data11,0,raw.data.length);
			raw.data = data11;
		}
	}
	raw.data[11] = 0.0;
	if(!raw.fixed) {
		if(12 >= raw.length) raw.length = 13;
		if(raw.data.length < raw.length) {
			var data12;
			var this13;
			this13 = new Array(raw.data.length + 10);
			data12 = this13;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data12,0,raw.data.length);
			raw.data = data12;
		}
	}
	raw.data[12] = -(lftN.x * pos.x + lftN.y * pos.y + lftN.z * pos.z);
	if(!raw.fixed) {
		if(13 >= raw.length) raw.length = 14;
		if(raw.data.length < raw.length) {
			var data13;
			var this14;
			this14 = new Array(raw.data.length + 10);
			data13 = this14;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data13,0,raw.data.length);
			raw.data = data13;
		}
	}
	raw.data[13] = -(upN.x * pos.x + upN.y * pos.y + upN.z * pos.z);
	if(!raw.fixed) {
		if(14 >= raw.length) raw.length = 15;
		if(raw.data.length < raw.length) {
			var data14;
			var this15;
			this15 = new Array(raw.data.length + 10);
			data14 = this15;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data14,0,raw.data.length);
			raw.data = data14;
		}
	}
	raw.data[14] = dirN.x * pos.x + dirN.y * pos.y + dirN.z * pos.z;
	if(!raw.fixed) {
		if(15 >= raw.length) raw.length = 16;
		if(raw.data.length < raw.length) {
			var data15;
			var this16;
			this16 = new Array(raw.data.length + 10);
			data15 = this16;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data15,0,raw.data.length);
			raw.data = data15;
		}
	}
	raw.data[15] = 1.0;
	matrix.copyRawDataFrom(raw);
};
away3d.core.math.Matrix3DUtils.reflection = function(plane,target) {
	if(target == null) target = new openfl.geom.Matrix3D();
	var a = plane.a;
	var b = plane.b;
	var c = plane.c;
	var d = plane.d;
	var rawData = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
	var ab2 = -2 * a * b;
	var ac2 = -2 * a * c;
	var bc2 = -2 * b * c;
	if(!rawData.fixed) {
		if(0 >= rawData.length) rawData.length = 1;
		if(rawData.data.length < rawData.length) {
			var data;
			var this1;
			this1 = new Array(rawData.data.length + 10);
			data = this1;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data,0,rawData.data.length);
			rawData.data = data;
		}
	}
	rawData.data[0] = 1 - 2 * a * a;
	if(!rawData.fixed) {
		if(4 >= rawData.length) rawData.length = 5;
		if(rawData.data.length < rawData.length) {
			var data1;
			var this2;
			this2 = new Array(rawData.data.length + 10);
			data1 = this2;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data1,0,rawData.data.length);
			rawData.data = data1;
		}
	}
	rawData.data[4] = ab2;
	if(!rawData.fixed) {
		if(8 >= rawData.length) rawData.length = 9;
		if(rawData.data.length < rawData.length) {
			var data2;
			var this3;
			this3 = new Array(rawData.data.length + 10);
			data2 = this3;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data2,0,rawData.data.length);
			rawData.data = data2;
		}
	}
	rawData.data[8] = ac2;
	if(!rawData.fixed) {
		if(12 >= rawData.length) rawData.length = 13;
		if(rawData.data.length < rawData.length) {
			var data3;
			var this4;
			this4 = new Array(rawData.data.length + 10);
			data3 = this4;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data3,0,rawData.data.length);
			rawData.data = data3;
		}
	}
	rawData.data[12] = -2 * a * d;
	if(!rawData.fixed) {
		if(1 >= rawData.length) rawData.length = 2;
		if(rawData.data.length < rawData.length) {
			var data4;
			var this5;
			this5 = new Array(rawData.data.length + 10);
			data4 = this5;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data4,0,rawData.data.length);
			rawData.data = data4;
		}
	}
	rawData.data[1] = ab2;
	if(!rawData.fixed) {
		if(5 >= rawData.length) rawData.length = 6;
		if(rawData.data.length < rawData.length) {
			var data5;
			var this6;
			this6 = new Array(rawData.data.length + 10);
			data5 = this6;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data5,0,rawData.data.length);
			rawData.data = data5;
		}
	}
	rawData.data[5] = 1 - 2 * b * b;
	if(!rawData.fixed) {
		if(9 >= rawData.length) rawData.length = 10;
		if(rawData.data.length < rawData.length) {
			var data6;
			var this7;
			this7 = new Array(rawData.data.length + 10);
			data6 = this7;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data6,0,rawData.data.length);
			rawData.data = data6;
		}
	}
	rawData.data[9] = bc2;
	if(!rawData.fixed) {
		if(13 >= rawData.length) rawData.length = 14;
		if(rawData.data.length < rawData.length) {
			var data7;
			var this8;
			this8 = new Array(rawData.data.length + 10);
			data7 = this8;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data7,0,rawData.data.length);
			rawData.data = data7;
		}
	}
	rawData.data[13] = -2 * b * d;
	if(!rawData.fixed) {
		if(2 >= rawData.length) rawData.length = 3;
		if(rawData.data.length < rawData.length) {
			var data8;
			var this9;
			this9 = new Array(rawData.data.length + 10);
			data8 = this9;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data8,0,rawData.data.length);
			rawData.data = data8;
		}
	}
	rawData.data[2] = ac2;
	if(!rawData.fixed) {
		if(6 >= rawData.length) rawData.length = 7;
		if(rawData.data.length < rawData.length) {
			var data9;
			var this10;
			this10 = new Array(rawData.data.length + 10);
			data9 = this10;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data9,0,rawData.data.length);
			rawData.data = data9;
		}
	}
	rawData.data[6] = bc2;
	if(!rawData.fixed) {
		if(10 >= rawData.length) rawData.length = 11;
		if(rawData.data.length < rawData.length) {
			var data10;
			var this11;
			this11 = new Array(rawData.data.length + 10);
			data10 = this11;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data10,0,rawData.data.length);
			rawData.data = data10;
		}
	}
	rawData.data[10] = 1 - 2 * c * c;
	if(!rawData.fixed) {
		if(14 >= rawData.length) rawData.length = 15;
		if(rawData.data.length < rawData.length) {
			var data11;
			var this12;
			this12 = new Array(rawData.data.length + 10);
			data11 = this12;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data11,0,rawData.data.length);
			rawData.data = data11;
		}
	}
	rawData.data[14] = -2 * c * d;
	if(!rawData.fixed) {
		if(3 >= rawData.length) rawData.length = 4;
		if(rawData.data.length < rawData.length) {
			var data12;
			var this13;
			this13 = new Array(rawData.data.length + 10);
			data12 = this13;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data12,0,rawData.data.length);
			rawData.data = data12;
		}
	}
	rawData.data[3] = 0;
	if(!rawData.fixed) {
		if(7 >= rawData.length) rawData.length = 8;
		if(rawData.data.length < rawData.length) {
			var data13;
			var this14;
			this14 = new Array(rawData.data.length + 10);
			data13 = this14;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data13,0,rawData.data.length);
			rawData.data = data13;
		}
	}
	rawData.data[7] = 0;
	if(!rawData.fixed) {
		if(11 >= rawData.length) rawData.length = 12;
		if(rawData.data.length < rawData.length) {
			var data14;
			var this15;
			this15 = new Array(rawData.data.length + 10);
			data14 = this15;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data14,0,rawData.data.length);
			rawData.data = data14;
		}
	}
	rawData.data[11] = 0;
	if(!rawData.fixed) {
		if(15 >= rawData.length) rawData.length = 16;
		if(rawData.data.length < rawData.length) {
			var data15;
			var this16;
			this16 = new Array(rawData.data.length + 10);
			data15 = this16;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data15,0,rawData.data.length);
			rawData.data = data15;
		}
	}
	rawData.data[15] = 1;
	target.copyRawDataFrom(rawData);
	return target;
};
away3d.core.math.Plane3D = function(a,b,c,d) {
	if(d == null) d = 0;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 0;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	if(a == 0 && b == 0) this._alignment = away3d.core.math.Plane3D.ALIGN_XY_AXIS; else if(b == 0 && c == 0) this._alignment = away3d.core.math.Plane3D.ALIGN_YZ_AXIS; else if(a == 0 && c == 0) this._alignment = away3d.core.math.Plane3D.ALIGN_XZ_AXIS; else this._alignment = away3d.core.math.Plane3D.ALIGN_ANY;
};
$hxClasses["away3d.core.math.Plane3D"] = away3d.core.math.Plane3D;
away3d.core.math.Plane3D.__name__ = ["away3d","core","math","Plane3D"];
away3d.core.math.Plane3D.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,_alignment: null
	,fromPoints: function(p0,p1,p2) {
		var d1x = p1.x - p0.x;
		var d1y = p1.y - p0.y;
		var d1z = p1.z - p0.z;
		var d2x = p2.x - p0.x;
		var d2y = p2.y - p0.y;
		var d2z = p2.z - p0.z;
		this.a = d1y * d2z - d1z * d2y;
		this.b = d1z * d2x - d1x * d2z;
		this.c = d1x * d2y - d1y * d2x;
		this.d = this.a * p0.x + this.b * p0.y + this.c * p0.z;
		if(this.a == 0 && this.b == 0) this._alignment = away3d.core.math.Plane3D.ALIGN_XY_AXIS; else if(this.b == 0 && this.c == 0) this._alignment = away3d.core.math.Plane3D.ALIGN_YZ_AXIS; else if(this.a == 0 && this.c == 0) this._alignment = away3d.core.math.Plane3D.ALIGN_XZ_AXIS; else this._alignment = away3d.core.math.Plane3D.ALIGN_ANY;
	}
	,fromNormalAndPoint: function(normal,point) {
		this.a = normal.x;
		this.b = normal.y;
		this.c = normal.z;
		this.d = this.a * point.x + this.b * point.y + this.c * point.z;
		if(this.a == 0 && this.b == 0) this._alignment = away3d.core.math.Plane3D.ALIGN_XY_AXIS; else if(this.b == 0 && this.c == 0) this._alignment = away3d.core.math.Plane3D.ALIGN_YZ_AXIS; else if(this.a == 0 && this.c == 0) this._alignment = away3d.core.math.Plane3D.ALIGN_XZ_AXIS; else this._alignment = away3d.core.math.Plane3D.ALIGN_ANY;
	}
	,normalize: function() {
		var len = 1 / Math.sqrt(this.a * this.a + this.b * this.b + this.c * this.c);
		this.a *= len;
		this.b *= len;
		this.c *= len;
		this.d *= len;
		return this;
	}
	,distance: function(p) {
		if(this._alignment == away3d.core.math.Plane3D.ALIGN_YZ_AXIS) return this.a * p.x - this.d; else if(this._alignment == away3d.core.math.Plane3D.ALIGN_XZ_AXIS) return this.b * p.y - this.d; else if(this._alignment == away3d.core.math.Plane3D.ALIGN_XY_AXIS) return this.c * p.z - this.d; else return this.a * p.x + this.b * p.y + this.c * p.z - this.d;
	}
	,classifyPoint: function(p,epsilon) {
		if(epsilon == null) epsilon = 0.01;
		if(this.d != this.d) return away3d.core.math.PlaneClassification.FRONT;
		var len;
		if(this._alignment == away3d.core.math.Plane3D.ALIGN_YZ_AXIS) len = this.a * p.x - this.d; else if(this._alignment == away3d.core.math.Plane3D.ALIGN_XZ_AXIS) len = this.b * p.y - this.d; else if(this._alignment == away3d.core.math.Plane3D.ALIGN_XY_AXIS) len = this.c * p.z - this.d; else len = this.a * p.x + this.b * p.y + this.c * p.z - this.d;
		if(len < -epsilon) return away3d.core.math.PlaneClassification.BACK; else if(len > epsilon) return away3d.core.math.PlaneClassification.FRONT; else return away3d.core.math.PlaneClassification.INTERSECT;
	}
	,toString: function() {
		return "Plane3D [a:" + this.a + ", b:" + this.b + ", c:" + this.c + ", d:" + this.d + "].";
	}
	,__class__: away3d.core.math.Plane3D
};
away3d.core.math.PlaneClassification = function() { };
$hxClasses["away3d.core.math.PlaneClassification"] = away3d.core.math.PlaneClassification;
away3d.core.math.PlaneClassification.__name__ = ["away3d","core","math","PlaneClassification"];
away3d.core.math.Quaternion = function(x,y,z,w) {
	if(w == null) w = 1;
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	x = 0;
	y = 0;
	z = 0;
	w = 1;
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["away3d.core.math.Quaternion"] = away3d.core.math.Quaternion;
away3d.core.math.Quaternion.__name__ = ["away3d","core","math","Quaternion"];
away3d.core.math.Quaternion.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,get_magnitude: function() {
		return Math.sqrt(this.w * this.w + this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,multiply: function(qa,qb) {
		var w1 = qa.w;
		var x1 = qa.x;
		var y1 = qa.y;
		var z1 = qa.z;
		var w2 = qb.w;
		var x2 = qb.x;
		var y2 = qb.y;
		var z2 = qb.z;
		this.w = w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2;
		this.x = w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2;
		this.y = w1 * y2 - x1 * z2 + y1 * w2 + z1 * x2;
		this.z = w1 * z2 + x1 * y2 - y1 * x2 + z1 * w2;
	}
	,multiplyVector: function(vector,target) {
		if(target == null) target = new away3d.core.math.Quaternion();
		var x2 = vector.x;
		var y2 = vector.y;
		var z2 = vector.z;
		target.w = -this.x * x2 - this.y * y2 - this.z * z2;
		target.x = this.w * x2 + this.y * z2 - this.z * y2;
		target.y = this.w * y2 - this.x * z2 + this.z * x2;
		target.z = this.w * z2 + this.x * y2 - this.y * x2;
		return target;
	}
	,fromAxisAngle: function(axis,angle) {
		var sin_a = Math.sin(angle / 2);
		var cos_a = Math.cos(angle / 2);
		this.x = axis.x * sin_a;
		this.y = axis.y * sin_a;
		this.z = axis.z * sin_a;
		this.w = cos_a;
		this.normalize();
	}
	,slerp: function(qa,qb,t) {
		var w1 = qa.w;
		var x1 = qa.x;
		var y1 = qa.y;
		var z1 = qa.z;
		var w2 = qb.w;
		var x2 = qb.x;
		var y2 = qb.y;
		var z2 = qb.z;
		var dot = w1 * w2 + x1 * x2 + y1 * y2 + z1 * z2;
		if(dot < 0) {
			dot = -dot;
			w2 = -w2;
			x2 = -x2;
			y2 = -y2;
			z2 = -z2;
		}
		if(dot < 0.95) {
			var angle = Math.acos(dot);
			var s = 1 / Math.sin(angle);
			var s1 = Math.sin(angle * (1 - t)) * s;
			var s2 = Math.sin(angle * t) * s;
			this.w = w1 * s1 + w2 * s2;
			this.x = x1 * s1 + x2 * s2;
			this.y = y1 * s1 + y2 * s2;
			this.z = z1 * s1 + z2 * s2;
		} else {
			this.w = w1 + t * (w2 - w1);
			this.x = x1 + t * (x2 - x1);
			this.y = y1 + t * (y2 - y1);
			this.z = z1 + t * (z2 - z1);
			var len = 1.0 / Math.sqrt(this.w * this.w + this.x * this.x + this.y * this.y + this.z * this.z);
			this.w *= len;
			this.x *= len;
			this.y *= len;
			this.z *= len;
		}
	}
	,lerp: function(qa,qb,t) {
		var w1 = qa.w;
		var x1 = qa.x;
		var y1 = qa.y;
		var z1 = qa.z;
		var w2 = qb.w;
		var x2 = qb.x;
		var y2 = qb.y;
		var z2 = qb.z;
		var len;
		if(w1 * w2 + x1 * x2 + y1 * y2 + z1 * z2 < 0) {
			w2 = -w2;
			x2 = -x2;
			y2 = -y2;
			z2 = -z2;
		}
		this.w = w1 + t * (w2 - w1);
		this.x = x1 + t * (x2 - x1);
		this.y = y1 + t * (y2 - y1);
		this.z = z1 + t * (z2 - z1);
		len = 1.0 / Math.sqrt(this.w * this.w + this.x * this.x + this.y * this.y + this.z * this.z);
		this.w *= len;
		this.x *= len;
		this.y *= len;
		this.z *= len;
	}
	,fromEulerAngles: function(ax,ay,az) {
		var halfX = ax * .5;
		var halfY = ay * .5;
		var halfZ = az * .5;
		var cosX = Math.cos(halfX);
		var sinX = Math.sin(halfX);
		var cosY = Math.cos(halfY);
		var sinY = Math.sin(halfY);
		var cosZ = Math.cos(halfZ);
		var sinZ = Math.sin(halfZ);
		this.w = cosX * cosY * cosZ + sinX * sinY * sinZ;
		this.x = sinX * cosY * cosZ - cosX * sinY * sinZ;
		this.y = cosX * sinY * cosZ + sinX * cosY * sinZ;
		this.z = cosX * cosY * sinZ - sinX * sinY * cosZ;
	}
	,toEulerAngles: function(target) {
		if(target == null) target = new openfl.geom.Vector3D();
		target.x = Math.atan2(2 * (this.w * this.x + this.y * this.z),1 - 2 * (this.x * this.x + this.y * this.y));
		target.y = Math.asin(2 * (this.w * this.y - this.z * this.x));
		target.z = Math.atan2(2 * (this.w * this.z + this.x * this.y),1 - 2 * (this.y * this.y + this.z * this.z));
		return target;
	}
	,normalize: function(val) {
		if(val == null) val = 1;
		var mag = val / Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		this.x *= mag;
		this.y *= mag;
		this.z *= mag;
		this.w *= mag;
	}
	,toString: function() {
		return "{x:" + this.x + " y:" + this.y + " z:" + this.z + " w:" + this.w + "}";
	}
	,toMatrix3D: function(target) {
		var rawData = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
		var xy2 = 2.0 * this.x * this.y;
		var xz2 = 2.0 * this.x * this.z;
		var xw2 = 2.0 * this.x * this.w;
		var yz2 = 2.0 * this.y * this.z;
		var yw2 = 2.0 * this.y * this.w;
		var zw2 = 2.0 * this.z * this.w;
		var xx = this.x * this.x;
		var yy = this.y * this.y;
		var zz = this.z * this.z;
		var ww = this.w * this.w;
		if(!rawData.fixed) {
			if(0 >= rawData.length) rawData.length = 1;
			if(rawData.data.length < rawData.length) {
				var data;
				var this1;
				this1 = new Array(rawData.data.length + 10);
				data = this1;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data,0,rawData.data.length);
				rawData.data = data;
			}
		}
		rawData.data[0] = xx - yy - zz + ww;
		if(!rawData.fixed) {
			if(4 >= rawData.length) rawData.length = 5;
			if(rawData.data.length < rawData.length) {
				var data1;
				var this2;
				this2 = new Array(rawData.data.length + 10);
				data1 = this2;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data1,0,rawData.data.length);
				rawData.data = data1;
			}
		}
		rawData.data[4] = xy2 - zw2;
		if(!rawData.fixed) {
			if(8 >= rawData.length) rawData.length = 9;
			if(rawData.data.length < rawData.length) {
				var data2;
				var this3;
				this3 = new Array(rawData.data.length + 10);
				data2 = this3;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data2,0,rawData.data.length);
				rawData.data = data2;
			}
		}
		rawData.data[8] = xz2 + yw2;
		if(!rawData.fixed) {
			if(12 >= rawData.length) rawData.length = 13;
			if(rawData.data.length < rawData.length) {
				var data3;
				var this4;
				this4 = new Array(rawData.data.length + 10);
				data3 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data3,0,rawData.data.length);
				rawData.data = data3;
			}
		}
		rawData.data[12] = 0;
		if(!rawData.fixed) {
			if(1 >= rawData.length) rawData.length = 2;
			if(rawData.data.length < rawData.length) {
				var data4;
				var this5;
				this5 = new Array(rawData.data.length + 10);
				data4 = this5;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data4,0,rawData.data.length);
				rawData.data = data4;
			}
		}
		rawData.data[1] = xy2 + zw2;
		if(!rawData.fixed) {
			if(5 >= rawData.length) rawData.length = 6;
			if(rawData.data.length < rawData.length) {
				var data5;
				var this6;
				this6 = new Array(rawData.data.length + 10);
				data5 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data5,0,rawData.data.length);
				rawData.data = data5;
			}
		}
		rawData.data[5] = -xx + yy - zz + ww;
		if(!rawData.fixed) {
			if(9 >= rawData.length) rawData.length = 10;
			if(rawData.data.length < rawData.length) {
				var data6;
				var this7;
				this7 = new Array(rawData.data.length + 10);
				data6 = this7;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data6,0,rawData.data.length);
				rawData.data = data6;
			}
		}
		rawData.data[9] = yz2 - xw2;
		if(!rawData.fixed) {
			if(13 >= rawData.length) rawData.length = 14;
			if(rawData.data.length < rawData.length) {
				var data7;
				var this8;
				this8 = new Array(rawData.data.length + 10);
				data7 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data7,0,rawData.data.length);
				rawData.data = data7;
			}
		}
		rawData.data[13] = 0;
		if(!rawData.fixed) {
			if(2 >= rawData.length) rawData.length = 3;
			if(rawData.data.length < rawData.length) {
				var data8;
				var this9;
				this9 = new Array(rawData.data.length + 10);
				data8 = this9;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data8,0,rawData.data.length);
				rawData.data = data8;
			}
		}
		rawData.data[2] = xz2 - yw2;
		if(!rawData.fixed) {
			if(6 >= rawData.length) rawData.length = 7;
			if(rawData.data.length < rawData.length) {
				var data9;
				var this10;
				this10 = new Array(rawData.data.length + 10);
				data9 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data9,0,rawData.data.length);
				rawData.data = data9;
			}
		}
		rawData.data[6] = yz2 + xw2;
		if(!rawData.fixed) {
			if(10 >= rawData.length) rawData.length = 11;
			if(rawData.data.length < rawData.length) {
				var data10;
				var this11;
				this11 = new Array(rawData.data.length + 10);
				data10 = this11;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data10,0,rawData.data.length);
				rawData.data = data10;
			}
		}
		rawData.data[10] = -xx - yy + zz + ww;
		if(!rawData.fixed) {
			if(14 >= rawData.length) rawData.length = 15;
			if(rawData.data.length < rawData.length) {
				var data11;
				var this12;
				this12 = new Array(rawData.data.length + 10);
				data11 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data11,0,rawData.data.length);
				rawData.data = data11;
			}
		}
		rawData.data[14] = 0;
		if(!rawData.fixed) {
			if(3 >= rawData.length) rawData.length = 4;
			if(rawData.data.length < rawData.length) {
				var data12;
				var this13;
				this13 = new Array(rawData.data.length + 10);
				data12 = this13;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data12,0,rawData.data.length);
				rawData.data = data12;
			}
		}
		rawData.data[3] = 0.0;
		if(!rawData.fixed) {
			if(7 >= rawData.length) rawData.length = 8;
			if(rawData.data.length < rawData.length) {
				var data13;
				var this14;
				this14 = new Array(rawData.data.length + 10);
				data13 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data13,0,rawData.data.length);
				rawData.data = data13;
			}
		}
		rawData.data[7] = 0.0;
		if(!rawData.fixed) {
			if(11 >= rawData.length) rawData.length = 12;
			if(rawData.data.length < rawData.length) {
				var data14;
				var this15;
				this15 = new Array(rawData.data.length + 10);
				data14 = this15;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data14,0,rawData.data.length);
				rawData.data = data14;
			}
		}
		rawData.data[11] = 0;
		if(!rawData.fixed) {
			if(15 >= rawData.length) rawData.length = 16;
			if(rawData.data.length < rawData.length) {
				var data15;
				var this16;
				this16 = new Array(rawData.data.length + 10);
				data15 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data15,0,rawData.data.length);
				rawData.data = data15;
			}
		}
		rawData.data[15] = 1;
		if(target == null) return new openfl.geom.Matrix3D(rawData);
		target.copyRawDataFrom(rawData);
		return target;
	}
	,fromMatrix: function(matrix) {
		var tmp;
		tmp = matrix.decompose(openfl.geom.Orientation3D.QUATERNION);
		var v = tmp.data[1];
		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
		this.w = v.w;
	}
	,toRawData: function(target,exclude4thRow) {
		if(exclude4thRow == null) exclude4thRow = false;
		var xy2 = 2.0 * this.x * this.y;
		var xz2 = 2.0 * this.x * this.z;
		var xw2 = 2.0 * this.x * this.w;
		var yz2 = 2.0 * this.y * this.z;
		var yw2 = 2.0 * this.y * this.w;
		var zw2 = 2.0 * this.z * this.w;
		var xx = this.x * this.x;
		var yy = this.y * this.y;
		var zz = this.z * this.z;
		var ww = this.w * this.w;
		if(!target.fixed) {
			if(0 >= target.length) target.length = 1;
			if(target.data.length < target.length) {
				var data;
				var this1;
				this1 = new Array(target.data.length + 10);
				data = this1;
				haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data,0,target.data.length);
				target.data = data;
			}
		}
		target.data[0] = xx - yy - zz + ww;
		if(!target.fixed) {
			if(1 >= target.length) target.length = 2;
			if(target.data.length < target.length) {
				var data1;
				var this2;
				this2 = new Array(target.data.length + 10);
				data1 = this2;
				haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data1,0,target.data.length);
				target.data = data1;
			}
		}
		target.data[1] = xy2 - zw2;
		if(!target.fixed) {
			if(2 >= target.length) target.length = 3;
			if(target.data.length < target.length) {
				var data2;
				var this3;
				this3 = new Array(target.data.length + 10);
				data2 = this3;
				haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data2,0,target.data.length);
				target.data = data2;
			}
		}
		target.data[2] = xz2 + yw2;
		if(!target.fixed) {
			if(4 >= target.length) target.length = 5;
			if(target.data.length < target.length) {
				var data3;
				var this4;
				this4 = new Array(target.data.length + 10);
				data3 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data3,0,target.data.length);
				target.data = data3;
			}
		}
		target.data[4] = xy2 + zw2;
		if(!target.fixed) {
			if(5 >= target.length) target.length = 6;
			if(target.data.length < target.length) {
				var data4;
				var this5;
				this5 = new Array(target.data.length + 10);
				data4 = this5;
				haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data4,0,target.data.length);
				target.data = data4;
			}
		}
		target.data[5] = -xx + yy - zz + ww;
		if(!target.fixed) {
			if(6 >= target.length) target.length = 7;
			if(target.data.length < target.length) {
				var data5;
				var this6;
				this6 = new Array(target.data.length + 10);
				data5 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data5,0,target.data.length);
				target.data = data5;
			}
		}
		target.data[6] = yz2 - xw2;
		if(!target.fixed) {
			if(8 >= target.length) target.length = 9;
			if(target.data.length < target.length) {
				var data6;
				var this7;
				this7 = new Array(target.data.length + 10);
				data6 = this7;
				haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data6,0,target.data.length);
				target.data = data6;
			}
		}
		target.data[8] = xz2 - yw2;
		if(!target.fixed) {
			if(9 >= target.length) target.length = 10;
			if(target.data.length < target.length) {
				var data7;
				var this8;
				this8 = new Array(target.data.length + 10);
				data7 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data7,0,target.data.length);
				target.data = data7;
			}
		}
		target.data[9] = yz2 + xw2;
		if(!target.fixed) {
			if(10 >= target.length) target.length = 11;
			if(target.data.length < target.length) {
				var data8;
				var this9;
				this9 = new Array(target.data.length + 10);
				data8 = this9;
				haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data8,0,target.data.length);
				target.data = data8;
			}
		}
		target.data[10] = -xx - yy + zz + ww;
		var value;
		var value1;
		if(!target.fixed) {
			if(11 >= target.length) target.length = 12;
			if(target.data.length < target.length) {
				var data9;
				var this10;
				this10 = new Array(target.data.length + 10);
				data9 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data9,0,target.data.length);
				target.data = data9;
			}
		}
		value1 = target.data[11] = 0;
		if(!target.fixed) {
			if(7 >= target.length) target.length = 8;
			if(target.data.length < target.length) {
				var data10;
				var this11;
				this11 = new Array(target.data.length + 10);
				data10 = this11;
				haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data10,0,target.data.length);
				target.data = data10;
			}
		}
		value = target.data[7] = value1;
		if(!target.fixed) {
			if(3 >= target.length) target.length = 4;
			if(target.data.length < target.length) {
				var data11;
				var this12;
				this12 = new Array(target.data.length + 10);
				data11 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data11,0,target.data.length);
				target.data = data11;
			}
		}
		target.data[3] = value;
		if(!exclude4thRow) {
			var value2;
			var value3;
			if(!target.fixed) {
				if(14 >= target.length) target.length = 15;
				if(target.data.length < target.length) {
					var data12;
					var this13;
					this13 = new Array(target.data.length + 10);
					data12 = this13;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data12,0,target.data.length);
					target.data = data12;
				}
			}
			value3 = target.data[14] = 0;
			if(!target.fixed) {
				if(13 >= target.length) target.length = 14;
				if(target.data.length < target.length) {
					var data13;
					var this14;
					this14 = new Array(target.data.length + 10);
					data13 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data13,0,target.data.length);
					target.data = data13;
				}
			}
			value2 = target.data[13] = value3;
			if(!target.fixed) {
				if(12 >= target.length) target.length = 13;
				if(target.data.length < target.length) {
					var data14;
					var this15;
					this15 = new Array(target.data.length + 10);
					data14 = this15;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data14,0,target.data.length);
					target.data = data14;
				}
			}
			target.data[12] = value2;
			if(!target.fixed) {
				if(15 >= target.length) target.length = 16;
				if(target.data.length < target.length) {
					var data15;
					var this16;
					this16 = new Array(target.data.length + 10);
					data15 = this16;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data15,0,target.data.length);
					target.data = data15;
				}
			}
			target.data[15] = 1;
		}
	}
	,clone: function() {
		return new away3d.core.math.Quaternion(this.x,this.y,this.z,this.w);
	}
	,rotatePoint: function(vector,target) {
		var x1;
		var y1;
		var z1;
		var w1;
		var x2 = vector.x;
		var y2 = vector.y;
		var z2 = vector.z;
		if(target == null) target = new openfl.geom.Vector3D();
		w1 = -this.x * x2 - this.y * y2 - this.z * z2;
		x1 = this.w * x2 + this.y * z2 - this.z * y2;
		y1 = this.w * y2 - this.x * z2 + this.z * x2;
		z1 = this.w * z2 + this.x * y2 - this.y * x2;
		target.x = -w1 * this.x + x1 * this.w - y1 * this.z + z1 * this.y;
		target.y = -w1 * this.y + x1 * this.z + y1 * this.w - z1 * this.x;
		target.z = -w1 * this.z - x1 * this.y + y1 * this.x + z1 * this.w;
		return target;
	}
	,copyFrom: function(q) {
		this.x = q.x;
		this.y = q.y;
		this.z = q.z;
		this.w = q.w;
	}
	,__class__: away3d.core.math.Quaternion
	,__properties__: {get_magnitude:"get_magnitude"}
};
away3d.core.partition = {};
away3d.core.partition.NodeBase = function() {
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this._childNodes = this1;
	this._numEntities = 0;
	this._collectionMark = 0;
	this._numChildNodes = 0;
};
$hxClasses["away3d.core.partition.NodeBase"] = away3d.core.partition.NodeBase;
away3d.core.partition.NodeBase.__name__ = ["away3d","core","partition","NodeBase"];
away3d.core.partition.NodeBase.prototype = {
	_parent: null
	,_collectionMark: null
	,_childNodes: null
	,_numChildNodes: null
	,_debugPrimitive: null
	,_numEntities: null
	,get_showDebugBounds: function() {
		return this._debugPrimitive != null;
	}
	,set_showDebugBounds: function(value) {
		if(js.Boot.__cast(this._debugPrimitive != null , Bool) == value) return value;
		if(value) this._debugPrimitive = this.createDebugBounds(); else {
			this._debugPrimitive.dispose();
			this._debugPrimitive = null;
		}
		var i = 0;
		while(i < this._numChildNodes) {
			this._childNodes.data[i].set_showDebugBounds(value);
			++i;
		}
		return value;
	}
	,get_parent: function() {
		return this._parent;
	}
	,addNode: function(node) {
		node._parent = this;
		this._numEntities += node._numEntities;
		var this1 = this._childNodes;
		var key = this._numChildNodes++;
		if(!this1.fixed) {
			if(key >= this1.length) this1.length = key + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[key] = node;
		node.set_showDebugBounds(this._debugPrimitive != null);
		var numEntities = node._numEntities;
		node = this;
		do node._numEntities += numEntities; while((node = node._parent) != null);
	}
	,removeNode: function(node) {
		var index;
		var this1 = this._childNodes;
		var value = -1;
		var _g1 = 0;
		var _g = this1.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this1.data[i] == node) {
				value = i;
				break;
			}
		}
		index = value;
		var this2 = this._childNodes;
		var value1;
		var index1 = --this._numChildNodes;
		value1 = this._childNodes.data[index1];
		if(!this2.fixed) {
			if(index >= this2.length) this2.length = index + 1;
			if(this2.data.length < this2.length) {
				var data;
				var this3;
				this3 = new Array(this2.data.length + 10);
				data = this3;
				haxe.ds._Vector.Vector_Impl_.blit(this2.data,0,data,0,this2.data.length);
				this2.data = data;
			}
		}
		this2.data[index] = value1;
		var this4 = this._childNodes;
		var value2 = null;
		if(!this4.fixed) {
			if(this4.length > 0) {
				this4.length--;
				value2 = this4.data[this4.length];
			}
		}
		value2;
		var numEntities = node._numEntities;
		node = this;
		do node._numEntities -= numEntities; while((node = node._parent) != null);
	}
	,isInFrustum: function(planes,numPlanes) {
		return true;
	}
	,isIntersectingRay: function(rayPosition,rayDirection) {
		return true;
	}
	,findPartitionForEntity: function(entity) {
		return this;
	}
	,acceptTraverser: function(traverser) {
		if(this._numEntities == 0 && this._debugPrimitive == null) return;
		if(traverser.enterNode(this)) {
			var i = 0;
			while(i < this._numChildNodes) ((function($this) {
				var $r;
				var index = i++;
				$r = $this._childNodes.data[index];
				return $r;
			}(this))).acceptTraverser(traverser);
			if(this._debugPrimitive != null) traverser.applyRenderable(this._debugPrimitive);
		}
	}
	,createDebugBounds: function() {
		return null;
	}
	,get_numEntities: function() {
		return this._numEntities;
	}
	,updateNumEntities: function(value) {
		var diff = value - this._numEntities;
		var node = this;
		do node._numEntities += diff; while((node = node._parent) != null);
	}
	,__class__: away3d.core.partition.NodeBase
	,__properties__: {get_numEntities:"get_numEntities",get_parent:"get_parent",set_showDebugBounds:"set_showDebugBounds",get_showDebugBounds:"get_showDebugBounds"}
};
away3d.core.partition.EntityNode = function(entity) {
	away3d.core.partition.NodeBase.call(this);
	this._entity = entity;
	this._numEntities = 1;
};
$hxClasses["away3d.core.partition.EntityNode"] = away3d.core.partition.EntityNode;
away3d.core.partition.EntityNode.__name__ = ["away3d","core","partition","EntityNode"];
away3d.core.partition.EntityNode.__super__ = away3d.core.partition.NodeBase;
away3d.core.partition.EntityNode.prototype = $extend(away3d.core.partition.NodeBase.prototype,{
	_entity: null
	,_updateQueueNext: null
	,get_entity: function() {
		return this._entity;
	}
	,acceptTraverser: function(traverser) {
		traverser.applyEntity(this._entity);
	}
	,removeFromParent: function() {
		if(this._parent != null) this._parent.removeNode(this);
		this._parent = null;
	}
	,isInFrustum: function(planes,numPlanes) {
		if(!this._entity.get_isVisible()) return false;
		return this._entity.get_worldBounds().isInFrustum(planes,numPlanes);
	}
	,isIntersectingRay: function(rayPosition,rayDirection) {
		if(!this._entity.get_isVisible()) return false;
		return this._entity.isIntersectingRay(rayPosition,rayDirection);
	}
	,__class__: away3d.core.partition.EntityNode
	,__properties__: $extend(away3d.core.partition.NodeBase.prototype.__properties__,{get_entity:"get_entity"})
});
away3d.core.partition.CameraNode = function(camera) {
	away3d.core.partition.EntityNode.call(this,camera);
};
$hxClasses["away3d.core.partition.CameraNode"] = away3d.core.partition.CameraNode;
away3d.core.partition.CameraNode.__name__ = ["away3d","core","partition","CameraNode"];
away3d.core.partition.CameraNode.__super__ = away3d.core.partition.EntityNode;
away3d.core.partition.CameraNode.prototype = $extend(away3d.core.partition.EntityNode.prototype,{
	acceptTraverser: function(traverser) {
	}
	,__class__: away3d.core.partition.CameraNode
});
away3d.core.partition.DirectionalLightNode = function(light) {
	away3d.core.partition.EntityNode.call(this,light);
	this._light = light;
};
$hxClasses["away3d.core.partition.DirectionalLightNode"] = away3d.core.partition.DirectionalLightNode;
away3d.core.partition.DirectionalLightNode.__name__ = ["away3d","core","partition","DirectionalLightNode"];
away3d.core.partition.DirectionalLightNode.__super__ = away3d.core.partition.EntityNode;
away3d.core.partition.DirectionalLightNode.prototype = $extend(away3d.core.partition.EntityNode.prototype,{
	_light: null
	,get_light: function() {
		return this._light;
	}
	,acceptTraverser: function(traverser) {
		if(traverser.enterNode(this)) {
			away3d.core.partition.EntityNode.prototype.acceptTraverser.call(this,traverser);
			traverser.applyDirectionalLight(this._light);
		}
	}
	,__class__: away3d.core.partition.DirectionalLightNode
	,__properties__: $extend(away3d.core.partition.EntityNode.prototype.__properties__,{get_light:"get_light"})
});
away3d.core.partition.LightNode = function(light) {
	away3d.core.partition.EntityNode.call(this,light);
	this._light = light;
};
$hxClasses["away3d.core.partition.LightNode"] = away3d.core.partition.LightNode;
away3d.core.partition.LightNode.__name__ = ["away3d","core","partition","LightNode"];
away3d.core.partition.LightNode.__super__ = away3d.core.partition.EntityNode;
away3d.core.partition.LightNode.prototype = $extend(away3d.core.partition.EntityNode.prototype,{
	_light: null
	,get_light: function() {
		return this._light;
	}
	,acceptTraverser: function(traverser) {
		if(traverser.enterNode(this)) {
			away3d.core.partition.EntityNode.prototype.acceptTraverser.call(this,traverser);
			traverser.applyUnknownLight(this._light);
		}
	}
	,__class__: away3d.core.partition.LightNode
	,__properties__: $extend(away3d.core.partition.EntityNode.prototype.__properties__,{get_light:"get_light"})
});
away3d.core.partition.LightProbeNode = function(light) {
	away3d.core.partition.EntityNode.call(this,light);
	this._light = light;
};
$hxClasses["away3d.core.partition.LightProbeNode"] = away3d.core.partition.LightProbeNode;
away3d.core.partition.LightProbeNode.__name__ = ["away3d","core","partition","LightProbeNode"];
away3d.core.partition.LightProbeNode.__super__ = away3d.core.partition.EntityNode;
away3d.core.partition.LightProbeNode.prototype = $extend(away3d.core.partition.EntityNode.prototype,{
	_light: null
	,get_light: function() {
		return this._light;
	}
	,acceptTraverser: function(traverser) {
		if(traverser.enterNode(this)) {
			away3d.core.partition.EntityNode.prototype.acceptTraverser.call(this,traverser);
			traverser.applyLightProbe(this._light);
		}
	}
	,__class__: away3d.core.partition.LightProbeNode
	,__properties__: $extend(away3d.core.partition.EntityNode.prototype.__properties__,{get_light:"get_light"})
});
away3d.core.partition.MeshNode = function(mesh) {
	away3d.core.partition.EntityNode.call(this,mesh);
	this._mesh = mesh;
};
$hxClasses["away3d.core.partition.MeshNode"] = away3d.core.partition.MeshNode;
away3d.core.partition.MeshNode.__name__ = ["away3d","core","partition","MeshNode"];
away3d.core.partition.MeshNode.__super__ = away3d.core.partition.EntityNode;
away3d.core.partition.MeshNode.prototype = $extend(away3d.core.partition.EntityNode.prototype,{
	_mesh: null
	,get_mesh: function() {
		return this._mesh;
	}
	,acceptTraverser: function(traverser) {
		if(traverser.enterNode(this)) {
			away3d.core.partition.EntityNode.prototype.acceptTraverser.call(this,traverser);
			var subs = this._mesh.get_subMeshes();
			var i = 0;
			var len = subs.length;
			while(i < len) traverser.applyRenderable((function($this) {
				var $r;
				var index = i++;
				$r = subs.data[index];
				return $r;
			}(this)));
		}
	}
	,__class__: away3d.core.partition.MeshNode
	,__properties__: $extend(away3d.core.partition.EntityNode.prototype.__properties__,{get_mesh:"get_mesh"})
});
away3d.core.partition.NullNode = function() {
	away3d.core.partition.NodeBase.call(this);
};
$hxClasses["away3d.core.partition.NullNode"] = away3d.core.partition.NullNode;
away3d.core.partition.NullNode.__name__ = ["away3d","core","partition","NullNode"];
away3d.core.partition.NullNode.__super__ = away3d.core.partition.NodeBase;
away3d.core.partition.NullNode.prototype = $extend(away3d.core.partition.NodeBase.prototype,{
	__class__: away3d.core.partition.NullNode
});
away3d.core.partition.Partition3D = function(rootNode) {
	this._rootNode = rootNode;
	if(rootNode == null) this._rootNode = new away3d.core.partition.NullNode();
};
$hxClasses["away3d.core.partition.Partition3D"] = away3d.core.partition.Partition3D;
away3d.core.partition.Partition3D.__name__ = ["away3d","core","partition","Partition3D"];
away3d.core.partition.Partition3D.prototype = {
	_rootNode: null
	,_updatesMade: null
	,_updateQueue: null
	,get_showDebugBounds: function() {
		return this._rootNode.get_showDebugBounds();
	}
	,set_showDebugBounds: function(value) {
		this._rootNode.set_showDebugBounds(value);
		return value;
	}
	,traverse: function(traverser) {
		if(this._updatesMade) this.updateEntities();
		++away3d.core.traverse.PartitionTraverser._collectionMark;
		this._rootNode.acceptTraverser(traverser);
	}
	,markForUpdate: function(entity) {
		var node = entity.getEntityPartitionNode();
		var t = this._updateQueue;
		while(t != null) {
			if(node == t) return;
			t = t._updateQueueNext;
		}
		node._updateQueueNext = this._updateQueue;
		this._updateQueue = node;
		this._updatesMade = true;
	}
	,removeEntity: function(entity) {
		var node = entity.getEntityPartitionNode();
		var t;
		node.removeFromParent();
		if(node == this._updateQueue) this._updateQueue = node._updateQueueNext; else {
			t = this._updateQueue;
			while(t != null && t._updateQueueNext != node) t = t._updateQueueNext;
			if(t != null) t._updateQueueNext = node._updateQueueNext;
		}
		node._updateQueueNext = null;
		if(this._updateQueue == null) this._updatesMade = false;
	}
	,updateEntities: function() {
		var node = this._updateQueue;
		var targetNode;
		var t;
		this._updateQueue = null;
		this._updatesMade = false;
		do {
			targetNode = this._rootNode.findPartitionForEntity(node.get_entity());
			if(node.get_parent() != targetNode) {
				if(node != null) node.removeFromParent();
				targetNode.addNode(node);
			}
			t = node._updateQueueNext;
			node._updateQueueNext = null;
			node.get_entity().internalUpdate();
		} while((node = t) != null);
	}
	,__class__: away3d.core.partition.Partition3D
	,__properties__: {set_showDebugBounds:"set_showDebugBounds",get_showDebugBounds:"get_showDebugBounds"}
};
away3d.core.partition.PointLightNode = function(light) {
	away3d.core.partition.EntityNode.call(this,light);
	this._light = light;
};
$hxClasses["away3d.core.partition.PointLightNode"] = away3d.core.partition.PointLightNode;
away3d.core.partition.PointLightNode.__name__ = ["away3d","core","partition","PointLightNode"];
away3d.core.partition.PointLightNode.__super__ = away3d.core.partition.EntityNode;
away3d.core.partition.PointLightNode.prototype = $extend(away3d.core.partition.EntityNode.prototype,{
	_light: null
	,get_light: function() {
		return this._light;
	}
	,acceptTraverser: function(traverser) {
		if(traverser.enterNode(this)) {
			away3d.core.partition.EntityNode.prototype.acceptTraverser.call(this,traverser);
			traverser.applyPointLight(this._light);
		}
	}
	,__class__: away3d.core.partition.PointLightNode
	,__properties__: $extend(away3d.core.partition.EntityNode.prototype.__properties__,{get_light:"get_light"})
});
away3d.core.partition.RenderableNode = function(renderable) {
	away3d.core.partition.EntityNode.call(this,js.Boot.__cast(renderable , away3d.entities.Entity));
	this._renderable = renderable;
};
$hxClasses["away3d.core.partition.RenderableNode"] = away3d.core.partition.RenderableNode;
away3d.core.partition.RenderableNode.__name__ = ["away3d","core","partition","RenderableNode"];
away3d.core.partition.RenderableNode.__super__ = away3d.core.partition.EntityNode;
away3d.core.partition.RenderableNode.prototype = $extend(away3d.core.partition.EntityNode.prototype,{
	_renderable: null
	,acceptTraverser: function(traverser) {
		if(traverser.enterNode(this)) {
			away3d.core.partition.EntityNode.prototype.acceptTraverser.call(this,traverser);
			traverser.applyRenderable(this._renderable);
		}
	}
	,__class__: away3d.core.partition.RenderableNode
});
away3d.core.pick = {};
away3d.core.pick.IPicker = function() { };
$hxClasses["away3d.core.pick.IPicker"] = away3d.core.pick.IPicker;
away3d.core.pick.IPicker.__name__ = ["away3d","core","pick","IPicker"];
away3d.core.pick.IPicker.prototype = {
	getViewCollision: null
	,getSceneCollision: null
	,get_onlyMouseEnabled: null
	,set_onlyMouseEnabled: null
	,dispose: null
	,__class__: away3d.core.pick.IPicker
	,__properties__: {set_onlyMouseEnabled:"set_onlyMouseEnabled",get_onlyMouseEnabled:"get_onlyMouseEnabled"}
};
away3d.core.pick.IPickingCollider = function() { };
$hxClasses["away3d.core.pick.IPickingCollider"] = away3d.core.pick.IPickingCollider;
away3d.core.pick.IPickingCollider.__name__ = ["away3d","core","pick","IPickingCollider"];
away3d.core.pick.IPickingCollider.prototype = {
	setLocalRay: null
	,testSubMeshCollision: null
	,__class__: away3d.core.pick.IPickingCollider
};
away3d.core.pick.PickingCollisionVO = function(entity) {
	this.entity = entity;
};
$hxClasses["away3d.core.pick.PickingCollisionVO"] = away3d.core.pick.PickingCollisionVO;
away3d.core.pick.PickingCollisionVO.__name__ = ["away3d","core","pick","PickingCollisionVO"];
away3d.core.pick.PickingCollisionVO.prototype = {
	entity: null
	,localPosition: null
	,localNormal: null
	,uv: null
	,index: null
	,subGeometryIndex: null
	,localRayPosition: null
	,localRayDirection: null
	,rayPosition: null
	,rayDirection: null
	,rayOriginIsInsideBounds: null
	,rayEntryDistance: null
	,renderable: null
	,__class__: away3d.core.pick.PickingCollisionVO
};
away3d.core.pick.RaycastPicker = function(findClosestCollision) {
	this._raycastCollector = new away3d.core.traverse.RaycastCollector();
	this._ignoredEntities = new Array();
	this._onlyMouseEnabled = true;
	this._findClosestCollision = findClosestCollision;
	this._entities = new Array();
};
$hxClasses["away3d.core.pick.RaycastPicker"] = away3d.core.pick.RaycastPicker;
away3d.core.pick.RaycastPicker.__name__ = ["away3d","core","pick","RaycastPicker"];
away3d.core.pick.RaycastPicker.__interfaces__ = [away3d.core.pick.IPicker];
away3d.core.pick.RaycastPicker.prototype = {
	_findClosestCollision: null
	,_raycastCollector: null
	,_ignoredEntities: null
	,_onlyMouseEnabled: null
	,_entities: null
	,_numEntities: null
	,_hasCollisions: null
	,get_onlyMouseEnabled: function() {
		return this._onlyMouseEnabled;
	}
	,set_onlyMouseEnabled: function(value) {
		this._onlyMouseEnabled = value;
		return value;
	}
	,getViewCollision: function(x,y,view) {
		var collector = view.get_entityCollector();
		if(collector.get_numMouseEnableds() == 0) return null;
		var rayPosition = view.unproject(x,y,0);
		var rayDirection = view.unproject(x,y,1);
		rayDirection.x = rayDirection.x - rayPosition.x;
		rayDirection.y = rayDirection.y - rayPosition.y;
		rayDirection.z = rayDirection.z - rayPosition.z;
		this._numEntities = 0;
		var node = collector.get_entityHead();
		var entity;
		while(node != null) {
			entity = node.entity;
			if(this.isIgnored(entity)) {
				node = node.next;
				continue;
			}
			if(entity.get_isVisible() && entity.isIntersectingRay(rayPosition,rayDirection)) this._entities[this._numEntities++] = entity;
			node = node.next;
		}
		if(this._numEntities == 0) return null;
		return this.getPickingCollisionVO();
	}
	,getSceneCollision: function(position,direction,scene) {
		this._raycastCollector.clear();
		this._raycastCollector.set_rayPosition(position);
		this._raycastCollector.set_rayDirection(direction);
		scene.traversePartitions(this._raycastCollector);
		this._numEntities = 0;
		var node = this._raycastCollector.get_entityHead();
		var entity;
		while(node != null) {
			entity = node.entity;
			if(this.isIgnored(entity)) {
				node = node.next;
				continue;
			}
			this._entities[this._numEntities++] = entity;
			node = node.next;
		}
		if(this._numEntities == 0) return null;
		return this.getPickingCollisionVO();
	}
	,getEntityCollision: function(position,direction,entities) {
		this._numEntities = 0;
		var entity;
		var _g = 0;
		while(_g < entities.length) {
			var entity1 = entities[_g];
			++_g;
			if(entity1.isIntersectingRay(position,direction)) this._entities[this._numEntities++] = entity1;
		}
		return this.getPickingCollisionVO();
	}
	,setIgnoreList: function(entities) {
		this._ignoredEntities = entities;
	}
	,isIgnored: function(entity) {
		if(this._onlyMouseEnabled && (!entity._ancestorsAllowMouseEnabled || !entity.get_mouseEnabled())) return true;
		var ignoredEntity;
		var _g = 0;
		var _g1 = this._ignoredEntities;
		while(_g < _g1.length) {
			var ignoredEntity1 = _g1[_g];
			++_g;
			if(ignoredEntity1 == entity) return true;
		}
		return false;
	}
	,sortOnNearT: function(entity1,entity2) {
		if(entity1.get_pickingCollisionVO().rayEntryDistance > entity2.get_pickingCollisionVO().rayEntryDistance) return 1; else return -1;
	}
	,getPickingCollisionVO: function() {
		away3d.utils.ArrayUtils.reSize(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(this._entities),this._numEntities);
		this._entities.sort($bind(this,this.sortOnNearT));
		var shortestCollisionDistance = Math.POSITIVE_INFINITY;
		var bestCollisionVO = null;
		var pickingCollisionVO;
		var entity;
		var i;
		var _g1 = 0;
		var _g = this._numEntities;
		while(_g1 < _g) {
			var i1 = _g1++;
			entity = this._entities[i1];
			pickingCollisionVO = entity._pickingCollisionVO;
			if(entity.get_pickingCollider() != null) {
				if((bestCollisionVO == null || pickingCollisionVO.rayEntryDistance < bestCollisionVO.rayEntryDistance) && entity.collidesBefore(shortestCollisionDistance,this._findClosestCollision)) {
					shortestCollisionDistance = pickingCollisionVO.rayEntryDistance;
					bestCollisionVO = pickingCollisionVO;
					if(!this._findClosestCollision) {
						this.updateLocalPosition(pickingCollisionVO);
						return pickingCollisionVO;
					}
				}
			} else if(bestCollisionVO == null || pickingCollisionVO.rayEntryDistance < bestCollisionVO.rayEntryDistance) {
				if(!pickingCollisionVO.rayOriginIsInsideBounds) {
					this.updateLocalPosition(pickingCollisionVO);
					return pickingCollisionVO;
				}
			}
		}
		return bestCollisionVO;
	}
	,updateLocalPosition: function(pickingCollisionVO) {
		if(pickingCollisionVO.localPosition == null) pickingCollisionVO.localPosition = new openfl.geom.Vector3D();
		var collisionPos = pickingCollisionVO.localPosition;
		var rayDir = pickingCollisionVO.localRayDirection;
		var rayPos = pickingCollisionVO.localRayPosition;
		var t = pickingCollisionVO.rayEntryDistance;
		collisionPos.x = rayPos.x + t * rayDir.x;
		collisionPos.y = rayPos.y + t * rayDir.y;
		collisionPos.z = rayPos.z + t * rayDir.z;
	}
	,dispose: function() {
	}
	,__class__: away3d.core.pick.RaycastPicker
	,__properties__: {set_onlyMouseEnabled:"set_onlyMouseEnabled",get_onlyMouseEnabled:"get_onlyMouseEnabled"}
};
away3d.core.traverse = {};
away3d.core.traverse.PartitionTraverser = function() {
};
$hxClasses["away3d.core.traverse.PartitionTraverser"] = away3d.core.traverse.PartitionTraverser;
away3d.core.traverse.PartitionTraverser.__name__ = ["away3d","core","traverse","PartitionTraverser"];
away3d.core.traverse.PartitionTraverser.prototype = {
	scene: null
	,_entryPoint: null
	,enterNode: function(node) {
		return true;
	}
	,applySkyBox: function(renderable) {
		throw new away3d.errors.AbstractMethodError();
	}
	,applyRenderable: function(renderable) {
		throw new away3d.errors.AbstractMethodError();
	}
	,applyUnknownLight: function(light) {
		throw new away3d.errors.AbstractMethodError();
	}
	,applyDirectionalLight: function(light) {
		throw new away3d.errors.AbstractMethodError();
	}
	,applyPointLight: function(light) {
		throw new away3d.errors.AbstractMethodError();
	}
	,applyLightProbe: function(light) {
		throw new away3d.errors.AbstractMethodError();
	}
	,applyEntity: function(entity) {
		throw new away3d.errors.AbstractMethodError();
	}
	,get_entryPoint: function() {
		return this._entryPoint;
	}
	,__class__: away3d.core.traverse.PartitionTraverser
	,__properties__: {get_entryPoint:"get_entryPoint"}
};
away3d.core.traverse.EntityCollector = function() {
	away3d.core.traverse.PartitionTraverser.call(this);
	this.init();
};
$hxClasses["away3d.core.traverse.EntityCollector"] = away3d.core.traverse.EntityCollector;
away3d.core.traverse.EntityCollector.__name__ = ["away3d","core","traverse","EntityCollector"];
away3d.core.traverse.EntityCollector.__super__ = away3d.core.traverse.PartitionTraverser;
away3d.core.traverse.EntityCollector.prototype = $extend(away3d.core.traverse.PartitionTraverser.prototype,{
	_skyBox: null
	,_opaqueRenderableHead: null
	,_blendedRenderableHead: null
	,_entityHead: null
	,_renderableListItemPool: null
	,_entityListItemPool: null
	,_lights: null
	,_directionalLights: null
	,_pointLights: null
	,_lightProbes: null
	,_numEntities: null
	,_numLights: null
	,_numTriangles: null
	,_numMouseEnableds: null
	,_camera: null
	,_numDirectionalLights: null
	,_numPointLights: null
	,_numLightProbes: null
	,_cameraForward: null
	,_customCullPlanes: null
	,_cullPlanes: null
	,_numCullPlanes: null
	,init: function() {
		this._lights = new Array();
		this._directionalLights = new Array();
		this._pointLights = new Array();
		this._lightProbes = new Array();
		this._renderableListItemPool = new away3d.core.data.RenderableListItemPool();
		this._entityListItemPool = new away3d.core.data.EntityListItemPool();
		this._numEntities = 0;
		this._numLights = 0;
		this._numTriangles = 0;
		this._numMouseEnableds = 0;
		this._numDirectionalLights = 0;
		this._numPointLights = 0;
		this._numLightProbes = 0;
		this._numCullPlanes = 0;
	}
	,get_camera: function() {
		return this._camera;
	}
	,set_camera: function(value) {
		this._camera = value;
		this._entryPoint = this._camera.get_scenePosition();
		this._cameraForward = this._camera.get_forwardVector();
		this._cullPlanes = this._camera.get_frustumPlanes();
		return value;
	}
	,get_cullPlanes: function() {
		return this._customCullPlanes;
	}
	,set_cullPlanes: function(value) {
		this._customCullPlanes = value;
		return value;
	}
	,get_numMouseEnableds: function() {
		return this._numMouseEnableds;
	}
	,get_skyBox: function() {
		return this._skyBox;
	}
	,get_opaqueRenderableHead: function() {
		return this._opaqueRenderableHead;
	}
	,set_opaqueRenderableHead: function(value) {
		this._opaqueRenderableHead = value;
		return value;
	}
	,get_blendedRenderableHead: function() {
		return this._blendedRenderableHead;
	}
	,set_blendedRenderableHead: function(value) {
		this._blendedRenderableHead = value;
		return value;
	}
	,get_entityHead: function() {
		return this._entityHead;
	}
	,get_lights: function() {
		return this._lights;
	}
	,get_directionalLights: function() {
		return this._directionalLights;
	}
	,get_pointLights: function() {
		return this._pointLights;
	}
	,get_lightProbes: function() {
		return this._lightProbes;
	}
	,clear: function() {
		if(this._camera != null) {
			this._entryPoint = this._camera.get_scenePosition();
			this._cameraForward = this._camera.get_forwardVector();
		}
		if(this._customCullPlanes != null) this._cullPlanes = this._customCullPlanes; else if(this._camera != null) this._cullPlanes = this._camera.get_frustumPlanes(); else this._cullPlanes = null;
		if(this._cullPlanes != null) this._numCullPlanes = this._cullPlanes.length; else this._numCullPlanes = 0;
		this._numTriangles = this._numMouseEnableds = 0;
		this._blendedRenderableHead = null;
		this._opaqueRenderableHead = null;
		this._entityHead = null;
		this._renderableListItemPool.freeAll();
		this._entityListItemPool.freeAll();
		this._skyBox = null;
		if(this._numLights > 0) {
			this._lights = [];
			this._numLights = 0;
		}
		if(this._numDirectionalLights > 0) {
			this._directionalLights = [];
			this._numDirectionalLights = 0;
		}
		if(this._numPointLights > 0) {
			this._pointLights = [];
			this._numPointLights = 0;
		}
		if(this._numLightProbes > 0) {
			this._lightProbes = [];
			this._numLightProbes = 0;
		}
	}
	,enterNode: function(node) {
		var enter = away3d.core.traverse.PartitionTraverser._collectionMark != node._collectionMark && node.isInFrustum(this._cullPlanes,this._numCullPlanes);
		node._collectionMark = away3d.core.traverse.PartitionTraverser._collectionMark;
		return enter;
	}
	,applySkyBox: function(renderable) {
		this._skyBox = renderable;
	}
	,applyRenderable: function(renderable) {
		var material;
		var entity = renderable.get_sourceEntity();
		if(renderable.get_mouseEnabled()) ++this._numMouseEnableds;
		this._numTriangles += renderable.get_numTriangles();
		material = renderable.get_material();
		if(material != null) {
			var item = this._renderableListItemPool.getItem();
			item.renderable = renderable;
			item.materialId = material._uniqueId;
			item.renderOrderId = material._renderOrderId;
			item.cascaded = false;
			var dx = this._entryPoint.x - entity.get_x();
			var dy = this._entryPoint.y - entity.get_y();
			var dz = this._entryPoint.z - entity.get_z();
			item.zIndex = dx * this._cameraForward.x + dy * this._cameraForward.y + dz * this._cameraForward.z + entity.get_zOffset();
			item.renderSceneTransform = renderable.getRenderSceneTransform(this._camera);
			if(material.get_requiresBlending()) {
				item.next = this._blendedRenderableHead;
				this._blendedRenderableHead = item;
			} else {
				item.next = this._opaqueRenderableHead;
				this._opaqueRenderableHead = item;
			}
		}
	}
	,applyEntity: function(entity) {
		++this._numEntities;
		var item = this._entityListItemPool.getItem();
		item.entity = entity;
		item.next = this._entityHead;
		this._entityHead = item;
	}
	,applyUnknownLight: function(light) {
		this._lights[this._numLights++] = light;
	}
	,applyDirectionalLight: function(light) {
		this._lights[this._numLights++] = light;
		this._directionalLights[this._numDirectionalLights++] = light;
	}
	,applyPointLight: function(light) {
		this._lights[this._numLights++] = light;
		this._pointLights[this._numPointLights++] = light;
	}
	,applyLightProbe: function(light) {
		this._lights[this._numLights++] = light;
		this._lightProbes[this._numLightProbes++] = light;
	}
	,get_numTriangles: function() {
		return this._numTriangles;
	}
	,cleanUp: function() {
	}
	,__class__: away3d.core.traverse.EntityCollector
	,__properties__: $extend(away3d.core.traverse.PartitionTraverser.prototype.__properties__,{get_numTriangles:"get_numTriangles",get_lightProbes:"get_lightProbes",get_pointLights:"get_pointLights",get_directionalLights:"get_directionalLights",get_lights:"get_lights",get_entityHead:"get_entityHead",set_blendedRenderableHead:"set_blendedRenderableHead",get_blendedRenderableHead:"get_blendedRenderableHead",set_opaqueRenderableHead:"set_opaqueRenderableHead",get_opaqueRenderableHead:"get_opaqueRenderableHead",get_skyBox:"get_skyBox",get_numMouseEnableds:"get_numMouseEnableds",set_cullPlanes:"set_cullPlanes",get_cullPlanes:"get_cullPlanes",set_camera:"set_camera",get_camera:"get_camera"})
});
away3d.core.traverse.RaycastCollector = function() {
	this._rayPosition = new openfl.geom.Vector3D();
	this._rayDirection = new openfl.geom.Vector3D();
	away3d.core.traverse.EntityCollector.call(this);
};
$hxClasses["away3d.core.traverse.RaycastCollector"] = away3d.core.traverse.RaycastCollector;
away3d.core.traverse.RaycastCollector.__name__ = ["away3d","core","traverse","RaycastCollector"];
away3d.core.traverse.RaycastCollector.__super__ = away3d.core.traverse.EntityCollector;
away3d.core.traverse.RaycastCollector.prototype = $extend(away3d.core.traverse.EntityCollector.prototype,{
	_rayPosition: null
	,_rayDirection: null
	,get_rayPosition: function() {
		return this._rayPosition;
	}
	,set_rayPosition: function(value) {
		this._rayPosition = value;
		return value;
	}
	,get_rayDirection: function() {
		return this._rayDirection;
	}
	,set_rayDirection: function(value) {
		this._rayDirection = value;
		return value;
	}
	,enterNode: function(node) {
		return node.isIntersectingRay(this._rayPosition,this._rayDirection);
	}
	,applySkyBox: function(renderable) {
	}
	,applyRenderable: function(renderable) {
	}
	,applyUnknownLight: function(light) {
	}
	,__class__: away3d.core.traverse.RaycastCollector
	,__properties__: $extend(away3d.core.traverse.EntityCollector.prototype.__properties__,{set_rayDirection:"set_rayDirection",get_rayDirection:"get_rayDirection",set_rayPosition:"set_rayPosition",get_rayPosition:"get_rayPosition"})
});
openfl.geom.Vector3D = function(x,y,z,w) {
	if(w == null) w = 0;
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["openfl.geom.Vector3D"] = openfl.geom.Vector3D;
openfl.geom.Vector3D.__name__ = ["openfl","geom","Vector3D"];
openfl.geom.Vector3D.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
openfl.geom.Vector3D.X_AXIS = null;
openfl.geom.Vector3D.Y_AXIS = null;
openfl.geom.Vector3D.Z_AXIS = null;
openfl.geom.Vector3D.angleBetween = function(a,b) {
	var a0 = new openfl.geom.Vector3D(a.x,a.y,a.z,a.w);
	a0.normalize();
	var b0 = new openfl.geom.Vector3D(b.x,b.y,b.z,b.w);
	b0.normalize();
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
openfl.geom.Vector3D.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
openfl.geom.Vector3D.get_X_AXIS = function() {
	return new openfl.geom.Vector3D(1,0,0);
};
openfl.geom.Vector3D.get_Y_AXIS = function() {
	return new openfl.geom.Vector3D(0,1,0);
};
openfl.geom.Vector3D.get_Z_AXIS = function() {
	return new openfl.geom.Vector3D(0,0,1);
};
openfl.geom.Vector3D.prototype = {
	length: null
	,lengthSquared: null
	,w: null
	,x: null
	,y: null
	,z: null
	,add: function(a) {
		return new openfl.geom.Vector3D(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new openfl.geom.Vector3D(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector3D) {
		this.x = sourceVector3D.x;
		this.y = sourceVector3D.y;
		this.z = sourceVector3D.z;
	}
	,crossProduct: function(a) {
		return new openfl.geom.Vector3D(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) allFour = false;
		return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) allFour = false;
		return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new openfl.geom.Vector3D(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector3D(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: openfl.geom.Vector3D
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
openfl.geom.Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl.geom.Rectangle;
openfl.geom.Rectangle.__name__ = ["openfl","geom","Rectangle"];
openfl.geom.Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new openfl.geom.Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new openfl.geom.Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new openfl.geom.Rectangle();
		return new openfl.geom.Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return false;
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = tx0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		return new openfl.geom.Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) return toUnion.clone(); else if(toUnion.width == 0 || toUnion.height == 0) return this.clone();
		var x0;
		if(this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
		var x1;
		if(this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
		var y0;
		if(this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
		return new openfl.geom.Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) return;
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x < x) this.x = x;
		if(this.y < y) this.y = y;
		if(this.get_right() > x + width) this.width = x + width - this.x;
		if(this.get_bottom() > y + height) this.height = y + height - this.y;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,__toLimeRectangle: function() {
		return new lime.math.Rectangle(this.x,this.y,this.width,this.height);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new openfl.geom.Point(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new openfl.geom.Point(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new openfl.geom.Point(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: openfl.geom.Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
away3d.core.pick.ShaderPicker = function() {
	this._onlyMouseEnabled = true;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this._interactives = this1;
	this._localHitPosition = new openfl.geom.Vector3D();
	this._hitUV = new openfl.geom.Point();
	this._localHitNormal = new openfl.geom.Vector3D();
	this._rayPos = new openfl.geom.Vector3D();
	this._rayDir = new openfl.geom.Vector3D();
	this._id = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this3;
		this3 = new openfl.VectorData();
		{
			var this4;
			this4 = new Array(0);
			this3.data = this4;
		}
		this3.length = 0;
		this3.fixed = false;
		$r = this3;
		return $r;
	}(this))),4,0);
	this._viewportData = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this5;
		this5 = new openfl.VectorData();
		{
			var this6;
			this6 = new Array(0);
			this5.data = this6;
		}
		this5.length = 0;
		this5.fixed = false;
		$r = this5;
		return $r;
	}(this))),4,0);
	this._boundOffsetScale = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this7;
		this7 = new openfl.VectorData();
		{
			var this8;
			this8 = new Array(0);
			this7.data = this8;
		}
		this7.length = 0;
		this7.fixed = false;
		$r = this7;
		return $r;
	}(this))),8,0);
	var this9 = this._boundOffsetScale;
	if(!this9.fixed) {
		if(3 >= this9.length) this9.length = 4;
		if(this9.data.length < this9.length) {
			var data;
			var this10;
			this10 = new Array(this9.data.length + 10);
			data = this10;
			haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data,0,this9.data.length);
			this9.data = data;
		}
	}
	this9.data[3] = 0;
	var this11 = this._boundOffsetScale;
	if(!this11.fixed) {
		if(7 >= this11.length) this11.length = 8;
		if(this11.data.length < this11.length) {
			var data1;
			var this12;
			this12 = new Array(this11.data.length + 10);
			data1 = this12;
			haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data1,0,this11.data.length);
			this11.data = data1;
		}
	}
	this11.data[7] = 1;
};
$hxClasses["away3d.core.pick.ShaderPicker"] = away3d.core.pick.ShaderPicker;
away3d.core.pick.ShaderPicker.__name__ = ["away3d","core","pick","ShaderPicker"];
away3d.core.pick.ShaderPicker.__interfaces__ = [away3d.core.pick.IPicker];
away3d.core.pick.ShaderPicker.prototype = {
	_stage3DProxy: null
	,_context: null
	,_onlyMouseEnabled: null
	,_objectProgram3D: null
	,_triangleProgram3D: null
	,_bitmapData: null
	,_viewportData: null
	,_boundOffsetScale: null
	,_id: null
	,_interactives: null
	,_interactiveId: null
	,_hitColor: null
	,_projX: null
	,_projY: null
	,_hitRenderable: null
	,_hitEntity: null
	,_localHitPosition: null
	,_hitUV: null
	,_faceIndex: null
	,_subGeometryIndex: null
	,_localHitNormal: null
	,_rayPos: null
	,_rayDir: null
	,_potentialFound: null
	,get_onlyMouseEnabled: function() {
		return this._onlyMouseEnabled;
	}
	,set_onlyMouseEnabled: function(value) {
		this._onlyMouseEnabled = value;
		return value;
	}
	,getViewCollision: function(x,y,view) {
		var collector = view.get_entityCollector();
		this._stage3DProxy = view.get_stage3DProxy();
		if(this._stage3DProxy == null) return null;
		this._context = this._stage3DProxy._context3D;
		var this1 = this._viewportData;
		var value = view.get_width();
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = value;
		var this3 = this._viewportData;
		var value1 = view.get_height();
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = value1;
		var this5 = this._viewportData;
		var value2 = -(this._projX = 2 * x / view.get_width() - 1);
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = value2;
		var this7 = this._viewportData;
		var value3 = this._projY = 2 * y / view.get_height() - 1;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = value3;
		this._potentialFound = false;
		this.draw(collector,null);
		this._context.setVertexBufferAt(0,null);
		if(this._context == null || !this._potentialFound) return null;
		if(this._bitmapData == null) this._bitmapData = new openfl.display.BitmapData(1,1,false,0);
		this._context.drawToBitmapData(this._bitmapData);
		this._hitColor = this._bitmapData.getPixel(0,0);
		if(this._hitColor == 0) {
			this._context.present();
			return null;
		}
		this._hitRenderable = this._interactives.data[this._hitColor - 1];
		this._hitEntity = this._hitRenderable.get_sourceEntity();
		if(this._onlyMouseEnabled && (!this._hitEntity._ancestorsAllowMouseEnabled || !this._hitEntity.get_mouseEnabled())) return null;
		var _collisionVO = this._hitEntity.get_pickingCollisionVO();
		if(this._hitRenderable.get_shaderPickingDetails()) {
			this.getHitDetails(view.get_camera());
			_collisionVO.localPosition = this._localHitPosition;
			_collisionVO.localNormal = this._localHitNormal;
			_collisionVO.uv = this._hitUV;
			_collisionVO.index = this._faceIndex;
			_collisionVO.subGeometryIndex = this._subGeometryIndex;
		} else {
			_collisionVO.localPosition = null;
			_collisionVO.localNormal = null;
			_collisionVO.uv = null;
			_collisionVO.index = 0;
			_collisionVO.subGeometryIndex = 0;
		}
		return _collisionVO;
	}
	,getSceneCollision: function(position,direction,scene) {
		return null;
	}
	,draw: function(entityCollector,target) {
		var camera = entityCollector.get_camera();
		this._context.clear(0,0,0,1);
		this._stage3DProxy.set_scissorRect(away3d.core.pick.ShaderPicker.MOUSE_SCISSOR_RECT);
		var value = [];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(value.length);
		vec = this1;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = value[i];
		}
		vectorData.data = vec;
		this._interactives = vectorData;
		this._interactiveId = 0;
		if(this._objectProgram3D == null) this.initObjectProgram3D();
		this._context.setBlendFactors(1,0);
		this._context.setDepthTest(true,513);
		this._context.setProgram(this._objectProgram3D);
		this._context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.VERTEX,4,(function($this) {
			var $r;
			var this2 = $this._viewportData;
			var value1 = new Array();
			{
				var _g11 = 0;
				var _g2 = this2.data.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					value1.push(this2.data[i1]);
				}
			}
			$r = value1;
			return $r;
		}(this)),1);
		this.drawRenderables(entityCollector.get_opaqueRenderableHead(),camera);
		this.drawRenderables(entityCollector.get_blendedRenderableHead(),camera);
	}
	,drawRenderables: function(item,camera) {
		var matrix = away3d.core.math.Matrix3DUtils.get_CALCULATION_MATRIX();
		var renderable;
		var viewProjection = camera.get_viewProjection();
		while(item != null) {
			renderable = item.renderable;
			if(renderable.get_sourceEntity().get_scene() == null || !renderable.get_mouseEnabled() && this._onlyMouseEnabled) {
				item = item.next;
				continue;
			}
			this._potentialFound = true;
			this._context.setCulling(renderable.get_material() != null && renderable.get_material().get_bothSides()?0:1028);
			var this1 = this._interactives;
			var key = this._interactiveId++;
			if(!this1.fixed) {
				if(key >= this1.length) this1.length = key + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[key] = renderable;
			var this3 = this._id;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = (this._interactiveId >> 8) / 255;
			var this5 = this._id;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = (this._interactiveId & 255) / 255;
			matrix.copyFrom(renderable.getRenderSceneTransform(camera));
			matrix.append(viewProjection);
			this._context.setProgramConstantsFromMatrix(openfl.display3D.Context3DProgramType.VERTEX,0,matrix,true);
			this._context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.FRAGMENT,0,(function($this) {
				var $r;
				var this7 = $this._id;
				var value = new Array();
				{
					var _g1 = 0;
					var _g = this7.data.length;
					while(_g1 < _g) {
						var i = _g1++;
						value.push(this7.data[i]);
					}
				}
				$r = value;
				return $r;
			}(this)),1);
			renderable.activateVertexBuffer(0,this._stage3DProxy);
			this._context.drawTriangles(renderable.getIndexBuffer(this._stage3DProxy),0,renderable.get_numTriangles());
			item = item.next;
		}
	}
	,updateRay: function(camera) {
		this._rayPos = camera.get_scenePosition();
		this._rayDir = camera.getRay(this._projX,this._projY,1);
		this._rayDir.normalize();
	}
	,initObjectProgram3D: function() {
		var vertexCode;
		var fragmentCode;
		this._objectProgram3D = this._context.createProgram();
		vertexCode = "m44 vt0, va0, vc0\t\t\t\n" + "mul vt1.xy, vt0.w, vc4.zw\t\n" + "add vt0.xy, vt0.xy, vt1.xy\t\n" + "mul vt0.xy, vt0.xy, vc4.xy\t\n" + "mov op, vt0\t\n";
		fragmentCode = "mov oc, fc0\n";
		this._objectProgram3D.upload(openfl.display3D._shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.VERTEX,vertexCode),openfl.display3D._shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.FRAGMENT,fragmentCode));
	}
	,initTriangleProgram3D: function() {
		var vertexCode;
		var fragmentCode;
		this._triangleProgram3D = this._context.createProgram();
		vertexCode = "add vt0, va0, vc5 \t\t\t\n" + "mul vt0, vt0, vc6 \t\t\t\n" + "mov v0, vt0\t\t\t\t\n" + "m44 vt0, va0, vc0\t\t\t\n" + "mul vt1.xy, vt0.w, vc4.zw\t\n" + "add vt0.xy, vt0.xy, vt1.xy\t\n" + "mul vt0.xy, vt0.xy, vc4.xy\t\n" + "mov op, vt0\t\n";
		fragmentCode = "mov oc, v0\n";
		this._triangleProgram3D.upload(openfl.display3D._shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.VERTEX,vertexCode),openfl.display3D._shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.FRAGMENT,fragmentCode));
	}
	,getHitDetails: function(camera) {
		this.getApproximatePosition(camera);
		this.getPreciseDetails(camera);
	}
	,getApproximatePosition: function(camera) {
		var entity = this._hitRenderable.get_sourceEntity();
		var col;
		var scX;
		var scY;
		var scZ;
		var offsX;
		var offsY;
		var offsZ;
		var localViewProjection = away3d.core.math.Matrix3DUtils.get_CALCULATION_MATRIX();
		localViewProjection.copyFrom(this._hitRenderable.getRenderSceneTransform(camera));
		localViewProjection.append(camera.get_viewProjection());
		if(this._triangleProgram3D == null) this.initTriangleProgram3D();
		var this1 = this._boundOffsetScale;
		var value = 1 / (scX = entity.get_maxX() - entity.get_minX());
		if(!this1.fixed) {
			if(4 >= this1.length) this1.length = 5;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[4] = value;
		var this3 = this._boundOffsetScale;
		var value1 = 1 / (scY = entity.get_maxY() - entity.get_minY());
		if(!this3.fixed) {
			if(5 >= this3.length) this3.length = 6;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[5] = value1;
		var this5 = this._boundOffsetScale;
		var value2 = 1 / (scZ = entity.get_maxZ() - entity.get_minZ());
		if(!this5.fixed) {
			if(6 >= this5.length) this5.length = 7;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[6] = value2;
		var this7 = this._boundOffsetScale;
		var value3 = offsX = -entity.get_minX();
		if(!this7.fixed) {
			if(0 >= this7.length) this7.length = 1;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[0] = value3;
		var this9 = this._boundOffsetScale;
		var value4 = offsY = -entity.get_minY();
		if(!this9.fixed) {
			if(1 >= this9.length) this9.length = 2;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[1] = value4;
		var this11 = this._boundOffsetScale;
		var value5 = offsZ = -entity.get_minZ();
		if(!this11.fixed) {
			if(2 >= this11.length) this11.length = 3;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[2] = value5;
		this._context.setProgram(this._triangleProgram3D);
		this._context.clear(0,0,0,0,1,0,256);
		this._context.setScissorRectangle(away3d.core.pick.ShaderPicker.MOUSE_SCISSOR_RECT);
		this._context.setProgramConstantsFromMatrix(openfl.display3D.Context3DProgramType.VERTEX,0,localViewProjection,true);
		this._context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.VERTEX,5,(function($this) {
			var $r;
			var this13 = $this._boundOffsetScale;
			var value6 = new Array();
			{
				var _g1 = 0;
				var _g = this13.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value6.push(this13.data[i]);
				}
			}
			$r = value6;
			return $r;
		}(this)),2);
		this._hitRenderable.activateVertexBuffer(0,this._stage3DProxy);
		this._context.drawTriangles(this._hitRenderable.getIndexBuffer(this._stage3DProxy),0,this._hitRenderable.get_numTriangles());
		this._context.drawToBitmapData(this._bitmapData);
		col = this._bitmapData.getPixel(0,0);
		this._localHitPosition.x = (col >> 16 & 255) * scX / 255 - offsX;
		this._localHitPosition.y = (col >> 8 & 255) * scY / 255 - offsY;
		this._localHitPosition.z = (col & 255) * scZ / 255 - offsZ;
	}
	,getPreciseDetails: function(camera) {
		var subGeom = (js.Boot.__cast(this._hitRenderable , away3d.core.base.SubMesh)).get_subGeometry();
		var indices = subGeom.get_indexData();
		var vertices = subGeom.get_vertexData();
		var len = indices.length;
		var x1;
		var y1;
		var z1;
		var x2;
		var y2;
		var z2;
		var x3;
		var y3;
		var z3;
		var i = 0;
		var j = 1;
		var k = 2;
		var t1;
		var t2;
		var t3;
		var v0x;
		var v0y;
		var v0z;
		var v1x;
		var v1y;
		var v1z;
		var v2x;
		var v2y;
		var v2z;
		var dot00;
		var dot01;
		var dot02;
		var dot11;
		var dot12;
		var s;
		var t;
		var invDenom;
		var uvs = subGeom.get_UVData();
		var normals = subGeom.get_faceNormals();
		var x = this._localHitPosition.x;
		var y = this._localHitPosition.y;
		var z = this._localHitPosition.z;
		var u;
		var v;
		var ui1;
		var ui2;
		var ui3;
		var s0x;
		var s0y;
		var s0z;
		var s1x;
		var s1y;
		var s1z;
		var nl;
		var stride = subGeom.get_vertexStride();
		var vertexOffset = subGeom.get_vertexOffset();
		this.updateRay(camera);
		while(i < len) {
			t1 = vertexOffset + indices.data[i] * stride;
			t2 = vertexOffset + indices.data[j] * stride;
			t3 = vertexOffset + indices.data[k] * stride;
			x1 = vertices.data[t1];
			y1 = vertices.data[t1 + 1];
			z1 = vertices.data[t1 + 2];
			x2 = vertices.data[t2];
			y2 = vertices.data[t2 + 1];
			z2 = vertices.data[t2 + 2];
			x3 = vertices.data[t3];
			y3 = vertices.data[t3 + 1];
			z3 = vertices.data[t3 + 2];
			if(!(x < x1 && x < x2 && x < x3 || y < y1 && y < y2 && y < y3 || z < z1 && z < z2 && z < z3 || x > x1 && x > x2 && x > x3 || y > y1 && y > y2 && y > y3 || z > z1 && z > z2 && z > z3)) {
				v0x = x3 - x1;
				v0y = y3 - y1;
				v0z = z3 - z1;
				v1x = x2 - x1;
				v1y = y2 - y1;
				v1z = z2 - z1;
				v2x = x - x1;
				v2y = y - y1;
				v2z = z - z1;
				dot00 = v0x * v0x + v0y * v0y + v0z * v0z;
				dot01 = v0x * v1x + v0y * v1y + v0z * v1z;
				dot02 = v0x * v2x + v0y * v2y + v0z * v2z;
				dot11 = v1x * v1x + v1y * v1y + v1z * v1z;
				dot12 = v1x * v2x + v1y * v2y + v1z * v2z;
				invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
				s = (dot11 * dot02 - dot01 * dot12) * invDenom;
				t = (dot00 * dot12 - dot01 * dot02) * invDenom;
				if(s >= 0 && t >= 0 && s + t <= 1) {
					this.getPrecisePosition(this._hitRenderable.get_inverseSceneTransform(),normals.data[i],normals.data[i + 1],normals.data[i + 2],x1,y1,z1);
					v2x = this._localHitPosition.x - x1;
					v2y = this._localHitPosition.y - y1;
					v2z = this._localHitPosition.z - z1;
					s0x = x2 - x1;
					s0y = y2 - y1;
					s0z = z2 - z1;
					s1x = x3 - x1;
					s1y = y3 - y1;
					s1z = z3 - z1;
					this._localHitNormal.x = s0y * s1z - s0z * s1y;
					this._localHitNormal.y = s0z * s1x - s0x * s1z;
					this._localHitNormal.z = s0x * s1y - s0y * s1x;
					nl = 1 / Math.sqrt(this._localHitNormal.x * this._localHitNormal.x + this._localHitNormal.y * this._localHitNormal.y + this._localHitNormal.z * this._localHitNormal.z);
					this._localHitNormal.x *= nl;
					this._localHitNormal.y *= nl;
					this._localHitNormal.z *= nl;
					dot02 = v0x * v2x + v0y * v2y + v0z * v2z;
					dot12 = v1x * v2x + v1y * v2y + v1z * v2z;
					s = (dot11 * dot02 - dot01 * dot12) * invDenom;
					t = (dot00 * dot12 - dot01 * dot02) * invDenom;
					ui1 = indices.data[i] << 1;
					ui2 = indices.data[j] << 1;
					ui3 = indices.data[k] << 1;
					u = uvs.data[ui1];
					v = uvs.data[ui1 + 1];
					this._hitUV.x = u + t * (uvs.data[ui2] - u) + s * (uvs.data[ui3] - u);
					this._hitUV.y = v + t * (uvs.data[ui2 + 1] - v) + s * (uvs.data[ui3 + 1] - v);
					this._faceIndex = i;
					this._subGeometryIndex = away3d.tools.utils.GeomUtil.getMeshSubMeshIndex(js.Boot.__cast(this._hitRenderable , away3d.core.base.SubMesh));
					return;
				}
			}
			i += 3;
			j += 3;
			k += 3;
		}
	}
	,getPrecisePosition: function(invSceneTransform,nx,ny,nz,px,py,pz) {
		var rx;
		var ry;
		var rz;
		var ox;
		var oy;
		var oz;
		var t;
		var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
		var cx = this._rayPos.x;
		var cy = this._rayPos.y;
		var cz = this._rayPos.z;
		ox = this._rayDir.x;
		oy = this._rayDir.y;
		oz = this._rayDir.z;
		invSceneTransform.copyRawDataTo(raw);
		rx = raw.data[0] * ox + raw.data[4] * oy + raw.data[8] * oz;
		ry = raw.data[1] * ox + raw.data[5] * oy + raw.data[9] * oz;
		rz = raw.data[2] * ox + raw.data[6] * oy + raw.data[10] * oz;
		ox = raw.data[0] * cx + raw.data[4] * cy + raw.data[8] * cz + raw.data[12];
		oy = raw.data[1] * cx + raw.data[5] * cy + raw.data[9] * cz + raw.data[13];
		oz = raw.data[2] * cx + raw.data[6] * cy + raw.data[10] * cz + raw.data[14];
		t = ((px - ox) * nx + (py - oy) * ny + (pz - oz) * nz) / (rx * nx + ry * ny + rz * nz);
		this._localHitPosition.x = ox + rx * t;
		this._localHitPosition.y = oy + ry * t;
		this._localHitPosition.z = oz + rz * t;
	}
	,dispose: function() {
		this._bitmapData.dispose();
		if(this._triangleProgram3D != null) this._triangleProgram3D.dispose();
		if(this._objectProgram3D != null) this._objectProgram3D.dispose();
		this._triangleProgram3D = null;
		this._objectProgram3D = null;
		this._bitmapData = null;
		this._hitRenderable = null;
		this._hitEntity = null;
	}
	,__class__: away3d.core.pick.ShaderPicker
	,__properties__: {set_onlyMouseEnabled:"set_onlyMouseEnabled",get_onlyMouseEnabled:"get_onlyMouseEnabled"}
};
openfl.geom.Point = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl.geom.Point;
openfl.geom.Point.__name__ = ["openfl","geom","Point"];
openfl.geom.Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl.geom.Point.interpolate = function(pt1,pt2,f) {
	return new openfl.geom.Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl.geom.Point.polar = function(len,angle) {
	return new openfl.geom.Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl.geom.Point.prototype = {
	length: null
	,x: null
	,y: null
	,add: function(v) {
		return new openfl.geom.Point(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new openfl.geom.Point(this.x,this.y);
	}
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,equals: function(toCompare) {
		return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new openfl.geom.Point(this.x - v.x,this.y - v.y);
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ")";
	}
	,__toLimeVector2: function() {
		return new lime.math.Vector2(this.x,this.y);
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: openfl.geom.Point
	,__properties__: {get_length:"get_length"}
};
away3d.utils = {};
away3d.utils.ArrayUtils = function() { };
$hxClasses["away3d.utils.ArrayUtils"] = away3d.utils.ArrayUtils;
away3d.utils.ArrayUtils.__name__ = ["away3d","utils","ArrayUtils"];
away3d.utils.ArrayUtils.reSize = function(either,count,defaultValue) {
	var t = openfl.Lib.getTimer();
	{
		var _g = either;
		switch(_g[1]) {
		case 0:
			var arr = _g[2];
			var c = arr.length;
			while(c < count) {
				arr.push(defaultValue);
				c++;
			}
			while(c > count) {
				arr.pop();
				c--;
			}
			break;
		case 1:
			var vec = _g[2];
			var c1 = vec.length;
			if(!vec.fixed) {
				if(count > vec.length) {
					var data;
					var this1;
					this1 = new Array(count);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(vec.data,0,data,0,Std["int"](Math.min(vec.data.length,count)));
					vec.data = data;
				}
				vec.length = count;
			}
			count;
			while(c1 < count) {
				var key = c1++;
				var value = defaultValue;
				if(!vec.fixed) {
					if(key >= vec.length) vec.length = key + 1;
					if(vec.data.length < vec.length) {
						var data1;
						var this2;
						this2 = new Array(vec.data.length + 10);
						data1 = this2;
						haxe.ds._Vector.Vector_Impl_.blit(vec.data,0,data1,0,vec.data.length);
						vec.data = data1;
					}
				}
				vec.data[key] = value;
			}
			break;
		}
	}
};
away3d.utils.ArrayUtils.Prefill = function(either,count,elem) {
	var t = openfl.Lib.getTimer();
	{
		var _g = either;
		switch(_g[1]) {
		case 0:
			var arr = _g[2];
			arr.splice(0,arr.length);
			var c = 0;
			while(c++ < count) arr.push(elem);
			return arr;
		case 1:
			var vec = _g[2];
			if(!vec.fixed) {
				if(count > vec.length) {
					var data;
					var this1;
					this1 = new Array(count);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(vec.data,0,data,0,Std["int"](Math.min(vec.data.length,count)));
					vec.data = data;
				}
				vec.length = count;
			}
			count;
			var c1 = 0;
			while(c1 < count) {
				var key = c1++;
				if(!vec.fixed) {
					if(key >= vec.length) vec.length = key + 1;
					if(vec.data.length < vec.length) {
						var data1;
						var this2;
						this2 = new Array(vec.data.length + 10);
						data1 = this2;
						haxe.ds._Vector.Vector_Impl_.blit(vec.data,0,data1,0,vec.data.length);
						vec.data = data1;
					}
				}
				vec.data[key] = elem;
			}
			return vec;
		}
	}
};
openfl.display.MovieClip = function() {
	openfl.display.Sprite.call(this);
	this.__currentFrame = 0;
	this.__currentLabels = [];
	this.__totalFrames = 0;
	this.enabled = true;
};
$hxClasses["openfl.display.MovieClip"] = openfl.display.MovieClip;
openfl.display.MovieClip.__name__ = ["openfl","display","MovieClip"];
openfl.display.MovieClip.__super__ = openfl.display.Sprite;
openfl.display.MovieClip.prototype = $extend(openfl.display.Sprite.prototype,{
	currentFrame: null
	,currentFrameLabel: null
	,currentLabel: null
	,currentLabels: null
	,enabled: null
	,framesLoaded: null
	,totalFrames: null
	,__currentFrame: null
	,__currentFrameLabel: null
	,__currentLabel: null
	,__currentLabels: null
	,__totalFrames: null
	,gotoAndPlay: function(frame,scene) {
	}
	,gotoAndStop: function(frame,scene) {
	}
	,nextFrame: function() {
	}
	,play: function() {
	}
	,prevFrame: function() {
	}
	,stop: function() {
	}
	,get_currentFrame: function() {
		return this.__currentFrame;
	}
	,get_currentFrameLabel: function() {
		return this.__currentFrameLabel;
	}
	,get_currentLabel: function() {
		return this.__currentLabel;
	}
	,get_currentLabels: function() {
		return this.__currentLabels;
	}
	,get_framesLoaded: function() {
		return this.__totalFrames;
	}
	,get_totalFrames: function() {
		return this.__totalFrames;
	}
	,__class__: openfl.display.MovieClip
	,__properties__: $extend(openfl.display.Sprite.prototype.__properties__,{get_totalFrames:"get_totalFrames",get_framesLoaded:"get_framesLoaded",get_currentLabels:"get_currentLabels",get_currentLabel:"get_currentLabel",get_currentFrameLabel:"get_currentFrameLabel",get_currentFrame:"get_currentFrame"})
});
openfl.display.LoaderInfo = function() {
	openfl.events.EventDispatcher.call(this);
	this.applicationDomain = openfl.system.ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl.display.LoaderInfo;
openfl.display.LoaderInfo.__name__ = ["openfl","display","LoaderInfo"];
openfl.display.LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl.display.LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl.events.UncaughtErrorEvents();
	if(loader != null) loaderInfo.loader = loader; else loaderInfo.url = openfl.display.LoaderInfo.__rootURL;
	return loaderInfo;
};
openfl.display.LoaderInfo.__super__ = openfl.events.EventDispatcher;
openfl.display.LoaderInfo.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	applicationDomain: null
	,bytes: null
	,bytesLoaded: null
	,bytesTotal: null
	,childAllowsParent: null
	,content: null
	,contentType: null
	,frameRate: null
	,height: null
	,loader: null
	,loaderURL: null
	,parameters: null
	,parentAllowsChild: null
	,sameDomain: null
	,sharedEvents: null
	,uncaughtErrorEvents: null
	,url: null
	,width: null
	,__class__: openfl.display.LoaderInfo
});
openfl.system = {};
openfl.system.ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) this.parentDomain = parentDomain; else this.parentDomain = openfl.system.ApplicationDomain.currentDomain;
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl.system.ApplicationDomain;
openfl.system.ApplicationDomain.__name__ = ["openfl","system","ApplicationDomain"];
openfl.system.ApplicationDomain.prototype = {
	parentDomain: null
	,getDefinition: function(name) {
		return Type.resolveClass(name);
	}
	,hasDefinition: function(name) {
		return Type.resolveClass(name) != null;
	}
	,__class__: openfl.system.ApplicationDomain
};
openfl.events.UncaughtErrorEvents = function(target) {
	openfl.events.EventDispatcher.call(this,target);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl.events.UncaughtErrorEvents;
openfl.events.UncaughtErrorEvents.__name__ = ["openfl","events","UncaughtErrorEvents"];
openfl.events.UncaughtErrorEvents.__super__ = openfl.events.EventDispatcher;
openfl.events.UncaughtErrorEvents.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	__class__: openfl.events.UncaughtErrorEvents
});
openfl.Lib = function() { };
$hxClasses["openfl.Lib"] = openfl.Lib;
openfl.Lib.__name__ = ["openfl","Lib"];
openfl.Lib.application = null;
openfl.Lib["as"] = function(v,c) {
	if(js.Boot.__instanceof(v,c)) return v; else return null;
};
openfl.Lib.attach = function(name) {
	return new openfl.display.MovieClip();
};
openfl.Lib.embed = $hx_exports.openfl.embed = function(elementName,width,height,background,assetsPrefix) {
	lime.system.System.embed(elementName,width,height,background,assetsPrefix);
};
openfl.Lib.getTimer = function() {
	return lime.system.System.getTimer();
};
openfl.Lib.getURL = function(request,target) {
	if(target == null) target = "_blank";
	window.open(request.url,target);
};
openfl.Lib.notImplemented = function(api) {
	if(!openfl.Lib.__sentWarnings.exists(api)) {
		openfl.Lib.__sentWarnings.set(api,true);
		haxe.Log.trace("Warning: " + api + " is not implemented",{ fileName : "Lib.hx", lineNumber : 114, className : "openfl.Lib", methodName : "notImplemented"});
	}
};
openfl.Lib.preventDefaultTouchMove = function() {
	window.document.addEventListener("touchmove",function(evt) {
		evt.preventDefault();
	},false);
};
openfl.Lib.trace = function(arg) {
	haxe.Log.trace(arg,{ fileName : "Lib.hx", lineNumber : 145, className : "openfl.Lib", methodName : "trace"});
};
lime.system = {};
lime.system.System = function() { };
$hxClasses["lime.system.System"] = lime.system.System;
lime.system.System.__name__ = ["lime","system","System"];
lime.system.System.__properties__ = {get_userDirectory:"get_userDirectory",get_fontsDirectory:"get_fontsDirectory",get_documentsDirectory:"get_documentsDirectory",get_desktopDirectory:"get_desktopDirectory",get_applicationStorageDirectory:"get_applicationStorageDirectory",get_applicationDirectory:"get_applicationDirectory"}
lime.system.System.applicationDirectory = null;
lime.system.System.applicationStorageDirectory = null;
lime.system.System.desktopDirectory = null;
lime.system.System.disableCFFI = null;
lime.system.System.documentsDirectory = null;
lime.system.System.fontsDirectory = null;
lime.system.System.userDirectory = null;
lime.system.System.embed = $hx_exports.lime.embed = function(element,width,height,background,assetsPrefix) {
	var htmlElement = null;
	if(typeof(element) == "string") htmlElement = window.document.getElementById(js.Boot.__cast(element , String)); else if(element == null) htmlElement = window.document.createElement("div"); else htmlElement = element;
	var color = null;
	if(background != null) {
		background = StringTools.replace(background,"#","");
		if(background.indexOf("0x") > -1) color = Std.parseInt(background); else color = Std.parseInt("0x" + background);
	}
	if(width == null) width = 0;
	if(height == null) height = 0;
	ApplicationMain.config.background = color;
	ApplicationMain.config.element = htmlElement;
	ApplicationMain.config.width = width;
	ApplicationMain.config.height = height;
	ApplicationMain.config.assetsPrefix = assetsPrefix;
	ApplicationMain.create();
};
lime.system.System.exit = function(code) {
};
lime.system.System.findHaxeLib = function(library) {
	return "";
};
lime.system.System.getTimer = function() {
	return Std["int"](new Date().getTime());
};
lime.system.System.load = function(library,method,args,lazy) {
	if(lazy == null) lazy = false;
	if(args == null) args = 0;
	if(lime.system.System.disableCFFI) return Reflect.makeVarArgs(function(__) {
		return { };
	});
	var result = null;
	return result;
};
lime.system.System.sysName = function() {
	return null;
};
lime.system.System.tryLoad = function(name,library,func,args) {
	return null;
};
lime.system.System.loaderTrace = function(message) {
};
lime.system.System.get_applicationDirectory = function() {
	return null;
};
lime.system.System.get_applicationStorageDirectory = function() {
	var company = "MyCompany";
	var file = "MyApplication";
	if(lime.app.Application.current != null && lime.app.Application.current.config != null) {
		if(lime.app.Application.current.config.company != null) company = lime.app.Application.current.config.company;
		if(lime.app.Application.current.config.file != null) file = lime.app.Application.current.config.file;
	}
	return null;
};
lime.system.System.get_desktopDirectory = function() {
	return null;
};
lime.system.System.get_documentsDirectory = function() {
	return null;
};
lime.system.System.get_fontsDirectory = function() {
	return null;
};
lime.system.System.get_userDirectory = function() {
	return null;
};
haxe.ds._Vector = {};
haxe.ds._Vector.Vector_Impl_ = function() { };
$hxClasses["haxe.ds._Vector.Vector_Impl_"] = haxe.ds._Vector.Vector_Impl_;
haxe.ds._Vector.Vector_Impl_.__name__ = ["haxe","ds","_Vector","Vector_Impl_"];
haxe.ds._Vector.Vector_Impl_.blit = function(src,srcPos,dest,destPos,len) {
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		dest[destPos + i] = src[srcPos + i];
	}
};
haxe.ds._Vector.Vector_Impl_.toArray = function(this1) {
	var a = new Array();
	var len = this1.length;
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		a[i] = this1[i];
	}
	return a;
};
away3d.utils._ArrayUtils = {};
away3d.utils._ArrayUtils.AcceptEither_Impl_ = function() { };
$hxClasses["away3d.utils._ArrayUtils.AcceptEither_Impl_"] = away3d.utils._ArrayUtils.AcceptEither_Impl_;
away3d.utils._ArrayUtils.AcceptEither_Impl_.__name__ = ["away3d","utils","_ArrayUtils","AcceptEither_Impl_"];
away3d.utils._ArrayUtils.AcceptEither_Impl_.__properties__ = {get_type:"get_type",get_value:"get_value"}
away3d.utils._ArrayUtils.AcceptEither_Impl_._new = function(e) {
	return e;
};
away3d.utils._ArrayUtils.AcceptEither_Impl_.get_value = function(this1) {
	switch(this1[1]) {
	case 0:
		var v = this1[2];
		return v;
	case 1:
		var v = this1[2];
		return v;
	}
};
away3d.utils._ArrayUtils.AcceptEither_Impl_.get_type = function(this1) {
	return this1;
};
away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA = function(v) {
	var e = away3d.utils.Either.Left(v);
	return e;
};
away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB = function(v) {
	var e = away3d.utils.Either.Right(v);
	return e;
};
away3d.utils.Either = $hxClasses["away3d.utils.Either"] = { __ename__ : true, __constructs__ : ["Left","Right"] };
away3d.utils.Either.Left = function(v) { var $x = ["Left",0,v]; $x.__enum__ = away3d.utils.Either; $x.toString = $estr; return $x; };
away3d.utils.Either.Right = function(v) { var $x = ["Right",1,v]; $x.__enum__ = away3d.utils.Either; $x.toString = $estr; return $x; };
away3d.core.pick.PickingType = function() { };
$hxClasses["away3d.core.pick.PickingType"] = away3d.core.pick.PickingType;
away3d.core.pick.PickingType.__name__ = ["away3d","core","pick","PickingType"];
away3d.core.render = {};
away3d.core.render.BackgroundImageRenderer = function(stage3DProxy) {
	this.set_stage3DProxy(stage3DProxy);
};
$hxClasses["away3d.core.render.BackgroundImageRenderer"] = away3d.core.render.BackgroundImageRenderer;
away3d.core.render.BackgroundImageRenderer.__name__ = ["away3d","core","render","BackgroundImageRenderer"];
away3d.core.render.BackgroundImageRenderer.prototype = {
	_program3d: null
	,_texture: null
	,_indexBuffer: null
	,_vertexBuffer: null
	,_stage3DProxy: null
	,_context: null
	,get_stage3DProxy: function() {
		return this._stage3DProxy;
	}
	,set_stage3DProxy: function(value) {
		if(value == this._stage3DProxy) return value;
		this._stage3DProxy = value;
		this.removeBuffers();
		return value;
	}
	,removeBuffers: function() {
		if(this._vertexBuffer != null) {
			away3d.core.managers.Stage3DProxy.disposeVertexBuffer(this._vertexBuffer);
			this._vertexBuffer = null;
			this._program3d.dispose();
			this._program3d = null;
			away3d.core.managers.Stage3DProxy.disposeIndexBuffer(this._indexBuffer);
			this._indexBuffer = null;
		}
	}
	,getVertexCode: function() {
		return "mov op, va0\n" + "mov v0, va1";
	}
	,getFragmentCode: function() {
		var format;
		var _sw0_ = this._texture.get_format();
		switch(_sw0_[1]) {
		case 1:
			format = "dxt1,";
			break;
		case 2:
			format = "dxt5,";
			break;
		default:
			format = "";
		}
		return "tex ft0, v0, fs0 <2d, " + format + "linear>\t\n" + "mov oc, ft0";
	}
	,dispose: function() {
		this.removeBuffers();
	}
	,render: function() {
	}
	,initBuffers: function(context) {
		this._vertexBuffer = this._stage3DProxy.createVertexBuffer(4,4);
		this._program3d = context.createProgram();
		this._indexBuffer = this._stage3DProxy.createIndexBuffer(6);
		var inds;
		var a = [2,1,0,3,2,0];
		var vectorData = new openfl.VectorData();
		vectorData.length = a.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(a.length);
		vec = this1;
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = a[i];
		}
		vectorData.data = vec;
		inds = vectorData;
		this._indexBuffer.uploadFromVector(inds,0,6);
		this._program3d.upload(openfl.display3D._shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.VERTEX,this.getVertexCode()),openfl.display3D._shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.FRAGMENT,this.getFragmentCode()));
		var w = 2;
		var h = 2;
		var x = -1;
		var y = 1;
		if(this._stage3DProxy.get_scissorRect() != null) {
			x = (this._stage3DProxy.get_scissorRect().x * 2 - this._stage3DProxy.get_viewPort().width) / this._stage3DProxy.get_viewPort().width;
			y = (this._stage3DProxy.get_scissorRect().y * 2 - this._stage3DProxy.get_viewPort().height) / this._stage3DProxy.get_viewPort().height * -1;
			w = 2 / (this._stage3DProxy.get_viewPort().width / this._stage3DProxy.get_scissorRect().width);
			h = 2 / (this._stage3DProxy.get_viewPort().height / this._stage3DProxy.get_scissorRect().height);
		}
		var verts;
		var a1 = [x,y - h,0,1,x + w,y - h,1,1,x + w,y,1,0,x,y,0,0];
		var vectorData1 = new openfl.VectorData();
		vectorData1.length = a1.length;
		vectorData1.fixed = true;
		var vec1;
		var this2;
		this2 = new Array(a1.length);
		vec1 = this2;
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			vec1[i1] = a1[i1];
		}
		vectorData1.data = vec1;
		verts = vectorData1;
		this._vertexBuffer.uploadFromVector(verts,0,4);
	}
	,get_texture: function() {
		return this._texture;
	}
	,set_texture: function(value) {
		this._texture = value;
		return value;
	}
	,__class__: away3d.core.render.BackgroundImageRenderer
	,__properties__: {set_texture:"set_texture",get_texture:"get_texture",set_stage3DProxy:"set_stage3DProxy",get_stage3DProxy:"get_stage3DProxy"}
};
away3d.core.render.RendererBase = function(renderToTexture) {
	if(renderToTexture == null) renderToTexture = false;
	this._backgroundR = 0;
	this._backgroundG = 0;
	this._backgroundB = 0;
	this._backgroundAlpha = 1;
	this._shareContext = false;
	this._textureRatioX = 1;
	this._textureRatioY = 1;
	this._clearOnRender = true;
	this._rttViewProjectionMatrix = new openfl.geom.Matrix3D();
	this._renderableSorter = new away3d.core.sort.RenderableMergeSort();
	this._renderToTexture = renderToTexture;
};
$hxClasses["away3d.core.render.RendererBase"] = away3d.core.render.RendererBase;
away3d.core.render.RendererBase.__name__ = ["away3d","core","render","RendererBase"];
away3d.core.render.RendererBase.prototype = {
	_context: null
	,_stage3DProxy: null
	,_backgroundR: null
	,_backgroundG: null
	,_backgroundB: null
	,_backgroundAlpha: null
	,_shareContext: null
	,_renderTarget: null
	,_renderTargetSurface: null
	,_viewWidth: null
	,_viewHeight: null
	,_renderableSorter: null
	,_backgroundImageRenderer: null
	,_background: null
	,_renderToTexture: null
	,_antiAlias: null
	,_textureRatioX: null
	,_textureRatioY: null
	,_snapshotBitmapData: null
	,_snapshotRequired: null
	,_clearOnRender: null
	,_rttViewProjectionMatrix: null
	,createEntityCollector: function() {
		return new away3d.core.traverse.EntityCollector();
	}
	,get_viewWidth: function() {
		return this._viewWidth;
	}
	,set_viewWidth: function(value) {
		this._viewWidth = value;
		return value;
	}
	,get_viewHeight: function() {
		return this._viewHeight;
	}
	,set_viewHeight: function(value) {
		this._viewHeight = value;
		return value;
	}
	,get_renderToTexture: function() {
		return this._renderToTexture;
	}
	,get_renderableSorter: function() {
		return this._renderableSorter;
	}
	,set_renderableSorter: function(value) {
		this._renderableSorter = value;
		return value;
	}
	,get_clearOnRender: function() {
		return this._clearOnRender;
	}
	,set_clearOnRender: function(value) {
		this._clearOnRender = value;
		return value;
	}
	,get_backgroundR: function() {
		return this._backgroundR;
	}
	,set_backgroundR: function(value) {
		this._backgroundR = value;
		return value;
	}
	,get_backgroundG: function() {
		return this._backgroundG;
	}
	,set_backgroundG: function(value) {
		this._backgroundG = value;
		return value;
	}
	,get_backgroundB: function() {
		return this._backgroundB;
	}
	,set_backgroundB: function(value) {
		this._backgroundB = value;
		return value;
	}
	,get_stage3DProxy: function() {
		return this._stage3DProxy;
	}
	,set_stage3DProxy: function(value) {
		if(value == this._stage3DProxy) return value;
		if(value == null) {
			if(this._stage3DProxy != null) {
				this._stage3DProxy.removeEventListener(away3d.events.Stage3DEvent.CONTEXT3D_CREATED,$bind(this,this.onContextUpdate));
				this._stage3DProxy.removeEventListener(away3d.events.Stage3DEvent.CONTEXT3D_RECREATED,$bind(this,this.onContextUpdate));
			}
			this._stage3DProxy = null;
			this._context = null;
			return null;
		}
		this._stage3DProxy = value;
		this._stage3DProxy.addEventListener(away3d.events.Stage3DEvent.CONTEXT3D_CREATED,$bind(this,this.onContextUpdate));
		this._stage3DProxy.addEventListener(away3d.events.Stage3DEvent.CONTEXT3D_RECREATED,$bind(this,this.onContextUpdate));
		if(this._backgroundImageRenderer != null) this._backgroundImageRenderer.set_stage3DProxy(value);
		if(value.get_context3D() != null) this._context = value.get_context3D();
		return value;
	}
	,get_shareContext: function() {
		return this._shareContext;
	}
	,set_shareContext: function(value) {
		this._shareContext = value;
		return value;
	}
	,dispose: function() {
		this.set_stage3DProxy(null);
		if(this._backgroundImageRenderer != null) {
			this._backgroundImageRenderer.dispose();
			this._backgroundImageRenderer = null;
		}
	}
	,render: function(entityCollector,target,scissorRect,surfaceSelector) {
		if(surfaceSelector == null) surfaceSelector = 0;
		if(this._stage3DProxy == null || this._context == null) return;
		this._rttViewProjectionMatrix.copyFrom(entityCollector.get_camera().get_viewProjection());
		this._rttViewProjectionMatrix.appendScale(this._textureRatioX,this._textureRatioY,1);
		this.executeRender(entityCollector,target,scissorRect,surfaceSelector);
		var i = 0;
		while(i < 8) {
			this._context.setVertexBufferAt(i,null);
			this._context.setTextureAt(i,null);
			++i;
		}
	}
	,executeRender: function(entityCollector,target,scissorRect,surfaceSelector) {
		if(surfaceSelector == null) surfaceSelector = 0;
		this._renderTarget = target;
		this._renderTargetSurface = surfaceSelector;
		if(this._renderableSorter != null) this._renderableSorter.sort(entityCollector);
		if(this._renderToTexture) this.executeRenderToTexturePass(entityCollector);
		this._stage3DProxy.setRenderTarget(target,true,surfaceSelector);
		if((target != null || !this._shareContext) && this._clearOnRender) this._context.clear(this._backgroundR,this._backgroundG,this._backgroundB,this._backgroundAlpha,1,0);
		this._context.setDepthTest(false,519);
		this._stage3DProxy.set_scissorRect(scissorRect);
		if(this._backgroundImageRenderer != null) this._backgroundImageRenderer.render();
		this.draw(entityCollector,target);
		this._context.setDepthTest(false,515);
		if(!this._shareContext) {
			if(this._snapshotRequired && this._snapshotBitmapData != null) {
				this._context.drawToBitmapData(this._snapshotBitmapData);
				this._snapshotRequired = false;
			}
		}
		this._stage3DProxy.set_scissorRect(null);
	}
	,queueSnapshot: function(bmd) {
		this._snapshotRequired = true;
		this._snapshotBitmapData = bmd;
	}
	,executeRenderToTexturePass: function(entityCollector) {
		throw new away3d.errors.AbstractMethodError();
	}
	,draw: function(entityCollector,target) {
		throw new away3d.errors.AbstractMethodError();
	}
	,onContextUpdate: function(event) {
		this._context = this._stage3DProxy.get_context3D();
	}
	,get_backgroundAlpha: function() {
		return this._backgroundAlpha;
	}
	,set_backgroundAlpha: function(value) {
		this._backgroundAlpha = value;
		return value;
	}
	,get_background: function() {
		return this._background;
	}
	,set_background: function(value) {
		if(this._backgroundImageRenderer != null && value == null) {
			this._backgroundImageRenderer.dispose();
			this._backgroundImageRenderer = null;
		}
		if(this._backgroundImageRenderer == null && value != null) this._backgroundImageRenderer = new away3d.core.render.BackgroundImageRenderer(this._stage3DProxy);
		this._background = value;
		if(this._backgroundImageRenderer != null) this._backgroundImageRenderer.set_texture(value);
		return value;
	}
	,get_backgroundImageRenderer: function() {
		return this._backgroundImageRenderer;
	}
	,get_antiAlias: function() {
		return this._antiAlias;
	}
	,set_antiAlias: function(antiAlias) {
		this._antiAlias = antiAlias;
		return antiAlias;
	}
	,get_textureRatioX: function() {
		return this._textureRatioX;
	}
	,set_textureRatioX: function(value) {
		this._textureRatioX = value;
		return value;
	}
	,get_textureRatioY: function() {
		return this._textureRatioY;
	}
	,set_textureRatioY: function(value) {
		this._textureRatioY = value;
		return value;
	}
	,__class__: away3d.core.render.RendererBase
	,__properties__: {set_textureRatioY:"set_textureRatioY",get_textureRatioY:"get_textureRatioY",set_textureRatioX:"set_textureRatioX",get_textureRatioX:"get_textureRatioX",set_antiAlias:"set_antiAlias",get_antiAlias:"get_antiAlias",get_backgroundImageRenderer:"get_backgroundImageRenderer",set_background:"set_background",get_background:"get_background",set_backgroundAlpha:"set_backgroundAlpha",get_backgroundAlpha:"get_backgroundAlpha",set_shareContext:"set_shareContext",get_shareContext:"get_shareContext",set_stage3DProxy:"set_stage3DProxy",get_stage3DProxy:"get_stage3DProxy",set_backgroundB:"set_backgroundB",get_backgroundB:"get_backgroundB",set_backgroundG:"set_backgroundG",get_backgroundG:"get_backgroundG",set_backgroundR:"set_backgroundR",get_backgroundR:"get_backgroundR",set_clearOnRender:"set_clearOnRender",get_clearOnRender:"get_clearOnRender",set_renderableSorter:"set_renderableSorter",get_renderableSorter:"get_renderableSorter",get_renderToTexture:"get_renderToTexture",set_viewHeight:"set_viewHeight",get_viewHeight:"get_viewHeight",set_viewWidth:"set_viewWidth",get_viewWidth:"get_viewWidth"}
};
away3d.core.render.DefaultRenderer = function() {
	away3d.core.render.RendererBase.call(this);
	this._skyboxProjection = new openfl.geom.Matrix3D();
	this._depthRenderer = new away3d.core.render.DepthRenderer();
	this._distanceRenderer = new away3d.core.render.DepthRenderer(false,true);
};
$hxClasses["away3d.core.render.DefaultRenderer"] = away3d.core.render.DefaultRenderer;
away3d.core.render.DefaultRenderer.__name__ = ["away3d","core","render","DefaultRenderer"];
away3d.core.render.DefaultRenderer.__super__ = away3d.core.render.RendererBase;
away3d.core.render.DefaultRenderer.prototype = $extend(away3d.core.render.RendererBase.prototype,{
	_activeMaterial: null
	,_distanceRenderer: null
	,_depthRenderer: null
	,_skyboxProjection: null
	,set_stage3DProxy: function(value) {
		away3d.core.render.RendererBase.prototype.set_stage3DProxy.call(this,value);
		this._distanceRenderer.set_stage3DProxy(this._depthRenderer.set_stage3DProxy(value));
		return value;
	}
	,executeRender: function(entityCollector,target,scissorRect,surfaceSelector) {
		if(surfaceSelector == null) surfaceSelector = 0;
		this.updateLights(entityCollector);
		if(target != null) {
			this.drawRenderables(entityCollector.get_opaqueRenderableHead(),entityCollector,away3d.core.render.DefaultRenderer.RTT_PASSES);
			this.drawRenderables(entityCollector.get_blendedRenderableHead(),entityCollector,away3d.core.render.DefaultRenderer.RTT_PASSES);
		}
		away3d.core.render.RendererBase.prototype.executeRender.call(this,entityCollector,target,scissorRect,surfaceSelector);
	}
	,updateLights: function(entityCollector) {
		var dirLights = entityCollector.get_directionalLights();
		var pointLights = entityCollector.get_pointLights();
		var len;
		var i;
		var light;
		var shadowMapper;
		len = dirLights.length;
		i = 0;
		while(i < len) {
			light = dirLights[i];
			shadowMapper = light.get_shadowMapper();
			if(light.get_castsShadows() && (shadowMapper.get_autoUpdateShadows() || shadowMapper._shadowsInvalid)) shadowMapper.renderDepthMap(this._stage3DProxy,entityCollector,this._depthRenderer);
			++i;
		}
		len = pointLights.length;
		i = 0;
		while(i < len) {
			light = pointLights[i];
			shadowMapper = light.get_shadowMapper();
			if(light.get_castsShadows() && (shadowMapper.get_autoUpdateShadows() || shadowMapper._shadowsInvalid)) shadowMapper.renderDepthMap(this._stage3DProxy,entityCollector,this._distanceRenderer);
			++i;
		}
	}
	,draw: function(entityCollector,target) {
		this._context.setBlendFactors(1,0);
		if(entityCollector.get_skyBox() != null) {
			if(this._activeMaterial != null) this._activeMaterial.deactivate(this._stage3DProxy);
			this._activeMaterial = null;
			this._context.setDepthTest(false,519);
			this.drawSkyBox(entityCollector);
		}
		this._context.setDepthTest(true,515);
		var which;
		if(target != null) which = away3d.core.render.DefaultRenderer.SCREEN_PASSES; else which = away3d.core.render.DefaultRenderer.ALL_PASSES;
		this.drawRenderables(entityCollector.get_opaqueRenderableHead(),entityCollector,which);
		this.drawRenderables(entityCollector.get_blendedRenderableHead(),entityCollector,which);
		this._context.setDepthTest(false,515);
		if(this._activeMaterial != null) this._activeMaterial.deactivate(this._stage3DProxy);
		this._activeMaterial = null;
	}
	,drawSkyBox: function(entityCollector) {
		var skyBox = entityCollector.get_skyBox();
		var material = skyBox.get_material();
		var camera = entityCollector.get_camera();
		this.updateSkyBoxProjection(camera);
		material.activatePass(0,this._stage3DProxy,camera);
		material.renderPass(0,skyBox,this._stage3DProxy,entityCollector,this._skyboxProjection);
		material.deactivatePass(0,this._stage3DProxy);
	}
	,updateSkyBoxProjection: function(camera) {
		var near = new openfl.geom.Vector3D();
		this._skyboxProjection.copyFrom(this._rttViewProjectionMatrix);
		this._skyboxProjection.copyRowTo(2,near);
		var camPos = camera.get_scenePosition();
		var cx = near.x;
		var cy = near.y;
		var cz = near.z;
		var cw = -(near.x * camPos.x + near.y * camPos.y + near.z * camPos.z + Math.sqrt(cx * cx + cy * cy + cz * cz));
		var signX;
		if(cx >= 0) signX = 1; else signX = -1;
		var signY;
		if(cy >= 0) signY = 1; else signY = -1;
		var p = new openfl.geom.Vector3D(signX,signY,1,1);
		var inverse = this._skyboxProjection.clone();
		inverse.invert();
		var q = inverse.transformVector(p);
		this._skyboxProjection.copyRowTo(3,p);
		var a = (q.x * p.x + q.y * p.y + q.z * p.z + q.w * p.w) / (cx * q.x + cy * q.y + cz * q.z + cw * q.w);
		this._skyboxProjection.copyRowFrom(2,new openfl.geom.Vector3D(cx * a,cy * a,cz * a,cw * a));
	}
	,drawRenderables: function(item,entityCollector,which) {
		var numPasses;
		var j;
		var camera = entityCollector.get_camera();
		var item2;
		while(item != null) {
			this._activeMaterial = item.renderable.get_material();
			this._activeMaterial.updateMaterial(this._context);
			numPasses = this._activeMaterial.get_numPasses();
			j = 0;
			do {
				item2 = item;
				var rttMask;
				if(this._activeMaterial.passRendersToTexture(j)) rttMask = 1; else rttMask = 2;
				if((rttMask & which) != 0) {
					this._activeMaterial.activatePass(j,this._stage3DProxy,camera);
					do {
						this._activeMaterial.renderPass(j,item2.renderable,this._stage3DProxy,entityCollector,this._rttViewProjectionMatrix);
						item2 = item2.next;
					} while(item2 != null && item2.renderable.get_material() == this._activeMaterial);
					this._activeMaterial.deactivatePass(j,this._stage3DProxy);
				} else do item2 = item2.next; while(item2 != null && item2.renderable.get_material() == this._activeMaterial);
			} while(++j < numPasses);
			item = item2;
		}
	}
	,dispose: function() {
		away3d.core.render.RendererBase.prototype.dispose.call(this);
		this._depthRenderer.dispose();
		this._distanceRenderer.dispose();
		this._depthRenderer = null;
		this._distanceRenderer = null;
	}
	,__class__: away3d.core.render.DefaultRenderer
});
away3d.core.render.DepthRenderer = function(renderBlended,distanceBased) {
	if(distanceBased == null) distanceBased = false;
	if(renderBlended == null) renderBlended = false;
	away3d.core.render.RendererBase.call(this);
	this._renderBlended = renderBlended;
	this._distanceBased = distanceBased;
	this._backgroundR = 1;
	this._backgroundG = 1;
	this._backgroundB = 1;
};
$hxClasses["away3d.core.render.DepthRenderer"] = away3d.core.render.DepthRenderer;
away3d.core.render.DepthRenderer.__name__ = ["away3d","core","render","DepthRenderer"];
away3d.core.render.DepthRenderer.__super__ = away3d.core.render.RendererBase;
away3d.core.render.DepthRenderer.prototype = $extend(away3d.core.render.RendererBase.prototype,{
	_activeMaterial: null
	,_renderBlended: null
	,_distanceBased: null
	,_disableColor: null
	,get_disableColor: function() {
		return this._disableColor;
	}
	,set_disableColor: function(value) {
		this._disableColor = value;
		return value;
	}
	,set_backgroundR: function(value) {
		return value;
	}
	,set_backgroundG: function(value) {
		return value;
	}
	,set_backgroundB: function(value) {
		return value;
	}
	,renderCascades: function(entityCollector,target,numCascades,scissorRects,cameras) {
		this._renderTarget = target;
		this._renderTargetSurface = 0;
		this._renderableSorter.sort(entityCollector);
		this._stage3DProxy.setRenderTarget(target,true,0);
		this._context.clear(1,1,1,1,1,0);
		this._context.setBlendFactors(1,0);
		this._context.setDepthTest(true,513);
		var head = entityCollector.get_opaqueRenderableHead();
		var first = true;
		var i = numCascades - 1;
		while(i >= 0) {
			this._stage3DProxy.set_scissorRect(scissorRects[i]);
			this.drawCascadeRenderables(head,cameras[i],first?null:(function($this) {
				var $r;
				var this1 = cameras[i].get_frustumPlanes();
				var value = new Array();
				{
					var _g1 = 0;
					var _g = this1.data.length;
					while(_g1 < _g) {
						var i1 = _g1++;
						value.push(this1.data[i1]);
					}
				}
				$r = value;
				return $r;
			}(this)));
			first = false;
			--i;
		}
		if(this._activeMaterial != null) this._activeMaterial.deactivateForDepth(this._stage3DProxy);
		this._activeMaterial = null;
		this._context.setDepthTest(false,515);
		this._stage3DProxy.set_scissorRect(null);
	}
	,drawCascadeRenderables: function(item,camera,cullPlanes) {
		var material;
		while(item != null) {
			if(item.cascaded) {
				item = item.next;
				continue;
			}
			var renderable = item.renderable;
			var entity = renderable.get_sourceEntity();
			if(cullPlanes == null || entity.get_worldBounds().isInFrustum((function($this) {
				var $r;
				var vectorData = new openfl.VectorData();
				vectorData.length = cullPlanes.length;
				vectorData.fixed = true;
				{
					var vec;
					var this1;
					this1 = new Array(cullPlanes.length);
					vec = this1;
					var _g1 = 0;
					var _g = cullPlanes.length;
					while(_g1 < _g) {
						var i = _g1++;
						vec[i] = cullPlanes[i];
					}
					vectorData.data = vec;
				}
				$r = vectorData;
				return $r;
			}(this)),4)) {
				material = renderable.get_material();
				if(this._activeMaterial != material) {
					if(this._activeMaterial != null) this._activeMaterial.deactivateForDepth(this._stage3DProxy);
					this._activeMaterial = material;
					this._activeMaterial.activateForDepth(this._stage3DProxy,camera,false);
				}
				this._activeMaterial.renderDepth(renderable,this._stage3DProxy,camera,camera.get_viewProjection());
			} else item.cascaded = true;
			item = item.next;
		}
	}
	,draw: function(entityCollector,target) {
		this._context.setBlendFactors(1,0);
		this._context.setDepthTest(true,513);
		this.drawRenderables(entityCollector.get_opaqueRenderableHead(),entityCollector);
		if(this._disableColor) this._context.setColorMask(false,false,false,false);
		if(this._renderBlended) this.drawRenderables(entityCollector.get_blendedRenderableHead(),entityCollector);
		if(this._activeMaterial != null) this._activeMaterial.deactivateForDepth(this._stage3DProxy);
		if(this._disableColor) this._context.setColorMask(true,true,true,true);
		this._activeMaterial = null;
	}
	,drawRenderables: function(item,entityCollector) {
		var camera = entityCollector.get_camera();
		var item2;
		while(item != null) {
			this._activeMaterial = item.renderable.get_material();
			if(this._disableColor && this._activeMaterial.hasDepthAlphaThreshold()) {
				item2 = item;
				do item2 = item2.next; while(item2 != null && item2.renderable.get_material() == this._activeMaterial);
			} else {
				this._activeMaterial.activateForDepth(this._stage3DProxy,camera,this._distanceBased);
				item2 = item;
				do {
					this._activeMaterial.renderDepth(item2.renderable,this._stage3DProxy,camera,this._rttViewProjectionMatrix);
					item2 = item2.next;
				} while(item2 != null && item2.renderable.get_material() == this._activeMaterial);
				this._activeMaterial.deactivateForDepth(this._stage3DProxy);
			}
			item = item2;
		}
	}
	,__class__: away3d.core.render.DepthRenderer
	,__properties__: $extend(away3d.core.render.RendererBase.prototype.__properties__,{set_disableColor:"set_disableColor",get_disableColor:"get_disableColor"})
});
away3d.core.render.Filter3DRenderer = function(stage3DProxy) {
	this._filterSizesInvalid = true;
	this._stage3DProxy = stage3DProxy;
	this._rttManager = away3d.core.managers.RTTBufferManager.getInstance(stage3DProxy);
	this._rttManager.addEventListener(openfl.events.Event.RESIZE,$bind(this,this.onRTTResize));
};
$hxClasses["away3d.core.render.Filter3DRenderer"] = away3d.core.render.Filter3DRenderer;
away3d.core.render.Filter3DRenderer.__name__ = ["away3d","core","render","Filter3DRenderer"];
away3d.core.render.Filter3DRenderer.prototype = {
	_filters: null
	,_tasks: null
	,_filterTasksInvalid: null
	,_mainInputTexture: null
	,_requireDepthRender: null
	,_rttManager: null
	,_stage3DProxy: null
	,_filterSizesInvalid: null
	,onRTTResize: function(event) {
		this._filterSizesInvalid = true;
	}
	,get_requireDepthRender: function() {
		return this._requireDepthRender;
	}
	,getMainInputTexture: function(stage3DProxy) {
		if(this._filterTasksInvalid) this.updateFilterTasks(stage3DProxy);
		return this._mainInputTexture;
	}
	,get_filters: function() {
		return this._filters;
	}
	,set_filters: function(value) {
		this._filters = value;
		this._filterTasksInvalid = true;
		this._requireDepthRender = false;
		if(this._filters == null) return null;
		var i = 0;
		while(i < this._filters.length) {
			if(!this._requireDepthRender) this._requireDepthRender = this._filters[i].get_requireDepthRender();
			++i;
		}
		this._filterSizesInvalid = true;
		return value;
	}
	,updateFilterTasks: function(stage3DProxy) {
		var len;
		if(this._filterSizesInvalid) this.updateFilterSizes();
		if(this._filters == null) {
			this._tasks = null;
			return;
		}
		this._tasks = new Array();
		len = this._filters.length - 1;
		var filter;
		var i = 0;
		while(i <= len) {
			filter = this._filters[i];
			filter.setRenderTargets(i == len?null:this._filters[i + 1].getMainInputTexture(stage3DProxy),stage3DProxy);
			this._tasks = this._tasks.concat(filter.get_tasks());
			++i;
		}
		this._mainInputTexture = this._filters[0].getMainInputTexture(stage3DProxy);
	}
	,render: function(stage3DProxy,camera3D,depthTexture) {
		var len;
		var i;
		var task;
		var context = stage3DProxy.get_context3D();
		var indexBuffer = this._rttManager.get_indexBuffer();
		var vertexBuffer = this._rttManager.get_renderToTextureVertexBuffer();
		if(this._filters == null) return;
		if(this._filterSizesInvalid) this.updateFilterSizes();
		if(this._filterTasksInvalid) this.updateFilterTasks(stage3DProxy);
		len = this._filters.length;
		i = 0;
		while(i < len) {
			this._filters[i].update(stage3DProxy,camera3D);
			++i;
		}
		len = this._tasks.length;
		if(len > 1) {
			context.setVertexBufferAt(0,vertexBuffer,0,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
			context.setVertexBufferAt(1,vertexBuffer,2,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
		}
		i = 0;
		while(i < len) {
			task = this._tasks[i];
			stage3DProxy.setRenderTarget(task.get_target());
			context.setProgram(task.getProgram3D(stage3DProxy));
			if(task.get_target() == null) {
				stage3DProxy.set_scissorRect(null);
				vertexBuffer = this._rttManager.get_renderToScreenVertexBuffer();
				context.setVertexBufferAt(0,vertexBuffer,0,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
				context.setVertexBufferAt(1,vertexBuffer,2,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
			}
			context.setTextureAt(0,task.getMainInputTexture(stage3DProxy));
			context.clear(0.0,0.0,0.0,0.0);
			task.activate(stage3DProxy,camera3D,depthTexture);
			context.setBlendFactors(1,0);
			context.drawTriangles(indexBuffer,0,2);
			task.deactivate(stage3DProxy);
			++i;
		}
		context.setTextureAt(0,null);
		context.setVertexBufferAt(0,null);
		context.setVertexBufferAt(1,null);
	}
	,updateFilterSizes: function() {
		var i = 0;
		while(i < this._filters.length) {
			this._filters[i].set_textureWidth(this._rttManager.get_textureWidth());
			this._filters[i].set_textureHeight(this._rttManager.get_textureHeight());
			++i;
		}
		this._filterSizesInvalid = true;
	}
	,dispose: function() {
		this._rttManager.removeEventListener(openfl.events.Event.RESIZE,$bind(this,this.onRTTResize));
		this._rttManager = null;
		this._stage3DProxy = null;
	}
	,__class__: away3d.core.render.Filter3DRenderer
	,__properties__: {set_filters:"set_filters",get_filters:"get_filters",get_requireDepthRender:"get_requireDepthRender"}
};
away3d.core.sort = {};
away3d.core.sort.IEntitySorter = function() { };
$hxClasses["away3d.core.sort.IEntitySorter"] = away3d.core.sort.IEntitySorter;
away3d.core.sort.IEntitySorter.__name__ = ["away3d","core","sort","IEntitySorter"];
away3d.core.sort.IEntitySorter.prototype = {
	sort: null
	,__class__: away3d.core.sort.IEntitySorter
};
away3d.core.sort.RenderableMergeSort = function() {
};
$hxClasses["away3d.core.sort.RenderableMergeSort"] = away3d.core.sort.RenderableMergeSort;
away3d.core.sort.RenderableMergeSort.__name__ = ["away3d","core","sort","RenderableMergeSort"];
away3d.core.sort.RenderableMergeSort.__interfaces__ = [away3d.core.sort.IEntitySorter];
away3d.core.sort.RenderableMergeSort.prototype = {
	sort: function(collector) {
		collector.set_opaqueRenderableHead(this.mergeSortByMaterial(collector.get_opaqueRenderableHead()));
		collector.set_blendedRenderableHead(this.mergeSortByDepth(collector.get_blendedRenderableHead()));
	}
	,mergeSortByDepth: function(head) {
		var headB;
		var fast;
		var slow;
		if(head == null || head.next == null) return head;
		slow = head;
		fast = head.next;
		while(fast != null) {
			fast = fast.next;
			if(fast != null) {
				slow = slow.next;
				fast = fast.next;
			}
		}
		headB = slow.next;
		slow.next = null;
		head = this.mergeSortByDepth(head);
		headB = this.mergeSortByDepth(headB);
		var result = null;
		var curr = null;
		var l = null;
		if(head == null) return headB;
		if(headB == null) return head;
		while(head != null && headB != null) {
			if(head.zIndex < headB.zIndex) {
				l = head;
				head = head.next;
			} else {
				l = headB;
				headB = headB.next;
			}
			if(result == null) result = l; else curr.next = l;
			curr = l;
		}
		if(head != null) curr.next = head; else if(headB != null) curr.next = headB;
		return result;
	}
	,mergeSortByMaterial: function(head) {
		var headB;
		var fast;
		var slow;
		if(head == null || head.next == null) return head;
		slow = head;
		fast = head.next;
		while(fast != null) {
			fast = fast.next;
			if(fast != null) {
				slow = slow.next;
				fast = fast.next;
			}
		}
		headB = slow.next;
		slow.next = null;
		head = this.mergeSortByMaterial(head);
		headB = this.mergeSortByMaterial(headB);
		var result = null;
		var curr = null;
		var l = null;
		var cmp;
		if(head == null) return headB;
		if(headB == null) return head;
		while(head != null && headB != null && head != null && headB != null) {
			var aid = head.renderOrderId;
			var bid = headB.renderOrderId;
			if(aid == bid) {
				var ma = head.materialId;
				var mb = headB.materialId;
				if(ma == mb) {
					if(head.zIndex < headB.zIndex) cmp = 1; else cmp = -1;
				} else if(ma > mb) cmp = 1; else cmp = -1;
			} else if(aid > bid) cmp = 1; else cmp = -1;
			if(cmp < 0) {
				l = head;
				head = head.next;
			} else {
				l = headB;
				headB = headB.next;
			}
			if(result == null) {
				result = l;
				curr = l;
			} else {
				curr.next = l;
				curr = l;
			}
		}
		if(head != null) curr.next = head; else if(headB != null) curr.next = headB;
		return result;
	}
	,__class__: away3d.core.sort.RenderableMergeSort
};
away3d.core.traverse.ShadowCasterCollector = function() {
	away3d.core.traverse.EntityCollector.call(this);
};
$hxClasses["away3d.core.traverse.ShadowCasterCollector"] = away3d.core.traverse.ShadowCasterCollector;
away3d.core.traverse.ShadowCasterCollector.__name__ = ["away3d","core","traverse","ShadowCasterCollector"];
away3d.core.traverse.ShadowCasterCollector.__super__ = away3d.core.traverse.EntityCollector;
away3d.core.traverse.ShadowCasterCollector.prototype = $extend(away3d.core.traverse.EntityCollector.prototype,{
	applyRenderable: function(renderable) {
		var material = renderable.get_material();
		var entity = renderable.get_sourceEntity();
		if(renderable.get_castsShadows() && material != null) {
			var item = this._renderableListItemPool.getItem();
			item.renderable = renderable;
			item.next = this._opaqueRenderableHead;
			item.cascaded = false;
			var dx = this._entryPoint.x - entity.get_x();
			var dy = this._entryPoint.y - entity.get_y();
			var dz = this._entryPoint.z - entity.get_z();
			item.zIndex = dx * this._cameraForward.x + dy * this._cameraForward.y + dz * this._cameraForward.z;
			item.renderSceneTransform = renderable.getRenderSceneTransform(this._camera);
			item.renderOrderId = material._depthPassId;
			this._opaqueRenderableHead = item;
		}
	}
	,applyUnknownLight: function(light) {
	}
	,applyDirectionalLight: function(light) {
	}
	,applyPointLight: function(light) {
	}
	,applyLightProbe: function(light) {
	}
	,applySkyBox: function(renderable) {
	}
	,__class__: away3d.core.traverse.ShadowCasterCollector
});
away3d.debug = {};
away3d.debug.Debug = function() { };
$hxClasses["away3d.debug.Debug"] = away3d.debug.Debug;
away3d.debug.Debug.__name__ = ["away3d","debug","Debug"];
away3d.debug.Debug.clear = function() {
};
away3d.debug.Debug.delimiter = function() {
};
away3d.debug.Debug.trace = function(message) {
	if(away3d.debug.Debug.active) haxe.Log.trace(message,{ fileName : "Debug.hx", lineNumber : 20, className : "away3d.debug.Debug", methodName : "trace"});
};
away3d.debug.Debug.warning = function(message) {
	if(away3d.debug.Debug.warningsAsErrors) {
		away3d.debug.Debug.error(message);
		return;
	}
	haxe.Log.trace("WARNING: " + Std.string(message),{ fileName : "Debug.hx", lineNumber : 28, className : "away3d.debug.Debug", methodName : "warning"});
};
away3d.debug.Debug.error = function(message) {
	haxe.Log.trace("ERROR: " + Std.string(message),{ fileName : "Debug.hx", lineNumber : 32, className : "away3d.debug.Debug", methodName : "error"});
	throw new openfl.errors.Error(message);
};
away3d.entities.Mesh = function(geometry,material) {
	this._castsShadows = true;
	this._shareAnimationGeometry = true;
	away3d.entities.Entity.call(this);
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this._subMeshes = this1;
	this.set_geometry(geometry);
	if(this.get_geometry() == null) this.set_geometry(new away3d.core.base.Geometry());
	this.set_material(material);
	if(this.get_material() == null) this.set_material(away3d.materials.utils.DefaultMaterialManager.getDefaultMaterial(this));
};
$hxClasses["away3d.entities.Mesh"] = away3d.entities.Mesh;
away3d.entities.Mesh.__name__ = ["away3d","entities","Mesh"];
away3d.entities.Mesh.__interfaces__ = [away3d.library.assets.IAsset,away3d.core.base.IMaterialOwner];
away3d.entities.Mesh.__super__ = away3d.entities.Entity;
away3d.entities.Mesh.prototype = $extend(away3d.entities.Entity.prototype,{
	_subMeshes: null
	,_geometry: null
	,_material: null
	,_animator: null
	,_castsShadows: null
	,_shareAnimationGeometry: null
	,bakeTransformations: function() {
		this.get_geometry().applyTransformation(this.get_transform());
		this.get_transform().identity();
	}
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.MESH;
	}
	,onGeometryBoundsInvalid: function(event) {
		this.invalidateBounds();
	}
	,get_castsShadows: function() {
		return this._castsShadows;
	}
	,set_castsShadows: function(value) {
		this._castsShadows = value;
		return value;
	}
	,get_animator: function() {
		return this._animator;
	}
	,set_animator: function(value) {
		if(this._animator != null) this._animator.removeOwner(this);
		this._animator = value;
		var oldMaterial = this.get_material();
		this.set_material(null);
		this.set_material(oldMaterial);
		var len = this._subMeshes.length;
		var subMesh;
		var i = 0;
		while(i < len) {
			subMesh = this._subMeshes.data[i];
			oldMaterial = subMesh._material;
			if(oldMaterial != null) {
				subMesh.set_material(null);
				subMesh.set_material(oldMaterial);
			}
			++i;
		}
		if(this._animator != null) this._animator.addOwner(this);
		return value;
	}
	,get_geometry: function() {
		return this._geometry;
	}
	,set_geometry: function(value) {
		var i;
		if(this._geometry != null) {
			this._geometry.removeEventListener(away3d.events.GeometryEvent.BOUNDS_INVALID,$bind(this,this.onGeometryBoundsInvalid));
			this._geometry.removeEventListener(away3d.events.GeometryEvent.SUB_GEOMETRY_ADDED,$bind(this,this.onSubGeometryAdded));
			this._geometry.removeEventListener(away3d.events.GeometryEvent.SUB_GEOMETRY_REMOVED,$bind(this,this.onSubGeometryRemoved));
			i = 0;
			while(i < this._subMeshes.length) {
				this._subMeshes.data[i].dispose();
				++i;
			}
			var value1 = [];
			var vectorData = new openfl.VectorData();
			vectorData.length = value1.length;
			vectorData.fixed = true;
			var vec;
			var this1;
			this1 = new Array(value1.length);
			vec = this1;
			var _g1 = 0;
			var _g = value1.length;
			while(_g1 < _g) {
				var i1 = _g1++;
				vec[i1] = value1[i1];
			}
			vectorData.data = vec;
			this._subMeshes = vectorData;
		}
		this._geometry = value;
		if(this._geometry != null) {
			this._geometry.addEventListener(away3d.events.GeometryEvent.BOUNDS_INVALID,$bind(this,this.onGeometryBoundsInvalid));
			this._geometry.addEventListener(away3d.events.GeometryEvent.SUB_GEOMETRY_ADDED,$bind(this,this.onSubGeometryAdded));
			this._geometry.addEventListener(away3d.events.GeometryEvent.SUB_GEOMETRY_REMOVED,$bind(this,this.onSubGeometryRemoved));
			var subGeoms = this._geometry.get_subGeometries();
			i = 0;
			while(i < subGeoms.length) {
				this.addSubMesh(subGeoms.data[i]);
				++i;
			}
		}
		if(this._material != null) {
			this._material.removeOwner(this);
			this._material.addOwner(this);
		}
		return value;
	}
	,get_material: function() {
		return this._material;
	}
	,set_material: function(value) {
		if(value == this._material) return value;
		if(this._material != null) this._material.removeOwner(this);
		this._material = value;
		if(this._material != null) this._material.addOwner(this);
		return value;
	}
	,get_subMeshes: function() {
		this._geometry.validate();
		return this._subMeshes;
	}
	,get_shareAnimationGeometry: function() {
		return this._shareAnimationGeometry;
	}
	,set_shareAnimationGeometry: function(value) {
		this._shareAnimationGeometry = value;
		return value;
	}
	,clearAnimationGeometry: function() {
		var len = this._subMeshes.length;
		var i = 0;
		while(i < len) {
			this._subMeshes.data[i].animationSubGeometry = null;
			++i;
		}
	}
	,dispose: function() {
		away3d.entities.Entity.prototype.dispose.call(this);
		this.set_material(null);
		this.set_geometry(null);
	}
	,disposeWithAnimatorAndChildren: function() {
		this.disposeWithChildren();
		if(this._animator != null) this._animator.dispose();
	}
	,clone: function() {
		var clone = new away3d.entities.Mesh(this._geometry,this._material);
		clone.set_transform(this.get_transform());
		clone.set_pivotPoint(this.get_pivotPoint());
		clone.set_partition(this.get_partition());
		clone.set_bounds(this._bounds.clone());
		clone.set_name(this.get_name());
		clone.set_castsShadows(this.get_castsShadows());
		clone.set_shareAnimationGeometry(this.get_shareAnimationGeometry());
		clone.set_mouseEnabled(this.get_mouseEnabled());
		clone.set_mouseChildren(this.get_mouseChildren());
		clone.extra = this.extra;
		var len = this._subMeshes.length;
		var i = 0;
		while(i < len) {
			clone._subMeshes.data[i]._material = this._subMeshes.data[i]._material;
			++i;
		}
		len = this.get_numChildren();
		i = 0;
		while(i < len) {
			clone.addChild(js.Boot.__cast(this.getChildAt(i).clone() , away3d.containers.ObjectContainer3D));
			++i;
		}
		if(this._animator != null) clone.set_animator(this._animator.clone());
		return clone;
	}
	,updateBounds: function() {
		this._bounds.fromGeometry(this._geometry);
		this._boundsInvalid = false;
	}
	,createEntityPartitionNode: function() {
		return new away3d.core.partition.MeshNode(this);
	}
	,onSubGeometryAdded: function(event) {
		this.addSubMesh(event.get_subGeometry());
	}
	,onSubGeometryRemoved: function(event) {
		var subMesh;
		var subGeom = event.get_subGeometry();
		var len = this._subMeshes.length;
		var i;
		i = 0;
		while(i < len) {
			subMesh = this._subMeshes.data[i];
			if(subMesh.get_subGeometry() == subGeom) {
				subMesh.dispose();
				var this1 = this._subMeshes;
				var pos = i;
				var len1 = 1;
				if(pos < 0) pos += this1.length;
				if(pos + len1 > this1.length) len1 = this1.length - pos;
				if(len1 < 0) len1 = 0;
				var vectorData = new openfl.VectorData();
				vectorData.length = len1;
				vectorData.fixed = false;
				var this2;
				this2 = new Array(len1);
				vectorData.data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos,vectorData.data,0,len1);
				if(len1 > 0) {
					this1.length -= len1;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos + len1,this1.data,pos,this1.length - pos);
				}
				vectorData;
				break;
			}
			++i;
		}
		--len;
		while(i < len) {
			this._subMeshes.data[i]._index = i;
			++i;
		}
	}
	,addSubMesh: function(subGeometry) {
		var subMesh = new away3d.core.base.SubMesh(subGeometry,this,null);
		var len = this._subMeshes.length;
		subMesh._index = len;
		var this1 = this._subMeshes;
		if(!this1.fixed) {
			if(len >= this1.length) this1.length = len + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[len] = subMesh;
		this.invalidateBounds();
	}
	,getSubMeshForSubGeometry: function(subGeometry) {
		var index;
		var this1 = this._geometry.get_subGeometries();
		var value = -1;
		var _g1 = 0;
		var _g = this1.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this1.data[i] == subGeometry) {
				value = i;
				break;
			}
		}
		index = value;
		return this._subMeshes.data[index];
	}
	,collidesBefore: function(shortestCollisionDistance,findClosest) {
		this._pickingCollider.setLocalRay(this._pickingCollisionVO.localRayPosition,this._pickingCollisionVO.localRayDirection);
		this._pickingCollisionVO.renderable = null;
		var len = this._subMeshes.length;
		var i = 0;
		while(i < len) {
			var subMesh = this._subMeshes.data[i];
			if(this._pickingCollider.testSubMeshCollision(subMesh,this._pickingCollisionVO,shortestCollisionDistance)) {
				shortestCollisionDistance = this._pickingCollisionVO.rayEntryDistance;
				this._pickingCollisionVO.renderable = subMesh;
				if(!findClosest) return true;
			}
			++i;
		}
		return this._pickingCollisionVO.renderable != null;
	}
	,__class__: away3d.entities.Mesh
	,__properties__: $extend(away3d.entities.Entity.prototype.__properties__,{set_shareAnimationGeometry:"set_shareAnimationGeometry",get_shareAnimationGeometry:"get_shareAnimationGeometry",get_subMeshes:"get_subMeshes",set_material:"set_material",get_material:"get_material",set_geometry:"set_geometry",get_geometry:"get_geometry",set_animator:"set_animator",get_animator:"get_animator",set_castsShadows:"set_castsShadows",get_castsShadows:"get_castsShadows"})
});
away3d.entities.SegmentSet = function() {
	this._numIndices = 0;
	this._subSetCount = 0;
	this._indexSegments = 0;
	this.LIMIT = 196605;
	away3d.entities.Entity.call(this);
	this._subSetCount = 0;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this._subSets = this1;
	this.addSubSet();
	this._segments = new haxe.ds.IntMap();
	this.set_material(new away3d.materials.SegmentMaterial());
};
$hxClasses["away3d.entities.SegmentSet"] = away3d.entities.SegmentSet;
away3d.entities.SegmentSet.__name__ = ["away3d","entities","SegmentSet"];
away3d.entities.SegmentSet.__interfaces__ = [away3d.core.base.IRenderable];
away3d.entities.SegmentSet.__super__ = away3d.entities.Entity;
away3d.entities.SegmentSet.prototype = $extend(away3d.entities.Entity.prototype,{
	LIMIT: null
	,_activeSubSet: null
	,_subSets: null
	,_subSetCount: null
	,_numIndices: null
	,_material: null
	,_animator: null
	,_hasData: null
	,_segments: null
	,_indexSegments: null
	,addSegment: function(segment) {
		segment.set_segmentsBase(this);
		this._hasData = true;
		var subSetIndex = this._subSets.length - 1;
		var subSet = this._subSets.data[subSetIndex];
		if(subSet.vertices.length + 44 > this.LIMIT) {
			subSet = this.addSubSet();
			subSetIndex++;
		}
		segment.set_index(subSet.vertices.length);
		segment.set_subSetIndex(subSetIndex);
		this.updateSegment(segment);
		var index = subSet.lineCount << 2;
		var this1 = subSet.indices;
		if(!this1.fixed) {
			this1.length++;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
			this1.data[this1.length - 1] = index;
		}
		this1.length;
		var this3 = subSet.indices;
		if(!this3.fixed) {
			this3.length++;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
			this3.data[this3.length - 1] = index + 1;
		}
		this3.length;
		var this5 = subSet.indices;
		if(!this5.fixed) {
			this5.length++;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
			this5.data[this5.length - 1] = index + 2;
		}
		this5.length;
		var this7 = subSet.indices;
		if(!this7.fixed) {
			this7.length++;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
			this7.data[this7.length - 1] = index + 3;
		}
		this7.length;
		var this9 = subSet.indices;
		if(!this9.fixed) {
			this9.length++;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
			this9.data[this9.length - 1] = index + 2;
		}
		this9.length;
		var this11 = subSet.indices;
		if(!this11.fixed) {
			this11.length++;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
			this11.data[this11.length - 1] = index + 1;
		}
		this11.length;
		subSet.numVertices = subSet.vertices.length / 11 | 0;
		subSet.numIndices = subSet.indices.length;
		subSet.lineCount++;
		var segRef = new away3d.entities.SegRef();
		segRef.index = index;
		segRef.subSetIndex = subSetIndex;
		segRef.segment = segment;
		this._segments.set(this._indexSegments,segRef);
		this._indexSegments++;
	}
	,removeSegmentByIndex: function(index,dispose) {
		if(dispose == null) dispose = false;
		var segRef;
		if(index >= this._indexSegments) return;
		if(this._segments.exists(index)) segRef = this._segments.get(index); else return;
		var subSet;
		if(this._subSets.data[segRef.subSetIndex] == null) return;
		var subSetIndex = segRef.subSetIndex;
		subSet = this._subSets.data[segRef.subSetIndex];
		var segment = segRef.segment;
		var indices = subSet.indices;
		var ind = index * 6;
		var _g1 = ind;
		var _g = indices.length;
		while(_g1 < _g) {
			var i = _g1++;
			var _g2 = i;
			if(!indices.fixed) {
				if(_g2 >= indices.length) indices.length = _g2 + 1;
				if(indices.data.length < indices.length) {
					var data;
					var this1;
					this1 = new Array(indices.data.length + 10);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data,0,indices.data.length);
					indices.data = data;
				}
			}
			indices.data[_g2] = indices.data[_g2] - 4;
		}
		var this2 = subSet.indices;
		var pos = index * 6;
		var len = 6;
		if(pos < 0) pos += this2.length;
		if(pos + len > this2.length) len = this2.length - pos;
		if(len < 0) len = 0;
		var vectorData = new openfl.VectorData();
		vectorData.length = len;
		vectorData.fixed = false;
		var this3;
		this3 = new Array(len);
		vectorData.data = this3;
		haxe.ds._Vector.Vector_Impl_.blit(this2.data,pos,vectorData.data,0,len);
		if(len > 0) {
			this2.length -= len;
			haxe.ds._Vector.Vector_Impl_.blit(this2.data,pos + len,this2.data,pos,this2.length - pos);
		}
		vectorData;
		var this4 = subSet.vertices;
		var pos1 = index * 44;
		var len1 = 44;
		if(pos1 < 0) pos1 += this4.length;
		if(pos1 + len1 > this4.length) len1 = this4.length - pos1;
		if(len1 < 0) len1 = 0;
		var vectorData1 = new openfl.VectorData();
		vectorData1.length = len1;
		vectorData1.fixed = false;
		var this5;
		this5 = new Array(len1);
		vectorData1.data = this5;
		haxe.ds._Vector.Vector_Impl_.blit(this4.data,pos1,vectorData1.data,0,len1);
		if(len1 > 0) {
			this4.length -= len1;
			haxe.ds._Vector.Vector_Impl_.blit(this4.data,pos1 + len1,this4.data,pos1,this4.length - pos1);
		}
		vectorData1;
		subSet.numVertices = subSet.vertices.length / 11 | 0;
		subSet.numIndices = indices.length;
		subSet.vertexBufferDirty = true;
		subSet.indexBufferDirty = true;
		subSet.lineCount--;
		if(dispose) {
			segment.dispose();
			segment = null;
		} else {
			segment.set_index(-1);
			segment.set_segmentsBase(null);
		}
		if(subSet.lineCount == 0) {
			if(subSetIndex == 0) this._hasData = false; else {
				subSet.dispose();
				var this6 = this._subSets;
				if(!this6.fixed) {
					if(subSetIndex >= this6.length) this6.length = subSetIndex + 1;
					if(this6.data.length < this6.length) {
						var data1;
						var this7;
						this7 = new Array(this6.data.length + 10);
						data1 = this7;
						haxe.ds._Vector.Vector_Impl_.blit(this6.data,0,data1,0,this6.data.length);
						this6.data = data1;
					}
				}
				this6.data[subSetIndex] = null;
				var this8 = this._subSets;
				var pos2 = subSetIndex;
				var len2 = 1;
				if(pos2 < 0) pos2 += this8.length;
				if(pos2 + len2 > this8.length) len2 = this8.length - pos2;
				if(len2 < 0) len2 = 0;
				var vectorData2 = new openfl.VectorData();
				vectorData2.length = len2;
				vectorData2.fixed = false;
				var this9;
				this9 = new Array(len2);
				vectorData2.data = this9;
				haxe.ds._Vector.Vector_Impl_.blit(this8.data,pos2,vectorData2.data,0,len2);
				if(len2 > 0) {
					this8.length -= len2;
					haxe.ds._Vector.Vector_Impl_.blit(this8.data,pos2 + len2,this8.data,pos2,this8.length - pos2);
				}
				vectorData2;
			}
		}
		this.reOrderIndices(subSetIndex,index);
		segRef = null;
		this._segments.remove(this._indexSegments);
		this._indexSegments--;
	}
	,removeSegment: function(segment,dispose) {
		if(dispose == null) dispose = false;
		if(segment.get_index() == -1) return;
		this.removeSegmentByIndex(Std["int"](segment.get_index() / 44));
	}
	,removeAllSegments: function() {
		var subSet;
		var _g1 = 0;
		var _g = this._subSetCount;
		while(_g1 < _g) {
			var i = _g1++;
			subSet = this._subSets.data[i];
			subSet.vertices = null;
			subSet.indices = null;
			if(subSet.vertexBuffer != null) away3d.core.managers.Stage3DProxy.disposeVertexBuffer(subSet.vertexBuffer);
			if(subSet.indexBuffer != null) away3d.core.managers.Stage3DProxy.disposeIndexBuffer(subSet.indexBuffer);
			subSet = null;
		}
		var iterator = this._segments.iterator();
		while( iterator.hasNext() ) {
			var segReg = iterator.next();
			segReg = null;
		}
		this._segments = null;
		this._subSetCount = 0;
		this._activeSubSet = null;
		this._indexSegments = 0;
		var this1;
		this1 = new openfl.VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		this._subSets = this1;
		this._segments = new haxe.ds.IntMap();
		this.addSubSet();
		this._hasData = false;
	}
	,getSegment: function(index) {
		if(index > this._indexSegments - 1) return null;
		return this._segments.get(index).segment;
	}
	,get_segmentCount: function() {
		return this._indexSegments;
	}
	,get_subSetCount: function() {
		return this._subSetCount;
	}
	,updateSegment: function(segment) {
		var start = segment._start;
		var end = segment._end;
		var startX = start.x;
		var startY = start.y;
		var startZ = start.z;
		var endX = end.x;
		var endY = end.y;
		var endZ = end.z;
		var startR = segment._startR;
		var startG = segment._startG;
		var startB = segment._startB;
		var endR = segment._endR;
		var endG = segment._endG;
		var endB = segment._endB;
		var index = segment.get_index();
		var t = segment.get_thickness();
		var subSet;
		var index1 = segment.get_subSetIndex();
		subSet = this._subSets.data[index1];
		var vertices = subSet.vertices;
		var key = index++;
		if(!vertices.fixed) {
			if(key >= vertices.length) vertices.length = key + 1;
			if(vertices.data.length < vertices.length) {
				var data;
				var this1;
				this1 = new Array(vertices.data.length + 10);
				data = this1;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data,0,vertices.data.length);
				vertices.data = data;
			}
		}
		vertices.data[key] = startX;
		var key1 = index++;
		if(!vertices.fixed) {
			if(key1 >= vertices.length) vertices.length = key1 + 1;
			if(vertices.data.length < vertices.length) {
				var data1;
				var this2;
				this2 = new Array(vertices.data.length + 10);
				data1 = this2;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data1,0,vertices.data.length);
				vertices.data = data1;
			}
		}
		vertices.data[key1] = startY;
		var key2 = index++;
		if(!vertices.fixed) {
			if(key2 >= vertices.length) vertices.length = key2 + 1;
			if(vertices.data.length < vertices.length) {
				var data2;
				var this3;
				this3 = new Array(vertices.data.length + 10);
				data2 = this3;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data2,0,vertices.data.length);
				vertices.data = data2;
			}
		}
		vertices.data[key2] = startZ;
		var key3 = index++;
		if(!vertices.fixed) {
			if(key3 >= vertices.length) vertices.length = key3 + 1;
			if(vertices.data.length < vertices.length) {
				var data3;
				var this4;
				this4 = new Array(vertices.data.length + 10);
				data3 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data3,0,vertices.data.length);
				vertices.data = data3;
			}
		}
		vertices.data[key3] = endX;
		var key4 = index++;
		if(!vertices.fixed) {
			if(key4 >= vertices.length) vertices.length = key4 + 1;
			if(vertices.data.length < vertices.length) {
				var data4;
				var this5;
				this5 = new Array(vertices.data.length + 10);
				data4 = this5;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data4,0,vertices.data.length);
				vertices.data = data4;
			}
		}
		vertices.data[key4] = endY;
		var key5 = index++;
		if(!vertices.fixed) {
			if(key5 >= vertices.length) vertices.length = key5 + 1;
			if(vertices.data.length < vertices.length) {
				var data5;
				var this6;
				this6 = new Array(vertices.data.length + 10);
				data5 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data5,0,vertices.data.length);
				vertices.data = data5;
			}
		}
		vertices.data[key5] = endZ;
		var key6 = index++;
		if(!vertices.fixed) {
			if(key6 >= vertices.length) vertices.length = key6 + 1;
			if(vertices.data.length < vertices.length) {
				var data6;
				var this7;
				this7 = new Array(vertices.data.length + 10);
				data6 = this7;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data6,0,vertices.data.length);
				vertices.data = data6;
			}
		}
		vertices.data[key6] = t;
		var key7 = index++;
		if(!vertices.fixed) {
			if(key7 >= vertices.length) vertices.length = key7 + 1;
			if(vertices.data.length < vertices.length) {
				var data7;
				var this8;
				this8 = new Array(vertices.data.length + 10);
				data7 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data7,0,vertices.data.length);
				vertices.data = data7;
			}
		}
		vertices.data[key7] = startR;
		var key8 = index++;
		if(!vertices.fixed) {
			if(key8 >= vertices.length) vertices.length = key8 + 1;
			if(vertices.data.length < vertices.length) {
				var data8;
				var this9;
				this9 = new Array(vertices.data.length + 10);
				data8 = this9;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data8,0,vertices.data.length);
				vertices.data = data8;
			}
		}
		vertices.data[key8] = startG;
		var key9 = index++;
		if(!vertices.fixed) {
			if(key9 >= vertices.length) vertices.length = key9 + 1;
			if(vertices.data.length < vertices.length) {
				var data9;
				var this10;
				this10 = new Array(vertices.data.length + 10);
				data9 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data9,0,vertices.data.length);
				vertices.data = data9;
			}
		}
		vertices.data[key9] = startB;
		var key10 = index++;
		if(!vertices.fixed) {
			if(key10 >= vertices.length) vertices.length = key10 + 1;
			if(vertices.data.length < vertices.length) {
				var data10;
				var this11;
				this11 = new Array(vertices.data.length + 10);
				data10 = this11;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data10,0,vertices.data.length);
				vertices.data = data10;
			}
		}
		vertices.data[key10] = 1;
		var key11 = index++;
		if(!vertices.fixed) {
			if(key11 >= vertices.length) vertices.length = key11 + 1;
			if(vertices.data.length < vertices.length) {
				var data11;
				var this12;
				this12 = new Array(vertices.data.length + 10);
				data11 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data11,0,vertices.data.length);
				vertices.data = data11;
			}
		}
		vertices.data[key11] = endX;
		var key12 = index++;
		if(!vertices.fixed) {
			if(key12 >= vertices.length) vertices.length = key12 + 1;
			if(vertices.data.length < vertices.length) {
				var data12;
				var this13;
				this13 = new Array(vertices.data.length + 10);
				data12 = this13;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data12,0,vertices.data.length);
				vertices.data = data12;
			}
		}
		vertices.data[key12] = endY;
		var key13 = index++;
		if(!vertices.fixed) {
			if(key13 >= vertices.length) vertices.length = key13 + 1;
			if(vertices.data.length < vertices.length) {
				var data13;
				var this14;
				this14 = new Array(vertices.data.length + 10);
				data13 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data13,0,vertices.data.length);
				vertices.data = data13;
			}
		}
		vertices.data[key13] = endZ;
		var key14 = index++;
		if(!vertices.fixed) {
			if(key14 >= vertices.length) vertices.length = key14 + 1;
			if(vertices.data.length < vertices.length) {
				var data14;
				var this15;
				this15 = new Array(vertices.data.length + 10);
				data14 = this15;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data14,0,vertices.data.length);
				vertices.data = data14;
			}
		}
		vertices.data[key14] = startX;
		var key15 = index++;
		if(!vertices.fixed) {
			if(key15 >= vertices.length) vertices.length = key15 + 1;
			if(vertices.data.length < vertices.length) {
				var data15;
				var this16;
				this16 = new Array(vertices.data.length + 10);
				data15 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data15,0,vertices.data.length);
				vertices.data = data15;
			}
		}
		vertices.data[key15] = startY;
		var key16 = index++;
		if(!vertices.fixed) {
			if(key16 >= vertices.length) vertices.length = key16 + 1;
			if(vertices.data.length < vertices.length) {
				var data16;
				var this17;
				this17 = new Array(vertices.data.length + 10);
				data16 = this17;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data16,0,vertices.data.length);
				vertices.data = data16;
			}
		}
		vertices.data[key16] = startZ;
		var key17 = index++;
		if(!vertices.fixed) {
			if(key17 >= vertices.length) vertices.length = key17 + 1;
			if(vertices.data.length < vertices.length) {
				var data17;
				var this18;
				this18 = new Array(vertices.data.length + 10);
				data17 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data17,0,vertices.data.length);
				vertices.data = data17;
			}
		}
		vertices.data[key17] = -t;
		var key18 = index++;
		if(!vertices.fixed) {
			if(key18 >= vertices.length) vertices.length = key18 + 1;
			if(vertices.data.length < vertices.length) {
				var data18;
				var this19;
				this19 = new Array(vertices.data.length + 10);
				data18 = this19;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data18,0,vertices.data.length);
				vertices.data = data18;
			}
		}
		vertices.data[key18] = endR;
		var key19 = index++;
		if(!vertices.fixed) {
			if(key19 >= vertices.length) vertices.length = key19 + 1;
			if(vertices.data.length < vertices.length) {
				var data19;
				var this20;
				this20 = new Array(vertices.data.length + 10);
				data19 = this20;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data19,0,vertices.data.length);
				vertices.data = data19;
			}
		}
		vertices.data[key19] = endG;
		var key20 = index++;
		if(!vertices.fixed) {
			if(key20 >= vertices.length) vertices.length = key20 + 1;
			if(vertices.data.length < vertices.length) {
				var data20;
				var this21;
				this21 = new Array(vertices.data.length + 10);
				data20 = this21;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data20,0,vertices.data.length);
				vertices.data = data20;
			}
		}
		vertices.data[key20] = endB;
		var key21 = index++;
		if(!vertices.fixed) {
			if(key21 >= vertices.length) vertices.length = key21 + 1;
			if(vertices.data.length < vertices.length) {
				var data21;
				var this22;
				this22 = new Array(vertices.data.length + 10);
				data21 = this22;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data21,0,vertices.data.length);
				vertices.data = data21;
			}
		}
		vertices.data[key21] = 1;
		var key22 = index++;
		if(!vertices.fixed) {
			if(key22 >= vertices.length) vertices.length = key22 + 1;
			if(vertices.data.length < vertices.length) {
				var data22;
				var this23;
				this23 = new Array(vertices.data.length + 10);
				data22 = this23;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data22,0,vertices.data.length);
				vertices.data = data22;
			}
		}
		vertices.data[key22] = startX;
		var key23 = index++;
		if(!vertices.fixed) {
			if(key23 >= vertices.length) vertices.length = key23 + 1;
			if(vertices.data.length < vertices.length) {
				var data23;
				var this24;
				this24 = new Array(vertices.data.length + 10);
				data23 = this24;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data23,0,vertices.data.length);
				vertices.data = data23;
			}
		}
		vertices.data[key23] = startY;
		var key24 = index++;
		if(!vertices.fixed) {
			if(key24 >= vertices.length) vertices.length = key24 + 1;
			if(vertices.data.length < vertices.length) {
				var data24;
				var this25;
				this25 = new Array(vertices.data.length + 10);
				data24 = this25;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data24,0,vertices.data.length);
				vertices.data = data24;
			}
		}
		vertices.data[key24] = startZ;
		var key25 = index++;
		if(!vertices.fixed) {
			if(key25 >= vertices.length) vertices.length = key25 + 1;
			if(vertices.data.length < vertices.length) {
				var data25;
				var this26;
				this26 = new Array(vertices.data.length + 10);
				data25 = this26;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data25,0,vertices.data.length);
				vertices.data = data25;
			}
		}
		vertices.data[key25] = endX;
		var key26 = index++;
		if(!vertices.fixed) {
			if(key26 >= vertices.length) vertices.length = key26 + 1;
			if(vertices.data.length < vertices.length) {
				var data26;
				var this27;
				this27 = new Array(vertices.data.length + 10);
				data26 = this27;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data26,0,vertices.data.length);
				vertices.data = data26;
			}
		}
		vertices.data[key26] = endY;
		var key27 = index++;
		if(!vertices.fixed) {
			if(key27 >= vertices.length) vertices.length = key27 + 1;
			if(vertices.data.length < vertices.length) {
				var data27;
				var this28;
				this28 = new Array(vertices.data.length + 10);
				data27 = this28;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data27,0,vertices.data.length);
				vertices.data = data27;
			}
		}
		vertices.data[key27] = endZ;
		var key28 = index++;
		if(!vertices.fixed) {
			if(key28 >= vertices.length) vertices.length = key28 + 1;
			if(vertices.data.length < vertices.length) {
				var data28;
				var this29;
				this29 = new Array(vertices.data.length + 10);
				data28 = this29;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data28,0,vertices.data.length);
				vertices.data = data28;
			}
		}
		vertices.data[key28] = -t;
		var key29 = index++;
		if(!vertices.fixed) {
			if(key29 >= vertices.length) vertices.length = key29 + 1;
			if(vertices.data.length < vertices.length) {
				var data29;
				var this30;
				this30 = new Array(vertices.data.length + 10);
				data29 = this30;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data29,0,vertices.data.length);
				vertices.data = data29;
			}
		}
		vertices.data[key29] = startR;
		var key30 = index++;
		if(!vertices.fixed) {
			if(key30 >= vertices.length) vertices.length = key30 + 1;
			if(vertices.data.length < vertices.length) {
				var data30;
				var this31;
				this31 = new Array(vertices.data.length + 10);
				data30 = this31;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data30,0,vertices.data.length);
				vertices.data = data30;
			}
		}
		vertices.data[key30] = startG;
		var key31 = index++;
		if(!vertices.fixed) {
			if(key31 >= vertices.length) vertices.length = key31 + 1;
			if(vertices.data.length < vertices.length) {
				var data31;
				var this32;
				this32 = new Array(vertices.data.length + 10);
				data31 = this32;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data31,0,vertices.data.length);
				vertices.data = data31;
			}
		}
		vertices.data[key31] = startB;
		var key32 = index++;
		if(!vertices.fixed) {
			if(key32 >= vertices.length) vertices.length = key32 + 1;
			if(vertices.data.length < vertices.length) {
				var data32;
				var this33;
				this33 = new Array(vertices.data.length + 10);
				data32 = this33;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data32,0,vertices.data.length);
				vertices.data = data32;
			}
		}
		vertices.data[key32] = 1;
		var key33 = index++;
		if(!vertices.fixed) {
			if(key33 >= vertices.length) vertices.length = key33 + 1;
			if(vertices.data.length < vertices.length) {
				var data33;
				var this34;
				this34 = new Array(vertices.data.length + 10);
				data33 = this34;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data33,0,vertices.data.length);
				vertices.data = data33;
			}
		}
		vertices.data[key33] = endX;
		var key34 = index++;
		if(!vertices.fixed) {
			if(key34 >= vertices.length) vertices.length = key34 + 1;
			if(vertices.data.length < vertices.length) {
				var data34;
				var this35;
				this35 = new Array(vertices.data.length + 10);
				data34 = this35;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data34,0,vertices.data.length);
				vertices.data = data34;
			}
		}
		vertices.data[key34] = endY;
		var key35 = index++;
		if(!vertices.fixed) {
			if(key35 >= vertices.length) vertices.length = key35 + 1;
			if(vertices.data.length < vertices.length) {
				var data35;
				var this36;
				this36 = new Array(vertices.data.length + 10);
				data35 = this36;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data35,0,vertices.data.length);
				vertices.data = data35;
			}
		}
		vertices.data[key35] = endZ;
		var key36 = index++;
		if(!vertices.fixed) {
			if(key36 >= vertices.length) vertices.length = key36 + 1;
			if(vertices.data.length < vertices.length) {
				var data36;
				var this37;
				this37 = new Array(vertices.data.length + 10);
				data36 = this37;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data36,0,vertices.data.length);
				vertices.data = data36;
			}
		}
		vertices.data[key36] = startX;
		var key37 = index++;
		if(!vertices.fixed) {
			if(key37 >= vertices.length) vertices.length = key37 + 1;
			if(vertices.data.length < vertices.length) {
				var data37;
				var this38;
				this38 = new Array(vertices.data.length + 10);
				data37 = this38;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data37,0,vertices.data.length);
				vertices.data = data37;
			}
		}
		vertices.data[key37] = startY;
		var key38 = index++;
		if(!vertices.fixed) {
			if(key38 >= vertices.length) vertices.length = key38 + 1;
			if(vertices.data.length < vertices.length) {
				var data38;
				var this39;
				this39 = new Array(vertices.data.length + 10);
				data38 = this39;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data38,0,vertices.data.length);
				vertices.data = data38;
			}
		}
		vertices.data[key38] = startZ;
		var key39 = index++;
		if(!vertices.fixed) {
			if(key39 >= vertices.length) vertices.length = key39 + 1;
			if(vertices.data.length < vertices.length) {
				var data39;
				var this40;
				this40 = new Array(vertices.data.length + 10);
				data39 = this40;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data39,0,vertices.data.length);
				vertices.data = data39;
			}
		}
		vertices.data[key39] = t;
		var key40 = index++;
		if(!vertices.fixed) {
			if(key40 >= vertices.length) vertices.length = key40 + 1;
			if(vertices.data.length < vertices.length) {
				var data40;
				var this41;
				this41 = new Array(vertices.data.length + 10);
				data40 = this41;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data40,0,vertices.data.length);
				vertices.data = data40;
			}
		}
		vertices.data[key40] = endR;
		var key41 = index++;
		if(!vertices.fixed) {
			if(key41 >= vertices.length) vertices.length = key41 + 1;
			if(vertices.data.length < vertices.length) {
				var data41;
				var this42;
				this42 = new Array(vertices.data.length + 10);
				data41 = this42;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data41,0,vertices.data.length);
				vertices.data = data41;
			}
		}
		vertices.data[key41] = endG;
		var key42 = index++;
		if(!vertices.fixed) {
			if(key42 >= vertices.length) vertices.length = key42 + 1;
			if(vertices.data.length < vertices.length) {
				var data42;
				var this43;
				this43 = new Array(vertices.data.length + 10);
				data42 = this43;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data42,0,vertices.data.length);
				vertices.data = data42;
			}
		}
		vertices.data[key42] = endB;
		var key43 = index++;
		if(!vertices.fixed) {
			if(key43 >= vertices.length) vertices.length = key43 + 1;
			if(vertices.data.length < vertices.length) {
				var data43;
				var this44;
				this44 = new Array(vertices.data.length + 10);
				data43 = this44;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data43,0,vertices.data.length);
				vertices.data = data43;
			}
		}
		vertices.data[key43] = 1;
		subSet.vertexBufferDirty = true;
		this.invalidateBounds();
	}
	,get_hasData: function() {
		return this._hasData;
	}
	,getIndexBuffer: function(stage3DProxy) {
		if(this._activeSubSet.indexContext3D != stage3DProxy.get_context3D() || this._activeSubSet.indexBufferDirty) {
			this._activeSubSet.indexBuffer = stage3DProxy.createIndexBuffer(this._activeSubSet.numIndices);
			this._activeSubSet.indexBuffer.uploadFromVector(this._activeSubSet.indices,0,this._activeSubSet.numIndices);
			this._activeSubSet.indexBufferDirty = false;
			this._activeSubSet.indexContext3D = stage3DProxy.get_context3D();
		}
		return this._activeSubSet.indexBuffer;
	}
	,activateVertexBuffer: function(index,stage3DProxy) {
		var subSet = this._subSets.data[index];
		this._activeSubSet = subSet;
		this._numIndices = subSet.numIndices;
		if(subSet.vertexContext3D != stage3DProxy.get_context3D() || subSet.vertexBufferDirty) {
			if(subSet.vertexBuffer != null) away3d.core.managers.Stage3DProxy.disposeVertexBuffer(subSet.vertexBuffer);
			subSet.vertexBuffer = stage3DProxy.createVertexBuffer(subSet.numVertices,11);
			subSet.vertexBuffer.uploadFromVector(subSet.vertices,0,subSet.numVertices);
			subSet.vertexBufferDirty = false;
			subSet.vertexContext3D = stage3DProxy.get_context3D();
		}
		var vertexBuffer = subSet.vertexBuffer;
		var context3d = stage3DProxy._context3D;
		context3d.setVertexBufferAt(0,vertexBuffer,0,openfl.display3D.Context3DVertexBufferFormat.FLOAT_3);
		context3d.setVertexBufferAt(1,vertexBuffer,3,openfl.display3D.Context3DVertexBufferFormat.FLOAT_3);
		context3d.setVertexBufferAt(2,vertexBuffer,6,openfl.display3D.Context3DVertexBufferFormat.FLOAT_1);
		context3d.setVertexBufferAt(3,vertexBuffer,7,openfl.display3D.Context3DVertexBufferFormat.FLOAT_4);
	}
	,activateUVBuffer: function(index,stage3DProxy) {
	}
	,activateVertexNormalBuffer: function(index,stage3DProxy) {
	}
	,activateVertexTangentBuffer: function(index,stage3DProxy) {
	}
	,activateSecondaryUVBuffer: function(index,stage3DProxy) {
	}
	,reOrderIndices: function(subSetIndex,index) {
		var segRef;
		var _g1 = index;
		var _g = this._indexSegments - 1;
		while(_g1 < _g) {
			var i = _g1++;
			segRef = this._segments.get(i + 1);
			segRef.index = i;
			if(segRef.subSetIndex == subSetIndex) {
				var _g2 = segRef.segment;
				_g2.set_index(_g2.get_index() - 44);
			}
			this._segments.set(i,segRef);
		}
	}
	,addSubSet: function() {
		var subSet = new away3d.entities.SubSet();
		var this1 = this._subSets;
		if(!this1.fixed) {
			this1.length++;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
			this1.data[this1.length - 1] = subSet;
		}
		this1.length;
		var this3;
		this3 = new openfl.VectorData();
		var this4;
		this4 = new Array(0);
		this3.data = this4;
		this3.length = 0;
		this3.fixed = false;
		subSet.vertices = this3;
		subSet.numVertices = 0;
		var this5;
		this5 = new openfl.VectorData();
		var this6;
		this6 = new Array(0);
		this5.data = this6;
		this5.length = 0;
		this5.fixed = false;
		subSet.indices = this5;
		subSet.numIndices = 0;
		subSet.vertexBufferDirty = true;
		subSet.indexBufferDirty = true;
		subSet.lineCount = 0;
		this._subSetCount++;
		return subSet;
	}
	,dispose: function() {
		away3d.entities.Entity.prototype.dispose.call(this);
		this.removeAllSegments();
		this._segments = null;
		this._material = null;
		var subSet = this._subSets.data[0];
		subSet.vertices = null;
		subSet.indices = null;
		this._subSets = null;
	}
	,get_mouseEnabled: function() {
		return false;
	}
	,getDefaultBoundingVolume: function() {
		return new away3d.bounds.BoundingSphere();
	}
	,updateBounds: function() {
		var subSet;
		var len;
		var v;
		var index;
		var minX = Math.POSITIVE_INFINITY;
		var minY = Math.POSITIVE_INFINITY;
		var minZ = Math.POSITIVE_INFINITY;
		var maxX = Math.NEGATIVE_INFINITY;
		var maxY = Math.NEGATIVE_INFINITY;
		var maxZ = Math.NEGATIVE_INFINITY;
		var vertices;
		var i = 0;
		while(i < this._subSetCount) {
			subSet = this._subSets.data[i];
			index = 0;
			vertices = subSet.vertices;
			len = vertices.length;
			if(len == 0) {
				++i;
				continue;
			}
			while(index < len) {
				var index1 = index++;
				v = vertices.data[index1];
				if(v < minX) minX = v; else if(v > maxX) maxX = v;
				var index2 = index++;
				v = vertices.data[index2];
				if(v < minY) minY = v; else if(v > maxY) maxY = v;
				var index3 = index++;
				v = vertices.data[index3];
				if(v < minZ) minZ = v; else if(v > maxZ) maxZ = v;
				index += 8;
			}
			++i;
		}
		if(minX != Math.POSITIVE_INFINITY) this._bounds.fromExtremes(minX,minY,minZ,maxX,maxY,maxZ); else {
			var min = .5;
			this._bounds.fromExtremes(-min,-min,-min,min,min,min);
		}
		this._boundsInvalid = false;
	}
	,createEntityPartitionNode: function() {
		return new away3d.core.partition.RenderableNode(this);
	}
	,get_numTriangles: function() {
		return this._numIndices * 0.3333333 | 0;
	}
	,get_sourceEntity: function() {
		return this;
	}
	,get_castsShadows: function() {
		return false;
	}
	,get_material: function() {
		return this._material;
	}
	,get_animator: function() {
		return this._animator;
	}
	,set_material: function(value) {
		if(value == this._material) return value;
		if(this._material != null) this._material.removeOwner(this);
		this._material = value;
		if(this._material != null) this._material.addOwner(this);
		return value;
	}
	,get_uvTransform: function() {
		return null;
	}
	,get_vertexData: function() {
		return null;
	}
	,get_indexData: function() {
		return null;
	}
	,get_UVData: function() {
		return null;
	}
	,get_numVertices: function() {
		return 0;
	}
	,get_vertexStride: function() {
		return 11;
	}
	,get_vertexNormalData: function() {
		return null;
	}
	,get_vertexTangentData: function() {
		return null;
	}
	,get_vertexOffset: function() {
		return 0;
	}
	,get_vertexNormalOffset: function() {
		return 0;
	}
	,get_vertexTangentOffset: function() {
		return 0;
	}
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.SEGMENT_SET;
	}
	,getRenderSceneTransform: function(camera) {
		return this._sceneTransform;
	}
	,__class__: away3d.entities.SegmentSet
	,__properties__: $extend(away3d.entities.Entity.prototype.__properties__,{get_vertexTangentOffset:"get_vertexTangentOffset",get_vertexNormalOffset:"get_vertexNormalOffset",get_vertexOffset:"get_vertexOffset",get_vertexTangentData:"get_vertexTangentData",get_vertexNormalData:"get_vertexNormalData",get_vertexStride:"get_vertexStride",get_numVertices:"get_numVertices",get_UVData:"get_UVData",get_indexData:"get_indexData",get_vertexData:"get_vertexData",get_uvTransform:"get_uvTransform",get_animator:"get_animator",set_material:"set_material",get_material:"get_material",get_castsShadows:"get_castsShadows",get_sourceEntity:"get_sourceEntity",get_numTriangles:"get_numTriangles",get_hasData:"get_hasData",get_subSetCount:"get_subSetCount",get_segmentCount:"get_segmentCount"})
});
away3d.entities.SegRef = function() {
};
$hxClasses["away3d.entities.SegRef"] = away3d.entities.SegRef;
away3d.entities.SegRef.__name__ = ["away3d","entities","SegRef"];
away3d.entities.SegRef.prototype = {
	index: null
	,subSetIndex: null
	,segment: null
	,__class__: away3d.entities.SegRef
};
away3d.entities.SubSet = function() {
};
$hxClasses["away3d.entities.SubSet"] = away3d.entities.SubSet;
away3d.entities.SubSet.__name__ = ["away3d","entities","SubSet"];
away3d.entities.SubSet.prototype = {
	vertices: null
	,numVertices: null
	,indices: null
	,numIndices: null
	,vertexBufferDirty: null
	,indexBufferDirty: null
	,vertexContext3D: null
	,indexContext3D: null
	,vertexBuffer: null
	,indexBuffer: null
	,lineCount: null
	,dispose: function() {
		this.vertices = null;
		if(this.vertexBuffer != null) away3d.core.managers.Stage3DProxy.disposeVertexBuffer(this.vertexBuffer);
		if(this.indexBuffer != null) away3d.core.managers.Stage3DProxy.disposeIndexBuffer(this.indexBuffer);
	}
	,__class__: away3d.entities.SubSet
};
openfl.errors = {};
openfl.errors.Error = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "";
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["openfl.errors.Error"] = openfl.errors.Error;
openfl.errors.Error.__name__ = ["openfl","errors","Error"];
openfl.errors.Error.prototype = {
	errorID: null
	,message: null
	,name: null
	,getStackTrace: function() {
		return haxe.CallStack.toString(haxe.CallStack.exceptionStack());
	}
	,toString: function() {
		if(this.message != null) return this.message; else return "Error";
	}
	,__class__: openfl.errors.Error
};
away3d.errors = {};
away3d.errors.AbstractMethodError = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "An abstract method was called! Either an instance of an abstract class was created, or an abstract method was not overridden by the subclass.";
	openfl.errors.Error.call(this,message,id);
};
$hxClasses["away3d.errors.AbstractMethodError"] = away3d.errors.AbstractMethodError;
away3d.errors.AbstractMethodError.__name__ = ["away3d","errors","AbstractMethodError"];
away3d.errors.AbstractMethodError.__super__ = openfl.errors.Error;
away3d.errors.AbstractMethodError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: away3d.errors.AbstractMethodError
});
away3d.events.Asset3DEvent = function(type,asset,prevName) {
	openfl.events.Event.call(this,type);
	this._asset = asset;
	if(prevName != null) this._prevName = prevName; else if(this._asset != null) this._prevName = this._asset.get_name(); else this._prevName = null;
};
$hxClasses["away3d.events.Asset3DEvent"] = away3d.events.Asset3DEvent;
away3d.events.Asset3DEvent.__name__ = ["away3d","events","Asset3DEvent"];
away3d.events.Asset3DEvent.__super__ = openfl.events.Event;
away3d.events.Asset3DEvent.prototype = $extend(openfl.events.Event.prototype,{
	_asset: null
	,_prevName: null
	,get_asset: function() {
		return this._asset;
	}
	,get_assetPrevName: function() {
		return this._prevName;
	}
	,clone: function() {
		var a = new away3d.events.Asset3DEvent(this.type,this.get_asset(),this.get_assetPrevName());
		return a;
	}
	,__class__: away3d.events.Asset3DEvent
	,__properties__: {get_assetPrevName:"get_assetPrevName",get_asset:"get_asset"}
});
away3d.events.CameraEvent = function(type,camera,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this._camera = camera;
};
$hxClasses["away3d.events.CameraEvent"] = away3d.events.CameraEvent;
away3d.events.CameraEvent.__name__ = ["away3d","events","CameraEvent"];
away3d.events.CameraEvent.__super__ = openfl.events.Event;
away3d.events.CameraEvent.prototype = $extend(openfl.events.Event.prototype,{
	_camera: null
	,get_camera: function() {
		return this._camera;
	}
	,clone: function() {
		return new away3d.events.CameraEvent(this.type,this._camera,this.bubbles,this.cancelable);
	}
	,__class__: away3d.events.CameraEvent
	,__properties__: {get_camera:"get_camera"}
});
away3d.events.GeometryEvent = function(type,subGeometry) {
	openfl.events.Event.call(this,type,false,false);
	this._subGeometry = subGeometry;
};
$hxClasses["away3d.events.GeometryEvent"] = away3d.events.GeometryEvent;
away3d.events.GeometryEvent.__name__ = ["away3d","events","GeometryEvent"];
away3d.events.GeometryEvent.__super__ = openfl.events.Event;
away3d.events.GeometryEvent.prototype = $extend(openfl.events.Event.prototype,{
	_subGeometry: null
	,get_subGeometry: function() {
		return this._subGeometry;
	}
	,clone: function() {
		return new away3d.events.GeometryEvent(this.type,this._subGeometry);
	}
	,__class__: away3d.events.GeometryEvent
	,__properties__: {get_subGeometry:"get_subGeometry"}
});
away3d.events.LensEvent = function(type,lens,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this._lens = lens;
};
$hxClasses["away3d.events.LensEvent"] = away3d.events.LensEvent;
away3d.events.LensEvent.__name__ = ["away3d","events","LensEvent"];
away3d.events.LensEvent.__super__ = openfl.events.Event;
away3d.events.LensEvent.prototype = $extend(openfl.events.Event.prototype,{
	_lens: null
	,get_lens: function() {
		return this._lens;
	}
	,clone: function() {
		return new away3d.events.LensEvent(this.type,this._lens,this.bubbles,this.cancelable);
	}
	,__class__: away3d.events.LensEvent
	,__properties__: {get_lens:"get_lens"}
});
away3d.events.LightEvent = function(type) {
	openfl.events.Event.call(this,type);
};
$hxClasses["away3d.events.LightEvent"] = away3d.events.LightEvent;
away3d.events.LightEvent.__name__ = ["away3d","events","LightEvent"];
away3d.events.LightEvent.__super__ = openfl.events.Event;
away3d.events.LightEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		return new away3d.events.LightEvent(this.type);
	}
	,__class__: away3d.events.LightEvent
});
away3d.events.Object3DEvent = function(type,object) {
	openfl.events.Event.call(this,type);
	this.object = object;
};
$hxClasses["away3d.events.Object3DEvent"] = away3d.events.Object3DEvent;
away3d.events.Object3DEvent.__name__ = ["away3d","events","Object3DEvent"];
away3d.events.Object3DEvent.__super__ = openfl.events.Event;
away3d.events.Object3DEvent.prototype = $extend(openfl.events.Event.prototype,{
	object: null
	,clone: function() {
		return new away3d.events.Object3DEvent(this.type,this.object);
	}
	,__class__: away3d.events.Object3DEvent
});
away3d.events.Scene3DEvent = function(type,objectContainer) {
	this.objectContainer3D = objectContainer;
	openfl.events.Event.call(this,type);
};
$hxClasses["away3d.events.Scene3DEvent"] = away3d.events.Scene3DEvent;
away3d.events.Scene3DEvent.__name__ = ["away3d","events","Scene3DEvent"];
away3d.events.Scene3DEvent.__super__ = openfl.events.Event;
away3d.events.Scene3DEvent.prototype = $extend(openfl.events.Event.prototype,{
	objectContainer3D: null
	,clone: function() {
		return new away3d.events.Scene3DEvent(this.type,this.objectContainer3D);
	}
	,__class__: away3d.events.Scene3DEvent
});
away3d.events.ShadingMethodEvent = function(type,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
};
$hxClasses["away3d.events.ShadingMethodEvent"] = away3d.events.ShadingMethodEvent;
away3d.events.ShadingMethodEvent.__name__ = ["away3d","events","ShadingMethodEvent"];
away3d.events.ShadingMethodEvent.__super__ = openfl.events.Event;
away3d.events.ShadingMethodEvent.prototype = $extend(openfl.events.Event.prototype,{
	__class__: away3d.events.ShadingMethodEvent
});
away3d.events.Stage3DEvent = function(type,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
};
$hxClasses["away3d.events.Stage3DEvent"] = away3d.events.Stage3DEvent;
away3d.events.Stage3DEvent.__name__ = ["away3d","events","Stage3DEvent"];
away3d.events.Stage3DEvent.__super__ = openfl.events.Event;
away3d.events.Stage3DEvent.prototype = $extend(openfl.events.Event.prototype,{
	__class__: away3d.events.Stage3DEvent
});
away3d.events.TouchEvent3D = function(type) {
	this._allowedToPropagate = true;
	openfl.events.Event.call(this,type,true,true);
};
$hxClasses["away3d.events.TouchEvent3D"] = away3d.events.TouchEvent3D;
away3d.events.TouchEvent3D.__name__ = ["away3d","events","TouchEvent3D"];
away3d.events.TouchEvent3D.__super__ = openfl.events.Event;
away3d.events.TouchEvent3D.prototype = $extend(openfl.events.Event.prototype,{
	_allowedToPropagate: null
	,_parentEvent: null
	,screenX: null
	,screenY: null
	,view: null
	,object: null
	,renderable: null
	,material: null
	,uv: null
	,index: null
	,subGeometryIndex: null
	,localPosition: null
	,localNormal: null
	,ctrlKey: null
	,altKey: null
	,shiftKey: null
	,touchPointID: null
	,stopPropagation: function() {
		openfl.events.Event.prototype.stopPropagation.call(this);
		this._allowedToPropagate = false;
		if(this._parentEvent != null) this._parentEvent._allowedToPropagate = false;
	}
	,stopImmediatePropagation: function() {
		openfl.events.Event.prototype.stopImmediatePropagation.call(this);
		this._allowedToPropagate = false;
		if(this._parentEvent != null) this._parentEvent._allowedToPropagate = false;
	}
	,clone: function() {
		var result = new away3d.events.TouchEvent3D(this.type);
		result.screenX = this.screenX;
		result.screenY = this.screenY;
		result.view = this.view;
		result.object = this.object;
		result.renderable = this.renderable;
		result.material = this.material;
		result.uv = this.uv;
		result.localPosition = this.localPosition;
		result.localNormal = this.localNormal;
		result.index = this.index;
		result.subGeometryIndex = this.subGeometryIndex;
		result.ctrlKey = this.ctrlKey;
		result.shiftKey = this.shiftKey;
		result._parentEvent = this;
		return result;
	}
	,get_scenePosition: function() {
		if(js.Boot.__instanceof(this.object,away3d.containers.ObjectContainer3D)) return (js.Boot.__cast(this.object , away3d.containers.ObjectContainer3D)).get_sceneTransform().transformVector(this.localPosition); else return this.localPosition;
	}
	,get_sceneNormal: function() {
		if(js.Boot.__instanceof(this.object,away3d.containers.ObjectContainer3D)) {
			var sceneNormal = (js.Boot.__cast(this.object , away3d.containers.ObjectContainer3D)).get_sceneTransform().deltaTransformVector(this.localNormal);
			sceneNormal.normalize();
			return sceneNormal;
		} else return this.localNormal;
	}
	,__class__: away3d.events.TouchEvent3D
	,__properties__: {get_sceneNormal:"get_sceneNormal",get_scenePosition:"get_scenePosition"}
});
away3d.filters = {};
away3d.filters.Filter3DBase = function() {
	this._tasks = new Array();
};
$hxClasses["away3d.filters.Filter3DBase"] = away3d.filters.Filter3DBase;
away3d.filters.Filter3DBase.__name__ = ["away3d","filters","Filter3DBase"];
away3d.filters.Filter3DBase.prototype = {
	_tasks: null
	,_requireDepthRender: null
	,_textureWidth: null
	,_textureHeight: null
	,get_requireDepthRender: function() {
		return this._requireDepthRender;
	}
	,addTask: function(filter) {
		this._tasks.push(filter);
		if(!this._requireDepthRender) this._requireDepthRender = filter.get_requireDepthRender();
	}
	,get_tasks: function() {
		return this._tasks;
	}
	,getMainInputTexture: function(stage3DProxy) {
		return this._tasks[0].getMainInputTexture(stage3DProxy);
	}
	,get_textureWidth: function() {
		return this._textureWidth;
	}
	,set_textureWidth: function(value) {
		this._textureWidth = value;
		var i = 0;
		while(i < this._tasks.length) {
			this._tasks[i].set_textureWidth(value);
			++i;
		}
		return value;
	}
	,get_textureHeight: function() {
		return this._textureHeight;
	}
	,set_textureHeight: function(value) {
		this._textureHeight = value;
		var i = 0;
		while(i < this._tasks.length) {
			this._tasks[i].set_textureHeight(value);
			++i;
		}
		return value;
	}
	,setRenderTargets: function(mainTarget,stage3DProxy) {
		this._tasks[this._tasks.length - 1].set_target(mainTarget);
	}
	,dispose: function() {
		var i = 0;
		while(i < this._tasks.length) {
			this._tasks[i].dispose();
			++i;
		}
	}
	,update: function(stage,camera) {
	}
	,__class__: away3d.filters.Filter3DBase
	,__properties__: {set_textureHeight:"set_textureHeight",get_textureHeight:"get_textureHeight",set_textureWidth:"set_textureWidth",get_textureWidth:"get_textureWidth",get_tasks:"get_tasks",get_requireDepthRender:"get_requireDepthRender"}
};
away3d.filters.tasks = {};
away3d.filters.tasks.Filter3DTaskBase = function(requireDepthRender) {
	if(requireDepthRender == null) requireDepthRender = false;
	this._scaledTextureWidth = -1;
	this._scaledTextureHeight = -1;
	this._textureWidth = -1;
	this._textureHeight = -1;
	this._textureDimensionsInvalid = true;
	this._program3DInvalid = true;
	this._textureScale = 0;
	this._requireDepthRender = requireDepthRender;
};
$hxClasses["away3d.filters.tasks.Filter3DTaskBase"] = away3d.filters.tasks.Filter3DTaskBase;
away3d.filters.tasks.Filter3DTaskBase.__name__ = ["away3d","filters","tasks","Filter3DTaskBase"];
away3d.filters.tasks.Filter3DTaskBase.prototype = {
	_mainInputTexture: null
	,_scaledTextureWidth: null
	,_scaledTextureHeight: null
	,_textureWidth: null
	,_textureHeight: null
	,_textureDimensionsInvalid: null
	,_program3DInvalid: null
	,_program3D: null
	,_target: null
	,_requireDepthRender: null
	,_textureScale: null
	,get_textureScale: function() {
		return this._textureScale;
	}
	,set_textureScale: function(value) {
		if(this._textureScale == value) return value;
		this._textureScale = value;
		this._scaledTextureWidth = this._textureWidth >> this._textureScale;
		this._scaledTextureHeight = this._textureHeight >> this._textureScale;
		this._textureDimensionsInvalid = true;
		return value;
	}
	,get_target: function() {
		return this._target;
	}
	,set_target: function(value) {
		this._target = value;
		return value;
	}
	,get_textureWidth: function() {
		return this._textureWidth;
	}
	,set_textureWidth: function(value) {
		if(this._textureWidth == value) return value;
		this._textureWidth = value;
		this._scaledTextureWidth = this._textureWidth >> this._textureScale;
		this._textureDimensionsInvalid = true;
		return value;
	}
	,get_textureHeight: function() {
		return this._textureHeight;
	}
	,set_textureHeight: function(value) {
		if(this._textureHeight == value) return value;
		this._textureHeight = value;
		this._scaledTextureHeight = this._textureHeight >> this._textureScale;
		this._textureDimensionsInvalid = true;
		return value;
	}
	,getMainInputTexture: function(stage) {
		if(this._textureDimensionsInvalid) this.updateTextures(stage);
		return this._mainInputTexture;
	}
	,dispose: function() {
		if(this._mainInputTexture != null) this._mainInputTexture.dispose();
		if(this._program3D != null) this._program3D.dispose();
	}
	,invalidateProgram3D: function() {
		this._program3DInvalid = true;
	}
	,updateProgram3D: function(stage) {
		if(this._program3D != null) this._program3D.dispose();
		this._program3D = stage.get_context3D().createProgram();
		this._program3D.upload(openfl.display3D._shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.VERTEX,this.getVertexCode()),openfl.display3D._shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.FRAGMENT,this.getFragmentCode()));
		this._program3DInvalid = false;
	}
	,getVertexCode: function() {
		return "mov op, va0\n" + "mov v0, va1\n";
	}
	,getFragmentCode: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,updateTextures: function(stage) {
		if(this._mainInputTexture != null) this._mainInputTexture.dispose();
		this._mainInputTexture = stage.get_context3D().createTexture(this._scaledTextureWidth,this._scaledTextureHeight,openfl.display3D.Context3DTextureFormat.BGRA,true);
		this._textureDimensionsInvalid = false;
	}
	,getProgram3D: function(stage3DProxy) {
		if(this._program3DInvalid) this.updateProgram3D(stage3DProxy);
		return this._program3D;
	}
	,activate: function(stage3DProxy,camera,depthTexture) {
	}
	,deactivate: function(stage3DProxy) {
	}
	,get_requireDepthRender: function() {
		return this._requireDepthRender;
	}
	,__class__: away3d.filters.tasks.Filter3DTaskBase
	,__properties__: {get_requireDepthRender:"get_requireDepthRender",set_textureHeight:"set_textureHeight",get_textureHeight:"get_textureHeight",set_textureWidth:"set_textureWidth",get_textureWidth:"get_textureWidth",set_target:"set_target",get_target:"get_target",set_textureScale:"set_textureScale",get_textureScale:"get_textureScale"}
};
away3d.library.assets.Asset3DType = function() { };
$hxClasses["away3d.library.assets.Asset3DType"] = away3d.library.assets.Asset3DType;
away3d.library.assets.Asset3DType.__name__ = ["away3d","library","assets","Asset3DType"];
away3d.lights = {};
away3d.lights.LightBase = function() {
	this._color = 16777215;
	this._colorR = 1;
	this._colorG = 1;
	this._colorB = 1;
	this._ambientColor = 16777215;
	this._ambient = 0;
	this._ambientR = 0;
	this._ambientG = 0;
	this._ambientB = 0;
	this._specular = 1;
	this._specularR = 1;
	this._specularG = 1;
	this._specularB = 1;
	this._diffuse = 1;
	this._diffuseR = 1;
	this._diffuseG = 1;
	this._diffuseB = 1;
	away3d.entities.Entity.call(this);
};
$hxClasses["away3d.lights.LightBase"] = away3d.lights.LightBase;
away3d.lights.LightBase.__name__ = ["away3d","lights","LightBase"];
away3d.lights.LightBase.__super__ = away3d.entities.Entity;
away3d.lights.LightBase.prototype = $extend(away3d.entities.Entity.prototype,{
	_color: null
	,_colorR: null
	,_colorG: null
	,_colorB: null
	,_ambientColor: null
	,_ambient: null
	,_ambientR: null
	,_ambientG: null
	,_ambientB: null
	,_specular: null
	,_specularR: null
	,_specularG: null
	,_specularB: null
	,_diffuse: null
	,_diffuseR: null
	,_diffuseG: null
	,_diffuseB: null
	,_castsShadows: null
	,_shadowMapper: null
	,get_castsShadows: function() {
		return this._castsShadows;
	}
	,set_castsShadows: function(value) {
		if(this._castsShadows == value) return value;
		this._castsShadows = value;
		if(value) {
			if(this._shadowMapper == null) this._shadowMapper = this.createShadowMapper();
			this._shadowMapper.set_light(this);
		} else {
			if(this._shadowMapper != null) this._shadowMapper.dispose();
			this._shadowMapper = null;
		}
		this.dispatchEvent(new away3d.events.LightEvent(away3d.events.LightEvent.CASTS_SHADOW_CHANGE));
		return value;
	}
	,createShadowMapper: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,get_specular: function() {
		return this._specular;
	}
	,set_specular: function(value) {
		if(value < 0) value = 0;
		this._specular = value;
		this.updateSpecular();
		return value;
	}
	,get_diffuse: function() {
		return this._diffuse;
	}
	,set_diffuse: function(value) {
		if(value < 0) value = 0;
		this._diffuse = value;
		this.updateDiffuse();
		return value;
	}
	,get_color: function() {
		return this._color;
	}
	,set_color: function(value) {
		this._color = value;
		this._colorR = (this._color >> 16 & 255) / 255;
		this._colorG = (this._color >> 8 & 255) / 255;
		this._colorB = (this._color & 255) / 255;
		this.updateDiffuse();
		this.updateSpecular();
		return value;
	}
	,get_ambient: function() {
		return this._ambient;
	}
	,set_ambient: function(value) {
		if(value < 0) value = 0; else if(value > 1) value = 1;
		this._ambient = value;
		this.updateAmbient();
		return value;
	}
	,get_ambientColor: function() {
		return this._ambientColor;
	}
	,set_ambientColor: function(value) {
		this._ambientColor = value;
		this.updateAmbient();
		return value;
	}
	,updateAmbient: function() {
		this._ambientR = (this._ambientColor >> 16 & 255) / 255 * this._ambient;
		this._ambientG = (this._ambientColor >> 8 & 255) / 255 * this._ambient;
		this._ambientB = (this._ambientColor & 255) / 255 * this._ambient;
	}
	,getObjectProjectionMatrix: function(renderable,target) {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,createEntityPartitionNode: function() {
		return new away3d.core.partition.LightNode(this);
	}
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.LIGHT;
	}
	,updateSpecular: function() {
		this._specularR = this._colorR * this._specular;
		this._specularG = this._colorG * this._specular;
		this._specularB = this._colorB * this._specular;
	}
	,updateDiffuse: function() {
		this._diffuseR = this._colorR * this._diffuse;
		this._diffuseG = this._colorG * this._diffuse;
		this._diffuseB = this._colorB * this._diffuse;
	}
	,get_shadowMapper: function() {
		return this._shadowMapper;
	}
	,set_shadowMapper: function(value) {
		this._shadowMapper = value;
		this._shadowMapper.set_light(this);
		return value;
	}
	,__class__: away3d.lights.LightBase
	,__properties__: $extend(away3d.entities.Entity.prototype.__properties__,{set_shadowMapper:"set_shadowMapper",get_shadowMapper:"get_shadowMapper",set_ambientColor:"set_ambientColor",get_ambientColor:"get_ambientColor",set_ambient:"set_ambient",get_ambient:"get_ambient",set_color:"set_color",get_color:"get_color",set_diffuse:"set_diffuse",get_diffuse:"get_diffuse",set_specular:"set_specular",get_specular:"get_specular",set_castsShadows:"set_castsShadows",get_castsShadows:"get_castsShadows"})
});
away3d.lights.DirectionalLight = function(xDir,yDir,zDir) {
	if(zDir == null) zDir = 1;
	if(yDir == null) yDir = -1;
	if(xDir == null) xDir = 0;
	away3d.lights.LightBase.call(this);
	this.set_direction(new openfl.geom.Vector3D(xDir,yDir,zDir));
	this._sceneDirection = new openfl.geom.Vector3D();
};
$hxClasses["away3d.lights.DirectionalLight"] = away3d.lights.DirectionalLight;
away3d.lights.DirectionalLight.__name__ = ["away3d","lights","DirectionalLight"];
away3d.lights.DirectionalLight.__super__ = away3d.lights.LightBase;
away3d.lights.DirectionalLight.prototype = $extend(away3d.lights.LightBase.prototype,{
	_direction: null
	,_tmpLookAt: null
	,_sceneDirection: null
	,_projAABBPoints: null
	,createEntityPartitionNode: function() {
		return new away3d.core.partition.DirectionalLightNode(this);
	}
	,get_sceneDirection: function() {
		if(this._sceneTransformDirty) this.updateSceneTransform();
		return this._sceneDirection;
	}
	,get_direction: function() {
		return this._direction;
	}
	,set_direction: function(value) {
		this._direction = value;
		if(this._tmpLookAt == null) this._tmpLookAt = new openfl.geom.Vector3D();
		this._tmpLookAt.x = this.get_x() + this._direction.x;
		this._tmpLookAt.y = this.get_y() + this._direction.y;
		this._tmpLookAt.z = this.get_z() + this._direction.z;
		this.lookAt(this._tmpLookAt);
		return value;
	}
	,getDefaultBoundingVolume: function() {
		return new away3d.bounds.NullBounds();
	}
	,updateBounds: function() {
	}
	,updateSceneTransform: function() {
		away3d.lights.LightBase.prototype.updateSceneTransform.call(this);
		this.get_sceneTransform().copyColumnTo(2,this._sceneDirection);
		this._sceneDirection.normalize();
	}
	,createShadowMapper: function() {
		return new away3d.lights.shadowmaps.DirectionalShadowMapper();
	}
	,getObjectProjectionMatrix: function(renderable,target) {
		var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
		var bounds = renderable.get_sourceEntity().get_bounds();
		var m = new openfl.geom.Matrix3D();
		m.copyFrom(renderable.get_sceneTransform());
		m.append(this.get_inverseSceneTransform());
		if(this._projAABBPoints == null) {
			var this1;
			this1 = new openfl.VectorData();
			var this2;
			this2 = new Array(24);
			this1.data = this2;
			this1.length = 24;
			this1.fixed = false;
			this._projAABBPoints = this1;
		}
		m.transformVectors(bounds.get_aabbPoints(),this._projAABBPoints);
		var xMin = Math.POSITIVE_INFINITY;
		var xMax = Math.NEGATIVE_INFINITY;
		var yMin = Math.POSITIVE_INFINITY;
		var yMax = Math.NEGATIVE_INFINITY;
		var zMin = Math.POSITIVE_INFINITY;
		var zMax = Math.NEGATIVE_INFINITY;
		var d;
		var i = 0;
		while(i < 24) {
			var index = i++;
			d = this._projAABBPoints.data[index];
			if(d < xMin) xMin = d;
			if(d > xMax) xMax = d;
			var index1 = i++;
			d = this._projAABBPoints.data[index1];
			if(d < yMin) yMin = d;
			if(d > yMax) yMax = d;
			var index2 = i++;
			d = this._projAABBPoints.data[index2];
			if(d < zMin) zMin = d;
			if(d > zMax) zMax = d;
		}
		var invXRange = 1 / (xMax - xMin);
		var invYRange = 1 / (yMax - yMin);
		var invZRange = 1 / (zMax - zMin);
		if(!raw.fixed) {
			if(0 >= raw.length) raw.length = 1;
			if(raw.data.length < raw.length) {
				var data;
				var this3;
				this3 = new Array(raw.data.length + 10);
				data = this3;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data,0,raw.data.length);
				raw.data = data;
			}
		}
		raw.data[0] = 2 * invXRange;
		if(!raw.fixed) {
			if(5 >= raw.length) raw.length = 6;
			if(raw.data.length < raw.length) {
				var data1;
				var this4;
				this4 = new Array(raw.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data1,0,raw.data.length);
				raw.data = data1;
			}
		}
		raw.data[5] = 2 * invYRange;
		if(!raw.fixed) {
			if(10 >= raw.length) raw.length = 11;
			if(raw.data.length < raw.length) {
				var data2;
				var this5;
				this5 = new Array(raw.data.length + 10);
				data2 = this5;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data2,0,raw.data.length);
				raw.data = data2;
			}
		}
		raw.data[10] = invZRange;
		if(!raw.fixed) {
			if(12 >= raw.length) raw.length = 13;
			if(raw.data.length < raw.length) {
				var data3;
				var this6;
				this6 = new Array(raw.data.length + 10);
				data3 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data3,0,raw.data.length);
				raw.data = data3;
			}
		}
		raw.data[12] = -(xMax + xMin) * invXRange;
		if(!raw.fixed) {
			if(13 >= raw.length) raw.length = 14;
			if(raw.data.length < raw.length) {
				var data4;
				var this7;
				this7 = new Array(raw.data.length + 10);
				data4 = this7;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data4,0,raw.data.length);
				raw.data = data4;
			}
		}
		raw.data[13] = -(yMax + yMin) * invYRange;
		if(!raw.fixed) {
			if(14 >= raw.length) raw.length = 15;
			if(raw.data.length < raw.length) {
				var data5;
				var this8;
				this8 = new Array(raw.data.length + 10);
				data5 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data5,0,raw.data.length);
				raw.data = data5;
			}
		}
		raw.data[14] = -zMin * invZRange;
		var value;
		var value1;
		var value2;
		var value3;
		var value4;
		var value5;
		var value6;
		var value7;
		if(!raw.fixed) {
			if(11 >= raw.length) raw.length = 12;
			if(raw.data.length < raw.length) {
				var data6;
				var this9;
				this9 = new Array(raw.data.length + 10);
				data6 = this9;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data6,0,raw.data.length);
				raw.data = data6;
			}
		}
		value7 = raw.data[11] = 0;
		if(!raw.fixed) {
			if(9 >= raw.length) raw.length = 10;
			if(raw.data.length < raw.length) {
				var data7;
				var this10;
				this10 = new Array(raw.data.length + 10);
				data7 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data7,0,raw.data.length);
				raw.data = data7;
			}
		}
		value6 = raw.data[9] = value7;
		if(!raw.fixed) {
			if(8 >= raw.length) raw.length = 9;
			if(raw.data.length < raw.length) {
				var data8;
				var this11;
				this11 = new Array(raw.data.length + 10);
				data8 = this11;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data8,0,raw.data.length);
				raw.data = data8;
			}
		}
		value5 = raw.data[8] = value6;
		if(!raw.fixed) {
			if(7 >= raw.length) raw.length = 8;
			if(raw.data.length < raw.length) {
				var data9;
				var this12;
				this12 = new Array(raw.data.length + 10);
				data9 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data9,0,raw.data.length);
				raw.data = data9;
			}
		}
		value4 = raw.data[7] = value5;
		if(!raw.fixed) {
			if(6 >= raw.length) raw.length = 7;
			if(raw.data.length < raw.length) {
				var data10;
				var this13;
				this13 = new Array(raw.data.length + 10);
				data10 = this13;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data10,0,raw.data.length);
				raw.data = data10;
			}
		}
		value3 = raw.data[6] = value4;
		if(!raw.fixed) {
			if(4 >= raw.length) raw.length = 5;
			if(raw.data.length < raw.length) {
				var data11;
				var this14;
				this14 = new Array(raw.data.length + 10);
				data11 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data11,0,raw.data.length);
				raw.data = data11;
			}
		}
		value2 = raw.data[4] = value3;
		if(!raw.fixed) {
			if(3 >= raw.length) raw.length = 4;
			if(raw.data.length < raw.length) {
				var data12;
				var this15;
				this15 = new Array(raw.data.length + 10);
				data12 = this15;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data12,0,raw.data.length);
				raw.data = data12;
			}
		}
		value1 = raw.data[3] = value2;
		if(!raw.fixed) {
			if(2 >= raw.length) raw.length = 3;
			if(raw.data.length < raw.length) {
				var data13;
				var this16;
				this16 = new Array(raw.data.length + 10);
				data13 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data13,0,raw.data.length);
				raw.data = data13;
			}
		}
		value = raw.data[2] = value1;
		if(!raw.fixed) {
			if(1 >= raw.length) raw.length = 2;
			if(raw.data.length < raw.length) {
				var data14;
				var this17;
				this17 = new Array(raw.data.length + 10);
				data14 = this17;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data14,0,raw.data.length);
				raw.data = data14;
			}
		}
		raw.data[1] = value;
		if(!raw.fixed) {
			if(15 >= raw.length) raw.length = 16;
			if(raw.data.length < raw.length) {
				var data15;
				var this18;
				this18 = new Array(raw.data.length + 10);
				data15 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data15,0,raw.data.length);
				raw.data = data15;
			}
		}
		raw.data[15] = 1;
		if(target == null) target = new openfl.geom.Matrix3D();
		target.copyRawDataFrom(raw);
		target.prepend(m);
		return target;
	}
	,__class__: away3d.lights.DirectionalLight
	,__properties__: $extend(away3d.lights.LightBase.prototype.__properties__,{set_direction:"set_direction",get_direction:"get_direction",get_sceneDirection:"get_sceneDirection"})
});
away3d.lights.LightProbe = function(diffuseMap,specularMap) {
	away3d.lights.LightBase.call(this);
	this._diffuseMap = diffuseMap;
	this._specularMap = specularMap;
};
$hxClasses["away3d.lights.LightProbe"] = away3d.lights.LightProbe;
away3d.lights.LightProbe.__name__ = ["away3d","lights","LightProbe"];
away3d.lights.LightProbe.__super__ = away3d.lights.LightBase;
away3d.lights.LightProbe.prototype = $extend(away3d.lights.LightBase.prototype,{
	_diffuseMap: null
	,_specularMap: null
	,createEntityPartitionNode: function() {
		return new away3d.core.partition.LightProbeNode(this);
	}
	,get_diffuseMap: function() {
		return this._diffuseMap;
	}
	,set_diffuseMap: function(value) {
		this._diffuseMap = value;
		return value;
	}
	,get_specularMap: function() {
		return this._specularMap;
	}
	,set_specularMap: function(value) {
		this._specularMap = value;
		return value;
	}
	,updateBounds: function() {
		this._boundsInvalid = false;
	}
	,getDefaultBoundingVolume: function() {
		return new away3d.bounds.NullBounds();
	}
	,getObjectProjectionMatrix: function(renderable,target) {
		throw new openfl.errors.Error("Object projection matrices are not supported for LightProbe objects!");
		return null;
	}
	,__class__: away3d.lights.LightProbe
	,__properties__: $extend(away3d.lights.LightBase.prototype.__properties__,{set_specularMap:"set_specularMap",get_specularMap:"get_specularMap",set_diffuseMap:"set_diffuseMap",get_diffuseMap:"get_diffuseMap"})
});
away3d.lights.PointLight = function() {
	this._radius = 90000;
	this._fallOff = 100000;
	away3d.lights.LightBase.call(this);
	this._fallOffFactor = 1 / (this._fallOff * this._fallOff - this._radius * this._radius);
};
$hxClasses["away3d.lights.PointLight"] = away3d.lights.PointLight;
away3d.lights.PointLight.__name__ = ["away3d","lights","PointLight"];
away3d.lights.PointLight.__super__ = away3d.lights.LightBase;
away3d.lights.PointLight.prototype = $extend(away3d.lights.LightBase.prototype,{
	_radius: null
	,_fallOff: null
	,_fallOffFactor: null
	,createShadowMapper: function() {
		return new away3d.lights.shadowmaps.CubeMapShadowMapper();
	}
	,createEntityPartitionNode: function() {
		return new away3d.core.partition.PointLightNode(this);
	}
	,get_radius: function() {
		return this._radius;
	}
	,set_radius: function(value) {
		this._radius = value;
		if(this._radius < 0) this._radius = 0; else if(this._radius > this._fallOff) {
			this._fallOff = this._radius;
			this.invalidateBounds();
		}
		this._fallOffFactor = 1 / (this._fallOff * this._fallOff - this._radius * this._radius);
		return value;
	}
	,fallOffFactor: function() {
		return this._fallOffFactor;
	}
	,get_fallOff: function() {
		return this._fallOff;
	}
	,set_fallOff: function(value) {
		this._fallOff = value;
		if(this._fallOff < 0) this._fallOff = 0;
		if(this._fallOff < this._radius) this._radius = this._fallOff;
		this._fallOffFactor = 1 / (this._fallOff * this._fallOff - this._radius * this._radius);
		this.invalidateBounds();
		return value;
	}
	,updateBounds: function() {
		this._bounds.fromSphere(new openfl.geom.Vector3D(),this._fallOff);
		this._boundsInvalid = false;
	}
	,getDefaultBoundingVolume: function() {
		return new away3d.bounds.BoundingSphere();
	}
	,getObjectProjectionMatrix: function(renderable,target) {
		var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
		var bounds = renderable.get_sourceEntity().get_bounds();
		var m = new openfl.geom.Matrix3D();
		m.copyFrom(renderable.get_sceneTransform());
		m.append(this._parent.get_inverseSceneTransform());
		this.lookAt(new openfl.geom.Vector3D(m.rawData.data[12],m.rawData.data[13],m.rawData.data[14]));
		m.copyFrom(renderable.get_sceneTransform());
		m.append(this.get_inverseSceneTransform());
		m.copyColumnTo(3,this._pos);
		var v1 = m.deltaTransformVector(bounds.get_min());
		var v2 = m.deltaTransformVector(bounds.get_max());
		var z = this._pos.z;
		var d1 = v1.x * v1.x + v1.y * v1.y + v1.z * v1.z;
		var d2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;
		var d = Math.sqrt(d1 > d2?d1:d2);
		var zMin;
		var zMax;
		zMin = z - d;
		zMax = z + d;
		var value;
		if(!raw.fixed) {
			if(0 >= raw.length) raw.length = 1;
			if(raw.data.length < raw.length) {
				var data;
				var this1;
				this1 = new Array(raw.data.length + 10);
				data = this1;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data,0,raw.data.length);
				raw.data = data;
			}
		}
		value = raw.data[0] = zMin / d;
		if(!raw.fixed) {
			if(5 >= raw.length) raw.length = 6;
			if(raw.data.length < raw.length) {
				var data1;
				var this2;
				this2 = new Array(raw.data.length + 10);
				data1 = this2;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data1,0,raw.data.length);
				raw.data = data1;
			}
		}
		raw.data[5] = value;
		if(!raw.fixed) {
			if(10 >= raw.length) raw.length = 11;
			if(raw.data.length < raw.length) {
				var data2;
				var this3;
				this3 = new Array(raw.data.length + 10);
				data2 = this3;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data2,0,raw.data.length);
				raw.data = data2;
			}
		}
		raw.data[10] = zMax / (zMax - zMin);
		if(!raw.fixed) {
			if(11 >= raw.length) raw.length = 12;
			if(raw.data.length < raw.length) {
				var data3;
				var this4;
				this4 = new Array(raw.data.length + 10);
				data3 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data3,0,raw.data.length);
				raw.data = data3;
			}
		}
		raw.data[11] = 1;
		var value1;
		var value2;
		var value3;
		var value4;
		var value5;
		var value6;
		var value7;
		var value8;
		var value9;
		var value10;
		if(!raw.fixed) {
			if(15 >= raw.length) raw.length = 16;
			if(raw.data.length < raw.length) {
				var data4;
				var this5;
				this5 = new Array(raw.data.length + 10);
				data4 = this5;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data4,0,raw.data.length);
				raw.data = data4;
			}
		}
		value10 = raw.data[15] = 0;
		if(!raw.fixed) {
			if(13 >= raw.length) raw.length = 14;
			if(raw.data.length < raw.length) {
				var data5;
				var this6;
				this6 = new Array(raw.data.length + 10);
				data5 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data5,0,raw.data.length);
				raw.data = data5;
			}
		}
		value9 = raw.data[13] = value10;
		if(!raw.fixed) {
			if(12 >= raw.length) raw.length = 13;
			if(raw.data.length < raw.length) {
				var data6;
				var this7;
				this7 = new Array(raw.data.length + 10);
				data6 = this7;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data6,0,raw.data.length);
				raw.data = data6;
			}
		}
		value8 = raw.data[12] = value9;
		if(!raw.fixed) {
			if(9 >= raw.length) raw.length = 10;
			if(raw.data.length < raw.length) {
				var data7;
				var this8;
				this8 = new Array(raw.data.length + 10);
				data7 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data7,0,raw.data.length);
				raw.data = data7;
			}
		}
		value7 = raw.data[9] = value8;
		if(!raw.fixed) {
			if(8 >= raw.length) raw.length = 9;
			if(raw.data.length < raw.length) {
				var data8;
				var this9;
				this9 = new Array(raw.data.length + 10);
				data8 = this9;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data8,0,raw.data.length);
				raw.data = data8;
			}
		}
		value6 = raw.data[8] = value7;
		if(!raw.fixed) {
			if(7 >= raw.length) raw.length = 8;
			if(raw.data.length < raw.length) {
				var data9;
				var this10;
				this10 = new Array(raw.data.length + 10);
				data9 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data9,0,raw.data.length);
				raw.data = data9;
			}
		}
		value5 = raw.data[7] = value6;
		if(!raw.fixed) {
			if(6 >= raw.length) raw.length = 7;
			if(raw.data.length < raw.length) {
				var data10;
				var this11;
				this11 = new Array(raw.data.length + 10);
				data10 = this11;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data10,0,raw.data.length);
				raw.data = data10;
			}
		}
		value4 = raw.data[6] = value5;
		if(!raw.fixed) {
			if(4 >= raw.length) raw.length = 5;
			if(raw.data.length < raw.length) {
				var data11;
				var this12;
				this12 = new Array(raw.data.length + 10);
				data11 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data11,0,raw.data.length);
				raw.data = data11;
			}
		}
		value3 = raw.data[4] = value4;
		if(!raw.fixed) {
			if(3 >= raw.length) raw.length = 4;
			if(raw.data.length < raw.length) {
				var data12;
				var this13;
				this13 = new Array(raw.data.length + 10);
				data12 = this13;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data12,0,raw.data.length);
				raw.data = data12;
			}
		}
		value2 = raw.data[3] = value3;
		if(!raw.fixed) {
			if(2 >= raw.length) raw.length = 3;
			if(raw.data.length < raw.length) {
				var data13;
				var this14;
				this14 = new Array(raw.data.length + 10);
				data13 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data13,0,raw.data.length);
				raw.data = data13;
			}
		}
		value1 = raw.data[2] = value2;
		if(!raw.fixed) {
			if(1 >= raw.length) raw.length = 2;
			if(raw.data.length < raw.length) {
				var data14;
				var this15;
				this15 = new Array(raw.data.length + 10);
				data14 = this15;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data14,0,raw.data.length);
				raw.data = data14;
			}
		}
		raw.data[1] = value1;
		if(!raw.fixed) {
			if(14 >= raw.length) raw.length = 15;
			if(raw.data.length < raw.length) {
				var data15;
				var this16;
				this16 = new Array(raw.data.length + 10);
				data15 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data15,0,raw.data.length);
				raw.data = data15;
			}
		}
		raw.data[14] = -zMin * raw.data[10];
		if(target == null) target = new openfl.geom.Matrix3D();
		target.copyRawDataFrom(raw);
		target.prepend(m);
		return target;
	}
	,__class__: away3d.lights.PointLight
	,__properties__: $extend(away3d.lights.LightBase.prototype.__properties__,{set_fallOff:"set_fallOff",get_fallOff:"get_fallOff",set_radius:"set_radius",get_radius:"get_radius"})
});
away3d.lights.shadowmaps = {};
away3d.lights.shadowmaps.ShadowMapperBase = function() {
	this._depthMapSize = 2048;
	this._autoUpdateShadows = true;
	this._casterCollector = this.createCasterCollector();
};
$hxClasses["away3d.lights.shadowmaps.ShadowMapperBase"] = away3d.lights.shadowmaps.ShadowMapperBase;
away3d.lights.shadowmaps.ShadowMapperBase.__name__ = ["away3d","lights","shadowmaps","ShadowMapperBase"];
away3d.lights.shadowmaps.ShadowMapperBase.prototype = {
	_casterCollector: null
	,_depthMap: null
	,_depthMapSize: null
	,_light: null
	,_explicitDepthMap: null
	,_autoUpdateShadows: null
	,_shadowsInvalid: null
	,createCasterCollector: function() {
		return new away3d.core.traverse.ShadowCasterCollector();
	}
	,get_autoUpdateShadows: function() {
		return this._autoUpdateShadows;
	}
	,set_autoUpdateShadows: function(value) {
		this._autoUpdateShadows = value;
		return value;
	}
	,updateShadows: function() {
		this._shadowsInvalid = true;
	}
	,setDepthMap: function(depthMap) {
		if(this._depthMap == depthMap) return;
		if(this._depthMap != null && !this._explicitDepthMap) this._depthMap.dispose();
		this._depthMap = depthMap;
		if(this._depthMap != null) {
			this._explicitDepthMap = true;
			this._depthMapSize = this._depthMap.get_width();
		} else this._explicitDepthMap = false;
	}
	,get_light: function() {
		return this._light;
	}
	,set_light: function(value) {
		this._light = value;
		return value;
	}
	,get_depthMap: function() {
		if(this._depthMap == null) this._depthMap = this.createDepthTexture();
		return this._depthMap;
	}
	,get_depthMapSize: function() {
		return this._depthMapSize;
	}
	,set_depthMapSize: function(value) {
		if(value == this._depthMapSize) return value;
		this._depthMapSize = value;
		if(this._explicitDepthMap) throw new openfl.errors.Error("Cannot set depth map size for the current renderer."); else if(this._depthMap != null) {
			this._depthMap.dispose();
			this._depthMap = null;
		}
		return value;
	}
	,dispose: function() {
		this._casterCollector = null;
		if(this._depthMap != null && !this._explicitDepthMap) this._depthMap.dispose();
		this._depthMap = null;
	}
	,createDepthTexture: function() {
		return new away3d.textures.RenderTexture(this._depthMapSize,this._depthMapSize);
	}
	,renderDepthMap: function(stage3DProxy,entityCollector,renderer) {
		this._shadowsInvalid = false;
		this.updateDepthProjection(entityCollector.get_camera());
		if(this._depthMap == null) this._depthMap = this.createDepthTexture();
		this.drawDepthMap(this._depthMap.getTextureForStage3D(stage3DProxy),entityCollector.scene,renderer);
	}
	,updateDepthProjection: function(viewCamera) {
		throw new away3d.errors.AbstractMethodError();
	}
	,drawDepthMap: function(target,scene,renderer) {
		throw new away3d.errors.AbstractMethodError();
	}
	,__class__: away3d.lights.shadowmaps.ShadowMapperBase
	,__properties__: {set_depthMapSize:"set_depthMapSize",get_depthMapSize:"get_depthMapSize",get_depthMap:"get_depthMap",set_light:"set_light",get_light:"get_light",set_autoUpdateShadows:"set_autoUpdateShadows",get_autoUpdateShadows:"get_autoUpdateShadows"}
};
away3d.lights.shadowmaps.CubeMapShadowMapper = function() {
	away3d.lights.shadowmaps.ShadowMapperBase.call(this);
	this._depthMapSize = 512;
	this._needsRender = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(0);
			this1.data = this2;
		}
		this1.length = 0;
		this1.fixed = false;
		$r = this1;
		return $r;
	}(this))),6,false);
	this.initCameras();
};
$hxClasses["away3d.lights.shadowmaps.CubeMapShadowMapper"] = away3d.lights.shadowmaps.CubeMapShadowMapper;
away3d.lights.shadowmaps.CubeMapShadowMapper.__name__ = ["away3d","lights","shadowmaps","CubeMapShadowMapper"];
away3d.lights.shadowmaps.CubeMapShadowMapper.__super__ = away3d.lights.shadowmaps.ShadowMapperBase;
away3d.lights.shadowmaps.CubeMapShadowMapper.prototype = $extend(away3d.lights.shadowmaps.ShadowMapperBase.prototype,{
	_depthCameras: null
	,_lenses: null
	,_needsRender: null
	,initCameras: function() {
		var this1;
		this1 = new openfl.VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		this._depthCameras = this1;
		var this3;
		this3 = new openfl.VectorData();
		var this4;
		this4 = new Array(0);
		this3.data = this4;
		this3.length = 0;
		this3.fixed = false;
		this._lenses = this3;
		this.addCamera(0,90,0);
		this.addCamera(0,-90,0);
		this.addCamera(-90,0,0);
		this.addCamera(90,0,0);
		this.addCamera(0,0,0);
		this.addCamera(0,180,0);
	}
	,addCamera: function(rotationX,rotationY,rotationZ) {
		var cam = new away3d.cameras.Camera3D();
		cam.set_rotationX(rotationX);
		cam.set_rotationY(rotationY);
		cam.set_rotationZ(rotationZ);
		cam.get_lens().set_near(.01);
		(js.Boot.__cast(cam.get_lens() , away3d.cameras.lenses.PerspectiveLens)).set_fieldOfView(90);
		var this1 = this._lenses;
		var x;
		x = js.Boot.__cast(cam.get_lens() , away3d.cameras.lenses.PerspectiveLens);
		if(!this1.fixed) {
			this1.length++;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
			this1.data[this1.length - 1] = x;
		}
		this1.length;
		cam.get_lens().set_aspectRatio(1);
		var this3 = this._depthCameras;
		if(!this3.fixed) {
			this3.length++;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
			this3.data[this3.length - 1] = cam;
		}
		this3.length;
	}
	,createDepthTexture: function() {
		return new away3d.textures.RenderCubeTexture(this._depthMapSize);
	}
	,updateDepthProjection: function(viewCamera) {
		var maxDistance = (js.Boot.__cast(this._light , away3d.lights.PointLight))._fallOff;
		var pos = this._light.get_scenePosition();
		var i = 0;
		while(i < 6) {
			this._lenses.data[i].set_far(maxDistance);
			this._depthCameras.data[i].set_position(pos);
			var this1 = this._needsRender;
			if(!this1.fixed) {
				if(i >= this1.length) this1.length = i + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[i] = true;
			++i;
		}
	}
	,drawDepthMap: function(target,scene,renderer) {
		var i = 0;
		while(i < 6) {
			if(this._needsRender.data[i]) {
				this._casterCollector.set_camera(this._depthCameras.data[i]);
				this._casterCollector.clear();
				scene.traversePartitions(this._casterCollector);
				renderer.render(this._casterCollector,target,null,i);
				this._casterCollector.cleanUp();
			}
			++i;
		}
	}
	,__class__: away3d.lights.shadowmaps.CubeMapShadowMapper
});
away3d.lights.shadowmaps.DirectionalShadowMapper = function() {
	this._lightOffset = 10000;
	this._snap = 64;
	away3d.lights.shadowmaps.ShadowMapperBase.call(this);
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this._cullPlanes = this1;
	this._overallDepthLens = new away3d.cameras.lenses.FreeMatrixLens();
	this._overallDepthCamera = new away3d.cameras.Camera3D(this._overallDepthLens);
	this._localFrustum = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this3;
		this3 = new openfl.VectorData();
		{
			var this4;
			this4 = new Array(24);
			this3.data = this4;
		}
		this3.length = 24;
		this3.fixed = false;
		$r = this3;
		return $r;
	}(this))),24,0);
	this._matrix = new openfl.geom.Matrix3D();
};
$hxClasses["away3d.lights.shadowmaps.DirectionalShadowMapper"] = away3d.lights.shadowmaps.DirectionalShadowMapper;
away3d.lights.shadowmaps.DirectionalShadowMapper.__name__ = ["away3d","lights","shadowmaps","DirectionalShadowMapper"];
away3d.lights.shadowmaps.DirectionalShadowMapper.__super__ = away3d.lights.shadowmaps.ShadowMapperBase;
away3d.lights.shadowmaps.DirectionalShadowMapper.prototype = $extend(away3d.lights.shadowmaps.ShadowMapperBase.prototype,{
	_overallDepthCamera: null
	,_localFrustum: null
	,_lightOffset: null
	,_matrix: null
	,_overallDepthLens: null
	,_snap: null
	,_cullPlanes: null
	,_minZ: null
	,_maxZ: null
	,get_snap: function() {
		return this._snap;
	}
	,set_snap: function(value) {
		this._snap = value;
		return value;
	}
	,get_lightOffset: function() {
		return this._lightOffset;
	}
	,set_lightOffset: function(value) {
		this._lightOffset = value;
		return value;
	}
	,get_depthProjection: function() {
		return this._overallDepthCamera.get_viewProjection();
	}
	,get_depth: function() {
		return this._maxZ - this._minZ;
	}
	,drawDepthMap: function(target,scene,renderer) {
		this._casterCollector.set_camera(this._overallDepthCamera);
		this._casterCollector.set_cullPlanes(this._cullPlanes);
		this._casterCollector.clear();
		scene.traversePartitions(this._casterCollector);
		renderer.render(this._casterCollector,target);
		this._casterCollector.cleanUp();
	}
	,updateCullPlanes: function(viewCamera) {
		var lightFrustumPlanes = this._overallDepthCamera.get_frustumPlanes();
		var viewFrustumPlanes = viewCamera.get_frustumPlanes();
		away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB(this._cullPlanes),4);
		var this1 = this._cullPlanes;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = lightFrustumPlanes.data[0];
		var this3 = this._cullPlanes;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = lightFrustumPlanes.data[1];
		var this5 = this._cullPlanes;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = lightFrustumPlanes.data[2];
		var this7 = this._cullPlanes;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = lightFrustumPlanes.data[3];
		var dir = (js.Boot.__cast(this._light , away3d.lights.DirectionalLight)).get_sceneDirection();
		var dirX = dir.x;
		var dirY = dir.y;
		var dirZ = dir.z;
		var j = 4;
		var i = 0;
		while(i < 6) {
			var plane = viewFrustumPlanes.data[i];
			if(plane.a * dirX + plane.b * dirY + plane.c * dirZ < 0) {
				var this9 = this._cullPlanes;
				var key = j++;
				if(!this9.fixed) {
					if(key >= this9.length) this9.length = key + 1;
					if(this9.data.length < this9.length) {
						var data4;
						var this10;
						this10 = new Array(this9.data.length + 10);
						data4 = this10;
						haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
						this9.data = data4;
					}
				}
				this9.data[key] = plane;
			}
			++i;
		}
	}
	,updateDepthProjection: function(viewCamera) {
		this.updateProjectionFromFrustumCorners(viewCamera,(function($this) {
			var $r;
			var value = viewCamera.get_lens().get_frustumCorners();
			var vectorData = new openfl.VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while(_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this)),this._matrix);
		this._overallDepthLens.set_matrix(this._matrix);
		this.updateCullPlanes(viewCamera);
	}
	,updateProjectionFromFrustumCorners: function(viewCamera,corners,matrix) {
		var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
		var dir;
		var x;
		var y;
		var z;
		var minX;
		var minY;
		var maxX;
		var maxY;
		var i;
		dir = (js.Boot.__cast(this._light , away3d.lights.DirectionalLight)).get_sceneDirection();
		this._overallDepthCamera.set_transform(this._light.get_sceneTransform());
		x = (viewCamera.get_x() - dir.x * this._lightOffset) / this._snap * this._snap;
		y = (viewCamera.get_y() - dir.y * this._lightOffset) / this._snap * this._snap;
		z = (viewCamera.get_z() - dir.z * this._lightOffset) / this._snap * this._snap;
		this._overallDepthCamera.set_x(x);
		this._overallDepthCamera.set_y(y);
		this._overallDepthCamera.set_z(z);
		this._matrix.copyFrom(this._overallDepthCamera.get_inverseSceneTransform());
		this._matrix.prepend(viewCamera.get_sceneTransform());
		this._matrix.transformVectors(corners,this._localFrustum);
		minX = maxX = this._localFrustum.data[0];
		minY = maxY = this._localFrustum.data[1];
		this._maxZ = this._localFrustum.data[2];
		i = 3;
		while(i < 24) {
			x = this._localFrustum.data[i];
			y = this._localFrustum.data[i + 1];
			z = this._localFrustum.data[i + 2];
			if(x < minX) minX = x;
			if(x > maxX) maxX = x;
			if(y < minY) minY = y;
			if(y > maxY) maxY = y;
			if(z > this._maxZ) this._maxZ = z;
			i += 3;
		}
		this._minZ = 1;
		var w = maxX - minX;
		var h = maxY - minY;
		var d = 1 / (this._maxZ - this._minZ);
		if(minX < 0) minX -= this._snap;
		if(minY < 0) minY -= this._snap;
		minX = minX / this._snap * this._snap;
		minY = minY / this._snap * this._snap;
		var snap2 = 2 * this._snap;
		w = (w / snap2 + 2) * snap2;
		h = (h / snap2 + 2) * snap2;
		maxX = minX + w;
		maxY = minY + h;
		w = 1 / w;
		h = 1 / h;
		if(!raw.fixed) {
			if(0 >= raw.length) raw.length = 1;
			if(raw.data.length < raw.length) {
				var data;
				var this1;
				this1 = new Array(raw.data.length + 10);
				data = this1;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data,0,raw.data.length);
				raw.data = data;
			}
		}
		raw.data[0] = 2 * w;
		if(!raw.fixed) {
			if(5 >= raw.length) raw.length = 6;
			if(raw.data.length < raw.length) {
				var data1;
				var this2;
				this2 = new Array(raw.data.length + 10);
				data1 = this2;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data1,0,raw.data.length);
				raw.data = data1;
			}
		}
		raw.data[5] = 2 * h;
		if(!raw.fixed) {
			if(10 >= raw.length) raw.length = 11;
			if(raw.data.length < raw.length) {
				var data2;
				var this3;
				this3 = new Array(raw.data.length + 10);
				data2 = this3;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data2,0,raw.data.length);
				raw.data = data2;
			}
		}
		raw.data[10] = d;
		if(!raw.fixed) {
			if(12 >= raw.length) raw.length = 13;
			if(raw.data.length < raw.length) {
				var data3;
				var this4;
				this4 = new Array(raw.data.length + 10);
				data3 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data3,0,raw.data.length);
				raw.data = data3;
			}
		}
		raw.data[12] = -(maxX + minX) * w;
		if(!raw.fixed) {
			if(13 >= raw.length) raw.length = 14;
			if(raw.data.length < raw.length) {
				var data4;
				var this5;
				this5 = new Array(raw.data.length + 10);
				data4 = this5;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data4,0,raw.data.length);
				raw.data = data4;
			}
		}
		raw.data[13] = -(maxY + minY) * h;
		if(!raw.fixed) {
			if(14 >= raw.length) raw.length = 15;
			if(raw.data.length < raw.length) {
				var data5;
				var this6;
				this6 = new Array(raw.data.length + 10);
				data5 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data5,0,raw.data.length);
				raw.data = data5;
			}
		}
		raw.data[14] = -this._minZ * d;
		if(!raw.fixed) {
			if(15 >= raw.length) raw.length = 16;
			if(raw.data.length < raw.length) {
				var data6;
				var this7;
				this7 = new Array(raw.data.length + 10);
				data6 = this7;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data6,0,raw.data.length);
				raw.data = data6;
			}
		}
		raw.data[15] = 1;
		var value;
		var value1;
		var value2;
		var value3;
		var value4;
		var value5;
		var value6;
		var value7;
		if(!raw.fixed) {
			if(11 >= raw.length) raw.length = 12;
			if(raw.data.length < raw.length) {
				var data7;
				var this8;
				this8 = new Array(raw.data.length + 10);
				data7 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data7,0,raw.data.length);
				raw.data = data7;
			}
		}
		value7 = raw.data[11] = 0;
		if(!raw.fixed) {
			if(9 >= raw.length) raw.length = 10;
			if(raw.data.length < raw.length) {
				var data8;
				var this9;
				this9 = new Array(raw.data.length + 10);
				data8 = this9;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data8,0,raw.data.length);
				raw.data = data8;
			}
		}
		value6 = raw.data[9] = value7;
		if(!raw.fixed) {
			if(8 >= raw.length) raw.length = 9;
			if(raw.data.length < raw.length) {
				var data9;
				var this10;
				this10 = new Array(raw.data.length + 10);
				data9 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data9,0,raw.data.length);
				raw.data = data9;
			}
		}
		value5 = raw.data[8] = value6;
		if(!raw.fixed) {
			if(7 >= raw.length) raw.length = 8;
			if(raw.data.length < raw.length) {
				var data10;
				var this11;
				this11 = new Array(raw.data.length + 10);
				data10 = this11;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data10,0,raw.data.length);
				raw.data = data10;
			}
		}
		value4 = raw.data[7] = value5;
		if(!raw.fixed) {
			if(6 >= raw.length) raw.length = 7;
			if(raw.data.length < raw.length) {
				var data11;
				var this12;
				this12 = new Array(raw.data.length + 10);
				data11 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data11,0,raw.data.length);
				raw.data = data11;
			}
		}
		value3 = raw.data[6] = value4;
		if(!raw.fixed) {
			if(4 >= raw.length) raw.length = 5;
			if(raw.data.length < raw.length) {
				var data12;
				var this13;
				this13 = new Array(raw.data.length + 10);
				data12 = this13;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data12,0,raw.data.length);
				raw.data = data12;
			}
		}
		value2 = raw.data[4] = value3;
		if(!raw.fixed) {
			if(3 >= raw.length) raw.length = 4;
			if(raw.data.length < raw.length) {
				var data13;
				var this14;
				this14 = new Array(raw.data.length + 10);
				data13 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data13,0,raw.data.length);
				raw.data = data13;
			}
		}
		value1 = raw.data[3] = value2;
		if(!raw.fixed) {
			if(2 >= raw.length) raw.length = 3;
			if(raw.data.length < raw.length) {
				var data14;
				var this15;
				this15 = new Array(raw.data.length + 10);
				data14 = this15;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data14,0,raw.data.length);
				raw.data = data14;
			}
		}
		value = raw.data[2] = value1;
		if(!raw.fixed) {
			if(1 >= raw.length) raw.length = 2;
			if(raw.data.length < raw.length) {
				var data15;
				var this16;
				this16 = new Array(raw.data.length + 10);
				data15 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data15,0,raw.data.length);
				raw.data = data15;
			}
		}
		raw.data[1] = value;
		matrix.copyRawDataFrom(raw);
	}
	,__class__: away3d.lights.shadowmaps.DirectionalShadowMapper
	,__properties__: $extend(away3d.lights.shadowmaps.ShadowMapperBase.prototype.__properties__,{get_depth:"get_depth",get_depthProjection:"get_depthProjection",set_lightOffset:"set_lightOffset",get_lightOffset:"get_lightOffset",set_snap:"set_snap",get_snap:"get_snap"})
});
away3d.materials.MaterialBase = function() {
	this._blendMode = openfl.display.BlendMode.NORMAL;
	this._mipmap = true;
	this._smooth = true;
	this._anisotropy = away3d.textures.Anisotropy.ANISOTROPIC2X;
	this._depthCompareMode = 515;
	this._owners = new Array();
	this._passes = new Array();
	this._depthPass = new away3d.materials.passes.DepthMapPass();
	this._distancePass = new away3d.materials.passes.DistanceMapPass();
	this._depthPass.addEventListener(openfl.events.Event.CHANGE,$bind(this,this.onDepthPassChange));
	this._distancePass.addEventListener(openfl.events.Event.CHANGE,$bind(this,this.onDistancePassChange));
	this.set_alphaPremultiplied(false);
	this._uniqueId = away3d.materials.MaterialBase.MATERIAL_ID_COUNT++;
	this._depthPassId = 0;
	this._numPasses = 0;
	away3d.library.assets.NamedAssetBase.call(this);
};
$hxClasses["away3d.materials.MaterialBase"] = away3d.materials.MaterialBase;
away3d.materials.MaterialBase.__name__ = ["away3d","materials","MaterialBase"];
away3d.materials.MaterialBase.__interfaces__ = [away3d.library.assets.IAsset];
away3d.materials.MaterialBase.__super__ = away3d.library.assets.NamedAssetBase;
away3d.materials.MaterialBase.prototype = $extend(away3d.library.assets.NamedAssetBase.prototype,{
	extra: null
	,_classification: null
	,_uniqueId: null
	,_renderOrderId: null
	,_depthPassId: null
	,_bothSides: null
	,_animationSet: null
	,_owners: null
	,_alphaPremultiplied: null
	,_blendMode: null
	,_numPasses: null
	,_passes: null
	,_mipmap: null
	,_smooth: null
	,_repeat: null
	,_anisotropy: null
	,_depthPass: null
	,_distancePass: null
	,_lightPicker: null
	,_distanceBasedDepthRender: null
	,_depthCompareMode: null
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.MATERIAL;
	}
	,get_lightPicker: function() {
		return this._lightPicker;
	}
	,set_lightPicker: function(value) {
		if(value != this._lightPicker) {
			this._lightPicker = value;
			var len = this._passes.length;
			var i = 0;
			while(i < len) {
				this._passes[i].set_lightPicker(this._lightPicker);
				++i;
			}
		}
		return value;
	}
	,get_mipmap: function() {
		return this._mipmap;
	}
	,set_mipmap: function(value) {
		this._mipmap = value;
		var i = 0;
		while(i < this._numPasses) {
			this._passes[i].set_mipmap(value);
			++i;
		}
		return value;
	}
	,get_smooth: function() {
		return this._smooth;
	}
	,set_smooth: function(value) {
		this._smooth = value;
		var i = 0;
		while(i < this._numPasses) {
			this._passes[i].set_smooth(value);
			++i;
		}
		return value;
	}
	,get_depthCompareMode: function() {
		return this._depthCompareMode;
	}
	,set_depthCompareMode: function(value) {
		this._depthCompareMode = value;
		return value;
	}
	,get_repeat: function() {
		return this._repeat;
	}
	,set_repeat: function(value) {
		this._repeat = value;
		var i = 0;
		while(i < this._numPasses) {
			this._passes[i].set_repeat(value);
			++i;
		}
		return value;
	}
	,get_anisotropy: function() {
		return this._anisotropy;
	}
	,set_anisotropy: function(value) {
		this._anisotropy = value;
		var i = 0;
		while(i < this._numPasses) {
			this._passes[i].set_anisotropy(this._anisotropy);
			++i;
		}
		return this._anisotropy;
	}
	,dispose: function() {
		var i = 0;
		i = 0;
		while(i < this._numPasses) {
			this._passes[i].dispose();
			++i;
		}
		this._depthPass.dispose();
		this._distancePass.dispose();
		this._depthPass.removeEventListener(openfl.events.Event.CHANGE,$bind(this,this.onDepthPassChange));
		this._distancePass.removeEventListener(openfl.events.Event.CHANGE,$bind(this,this.onDistancePassChange));
	}
	,get_bothSides: function() {
		return this._bothSides;
	}
	,set_bothSides: function(value) {
		this._bothSides = value;
		var i = 0;
		while(i < this._numPasses) {
			this._passes[i].set_bothSides(value);
			++i;
		}
		this._depthPass.set_bothSides(value);
		this._distancePass.set_bothSides(value);
		return value;
	}
	,get_blendMode: function() {
		return this._blendMode;
	}
	,set_blendMode: function(value) {
		this._blendMode = value;
		return value;
	}
	,get_alphaPremultiplied: function() {
		return this._alphaPremultiplied;
	}
	,set_alphaPremultiplied: function(value) {
		this._alphaPremultiplied = value;
		var i = 0;
		while(i < this._numPasses) {
			this._passes[i].set_alphaPremultiplied(value);
			++i;
		}
		return value;
	}
	,get_requiresBlending: function() {
		return this._blendMode != openfl.display.BlendMode.NORMAL;
	}
	,get_uniqueId: function() {
		return this._uniqueId;
	}
	,get_numPasses: function() {
		return this._numPasses;
	}
	,hasDepthAlphaThreshold: function() {
		return this._depthPass.get_alphaThreshold() > 0;
	}
	,activateForDepth: function(stage3DProxy,camera,distanceBased) {
		if(distanceBased == null) distanceBased = false;
		this._distanceBasedDepthRender = distanceBased;
		if(distanceBased) this._distancePass.activate(stage3DProxy,camera); else this._depthPass.activate(stage3DProxy,camera);
	}
	,deactivateForDepth: function(stage3DProxy) {
		if(this._distanceBasedDepthRender) this._distancePass.deactivate(stage3DProxy); else this._depthPass.deactivate(stage3DProxy);
	}
	,renderDepth: function(renderable,stage3DProxy,camera,viewProjection) {
		if(this._distanceBasedDepthRender) {
			if(renderable.get_animator() != null) this._distancePass.updateAnimationState(renderable,stage3DProxy,camera);
			this._distancePass.render(renderable,stage3DProxy,camera,viewProjection);
		} else {
			if(renderable.get_animator() != null) this._depthPass.updateAnimationState(renderable,stage3DProxy,camera);
			this._depthPass.render(renderable,stage3DProxy,camera,viewProjection);
		}
	}
	,passRendersToTexture: function(index) {
		return this._passes[index].get_renderToTexture();
	}
	,activatePass: function(index,stage3DProxy,camera) {
		this._passes[index].activate(stage3DProxy,camera);
	}
	,deactivatePass: function(index,stage3DProxy) {
		this._passes[index].deactivate(stage3DProxy);
	}
	,renderPass: function(index,renderable,stage3DProxy,entityCollector,viewProjection) {
		if(this._lightPicker != null) this._lightPicker.collectLights(renderable,entityCollector);
		var pass = this._passes[index];
		if(renderable.get_animator() != null) pass.updateAnimationState(renderable,stage3DProxy,entityCollector.get_camera());
		pass.render(renderable,stage3DProxy,entityCollector.get_camera(),viewProjection);
	}
	,addOwner: function(owner) {
		this._owners.push(owner);
		if(owner.get_animator() != null) {
			if(this._animationSet != null && owner.get_animator().get_animationSet() != this._animationSet) throw new openfl.errors.Error("A Material instance cannot be shared across renderables with different animator libraries"); else if(this._animationSet != owner.get_animator().get_animationSet()) {
				this._animationSet = owner.get_animator().get_animationSet();
				var i = 0;
				while(i < this._numPasses) {
					this._passes[i].set_animationSet(this._animationSet);
					++i;
				}
				this._depthPass.set_animationSet(this._animationSet);
				this._distancePass.set_animationSet(this._animationSet);
				this.invalidatePasses(null);
			}
		}
	}
	,removeOwner: function(owner) {
		this._owners.splice(Lambda.indexOf(this._owners,owner),1);
		if(this._owners.length == 0) {
			this._animationSet = null;
			var i = 0;
			while(i < this._numPasses) {
				this._passes[i].set_animationSet(this._animationSet);
				++i;
			}
			this._depthPass.set_animationSet(this._animationSet);
			this._distancePass.set_animationSet(this._animationSet);
			this.invalidatePasses(null);
		}
	}
	,get_owners: function() {
		return this._owners;
	}
	,updateMaterial: function(context) {
	}
	,deactivate: function(stage3DProxy) {
		this._passes[this._numPasses - 1].deactivate(stage3DProxy);
	}
	,invalidatePasses: function(triggerPass) {
		var _g = this;
		var owner;
		this._depthPass.invalidateShaderProgram();
		this._distancePass.invalidateShaderProgram();
		if(this._animationSet != null) {
			this._animationSet.resetGPUCompatibility();
			Lambda.foreach(this._owners,function(owner1) {
				if(owner1.get_animator() != null) {
					owner1.get_animator().testGPUCompatibility(_g._depthPass);
					owner1.get_animator().testGPUCompatibility(_g._distancePass);
				}
				return true;
			});
		}
		var i;
		var _g1 = 0;
		var _g2 = this._numPasses;
		while(_g1 < _g2) {
			var i1 = [_g1++];
			if(this._passes[i1[0]] != triggerPass) this._passes[i1[0]].invalidateShaderProgram(false);
			if(this._animationSet != null) Lambda.foreach(this._owners,(function(i1) {
				return function(owner2) {
					if(owner2.get_animator() != null) owner2.get_animator().testGPUCompatibility(_g._passes[i1[0]]);
					return true;
				};
			})(i1));
		}
	}
	,removePass: function(pass) {
		this._passes.splice(HxOverrides.indexOf(this._passes,pass,0),1);
		--this._numPasses;
	}
	,clearPasses: function() {
		var i = 0;
		while(i < this._numPasses) {
			this._passes[i].removeEventListener(openfl.events.Event.CHANGE,$bind(this,this.onPassChange));
			++i;
		}
		this._passes = [];
		this._numPasses = 0;
	}
	,addPass: function(pass) {
		this._passes[this._numPasses++] = pass;
		pass.set_animationSet(this._animationSet);
		pass.set_alphaPremultiplied(this._alphaPremultiplied);
		pass.set_mipmap(this._mipmap);
		pass.set_smooth(this._smooth);
		pass.set_repeat(this._repeat);
		pass.set_anisotropy(this._anisotropy);
		pass.set_lightPicker(this._lightPicker);
		pass.set_bothSides(this._bothSides);
		pass.addEventListener(openfl.events.Event.CHANGE,$bind(this,this.onPassChange));
		this.invalidatePasses(null);
	}
	,onPassChange: function(event) {
		var mult = 1;
		var ids;
		var len;
		this._renderOrderId = 0;
		var i = 0;
		while(i < this._numPasses) {
			ids = this._passes[i]._program3Dids;
			len = ids.length;
			var j = 0;
			while(j < len) {
				if(ids[j] != -1) {
					this._renderOrderId += mult * ids[j] | 0;
					j = len;
				}
				++j;
			}
			mult *= 1000;
			++i;
		}
	}
	,onDistancePassChange: function(event) {
		var ids = this._distancePass._program3Dids;
		var len = ids.length;
		this._depthPassId = 0;
		var j = 0;
		while(j < len) {
			if(ids[j] != -1) {
				this._depthPassId += ids[j];
				j = len;
			}
			++j;
		}
	}
	,onDepthPassChange: function(event) {
		var ids = this._depthPass._program3Dids;
		var len = ids.length;
		this._depthPassId = 0;
		var j = 0;
		while(j < len) {
			if(ids[j] != -1) {
				this._depthPassId += ids[j];
				j = len;
			}
			++j;
		}
	}
	,__class__: away3d.materials.MaterialBase
	,__properties__: $extend(away3d.library.assets.NamedAssetBase.prototype.__properties__,{get_owners:"get_owners",get_numPasses:"get_numPasses",get_uniqueId:"get_uniqueId",get_requiresBlending:"get_requiresBlending",set_alphaPremultiplied:"set_alphaPremultiplied",get_alphaPremultiplied:"get_alphaPremultiplied",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_bothSides:"set_bothSides",get_bothSides:"get_bothSides",set_anisotropy:"set_anisotropy",get_anisotropy:"get_anisotropy",set_repeat:"set_repeat",get_repeat:"get_repeat",set_depthCompareMode:"set_depthCompareMode",get_depthCompareMode:"get_depthCompareMode",set_smooth:"set_smooth",get_smooth:"get_smooth",set_mipmap:"set_mipmap",get_mipmap:"get_mipmap",set_lightPicker:"set_lightPicker",get_lightPicker:"get_lightPicker",get_assetType:"get_assetType"})
});
away3d.materials.SinglePassMaterialBase = function() {
	away3d.materials.MaterialBase.call(this);
	this.addPass(this._screenPass = new away3d.materials.passes.SuperShaderPass(this));
};
$hxClasses["away3d.materials.SinglePassMaterialBase"] = away3d.materials.SinglePassMaterialBase;
away3d.materials.SinglePassMaterialBase.__name__ = ["away3d","materials","SinglePassMaterialBase"];
away3d.materials.SinglePassMaterialBase.__super__ = away3d.materials.MaterialBase;
away3d.materials.SinglePassMaterialBase.prototype = $extend(away3d.materials.MaterialBase.prototype,{
	_screenPass: null
	,_alphaBlending: null
	,get_enableLightFallOff: function() {
		return this._screenPass.get_enableLightFallOff();
	}
	,set_enableLightFallOff: function(value) {
		this._screenPass.set_enableLightFallOff(value);
		return value;
	}
	,get_alphaThreshold: function() {
		return this._screenPass.get_diffuseMethod().get_alphaThreshold();
	}
	,set_alphaThreshold: function(value) {
		this._screenPass.get_diffuseMethod().set_alphaThreshold(value);
		this._depthPass.set_alphaThreshold(value);
		this._distancePass.set_alphaThreshold(value);
		return value;
	}
	,set_blendMode: function(value) {
		away3d.materials.MaterialBase.prototype.set_blendMode.call(this,value);
		this._screenPass.setBlendMode(this.get_blendMode() == openfl.display.BlendMode.NORMAL && this.get_requiresBlending()?openfl.display.BlendMode.LAYER:this.get_blendMode());
		return value;
	}
	,set_depthCompareMode: function(value) {
		away3d.materials.MaterialBase.prototype.set_depthCompareMode.call(this,value);
		this._screenPass.set_depthCompareMode(value);
		return value;
	}
	,activateForDepth: function(stage3DProxy,camera,distanceBased) {
		if(distanceBased == null) distanceBased = false;
		if(distanceBased) this._distancePass.set_alphaMask(this._screenPass.get_diffuseMethod().get_texture()); else this._depthPass.set_alphaMask(this._screenPass.get_diffuseMethod().get_texture());
		away3d.materials.MaterialBase.prototype.activateForDepth.call(this,stage3DProxy,camera,distanceBased);
	}
	,get_specularLightSources: function() {
		return this._screenPass.get_specularLightSources();
	}
	,set_specularLightSources: function(value) {
		this._screenPass.set_specularLightSources(value);
		return value;
	}
	,get_diffuseLightSources: function() {
		return this._screenPass.get_diffuseLightSources();
	}
	,set_diffuseLightSources: function(value) {
		this._screenPass.set_diffuseLightSources(value);
		return value;
	}
	,get_requiresBlending: function() {
		return away3d.materials.MaterialBase.prototype.get_requiresBlending.call(this) || this._alphaBlending || this._screenPass.get_colorTransform() != null && this._screenPass.get_colorTransform().alphaMultiplier < 1;
	}
	,get_colorTransform: function() {
		return this._screenPass.get_colorTransform();
	}
	,set_colorTransform: function(value) {
		this._screenPass.set_colorTransform(value);
		return value;
	}
	,get_ambientMethod: function() {
		return this._screenPass.get_ambientMethod();
	}
	,set_ambientMethod: function(value) {
		this._screenPass.set_ambientMethod(value);
		return value;
	}
	,get_shadowMethod: function() {
		return this._screenPass.get_shadowMethod();
	}
	,set_shadowMethod: function(value) {
		this._screenPass.set_shadowMethod(value);
		return value;
	}
	,get_diffuseMethod: function() {
		return this._screenPass.get_diffuseMethod();
	}
	,set_diffuseMethod: function(value) {
		this._screenPass.set_diffuseMethod(value);
		return value;
	}
	,get_normalMethod: function() {
		return this._screenPass.get_normalMethod();
	}
	,set_normalMethod: function(value) {
		this._screenPass.set_normalMethod(value);
		return value;
	}
	,get_specularMethod: function() {
		return this._screenPass.get_specularMethod();
	}
	,set_specularMethod: function(value) {
		this._screenPass.set_specularMethod(value);
		return value;
	}
	,addMethod: function(method) {
		this._screenPass.addMethod(method);
	}
	,get_numMethods: function() {
		return this._screenPass.get_numMethods();
	}
	,hasMethod: function(method) {
		return this._screenPass.hasMethod(method);
	}
	,getMethodAt: function(index) {
		return this._screenPass.getMethodAt(index);
	}
	,addMethodAt: function(method,index) {
		this._screenPass.addMethodAt(method,index);
	}
	,removeMethod: function(method) {
		this._screenPass.removeMethod(method);
	}
	,set_mipmap: function(value) {
		if(this._mipmap == value) return value;
		away3d.materials.MaterialBase.prototype.set_mipmap.call(this,value);
		return value;
	}
	,get_normalMap: function() {
		return this._screenPass.get_normalMap();
	}
	,set_normalMap: function(value) {
		this._screenPass.set_normalMap(value);
		return value;
	}
	,get_specularMap: function() {
		return this._screenPass.get_specularMethod().get_texture();
	}
	,set_specularMap: function(value) {
		if(this._screenPass.get_specularMethod() != null) this._screenPass.get_specularMethod().set_texture(value); else throw new openfl.errors.Error("No specular method was set to assign the specularGlossMap to");
		return value;
	}
	,get_gloss: function() {
		if(this._screenPass.get_specularMethod() != null) return this._screenPass.get_specularMethod().get_gloss(); else return 0;
	}
	,set_gloss: function(value) {
		if(this._screenPass.get_specularMethod() != null) this._screenPass.get_specularMethod().set_gloss(value);
		return value;
	}
	,get_ambient: function() {
		return this._screenPass.get_ambientMethod().get_ambient();
	}
	,set_ambient: function(value) {
		this._screenPass.get_ambientMethod().set_ambient(value);
		return value;
	}
	,get_specular: function() {
		if(this._screenPass.get_specularMethod() != null) return this._screenPass.get_specularMethod().get_specular(); else return 0;
	}
	,set_specular: function(value) {
		if(this._screenPass.get_specularMethod() != null) this._screenPass.get_specularMethod().set_specular(value);
		return value;
	}
	,get_ambientColor: function() {
		return this._screenPass.get_ambientMethod().get_ambientColor();
	}
	,set_ambientColor: function(value) {
		this._screenPass.get_ambientMethod().set_ambientColor(value);
		return value;
	}
	,get_specularColor: function() {
		return this._screenPass.get_specularMethod().get_specularColor();
	}
	,set_specularColor: function(value) {
		this._screenPass.get_specularMethod().set_specularColor(value);
		return value;
	}
	,get_alphaBlending: function() {
		return this._alphaBlending;
	}
	,set_alphaBlending: function(value) {
		this._alphaBlending = value;
		this._screenPass.setBlendMode(this.get_blendMode() == openfl.display.BlendMode.NORMAL && this.get_requiresBlending()?openfl.display.BlendMode.LAYER:this.get_blendMode());
		this._screenPass.set_preserveAlpha(this.get_requiresBlending());
		return value;
	}
	,updateMaterial: function(context) {
		if(this._screenPass._passesDirty) {
			this.clearPasses();
			if(this._screenPass._passes != null) {
				var len = this._screenPass._passes.length;
				var i = 0;
				while(i < len) {
					this.addPass(this._screenPass._passes[i]);
					++i;
				}
			}
			this.addPass(this._screenPass);
			this._screenPass._passesDirty = false;
		}
	}
	,set_lightPicker: function(value) {
		away3d.materials.MaterialBase.prototype.set_lightPicker.call(this,value);
		this._screenPass.set_lightPicker(value);
		return value;
	}
	,__class__: away3d.materials.SinglePassMaterialBase
	,__properties__: $extend(away3d.materials.MaterialBase.prototype.__properties__,{set_alphaBlending:"set_alphaBlending",get_alphaBlending:"get_alphaBlending",set_specularColor:"set_specularColor",get_specularColor:"get_specularColor",set_ambientColor:"set_ambientColor",get_ambientColor:"get_ambientColor",set_specular:"set_specular",get_specular:"get_specular",set_ambient:"set_ambient",get_ambient:"get_ambient",set_gloss:"set_gloss",get_gloss:"get_gloss",set_specularMap:"set_specularMap",get_specularMap:"get_specularMap",set_normalMap:"set_normalMap",get_normalMap:"get_normalMap",get_numMethods:"get_numMethods",set_specularMethod:"set_specularMethod",get_specularMethod:"get_specularMethod",set_normalMethod:"set_normalMethod",get_normalMethod:"get_normalMethod",set_diffuseMethod:"set_diffuseMethod",get_diffuseMethod:"get_diffuseMethod",set_shadowMethod:"set_shadowMethod",get_shadowMethod:"get_shadowMethod",set_ambientMethod:"set_ambientMethod",get_ambientMethod:"get_ambientMethod",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform",set_diffuseLightSources:"set_diffuseLightSources",get_diffuseLightSources:"get_diffuseLightSources",set_specularLightSources:"set_specularLightSources",get_specularLightSources:"get_specularLightSources",set_alphaThreshold:"set_alphaThreshold",get_alphaThreshold:"get_alphaThreshold",set_enableLightFallOff:"set_enableLightFallOff",get_enableLightFallOff:"get_enableLightFallOff"})
});
away3d.materials.ColorMaterial = function(color,alpha) {
	if(alpha == null) alpha = 1;
	if(color == null) color = 13421772;
	this._diffuseAlpha = 1;
	away3d.materials.SinglePassMaterialBase.call(this);
	this.set_color(color);
	this.set_alpha(alpha);
};
$hxClasses["away3d.materials.ColorMaterial"] = away3d.materials.ColorMaterial;
away3d.materials.ColorMaterial.__name__ = ["away3d","materials","ColorMaterial"];
away3d.materials.ColorMaterial.__super__ = away3d.materials.SinglePassMaterialBase;
away3d.materials.ColorMaterial.prototype = $extend(away3d.materials.SinglePassMaterialBase.prototype,{
	_diffuseAlpha: null
	,get_alpha: function() {
		return this._screenPass.get_diffuseMethod().get_diffuseAlpha();
	}
	,set_alpha: function(value) {
		if(value > 1) value = 1; else if(value < 0) value = 0;
		this._screenPass.get_diffuseMethod().set_diffuseAlpha(this._diffuseAlpha = value);
		this._screenPass.set_preserveAlpha(this.get_requiresBlending());
		this._screenPass.setBlendMode(this.get_blendMode() == openfl.display.BlendMode.NORMAL && this.get_requiresBlending()?openfl.display.BlendMode.LAYER:this.get_blendMode());
		return value;
	}
	,get_color: function() {
		return this._screenPass.get_diffuseMethod().get_diffuseColor();
	}
	,set_color: function(value) {
		this._screenPass.get_diffuseMethod().set_diffuseColor(value);
		return value;
	}
	,get_requiresBlending: function() {
		return away3d.materials.SinglePassMaterialBase.prototype.get_requiresBlending.call(this) || this._diffuseAlpha < 1;
	}
	,__class__: away3d.materials.ColorMaterial
	,__properties__: $extend(away3d.materials.SinglePassMaterialBase.prototype.__properties__,{set_color:"set_color",get_color:"get_color",set_alpha:"set_alpha",get_alpha:"get_alpha"})
});
away3d.materials.LightSources = function() { };
$hxClasses["away3d.materials.LightSources"] = away3d.materials.LightSources;
away3d.materials.LightSources.__name__ = ["away3d","materials","LightSources"];
away3d.materials.SegmentMaterial = function(thickness) {
	if(thickness == null) thickness = 1.25;
	away3d.materials.MaterialBase.call(this);
	this.set_bothSides(true);
	this.addPass(this._screenPass = new away3d.materials.passes.SegmentPass(thickness));
	this._screenPass.set_material(this);
};
$hxClasses["away3d.materials.SegmentMaterial"] = away3d.materials.SegmentMaterial;
away3d.materials.SegmentMaterial.__name__ = ["away3d","materials","SegmentMaterial"];
away3d.materials.SegmentMaterial.__super__ = away3d.materials.MaterialBase;
away3d.materials.SegmentMaterial.prototype = $extend(away3d.materials.MaterialBase.prototype,{
	_screenPass: null
	,__class__: away3d.materials.SegmentMaterial
});
away3d.materials.TextureMaterial = function(texture,smooth,repeat,mipmap,anisotropy) {
	if(mipmap == null) mipmap = true;
	if(repeat == null) repeat = false;
	if(smooth == null) smooth = true;
	away3d.materials.SinglePassMaterialBase.call(this);
	this.set_texture(texture);
	this.set_smooth(smooth);
	this.set_repeat(repeat);
	this.set_mipmap(mipmap);
	this.set_anisotropy(anisotropy == null?away3d.textures.Anisotropy.ANISOTROPIC2X:anisotropy);
};
$hxClasses["away3d.materials.TextureMaterial"] = away3d.materials.TextureMaterial;
away3d.materials.TextureMaterial.__name__ = ["away3d","materials","TextureMaterial"];
away3d.materials.TextureMaterial.__super__ = away3d.materials.SinglePassMaterialBase;
away3d.materials.TextureMaterial.prototype = $extend(away3d.materials.SinglePassMaterialBase.prototype,{
	get_animateUVs: function() {
		return this._screenPass.get_animateUVs();
	}
	,set_animateUVs: function(value) {
		this._screenPass.set_animateUVs(value);
		return value;
	}
	,get_alpha: function() {
		if(this._screenPass.get_colorTransform() != null) return this._screenPass.get_colorTransform().alphaMultiplier; else return 1;
	}
	,set_alpha: function(value) {
		if(value > 1) value = 1; else if(value < 0) value = 0;
		if(this.get_colorTransform() == null) this.set_colorTransform(new openfl.geom.ColorTransform());
		this.get_colorTransform().alphaMultiplier = value;
		this._screenPass.set_preserveAlpha(this.get_requiresBlending());
		this._screenPass.setBlendMode(this.get_blendMode() == openfl.display.BlendMode.NORMAL && this.get_requiresBlending()?openfl.display.BlendMode.LAYER:this.get_blendMode());
		return value;
	}
	,get_texture: function() {
		return this._screenPass.get_diffuseMethod().get_texture();
	}
	,set_texture: function(value) {
		this._screenPass.get_diffuseMethod().set_texture(value);
		return value;
	}
	,get_ambientTexture: function() {
		return this._screenPass.get_ambientMethod().get_texture();
	}
	,set_ambientTexture: function(value) {
		this._screenPass.get_ambientMethod().set_texture(value);
		this._screenPass.get_diffuseMethod().set_useAmbientTexture(js.Boot.__cast(value != null , Bool));
		return value;
	}
	,__class__: away3d.materials.TextureMaterial
	,__properties__: $extend(away3d.materials.SinglePassMaterialBase.prototype.__properties__,{set_ambientTexture:"set_ambientTexture",get_ambientTexture:"get_ambientTexture",set_texture:"set_texture",get_texture:"get_texture",set_alpha:"set_alpha",get_alpha:"get_alpha",set_animateUVs:"set_animateUVs",get_animateUVs:"get_animateUVs"})
});
away3d.materials.compilation.MethodDependencyCounter = function() {
	this._usesGlobalPosFragment = false;
};
$hxClasses["away3d.materials.compilation.MethodDependencyCounter"] = away3d.materials.compilation.MethodDependencyCounter;
away3d.materials.compilation.MethodDependencyCounter.__name__ = ["away3d","materials","compilation","MethodDependencyCounter"];
away3d.materials.compilation.MethodDependencyCounter.prototype = {
	_projectionDependencies: null
	,_normalDependencies: null
	,_viewDirDependencies: null
	,_uvDependencies: null
	,_secondaryUVDependencies: null
	,_globalPosDependencies: null
	,_tangentDependencies: null
	,_usesGlobalPosFragment: null
	,_numPointLights: null
	,_lightSourceMask: null
	,reset: function() {
		this._projectionDependencies = 0;
		this._normalDependencies = 0;
		this._viewDirDependencies = 0;
		this._uvDependencies = 0;
		this._secondaryUVDependencies = 0;
		this._globalPosDependencies = 0;
		this._tangentDependencies = 0;
		this._usesGlobalPosFragment = false;
	}
	,setPositionedLights: function(numPointLights,lightSourceMask) {
		this._numPointLights = numPointLights;
		this._lightSourceMask = lightSourceMask;
	}
	,includeMethodVO: function(methodVO) {
		if(methodVO.needsProjection) ++this._projectionDependencies;
		if(methodVO.needsGlobalVertexPos) {
			++this._globalPosDependencies;
			if(methodVO.needsGlobalFragmentPos) this._usesGlobalPosFragment = true;
		} else if(methodVO.needsGlobalFragmentPos) {
			++this._globalPosDependencies;
			this._usesGlobalPosFragment = true;
		}
		if(methodVO.needsNormals) ++this._normalDependencies;
		if(methodVO.needsTangents) ++this._tangentDependencies;
		if(methodVO.needsView) ++this._viewDirDependencies;
		if(methodVO.needsUV) ++this._uvDependencies;
		if(methodVO.needsSecondaryUV) ++this._secondaryUVDependencies;
	}
	,get_tangentDependencies: function() {
		return this._tangentDependencies;
	}
	,get_usesGlobalPosFragment: function() {
		return this._usesGlobalPosFragment;
	}
	,get_projectionDependencies: function() {
		return this._projectionDependencies;
	}
	,get_normalDependencies: function() {
		return this._normalDependencies;
	}
	,get_viewDirDependencies: function() {
		return this._viewDirDependencies;
	}
	,get_uvDependencies: function() {
		return this._uvDependencies;
	}
	,get_secondaryUVDependencies: function() {
		return this._secondaryUVDependencies;
	}
	,get_globalPosDependencies: function() {
		return this._globalPosDependencies;
	}
	,addWorldSpaceDependencies: function(fragmentLights) {
		if(this._viewDirDependencies > 0) ++this._globalPosDependencies;
		if(this._numPointLights > 0 && (this._lightSourceMask & away3d.materials.LightSources.LIGHTS) == 1) {
			++this._globalPosDependencies;
			if(fragmentLights) this._usesGlobalPosFragment = true;
		}
	}
	,__class__: away3d.materials.compilation.MethodDependencyCounter
	,__properties__: {get_globalPosDependencies:"get_globalPosDependencies",get_secondaryUVDependencies:"get_secondaryUVDependencies",get_uvDependencies:"get_uvDependencies",get_viewDirDependencies:"get_viewDirDependencies",get_normalDependencies:"get_normalDependencies",get_projectionDependencies:"get_projectionDependencies",get_usesGlobalPosFragment:"get_usesGlobalPosFragment",get_tangentDependencies:"get_tangentDependencies"}
};
haxe.ds.StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe.ds.StringMap;
haxe.ds.StringMap.__name__ = ["haxe","ds","StringMap"];
haxe.ds.StringMap.__interfaces__ = [IMap];
haxe.ds.StringMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h["$" + key] = value;
	}
	,get: function(key) {
		return this.h["$" + key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		key = "$" + key;
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key.substr(1));
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref["$" + i];
		}};
	}
	,__class__: haxe.ds.StringMap
};
away3d.materials.compilation.RegisterPool = function(regName,regCount,persistent) {
	if(persistent == null) persistent = true;
	this._regName = regName;
	this._regCount = regCount;
	this._persistent = persistent;
	this.initRegisters(regName,regCount);
};
$hxClasses["away3d.materials.compilation.RegisterPool"] = away3d.materials.compilation.RegisterPool;
away3d.materials.compilation.RegisterPool.__name__ = ["away3d","materials","compilation","RegisterPool"];
away3d.materials.compilation.RegisterPool._initPool = function(regName,regCount) {
	var hash = regName + regCount;
	if(away3d.materials.compilation.RegisterPool._regPool.get(hash) != null) return hash;
	var vectorRegisters = new Array();
	away3d.materials.compilation.RegisterPool._regPool.set(hash,vectorRegisters);
	var registerComponents = new Array();
	away3d.materials.compilation.RegisterPool._regCompsPool.set(hash,registerComponents);
	var i;
	var _g = 0;
	while(_g < regCount) {
		var i1 = _g++;
		vectorRegisters[i1] = new away3d.materials.compilation.ShaderRegisterElement(regName,i1);
		var j;
		var _g1 = 0;
		while(_g1 < 4) {
			var j1 = _g1++;
			if(registerComponents[j1] == null) registerComponents[j1] = new Array();
			registerComponents[j1][i1] = new away3d.materials.compilation.ShaderRegisterElement(regName,i1,j1);
		}
	}
	return hash;
};
away3d.materials.compilation.RegisterPool.prototype = {
	_vectorRegisters: null
	,_registerComponents: null
	,_regName: null
	,_usedSingleCount: null
	,_usedVectorCount: null
	,_regCount: null
	,_persistent: null
	,requestFreeVectorReg: function() {
		var i;
		var _g1 = 0;
		var _g = this._regCount;
		while(_g1 < _g) {
			var i1 = _g1++;
			if(!this.isRegisterUsed(i1)) {
				if(this._persistent) this._usedVectorCount[i1]++;
				return this._vectorRegisters[i1];
			}
		}
		throw new openfl.errors.Error("Register overflow!");
		return null;
	}
	,requestFreeRegComponent: function() {
		var i;
		var _g1 = 0;
		var _g = this._regCount;
		while(_g1 < _g) {
			var i1 = _g1++;
			if((function($this) {
				var $r;
				var a = $this._usedVectorCount[i1];
				var aNeg = a < 0;
				var bNeg = 0 < 0;
				$r = aNeg != bNeg?aNeg:a > 0;
				return $r;
			}(this))) continue;
			var j;
			var _g2 = 0;
			while(_g2 < 4) {
				var j1 = _g2++;
				if((function($this) {
					var $r;
					var $int = $this._usedSingleCount[j1][i1];
					$r = $int < 0?4294967296.0 + $int:$int + 0.0;
					return $r;
				}(this)) == 0) {
					if(this._persistent) this._usedSingleCount[j1][i1]++;
					return this._registerComponents[j1][i1];
				}
			}
		}
		throw new openfl.errors.Error("Register overflow!");
		return null;
	}
	,addUsage: function(register,usageCount) {
		if(register._component > -1) {
			var a = this._usedSingleCount[register._component][register.get_index()];
			this._usedSingleCount[register._component][register.get_index()] = a + usageCount;
		} else {
			var a1 = this._usedVectorCount[register.get_index()];
			this._usedVectorCount[register.get_index()] = a1 + usageCount;
		}
	}
	,removeUsage: function(register) {
		if(register._component > -1) {
			if((function($this) {
				var $r;
				var a = --$this._usedSingleCount[register._component][register.get_index()];
				$r = (function($this) {
					var $r;
					var aNeg = 0 < 0;
					var bNeg = a < 0;
					$r = aNeg != bNeg?aNeg:0 > a;
					return $r;
				}($this));
				return $r;
			}(this))) throw new openfl.errors.Error("More usages removed than exist!");
		} else if((function($this) {
			var $r;
			var a1 = --$this._usedVectorCount[register.get_index()];
			$r = (function($this) {
				var $r;
				var aNeg1 = 0 < 0;
				var bNeg1 = a1 < 0;
				$r = aNeg1 != bNeg1?aNeg1:0 > a1;
				return $r;
			}($this));
			return $r;
		}(this))) throw new openfl.errors.Error("More usages removed than exist!");
	}
	,dispose: function() {
		this._vectorRegisters = null;
		this._registerComponents = null;
		this._usedSingleCount = null;
		this._usedVectorCount = null;
	}
	,hasRegisteredRegs: function() {
		var i;
		var _g1 = 0;
		var _g = this._regCount;
		while(_g1 < _g) {
			var i1 = _g1++;
			if(this.isRegisterUsed(i1)) return true;
		}
		return false;
	}
	,initRegisters: function(regName,regCount) {
		var hash = away3d.materials.compilation.RegisterPool._initPool(regName,regCount);
		this._vectorRegisters = away3d.materials.compilation.RegisterPool._regPool.get(hash);
		this._registerComponents = away3d.materials.compilation.RegisterPool._regCompsPool.get(hash);
		this._usedVectorCount = new Array();
		this._usedSingleCount = new Array();
		this._usedSingleCount[0] = new Array();
		this._usedSingleCount[1] = new Array();
		this._usedSingleCount[2] = new Array();
		this._usedSingleCount[3] = new Array();
		away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(this._usedVectorCount),regCount,0);
		away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(this._usedSingleCount[0]),regCount,0);
		away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(this._usedSingleCount[1]),regCount,0);
		away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(this._usedSingleCount[2]),regCount,0);
		away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(this._usedSingleCount[3]),regCount,0);
	}
	,isRegisterUsed: function(index) {
		if((function($this) {
			var $r;
			var a = $this._usedVectorCount[index];
			var aNeg = a < 0;
			var bNeg = 0 < 0;
			$r = aNeg != bNeg?aNeg:a > 0;
			return $r;
		}(this))) return true;
		var i;
		var _g = 0;
		while(_g < 4) {
			var i1 = _g++;
			if((function($this) {
				var $r;
				var a1 = $this._usedSingleCount[i1][index];
				var aNeg1 = a1 < 0;
				var bNeg1 = 0 < 0;
				$r = aNeg1 != bNeg1?aNeg1:a1 > 0;
				return $r;
			}(this))) return true;
		}
		return false;
	}
	,__class__: away3d.materials.compilation.RegisterPool
};
away3d.materials.compilation.ShaderCompiler = function(profile) {
	this._preserveAlpha = true;
	this._commonsDataIndex = -1;
	this._uvBufferIndex = -1;
	this._uvTransformIndex = -1;
	this._secondaryUVBufferIndex = -1;
	this._normalBufferIndex = -1;
	this._tangentBufferIndex = -1;
	this._lightFragmentConstantIndex = -1;
	this._sceneMatrixIndex = -1;
	this._sceneNormalMatrixIndex = -1;
	this._cameraPositionIndex = -1;
	this._probeWeightsIndex = -1;
	this._sharedRegisters = new away3d.materials.compilation.ShaderRegisterData();
	this._dependencyCounter = new away3d.materials.compilation.MethodDependencyCounter();
	this._profile = profile;
	this.initRegisterCache(profile);
};
$hxClasses["away3d.materials.compilation.ShaderCompiler"] = away3d.materials.compilation.ShaderCompiler;
away3d.materials.compilation.ShaderCompiler.__name__ = ["away3d","materials","compilation","ShaderCompiler"];
away3d.materials.compilation.ShaderCompiler.prototype = {
	_sharedRegisters: null
	,_registerCache: null
	,_dependencyCounter: null
	,_methodSetup: null
	,_smooth: null
	,_repeat: null
	,_mipmap: null
	,_anisotropy: null
	,_enableLightFallOff: null
	,_preserveAlpha: null
	,_animateUVs: null
	,_alphaPremultiplied: null
	,_vertexConstantData: null
	,_fragmentConstantData: null
	,_vertexCode: null
	,_fragmentCode: null
	,_fragmentLightCode: null
	,_fragmentPostLightCode: null
	,_commonsDataIndex: null
	,_animatableAttributes: null
	,_animationTargetRegisters: null
	,_lightProbeDiffuseIndices: null
	,_lightProbeSpecularIndices: null
	,_uvBufferIndex: null
	,_uvTransformIndex: null
	,_secondaryUVBufferIndex: null
	,_normalBufferIndex: null
	,_tangentBufferIndex: null
	,_lightFragmentConstantIndex: null
	,_sceneMatrixIndex: null
	,_sceneNormalMatrixIndex: null
	,_cameraPositionIndex: null
	,_probeWeightsIndex: null
	,_specularLightSources: null
	,_diffuseLightSources: null
	,_numLights: null
	,_numLightProbes: null
	,_numPointLights: null
	,_numDirectionalLights: null
	,_numProbeRegisters: null
	,_combinedLightSources: null
	,_usingSpecularMethod: null
	,_needUVAnimation: null
	,_UVTarget: null
	,_UVSource: null
	,_profile: null
	,_forceSeperateMVP: null
	,get_enableLightFallOff: function() {
		return this._enableLightFallOff;
	}
	,set_enableLightFallOff: function(value) {
		this._enableLightFallOff = value;
		return value;
	}
	,get_needUVAnimation: function() {
		return this._needUVAnimation;
	}
	,get_UVTarget: function() {
		return this._UVTarget;
	}
	,get_UVSource: function() {
		return this._UVSource;
	}
	,get_forceSeperateMVP: function() {
		return this._forceSeperateMVP;
	}
	,set_forceSeperateMVP: function(value) {
		this._forceSeperateMVP = value;
		return value;
	}
	,initRegisterCache: function(profile) {
		this._registerCache = new away3d.materials.compilation.ShaderRegisterCache(profile);
		this._registerCache.set_vertexAttributesOffset(1);
		this._registerCache.reset();
	}
	,get_animateUVs: function() {
		return this._animateUVs;
	}
	,set_animateUVs: function(value) {
		this._animateUVs = value;
		return value;
	}
	,get_alphaPremultiplied: function() {
		return this._alphaPremultiplied;
	}
	,set_alphaPremultiplied: function(value) {
		this._alphaPremultiplied = value;
		return value;
	}
	,get_preserveAlpha: function() {
		return this._preserveAlpha;
	}
	,set_preserveAlpha: function(value) {
		this._preserveAlpha = value;
		return value;
	}
	,setTextureSampling: function(smooth,repeat,mipmap,anisotropy) {
		this._smooth = smooth;
		this._repeat = repeat;
		this._mipmap = mipmap;
		this._anisotropy = anisotropy;
	}
	,setConstantDataBuffers: function(vertexConstantData,fragmentConstantData) {
		this._vertexConstantData = vertexConstantData;
		this._fragmentConstantData = fragmentConstantData;
	}
	,get_methodSetup: function() {
		return this._methodSetup;
	}
	,set_methodSetup: function(value) {
		this._methodSetup = value;
		return value;
	}
	,compile: function() {
		this.initRegisterIndices();
		this.initLightData();
		this._animatableAttributes = ["va0"];
		this._animationTargetRegisters = ["vt0"];
		this._vertexCode = "";
		this._fragmentCode = "";
		this._sharedRegisters.localPosition = this._registerCache.getFreeVertexVectorTemp();
		this._registerCache.addVertexTempUsages(this._sharedRegisters.localPosition,1);
		this.createCommons();
		this.calculateDependencies();
		this.updateMethodRegisters();
		var i = 0;
		while(i < 4) {
			this._registerCache.getFreeVertexConstant();
			++i;
		}
		this.createNormalRegisters();
		if(this._dependencyCounter.get_globalPosDependencies() > 0 || this._forceSeperateMVP) this.compileGlobalPositionCode();
		this.compileProjectionCode();
		this.compileMethodsCode();
		this.compileFragmentOutput();
		this._fragmentPostLightCode = this.get_fragmentCode();
	}
	,createNormalRegisters: function() {
	}
	,compileMethodsCode: function() {
		if(this._dependencyCounter.get_uvDependencies() > 0) this.compileUVCode();
		if(this._dependencyCounter.get_secondaryUVDependencies() > 0) this.compileSecondaryUVCode();
		if(this._dependencyCounter.get_normalDependencies() > 0) this.compileNormalCode();
		if(this._dependencyCounter.get_viewDirDependencies() > 0) this.compileViewDirCode();
		this.compileLightingCode();
		this._fragmentLightCode = this._fragmentCode;
		this._fragmentCode = "";
		this.compileMethods();
	}
	,compileLightingCode: function() {
	}
	,compileViewDirCode: function() {
	}
	,compileNormalCode: function() {
	}
	,compileUVCode: function() {
		var uvAttributeReg = this._registerCache.getFreeVertexAttribute();
		this._uvBufferIndex = uvAttributeReg.get_index();
		var varying = this._registerCache.getFreeVarying();
		this._sharedRegisters.uvVarying = varying;
		if(this.get_animateUVs()) {
			var uvTransform1 = this._registerCache.getFreeVertexConstant();
			var uvTransform2 = this._registerCache.getFreeVertexConstant();
			this._uvTransformIndex = uvTransform1.get_index() * 4;
			this._vertexCode += "dp4 " + Std.string(varying) + ".x, " + Std.string(uvAttributeReg) + ", " + Std.string(uvTransform1) + "\n" + "dp4 " + Std.string(varying) + ".y, " + Std.string(uvAttributeReg) + ", " + Std.string(uvTransform2) + "\n" + "mov " + Std.string(varying) + ".zw, " + Std.string(uvAttributeReg) + ".zw \n";
		} else {
			this._uvTransformIndex = -1;
			this._needUVAnimation = true;
			this._UVTarget = varying.toString();
			this._UVSource = uvAttributeReg.toString();
		}
	}
	,compileSecondaryUVCode: function() {
		var uvAttributeReg = this._registerCache.getFreeVertexAttribute();
		this._secondaryUVBufferIndex = uvAttributeReg.get_index();
		this._sharedRegisters.secondaryUVVarying = this._registerCache.getFreeVarying();
		this._vertexCode += "mov " + Std.string(this._sharedRegisters.secondaryUVVarying) + ", " + Std.string(uvAttributeReg) + "\n";
	}
	,compileGlobalPositionCode: function() {
		this._sharedRegisters.globalPositionVertex = this._registerCache.getFreeVertexVectorTemp();
		this._registerCache.addVertexTempUsages(this._sharedRegisters.globalPositionVertex,this._dependencyCounter.get_globalPosDependencies());
		var positionMatrixReg = this._registerCache.getFreeVertexConstant();
		this._registerCache.getFreeVertexConstant();
		this._registerCache.getFreeVertexConstant();
		this._registerCache.getFreeVertexConstant();
		this._sceneMatrixIndex = positionMatrixReg.get_index() * 4;
		this._vertexCode += "m44 " + Std.string(this._sharedRegisters.globalPositionVertex) + ", " + Std.string(this._sharedRegisters.localPosition) + ", " + Std.string(positionMatrixReg) + "\n";
		if(this._dependencyCounter.get_usesGlobalPosFragment()) {
			this._sharedRegisters.globalPositionVarying = this._registerCache.getFreeVarying();
			this._vertexCode += "mov " + Std.string(this._sharedRegisters.globalPositionVarying) + ", " + Std.string(this._sharedRegisters.globalPositionVertex) + "\n";
		}
	}
	,compileProjectionCode: function() {
		var pos;
		if(this._dependencyCounter.get_globalPosDependencies() > 0 || this._forceSeperateMVP) pos = this._sharedRegisters.globalPositionVertex.toString(); else pos = this._animationTargetRegisters[0];
		var code;
		if(this._dependencyCounter.get_projectionDependencies() > 0) {
			this._sharedRegisters.projectionFragment = this._registerCache.getFreeVarying();
			code = "m44 vt5, " + pos + ", vc0\t\t\n" + "mov " + Std.string(this._sharedRegisters.projectionFragment) + ", vt5\n" + "mov op, vt5\n";
		} else code = "m44 op, " + pos + ", vc0\t\t\n";
		this._vertexCode += code;
	}
	,compileFragmentOutput: function() {
		this._fragmentCode += "mov " + Std.string(this._registerCache.get_fragmentOutputRegister()) + ", " + Std.string(this._sharedRegisters.shadedTarget) + "\n";
		this._registerCache.removeFragmentTempUsage(this._sharedRegisters.shadedTarget);
	}
	,initRegisterIndices: function() {
		this._commonsDataIndex = -1;
		this._cameraPositionIndex = -1;
		this._uvBufferIndex = -1;
		this._uvTransformIndex = -1;
		this._secondaryUVBufferIndex = -1;
		this._normalBufferIndex = -1;
		this._tangentBufferIndex = -1;
		this._lightFragmentConstantIndex = -1;
		this._sceneMatrixIndex = -1;
		this._sceneNormalMatrixIndex = -1;
		this._probeWeightsIndex = -1;
	}
	,initLightData: function() {
		this._numLights = this._numPointLights + this._numDirectionalLights;
		this._numProbeRegisters = Math.ceil(this._numLightProbes / 4);
		if(this._methodSetup._specularMethod != null) this._combinedLightSources = this._specularLightSources | this._diffuseLightSources; else this._combinedLightSources = this._diffuseLightSources;
		this._usingSpecularMethod = js.Boot.__cast(this._methodSetup._specularMethod != null && (this.usesLightsForSpecular() || this.usesProbesForSpecular()) , Bool);
	}
	,createCommons: function() {
		this._sharedRegisters.commons = this._registerCache.getFreeFragmentConstant();
		this._commonsDataIndex = this._sharedRegisters.commons.get_index() * 4;
	}
	,calculateDependencies: function() {
		this._dependencyCounter.reset();
		var methods = this._methodSetup._methods;
		var len;
		this.setupAndCountMethodDependencies(this._methodSetup._diffuseMethod,this._methodSetup._diffuseMethodVO);
		if(this._methodSetup._shadowMethod != null) this.setupAndCountMethodDependencies(this._methodSetup._shadowMethod,this._methodSetup._shadowMethodVO);
		this.setupAndCountMethodDependencies(this._methodSetup._ambientMethod,this._methodSetup._ambientMethodVO);
		if(this._usingSpecularMethod) this.setupAndCountMethodDependencies(this._methodSetup._specularMethod,this._methodSetup._specularMethodVO);
		if(this._methodSetup._colorTransformMethod != null) this.setupAndCountMethodDependencies(this._methodSetup._colorTransformMethod,this._methodSetup._colorTransformMethodVO);
		len = methods.length;
		var i = 0;
		while(i < len) {
			this.setupAndCountMethodDependencies(methods[i].method,methods[i].data);
			++i;
		}
		if(this.get_usesNormals()) this.setupAndCountMethodDependencies(this._methodSetup._normalMethod,this._methodSetup._normalMethodVO);
		this._dependencyCounter.setPositionedLights(this._numPointLights,this._combinedLightSources);
	}
	,setupAndCountMethodDependencies: function(method,methodVO) {
		this.setupMethod(method,methodVO);
		this._dependencyCounter.includeMethodVO(methodVO);
	}
	,setupMethod: function(method,methodVO) {
		method.reset();
		methodVO.reset();
		methodVO.vertexData = this._vertexConstantData;
		methodVO.fragmentData = this._fragmentConstantData;
		methodVO.useSmoothTextures = this._smooth;
		methodVO.repeatTextures = this._repeat;
		methodVO.useMipmapping = this._mipmap;
		methodVO.anisotropy = this._anisotropy;
		methodVO.useLightFallOff = this._enableLightFallOff && this._profile != "baselineConstrained";
		methodVO.numLights = this._numLights + this._numLightProbes;
		method.initVO(methodVO);
	}
	,get_commonsDataIndex: function() {
		return this._commonsDataIndex;
	}
	,updateMethodRegisters: function() {
		this._methodSetup._normalMethod.set_sharedRegisters(this._sharedRegisters);
		this._methodSetup._diffuseMethod.set_sharedRegisters(this._sharedRegisters);
		if(this._methodSetup._shadowMethod != null) this._methodSetup._shadowMethod.set_sharedRegisters(this._sharedRegisters);
		this._methodSetup._ambientMethod.set_sharedRegisters(this._sharedRegisters);
		if(this._methodSetup._specularMethod != null) this._methodSetup._specularMethod.set_sharedRegisters(this._sharedRegisters);
		if(this._methodSetup._colorTransformMethod != null) this._methodSetup._colorTransformMethod.set_sharedRegisters(this._sharedRegisters);
		var methods = this._methodSetup._methods;
		var len = methods.length;
		var i = 0;
		while(i < len) {
			methods[i].method.set_sharedRegisters(this._sharedRegisters);
			++i;
		}
	}
	,get_numUsedVertexConstants: function() {
		return this._registerCache.get_numUsedVertexConstants();
	}
	,get_numUsedFragmentConstants: function() {
		return this._registerCache.get_numUsedFragmentConstants();
	}
	,get_numUsedStreams: function() {
		return this._registerCache.get_numUsedStreams();
	}
	,get_numUsedTextures: function() {
		return this._registerCache.get_numUsedTextures();
	}
	,get_numUsedVaryings: function() {
		return this._registerCache.get_numUsedVaryings();
	}
	,usesLightsForSpecular: function() {
		return this._numLights > 0 && (this._specularLightSources & away3d.materials.LightSources.LIGHTS) != 0;
	}
	,usesLightsForDiffuse: function() {
		return this._numLights > 0 && (this._diffuseLightSources & away3d.materials.LightSources.LIGHTS) != 0;
	}
	,dispose: function() {
		this.cleanUpMethods();
		this._registerCache.dispose();
		this._registerCache = null;
		this._sharedRegisters = null;
	}
	,cleanUpMethods: function() {
		if(this._methodSetup._normalMethod != null) this._methodSetup._normalMethod.cleanCompilationData();
		if(this._methodSetup._diffuseMethod != null) this._methodSetup._diffuseMethod.cleanCompilationData();
		if(this._methodSetup._ambientMethod != null) this._methodSetup._ambientMethod.cleanCompilationData();
		if(this._methodSetup._specularMethod != null) this._methodSetup._specularMethod.cleanCompilationData();
		if(this._methodSetup._shadowMethod != null) this._methodSetup._shadowMethod.cleanCompilationData();
		if(this._methodSetup._colorTransformMethod != null) this._methodSetup._colorTransformMethod.cleanCompilationData();
		var methods = this._methodSetup._methods;
		var len = methods.length;
		var i = 0;
		while(i < len) {
			methods[i].method.cleanCompilationData();
			++i;
		}
	}
	,get_specularLightSources: function() {
		return this._specularLightSources;
	}
	,set_specularLightSources: function(value) {
		this._specularLightSources = value;
		return value;
	}
	,get_diffuseLightSources: function() {
		return this._diffuseLightSources;
	}
	,set_diffuseLightSources: function(value) {
		this._diffuseLightSources = value;
		return value;
	}
	,usesProbesForSpecular: function() {
		return this._numLightProbes > 0 && (this._specularLightSources & away3d.materials.LightSources.PROBES) != 0;
	}
	,usesProbesForDiffuse: function() {
		return this._numLightProbes > 0 && (this._diffuseLightSources & away3d.materials.LightSources.PROBES) != 0;
	}
	,usesProbes: function() {
		return this._numLightProbes > 0 && ((this._diffuseLightSources | this._specularLightSources) & away3d.materials.LightSources.PROBES) != 0;
	}
	,get_uvBufferIndex: function() {
		return this._uvBufferIndex;
	}
	,get_uvTransformIndex: function() {
		return this._uvTransformIndex;
	}
	,get_secondaryUVBufferIndex: function() {
		return this._secondaryUVBufferIndex;
	}
	,get_normalBufferIndex: function() {
		return this._normalBufferIndex;
	}
	,get_tangentBufferIndex: function() {
		return this._tangentBufferIndex;
	}
	,get_lightFragmentConstantIndex: function() {
		return this._lightFragmentConstantIndex;
	}
	,get_cameraPositionIndex: function() {
		return this._cameraPositionIndex;
	}
	,get_sceneMatrixIndex: function() {
		return this._sceneMatrixIndex;
	}
	,get_sceneNormalMatrixIndex: function() {
		return this._sceneNormalMatrixIndex;
	}
	,get_probeWeightsIndex: function() {
		return this._probeWeightsIndex;
	}
	,get_vertexCode: function() {
		return this._vertexCode;
	}
	,get_fragmentCode: function() {
		return this._fragmentCode;
	}
	,get_fragmentLightCode: function() {
		return this._fragmentLightCode;
	}
	,get_fragmentPostLightCode: function() {
		return this._fragmentPostLightCode;
	}
	,get_shadedTarget: function() {
		return this._sharedRegisters.shadedTarget.toString();
	}
	,get_numPointLights: function() {
		return this._numPointLights;
	}
	,set_numPointLights: function(numPointLights) {
		this._numPointLights = numPointLights;
		return numPointLights;
	}
	,get_numDirectionalLights: function() {
		return this._numDirectionalLights;
	}
	,set_numDirectionalLights: function(value) {
		this._numDirectionalLights = value;
		return value;
	}
	,get_numLightProbes: function() {
		return this._numLightProbes;
	}
	,set_numLightProbes: function(value) {
		this._numLightProbes = value;
		return value;
	}
	,get_usingSpecularMethod: function() {
		return this._usingSpecularMethod;
	}
	,get_animatableAttributes: function() {
		return this._animatableAttributes;
	}
	,get_animationTargetRegisters: function() {
		return this._animationTargetRegisters;
	}
	,get_usesNormals: function() {
		return this._dependencyCounter.get_normalDependencies() > 0 && this._methodSetup._normalMethod.get_hasOutput();
	}
	,usesLights: function() {
		return this._numLights > 0 && (this._combinedLightSources & away3d.materials.LightSources.LIGHTS) != 0;
	}
	,compileMethods: function() {
		var methods = this._methodSetup._methods;
		var numMethods = methods.length;
		var method;
		var data;
		var alphaReg = null;
		if(this._preserveAlpha) {
			alphaReg = this._registerCache.getFreeFragmentSingleTemp();
			this._registerCache.addFragmentTempUsages(alphaReg,1);
			this._fragmentCode += "mov " + Std.string(alphaReg) + ", " + Std.string(this._sharedRegisters.shadedTarget) + ".w\n";
		}
		var i = 0;
		while(i < numMethods) {
			method = methods[i].method;
			data = methods[i].data;
			this._vertexCode += method.getVertexCode(data,this._registerCache);
			if(data.needsGlobalVertexPos || data.needsGlobalFragmentPos) this._registerCache.removeVertexTempUsage(this._sharedRegisters.globalPositionVertex);
			this._fragmentCode += method.getFragmentCode(data,this._registerCache,this._sharedRegisters.shadedTarget);
			if(data.needsNormals) this._registerCache.removeFragmentTempUsage(this._sharedRegisters.normalFragment);
			if(data.needsView) this._registerCache.removeFragmentTempUsage(this._sharedRegisters.viewDirFragment);
			++i;
		}
		if(this._preserveAlpha) {
			this._fragmentCode += "mov " + Std.string(this._sharedRegisters.shadedTarget) + ".w, " + Std.string(alphaReg) + "\n";
			this._registerCache.removeFragmentTempUsage(alphaReg);
		}
		if(this._methodSetup._colorTransformMethod != null) {
			this._vertexCode += this._methodSetup._colorTransformMethod.getVertexCode(this._methodSetup._colorTransformMethodVO,this._registerCache);
			this._fragmentCode += this._methodSetup._colorTransformMethod.getFragmentCode(this._methodSetup._colorTransformMethodVO,this._registerCache,this._sharedRegisters.shadedTarget);
		}
	}
	,get_lightProbeDiffuseIndices: function() {
		return this._lightProbeDiffuseIndices;
	}
	,get_lightProbeSpecularIndices: function() {
		return this._lightProbeSpecularIndices;
	}
	,__class__: away3d.materials.compilation.ShaderCompiler
	,__properties__: {get_lightProbeSpecularIndices:"get_lightProbeSpecularIndices",get_lightProbeDiffuseIndices:"get_lightProbeDiffuseIndices",get_usesNormals:"get_usesNormals",get_animationTargetRegisters:"get_animationTargetRegisters",get_animatableAttributes:"get_animatableAttributes",get_usingSpecularMethod:"get_usingSpecularMethod",set_numLightProbes:"set_numLightProbes",get_numLightProbes:"get_numLightProbes",set_numDirectionalLights:"set_numDirectionalLights",get_numDirectionalLights:"get_numDirectionalLights",set_numPointLights:"set_numPointLights",get_numPointLights:"get_numPointLights",get_shadedTarget:"get_shadedTarget",get_fragmentPostLightCode:"get_fragmentPostLightCode",get_fragmentLightCode:"get_fragmentLightCode",get_fragmentCode:"get_fragmentCode",get_vertexCode:"get_vertexCode",get_probeWeightsIndex:"get_probeWeightsIndex",get_sceneNormalMatrixIndex:"get_sceneNormalMatrixIndex",get_sceneMatrixIndex:"get_sceneMatrixIndex",get_cameraPositionIndex:"get_cameraPositionIndex",get_lightFragmentConstantIndex:"get_lightFragmentConstantIndex",get_tangentBufferIndex:"get_tangentBufferIndex",get_normalBufferIndex:"get_normalBufferIndex",get_secondaryUVBufferIndex:"get_secondaryUVBufferIndex",get_uvTransformIndex:"get_uvTransformIndex",get_uvBufferIndex:"get_uvBufferIndex",set_diffuseLightSources:"set_diffuseLightSources",get_diffuseLightSources:"get_diffuseLightSources",set_specularLightSources:"set_specularLightSources",get_specularLightSources:"get_specularLightSources",get_numUsedVaryings:"get_numUsedVaryings",get_numUsedTextures:"get_numUsedTextures",get_numUsedStreams:"get_numUsedStreams",get_numUsedFragmentConstants:"get_numUsedFragmentConstants",get_numUsedVertexConstants:"get_numUsedVertexConstants",get_commonsDataIndex:"get_commonsDataIndex",set_methodSetup:"set_methodSetup",get_methodSetup:"get_methodSetup",set_preserveAlpha:"set_preserveAlpha",get_preserveAlpha:"get_preserveAlpha",set_alphaPremultiplied:"set_alphaPremultiplied",get_alphaPremultiplied:"get_alphaPremultiplied",set_animateUVs:"set_animateUVs",get_animateUVs:"get_animateUVs",set_forceSeperateMVP:"set_forceSeperateMVP",get_forceSeperateMVP:"get_forceSeperateMVP",get_UVSource:"get_UVSource",get_UVTarget:"get_UVTarget",get_needUVAnimation:"get_needUVAnimation",set_enableLightFallOff:"set_enableLightFallOff",get_enableLightFallOff:"get_enableLightFallOff"}
};
away3d.materials.compilation.ShaderRegisterData = function() {
};
$hxClasses["away3d.materials.compilation.ShaderRegisterData"] = away3d.materials.compilation.ShaderRegisterData;
away3d.materials.compilation.ShaderRegisterData.__name__ = ["away3d","materials","compilation","ShaderRegisterData"];
away3d.materials.compilation.ShaderRegisterData.prototype = {
	normalVarying: null
	,tangentVarying: null
	,bitangentVarying: null
	,uvVarying: null
	,secondaryUVVarying: null
	,viewDirVarying: null
	,shadedTarget: null
	,globalPositionVertex: null
	,globalPositionVarying: null
	,localPosition: null
	,normalInput: null
	,tangentInput: null
	,animatedNormal: null
	,animatedTangent: null
	,commons: null
	,projectionFragment: null
	,normalFragment: null
	,viewDirFragment: null
	,bitangent: null
	,__class__: away3d.materials.compilation.ShaderRegisterData
};
away3d.materials.compilation.ShaderRegisterElement = function(regName,index,component) {
	if(component == null) component = -1;
	this._component = component;
	this._regName = regName;
	this._index = index;
	this._toStr = this._regName;
	if(this._index >= 0) this._toStr += this._index;
	if(component > -1) this._toStr += "." + away3d.materials.compilation.ShaderRegisterElement.COMPONENTS[component];
};
$hxClasses["away3d.materials.compilation.ShaderRegisterElement"] = away3d.materials.compilation.ShaderRegisterElement;
away3d.materials.compilation.ShaderRegisterElement.__name__ = ["away3d","materials","compilation","ShaderRegisterElement"];
away3d.materials.compilation.ShaderRegisterElement.prototype = {
	_regName: null
	,_index: null
	,_toStr: null
	,_component: null
	,toString: function() {
		return this._toStr;
	}
	,get_regName: function() {
		return this._regName;
	}
	,get_index: function() {
		return this._index;
	}
	,__class__: away3d.materials.compilation.ShaderRegisterElement
	,__properties__: {get_index:"get_index",get_regName:"get_regName"}
};
away3d.materials.compilation.SuperShaderCompiler = function(profile) {
	away3d.materials.compilation.ShaderCompiler.call(this,profile);
};
$hxClasses["away3d.materials.compilation.SuperShaderCompiler"] = away3d.materials.compilation.SuperShaderCompiler;
away3d.materials.compilation.SuperShaderCompiler.__name__ = ["away3d","materials","compilation","SuperShaderCompiler"];
away3d.materials.compilation.SuperShaderCompiler.__super__ = away3d.materials.compilation.ShaderCompiler;
away3d.materials.compilation.SuperShaderCompiler.prototype = $extend(away3d.materials.compilation.ShaderCompiler.prototype,{
	_pointLightRegisters: null
	,_dirLightRegisters: null
	,initLightData: function() {
		away3d.materials.compilation.ShaderCompiler.prototype.initLightData.call(this);
		this._pointLightRegisters = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),this._numPointLights * 3);
		this._dirLightRegisters = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),this._numDirectionalLights * 3);
	}
	,calculateDependencies: function() {
		away3d.materials.compilation.ShaderCompiler.prototype.calculateDependencies.call(this);
		this._dependencyCounter.addWorldSpaceDependencies(true);
	}
	,compileNormalCode: function() {
		var normalMatrix = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),3);
		this._sharedRegisters.normalFragment = this._registerCache.getFreeFragmentVectorTemp();
		this._registerCache.addFragmentTempUsages(this._sharedRegisters.normalFragment,this._dependencyCounter.get_normalDependencies());
		if(this._methodSetup._normalMethod.get_hasOutput() && !this._methodSetup._normalMethod.get_tangentSpace()) {
			this._vertexCode += this._methodSetup._normalMethod.getVertexCode(this._methodSetup._normalMethodVO,this._registerCache);
			this._fragmentCode += this._methodSetup._normalMethod.getFragmentCode(this._methodSetup._normalMethodVO,this._registerCache,this._sharedRegisters.normalFragment);
			return;
		}
		this._sharedRegisters.normalVarying = this._registerCache.getFreeVarying();
		normalMatrix[0] = this._registerCache.getFreeVertexConstant();
		normalMatrix[1] = this._registerCache.getFreeVertexConstant();
		normalMatrix[2] = this._registerCache.getFreeVertexConstant();
		this._registerCache.getFreeVertexConstant();
		this._sceneNormalMatrixIndex = normalMatrix[0].get_index() * 4;
		if(this._methodSetup._normalMethod.get_hasOutput()) {
			this.compileTangentVertexCode(normalMatrix);
			this.compileTangentNormalMapFragmentCode();
		} else {
			this._vertexCode += "m33 " + Std.string(this._sharedRegisters.normalVarying) + ".xyz, " + Std.string(this._sharedRegisters.animatedNormal) + ", " + Std.string(normalMatrix[0]) + "\n" + "mov " + Std.string(this._sharedRegisters.normalVarying) + ".w, " + Std.string(this._sharedRegisters.animatedNormal) + ".w\t\n";
			this._fragmentCode += "nrm " + Std.string(this._sharedRegisters.normalFragment) + ".xyz, " + Std.string(this._sharedRegisters.normalVarying) + "\n" + "mov " + Std.string(this._sharedRegisters.normalFragment) + ".w, " + Std.string(this._sharedRegisters.normalVarying) + ".w\t\t\n";
			if(this._dependencyCounter.get_tangentDependencies() > 0) {
				this._sharedRegisters.tangentInput = this._registerCache.getFreeVertexAttribute();
				this._tangentBufferIndex = this._sharedRegisters.tangentInput.get_index();
				this._sharedRegisters.tangentVarying = this._registerCache.getFreeVarying();
				this._vertexCode += "mov " + Std.string(this._sharedRegisters.tangentVarying) + ", " + Std.string(this._sharedRegisters.tangentInput) + "\n";
			}
		}
		this._registerCache.removeVertexTempUsage(this._sharedRegisters.animatedNormal);
	}
	,createNormalRegisters: function() {
		if(this._dependencyCounter.get_normalDependencies() > 0) {
			this._sharedRegisters.normalInput = this._registerCache.getFreeVertexAttribute();
			this._normalBufferIndex = this._sharedRegisters.normalInput.get_index();
			this._sharedRegisters.animatedNormal = this._registerCache.getFreeVertexVectorTemp();
			this._registerCache.addVertexTempUsages(this._sharedRegisters.animatedNormal,1);
			this._animatableAttributes.push(this._sharedRegisters.normalInput.toString());
			this._animationTargetRegisters.push(this._sharedRegisters.animatedNormal.toString());
		}
		if(this._methodSetup._normalMethod.get_hasOutput()) {
			this._sharedRegisters.tangentInput = this._registerCache.getFreeVertexAttribute();
			this._tangentBufferIndex = this._sharedRegisters.tangentInput.get_index();
			this._sharedRegisters.animatedTangent = this._registerCache.getFreeVertexVectorTemp();
			this._registerCache.addVertexTempUsages(this._sharedRegisters.animatedTangent,1);
			this._animatableAttributes.push(this._sharedRegisters.tangentInput.toString());
			this._animationTargetRegisters.push(this._sharedRegisters.animatedTangent.toString());
		}
	}
	,compileTangentVertexCode: function(matrix) {
		this._sharedRegisters.tangentVarying = this._registerCache.getFreeVarying();
		this._sharedRegisters.bitangentVarying = this._registerCache.getFreeVarying();
		this._vertexCode += "m33 " + Std.string(this._sharedRegisters.animatedNormal) + ".xyz, " + Std.string(this._sharedRegisters.animatedNormal) + ", " + Std.string(matrix[0]) + "\n" + "nrm " + Std.string(this._sharedRegisters.animatedNormal) + ".xyz, " + Std.string(this._sharedRegisters.animatedNormal) + "\n";
		this._vertexCode += "m33 " + Std.string(this._sharedRegisters.animatedTangent) + ".xyz, " + Std.string(this._sharedRegisters.animatedTangent) + ", " + Std.string(matrix[0]) + "\n" + "nrm " + Std.string(this._sharedRegisters.animatedTangent) + ".xyz, " + Std.string(this._sharedRegisters.animatedTangent) + "\n";
		var bitanTemp = this._registerCache.getFreeVertexVectorTemp();
		this._vertexCode += "mov " + Std.string(this._sharedRegisters.tangentVarying) + ".x, " + Std.string(this._sharedRegisters.animatedTangent) + ".x  \n" + "mov " + Std.string(this._sharedRegisters.tangentVarying) + ".z, " + Std.string(this._sharedRegisters.animatedNormal) + ".x  \n" + "mov " + Std.string(this._sharedRegisters.tangentVarying) + ".w, " + Std.string(this._sharedRegisters.normalInput) + ".w  \n" + "mov " + Std.string(this._sharedRegisters.bitangentVarying) + ".x, " + Std.string(this._sharedRegisters.animatedTangent) + ".y  \n" + "mov " + Std.string(this._sharedRegisters.bitangentVarying) + ".z, " + Std.string(this._sharedRegisters.animatedNormal) + ".y  \n" + "mov " + Std.string(this._sharedRegisters.bitangentVarying) + ".w, " + Std.string(this._sharedRegisters.normalInput) + ".w  \n" + "mov " + Std.string(this._sharedRegisters.normalVarying) + ".x, " + Std.string(this._sharedRegisters.animatedTangent) + ".z  \n" + "mov " + Std.string(this._sharedRegisters.normalVarying) + ".z, " + Std.string(this._sharedRegisters.animatedNormal) + ".z  \n" + "mov " + Std.string(this._sharedRegisters.normalVarying) + ".w, " + Std.string(this._sharedRegisters.normalInput) + ".w  \n" + "crs " + Std.string(bitanTemp) + ".xyz, " + Std.string(this._sharedRegisters.animatedNormal) + ", " + Std.string(this._sharedRegisters.animatedTangent) + "\n" + "mov " + Std.string(this._sharedRegisters.tangentVarying) + ".y, " + Std.string(bitanTemp) + ".x    \n" + "mov " + Std.string(this._sharedRegisters.bitangentVarying) + ".y, " + Std.string(bitanTemp) + ".y  \n" + "mov " + Std.string(this._sharedRegisters.normalVarying) + ".y, " + Std.string(bitanTemp) + ".z    \n";
		this._registerCache.removeVertexTempUsage(this._sharedRegisters.animatedTangent);
	}
	,compileTangentNormalMapFragmentCode: function() {
		var t;
		var b;
		var n;
		t = this._registerCache.getFreeFragmentVectorTemp();
		this._registerCache.addFragmentTempUsages(t,1);
		b = this._registerCache.getFreeFragmentVectorTemp();
		this._registerCache.addFragmentTempUsages(b,1);
		n = this._registerCache.getFreeFragmentVectorTemp();
		this._registerCache.addFragmentTempUsages(n,1);
		this._fragmentCode += "nrm " + Std.string(t) + ".xyz, " + Std.string(this._sharedRegisters.tangentVarying) + "\n" + "mov " + Std.string(t) + ".w, " + Std.string(this._sharedRegisters.tangentVarying) + ".w\t\n" + "nrm " + Std.string(b) + ".xyz, " + Std.string(this._sharedRegisters.bitangentVarying) + "\n" + "nrm " + Std.string(n) + ".xyz, " + Std.string(this._sharedRegisters.normalVarying) + "\n";
		var temp = this._registerCache.getFreeFragmentVectorTemp();
		this._registerCache.addFragmentTempUsages(temp,1);
		this._fragmentCode += this._methodSetup._normalMethod.getFragmentCode(this._methodSetup._normalMethodVO,this._registerCache,temp) + "m33 " + Std.string(this._sharedRegisters.normalFragment) + ".xyz, " + Std.string(temp) + ", " + Std.string(t) + "\t\n" + "mov " + Std.string(this._sharedRegisters.normalFragment) + ".w,   " + Std.string(this._sharedRegisters.normalVarying) + ".w\t\t\t\n";
		this._registerCache.removeFragmentTempUsage(temp);
		if(this._methodSetup._normalMethodVO.needsView) this._registerCache.removeFragmentTempUsage(this._sharedRegisters.viewDirFragment);
		if(this._methodSetup._normalMethodVO.needsGlobalVertexPos || this._methodSetup._normalMethodVO.needsGlobalFragmentPos) this._registerCache.removeVertexTempUsage(this._sharedRegisters.globalPositionVertex);
		this._registerCache.removeFragmentTempUsage(b);
		this._registerCache.removeFragmentTempUsage(t);
		this._registerCache.removeFragmentTempUsage(n);
	}
	,compileViewDirCode: function() {
		var cameraPositionReg = this._registerCache.getFreeVertexConstant();
		this._sharedRegisters.viewDirVarying = this._registerCache.getFreeVarying();
		this._sharedRegisters.viewDirFragment = this._registerCache.getFreeFragmentVectorTemp();
		this._registerCache.addFragmentTempUsages(this._sharedRegisters.viewDirFragment,this._dependencyCounter.get_viewDirDependencies());
		this._cameraPositionIndex = cameraPositionReg.get_index() * 4;
		this._vertexCode += "sub " + Std.string(this._sharedRegisters.viewDirVarying) + ", " + Std.string(cameraPositionReg) + ", " + Std.string(this._sharedRegisters.globalPositionVertex) + "\n";
		this._fragmentCode += "nrm " + Std.string(this._sharedRegisters.viewDirFragment) + ".xyz, " + Std.string(this._sharedRegisters.viewDirVarying) + "\n" + "mov " + Std.string(this._sharedRegisters.viewDirFragment) + ".w,   " + Std.string(this._sharedRegisters.viewDirVarying) + ".w \t\t\n";
		this._registerCache.removeVertexTempUsage(this._sharedRegisters.globalPositionVertex);
	}
	,compileLightingCode: function() {
		var shadowReg = null;
		this._sharedRegisters.shadedTarget = this._registerCache.getFreeFragmentVectorTemp();
		this._registerCache.addFragmentTempUsages(this._sharedRegisters.shadedTarget,1);
		this._vertexCode += this._methodSetup._diffuseMethod.getVertexCode(this._methodSetup._diffuseMethodVO,this._registerCache);
		this._fragmentCode += this._methodSetup._diffuseMethod.getFragmentPreLightingCode(this._methodSetup._diffuseMethodVO,this._registerCache);
		if(this._usingSpecularMethod) {
			this._vertexCode += this._methodSetup._specularMethod.getVertexCode(this._methodSetup._specularMethodVO,this._registerCache);
			this._fragmentCode += this._methodSetup._specularMethod.getFragmentPreLightingCode(this._methodSetup._specularMethodVO,this._registerCache);
		}
		if(this.usesLights()) {
			this.initLightRegisters();
			this.compileDirectionalLightCode();
			this.compilePointLightCode();
		}
		if(this.usesProbes()) this.compileLightProbeCode();
		this._vertexCode += this._methodSetup._ambientMethod.getVertexCode(this._methodSetup._ambientMethodVO,this._registerCache);
		this._fragmentCode += this._methodSetup._ambientMethod.getFragmentCode(this._methodSetup._ambientMethodVO,this._registerCache,this._sharedRegisters.shadedTarget);
		if(this._methodSetup._ambientMethodVO.needsNormals) this._registerCache.removeFragmentTempUsage(this._sharedRegisters.normalFragment);
		if(this._methodSetup._ambientMethodVO.needsView) this._registerCache.removeFragmentTempUsage(this._sharedRegisters.viewDirFragment);
		if(this._methodSetup._shadowMethod != null) {
			this._vertexCode += this._methodSetup._shadowMethod.getVertexCode(this._methodSetup._shadowMethodVO,this._registerCache);
			if(this._dependencyCounter.get_normalDependencies() == 0) {
				shadowReg = this._registerCache.getFreeFragmentVectorTemp();
				this._registerCache.addFragmentTempUsages(shadowReg,1);
			} else shadowReg = this._sharedRegisters.normalFragment;
			this._methodSetup._diffuseMethod.set_shadowRegister(shadowReg);
			this._fragmentCode += this._methodSetup._shadowMethod.getFragmentCode(this._methodSetup._shadowMethodVO,this._registerCache,shadowReg);
		}
		this._fragmentCode += this._methodSetup._diffuseMethod.getFragmentPostLightingCode(this._methodSetup._diffuseMethodVO,this._registerCache,this._sharedRegisters.shadedTarget);
		if(this._alphaPremultiplied) this._fragmentCode += "add " + Std.string(this._sharedRegisters.shadedTarget) + ".w, " + Std.string(this._sharedRegisters.shadedTarget) + ".w, " + Std.string(this._sharedRegisters.commons) + ".z\n" + "div " + Std.string(this._sharedRegisters.shadedTarget) + ".xyz, " + Std.string(this._sharedRegisters.shadedTarget) + ", " + Std.string(this._sharedRegisters.shadedTarget) + ".w\n" + "sub " + Std.string(this._sharedRegisters.shadedTarget) + ".w, " + Std.string(this._sharedRegisters.shadedTarget) + ".w, " + Std.string(this._sharedRegisters.commons) + ".z\n" + "sat " + Std.string(this._sharedRegisters.shadedTarget) + ".xyz, " + Std.string(this._sharedRegisters.shadedTarget) + "\n";
		if(this._methodSetup._diffuseMethodVO.needsNormals) this._registerCache.removeFragmentTempUsage(this._sharedRegisters.normalFragment);
		if(this._methodSetup._diffuseMethodVO.needsView) this._registerCache.removeFragmentTempUsage(this._sharedRegisters.viewDirFragment);
		if(this._usingSpecularMethod) {
			this._methodSetup._specularMethod.set_shadowRegister(shadowReg);
			this._fragmentCode += this._methodSetup._specularMethod.getFragmentPostLightingCode(this._methodSetup._specularMethodVO,this._registerCache,this._sharedRegisters.shadedTarget);
			if(this._methodSetup._specularMethodVO.needsNormals) this._registerCache.removeFragmentTempUsage(this._sharedRegisters.normalFragment);
			if(this._methodSetup._specularMethodVO.needsView) this._registerCache.removeFragmentTempUsage(this._sharedRegisters.viewDirFragment);
		}
	}
	,initLightRegisters: function() {
		var i = 0;
		var len;
		len = this._dirLightRegisters.length;
		i = 0;
		while(i < len) {
			this._dirLightRegisters[i] = this._registerCache.getFreeFragmentConstant();
			if(this._lightFragmentConstantIndex == -1) this._lightFragmentConstantIndex = this._dirLightRegisters[i].get_index() * 4;
			++i;
		}
		len = this._pointLightRegisters.length;
		i = 0;
		while(i < len) {
			this._pointLightRegisters[i] = this._registerCache.getFreeFragmentConstant();
			if(this._lightFragmentConstantIndex == -1) this._lightFragmentConstantIndex = this._pointLightRegisters[i].get_index() * 4;
			++i;
		}
	}
	,compileDirectionalLightCode: function() {
		var diffuseColorReg;
		var specularColorReg;
		var lightDirReg;
		var regIndex = 0;
		var addSpec = this._usingSpecularMethod && this.usesLightsForSpecular();
		var addDiff = this.usesLightsForDiffuse();
		if(!(addSpec || addDiff)) return;
		var i = 0;
		while(i < this._numDirectionalLights) {
			lightDirReg = this._dirLightRegisters[regIndex++];
			diffuseColorReg = this._dirLightRegisters[regIndex++];
			specularColorReg = this._dirLightRegisters[regIndex++];
			if(addDiff) this._fragmentCode += this._methodSetup._diffuseMethod.getFragmentCodePerLight(this._methodSetup._diffuseMethodVO,lightDirReg,diffuseColorReg,this._registerCache);
			if(addSpec) this._fragmentCode += this._methodSetup._specularMethod.getFragmentCodePerLight(this._methodSetup._specularMethodVO,lightDirReg,specularColorReg,this._registerCache);
			++i;
		}
	}
	,compilePointLightCode: function() {
		var diffuseColorReg;
		var specularColorReg;
		var lightPosReg;
		var lightDirReg;
		var regIndex = 0;
		var addSpec = this._usingSpecularMethod && this.usesLightsForSpecular();
		var addDiff = this.usesLightsForDiffuse();
		if(!(addSpec || addDiff)) return;
		var i = 0;
		while(i < this._numPointLights) {
			lightPosReg = this._pointLightRegisters[regIndex++];
			diffuseColorReg = this._pointLightRegisters[regIndex++];
			specularColorReg = this._pointLightRegisters[regIndex++];
			lightDirReg = this._registerCache.getFreeFragmentVectorTemp();
			this._registerCache.addFragmentTempUsages(lightDirReg,1);
			this._fragmentCode += "sub " + Std.string(lightDirReg) + ", " + Std.string(lightPosReg) + ", " + Std.string(this._sharedRegisters.globalPositionVarying) + "\n" + "dp3 " + Std.string(lightDirReg) + ".w, " + Std.string(lightDirReg) + ", " + Std.string(lightDirReg) + "\n" + "sub " + Std.string(lightDirReg) + ".w, " + Std.string(lightDirReg) + ".w, " + Std.string(diffuseColorReg) + ".w\n" + "mul " + Std.string(lightDirReg) + ".w, " + Std.string(lightDirReg) + ".w, " + Std.string(specularColorReg) + ".w\n" + "sat " + Std.string(lightDirReg) + ".w, " + Std.string(lightDirReg) + ".w\n" + "sub " + Std.string(lightDirReg) + ".w, " + Std.string(lightPosReg) + ".w, " + Std.string(lightDirReg) + ".w\n" + "nrm " + Std.string(lightDirReg) + ".xyz, " + Std.string(lightDirReg) + "\n";
			if(this._lightFragmentConstantIndex == -1) this._lightFragmentConstantIndex = lightPosReg.get_index() * 4;
			if(addDiff) this._fragmentCode += this._methodSetup._diffuseMethod.getFragmentCodePerLight(this._methodSetup._diffuseMethodVO,lightDirReg,diffuseColorReg,this._registerCache);
			if(addSpec) this._fragmentCode += this._methodSetup._specularMethod.getFragmentCodePerLight(this._methodSetup._specularMethodVO,lightDirReg,specularColorReg,this._registerCache);
			this._registerCache.removeFragmentTempUsage(lightDirReg);
			++i;
		}
	}
	,compileLightProbeCode: function() {
		var weightReg;
		var weightComponents = [".x",".y",".z",".w"];
		var weightRegisters = new Array();
		var i = 0;
		var texReg;
		var addSpec = this._usingSpecularMethod && this.usesProbesForSpecular();
		var addDiff = this.usesProbesForDiffuse();
		if(!(addSpec || addDiff)) return;
		if(addDiff) this._lightProbeDiffuseIndices = new Array();
		if(addSpec) this._lightProbeSpecularIndices = new Array();
		i = 0;
		while(i < this._numProbeRegisters) {
			weightRegisters[i] = this._registerCache.getFreeFragmentConstant();
			if(i == 0) this._probeWeightsIndex = weightRegisters[i].get_index() * 4;
			++i;
		}
		i = 0;
		while(i < this._numLightProbes) {
			weightReg = weightRegisters[Math.floor(i / 4)].toString() + weightComponents[i % 4];
			if(addDiff) {
				texReg = this._registerCache.getFreeTextureReg();
				this._lightProbeDiffuseIndices[i] = texReg.get_index();
				this._fragmentCode += this._methodSetup._diffuseMethod.getFragmentCodePerProbe(this._methodSetup._diffuseMethodVO,texReg,weightReg,this._registerCache);
			}
			if(addSpec) {
				texReg = this._registerCache.getFreeTextureReg();
				this._lightProbeSpecularIndices[i] = texReg.get_index();
				this._fragmentCode += this._methodSetup._specularMethod.getFragmentCodePerProbe(this._methodSetup._specularMethodVO,texReg,weightReg,this._registerCache);
			}
			++i;
		}
	}
	,__class__: away3d.materials.compilation.SuperShaderCompiler
});
away3d.materials.lightpickers = {};
away3d.materials.lightpickers.LightPickerBase = function() {
	away3d.library.assets.NamedAssetBase.call(this);
};
$hxClasses["away3d.materials.lightpickers.LightPickerBase"] = away3d.materials.lightpickers.LightPickerBase;
away3d.materials.lightpickers.LightPickerBase.__name__ = ["away3d","materials","lightpickers","LightPickerBase"];
away3d.materials.lightpickers.LightPickerBase.__interfaces__ = [away3d.library.assets.IAsset];
away3d.materials.lightpickers.LightPickerBase.__super__ = away3d.library.assets.NamedAssetBase;
away3d.materials.lightpickers.LightPickerBase.prototype = $extend(away3d.library.assets.NamedAssetBase.prototype,{
	_numPointLights: null
	,_numDirectionalLights: null
	,_numCastingPointLights: null
	,_numCastingDirectionalLights: null
	,_numLightProbes: null
	,_allPickedLights: null
	,_pointLights: null
	,_castingPointLights: null
	,_directionalLights: null
	,_castingDirectionalLights: null
	,_lightProbes: null
	,_lightProbeWeights: null
	,dispose: function() {
	}
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.LIGHT_PICKER;
	}
	,get_numDirectionalLights: function() {
		return this._numDirectionalLights;
	}
	,get_numPointLights: function() {
		return this._numPointLights;
	}
	,get_numCastingDirectionalLights: function() {
		return this._numCastingDirectionalLights;
	}
	,get_numCastingPointLights: function() {
		return this._numCastingPointLights;
	}
	,get_numLightProbes: function() {
		return this._numLightProbes;
	}
	,get_pointLights: function() {
		return this._pointLights;
	}
	,get_directionalLights: function() {
		return this._directionalLights;
	}
	,get_castingPointLights: function() {
		return this._castingPointLights;
	}
	,get_castingDirectionalLights: function() {
		return this._castingDirectionalLights;
	}
	,get_lightProbes: function() {
		return this._lightProbes;
	}
	,get_lightProbeWeights: function() {
		return this._lightProbeWeights;
	}
	,get_allPickedLights: function() {
		return this._allPickedLights;
	}
	,collectLights: function(renderable,entityCollector) {
		this.updateProbeWeights(renderable);
	}
	,updateProbeWeights: function(renderable) {
		var objectPos = renderable.get_sourceEntity().get_scenePosition();
		var lightPos;
		var rx = objectPos.x;
		var ry = objectPos.y;
		var rz = objectPos.z;
		var dx;
		var dy;
		var dz;
		var w;
		var total = 0;
		var i;
		i = 0;
		while(i < this._numLightProbes) {
			lightPos = this._lightProbes[i].get_scenePosition();
			dx = rx - lightPos.x;
			dy = ry - lightPos.y;
			dz = rz - lightPos.z;
			w = dx * dx + dy * dy + dz * dz;
			if(w > .00001) w = 1 / w; else w = 50000000;
			this._lightProbeWeights[i] = w;
			total += w;
			++i;
		}
		total = 1 / total;
		i = 0;
		while(i < this._numLightProbes) {
			this._lightProbeWeights[i] *= total;
			++i;
		}
	}
	,__class__: away3d.materials.lightpickers.LightPickerBase
	,__properties__: $extend(away3d.library.assets.NamedAssetBase.prototype.__properties__,{get_allPickedLights:"get_allPickedLights",get_lightProbeWeights:"get_lightProbeWeights",get_lightProbes:"get_lightProbes",get_castingDirectionalLights:"get_castingDirectionalLights",get_castingPointLights:"get_castingPointLights",get_directionalLights:"get_directionalLights",get_pointLights:"get_pointLights",get_numLightProbes:"get_numLightProbes",get_numCastingPointLights:"get_numCastingPointLights",get_numCastingDirectionalLights:"get_numCastingDirectionalLights",get_numPointLights:"get_numPointLights",get_numDirectionalLights:"get_numDirectionalLights",get_assetType:"get_assetType"})
});
away3d.materials.lightpickers.StaticLightPicker = function(lights) {
	this.set_lights(lights);
	away3d.materials.lightpickers.LightPickerBase.call(this);
};
$hxClasses["away3d.materials.lightpickers.StaticLightPicker"] = away3d.materials.lightpickers.StaticLightPicker;
away3d.materials.lightpickers.StaticLightPicker.__name__ = ["away3d","materials","lightpickers","StaticLightPicker"];
away3d.materials.lightpickers.StaticLightPicker.__super__ = away3d.materials.lightpickers.LightPickerBase;
away3d.materials.lightpickers.StaticLightPicker.prototype = $extend(away3d.materials.lightpickers.LightPickerBase.prototype,{
	_lights: null
	,get_lights: function() {
		return this._lights;
	}
	,set_lights: function(value) {
		var numPointLights = 0;
		var numDirectionalLights = 0;
		var numCastingPointLights = 0;
		var numCastingDirectionalLights = 0;
		var numLightProbes = 0;
		var light;
		if(this._lights != null) this.clearListeners();
		this._lights = value;
		this._allPickedLights = value;
		this._pointLights = new Array();
		this._castingPointLights = new Array();
		this._directionalLights = new Array();
		this._castingDirectionalLights = new Array();
		this._lightProbes = new Array();
		var len = value.length;
		var i = 0;
		while(i < len) {
			light = value[i];
			light.addEventListener(away3d.events.LightEvent.CASTS_SHADOW_CHANGE,$bind(this,this.onCastShadowChange));
			if(js.Boot.__instanceof(light,away3d.lights.PointLight)) {
				if(light.get_castsShadows()) this._castingPointLights[numCastingPointLights++] = js.Boot.__cast(light , away3d.lights.PointLight); else this._pointLights[numPointLights++] = js.Boot.__cast(light , away3d.lights.PointLight);
			} else if(js.Boot.__instanceof(light,away3d.lights.DirectionalLight)) {
				if(light.get_castsShadows()) this._castingDirectionalLights[numCastingDirectionalLights++] = js.Boot.__cast(light , away3d.lights.DirectionalLight); else this._directionalLights[numDirectionalLights++] = js.Boot.__cast(light , away3d.lights.DirectionalLight);
			} else if(js.Boot.__instanceof(light,away3d.lights.LightProbe)) this._lightProbes[numLightProbes++] = js.Boot.__cast(light , away3d.lights.LightProbe);
			++i;
		}
		if(this._numDirectionalLights == numDirectionalLights && this._numPointLights == numPointLights && this._numLightProbes == numLightProbes && this._numCastingPointLights == numCastingPointLights && this._numCastingDirectionalLights == numCastingDirectionalLights) return value;
		this._numDirectionalLights = numDirectionalLights;
		this._numCastingDirectionalLights = numCastingDirectionalLights;
		this._numPointLights = numPointLights;
		this._numCastingPointLights = numCastingPointLights;
		this._numLightProbes = numLightProbes;
		this._lightProbeWeights = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),Math.ceil(numLightProbes / 4) * 4,0);
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.CHANGE));
		return value;
	}
	,clearListeners: function() {
		var len = this._lights.length;
		var i = 0;
		while(i < len) {
			this._lights[i].removeEventListener(away3d.events.LightEvent.CASTS_SHADOW_CHANGE,$bind(this,this.onCastShadowChange));
			++i;
		}
	}
	,onCastShadowChange: function(event) {
		var light;
		light = js.Boot.__cast(event.target , away3d.lights.LightBase);
		if(js.Boot.__instanceof(light,away3d.lights.PointLight)) this.updatePointCasting(js.Boot.__cast(light , away3d.lights.PointLight)); else if(js.Boot.__instanceof(light,away3d.lights.DirectionalLight)) this.updateDirectionalCasting(js.Boot.__cast(light , away3d.lights.DirectionalLight));
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.CHANGE));
	}
	,updateDirectionalCasting: function(light) {
		if(light.get_castsShadows()) {
			--this._numDirectionalLights;
			++this._numCastingDirectionalLights;
			this._directionalLights.splice((function($this) {
				var $r;
				var x;
				x = js.Boot.__cast(light , away3d.lights.DirectionalLight);
				$r = HxOverrides.indexOf($this._directionalLights,x,0);
				return $r;
			}(this)),1);
			this._castingDirectionalLights.push(light);
		} else {
			++this._numDirectionalLights;
			--this._numCastingDirectionalLights;
			this._castingDirectionalLights.splice((function($this) {
				var $r;
				var x1;
				x1 = js.Boot.__cast(light , away3d.lights.DirectionalLight);
				$r = HxOverrides.indexOf($this._castingDirectionalLights,x1,0);
				return $r;
			}(this)),1);
			this._directionalLights.push(light);
		}
	}
	,updatePointCasting: function(light) {
		if(light.get_castsShadows()) {
			--this._numPointLights;
			++this._numCastingPointLights;
			this._pointLights.splice((function($this) {
				var $r;
				var x;
				x = js.Boot.__cast(light , away3d.lights.PointLight);
				$r = HxOverrides.indexOf($this._pointLights,x,0);
				return $r;
			}(this)),1);
			this._castingPointLights.push(light);
		} else {
			++this._numPointLights;
			--this._numCastingPointLights;
			this._castingPointLights.splice((function($this) {
				var $r;
				var x1;
				x1 = js.Boot.__cast(light , away3d.lights.PointLight);
				$r = HxOverrides.indexOf($this._castingPointLights,x1,0);
				return $r;
			}(this)),1);
			this._pointLights.push(light);
		}
	}
	,__class__: away3d.materials.lightpickers.StaticLightPicker
	,__properties__: $extend(away3d.materials.lightpickers.LightPickerBase.prototype.__properties__,{set_lights:"set_lights",get_lights:"get_lights"})
});
away3d.materials.methods = {};
away3d.materials.methods.ShadingMethodBase = function() {
	away3d.library.assets.NamedAssetBase.call(this);
};
$hxClasses["away3d.materials.methods.ShadingMethodBase"] = away3d.materials.methods.ShadingMethodBase;
away3d.materials.methods.ShadingMethodBase.__name__ = ["away3d","materials","methods","ShadingMethodBase"];
away3d.materials.methods.ShadingMethodBase.__super__ = away3d.library.assets.NamedAssetBase;
away3d.materials.methods.ShadingMethodBase.prototype = $extend(away3d.library.assets.NamedAssetBase.prototype,{
	_sharedRegisters: null
	,_passes: null
	,initVO: function(vo) {
	}
	,initConstants: function(vo) {
	}
	,get_sharedRegisters: function() {
		return this._sharedRegisters;
	}
	,set_sharedRegisters: function(value) {
		this._sharedRegisters = value;
		return value;
	}
	,get_passes: function() {
		return this._passes;
	}
	,dispose: function() {
	}
	,createMethodVO: function() {
		return new away3d.materials.methods.MethodVO();
	}
	,reset: function() {
		this.cleanCompilationData();
	}
	,cleanCompilationData: function() {
	}
	,getVertexCode: function(vo,regCache) {
		return "";
	}
	,activate: function(vo,stage3DProxy) {
	}
	,setRenderState: function(vo,renderable,stage3DProxy,camera) {
	}
	,deactivate: function(vo,stage3DProxy) {
	}
	,getTex2DSampleCode: function(vo,targetReg,inputReg,texture,uvReg,forceWrap) {
		var wrap;
		if(vo.repeatTextures) wrap = "wrap"; else wrap = "clamp";
		if(forceWrap != null) wrap = forceWrap;
		var filter;
		var format = this.getFormatStringForTexture(texture);
		var enableMipMaps = vo.useMipmapping && texture.get_hasMipMaps();
		if(vo.useSmoothTextures) if(enableMipMaps) filter = "linear,miplinear"; else filter = "linear"; else if(enableMipMaps) filter = "nearest,mipnearest"; else filter = "nearest";
		if(uvReg == null) uvReg = this._sharedRegisters.uvVarying;
		return "tex " + Std.string(targetReg) + ", " + Std.string(uvReg) + ", " + Std.string(inputReg) + " <2d," + filter + "," + format + wrap + ">\n";
	}
	,getTexCubeSampleCode: function(vo,targetReg,inputReg,texture,uvReg) {
		var filter;
		var format = this.getFormatStringForTexture(texture);
		var enableMipMaps = vo.useMipmapping && texture.get_hasMipMaps();
		if(vo.useSmoothTextures) if(enableMipMaps) filter = "linear,miplinear"; else filter = "linear"; else if(enableMipMaps) filter = "nearest,mipnearest"; else filter = "nearest";
		return "tex " + Std.string(targetReg) + ", " + Std.string(uvReg) + ", " + Std.string(inputReg) + " <cube," + format + filter + ">\n";
	}
	,getFormatStringForTexture: function(texture) {
		var _sw0_ = texture.get_format();
		switch(_sw0_[1]) {
		case 1:
			return "dxt1,";
		case 2:
			return "dxt5,";
		default:
			return "";
		}
	}
	,invalidateShaderProgram: function() {
		this.dispatchEvent(new away3d.events.ShadingMethodEvent(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED));
	}
	,copyFrom: function(method) {
	}
	,getSmoothingFilter: function(smooth,anisotropy) {
		if(smooth) switch(anisotropy[1]) {
		case 1:
			return openfl.display3D.Context3DTextureFilter.ANISOTROPIC2X;
		case 2:
			return openfl.display3D.Context3DTextureFilter.ANISOTROPIC4X;
		case 3:
			return openfl.display3D.Context3DTextureFilter.ANISOTROPIC8X;
		case 4:
			return openfl.display3D.Context3DTextureFilter.ANISOTROPIC16X;
		case 0:
			return openfl.display3D.Context3DTextureFilter.LINEAR;
		} else return openfl.display3D.Context3DTextureFilter.NEAREST;
	}
	,__class__: away3d.materials.methods.ShadingMethodBase
	,__properties__: $extend(away3d.library.assets.NamedAssetBase.prototype.__properties__,{get_passes:"get_passes",set_sharedRegisters:"set_sharedRegisters",get_sharedRegisters:"get_sharedRegisters"})
});
away3d.materials.methods.BasicAmbientMethod = function() {
	this._ambientColor = 16777215;
	this._ambientR = 0;
	this._ambientG = 0;
	this._ambientB = 0;
	this._ambient = 1;
	this._lightAmbientR = 0;
	this._lightAmbientG = 0;
	this._lightAmbientB = 0;
	away3d.materials.methods.ShadingMethodBase.call(this);
};
$hxClasses["away3d.materials.methods.BasicAmbientMethod"] = away3d.materials.methods.BasicAmbientMethod;
away3d.materials.methods.BasicAmbientMethod.__name__ = ["away3d","materials","methods","BasicAmbientMethod"];
away3d.materials.methods.BasicAmbientMethod.__super__ = away3d.materials.methods.ShadingMethodBase;
away3d.materials.methods.BasicAmbientMethod.prototype = $extend(away3d.materials.methods.ShadingMethodBase.prototype,{
	_useTexture: null
	,_texture: null
	,_ambientInputRegister: null
	,_ambientColor: null
	,_ambientR: null
	,_ambientG: null
	,_ambientB: null
	,_ambient: null
	,_lightAmbientR: null
	,_lightAmbientG: null
	,_lightAmbientB: null
	,initVO: function(vo) {
		vo.needsUV = this._useTexture;
	}
	,initConstants: function(vo) {
		var this1 = vo.fragmentData;
		var key = vo.fragmentConstantsIndex + 3;
		if(!this1.fixed) {
			if(key >= this1.length) this1.length = key + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[key] = 1;
	}
	,get_ambient: function() {
		return this._ambient;
	}
	,set_ambient: function(value) {
		this._ambient = value;
		return value;
	}
	,get_ambientColor: function() {
		return this._ambientColor;
	}
	,set_ambientColor: function(value) {
		this._ambientColor = value;
		return value;
	}
	,get_texture: function() {
		return this._texture;
	}
	,set_texture: function(value) {
		if(js.Boot.__cast(value != null , Bool) != this._useTexture || value != null && this._texture != null && (value.get_hasMipMaps() != this._texture.get_hasMipMaps() || value.get_format() != this._texture.get_format())) this.invalidateShaderProgram();
		this._useTexture = js.Boot.__cast(value , Bool);
		this._texture = value;
		return value;
	}
	,copyFrom: function(method) {
		var diff;
		diff = js.Boot.__cast(method , away3d.materials.methods.BasicAmbientMethod);
		this.set_ambient(diff.get_ambient());
		this.set_ambientColor(diff.get_ambientColor());
	}
	,cleanCompilationData: function() {
		away3d.materials.methods.ShadingMethodBase.prototype.cleanCompilationData.call(this);
		this._ambientInputRegister = null;
	}
	,getFragmentCode: function(vo,regCache,targetReg) {
		var code = "";
		if(this._useTexture) {
			this._ambientInputRegister = regCache.getFreeTextureReg();
			vo.texturesIndex = this._ambientInputRegister.get_index();
			code += this.getTex2DSampleCode(vo,targetReg,this._ambientInputRegister,this._texture) + "div " + Std.string(targetReg) + ".xyz, " + Std.string(targetReg) + ".xyz, " + Std.string(targetReg) + ".w\n";
		} else {
			this._ambientInputRegister = regCache.getFreeFragmentConstant();
			vo.fragmentConstantsIndex = this._ambientInputRegister.get_index() * 4;
			code += "mov " + Std.string(targetReg) + ", " + Std.string(this._ambientInputRegister) + "\n";
		}
		return code;
	}
	,activate: function(vo,stage3DProxy) {
		if(this._useTexture) {
			stage3DProxy._context3D.setSamplerStateAt(vo.texturesIndex,vo.repeatTextures?openfl.display3D.Context3DWrapMode.REPEAT:openfl.display3D.Context3DWrapMode.CLAMP,this.getSmoothingFilter(vo.useSmoothTextures,vo.anisotropy),vo.useMipmapping?openfl.display3D.Context3DMipFilter.MIPLINEAR:openfl.display3D.Context3DMipFilter.MIPNONE);
			stage3DProxy._context3D.setTextureAt(vo.texturesIndex,this._texture.getTextureForStage3D(stage3DProxy));
		}
	}
	,updateAmbient: function() {
		this._ambientR = (this._ambientColor >> 16 & 255) / 255 * this._ambient * this._lightAmbientR;
		this._ambientG = (this._ambientColor >> 8 & 255) / 255 * this._ambient * this._lightAmbientG;
		this._ambientB = (this._ambientColor & 255) / 255 * this._ambient * this._lightAmbientB;
	}
	,setRenderState: function(vo,renderable,stage3DProxy,camera) {
		this.updateAmbient();
		if(!this._useTexture) {
			var index = vo.fragmentConstantsIndex;
			var data = vo.fragmentData;
			if(!data.fixed) {
				if(index >= data.length) data.length = index + 1;
				if(data.data.length < data.length) {
					var data1;
					var this1;
					this1 = new Array(data.data.length + 10);
					data1 = this1;
					haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data1,0,data.data.length);
					data.data = data1;
				}
			}
			data.data[index] = this._ambientR;
			var key = index + 1;
			if(!data.fixed) {
				if(key >= data.length) data.length = key + 1;
				if(data.data.length < data.length) {
					var data2;
					var this2;
					this2 = new Array(data.data.length + 10);
					data2 = this2;
					haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data2,0,data.data.length);
					data.data = data2;
				}
			}
			data.data[key] = this._ambientG;
			var key1 = index + 2;
			if(!data.fixed) {
				if(key1 >= data.length) data.length = key1 + 1;
				if(data.data.length < data.length) {
					var data3;
					var this3;
					this3 = new Array(data.data.length + 10);
					data3 = this3;
					haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data3,0,data.data.length);
					data.data = data3;
				}
			}
			data.data[key1] = this._ambientB;
		}
	}
	,__class__: away3d.materials.methods.BasicAmbientMethod
	,__properties__: $extend(away3d.materials.methods.ShadingMethodBase.prototype.__properties__,{set_texture:"set_texture",get_texture:"get_texture",set_ambientColor:"set_ambientColor",get_ambientColor:"get_ambientColor",set_ambient:"set_ambient",get_ambient:"get_ambient"})
});
away3d.materials.methods.LightingMethodBase = function() {
	away3d.materials.methods.ShadingMethodBase.call(this);
};
$hxClasses["away3d.materials.methods.LightingMethodBase"] = away3d.materials.methods.LightingMethodBase;
away3d.materials.methods.LightingMethodBase.__name__ = ["away3d","materials","methods","LightingMethodBase"];
away3d.materials.methods.LightingMethodBase.__super__ = away3d.materials.methods.ShadingMethodBase;
away3d.materials.methods.LightingMethodBase.prototype = $extend(away3d.materials.methods.ShadingMethodBase.prototype,{
	_modulateMethod: null
	,getFragmentPreLightingCode: function(vo,regCache) {
		return "";
	}
	,getFragmentCodePerLight: function(vo,lightDirReg,lightColReg,regCache) {
		return "";
	}
	,getFragmentCodePerProbe: function(vo,cubeMapReg,weightRegister,regCache) {
		return "";
	}
	,getFragmentPostLightingCode: function(vo,regCache,targetReg) {
		return "";
	}
	,__class__: away3d.materials.methods.LightingMethodBase
});
away3d.materials.methods.BasicDiffuseMethod = function() {
	this._diffuseColor = 16777215;
	this._diffuseR = 1;
	this._diffuseG = 1;
	this._diffuseB = 1;
	this._diffuseA = 1;
	this._alphaThreshold = 0;
	away3d.materials.methods.LightingMethodBase.call(this);
};
$hxClasses["away3d.materials.methods.BasicDiffuseMethod"] = away3d.materials.methods.BasicDiffuseMethod;
away3d.materials.methods.BasicDiffuseMethod.__name__ = ["away3d","materials","methods","BasicDiffuseMethod"];
away3d.materials.methods.BasicDiffuseMethod.__super__ = away3d.materials.methods.LightingMethodBase;
away3d.materials.methods.BasicDiffuseMethod.prototype = $extend(away3d.materials.methods.LightingMethodBase.prototype,{
	_useAmbientTexture: null
	,_useTexture: null
	,_totalLightColorReg: null
	,_diffuseInputRegister: null
	,_texture: null
	,_diffuseColor: null
	,_diffuseR: null
	,_diffuseG: null
	,_diffuseB: null
	,_diffuseA: null
	,_shadowRegister: null
	,_alphaThreshold: null
	,_isFirstLight: null
	,get_useAmbientTexture: function() {
		return this._useAmbientTexture;
	}
	,set_useAmbientTexture: function(value) {
		if(this._useAmbientTexture == value) return value;
		this._useAmbientTexture = value;
		this.invalidateShaderProgram();
		return value;
	}
	,initVO: function(vo) {
		vo.needsUV = this._useTexture;
		vo.needsNormals = vo.numLights > 0;
	}
	,generateMip: function(stage3DProxy) {
		if(this._useTexture) this._texture.getTextureForStage3D(stage3DProxy);
	}
	,get_diffuseAlpha: function() {
		return this._diffuseA;
	}
	,set_diffuseAlpha: function(value) {
		this._diffuseA = value;
		return value;
	}
	,get_diffuseColor: function() {
		return this._diffuseColor;
	}
	,set_diffuseColor: function(diffuseColor) {
		this._diffuseColor = diffuseColor;
		this.updateDiffuse();
		return diffuseColor;
	}
	,get_texture: function() {
		return this._texture;
	}
	,set_texture: function(value) {
		if(js.Boot.__cast(value != null , Bool) != this._useTexture || value != null && this._texture != null && (value.get_hasMipMaps() != this._texture.get_hasMipMaps() || value.get_format() != this._texture.get_format())) this.invalidateShaderProgram();
		this._useTexture = js.Boot.__cast(value != null , Bool);
		this._texture = value;
		return value;
	}
	,get_alphaThreshold: function() {
		return this._alphaThreshold;
	}
	,set_alphaThreshold: function(value) {
		if(value < 0) value = 0; else if(value > 1) value = 1;
		if(value == this._alphaThreshold) return value;
		if(value == 0 || this._alphaThreshold == 0) this.invalidateShaderProgram();
		this._alphaThreshold = value;
		return value;
	}
	,dispose: function() {
		this._texture = null;
	}
	,copyFrom: function(method) {
		var diff;
		diff = js.Boot.__cast(method , away3d.materials.methods.BasicDiffuseMethod);
		this.set_alphaThreshold(diff.get_alphaThreshold());
		this.set_texture(diff.get_texture());
		this.set_useAmbientTexture(diff.get_useAmbientTexture());
		this.set_diffuseAlpha(diff.get_diffuseAlpha());
		this.set_diffuseColor(diff.get_diffuseColor());
	}
	,cleanCompilationData: function() {
		away3d.materials.methods.LightingMethodBase.prototype.cleanCompilationData.call(this);
		this._shadowRegister = null;
		this._totalLightColorReg = null;
		this._diffuseInputRegister = null;
	}
	,getFragmentPreLightingCode: function(vo,regCache) {
		var code = "";
		this._isFirstLight = true;
		if(vo.numLights > 0) {
			this._totalLightColorReg = regCache.getFreeFragmentVectorTemp();
			regCache.addFragmentTempUsages(this._totalLightColorReg,1);
		}
		return code;
	}
	,getFragmentCodePerLight: function(vo,lightDirReg,lightColReg,regCache) {
		var code = "";
		var t;
		if(this._isFirstLight) t = this._totalLightColorReg; else {
			t = regCache.getFreeFragmentVectorTemp();
			regCache.addFragmentTempUsages(t,1);
		}
		code += "dp3 " + Std.string(t) + ".x, " + Std.string(lightDirReg) + ", " + Std.string(this._sharedRegisters.normalFragment) + "\n" + "max " + Std.string(t) + ".w, " + Std.string(t) + ".x, " + Std.string(this._sharedRegisters.commons) + ".y\n";
		if(vo.useLightFallOff) code += "mul " + Std.string(t) + ".w, " + Std.string(t) + ".w, " + Std.string(lightDirReg) + ".w\n";
		if(this._modulateMethod != null) code += Std.string(this._modulateMethod(vo,t,regCache,this._sharedRegisters));
		code += "mul " + Std.string(t) + ", " + Std.string(t) + ".w, " + Std.string(lightColReg) + "\n";
		if(!this._isFirstLight) {
			code += "add " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(t) + "\n";
			regCache.removeFragmentTempUsage(t);
		}
		this._isFirstLight = false;
		return code;
	}
	,getFragmentCodePerProbe: function(vo,cubeMapReg,weightRegister,regCache) {
		var code = "";
		var t;
		if(this._isFirstLight) t = this._totalLightColorReg; else {
			t = regCache.getFreeFragmentVectorTemp();
			regCache.addFragmentTempUsages(t,1);
		}
		code += "tex " + Std.string(t) + ", " + Std.string(this._sharedRegisters.normalFragment) + ", " + Std.string(cubeMapReg) + " <cube,linear,miplinear>\n" + "mul " + Std.string(t) + ".xyz, " + Std.string(t) + ".xyz, " + weightRegister + "\n";
		if(this._modulateMethod != null) code += Std.string(this._modulateMethod(vo,t,regCache,this._sharedRegisters));
		if(!this._isFirstLight) {
			code += "add " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(t) + "\n";
			regCache.removeFragmentTempUsage(t);
		}
		this._isFirstLight = false;
		return code;
	}
	,getFragmentPostLightingCode: function(vo,regCache,targetReg) {
		var code = "";
		var albedo;
		var cutOffReg;
		if(vo.numLights > 0) {
			if(this._shadowRegister != null) code += this.applyShadow(vo,regCache);
			albedo = regCache.getFreeFragmentVectorTemp();
			regCache.addFragmentTempUsages(albedo,1);
		} else albedo = targetReg;
		if(this._useTexture) {
			this._diffuseInputRegister = regCache.getFreeTextureReg();
			vo.texturesIndex = this._diffuseInputRegister.get_index();
			code += this.getTex2DSampleCode(vo,albedo,this._diffuseInputRegister,this._texture);
			if(this._alphaThreshold > 0) {
				cutOffReg = regCache.getFreeFragmentConstant();
				vo.fragmentConstantsIndex = cutOffReg.get_index() * 4;
				code += "sub " + Std.string(albedo) + ".w, " + Std.string(albedo) + ".w, " + Std.string(cutOffReg) + ".x\n" + "kil " + Std.string(albedo) + ".w\n" + "add " + Std.string(albedo) + ".w, " + Std.string(albedo) + ".w, " + Std.string(cutOffReg) + ".x\n";
			}
		} else {
			this._diffuseInputRegister = regCache.getFreeFragmentConstant();
			vo.fragmentConstantsIndex = this._diffuseInputRegister.get_index() * 4;
			code += "mov " + Std.string(albedo) + ", " + Std.string(this._diffuseInputRegister) + "\n";
		}
		if(vo.numLights == 0) return code;
		code += "sat " + Std.string(this._totalLightColorReg) + ", " + Std.string(this._totalLightColorReg) + "\n";
		if(this._useAmbientTexture) code += "mul " + Std.string(albedo) + ".xyz, " + Std.string(albedo) + ", " + Std.string(this._totalLightColorReg) + "\n" + "mul " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(targetReg) + ", " + Std.string(this._totalLightColorReg) + "\n" + "sub " + Std.string(targetReg) + ".xyz, " + Std.string(targetReg) + ", " + Std.string(this._totalLightColorReg) + "\n" + "add " + Std.string(targetReg) + ".xyz, " + Std.string(albedo) + ", " + Std.string(targetReg) + "\n"; else {
			code += "add " + Std.string(targetReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(targetReg) + "\n";
			if(this._useTexture) code += "mul " + Std.string(targetReg) + ".xyz, " + Std.string(albedo) + ", " + Std.string(targetReg) + "\n" + "mov " + Std.string(targetReg) + ".w, " + Std.string(albedo) + ".w\n"; else code += "mul " + Std.string(targetReg) + ".xyz, " + Std.string(this._diffuseInputRegister) + ", " + Std.string(targetReg) + "\n" + "mov " + Std.string(targetReg) + ".w, " + Std.string(this._diffuseInputRegister) + ".w\n";
		}
		regCache.removeFragmentTempUsage(this._totalLightColorReg);
		regCache.removeFragmentTempUsage(albedo);
		return code;
	}
	,applyShadow: function(vo,regCache) {
		return "mul " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(this._shadowRegister) + ".w\n";
	}
	,activate: function(vo,stage3DProxy) {
		if(this._useTexture) {
			stage3DProxy._context3D.setSamplerStateAt(vo.texturesIndex,vo.repeatTextures?openfl.display3D.Context3DWrapMode.REPEAT:openfl.display3D.Context3DWrapMode.CLAMP,this.getSmoothingFilter(vo.useSmoothTextures,vo.anisotropy),vo.useMipmapping?openfl.display3D.Context3DMipFilter.MIPLINEAR:openfl.display3D.Context3DMipFilter.MIPNONE);
			stage3DProxy._context3D.setTextureAt(vo.texturesIndex,this._texture.getTextureForStage3D(stage3DProxy));
			if(this._alphaThreshold > 0) {
				var this1 = vo.fragmentData;
				var key = vo.fragmentConstantsIndex;
				if(!this1.fixed) {
					if(key >= this1.length) this1.length = key + 1;
					if(this1.data.length < this1.length) {
						var data;
						var this2;
						this2 = new Array(this1.data.length + 10);
						data = this2;
						haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
						this1.data = data;
					}
				}
				this1.data[key] = this._alphaThreshold;
			}
		} else {
			var index = vo.fragmentConstantsIndex;
			var data1 = vo.fragmentData;
			if(!data1.fixed) {
				if(index >= data1.length) data1.length = index + 1;
				if(data1.data.length < data1.length) {
					var data2;
					var this3;
					this3 = new Array(data1.data.length + 10);
					data2 = this3;
					haxe.ds._Vector.Vector_Impl_.blit(data1.data,0,data2,0,data1.data.length);
					data1.data = data2;
				}
			}
			data1.data[index] = this._diffuseR;
			var key1 = index + 1;
			if(!data1.fixed) {
				if(key1 >= data1.length) data1.length = key1 + 1;
				if(data1.data.length < data1.length) {
					var data3;
					var this4;
					this4 = new Array(data1.data.length + 10);
					data3 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(data1.data,0,data3,0,data1.data.length);
					data1.data = data3;
				}
			}
			data1.data[key1] = this._diffuseG;
			var key2 = index + 2;
			if(!data1.fixed) {
				if(key2 >= data1.length) data1.length = key2 + 1;
				if(data1.data.length < data1.length) {
					var data4;
					var this5;
					this5 = new Array(data1.data.length + 10);
					data4 = this5;
					haxe.ds._Vector.Vector_Impl_.blit(data1.data,0,data4,0,data1.data.length);
					data1.data = data4;
				}
			}
			data1.data[key2] = this._diffuseB;
			var key3 = index + 3;
			if(!data1.fixed) {
				if(key3 >= data1.length) data1.length = key3 + 1;
				if(data1.data.length < data1.length) {
					var data5;
					var this6;
					this6 = new Array(data1.data.length + 10);
					data5 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(data1.data,0,data5,0,data1.data.length);
					data1.data = data5;
				}
			}
			data1.data[key3] = this._diffuseA;
		}
	}
	,updateDiffuse: function() {
		this._diffuseR = (this._diffuseColor >> 16 & 255) / 255;
		this._diffuseG = (this._diffuseColor >> 8 & 255) / 255;
		this._diffuseB = (this._diffuseColor & 255) / 255;
	}
	,set_shadowRegister: function(value) {
		this._shadowRegister = value;
		return value;
	}
	,__class__: away3d.materials.methods.BasicDiffuseMethod
	,__properties__: $extend(away3d.materials.methods.LightingMethodBase.prototype.__properties__,{set_shadowRegister:"set_shadowRegister",set_alphaThreshold:"set_alphaThreshold",get_alphaThreshold:"get_alphaThreshold",set_texture:"set_texture",get_texture:"get_texture",set_diffuseColor:"set_diffuseColor",get_diffuseColor:"get_diffuseColor",set_diffuseAlpha:"set_diffuseAlpha",get_diffuseAlpha:"get_diffuseAlpha",set_useAmbientTexture:"set_useAmbientTexture",get_useAmbientTexture:"get_useAmbientTexture"})
});
away3d.materials.methods.BasicNormalMethod = function() {
	away3d.materials.methods.ShadingMethodBase.call(this);
};
$hxClasses["away3d.materials.methods.BasicNormalMethod"] = away3d.materials.methods.BasicNormalMethod;
away3d.materials.methods.BasicNormalMethod.__name__ = ["away3d","materials","methods","BasicNormalMethod"];
away3d.materials.methods.BasicNormalMethod.__super__ = away3d.materials.methods.ShadingMethodBase;
away3d.materials.methods.BasicNormalMethod.prototype = $extend(away3d.materials.methods.ShadingMethodBase.prototype,{
	_texture: null
	,_useTexture: null
	,_normalTextureRegister: null
	,initVO: function(vo) {
		vo.needsUV = js.Boot.__cast(this._texture != null , Bool);
	}
	,get_tangentSpace: function() {
		return true;
	}
	,get_hasOutput: function() {
		return this._useTexture;
	}
	,copyFrom: function(method) {
		this.set_normalMap((js.Boot.__cast(method , away3d.materials.methods.BasicNormalMethod)).get_normalMap());
	}
	,get_normalMap: function() {
		return this._texture;
	}
	,set_normalMap: function(value) {
		if(js.Boot.__cast(value != null , Bool) != this._useTexture || value != null && this._texture != null && (value.get_hasMipMaps() != this._texture.get_hasMipMaps() || value.get_format() != this._texture.get_format())) this.invalidateShaderProgram();
		this._useTexture = js.Boot.__cast(value != null , Bool);
		this._texture = value;
		return value;
	}
	,cleanCompilationData: function() {
		away3d.materials.methods.ShadingMethodBase.prototype.cleanCompilationData.call(this);
		this._normalTextureRegister = null;
	}
	,dispose: function() {
		if(this._texture != null) this._texture = null;
	}
	,activate: function(vo,stage3DProxy) {
		if(vo.texturesIndex >= 0) {
			stage3DProxy._context3D.setSamplerStateAt(vo.texturesIndex,vo.repeatTextures?openfl.display3D.Context3DWrapMode.REPEAT:openfl.display3D.Context3DWrapMode.CLAMP,this.getSmoothingFilter(vo.useSmoothTextures,vo.anisotropy),vo.useMipmapping?openfl.display3D.Context3DMipFilter.MIPLINEAR:openfl.display3D.Context3DMipFilter.MIPNONE);
			stage3DProxy._context3D.setTextureAt(vo.texturesIndex,this._texture.getTextureForStage3D(stage3DProxy));
		}
	}
	,getFragmentCode: function(vo,regCache,targetReg) {
		this._normalTextureRegister = regCache.getFreeTextureReg();
		vo.texturesIndex = this._normalTextureRegister.get_index();
		return this.getTex2DSampleCode(vo,targetReg,this._normalTextureRegister,this._texture) + "sub " + Std.string(targetReg) + ".xyz, " + Std.string(targetReg) + ".xyz, " + Std.string(this._sharedRegisters.commons) + ".xxx\t\n" + "nrm " + Std.string(targetReg) + ".xyz, " + Std.string(targetReg) + ".xyz\t\t\t\t\t\t\t\n";
	}
	,__class__: away3d.materials.methods.BasicNormalMethod
	,__properties__: $extend(away3d.materials.methods.ShadingMethodBase.prototype.__properties__,{set_normalMap:"set_normalMap",get_normalMap:"get_normalMap",get_hasOutput:"get_hasOutput",get_tangentSpace:"get_tangentSpace"})
});
away3d.materials.methods.BasicSpecularMethod = function() {
	this._gloss = 50;
	this._specular = 1;
	this._specularColor = 16777215;
	this._specularR = 1;
	this._specularG = 1;
	this._specularB = 1;
	away3d.materials.methods.LightingMethodBase.call(this);
};
$hxClasses["away3d.materials.methods.BasicSpecularMethod"] = away3d.materials.methods.BasicSpecularMethod;
away3d.materials.methods.BasicSpecularMethod.__name__ = ["away3d","materials","methods","BasicSpecularMethod"];
away3d.materials.methods.BasicSpecularMethod.__super__ = away3d.materials.methods.LightingMethodBase;
away3d.materials.methods.BasicSpecularMethod.prototype = $extend(away3d.materials.methods.LightingMethodBase.prototype,{
	_useTexture: null
	,_totalLightColorReg: null
	,_specularTextureRegister: null
	,_specularTexData: null
	,_specularDataRegister: null
	,_texture: null
	,_gloss: null
	,_specular: null
	,_specularColor: null
	,_specularR: null
	,_specularG: null
	,_specularB: null
	,_shadowRegister: null
	,_isFirstLight: null
	,initVO: function(vo) {
		vo.needsUV = this._useTexture;
		vo.needsNormals = vo.numLights > 0;
		vo.needsView = vo.numLights > 0;
	}
	,get_gloss: function() {
		return this._gloss;
	}
	,set_gloss: function(value) {
		this._gloss = value;
		return value;
	}
	,get_specular: function() {
		return this._specular;
	}
	,set_specular: function(value) {
		if(value == this._specular) return value;
		this._specular = value;
		this.updateSpecular();
		return value;
	}
	,get_specularColor: function() {
		return this._specularColor;
	}
	,set_specularColor: function(value) {
		if((function($this) {
			var $r;
			var $int = $this._specularColor;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) == (function($this) {
			var $r;
			var int1 = value;
			$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
			return $r;
		}(this))) return value;
		if((function($this) {
			var $r;
			var int2 = $this._specularColor;
			$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
			return $r;
		}(this)) == 0 || (function($this) {
			var $r;
			var int3 = value;
			$r = int3 < 0?4294967296.0 + int3:int3 + 0.0;
			return $r;
		}(this)) == 0) this.invalidateShaderProgram();
		this._specularColor = value;
		this.updateSpecular();
		return value;
	}
	,get_texture: function() {
		return this._texture;
	}
	,set_texture: function(value) {
		if(js.Boot.__cast(value != null , Bool) != this._useTexture || value != null && this._texture != null && (value.get_hasMipMaps() != this._texture.get_hasMipMaps() || value.get_format() != this._texture.get_format())) this.invalidateShaderProgram();
		this._useTexture = js.Boot.__cast(value != null , Bool);
		this._texture = value;
		return value;
	}
	,copyFrom: function(method) {
		var spec;
		spec = js.Boot.__cast(method , away3d.materials.methods.BasicSpecularMethod);
		this.set_texture(spec.get_texture());
		this.set_specular(spec.get_specular());
		this.set_specularColor(spec.get_specularColor());
		this.set_gloss(spec.get_gloss());
	}
	,cleanCompilationData: function() {
		away3d.materials.methods.LightingMethodBase.prototype.cleanCompilationData.call(this);
		this._shadowRegister = null;
		this._totalLightColorReg = null;
		this._specularTextureRegister = null;
		this._specularTexData = null;
		this._specularDataRegister = null;
	}
	,getFragmentPreLightingCode: function(vo,regCache) {
		var code = "";
		this._isFirstLight = true;
		if(vo.numLights > 0) {
			this._specularDataRegister = regCache.getFreeFragmentConstant();
			vo.fragmentConstantsIndex = this._specularDataRegister.get_index() * 4;
			if(this._useTexture) {
				this._specularTexData = regCache.getFreeFragmentVectorTemp();
				regCache.addFragmentTempUsages(this._specularTexData,1);
				this._specularTextureRegister = regCache.getFreeTextureReg();
				vo.texturesIndex = this._specularTextureRegister.get_index();
				code = this.getTex2DSampleCode(vo,this._specularTexData,this._specularTextureRegister,this._texture);
			} else this._specularTextureRegister = null;
			this._totalLightColorReg = regCache.getFreeFragmentVectorTemp();
			regCache.addFragmentTempUsages(this._totalLightColorReg,1);
		}
		return code;
	}
	,getFragmentCodePerLight: function(vo,lightDirReg,lightColReg,regCache) {
		var code = "";
		var t;
		if(this._isFirstLight) t = this._totalLightColorReg; else {
			t = regCache.getFreeFragmentVectorTemp();
			regCache.addFragmentTempUsages(t,1);
		}
		var viewDirReg = this._sharedRegisters.viewDirFragment;
		var normalReg = this._sharedRegisters.normalFragment;
		code += "add " + Std.string(t) + ", " + Std.string(lightDirReg) + ", " + Std.string(viewDirReg) + "\n" + "nrm " + Std.string(t) + ".xyz, " + Std.string(t) + "\n" + "dp3 " + Std.string(t) + ".w, " + Std.string(normalReg) + ", " + Std.string(t) + "\n" + "sat " + Std.string(t) + ".w, " + Std.string(t) + ".w\n";
		if(this._useTexture) code += "mul " + Std.string(this._specularTexData) + ".w, " + Std.string(this._specularTexData) + ".y, " + Std.string(this._specularDataRegister) + ".w\n" + "pow " + Std.string(t) + ".w, " + Std.string(t) + ".w, " + Std.string(this._specularTexData) + ".w\n"; else code += "pow " + Std.string(t) + ".w, " + Std.string(t) + ".w, " + Std.string(this._specularDataRegister) + ".w\n";
		if(vo.useLightFallOff) code += "mul " + Std.string(t) + ".w, " + Std.string(t) + ".w, " + Std.string(lightDirReg) + ".w\n";
		if(this._modulateMethod != null) code += Std.string(this._modulateMethod(vo,t,regCache,this._sharedRegisters));
		code += "mul " + Std.string(t) + ".xyz, " + Std.string(lightColReg) + ", " + Std.string(t) + ".w\n";
		if(!this._isFirstLight) {
			code += "add " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(t) + "\n";
			regCache.removeFragmentTempUsage(t);
		}
		this._isFirstLight = false;
		return code;
	}
	,getFragmentCodePerProbe: function(vo,cubeMapReg,weightRegister,regCache) {
		var code = "";
		var t;
		if(this._isFirstLight) t = this._totalLightColorReg; else {
			t = regCache.getFreeFragmentVectorTemp();
			regCache.addFragmentTempUsages(t,1);
		}
		var normalReg = this._sharedRegisters.normalFragment;
		var viewDirReg = this._sharedRegisters.viewDirFragment;
		code += "dp3 " + Std.string(t) + ".w, " + Std.string(normalReg) + ", " + Std.string(viewDirReg) + "\n" + "add " + Std.string(t) + ".w, " + Std.string(t) + ".w, " + Std.string(t) + ".w\n" + "mul " + Std.string(t) + ", " + Std.string(t) + ".w, " + Std.string(normalReg) + "\n" + "sub " + Std.string(t) + ", " + Std.string(t) + ", " + Std.string(viewDirReg) + "\n" + "tex " + Std.string(t) + ", " + Std.string(t) + ", " + Std.string(cubeMapReg) + " <cube," + (vo.useSmoothTextures?"linear":"nearest") + ",miplinear>\n" + "mul " + Std.string(t) + ".xyz, " + Std.string(t) + ", " + weightRegister + "\n";
		if(this._modulateMethod != null) code += Std.string(this._modulateMethod(vo,t,regCache,this._sharedRegisters));
		if(!this._isFirstLight) {
			code += "add " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(t) + "\n";
			regCache.removeFragmentTempUsage(t);
		}
		this._isFirstLight = false;
		return code;
	}
	,getFragmentPostLightingCode: function(vo,regCache,targetReg) {
		var code = "";
		if(vo.numLights == 0) return code;
		if(this._shadowRegister != null) code += "mul " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(this._shadowRegister) + ".w\n";
		if(this._useTexture) {
			code += "mul " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(this._specularTexData) + ".x\n";
			regCache.removeFragmentTempUsage(this._specularTexData);
		}
		code += "mul " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(this._specularDataRegister) + "\n" + "add " + Std.string(targetReg) + ".xyz, " + Std.string(targetReg) + ", " + Std.string(this._totalLightColorReg) + "\n";
		regCache.removeFragmentTempUsage(this._totalLightColorReg);
		return code;
	}
	,activate: function(vo,stage3DProxy) {
		if(vo.numLights == 0) return;
		if(this._useTexture) {
			stage3DProxy._context3D.setSamplerStateAt(vo.texturesIndex,vo.repeatTextures?openfl.display3D.Context3DWrapMode.REPEAT:openfl.display3D.Context3DWrapMode.CLAMP,this.getSmoothingFilter(vo.useSmoothTextures,vo.anisotropy),vo.useMipmapping?openfl.display3D.Context3DMipFilter.MIPLINEAR:openfl.display3D.Context3DMipFilter.MIPNONE);
			stage3DProxy._context3D.setTextureAt(vo.texturesIndex,this._texture.getTextureForStage3D(stage3DProxy));
		}
		var index = vo.fragmentConstantsIndex;
		var data = vo.fragmentData;
		if(!data.fixed) {
			if(index >= data.length) data.length = index + 1;
			if(data.data.length < data.length) {
				var data1;
				var this1;
				this1 = new Array(data.data.length + 10);
				data1 = this1;
				haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data1,0,data.data.length);
				data.data = data1;
			}
		}
		data.data[index] = this._specularR;
		var key = index + 1;
		if(!data.fixed) {
			if(key >= data.length) data.length = key + 1;
			if(data.data.length < data.length) {
				var data2;
				var this2;
				this2 = new Array(data.data.length + 10);
				data2 = this2;
				haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data2,0,data.data.length);
				data.data = data2;
			}
		}
		data.data[key] = this._specularG;
		var key1 = index + 2;
		if(!data.fixed) {
			if(key1 >= data.length) data.length = key1 + 1;
			if(data.data.length < data.length) {
				var data3;
				var this3;
				this3 = new Array(data.data.length + 10);
				data3 = this3;
				haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data3,0,data.data.length);
				data.data = data3;
			}
		}
		data.data[key1] = this._specularB;
		var key2 = index + 3;
		if(!data.fixed) {
			if(key2 >= data.length) data.length = key2 + 1;
			if(data.data.length < data.length) {
				var data4;
				var this4;
				this4 = new Array(data.data.length + 10);
				data4 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data4,0,data.data.length);
				data.data = data4;
			}
		}
		data.data[key2] = this._gloss;
	}
	,updateSpecular: function() {
		this._specularR = (function($this) {
			var $r;
			var $int = $this._specularColor >> 16 & 255;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) / (function($this) {
			var $r;
			var int1 = 255;
			$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
			return $r;
		}(this)) * this._specular;
		this._specularG = (function($this) {
			var $r;
			var int2 = $this._specularColor >> 8 & 255;
			$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
			return $r;
		}(this)) / (function($this) {
			var $r;
			var int3 = 255;
			$r = int3 < 0?4294967296.0 + int3:int3 + 0.0;
			return $r;
		}(this)) * this._specular;
		this._specularB = (function($this) {
			var $r;
			var int4 = $this._specularColor & 255;
			$r = int4 < 0?4294967296.0 + int4:int4 + 0.0;
			return $r;
		}(this)) / (function($this) {
			var $r;
			var int5 = 255;
			$r = int5 < 0?4294967296.0 + int5:int5 + 0.0;
			return $r;
		}(this)) * this._specular;
	}
	,set_shadowRegister: function(shadowReg) {
		this._shadowRegister = shadowReg;
		return shadowReg;
	}
	,__class__: away3d.materials.methods.BasicSpecularMethod
	,__properties__: $extend(away3d.materials.methods.LightingMethodBase.prototype.__properties__,{set_shadowRegister:"set_shadowRegister",set_texture:"set_texture",get_texture:"get_texture",set_specularColor:"set_specularColor",get_specularColor:"get_specularColor",set_specular:"set_specular",get_specular:"get_specular",set_gloss:"set_gloss",get_gloss:"get_gloss"})
});
away3d.materials.methods.EffectMethodBase = function() {
	away3d.materials.methods.ShadingMethodBase.call(this);
};
$hxClasses["away3d.materials.methods.EffectMethodBase"] = away3d.materials.methods.EffectMethodBase;
away3d.materials.methods.EffectMethodBase.__name__ = ["away3d","materials","methods","EffectMethodBase"];
away3d.materials.methods.EffectMethodBase.__interfaces__ = [away3d.library.assets.IAsset];
away3d.materials.methods.EffectMethodBase.__super__ = away3d.materials.methods.ShadingMethodBase;
away3d.materials.methods.EffectMethodBase.prototype = $extend(away3d.materials.methods.ShadingMethodBase.prototype,{
	get_assetType: function() {
		return away3d.library.assets.Asset3DType.EFFECTS_METHOD;
	}
	,getFragmentCode: function(vo,regCache,targetReg) {
		throw new away3d.errors.AbstractMethodError();
		return "";
	}
	,__class__: away3d.materials.methods.EffectMethodBase
	,__properties__: $extend(away3d.materials.methods.ShadingMethodBase.prototype.__properties__,{get_assetType:"get_assetType"})
});
away3d.materials.methods.ColorTransformMethod = function() {
	away3d.materials.methods.EffectMethodBase.call(this);
};
$hxClasses["away3d.materials.methods.ColorTransformMethod"] = away3d.materials.methods.ColorTransformMethod;
away3d.materials.methods.ColorTransformMethod.__name__ = ["away3d","materials","methods","ColorTransformMethod"];
away3d.materials.methods.ColorTransformMethod.__super__ = away3d.materials.methods.EffectMethodBase;
away3d.materials.methods.ColorTransformMethod.prototype = $extend(away3d.materials.methods.EffectMethodBase.prototype,{
	_colorTransform: null
	,get_colorTransform: function() {
		return this._colorTransform;
	}
	,set_colorTransform: function(value) {
		this._colorTransform = value;
		return value;
	}
	,getFragmentCode: function(vo,regCache,targetReg) {
		var code = "";
		var colorMultReg = regCache.getFreeFragmentConstant();
		var colorOffsReg = regCache.getFreeFragmentConstant();
		vo.fragmentConstantsIndex = colorMultReg.get_index() * 4;
		code += "mul " + Std.string(targetReg) + ", " + targetReg.toString() + ", " + Std.string(colorMultReg) + "\n" + "add " + Std.string(targetReg) + ", " + targetReg.toString() + ", " + Std.string(colorOffsReg) + "\n";
		return code;
	}
	,activate: function(vo,stage3DProxy) {
		var inv = 0.00392156862745098;
		var index = vo.fragmentConstantsIndex;
		var data = vo.fragmentData;
		if(!data.fixed) {
			if(index >= data.length) data.length = index + 1;
			if(data.data.length < data.length) {
				var data1;
				var this1;
				this1 = new Array(data.data.length + 10);
				data1 = this1;
				haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data1,0,data.data.length);
				data.data = data1;
			}
		}
		data.data[index] = this._colorTransform.redMultiplier;
		var key = index + 1;
		if(!data.fixed) {
			if(key >= data.length) data.length = key + 1;
			if(data.data.length < data.length) {
				var data2;
				var this2;
				this2 = new Array(data.data.length + 10);
				data2 = this2;
				haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data2,0,data.data.length);
				data.data = data2;
			}
		}
		data.data[key] = this._colorTransform.greenMultiplier;
		var key1 = index + 2;
		if(!data.fixed) {
			if(key1 >= data.length) data.length = key1 + 1;
			if(data.data.length < data.length) {
				var data3;
				var this3;
				this3 = new Array(data.data.length + 10);
				data3 = this3;
				haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data3,0,data.data.length);
				data.data = data3;
			}
		}
		data.data[key1] = this._colorTransform.blueMultiplier;
		var key2 = index + 3;
		if(!data.fixed) {
			if(key2 >= data.length) data.length = key2 + 1;
			if(data.data.length < data.length) {
				var data4;
				var this4;
				this4 = new Array(data.data.length + 10);
				data4 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data4,0,data.data.length);
				data.data = data4;
			}
		}
		data.data[key2] = this._colorTransform.alphaMultiplier;
		var key3 = index + 4;
		if(!data.fixed) {
			if(key3 >= data.length) data.length = key3 + 1;
			if(data.data.length < data.length) {
				var data5;
				var this5;
				this5 = new Array(data.data.length + 10);
				data5 = this5;
				haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data5,0,data.data.length);
				data.data = data5;
			}
		}
		data.data[key3] = this._colorTransform.redOffset * inv;
		var key4 = index + 5;
		if(!data.fixed) {
			if(key4 >= data.length) data.length = key4 + 1;
			if(data.data.length < data.length) {
				var data6;
				var this6;
				this6 = new Array(data.data.length + 10);
				data6 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data6,0,data.data.length);
				data.data = data6;
			}
		}
		data.data[key4] = this._colorTransform.greenOffset * inv;
		var key5 = index + 6;
		if(!data.fixed) {
			if(key5 >= data.length) data.length = key5 + 1;
			if(data.data.length < data.length) {
				var data7;
				var this7;
				this7 = new Array(data.data.length + 10);
				data7 = this7;
				haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data7,0,data.data.length);
				data.data = data7;
			}
		}
		data.data[key5] = this._colorTransform.blueOffset * inv;
		var key6 = index + 7;
		if(!data.fixed) {
			if(key6 >= data.length) data.length = key6 + 1;
			if(data.data.length < data.length) {
				var data8;
				var this8;
				this8 = new Array(data.data.length + 10);
				data8 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data8,0,data.data.length);
				data.data = data8;
			}
		}
		data.data[key6] = this._colorTransform.alphaOffset * inv;
	}
	,__class__: away3d.materials.methods.ColorTransformMethod
	,__properties__: $extend(away3d.materials.methods.EffectMethodBase.prototype.__properties__,{set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform"})
});
away3d.materials.methods.MethodVO = function() {
	this.useLightFallOff = true;
};
$hxClasses["away3d.materials.methods.MethodVO"] = away3d.materials.methods.MethodVO;
away3d.materials.methods.MethodVO.__name__ = ["away3d","materials","methods","MethodVO"];
away3d.materials.methods.MethodVO.prototype = {
	vertexData: null
	,fragmentData: null
	,texturesIndex: null
	,secondaryTexturesIndex: null
	,vertexConstantsIndex: null
	,secondaryVertexConstantsIndex: null
	,fragmentConstantsIndex: null
	,secondaryFragmentConstantsIndex: null
	,useMipmapping: null
	,useSmoothTextures: null
	,repeatTextures: null
	,anisotropy: null
	,needsProjection: null
	,needsView: null
	,needsNormals: null
	,needsTangents: null
	,needsUV: null
	,needsSecondaryUV: null
	,needsGlobalVertexPos: null
	,needsGlobalFragmentPos: null
	,numLights: null
	,useLightFallOff: null
	,reset: function() {
		this.texturesIndex = -1;
		this.vertexConstantsIndex = -1;
		this.fragmentConstantsIndex = -1;
		this.useMipmapping = true;
		this.anisotropy = away3d.textures.Anisotropy.ANISOTROPIC2X;
		this.useSmoothTextures = true;
		this.repeatTextures = false;
		this.needsProjection = false;
		this.needsView = false;
		this.needsNormals = false;
		this.needsTangents = false;
		this.needsUV = false;
		this.needsSecondaryUV = false;
		this.needsGlobalVertexPos = false;
		this.needsGlobalFragmentPos = false;
		this.numLights = 0;
		this.useLightFallOff = true;
	}
	,__class__: away3d.materials.methods.MethodVO
};
away3d.materials.methods.MethodVOSet = function(method) {
	this.method = method;
	this.data = method.createMethodVO();
};
$hxClasses["away3d.materials.methods.MethodVOSet"] = away3d.materials.methods.MethodVOSet;
away3d.materials.methods.MethodVOSet.__name__ = ["away3d","materials","methods","MethodVOSet"];
away3d.materials.methods.MethodVOSet.prototype = {
	method: null
	,data: null
	,__class__: away3d.materials.methods.MethodVOSet
};
away3d.materials.methods.ShaderMethodSetup = function() {
	this._methods = new Array();
	this._normalMethod = new away3d.materials.methods.BasicNormalMethod();
	this._ambientMethod = new away3d.materials.methods.BasicAmbientMethod();
	this._diffuseMethod = new away3d.materials.methods.BasicDiffuseMethod();
	this._specularMethod = new away3d.materials.methods.BasicSpecularMethod();
	this._normalMethod.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
	this._diffuseMethod.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
	this._specularMethod.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
	this._ambientMethod.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
	this._normalMethodVO = this._normalMethod.createMethodVO();
	this._ambientMethodVO = this._ambientMethod.createMethodVO();
	this._diffuseMethodVO = this._diffuseMethod.createMethodVO();
	this._specularMethodVO = this._specularMethod.createMethodVO();
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["away3d.materials.methods.ShaderMethodSetup"] = away3d.materials.methods.ShaderMethodSetup;
away3d.materials.methods.ShaderMethodSetup.__name__ = ["away3d","materials","methods","ShaderMethodSetup"];
away3d.materials.methods.ShaderMethodSetup.__super__ = openfl.events.EventDispatcher;
away3d.materials.methods.ShaderMethodSetup.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	_colorTransformMethod: null
	,_colorTransformMethodVO: null
	,_normalMethod: null
	,_normalMethodVO: null
	,_ambientMethod: null
	,_ambientMethodVO: null
	,_shadowMethod: null
	,_shadowMethodVO: null
	,_diffuseMethod: null
	,_diffuseMethodVO: null
	,_specularMethod: null
	,_specularMethodVO: null
	,_methods: null
	,onShaderInvalidated: function(event) {
		this.invalidateShaderProgram();
	}
	,invalidateShaderProgram: function() {
		this.dispatchEvent(new away3d.events.ShadingMethodEvent(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED));
	}
	,get_normalMethod: function() {
		return this._normalMethod;
	}
	,set_normalMethod: function(value) {
		if(this._normalMethod != null) this._normalMethod.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		if(value != null) {
			if(this._normalMethod != null) value.copyFrom(this._normalMethod);
			this._normalMethodVO = value.createMethodVO();
			value.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		}
		this._normalMethod = value;
		if(value != null) this.invalidateShaderProgram();
		return value;
	}
	,get_ambientMethod: function() {
		return this._ambientMethod;
	}
	,set_ambientMethod: function(value) {
		if(this._ambientMethod != null) this._ambientMethod.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		if(value != null) {
			if(this._ambientMethod != null) value.copyFrom(this._ambientMethod);
			value.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
			this._ambientMethodVO = value.createMethodVO();
		}
		this._ambientMethod = value;
		if(value != null) this.invalidateShaderProgram();
		return value;
	}
	,get_shadowMethod: function() {
		return this._shadowMethod;
	}
	,set_shadowMethod: function(value) {
		if(this._shadowMethod != null) this._shadowMethod.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		this._shadowMethod = value;
		if(this._shadowMethod != null) {
			this._shadowMethod.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
			this._shadowMethodVO = this._shadowMethod.createMethodVO();
		} else this._shadowMethodVO = null;
		this.invalidateShaderProgram();
		return value;
	}
	,get_diffuseMethod: function() {
		return this._diffuseMethod;
	}
	,set_diffuseMethod: function(value) {
		if(this._diffuseMethod != null) this._diffuseMethod.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		if(value != null) {
			if(this._diffuseMethod != null) value.copyFrom(this._diffuseMethod);
			value.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
			this._diffuseMethodVO = value.createMethodVO();
		}
		this._diffuseMethod = value;
		if(value != null) this.invalidateShaderProgram();
		return value;
	}
	,get_specularMethod: function() {
		return this._specularMethod;
	}
	,set_specularMethod: function(value) {
		if(this._specularMethod != null) {
			this._specularMethod.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
			if(value != null) value.copyFrom(this._specularMethod);
		}
		this._specularMethod = value;
		if(this._specularMethod != null) {
			this._specularMethod.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
			this._specularMethodVO = this._specularMethod.createMethodVO();
		} else this._specularMethodVO = null;
		this.invalidateShaderProgram();
		return value;
	}
	,get_colorTransformMethod: function() {
		return this._colorTransformMethod;
	}
	,set_colorTransformMethod: function(value) {
		if(this._colorTransformMethod == value) return value;
		if(this._colorTransformMethod != null) this._colorTransformMethod.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		if(this._colorTransformMethod == null || value == null) this.invalidateShaderProgram();
		this._colorTransformMethod = value;
		if(this._colorTransformMethod != null) {
			this._colorTransformMethod.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
			this._colorTransformMethodVO = this._colorTransformMethod.createMethodVO();
		} else this._colorTransformMethodVO = null;
		return value;
	}
	,dispose: function() {
		this.clearListeners(this._normalMethod);
		this.clearListeners(this._diffuseMethod);
		this.clearListeners(this._shadowMethod);
		this.clearListeners(this._ambientMethod);
		this.clearListeners(this._specularMethod);
		var i = 0;
		while(i < this._methods.length) {
			this.clearListeners(this._methods[i].method);
			++i;
		}
		this._methods = null;
	}
	,clearListeners: function(method) {
		if(method != null) method.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
	}
	,addMethod: function(method) {
		this._methods.push(new away3d.materials.methods.MethodVOSet(method));
		method.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		this.invalidateShaderProgram();
	}
	,hasMethod: function(method) {
		return this.getMethodSetForMethod(method) != null;
	}
	,addMethodAt: function(method,index) {
		var x = new away3d.materials.methods.MethodVOSet(method);
		this._methods.splice(index,0,x);
		method.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		this.invalidateShaderProgram();
	}
	,getMethodAt: function(index) {
		if(index > this._methods.length - 1) return null;
		return this._methods[index].method;
	}
	,get_numMethods: function() {
		return this._methods.length;
	}
	,removeMethod: function(method) {
		var methodSet = this.getMethodSetForMethod(method);
		if(methodSet != null) {
			var index = Lambda.indexOf(this._methods,methodSet);
			this._methods.splice(index,1);
			method.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
			this.invalidateShaderProgram();
		}
	}
	,getMethodSetForMethod: function(method) {
		var len = this._methods.length;
		var i = 0;
		while(i < len) {
			if(this._methods[i].method == method) return this._methods[i];
			++i;
		}
		return null;
	}
	,__class__: away3d.materials.methods.ShaderMethodSetup
	,__properties__: {get_numMethods:"get_numMethods",set_colorTransformMethod:"set_colorTransformMethod",get_colorTransformMethod:"get_colorTransformMethod",set_specularMethod:"set_specularMethod",get_specularMethod:"get_specularMethod",set_diffuseMethod:"set_diffuseMethod",get_diffuseMethod:"get_diffuseMethod",set_shadowMethod:"set_shadowMethod",get_shadowMethod:"get_shadowMethod",set_ambientMethod:"set_ambientMethod",get_ambientMethod:"get_ambientMethod",set_normalMethod:"set_normalMethod",get_normalMethod:"get_normalMethod"}
});
away3d.materials.methods.ShadowMapMethodBase = function(castingLight) {
	this._epsilon = .02;
	this._alpha = 1;
	away3d.materials.methods.ShadingMethodBase.call(this);
	this._castingLight = castingLight;
	castingLight.set_castsShadows(true);
	this._shadowMapper = castingLight.get_shadowMapper();
};
$hxClasses["away3d.materials.methods.ShadowMapMethodBase"] = away3d.materials.methods.ShadowMapMethodBase;
away3d.materials.methods.ShadowMapMethodBase.__name__ = ["away3d","materials","methods","ShadowMapMethodBase"];
away3d.materials.methods.ShadowMapMethodBase.__interfaces__ = [away3d.library.assets.IAsset];
away3d.materials.methods.ShadowMapMethodBase.__super__ = away3d.materials.methods.ShadingMethodBase;
away3d.materials.methods.ShadowMapMethodBase.prototype = $extend(away3d.materials.methods.ShadingMethodBase.prototype,{
	_castingLight: null
	,_shadowMapper: null
	,_epsilon: null
	,_alpha: null
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.SHADOW_MAP_METHOD;
	}
	,get_alpha: function() {
		return this._alpha;
	}
	,set_alpha: function(value) {
		this._alpha = value;
		return value;
	}
	,get_castingLight: function() {
		return this._castingLight;
	}
	,get_epsilon: function() {
		return this._epsilon;
	}
	,set_epsilon: function(value) {
		this._epsilon = value;
		return value;
	}
	,getFragmentCode: function(vo,regCache,targetReg) {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,__class__: away3d.materials.methods.ShadowMapMethodBase
	,__properties__: $extend(away3d.materials.methods.ShadingMethodBase.prototype.__properties__,{set_epsilon:"set_epsilon",get_epsilon:"get_epsilon",get_castingLight:"get_castingLight",set_alpha:"set_alpha",get_alpha:"get_alpha",get_assetType:"get_assetType"})
});
away3d.materials.passes = {};
away3d.materials.passes.MaterialPassBase = function(renderToTexture) {
	if(renderToTexture == null) renderToTexture = false;
	openfl.events.EventDispatcher.call(this);
	this._program3Ds = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8);
	this._program3Dids = [-1,-1,-1,-1,-1,-1,-1,-1];
	this._context3Ds = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8);
	this._smooth = true;
	this._repeat = false;
	this._mipmap = true;
	this._anisotropy = away3d.textures.Anisotropy.ANISOTROPIC2X;
	this._depthCompareMode = 515;
	this._blendFactorSource = 1;
	this._blendFactorDest = 0;
	this._animatableAttributes = ["va0"];
	this._animationTargetRegisters = ["vt0"];
	this._shadedTarget = "ft0";
	this._defaultCulling = 1028;
	this._writeDepth = true;
	this._renderToTexture = renderToTexture;
	this._numUsedStreams = 1;
	this._numUsedVertexConstants = 5;
};
$hxClasses["away3d.materials.passes.MaterialPassBase"] = away3d.materials.passes.MaterialPassBase;
away3d.materials.passes.MaterialPassBase.__name__ = ["away3d","materials","passes","MaterialPassBase"];
away3d.materials.passes.MaterialPassBase.__super__ = openfl.events.EventDispatcher;
away3d.materials.passes.MaterialPassBase.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	_material: null
	,_animationSet: null
	,_program3Ds: null
	,_program3Dids: null
	,_context3Ds: null
	,_numUsedStreams: null
	,_numUsedTextures: null
	,_numUsedVertexConstants: null
	,_numUsedFragmentConstants: null
	,_numUsedVaryings: null
	,_smooth: null
	,_repeat: null
	,_mipmap: null
	,_anisotropy: null
	,_depthCompareMode: null
	,_blendFactorSource: null
	,_blendFactorDest: null
	,_enableBlending: null
	,_bothSides: null
	,_lightPicker: null
	,_animatableAttributes: null
	,_animationTargetRegisters: null
	,_shadedTarget: null
	,_defaultCulling: null
	,_renderToTexture: null
	,_oldTarget: null
	,_oldSurface: null
	,_oldDepthStencil: null
	,_oldRect: null
	,_alphaPremultiplied: null
	,_needFragmentAnimation: null
	,_needUVAnimation: null
	,_UVTarget: null
	,_UVSource: null
	,_writeDepth: null
	,animationRegisterCache: null
	,get_material: function() {
		return this._material;
	}
	,set_material: function(value) {
		this._material = value;
		return this._material;
	}
	,get_writeDepth: function() {
		return this._writeDepth;
	}
	,set_writeDepth: function(value) {
		this._writeDepth = value;
		return this._writeDepth;
	}
	,get_mipmap: function() {
		return this._mipmap;
	}
	,set_mipmap: function(value) {
		if(this._mipmap == value) return this._mipmap;
		this._mipmap = value;
		this.invalidateShaderProgram();
		return this._mipmap;
	}
	,get_anisotropy: function() {
		return this._anisotropy;
	}
	,set_anisotropy: function(value) {
		if(this._anisotropy == value) return this._anisotropy;
		this._anisotropy = value;
		this.invalidateShaderProgram();
		return this._anisotropy;
	}
	,get_smooth: function() {
		return this._smooth;
	}
	,set_smooth: function(value) {
		if(this._smooth == value) return this._smooth;
		this._smooth = value;
		this.invalidateShaderProgram();
		return this._smooth;
	}
	,get_repeat: function() {
		return this._repeat;
	}
	,set_repeat: function(value) {
		if(this._repeat == value) return this._repeat;
		this._repeat = value;
		this.invalidateShaderProgram();
		return this._repeat;
	}
	,get_bothSides: function() {
		return this._bothSides;
	}
	,set_bothSides: function(value) {
		this._bothSides = value;
		return this._bothSides;
	}
	,get_depthCompareMode: function() {
		return this._depthCompareMode;
	}
	,set_depthCompareMode: function(value) {
		this._depthCompareMode = value;
		return this._depthCompareMode;
	}
	,get_animationSet: function() {
		return this._animationSet;
	}
	,set_animationSet: function(value) {
		if(this._animationSet == value) return this._animationSet;
		this._animationSet = value;
		this.invalidateShaderProgram();
		return this._animationSet;
	}
	,get_renderToTexture: function() {
		return this._renderToTexture;
	}
	,dispose: function() {
		if(this._lightPicker != null) this._lightPicker.removeEventListener(openfl.events.Event.CHANGE,$bind(this,this.onLightsChange));
		var i = 0;
		var _g = 0;
		while(_g < 8) {
			var i1 = _g++;
			if(this._program3Ds[i1] != null) {
				away3d.core.managers.AGALProgram3DCache.getInstanceFromIndex(i1).freeProgram3D(this._program3Dids[i1]);
				this._program3Ds[i1] = null;
			}
		}
	}
	,get_numUsedStreams: function() {
		return this._numUsedStreams;
	}
	,get_numUsedVertexConstants: function() {
		return this._numUsedVertexConstants;
	}
	,get_numUsedVaryings: function() {
		return this._numUsedVaryings;
	}
	,get_numUsedFragmentConstants: function() {
		return this._numUsedFragmentConstants;
	}
	,get_needFragmentAnimation: function() {
		return this._needFragmentAnimation;
	}
	,get_needUVAnimation: function() {
		return this._needUVAnimation;
	}
	,updateAnimationState: function(renderable,stage3DProxy,camera) {
		renderable.get_animator().setRenderState(stage3DProxy,renderable,this._numUsedVertexConstants,this._numUsedStreams,camera);
	}
	,render: function(renderable,stage3DProxy,camera,viewProjection) {
		throw new away3d.errors.AbstractMethodError();
	}
	,getVertexCode: function() {
		throw new away3d.errors.AbstractMethodError();
		return "";
	}
	,getFragmentCode: function(fragmentAnimatorCode) {
		throw new away3d.errors.AbstractMethodError();
		return "";
	}
	,setBlendMode: function(value) {
		switch(value[1]) {
		case 10:
			this._blendFactorSource = 1;
			this._blendFactorDest = 0;
			this._enableBlending = false;
			break;
		case 7:
			this._blendFactorSource = 770;
			this._blendFactorDest = 771;
			this._enableBlending = true;
			break;
		case 9:
			this._blendFactorSource = 0;
			this._blendFactorDest = 768;
			this._enableBlending = true;
			break;
		case 0:
			this._blendFactorSource = 770;
			this._blendFactorDest = 1;
			this._enableBlending = true;
			break;
		case 1:
			this._blendFactorSource = 0;
			this._blendFactorDest = 770;
			this._enableBlending = true;
			break;
		default:
			throw new openfl.errors.Error("Unsupported blend mode!");
		}
	}
	,activate: function(stage3DProxy,camera) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		context.setDepthTest(this._writeDepth && !this._enableBlending,this._depthCompareMode);
		if(this._enableBlending) context.setBlendFactors(this._blendFactorSource,this._blendFactorDest);
		if(this._context3Ds[contextIndex] != context || this._program3Ds[contextIndex] == null) {
			this._context3Ds[contextIndex] = context;
			this.updateProgram(stage3DProxy);
			this.dispatchEvent(new openfl.events.Event(openfl.events.Event.CHANGE));
		}
		var prevUsed = away3d.materials.passes.MaterialPassBase._previousUsedStreams[contextIndex];
		var _g = this._numUsedStreams;
		while(_g < prevUsed) {
			var i = _g++;
			context.setVertexBufferAt(i,null);
		}
		prevUsed = away3d.materials.passes.MaterialPassBase._previousUsedTexs[contextIndex];
		var _g1 = this._numUsedTextures;
		while(_g1 < prevUsed) {
			var i1 = _g1++;
			context.setTextureAt(i1,null);
		}
		if(this._animationSet != null && !this._animationSet.get_usesCPU()) this._animationSet.activate(stage3DProxy,this);
		context.setProgram(this._program3Ds[contextIndex]);
		context.setCulling(this._bothSides?0:this._defaultCulling);
		if(this._renderToTexture) {
			this._oldTarget = stage3DProxy.get_renderTarget();
			this._oldSurface = stage3DProxy.get_renderSurfaceSelector();
			this._oldDepthStencil = stage3DProxy.get_enableDepthAndStencil();
			this._oldRect = stage3DProxy.get_scissorRect();
		}
	}
	,deactivate: function(stage3DProxy) {
		var index = stage3DProxy._stage3DIndex;
		away3d.materials.passes.MaterialPassBase._previousUsedStreams[index] = this._numUsedStreams;
		away3d.materials.passes.MaterialPassBase._previousUsedTexs[index] = this._numUsedTextures;
		if(this._animationSet != null && !this._animationSet.get_usesCPU()) this._animationSet.deactivate(stage3DProxy,this);
		if(this._renderToTexture) {
			stage3DProxy.setRenderTarget(this._oldTarget,this._oldDepthStencil,this._oldSurface);
			stage3DProxy.set_scissorRect(this._oldRect);
		}
		stage3DProxy._context3D.setDepthTest(true,515);
	}
	,invalidateShaderProgram: function(updateMaterial) {
		if(updateMaterial == null) updateMaterial = true;
		var i = 0;
		var _g = 0;
		while(_g < 8) {
			var i1 = _g++;
			this._program3Ds[i1] = null;
		}
		if(this._material != null && updateMaterial) this._material.invalidatePasses(this);
	}
	,updateProgram: function(stage3DProxy) {
		var animatorCode = "";
		var UVAnimatorCode = "";
		var fragmentAnimatorCode = "";
		var vertexCode = this.getVertexCode();
		if(this._animationSet != null && !this._animationSet.get_usesCPU()) {
			animatorCode = this._animationSet.getAGALVertexCode(this,(function($this) {
				var $r;
				var value = $this._animatableAttributes;
				var vectorData = new openfl.VectorData();
				vectorData.length = value.length;
				vectorData.fixed = true;
				{
					var vec;
					var this1;
					this1 = new Array(value.length);
					vec = this1;
					var _g1 = 0;
					var _g = value.length;
					while(_g1 < _g) {
						var i = _g1++;
						vec[i] = value[i];
					}
					vectorData.data = vec;
				}
				$r = vectorData;
				return $r;
			}(this)),(function($this) {
				var $r;
				var value1 = $this._animationTargetRegisters;
				var vectorData1 = new openfl.VectorData();
				vectorData1.length = value1.length;
				vectorData1.fixed = true;
				{
					var vec1;
					var this2;
					this2 = new Array(value1.length);
					vec1 = this2;
					var _g11 = 0;
					var _g2 = value1.length;
					while(_g11 < _g2) {
						var i1 = _g11++;
						vec1[i1] = value1[i1];
					}
					vectorData1.data = vec1;
				}
				$r = vectorData1;
				return $r;
			}(this)),stage3DProxy.get_profile());
			if(this._needFragmentAnimation) fragmentAnimatorCode = this._animationSet.getAGALFragmentCode(this,this._shadedTarget,stage3DProxy.get_profile());
			if(this._needUVAnimation) UVAnimatorCode = this._animationSet.getAGALUVCode(this,this._UVSource,this._UVTarget);
			this._animationSet.doneAGALCode(this);
		} else {
			var len = this._animatableAttributes.length;
			var i2 = 0;
			var _g3 = 0;
			while(_g3 < len) {
				var i3 = _g3++;
				animatorCode += "mov " + this._animationTargetRegisters[i3] + ", " + this._animatableAttributes[i3] + "\n";
			}
			if(this._needUVAnimation) UVAnimatorCode = "mov " + this._UVTarget + "," + this._UVSource + "\n";
		}
		vertexCode = animatorCode + UVAnimatorCode + vertexCode;
		var fragmentCode = this.getFragmentCode(fragmentAnimatorCode);
		if(away3d.debug.Debug.active) {
			haxe.Log.trace("Compiling AGAL Code:",{ fileName : "MaterialPassBase.hx", lineNumber : 546, className : "away3d.materials.passes.MaterialPassBase", methodName : "updateProgram"});
			haxe.Log.trace("--------------------",{ fileName : "MaterialPassBase.hx", lineNumber : 547, className : "away3d.materials.passes.MaterialPassBase", methodName : "updateProgram"});
			haxe.Log.trace(vertexCode,{ fileName : "MaterialPassBase.hx", lineNumber : 548, className : "away3d.materials.passes.MaterialPassBase", methodName : "updateProgram"});
			haxe.Log.trace("--------------------",{ fileName : "MaterialPassBase.hx", lineNumber : 549, className : "away3d.materials.passes.MaterialPassBase", methodName : "updateProgram"});
			haxe.Log.trace(fragmentCode,{ fileName : "MaterialPassBase.hx", lineNumber : 550, className : "away3d.materials.passes.MaterialPassBase", methodName : "updateProgram"});
		}
		away3d.core.managers.AGALProgram3DCache.getInstance(stage3DProxy).setProgram3D(this,vertexCode,fragmentCode);
	}
	,get_lightPicker: function() {
		return this._lightPicker;
	}
	,set_lightPicker: function(value) {
		if(this._lightPicker != null) this._lightPicker.removeEventListener(openfl.events.Event.CHANGE,$bind(this,this.onLightsChange));
		this._lightPicker = value;
		if(this._lightPicker != null) this._lightPicker.addEventListener(openfl.events.Event.CHANGE,$bind(this,this.onLightsChange));
		this.updateLights();
		return this._lightPicker;
	}
	,onLightsChange: function(event) {
		this.updateLights();
	}
	,updateLights: function() {
	}
	,get_alphaPremultiplied: function() {
		return this._alphaPremultiplied;
	}
	,set_alphaPremultiplied: function(value) {
		this._alphaPremultiplied = value;
		this.invalidateShaderProgram(false);
		return this._alphaPremultiplied;
	}
	,__class__: away3d.materials.passes.MaterialPassBase
	,__properties__: {set_alphaPremultiplied:"set_alphaPremultiplied",get_alphaPremultiplied:"get_alphaPremultiplied",set_lightPicker:"set_lightPicker",get_lightPicker:"get_lightPicker",get_needUVAnimation:"get_needUVAnimation",get_needFragmentAnimation:"get_needFragmentAnimation",get_numUsedFragmentConstants:"get_numUsedFragmentConstants",get_numUsedVaryings:"get_numUsedVaryings",get_numUsedVertexConstants:"get_numUsedVertexConstants",get_numUsedStreams:"get_numUsedStreams",get_renderToTexture:"get_renderToTexture",set_animationSet:"set_animationSet",get_animationSet:"get_animationSet",set_depthCompareMode:"set_depthCompareMode",get_depthCompareMode:"get_depthCompareMode",set_bothSides:"set_bothSides",get_bothSides:"get_bothSides",set_anisotropy:"set_anisotropy",get_anisotropy:"get_anisotropy",set_repeat:"set_repeat",get_repeat:"get_repeat",set_smooth:"set_smooth",get_smooth:"get_smooth",set_mipmap:"set_mipmap",get_mipmap:"get_mipmap",set_writeDepth:"set_writeDepth",get_writeDepth:"get_writeDepth",set_material:"set_material",get_material:"get_material"}
});
away3d.materials.passes.CompiledPass = function(material) {
	this._numDirectionalLights = 0;
	this._numPointLights = 0;
	this._numLightProbes = 0;
	this._specularLightSources = 1;
	this._diffuseLightSources = 3;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this._vertexConstantData = this1;
	var this3;
	this3 = new openfl.VectorData();
	var this4;
	this4 = new Array(0);
	this3.data = this4;
	this3.length = 0;
	this3.fixed = false;
	this._fragmentConstantData = this3;
	this._preserveAlpha = true;
	this._enableLightFallOff = true;
	this._material = material;
	this.init();
	away3d.materials.passes.MaterialPassBase.call(this);
};
$hxClasses["away3d.materials.passes.CompiledPass"] = away3d.materials.passes.CompiledPass;
away3d.materials.passes.CompiledPass.__name__ = ["away3d","materials","passes","CompiledPass"];
away3d.materials.passes.CompiledPass.__super__ = away3d.materials.passes.MaterialPassBase;
away3d.materials.passes.CompiledPass.prototype = $extend(away3d.materials.passes.MaterialPassBase.prototype,{
	_passes: null
	,_passesDirty: null
	,_specularLightSources: null
	,_diffuseLightSources: null
	,_vertexCode: null
	,_fragmentLightCode: null
	,_framentPostLightCode: null
	,_vertexConstantData: null
	,_fragmentConstantData: null
	,_commonsDataIndex: null
	,_probeWeightsIndex: null
	,_uvBufferIndex: null
	,_secondaryUVBufferIndex: null
	,_normalBufferIndex: null
	,_tangentBufferIndex: null
	,_sceneMatrixIndex: null
	,_sceneNormalMatrixIndex: null
	,_lightFragmentConstantIndex: null
	,_cameraPositionIndex: null
	,_uvTransformIndex: null
	,_lightProbeDiffuseIndices: null
	,_lightProbeSpecularIndices: null
	,_ambientLightR: null
	,_ambientLightG: null
	,_ambientLightB: null
	,_compiler: null
	,_methodSetup: null
	,_usingSpecularMethod: null
	,_usesNormals: null
	,_preserveAlpha: null
	,_animateUVs: null
	,_numPointLights: null
	,_numDirectionalLights: null
	,_numLightProbes: null
	,_enableLightFallOff: null
	,_forceSeparateMVP: null
	,get_enableLightFallOff: function() {
		return this._enableLightFallOff;
	}
	,set_enableLightFallOff: function(value) {
		if(value != this._enableLightFallOff) this.invalidateShaderProgram(true);
		this._enableLightFallOff = value;
		return value;
	}
	,get_forceSeparateMVP: function() {
		return this._forceSeparateMVP;
	}
	,set_forceSeparateMVP: function(value) {
		this._forceSeparateMVP = value;
		return value;
	}
	,get_numPointLights: function() {
		return this._numPointLights;
	}
	,get_numDirectionalLights: function() {
		return this._numDirectionalLights;
	}
	,get_numLightProbes: function() {
		return this._numLightProbes;
	}
	,updateProgram: function(stage3DProxy) {
		this.reset(stage3DProxy.get_profile());
		away3d.materials.passes.MaterialPassBase.prototype.updateProgram.call(this,stage3DProxy);
	}
	,reset: function(profile) {
		this.initCompiler(profile);
		this.updateShaderProperties();
		this.initConstantData();
		this.cleanUp();
	}
	,updateUsedOffsets: function() {
		this._numUsedVertexConstants = this._compiler.get_numUsedVertexConstants();
		this._numUsedFragmentConstants = this._compiler.get_numUsedFragmentConstants();
		this._numUsedStreams = this._compiler.get_numUsedStreams();
		this._numUsedTextures = this._compiler.get_numUsedTextures();
		this._numUsedVaryings = this._compiler.get_numUsedVaryings();
		this._numUsedFragmentConstants = this._compiler.get_numUsedFragmentConstants();
	}
	,initConstantData: function() {
		away3d.utils.ArrayUtils.reSize(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB(this._vertexConstantData),this._numUsedVertexConstants * 4,0);
		away3d.utils.ArrayUtils.reSize(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB(this._fragmentConstantData),this._numUsedFragmentConstants * 4,0);
		this.initCommonsData();
		if(this._uvTransformIndex >= 0) this.initUVTransformData();
		if(this._cameraPositionIndex >= 0) {
			var this1 = this._vertexConstantData;
			var key = this._cameraPositionIndex + 3;
			if(!this1.fixed) {
				if(key >= this1.length) this1.length = key + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[key] = 1;
		}
		this.updateMethodConstants();
	}
	,initCompiler: function(profile) {
		this._compiler = this.createCompiler(profile);
		this._compiler.set_forceSeperateMVP(this._forceSeparateMVP);
		this._compiler.set_numPointLights(this._numPointLights);
		this._compiler.set_numDirectionalLights(this._numDirectionalLights);
		this._compiler.set_numLightProbes(this._numLightProbes);
		this._compiler.set_methodSetup(this._methodSetup);
		this._compiler.set_diffuseLightSources(this._diffuseLightSources);
		this._compiler.set_specularLightSources(this._specularLightSources);
		this._compiler.setTextureSampling(this._smooth,this._repeat,this._mipmap,this._anisotropy);
		this._compiler.setConstantDataBuffers(this._vertexConstantData,this._fragmentConstantData);
		this._compiler.set_animateUVs(this._animateUVs);
		this._compiler.set_alphaPremultiplied(this._alphaPremultiplied && this._enableBlending);
		this._compiler.set_preserveAlpha(this._preserveAlpha && this._enableBlending);
		this._compiler.set_enableLightFallOff(this._enableLightFallOff);
		this._compiler.compile();
	}
	,createCompiler: function(profile) {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,updateShaderProperties: function() {
		this._animatableAttributes = this._compiler.get_animatableAttributes();
		this._animationTargetRegisters = this._compiler.get_animationTargetRegisters();
		this._vertexCode = this._compiler.get_vertexCode();
		this._fragmentLightCode = this._compiler.get_fragmentLightCode();
		this._framentPostLightCode = this._compiler.get_fragmentPostLightCode();
		this._shadedTarget = this._compiler.get_shadedTarget();
		this._usingSpecularMethod = this._compiler.get_usingSpecularMethod();
		this._usesNormals = this._compiler.get_usesNormals();
		this._needUVAnimation = this._compiler.get_needUVAnimation();
		this._UVSource = this._compiler.get_UVSource();
		this._UVTarget = this._compiler.get_UVTarget();
		this.updateRegisterIndices();
		this.updateUsedOffsets();
	}
	,updateRegisterIndices: function() {
		this._uvBufferIndex = this._compiler.get_uvBufferIndex();
		this._uvTransformIndex = this._compiler.get_uvTransformIndex();
		this._secondaryUVBufferIndex = this._compiler.get_secondaryUVBufferIndex();
		this._normalBufferIndex = this._compiler.get_normalBufferIndex();
		this._tangentBufferIndex = this._compiler.get_tangentBufferIndex();
		this._lightFragmentConstantIndex = this._compiler.get_lightFragmentConstantIndex();
		this._cameraPositionIndex = this._compiler.get_cameraPositionIndex();
		this._commonsDataIndex = this._compiler.get_commonsDataIndex();
		this._sceneMatrixIndex = this._compiler.get_sceneMatrixIndex();
		this._sceneNormalMatrixIndex = this._compiler.get_sceneNormalMatrixIndex();
		this._probeWeightsIndex = this._compiler.get_probeWeightsIndex();
		this._lightProbeDiffuseIndices = this._compiler.get_lightProbeDiffuseIndices();
		this._lightProbeSpecularIndices = this._compiler.get_lightProbeSpecularIndices();
	}
	,get_preserveAlpha: function() {
		return this._preserveAlpha;
	}
	,set_preserveAlpha: function(value) {
		if(this._preserveAlpha == value) return value;
		this._preserveAlpha = value;
		this.invalidateShaderProgram();
		return value;
	}
	,get_animateUVs: function() {
		return this._animateUVs;
	}
	,set_animateUVs: function(value) {
		if(this._animateUVs == value) return value;
		this._animateUVs = value;
		this.invalidateShaderProgram();
		return value;
	}
	,set_mipmap: function(value) {
		if(this._mipmap == value) return value;
		away3d.materials.passes.MaterialPassBase.prototype.set_mipmap.call(this,value);
		return value;
	}
	,set_anisotropy: function(value) {
		if(this._anisotropy == value) return value;
		away3d.materials.passes.MaterialPassBase.prototype.set_anisotropy.call(this,value);
		return value;
	}
	,get_normalMap: function() {
		return this._methodSetup._normalMethod.get_normalMap();
	}
	,set_normalMap: function(value) {
		this._methodSetup._normalMethod.set_normalMap(value);
		return value;
	}
	,get_normalMethod: function() {
		return this._methodSetup.get_normalMethod();
	}
	,set_normalMethod: function(value) {
		this._methodSetup.set_normalMethod(value);
		return value;
	}
	,get_ambientMethod: function() {
		return this._methodSetup.get_ambientMethod();
	}
	,set_ambientMethod: function(value) {
		this._methodSetup.set_ambientMethod(value);
		return value;
	}
	,get_shadowMethod: function() {
		return this._methodSetup.get_shadowMethod();
	}
	,set_shadowMethod: function(value) {
		this._methodSetup.set_shadowMethod(value);
		return value;
	}
	,get_diffuseMethod: function() {
		return this._methodSetup.get_diffuseMethod();
	}
	,set_diffuseMethod: function(value) {
		this._methodSetup.set_diffuseMethod(value);
		return value;
	}
	,get_specularMethod: function() {
		return this._methodSetup.get_specularMethod();
	}
	,set_specularMethod: function(value) {
		this._methodSetup.set_specularMethod(value);
		return value;
	}
	,init: function() {
		this._methodSetup = new away3d.materials.methods.ShaderMethodSetup();
		this._methodSetup.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
	}
	,dispose: function() {
		away3d.materials.passes.MaterialPassBase.prototype.dispose.call(this);
		this._methodSetup.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		this._methodSetup.dispose();
		this._methodSetup = null;
	}
	,invalidateShaderProgram: function(updateMaterial) {
		if(updateMaterial == null) updateMaterial = true;
		var oldPasses = this._passes;
		this._passes = new Array();
		if(this._methodSetup != null) this.addPassesFromMethods();
		if(oldPasses == null || this._passes.length != oldPasses.length) {
			this._passesDirty = true;
			return;
		}
		var i = 0;
		while(i < this._passes.length) {
			if(this._passes[i] != oldPasses[i]) {
				this._passesDirty = true;
				return;
			}
			++i;
		}
		away3d.materials.passes.MaterialPassBase.prototype.invalidateShaderProgram.call(this,updateMaterial);
	}
	,addPassesFromMethods: function() {
		if(this._methodSetup._normalMethod != null && this._methodSetup._normalMethod.get_hasOutput()) this.addPasses(this._methodSetup._normalMethod.get_passes());
		if(this._methodSetup._ambientMethod != null) this.addPasses(this._methodSetup._ambientMethod.get_passes());
		if(this._methodSetup._shadowMethod != null) this.addPasses(this._methodSetup._shadowMethod.get_passes());
		if(this._methodSetup._diffuseMethod != null) this.addPasses(this._methodSetup._diffuseMethod.get_passes());
		if(this._methodSetup._specularMethod != null) this.addPasses(this._methodSetup._specularMethod.get_passes());
	}
	,addPasses: function(passes) {
		if(passes == null) return;
		var len = passes.length;
		var i = 0;
		while(i < len) {
			passes[i].set_material(this.get_material());
			passes[i].set_lightPicker(this._lightPicker);
			this._passes.push(passes[i]);
			++i;
		}
	}
	,initUVTransformData: function() {
		var this1 = this._vertexConstantData;
		var key = this._uvTransformIndex;
		if(!this1.fixed) {
			if(key >= this1.length) this1.length = key + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[key] = 1;
		var this3 = this._vertexConstantData;
		var key1 = this._uvTransformIndex + 1;
		if(!this3.fixed) {
			if(key1 >= this3.length) this3.length = key1 + 1;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[key1] = 0;
		var this5 = this._vertexConstantData;
		var key2 = this._uvTransformIndex + 2;
		if(!this5.fixed) {
			if(key2 >= this5.length) this5.length = key2 + 1;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[key2] = 0;
		var this7 = this._vertexConstantData;
		var key3 = this._uvTransformIndex + 3;
		if(!this7.fixed) {
			if(key3 >= this7.length) this7.length = key3 + 1;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[key3] = 0;
		var this9 = this._vertexConstantData;
		var key4 = this._uvTransformIndex + 4;
		if(!this9.fixed) {
			if(key4 >= this9.length) this9.length = key4 + 1;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[key4] = 0;
		var this11 = this._vertexConstantData;
		var key5 = this._uvTransformIndex + 5;
		if(!this11.fixed) {
			if(key5 >= this11.length) this11.length = key5 + 1;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[key5] = 1;
		var this13 = this._vertexConstantData;
		var key6 = this._uvTransformIndex + 6;
		if(!this13.fixed) {
			if(key6 >= this13.length) this13.length = key6 + 1;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[key6] = 0;
		var this15 = this._vertexConstantData;
		var key7 = this._uvTransformIndex + 7;
		if(!this15.fixed) {
			if(key7 >= this15.length) this15.length = key7 + 1;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[key7] = 0;
	}
	,initCommonsData: function() {
		var this1 = this._fragmentConstantData;
		var key = this._commonsDataIndex;
		if(!this1.fixed) {
			if(key >= this1.length) this1.length = key + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[key] = .5;
		var this3 = this._fragmentConstantData;
		var key1 = this._commonsDataIndex + 1;
		if(!this3.fixed) {
			if(key1 >= this3.length) this3.length = key1 + 1;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[key1] = 0;
		var this5 = this._fragmentConstantData;
		var key2 = this._commonsDataIndex + 2;
		if(!this5.fixed) {
			if(key2 >= this5.length) this5.length = key2 + 1;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[key2] = 0.00392156862745098;
		var this7 = this._fragmentConstantData;
		var key3 = this._commonsDataIndex + 3;
		if(!this7.fixed) {
			if(key3 >= this7.length) this7.length = key3 + 1;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[key3] = 1;
	}
	,cleanUp: function() {
		this._compiler.dispose();
		this._compiler = null;
	}
	,updateMethodConstants: function() {
		if(this._methodSetup._normalMethod != null) this._methodSetup._normalMethod.initConstants(this._methodSetup._normalMethodVO);
		if(this._methodSetup._diffuseMethod != null) this._methodSetup._diffuseMethod.initConstants(this._methodSetup._diffuseMethodVO);
		if(this._methodSetup._ambientMethod != null) this._methodSetup._ambientMethod.initConstants(this._methodSetup._ambientMethodVO);
		if(this._usingSpecularMethod) this._methodSetup._specularMethod.initConstants(this._methodSetup._specularMethodVO);
		if(this._methodSetup._shadowMethod != null) this._methodSetup._shadowMethod.initConstants(this._methodSetup._shadowMethodVO);
	}
	,updateLightConstants: function() {
	}
	,updateProbes: function(stage3DProxy) {
	}
	,onShaderInvalidated: function(event) {
		this.invalidateShaderProgram();
	}
	,getVertexCode: function() {
		return this._vertexCode;
	}
	,getFragmentCode: function(animatorCode) {
		return this._fragmentLightCode + animatorCode + this._framentPostLightCode;
	}
	,activate: function(stage3DProxy,camera) {
		away3d.materials.passes.MaterialPassBase.prototype.activate.call(this,stage3DProxy,camera);
		if(this._usesNormals) this._methodSetup._normalMethod.activate(this._methodSetup._normalMethodVO,stage3DProxy);
		this._methodSetup._ambientMethod.activate(this._methodSetup._ambientMethodVO,stage3DProxy);
		if(this._methodSetup._shadowMethod != null) this._methodSetup._shadowMethod.activate(this._methodSetup._shadowMethodVO,stage3DProxy);
		this._methodSetup._diffuseMethod.activate(this._methodSetup._diffuseMethodVO,stage3DProxy);
		if(this._usingSpecularMethod) this._methodSetup._specularMethod.activate(this._methodSetup._specularMethodVO,stage3DProxy);
	}
	,render: function(renderable,stage3DProxy,camera,viewProjection) {
		var i = 0;
		var context = stage3DProxy._context3D;
		if(this._uvBufferIndex >= 0) renderable.activateUVBuffer(this._uvBufferIndex,stage3DProxy);
		if(this._secondaryUVBufferIndex >= 0) renderable.activateSecondaryUVBuffer(this._secondaryUVBufferIndex,stage3DProxy);
		if(this._normalBufferIndex >= 0) renderable.activateVertexNormalBuffer(this._normalBufferIndex,stage3DProxy);
		if(this._tangentBufferIndex >= 0) renderable.activateVertexTangentBuffer(this._tangentBufferIndex,stage3DProxy);
		if(this._animateUVs) {
			var uvTransform = renderable.get_uvTransform();
			if(uvTransform != null) {
				var this1 = this._vertexConstantData;
				var key = this._uvTransformIndex;
				if(!this1.fixed) {
					if(key >= this1.length) this1.length = key + 1;
					if(this1.data.length < this1.length) {
						var data;
						var this2;
						this2 = new Array(this1.data.length + 10);
						data = this2;
						haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
						this1.data = data;
					}
				}
				this1.data[key] = uvTransform.a;
				var this3 = this._vertexConstantData;
				var key1 = this._uvTransformIndex + 1;
				if(!this3.fixed) {
					if(key1 >= this3.length) this3.length = key1 + 1;
					if(this3.data.length < this3.length) {
						var data1;
						var this4;
						this4 = new Array(this3.data.length + 10);
						data1 = this4;
						haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
						this3.data = data1;
					}
				}
				this3.data[key1] = uvTransform.b;
				var this5 = this._vertexConstantData;
				var key2 = this._uvTransformIndex + 3;
				if(!this5.fixed) {
					if(key2 >= this5.length) this5.length = key2 + 1;
					if(this5.data.length < this5.length) {
						var data2;
						var this6;
						this6 = new Array(this5.data.length + 10);
						data2 = this6;
						haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
						this5.data = data2;
					}
				}
				this5.data[key2] = uvTransform.tx;
				var this7 = this._vertexConstantData;
				var key3 = this._uvTransformIndex + 4;
				if(!this7.fixed) {
					if(key3 >= this7.length) this7.length = key3 + 1;
					if(this7.data.length < this7.length) {
						var data3;
						var this8;
						this8 = new Array(this7.data.length + 10);
						data3 = this8;
						haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
						this7.data = data3;
					}
				}
				this7.data[key3] = uvTransform.c;
				var this9 = this._vertexConstantData;
				var key4 = this._uvTransformIndex + 5;
				if(!this9.fixed) {
					if(key4 >= this9.length) this9.length = key4 + 1;
					if(this9.data.length < this9.length) {
						var data4;
						var this10;
						this10 = new Array(this9.data.length + 10);
						data4 = this10;
						haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
						this9.data = data4;
					}
				}
				this9.data[key4] = uvTransform.d;
				var this11 = this._vertexConstantData;
				var key5 = this._uvTransformIndex + 7;
				if(!this11.fixed) {
					if(key5 >= this11.length) this11.length = key5 + 1;
					if(this11.data.length < this11.length) {
						var data5;
						var this12;
						this12 = new Array(this11.data.length + 10);
						data5 = this12;
						haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
						this11.data = data5;
					}
				}
				this11.data[key5] = uvTransform.ty;
			} else {
				var this13 = this._vertexConstantData;
				var key6 = this._uvTransformIndex;
				if(!this13.fixed) {
					if(key6 >= this13.length) this13.length = key6 + 1;
					if(this13.data.length < this13.length) {
						var data6;
						var this14;
						this14 = new Array(this13.data.length + 10);
						data6 = this14;
						haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
						this13.data = data6;
					}
				}
				this13.data[key6] = 1;
				var this15 = this._vertexConstantData;
				var key7 = this._uvTransformIndex + 1;
				if(!this15.fixed) {
					if(key7 >= this15.length) this15.length = key7 + 1;
					if(this15.data.length < this15.length) {
						var data7;
						var this16;
						this16 = new Array(this15.data.length + 10);
						data7 = this16;
						haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
						this15.data = data7;
					}
				}
				this15.data[key7] = 0;
				var this17 = this._vertexConstantData;
				var key8 = this._uvTransformIndex + 3;
				if(!this17.fixed) {
					if(key8 >= this17.length) this17.length = key8 + 1;
					if(this17.data.length < this17.length) {
						var data8;
						var this18;
						this18 = new Array(this17.data.length + 10);
						data8 = this18;
						haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
						this17.data = data8;
					}
				}
				this17.data[key8] = 0;
				var this19 = this._vertexConstantData;
				var key9 = this._uvTransformIndex + 4;
				if(!this19.fixed) {
					if(key9 >= this19.length) this19.length = key9 + 1;
					if(this19.data.length < this19.length) {
						var data9;
						var this20;
						this20 = new Array(this19.data.length + 10);
						data9 = this20;
						haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
						this19.data = data9;
					}
				}
				this19.data[key9] = 0;
				var this21 = this._vertexConstantData;
				var key10 = this._uvTransformIndex + 5;
				if(!this21.fixed) {
					if(key10 >= this21.length) this21.length = key10 + 1;
					if(this21.data.length < this21.length) {
						var data10;
						var this22;
						this22 = new Array(this21.data.length + 10);
						data10 = this22;
						haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
						this21.data = data10;
					}
				}
				this21.data[key10] = 1;
				var this23 = this._vertexConstantData;
				var key11 = this._uvTransformIndex + 7;
				if(!this23.fixed) {
					if(key11 >= this23.length) this23.length = key11 + 1;
					if(this23.data.length < this23.length) {
						var data11;
						var this24;
						this24 = new Array(this23.data.length + 10);
						data11 = this24;
						haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
						this23.data = data11;
					}
				}
				this23.data[key11] = 0;
			}
		}
		this._ambientLightR = this._ambientLightG = this._ambientLightB = 0;
		if(this.usesLights()) this.updateLightConstants();
		if(this.usesProbes()) this.updateProbes(stage3DProxy);
		if(this._sceneMatrixIndex >= 0) {
			renderable.getRenderSceneTransform(camera).copyRawDataTo(this._vertexConstantData,this._sceneMatrixIndex,true);
			viewProjection.copyRawDataTo(this._vertexConstantData,0,true);
		} else {
			var matrix3D = away3d.core.math.Matrix3DUtils.get_CALCULATION_MATRIX();
			matrix3D.copyFrom(renderable.getRenderSceneTransform(camera));
			matrix3D.append(viewProjection);
			matrix3D.copyRawDataTo(this._vertexConstantData,0,true);
		}
		if(this._sceneNormalMatrixIndex >= 0) renderable.get_inverseSceneTransform().copyRawDataTo(this._vertexConstantData,this._sceneNormalMatrixIndex,false);
		if(this._usesNormals) this._methodSetup._normalMethod.setRenderState(this._methodSetup._normalMethodVO,renderable,stage3DProxy,camera);
		var ambientMethod = this._methodSetup._ambientMethod;
		ambientMethod._lightAmbientR = this._ambientLightR;
		ambientMethod._lightAmbientG = this._ambientLightG;
		ambientMethod._lightAmbientB = this._ambientLightB;
		ambientMethod.setRenderState(this._methodSetup._ambientMethodVO,renderable,stage3DProxy,camera);
		if(this._methodSetup._shadowMethod != null) this._methodSetup._shadowMethod.setRenderState(this._methodSetup._shadowMethodVO,renderable,stage3DProxy,camera);
		this._methodSetup._diffuseMethod.setRenderState(this._methodSetup._diffuseMethodVO,renderable,stage3DProxy,camera);
		if(this._usingSpecularMethod) this._methodSetup._specularMethod.setRenderState(this._methodSetup._specularMethodVO,renderable,stage3DProxy,camera);
		if(this._methodSetup._colorTransformMethod != null) this._methodSetup._colorTransformMethod.setRenderState(this._methodSetup._colorTransformMethodVO,renderable,stage3DProxy,camera);
		var methods = this._methodSetup._methods;
		var len = methods.length;
		i = 0;
		while(i < len) {
			var set = methods[i];
			set.method.setRenderState(set.data,renderable,stage3DProxy,camera);
			++i;
		}
		context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.VERTEX,0,(function($this) {
			var $r;
			var this25 = $this._vertexConstantData;
			var value = new Array();
			{
				var _g1 = 0;
				var _g = this25.data.length;
				while(_g1 < _g) {
					var i1 = _g1++;
					value.push(this25.data[i1]);
				}
			}
			$r = value;
			return $r;
		}(this)),this._numUsedVertexConstants);
		context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.FRAGMENT,0,(function($this) {
			var $r;
			var this26 = $this._fragmentConstantData;
			var value1 = new Array();
			{
				var _g11 = 0;
				var _g2 = this26.data.length;
				while(_g11 < _g2) {
					var i2 = _g11++;
					value1.push(this26.data[i2]);
				}
			}
			$r = value1;
			return $r;
		}(this)),this._numUsedFragmentConstants);
		renderable.activateVertexBuffer(0,stage3DProxy);
		context.drawTriangles(renderable.getIndexBuffer(stage3DProxy),0,renderable.get_numTriangles());
	}
	,usesProbes: function() {
		return this._numLightProbes > 0 && ((this._diffuseLightSources | this._specularLightSources) & away3d.materials.LightSources.PROBES) != 0;
	}
	,usesLights: function() {
		return (this._numPointLights > 0 || this._numDirectionalLights > 0) && ((this._diffuseLightSources | this._specularLightSources) & away3d.materials.LightSources.LIGHTS) != 0;
	}
	,deactivate: function(stage3DProxy) {
		away3d.materials.passes.MaterialPassBase.prototype.deactivate.call(this,stage3DProxy);
		if(this._usesNormals) this._methodSetup._normalMethod.deactivate(this._methodSetup._normalMethodVO,stage3DProxy);
		this._methodSetup._ambientMethod.deactivate(this._methodSetup._ambientMethodVO,stage3DProxy);
		if(this._methodSetup._shadowMethod != null) this._methodSetup._shadowMethod.deactivate(this._methodSetup._shadowMethodVO,stage3DProxy);
		this._methodSetup._diffuseMethod.deactivate(this._methodSetup._diffuseMethodVO,stage3DProxy);
		if(this._usingSpecularMethod) this._methodSetup._specularMethod.deactivate(this._methodSetup._specularMethodVO,stage3DProxy);
	}
	,get_specularLightSources: function() {
		return this._specularLightSources;
	}
	,set_specularLightSources: function(value) {
		this._specularLightSources = value;
		return value;
	}
	,get_diffuseLightSources: function() {
		return this._diffuseLightSources;
	}
	,set_diffuseLightSources: function(value) {
		this._diffuseLightSources = value;
		return value;
	}
	,__class__: away3d.materials.passes.CompiledPass
	,__properties__: $extend(away3d.materials.passes.MaterialPassBase.prototype.__properties__,{set_diffuseLightSources:"set_diffuseLightSources",get_diffuseLightSources:"get_diffuseLightSources",set_specularLightSources:"set_specularLightSources",get_specularLightSources:"get_specularLightSources",set_specularMethod:"set_specularMethod",get_specularMethod:"get_specularMethod",set_diffuseMethod:"set_diffuseMethod",get_diffuseMethod:"get_diffuseMethod",set_shadowMethod:"set_shadowMethod",get_shadowMethod:"get_shadowMethod",set_ambientMethod:"set_ambientMethod",get_ambientMethod:"get_ambientMethod",set_normalMethod:"set_normalMethod",get_normalMethod:"get_normalMethod",set_normalMap:"set_normalMap",get_normalMap:"get_normalMap",set_animateUVs:"set_animateUVs",get_animateUVs:"get_animateUVs",set_preserveAlpha:"set_preserveAlpha",get_preserveAlpha:"get_preserveAlpha",get_numLightProbes:"get_numLightProbes",get_numDirectionalLights:"get_numDirectionalLights",get_numPointLights:"get_numPointLights",set_forceSeparateMVP:"set_forceSeparateMVP",get_forceSeparateMVP:"get_forceSeparateMVP",set_enableLightFallOff:"set_enableLightFallOff",get_enableLightFallOff:"get_enableLightFallOff"})
});
away3d.materials.passes.DepthMapPass = function() {
	this._alphaThreshold = 0;
	away3d.materials.passes.MaterialPassBase.call(this);
	var value = [1.0,255.0,65025.0,16581375.0,0.00392156862745098,0.00392156862745098,0.00392156862745098,0.0,0.0,0.0,0.0,0.0];
	var vectorData = new openfl.VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(value.length);
	vec = this1;
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = value[i];
	}
	vectorData.data = vec;
	this._data = vectorData;
};
$hxClasses["away3d.materials.passes.DepthMapPass"] = away3d.materials.passes.DepthMapPass;
away3d.materials.passes.DepthMapPass.__name__ = ["away3d","materials","passes","DepthMapPass"];
away3d.materials.passes.DepthMapPass.__super__ = away3d.materials.passes.MaterialPassBase;
away3d.materials.passes.DepthMapPass.prototype = $extend(away3d.materials.passes.MaterialPassBase.prototype,{
	_data: null
	,_alphaThreshold: null
	,_alphaMask: null
	,get_alphaThreshold: function() {
		return this._alphaThreshold;
	}
	,set_alphaThreshold: function(value) {
		if(value < 0) value = 0; else if(value > 1) value = 1;
		if(value == this._alphaThreshold) return value;
		if(value == 0 || this._alphaThreshold == 0) this.invalidateShaderProgram();
		this._alphaThreshold = value;
		var this1 = this._data;
		if(!this1.fixed) {
			if(8 >= this1.length) this1.length = 9;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[8] = this._alphaThreshold;
		return value;
	}
	,get_alphaMask: function() {
		return this._alphaMask;
	}
	,set_alphaMask: function(value) {
		this._alphaMask = value;
		return value;
	}
	,getVertexCode: function() {
		var code;
		code = "m44 vt1, vt0, vc0\t\t\n" + "mov op, vt1\t\n";
		if(this._alphaThreshold > 0) {
			this._numUsedTextures = 1;
			this._numUsedStreams = 2;
			code += "mov v0, vt1\n" + "mov v1, va1\n";
		} else {
			this._numUsedTextures = 0;
			this._numUsedStreams = 1;
			code += "mov v0, vt1\n";
		}
		return code;
	}
	,getFragmentCode: function(code) {
		var wrap;
		if(this._repeat) wrap = "wrap"; else wrap = "clamp";
		var filter;
		if(this._smooth) if(this._mipmap) filter = "linear,miplinear"; else filter = "linear"; else if(this._mipmap) filter = "nearest,mipnearest"; else filter = "nearest";
		var codeF = "div ft2, v0, v0.w\t\t\n" + "mul ft0, fc0, ft2.z\t\n" + "frc ft0, ft0\t\t\t\n" + "mul ft1, ft0.yzww, fc1\t\n";
		if(this._alphaThreshold > 0) {
			var format;
			var _g = this._alphaMask.get_format();
			switch(_g[1]) {
			case 1:
				format = "dxt1,";
				break;
			case 2:
				format = "dxt5,";
				break;
			default:
				format = "";
			}
			codeF += "tex ft3, v1, fs0 <2d," + filter + "," + format + wrap + ">\n" + "sub ft3.w, ft3.w, fc2.x\n" + "kil ft3.w\n";
		}
		codeF += "sub oc, ft0, ft1\t\t\n";
		return codeF;
	}
	,render: function(renderable,stage3DProxy,camera,viewProjection) {
		if(this._alphaThreshold > 0) renderable.activateUVBuffer(1,stage3DProxy);
		var context = stage3DProxy._context3D;
		var matrix = away3d.core.math.Matrix3DUtils.get_CALCULATION_MATRIX();
		matrix.copyFrom(renderable.getRenderSceneTransform(camera));
		matrix.append(viewProjection);
		context.setProgramConstantsFromMatrix(openfl.display3D.Context3DProgramType.VERTEX,0,matrix,true);
		renderable.activateVertexBuffer(0,stage3DProxy);
		context.drawTriangles(renderable.getIndexBuffer(stage3DProxy),0,renderable.get_numTriangles());
	}
	,activate: function(stage3DProxy,camera) {
		var context = stage3DProxy._context3D;
		away3d.materials.passes.MaterialPassBase.prototype.activate.call(this,stage3DProxy,camera);
		if(this._alphaThreshold > 0) {
			context.setTextureAt(0,this._alphaMask.getTextureForStage3D(stage3DProxy));
			context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.FRAGMENT,0,(function($this) {
				var $r;
				var this1 = $this._data;
				var value = new Array();
				{
					var _g1 = 0;
					var _g = this1.data.length;
					while(_g1 < _g) {
						var i = _g1++;
						value.push(this1.data[i]);
					}
				}
				$r = value;
				return $r;
			}(this)),3);
		} else context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.FRAGMENT,0,(function($this) {
			var $r;
			var this2 = $this._data;
			var value1 = new Array();
			{
				var _g11 = 0;
				var _g2 = this2.data.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					value1.push(this2.data[i1]);
				}
			}
			$r = value1;
			return $r;
		}(this)),2);
	}
	,__class__: away3d.materials.passes.DepthMapPass
	,__properties__: $extend(away3d.materials.passes.MaterialPassBase.prototype.__properties__,{set_alphaMask:"set_alphaMask",get_alphaMask:"get_alphaMask",set_alphaThreshold:"set_alphaThreshold",get_alphaThreshold:"get_alphaThreshold"})
});
away3d.materials.passes.DistanceMapPass = function() {
	away3d.materials.passes.MaterialPassBase.call(this);
	var value = [1.0,255.0,65025.0,16581375.0,0.00392156862745098,0.00392156862745098,0.00392156862745098,0.0,0.0,0.0,0.0,0.0];
	var vectorData = new openfl.VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(value.length);
	vec = this1;
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = value[i];
	}
	vectorData.data = vec;
	this._fragmentData = vectorData;
	var value1 = [0.0,0.0,0.0,1.0];
	var vectorData1 = new openfl.VectorData();
	vectorData1.length = value1.length;
	vectorData1.fixed = true;
	var vec1;
	var this2;
	this2 = new Array(value1.length);
	vec1 = this2;
	var _g11 = 0;
	var _g2 = value1.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		vec1[i1] = value1[i1];
	}
	vectorData1.data = vec1;
	this._vertexData = vectorData1;
	this._numUsedVertexConstants = 9;
};
$hxClasses["away3d.materials.passes.DistanceMapPass"] = away3d.materials.passes.DistanceMapPass;
away3d.materials.passes.DistanceMapPass.__name__ = ["away3d","materials","passes","DistanceMapPass"];
away3d.materials.passes.DistanceMapPass.__super__ = away3d.materials.passes.MaterialPassBase;
away3d.materials.passes.DistanceMapPass.prototype = $extend(away3d.materials.passes.MaterialPassBase.prototype,{
	_fragmentData: null
	,_vertexData: null
	,_alphaThreshold: null
	,_alphaMask: null
	,get_alphaThreshold: function() {
		return this._alphaThreshold;
	}
	,set_alphaThreshold: function(value) {
		if(value < 0) value = 0; else if(value > 1) value = 1;
		if(value == this._alphaThreshold) return value;
		if(value == 0 || this._alphaThreshold == 0) this.invalidateShaderProgram();
		this._alphaThreshold = value;
		var this1 = this._fragmentData;
		if(!this1.fixed) {
			if(8 >= this1.length) this1.length = 9;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[8] = this._alphaThreshold;
		return value;
	}
	,get_alphaMask: function() {
		return this._alphaMask;
	}
	,set_alphaMask: function(value) {
		this._alphaMask = value;
		return value;
	}
	,getVertexCode: function() {
		var code;
		code = "m44 op, vt0, vc0\t\t\n" + "m44 vt1, vt0, vc5\t\t\n" + "sub v0, vt1, vc9\t\t\n";
		if(this._alphaThreshold > 0) {
			code += "mov v1, va1\n";
			this._numUsedTextures = 1;
			this._numUsedStreams = 2;
		} else {
			this._numUsedTextures = 0;
			this._numUsedStreams = 1;
		}
		return code;
	}
	,getFragmentCode: function(animationCode) {
		var code;
		var wrap;
		if(this._repeat) wrap = "wrap"; else wrap = "clamp";
		var filter;
		if(this._smooth) if(this._mipmap) filter = "linear,miplinear"; else filter = "linear"; else if(this._mipmap) filter = "nearest,mipnearest"; else filter = "nearest";
		code = "dp3 ft2.z, v0.xyz, v0.xyz\t\n" + "mul ft0, fc0, ft2.z\t\n" + "frc ft0, ft0\t\t\t\n" + "mul ft1, ft0.yzww, fc1\t\n";
		if(this._alphaThreshold > 0) {
			var format;
			var _sw1_ = this._alphaMask.get_format();
			switch(_sw1_[1]) {
			case 1:
				format = "dxt1,";
				break;
			case 2:
				format = "dxt5,";
				break;
			default:
				format = "";
			}
			code += "tex ft3, v1, fs0 <2d," + filter + "," + format + wrap + ">\n" + "sub ft3.w, ft3.w, fc2.x\n" + "kil ft3.w\n";
		}
		code += "sub oc, ft0, ft1\t\t\n";
		return code;
	}
	,render: function(renderable,stage3DProxy,camera,viewProjection) {
		var context = stage3DProxy._context3D;
		var pos = camera.get_scenePosition();
		var this1 = this._vertexData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = pos.x;
		var this3 = this._vertexData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = pos.y;
		var this5 = this._vertexData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = pos.z;
		var this7 = this._vertexData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = 1;
		var sceneTransform = renderable.getRenderSceneTransform(camera);
		context.setProgramConstantsFromMatrix(openfl.display3D.Context3DProgramType.VERTEX,5,sceneTransform,true);
		context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.VERTEX,9,(function($this) {
			var $r;
			var this9 = $this._vertexData;
			var value = new Array();
			{
				var _g1 = 0;
				var _g = this9.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value.push(this9.data[i]);
				}
			}
			$r = value;
			return $r;
		}(this)),1);
		if(this._alphaThreshold > 0) renderable.activateUVBuffer(1,stage3DProxy);
		var matrix = away3d.core.math.Matrix3DUtils.get_CALCULATION_MATRIX();
		matrix.copyFrom(sceneTransform);
		matrix.append(viewProjection);
		context.setProgramConstantsFromMatrix(openfl.display3D.Context3DProgramType.VERTEX,0,matrix,true);
		renderable.activateVertexBuffer(0,stage3DProxy);
		context.drawTriangles(renderable.getIndexBuffer(stage3DProxy),0,renderable.get_numTriangles());
	}
	,activate: function(stage3DProxy,camera) {
		var context = stage3DProxy._context3D;
		away3d.materials.passes.MaterialPassBase.prototype.activate.call(this,stage3DProxy,camera);
		var f = camera.get_lens().get_far();
		f = 1 / (2 * f * f);
		var this1 = this._fragmentData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = f;
		var this3 = this._fragmentData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = 255.0 * f;
		var this5 = this._fragmentData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = 65025.0 * f;
		var this7 = this._fragmentData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = 16581375.0 * f;
		if(this._alphaThreshold > 0) {
			context.setTextureAt(0,this._alphaMask.getTextureForStage3D(stage3DProxy));
			context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.FRAGMENT,0,(function($this) {
				var $r;
				var this9 = $this._fragmentData;
				var value = new Array();
				{
					var _g1 = 0;
					var _g = this9.data.length;
					while(_g1 < _g) {
						var i = _g1++;
						value.push(this9.data[i]);
					}
				}
				$r = value;
				return $r;
			}(this)),3);
		} else context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.FRAGMENT,0,(function($this) {
			var $r;
			var this10 = $this._fragmentData;
			var value1 = new Array();
			{
				var _g11 = 0;
				var _g2 = this10.data.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					value1.push(this10.data[i1]);
				}
			}
			$r = value1;
			return $r;
		}(this)),2);
	}
	,__class__: away3d.materials.passes.DistanceMapPass
	,__properties__: $extend(away3d.materials.passes.MaterialPassBase.prototype.__properties__,{set_alphaMask:"set_alphaMask",get_alphaMask:"get_alphaMask",set_alphaThreshold:"set_alphaThreshold",get_alphaThreshold:"get_alphaThreshold"})
});
away3d.materials.passes.SegmentPass = function(thickness) {
	this._constants = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(0);
			this1.data = this2;
		}
		this1.length = 0;
		this1.fixed = false;
		$r = this1;
		return $r;
	}(this))),4,0);
	this._calcMatrix = new openfl.geom.Matrix3D();
	this._thickness = thickness;
	var this3 = this._constants;
	if(!this3.fixed) {
		if(1 >= this3.length) this3.length = 2;
		if(this3.data.length < this3.length) {
			var data;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data = this4;
			haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
			this3.data = data;
		}
	}
	this3.data[1] = 0.00392156862745098;
	away3d.materials.passes.MaterialPassBase.call(this);
};
$hxClasses["away3d.materials.passes.SegmentPass"] = away3d.materials.passes.SegmentPass;
away3d.materials.passes.SegmentPass.__name__ = ["away3d","materials","passes","SegmentPass"];
away3d.materials.passes.SegmentPass.__super__ = away3d.materials.passes.MaterialPassBase;
away3d.materials.passes.SegmentPass.prototype = $extend(away3d.materials.passes.MaterialPassBase.prototype,{
	_constants: null
	,_calcMatrix: null
	,_thickness: null
	,getVertexCode: function() {
		return "m44 vt0, va0, vc8\t\t\t\n" + "m44 vt1, va1, vc8\t\t\t\n" + "sub vt2, vt1, vt0 \t\t\t\n" + "slt vt5.x, vt0.z, vc7.z\t\t\t\n" + "sub vt5.y, vc5.x, vt5.x\t\t\t\n" + "add vt4.x, vt0.z, vc7.z\t\t\t\n" + "sub vt4.y, vt0.z, vt1.z\t\t\t\n" + "seq vt4.z, vt4.y vc6.x\t\t\t\n" + "add vt4.y, vt4.y, vt4.z\t\t\t\n" + "div vt4.z, vt4.x, vt4.y\t\t\t\n" + "mul vt4.xyz, vt4.zzz, vt2.xyz\t\n" + "add vt3.xyz, vt0.xyz, vt4.xyz\t\n" + "mov vt3.w, vc5.x\t\t\t\n" + "mul vt0, vt0, vt5.yyyy\t\t\t\n" + "mul vt3, vt3, vt5.xxxx\t\t\t\n" + "add vt0, vt0, vt3\t\t\t\t\n" + "sub vt2, vt1, vt0 \t\t\t\n" + "nrm vt2.xyz, vt2.xyz\t\t\t\n" + "nrm vt5.xyz, vt0.xyz\t\t\t\n" + "mov vt5.w, vc5.x\t\t\t\t\n" + "crs vt3.xyz, vt2, vt5\t\t\t\n" + "nrm vt3.xyz, vt3.xyz\t\t\t\n" + "mul vt3.xyz, vt3.xyz, va2.xxx\t\n" + "mov vt3.w, vc5.x\t\t\t\n" + "dp3 vt4.x, vt0, vc6\t\t\t\n" + "mul vt4.x, vt4.x, vc7.x\t\t\t\n" + "mul vt3.xyz, vt3.xyz, vt4.xxx\t\n" + "add vt0.xyz, vt0.xyz, vt3.xyz\t\n" + "m44 op, vt0, vc0\t\t\t\n" + "mov v0, va3\t\t\t\t\n";
	}
	,getFragmentCode: function(animationCode) {
		return "mov oc, v0\n";
	}
	,render: function(renderable,stage3DProxy,camera,viewProjection) {
		var context = stage3DProxy._context3D;
		this._calcMatrix.copyFrom(renderable.get_sourceEntity().get_sceneTransform());
		this._calcMatrix.append(camera.get_inverseSceneTransform());
		var subSetCount = (js.Boot.__cast(renderable , away3d.entities.SegmentSet)).get_subSetCount();
		if((js.Boot.__cast(renderable , away3d.entities.SegmentSet)).get_hasData()) {
			var i = 0;
			while(i < subSetCount) {
				renderable.activateVertexBuffer(i,stage3DProxy);
				context.setProgramConstantsFromMatrix(openfl.display3D.Context3DProgramType.VERTEX,8,this._calcMatrix,true);
				context.drawTriangles(renderable.getIndexBuffer(stage3DProxy),0,renderable.get_numTriangles());
				++i;
			}
		}
	}
	,activate: function(stage3DProxy,camera) {
		var context = stage3DProxy._context3D;
		away3d.materials.passes.MaterialPassBase.prototype.activate.call(this,stage3DProxy,camera);
		if(stage3DProxy.get_scissorRect() != null) {
			var this1 = this._constants;
			var value = this._thickness / Math.min(stage3DProxy.get_scissorRect().width,stage3DProxy.get_scissorRect().height);
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = value;
		} else {
			var this3 = this._constants;
			var value1 = this._thickness / Math.min(stage3DProxy.get_width(),stage3DProxy.get_height());
			if(!this3.fixed) {
				if(0 >= this3.length) this3.length = 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[0] = value1;
		}
		var this5 = this._constants;
		var value2 = camera.get_lens().get_near();
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = value2;
		context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.VERTEX,5,(function($this) {
			var $r;
			var this7 = away3d.materials.passes.SegmentPass.ONE_VECTOR;
			var value3 = new Array();
			{
				var _g1 = 0;
				var _g = this7.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value3.push(this7.data[i]);
				}
			}
			$r = value3;
			return $r;
		}(this)));
		context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.VERTEX,6,(function($this) {
			var $r;
			var this8 = away3d.materials.passes.SegmentPass.FRONT_VECTOR;
			var value4 = new Array();
			{
				var _g11 = 0;
				var _g2 = this8.data.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					value4.push(this8.data[i1]);
				}
			}
			$r = value4;
			return $r;
		}(this)));
		context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.VERTEX,7,(function($this) {
			var $r;
			var this9 = $this._constants;
			var value5 = new Array();
			{
				var _g12 = 0;
				var _g3 = this9.data.length;
				while(_g12 < _g3) {
					var i2 = _g12++;
					value5.push(this9.data[i2]);
				}
			}
			$r = value5;
			return $r;
		}(this)));
		context.setProgramConstantsFromMatrix(openfl.display3D.Context3DProgramType.VERTEX,0,camera.get_lens().get_matrix(),true);
	}
	,deactivate: function(stage3DProxy) {
		var context = stage3DProxy._context3D;
		context.setVertexBufferAt(0,null);
		context.setVertexBufferAt(1,null);
		context.setVertexBufferAt(2,null);
		context.setVertexBufferAt(3,null);
	}
	,__class__: away3d.materials.passes.SegmentPass
});
away3d.materials.passes.SuperShaderPass = function(material) {
	this._includeCasters = true;
	away3d.materials.passes.CompiledPass.call(this,material);
	this._needFragmentAnimation = true;
};
$hxClasses["away3d.materials.passes.SuperShaderPass"] = away3d.materials.passes.SuperShaderPass;
away3d.materials.passes.SuperShaderPass.__name__ = ["away3d","materials","passes","SuperShaderPass"];
away3d.materials.passes.SuperShaderPass.__super__ = away3d.materials.passes.CompiledPass;
away3d.materials.passes.SuperShaderPass.prototype = $extend(away3d.materials.passes.CompiledPass.prototype,{
	_includeCasters: null
	,_ignoreLights: null
	,createCompiler: function(profile) {
		return new away3d.materials.compilation.SuperShaderCompiler(profile);
	}
	,get_includeCasters: function() {
		return this._includeCasters;
	}
	,set_includeCasters: function(value) {
		if(this._includeCasters == value) return this._includeCasters;
		this._includeCasters = value;
		this.invalidateShaderProgram();
		return this._includeCasters;
	}
	,get_colorTransform: function() {
		if(this._methodSetup.get_colorTransformMethod() != null) return this._methodSetup._colorTransformMethod.get_colorTransform(); else return null;
	}
	,set_colorTransform: function(value) {
		if(value != null) {
			if(this.get_colorTransformMethod() == null) this.set_colorTransformMethod(new away3d.materials.methods.ColorTransformMethod());
			this._methodSetup._colorTransformMethod.set_colorTransform(value);
		} else if(value == null) {
			if(this._methodSetup._colorTransformMethod != null) this.set_colorTransformMethod(null);
			this.set_colorTransformMethod(this._methodSetup._colorTransformMethod = null);
		}
		return value;
	}
	,get_colorTransformMethod: function() {
		return this._methodSetup.get_colorTransformMethod();
	}
	,set_colorTransformMethod: function(value) {
		this._methodSetup.set_colorTransformMethod(value);
		return value;
	}
	,addMethod: function(method) {
		this._methodSetup.addMethod(method);
	}
	,numMethods: null
	,get_numMethods: function() {
		return this._methodSetup.get_numMethods();
	}
	,hasMethod: function(method) {
		return this._methodSetup.hasMethod(method);
	}
	,getMethodAt: function(index) {
		return this._methodSetup.getMethodAt(index);
	}
	,addMethodAt: function(method,index) {
		this._methodSetup.addMethodAt(method,index);
	}
	,removeMethod: function(method) {
		this._methodSetup.removeMethod(method);
	}
	,updateLights: function() {
		away3d.materials.passes.CompiledPass.prototype.updateLights.call(this);
		if(this._lightPicker != null && !this._ignoreLights) {
			this._numPointLights = this._lightPicker.get_numPointLights();
			this._numDirectionalLights = this._lightPicker.get_numDirectionalLights();
			this._numLightProbes = this._lightPicker.get_numLightProbes();
			if(this._includeCasters) {
				this._numPointLights += this._lightPicker.get_numCastingPointLights();
				this._numDirectionalLights += this._lightPicker.get_numCastingDirectionalLights();
			}
		} else {
			this._numPointLights = 0;
			this._numDirectionalLights = 0;
			this._numLightProbes = 0;
		}
		this.invalidateShaderProgram();
	}
	,activate: function(stage3DProxy,camera) {
		away3d.materials.passes.CompiledPass.prototype.activate.call(this,stage3DProxy,camera);
		if(this._methodSetup._colorTransformMethod != null) this._methodSetup._colorTransformMethod.activate(this._methodSetup._colorTransformMethodVO,stage3DProxy);
		var methods = this._methodSetup._methods;
		var len = methods.length;
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			var set = methods[i];
			set.method.activate(set.data,stage3DProxy);
		}
		if(this._cameraPositionIndex >= 0) {
			var pos = camera.get_scenePosition();
			var this1 = this._vertexConstantData;
			var key = this._cameraPositionIndex;
			if(!this1.fixed) {
				if(key >= this1.length) this1.length = key + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[key] = pos.x;
			var this3 = this._vertexConstantData;
			var key1 = this._cameraPositionIndex + 1;
			if(!this3.fixed) {
				if(key1 >= this3.length) this3.length = key1 + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[key1] = pos.y;
			var this5 = this._vertexConstantData;
			var key2 = this._cameraPositionIndex + 2;
			if(!this5.fixed) {
				if(key2 >= this5.length) this5.length = key2 + 1;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[key2] = pos.z;
		}
	}
	,deactivate: function(stage3DProxy) {
		away3d.materials.passes.CompiledPass.prototype.deactivate.call(this,stage3DProxy);
		if(this._methodSetup._colorTransformMethod != null) this._methodSetup._colorTransformMethod.deactivate(this._methodSetup._colorTransformMethodVO,stage3DProxy);
		var set;
		var methods = this._methodSetup._methods;
		var len = methods.length;
		var i = 0;
		var _g = 0;
		while(_g < len) {
			var i1 = _g++;
			set = methods[i1];
			set.method.deactivate(set.data,stage3DProxy);
		}
	}
	,addPassesFromMethods: function() {
		away3d.materials.passes.CompiledPass.prototype.addPassesFromMethods.call(this);
		if(this._methodSetup._colorTransformMethod != null) this.addPasses(this._methodSetup._colorTransformMethod.get_passes());
		var methods = this._methodSetup._methods;
		var i = 0;
		var _g1 = 0;
		var _g = methods.length;
		while(_g1 < _g) {
			var i1 = _g1++;
			this.addPasses(methods[i1].method.get_passes());
		}
	}
	,usesProbesForSpecular: function() {
		return this._numLightProbes > 0 && (this._specularLightSources & away3d.materials.LightSources.PROBES) != 0;
	}
	,usesProbesForDiffuse: function() {
		return this._numLightProbes > 0 && (this._diffuseLightSources & away3d.materials.LightSources.PROBES) != 0;
	}
	,updateMethodConstants: function() {
		away3d.materials.passes.CompiledPass.prototype.updateMethodConstants.call(this);
		if(this._methodSetup._colorTransformMethod != null) this._methodSetup._colorTransformMethod.initConstants(this._methodSetup._colorTransformMethodVO);
		var methods = this._methodSetup._methods;
		var len = methods.length;
		var i = 0;
		var _g = 0;
		while(_g < len) {
			var i1 = _g++;
			methods[i1].method.initConstants(methods[i1].data);
		}
	}
	,updateLightConstants: function() {
		var dirLight;
		var pointLight;
		var i;
		var k;
		var len;
		var dirPos;
		var total = 0;
		var numLightTypes;
		if(this._includeCasters) numLightTypes = 2; else numLightTypes = 1;
		k = this._lightFragmentConstantIndex;
		var castVal;
		var _g = 0;
		while(_g < numLightTypes) {
			var castVal1 = _g++;
			var dirLights;
			if(castVal1 != 0) dirLights = this._lightPicker.get_castingDirectionalLights(); else dirLights = this._lightPicker.get_directionalLights();
			len = dirLights.length;
			total += len;
			var _g1 = 0;
			while(_g1 < len) {
				var i1 = _g1++;
				dirLight = dirLights[i1];
				dirPos = dirLight.get_sceneDirection();
				this._ambientLightR += dirLight._ambientR;
				this._ambientLightG += dirLight._ambientG;
				this._ambientLightB += dirLight._ambientB;
				var this1 = this._fragmentConstantData;
				var key = k++;
				if(!this1.fixed) {
					if(key >= this1.length) this1.length = key + 1;
					if(this1.data.length < this1.length) {
						var data;
						var this2;
						this2 = new Array(this1.data.length + 10);
						data = this2;
						haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
						this1.data = data;
					}
				}
				this1.data[key] = -dirPos.x;
				var this3 = this._fragmentConstantData;
				var key1 = k++;
				if(!this3.fixed) {
					if(key1 >= this3.length) this3.length = key1 + 1;
					if(this3.data.length < this3.length) {
						var data1;
						var this4;
						this4 = new Array(this3.data.length + 10);
						data1 = this4;
						haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
						this3.data = data1;
					}
				}
				this3.data[key1] = -dirPos.y;
				var this5 = this._fragmentConstantData;
				var key2 = k++;
				if(!this5.fixed) {
					if(key2 >= this5.length) this5.length = key2 + 1;
					if(this5.data.length < this5.length) {
						var data2;
						var this6;
						this6 = new Array(this5.data.length + 10);
						data2 = this6;
						haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
						this5.data = data2;
					}
				}
				this5.data[key2] = -dirPos.z;
				var this7 = this._fragmentConstantData;
				var key3 = k++;
				if(!this7.fixed) {
					if(key3 >= this7.length) this7.length = key3 + 1;
					if(this7.data.length < this7.length) {
						var data3;
						var this8;
						this8 = new Array(this7.data.length + 10);
						data3 = this8;
						haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
						this7.data = data3;
					}
				}
				this7.data[key3] = 1;
				var this9 = this._fragmentConstantData;
				var key4 = k++;
				if(!this9.fixed) {
					if(key4 >= this9.length) this9.length = key4 + 1;
					if(this9.data.length < this9.length) {
						var data4;
						var this10;
						this10 = new Array(this9.data.length + 10);
						data4 = this10;
						haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
						this9.data = data4;
					}
				}
				this9.data[key4] = dirLight._diffuseR;
				var this11 = this._fragmentConstantData;
				var key5 = k++;
				if(!this11.fixed) {
					if(key5 >= this11.length) this11.length = key5 + 1;
					if(this11.data.length < this11.length) {
						var data5;
						var this12;
						this12 = new Array(this11.data.length + 10);
						data5 = this12;
						haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
						this11.data = data5;
					}
				}
				this11.data[key5] = dirLight._diffuseG;
				var this13 = this._fragmentConstantData;
				var key6 = k++;
				if(!this13.fixed) {
					if(key6 >= this13.length) this13.length = key6 + 1;
					if(this13.data.length < this13.length) {
						var data6;
						var this14;
						this14 = new Array(this13.data.length + 10);
						data6 = this14;
						haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
						this13.data = data6;
					}
				}
				this13.data[key6] = dirLight._diffuseB;
				var this15 = this._fragmentConstantData;
				var key7 = k++;
				if(!this15.fixed) {
					if(key7 >= this15.length) this15.length = key7 + 1;
					if(this15.data.length < this15.length) {
						var data7;
						var this16;
						this16 = new Array(this15.data.length + 10);
						data7 = this16;
						haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
						this15.data = data7;
					}
				}
				this15.data[key7] = 1;
				var this17 = this._fragmentConstantData;
				var key8 = k++;
				if(!this17.fixed) {
					if(key8 >= this17.length) this17.length = key8 + 1;
					if(this17.data.length < this17.length) {
						var data8;
						var this18;
						this18 = new Array(this17.data.length + 10);
						data8 = this18;
						haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
						this17.data = data8;
					}
				}
				this17.data[key8] = dirLight._specularR;
				var this19 = this._fragmentConstantData;
				var key9 = k++;
				if(!this19.fixed) {
					if(key9 >= this19.length) this19.length = key9 + 1;
					if(this19.data.length < this19.length) {
						var data9;
						var this20;
						this20 = new Array(this19.data.length + 10);
						data9 = this20;
						haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
						this19.data = data9;
					}
				}
				this19.data[key9] = dirLight._specularG;
				var this21 = this._fragmentConstantData;
				var key10 = k++;
				if(!this21.fixed) {
					if(key10 >= this21.length) this21.length = key10 + 1;
					if(this21.data.length < this21.length) {
						var data10;
						var this22;
						this22 = new Array(this21.data.length + 10);
						data10 = this22;
						haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
						this21.data = data10;
					}
				}
				this21.data[key10] = dirLight._specularB;
				var this23 = this._fragmentConstantData;
				var key11 = k++;
				if(!this23.fixed) {
					if(key11 >= this23.length) this23.length = key11 + 1;
					if(this23.data.length < this23.length) {
						var data11;
						var this24;
						this24 = new Array(this23.data.length + 10);
						data11 = this24;
						haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
						this23.data = data11;
					}
				}
				this23.data[key11] = 1;
			}
		}
		if(this._numDirectionalLights > total) {
			i = k + (this._numDirectionalLights - total) * 12;
			while((function($this) {
				var $r;
				var aNeg = i < 0;
				var bNeg = k < 0;
				$r = aNeg != bNeg?aNeg:i > k;
				return $r;
			}(this))) {
				var this25 = this._fragmentConstantData;
				var key12 = k++;
				if(!this25.fixed) {
					if(key12 >= this25.length) this25.length = key12 + 1;
					if(this25.data.length < this25.length) {
						var data12;
						var this26;
						this26 = new Array(this25.data.length + 10);
						data12 = this26;
						haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
						this25.data = data12;
					}
				}
				this25.data[key12] = 0;
			}
		}
		total = 0;
		var _g2 = 0;
		while(_g2 < numLightTypes) {
			var castVal2 = _g2++;
			var pointLights;
			if(castVal2 != 0) pointLights = this._lightPicker.get_castingPointLights(); else pointLights = this._lightPicker.get_pointLights();
			len = pointLights.length;
			var _g11 = 0;
			while(_g11 < len) {
				var i2 = _g11++;
				pointLight = pointLights[i2];
				dirPos = pointLight.get_scenePosition();
				this._ambientLightR += pointLight._ambientR;
				this._ambientLightG += pointLight._ambientG;
				this._ambientLightB += pointLight._ambientB;
				var this27 = this._fragmentConstantData;
				var key13 = k++;
				if(!this27.fixed) {
					if(key13 >= this27.length) this27.length = key13 + 1;
					if(this27.data.length < this27.length) {
						var data13;
						var this28;
						this28 = new Array(this27.data.length + 10);
						data13 = this28;
						haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
						this27.data = data13;
					}
				}
				this27.data[key13] = dirPos.x;
				var this29 = this._fragmentConstantData;
				var key14 = k++;
				if(!this29.fixed) {
					if(key14 >= this29.length) this29.length = key14 + 1;
					if(this29.data.length < this29.length) {
						var data14;
						var this30;
						this30 = new Array(this29.data.length + 10);
						data14 = this30;
						haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
						this29.data = data14;
					}
				}
				this29.data[key14] = dirPos.y;
				var this31 = this._fragmentConstantData;
				var key15 = k++;
				if(!this31.fixed) {
					if(key15 >= this31.length) this31.length = key15 + 1;
					if(this31.data.length < this31.length) {
						var data15;
						var this32;
						this32 = new Array(this31.data.length + 10);
						data15 = this32;
						haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
						this31.data = data15;
					}
				}
				this31.data[key15] = dirPos.z;
				var this33 = this._fragmentConstantData;
				var key16 = k++;
				if(!this33.fixed) {
					if(key16 >= this33.length) this33.length = key16 + 1;
					if(this33.data.length < this33.length) {
						var data16;
						var this34;
						this34 = new Array(this33.data.length + 10);
						data16 = this34;
						haxe.ds._Vector.Vector_Impl_.blit(this33.data,0,data16,0,this33.data.length);
						this33.data = data16;
					}
				}
				this33.data[key16] = 1;
				var this35 = this._fragmentConstantData;
				var key17 = k++;
				if(!this35.fixed) {
					if(key17 >= this35.length) this35.length = key17 + 1;
					if(this35.data.length < this35.length) {
						var data17;
						var this36;
						this36 = new Array(this35.data.length + 10);
						data17 = this36;
						haxe.ds._Vector.Vector_Impl_.blit(this35.data,0,data17,0,this35.data.length);
						this35.data = data17;
					}
				}
				this35.data[key17] = pointLight._diffuseR;
				var this37 = this._fragmentConstantData;
				var key18 = k++;
				if(!this37.fixed) {
					if(key18 >= this37.length) this37.length = key18 + 1;
					if(this37.data.length < this37.length) {
						var data18;
						var this38;
						this38 = new Array(this37.data.length + 10);
						data18 = this38;
						haxe.ds._Vector.Vector_Impl_.blit(this37.data,0,data18,0,this37.data.length);
						this37.data = data18;
					}
				}
				this37.data[key18] = pointLight._diffuseG;
				var this39 = this._fragmentConstantData;
				var key19 = k++;
				if(!this39.fixed) {
					if(key19 >= this39.length) this39.length = key19 + 1;
					if(this39.data.length < this39.length) {
						var data19;
						var this40;
						this40 = new Array(this39.data.length + 10);
						data19 = this40;
						haxe.ds._Vector.Vector_Impl_.blit(this39.data,0,data19,0,this39.data.length);
						this39.data = data19;
					}
				}
				this39.data[key19] = pointLight._diffuseB;
				var this41 = this._fragmentConstantData;
				var key20 = k++;
				if(!this41.fixed) {
					if(key20 >= this41.length) this41.length = key20 + 1;
					if(this41.data.length < this41.length) {
						var data20;
						var this42;
						this42 = new Array(this41.data.length + 10);
						data20 = this42;
						haxe.ds._Vector.Vector_Impl_.blit(this41.data,0,data20,0,this41.data.length);
						this41.data = data20;
					}
				}
				this41.data[key20] = pointLight._radius * pointLight._radius;
				var this43 = this._fragmentConstantData;
				var key21 = k++;
				if(!this43.fixed) {
					if(key21 >= this43.length) this43.length = key21 + 1;
					if(this43.data.length < this43.length) {
						var data21;
						var this44;
						this44 = new Array(this43.data.length + 10);
						data21 = this44;
						haxe.ds._Vector.Vector_Impl_.blit(this43.data,0,data21,0,this43.data.length);
						this43.data = data21;
					}
				}
				this43.data[key21] = pointLight._specularR;
				var this45 = this._fragmentConstantData;
				var key22 = k++;
				if(!this45.fixed) {
					if(key22 >= this45.length) this45.length = key22 + 1;
					if(this45.data.length < this45.length) {
						var data22;
						var this46;
						this46 = new Array(this45.data.length + 10);
						data22 = this46;
						haxe.ds._Vector.Vector_Impl_.blit(this45.data,0,data22,0,this45.data.length);
						this45.data = data22;
					}
				}
				this45.data[key22] = pointLight._specularG;
				var this47 = this._fragmentConstantData;
				var key23 = k++;
				if(!this47.fixed) {
					if(key23 >= this47.length) this47.length = key23 + 1;
					if(this47.data.length < this47.length) {
						var data23;
						var this48;
						this48 = new Array(this47.data.length + 10);
						data23 = this48;
						haxe.ds._Vector.Vector_Impl_.blit(this47.data,0,data23,0,this47.data.length);
						this47.data = data23;
					}
				}
				this47.data[key23] = pointLight._specularB;
				var this49 = this._fragmentConstantData;
				var key24 = k++;
				if(!this49.fixed) {
					if(key24 >= this49.length) this49.length = key24 + 1;
					if(this49.data.length < this49.length) {
						var data24;
						var this50;
						this50 = new Array(this49.data.length + 10);
						data24 = this50;
						haxe.ds._Vector.Vector_Impl_.blit(this49.data,0,data24,0,this49.data.length);
						this49.data = data24;
					}
				}
				this49.data[key24] = pointLight._fallOffFactor;
			}
		}
		if(this._numPointLights > total) {
			i = k + (total - this._numPointLights) * 12;
			var _g3 = k;
			while(_g3 < i) {
				var k1 = _g3++;
				var this51 = this._fragmentConstantData;
				if(!this51.fixed) {
					if(k1 >= this51.length) this51.length = k1 + 1;
					if(this51.data.length < this51.length) {
						var data25;
						var this52;
						this52 = new Array(this51.data.length + 10);
						data25 = this52;
						haxe.ds._Vector.Vector_Impl_.blit(this51.data,0,data25,0,this51.data.length);
						this51.data = data25;
					}
				}
				this51.data[k1] = 0;
			}
		}
	}
	,updateProbes: function(stage3DProxy) {
		var probe;
		var lightProbes = this._lightPicker.get_lightProbes();
		var weights = this._lightPicker.get_lightProbeWeights();
		var len = lightProbes.length;
		var addDiff = this.usesProbesForDiffuse();
		var addSpec = this._methodSetup._specularMethod != null && this.usesProbesForSpecular();
		var context = stage3DProxy._context3D;
		if(!(addDiff || addSpec)) return;
		var i = 0;
		var _g = 0;
		while(_g < len) {
			var i1 = _g++;
			probe = lightProbes[i1];
			if(addDiff) context.setTextureAt(this._lightProbeDiffuseIndices[i1],probe.get_diffuseMap().getTextureForStage3D(stage3DProxy));
			if(addSpec) context.setTextureAt(this._lightProbeSpecularIndices[i1],probe.get_specularMap().getTextureForStage3D(stage3DProxy));
		}
		var this1 = this._fragmentConstantData;
		var key = this._probeWeightsIndex;
		if(!this1.fixed) {
			if(key >= this1.length) this1.length = key + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[key] = weights[0];
		var this3 = this._fragmentConstantData;
		var key1 = this._probeWeightsIndex + 1;
		if(!this3.fixed) {
			if(key1 >= this3.length) this3.length = key1 + 1;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[key1] = weights[1];
		var this5 = this._fragmentConstantData;
		var key2 = this._probeWeightsIndex + 2;
		if(!this5.fixed) {
			if(key2 >= this5.length) this5.length = key2 + 1;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[key2] = weights[2];
		var this7 = this._fragmentConstantData;
		var key3 = this._probeWeightsIndex + 3;
		if(!this7.fixed) {
			if(key3 >= this7.length) this7.length = key3 + 1;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[key3] = weights[3];
	}
	,get_ignoreLights: function() {
		return this._ignoreLights;
	}
	,set_ignoreLights: function(ignoreLights) {
		this._ignoreLights = ignoreLights;
		return this._ignoreLights;
	}
	,__class__: away3d.materials.passes.SuperShaderPass
	,__properties__: $extend(away3d.materials.passes.CompiledPass.prototype.__properties__,{set_ignoreLights:"set_ignoreLights",get_ignoreLights:"get_ignoreLights",get_numMethods:"get_numMethods",set_colorTransformMethod:"set_colorTransformMethod",get_colorTransformMethod:"get_colorTransformMethod",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform",set_includeCasters:"set_includeCasters",get_includeCasters:"get_includeCasters"})
});
away3d.materials.utils = {};
away3d.materials.utils.DefaultMaterialManager = function() { };
$hxClasses["away3d.materials.utils.DefaultMaterialManager"] = away3d.materials.utils.DefaultMaterialManager;
away3d.materials.utils.DefaultMaterialManager.__name__ = ["away3d","materials","utils","DefaultMaterialManager"];
away3d.materials.utils.DefaultMaterialManager._defaultTextureBitmapData = null;
away3d.materials.utils.DefaultMaterialManager._defaultMaterial = null;
away3d.materials.utils.DefaultMaterialManager._defaultTexture = null;
away3d.materials.utils.DefaultMaterialManager.getDefaultMaterial = function(renderable) {
	if(away3d.materials.utils.DefaultMaterialManager._defaultTexture == null) away3d.materials.utils.DefaultMaterialManager.createDefaultTexture();
	if(away3d.materials.utils.DefaultMaterialManager._defaultMaterial == null) away3d.materials.utils.DefaultMaterialManager.createDefaultMaterial();
	return away3d.materials.utils.DefaultMaterialManager._defaultMaterial;
};
away3d.materials.utils.DefaultMaterialManager.getDefaultTexture = function(renderable) {
	if(away3d.materials.utils.DefaultMaterialManager._defaultTexture == null) away3d.materials.utils.DefaultMaterialManager.createDefaultTexture();
	return away3d.materials.utils.DefaultMaterialManager._defaultTexture;
};
away3d.materials.utils.DefaultMaterialManager.createDefaultTexture = function() {
	away3d.materials.utils.DefaultMaterialManager._defaultTextureBitmapData = new openfl.display.BitmapData(8,8,false,0);
	var i = 0;
	var j;
	i = 0;
	while(i < 8) {
		j = 0;
		while(j < 8) {
			if((j & 1 ^ i & 1) == 1) away3d.materials.utils.DefaultMaterialManager._defaultTextureBitmapData.setPixel(i,j,16777215);
			j++;
		}
		i++;
	}
	away3d.materials.utils.DefaultMaterialManager._defaultTexture = new away3d.textures.BitmapTexture(away3d.materials.utils.DefaultMaterialManager._defaultTextureBitmapData);
	away3d.materials.utils.DefaultMaterialManager._defaultTexture.set_name("defaultTexture");
};
away3d.materials.utils.DefaultMaterialManager.createDefaultMaterial = function() {
	away3d.materials.utils.DefaultMaterialManager._defaultMaterial = new away3d.materials.TextureMaterial(away3d.materials.utils.DefaultMaterialManager._defaultTexture);
	away3d.materials.utils.DefaultMaterialManager._defaultMaterial.set_mipmap(false);
	away3d.materials.utils.DefaultMaterialManager._defaultMaterial.set_smooth(false);
	away3d.materials.utils.DefaultMaterialManager._defaultMaterial.set_name("defaultMaterial");
};
away3d.materials.utils.MipmapGenerator = function() { };
$hxClasses["away3d.materials.utils.MipmapGenerator"] = away3d.materials.utils.MipmapGenerator;
away3d.materials.utils.MipmapGenerator.__name__ = ["away3d","materials","utils","MipmapGenerator"];
away3d.materials.utils.MipmapGenerator.generateMipMaps = function(source,target,mipmap,alpha,side) {
	if(side == null) side = -1;
	if(alpha == null) alpha = false;
	var w = source.width;
	var h = source.height;
	var i = 0;
	var regen = mipmap != null;
	away3d.materials.utils.MipmapGenerator._rect.width = w;
	away3d.materials.utils.MipmapGenerator._rect.height = h;
	while(w >= 1 || h >= 1) {
		mipmap = new openfl.display.BitmapData(w > 1?w:1,h > 1?h:1,alpha,0);
		away3d.materials.utils.MipmapGenerator._matrix.a = away3d.materials.utils.MipmapGenerator._rect.width / source.width;
		away3d.materials.utils.MipmapGenerator._matrix.d = away3d.materials.utils.MipmapGenerator._rect.height / source.height;
		mipmap.draw(source,away3d.materials.utils.MipmapGenerator._matrix,null,null,null,true);
		if(js.Boot.__instanceof(target,openfl.display3D.textures.Texture)) (js.Boot.__cast(target , openfl.display3D.textures.Texture)).uploadFromBitmapData(mipmap,i++); else (js.Boot.__cast(target , openfl.display3D.textures.CubeTexture)).uploadFromBitmapData(mipmap,side,i++);
		w >>= 1;
		h >>= 1;
		if(w > 1) away3d.materials.utils.MipmapGenerator._rect.width = w; else away3d.materials.utils.MipmapGenerator._rect.width = 1;
		if(h > 1) away3d.materials.utils.MipmapGenerator._rect.height = h; else away3d.materials.utils.MipmapGenerator._rect.height = 1;
	}
};
away3d.primitives = {};
away3d.primitives.PrimitiveBase = function() {
	away3d.core.base.Geometry.call(this);
	this._geomDirty = true;
	this._uvDirty = true;
	this._subGeometry = new away3d.core.base.CompactSubGeometry();
	this._subGeometry.set_autoGenerateDummyUVs(false);
	this.addSubGeometry(this._subGeometry);
};
$hxClasses["away3d.primitives.PrimitiveBase"] = away3d.primitives.PrimitiveBase;
away3d.primitives.PrimitiveBase.__name__ = ["away3d","primitives","PrimitiveBase"];
away3d.primitives.PrimitiveBase.__super__ = away3d.core.base.Geometry;
away3d.primitives.PrimitiveBase.prototype = $extend(away3d.core.base.Geometry.prototype,{
	_geomDirty: null
	,_uvDirty: null
	,_subGeometry: null
	,get_subGeometries: function() {
		if(this._geomDirty) this.updateGeometry();
		if(this._uvDirty) this.updateUVs();
		return away3d.core.base.Geometry.prototype.get_subGeometries.call(this);
	}
	,clone: function() {
		if(this._geomDirty) this.updateGeometry();
		if(this._uvDirty) this.updateUVs();
		return away3d.core.base.Geometry.prototype.clone.call(this);
	}
	,scale: function(scale) {
		if(this._geomDirty) this.updateGeometry();
		away3d.core.base.Geometry.prototype.scale.call(this,scale);
	}
	,scaleUV: function(scaleU,scaleV) {
		if(scaleV == null) scaleV = 1;
		if(scaleU == null) scaleU = 1;
		if(this._uvDirty) this.updateUVs();
		away3d.core.base.Geometry.prototype.scaleUV.call(this,scaleU,scaleV);
	}
	,applyTransformation: function(transform) {
		if(this._geomDirty) this.updateGeometry();
		away3d.core.base.Geometry.prototype.applyTransformation.call(this,transform);
	}
	,buildGeometry: function(target) {
		throw new away3d.errors.AbstractMethodError();
	}
	,buildUVs: function(target) {
		throw new away3d.errors.AbstractMethodError();
	}
	,invalidateGeometry: function() {
		this._geomDirty = true;
	}
	,invalidateUVs: function() {
		this._uvDirty = true;
	}
	,updateGeometry: function() {
		this.buildGeometry(this._subGeometry);
		this._geomDirty = false;
	}
	,updateUVs: function() {
		this.buildUVs(this._subGeometry);
		this._uvDirty = false;
	}
	,validate: function() {
		if(this._geomDirty) this.updateGeometry();
		if(this._uvDirty) this.updateUVs();
	}
	,__class__: away3d.primitives.PrimitiveBase
});
away3d.primitives.CubeGeometry = function(width,height,depth,segmentsW,segmentsH,segmentsD,tile6) {
	if(tile6 == null) tile6 = true;
	if(segmentsD == null) segmentsD = 1;
	if(segmentsH == null) segmentsH = 1;
	if(segmentsW == null) segmentsW = 1;
	if(depth == null) depth = 100;
	if(height == null) height = 100;
	if(width == null) width = 100;
	away3d.primitives.PrimitiveBase.call(this);
	this._width = width;
	this._height = height;
	this._depth = depth;
	this._segmentsW = segmentsW;
	this._segmentsH = segmentsH;
	this._segmentsD = segmentsD;
	this._tile6 = tile6;
};
$hxClasses["away3d.primitives.CubeGeometry"] = away3d.primitives.CubeGeometry;
away3d.primitives.CubeGeometry.__name__ = ["away3d","primitives","CubeGeometry"];
away3d.primitives.CubeGeometry.__super__ = away3d.primitives.PrimitiveBase;
away3d.primitives.CubeGeometry.prototype = $extend(away3d.primitives.PrimitiveBase.prototype,{
	_width: null
	,_height: null
	,_depth: null
	,_tile6: null
	,_segmentsW: null
	,_segmentsH: null
	,_segmentsD: null
	,get_width: function() {
		return this._width;
	}
	,set_width: function(value) {
		this._width = value;
		this.invalidateGeometry();
		return value;
	}
	,get_height: function() {
		return this._height;
	}
	,set_height: function(value) {
		this._height = value;
		this.invalidateGeometry();
		return value;
	}
	,get_depth: function() {
		return this._depth;
	}
	,set_depth: function(value) {
		this._depth = value;
		this.invalidateGeometry();
		return value;
	}
	,get_tile6: function() {
		return this._tile6;
	}
	,set_tile6: function(value) {
		this._tile6 = value;
		this.invalidateUVs();
		return value;
	}
	,get_segmentsW: function() {
		return this._segmentsW;
	}
	,set_segmentsW: function(value) {
		this._segmentsW = value;
		this.invalidateGeometry();
		this.invalidateUVs();
		return value;
	}
	,get_segmentsH: function() {
		return this._segmentsH;
	}
	,set_segmentsH: function(value) {
		this._segmentsH = value;
		this.invalidateGeometry();
		this.invalidateUVs();
		return value;
	}
	,get_segmentsD: function() {
		return this._segmentsD;
	}
	,set_segmentsD: function(value) {
		this._segmentsD = value;
		this.invalidateGeometry();
		this.invalidateUVs();
		return value;
	}
	,buildGeometry: function(target) {
		var data;
		var indices;
		var tl = 0;
		var tr = 0;
		var bl = 0;
		var br = 0;
		var i = 0;
		var j = 0;
		var inc = 0;
		var vidx = 0;
		var fidx = 0;
		var hw = 0;
		var hh = 0;
		var hd = 0;
		var dw = 0;
		var dh = 0;
		var dd = 0;
		var outer_pos;
		var numVerts = ((this._segmentsW + 1) * (this._segmentsH + 1) + (this._segmentsW + 1) * (this._segmentsD + 1) + (this._segmentsH + 1) * (this._segmentsD + 1)) * 2 | 0;
		var stride = target.get_vertexStride();
		var skip = stride - 9;
		if(numVerts == target.get_numVertices()) {
			data = target.get_vertexData();
			indices = target.get_indexData();
			if(indices == null) indices = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
				var $r;
				var this1;
				this1 = new openfl.VectorData();
				{
					var this2;
					this2 = new Array(0);
					this1.data = this2;
				}
				this1.length = 0;
				this1.fixed = false;
				$r = this1;
				return $r;
			}(this))),(this._segmentsW * this._segmentsH + this._segmentsW * this._segmentsD + this._segmentsH * this._segmentsD) * 12 | 0,0);
		} else {
			data = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
				var $r;
				var this3;
				this3 = new openfl.VectorData();
				{
					var this4;
					this4 = new Array(0);
					this3.data = this4;
				}
				this3.length = 0;
				this3.fixed = false;
				$r = this3;
				return $r;
			}(this))),numVerts * stride,0);
			indices = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
				var $r;
				var this5;
				this5 = new openfl.VectorData();
				{
					var this6;
					this6 = new Array(0);
					this5.data = this6;
				}
				this5.length = 0;
				this5.fixed = false;
				$r = this5;
				return $r;
			}(this))),(this._segmentsW * this._segmentsH + this._segmentsW * this._segmentsD + this._segmentsH * this._segmentsD) * 12 | 0,0);
			this.invalidateUVs();
		}
		vidx = target.get_vertexOffset();
		fidx = 0;
		hw = this._width / 2;
		hh = this._height / 2;
		hd = this._depth / 2;
		dw = this._width / this._segmentsW;
		dh = this._height / this._segmentsH;
		dd = this._depth / this._segmentsD;
		i = 0;
		while(i <= this._segmentsW) {
			outer_pos = -hw + i * dw;
			j = 0;
			while(j <= this._segmentsH) {
				var key = vidx++;
				if(!data.fixed) {
					if(key >= data.length) data.length = key + 1;
					if(data.data.length < data.length) {
						var data1;
						var this7;
						this7 = new Array(data.data.length + 10);
						data1 = this7;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data1,0,data.data.length);
						data.data = data1;
					}
				}
				data.data[key] = outer_pos;
				var key1 = vidx++;
				if(!data.fixed) {
					if(key1 >= data.length) data.length = key1 + 1;
					if(data.data.length < data.length) {
						var data2;
						var this8;
						this8 = new Array(data.data.length + 10);
						data2 = this8;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data2,0,data.data.length);
						data.data = data2;
					}
				}
				data.data[key1] = -hh + j * dh;
				var key2 = vidx++;
				if(!data.fixed) {
					if(key2 >= data.length) data.length = key2 + 1;
					if(data.data.length < data.length) {
						var data3;
						var this9;
						this9 = new Array(data.data.length + 10);
						data3 = this9;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data3,0,data.data.length);
						data.data = data3;
					}
				}
				data.data[key2] = -hd;
				var key3 = vidx++;
				if(!data.fixed) {
					if(key3 >= data.length) data.length = key3 + 1;
					if(data.data.length < data.length) {
						var data4;
						var this10;
						this10 = new Array(data.data.length + 10);
						data4 = this10;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data4,0,data.data.length);
						data.data = data4;
					}
				}
				data.data[key3] = 0;
				var key4 = vidx++;
				if(!data.fixed) {
					if(key4 >= data.length) data.length = key4 + 1;
					if(data.data.length < data.length) {
						var data5;
						var this11;
						this11 = new Array(data.data.length + 10);
						data5 = this11;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data5,0,data.data.length);
						data.data = data5;
					}
				}
				data.data[key4] = 0;
				var key5 = vidx++;
				if(!data.fixed) {
					if(key5 >= data.length) data.length = key5 + 1;
					if(data.data.length < data.length) {
						var data6;
						var this12;
						this12 = new Array(data.data.length + 10);
						data6 = this12;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data6,0,data.data.length);
						data.data = data6;
					}
				}
				data.data[key5] = -1;
				var key6 = vidx++;
				if(!data.fixed) {
					if(key6 >= data.length) data.length = key6 + 1;
					if(data.data.length < data.length) {
						var data7;
						var this13;
						this13 = new Array(data.data.length + 10);
						data7 = this13;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data7,0,data.data.length);
						data.data = data7;
					}
				}
				data.data[key6] = 1;
				var key7 = vidx++;
				if(!data.fixed) {
					if(key7 >= data.length) data.length = key7 + 1;
					if(data.data.length < data.length) {
						var data8;
						var this14;
						this14 = new Array(data.data.length + 10);
						data8 = this14;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data8,0,data.data.length);
						data.data = data8;
					}
				}
				data.data[key7] = 0;
				var key8 = vidx++;
				if(!data.fixed) {
					if(key8 >= data.length) data.length = key8 + 1;
					if(data.data.length < data.length) {
						var data9;
						var this15;
						this15 = new Array(data.data.length + 10);
						data9 = this15;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data9,0,data.data.length);
						data.data = data9;
					}
				}
				data.data[key8] = 0;
				vidx += skip;
				var key9 = vidx++;
				if(!data.fixed) {
					if(key9 >= data.length) data.length = key9 + 1;
					if(data.data.length < data.length) {
						var data10;
						var this16;
						this16 = new Array(data.data.length + 10);
						data10 = this16;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data10,0,data.data.length);
						data.data = data10;
					}
				}
				data.data[key9] = outer_pos;
				var key10 = vidx++;
				if(!data.fixed) {
					if(key10 >= data.length) data.length = key10 + 1;
					if(data.data.length < data.length) {
						var data11;
						var this17;
						this17 = new Array(data.data.length + 10);
						data11 = this17;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data11,0,data.data.length);
						data.data = data11;
					}
				}
				data.data[key10] = -hh + j * dh;
				var key11 = vidx++;
				if(!data.fixed) {
					if(key11 >= data.length) data.length = key11 + 1;
					if(data.data.length < data.length) {
						var data12;
						var this18;
						this18 = new Array(data.data.length + 10);
						data12 = this18;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data12,0,data.data.length);
						data.data = data12;
					}
				}
				data.data[key11] = hd;
				var key12 = vidx++;
				if(!data.fixed) {
					if(key12 >= data.length) data.length = key12 + 1;
					if(data.data.length < data.length) {
						var data13;
						var this19;
						this19 = new Array(data.data.length + 10);
						data13 = this19;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data13,0,data.data.length);
						data.data = data13;
					}
				}
				data.data[key12] = 0;
				var key13 = vidx++;
				if(!data.fixed) {
					if(key13 >= data.length) data.length = key13 + 1;
					if(data.data.length < data.length) {
						var data14;
						var this20;
						this20 = new Array(data.data.length + 10);
						data14 = this20;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data14,0,data.data.length);
						data.data = data14;
					}
				}
				data.data[key13] = 0;
				var key14 = vidx++;
				if(!data.fixed) {
					if(key14 >= data.length) data.length = key14 + 1;
					if(data.data.length < data.length) {
						var data15;
						var this21;
						this21 = new Array(data.data.length + 10);
						data15 = this21;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data15,0,data.data.length);
						data.data = data15;
					}
				}
				data.data[key14] = 1;
				var key15 = vidx++;
				if(!data.fixed) {
					if(key15 >= data.length) data.length = key15 + 1;
					if(data.data.length < data.length) {
						var data16;
						var this22;
						this22 = new Array(data.data.length + 10);
						data16 = this22;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data16,0,data.data.length);
						data.data = data16;
					}
				}
				data.data[key15] = -1;
				var key16 = vidx++;
				if(!data.fixed) {
					if(key16 >= data.length) data.length = key16 + 1;
					if(data.data.length < data.length) {
						var data17;
						var this23;
						this23 = new Array(data.data.length + 10);
						data17 = this23;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data17,0,data.data.length);
						data.data = data17;
					}
				}
				data.data[key16] = 0;
				var key17 = vidx++;
				if(!data.fixed) {
					if(key17 >= data.length) data.length = key17 + 1;
					if(data.data.length < data.length) {
						var data18;
						var this24;
						this24 = new Array(data.data.length + 10);
						data18 = this24;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data18,0,data.data.length);
						data.data = data18;
					}
				}
				data.data[key17] = 0;
				vidx += skip;
				if(i > 0 && j > 0) {
					tl = 2 * ((i - 1) * (this._segmentsH + 1) + (j - 1)) | 0;
					tr = 2 * (i * (this._segmentsH + 1) + (j - 1)) | 0;
					bl = tl + 2;
					br = tr + 2;
					var key18 = fidx++;
					if(!indices.fixed) {
						if(key18 >= indices.length) indices.length = key18 + 1;
						if(indices.data.length < indices.length) {
							var data19;
							var this25;
							this25 = new Array(indices.data.length + 10);
							data19 = this25;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data19,0,indices.data.length);
							indices.data = data19;
						}
					}
					indices.data[key18] = tl;
					var key19 = fidx++;
					if(!indices.fixed) {
						if(key19 >= indices.length) indices.length = key19 + 1;
						if(indices.data.length < indices.length) {
							var data20;
							var this26;
							this26 = new Array(indices.data.length + 10);
							data20 = this26;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data20,0,indices.data.length);
							indices.data = data20;
						}
					}
					indices.data[key19] = bl;
					var key20 = fidx++;
					if(!indices.fixed) {
						if(key20 >= indices.length) indices.length = key20 + 1;
						if(indices.data.length < indices.length) {
							var data21;
							var this27;
							this27 = new Array(indices.data.length + 10);
							data21 = this27;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data21,0,indices.data.length);
							indices.data = data21;
						}
					}
					indices.data[key20] = br;
					var key21 = fidx++;
					if(!indices.fixed) {
						if(key21 >= indices.length) indices.length = key21 + 1;
						if(indices.data.length < indices.length) {
							var data22;
							var this28;
							this28 = new Array(indices.data.length + 10);
							data22 = this28;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data22,0,indices.data.length);
							indices.data = data22;
						}
					}
					indices.data[key21] = tl;
					var key22 = fidx++;
					if(!indices.fixed) {
						if(key22 >= indices.length) indices.length = key22 + 1;
						if(indices.data.length < indices.length) {
							var data23;
							var this29;
							this29 = new Array(indices.data.length + 10);
							data23 = this29;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data23,0,indices.data.length);
							indices.data = data23;
						}
					}
					indices.data[key22] = br;
					var key23 = fidx++;
					if(!indices.fixed) {
						if(key23 >= indices.length) indices.length = key23 + 1;
						if(indices.data.length < indices.length) {
							var data24;
							var this30;
							this30 = new Array(indices.data.length + 10);
							data24 = this30;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data24,0,indices.data.length);
							indices.data = data24;
						}
					}
					indices.data[key23] = tr;
					var key24 = fidx++;
					if(!indices.fixed) {
						if(key24 >= indices.length) indices.length = key24 + 1;
						if(indices.data.length < indices.length) {
							var data25;
							var this31;
							this31 = new Array(indices.data.length + 10);
							data25 = this31;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data25,0,indices.data.length);
							indices.data = data25;
						}
					}
					indices.data[key24] = tr + 1;
					var key25 = fidx++;
					if(!indices.fixed) {
						if(key25 >= indices.length) indices.length = key25 + 1;
						if(indices.data.length < indices.length) {
							var data26;
							var this32;
							this32 = new Array(indices.data.length + 10);
							data26 = this32;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data26,0,indices.data.length);
							indices.data = data26;
						}
					}
					indices.data[key25] = br + 1;
					var key26 = fidx++;
					if(!indices.fixed) {
						if(key26 >= indices.length) indices.length = key26 + 1;
						if(indices.data.length < indices.length) {
							var data27;
							var this33;
							this33 = new Array(indices.data.length + 10);
							data27 = this33;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data27,0,indices.data.length);
							indices.data = data27;
						}
					}
					indices.data[key26] = bl + 1;
					var key27 = fidx++;
					if(!indices.fixed) {
						if(key27 >= indices.length) indices.length = key27 + 1;
						if(indices.data.length < indices.length) {
							var data28;
							var this34;
							this34 = new Array(indices.data.length + 10);
							data28 = this34;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data28,0,indices.data.length);
							indices.data = data28;
						}
					}
					indices.data[key27] = tr + 1;
					var key28 = fidx++;
					if(!indices.fixed) {
						if(key28 >= indices.length) indices.length = key28 + 1;
						if(indices.data.length < indices.length) {
							var data29;
							var this35;
							this35 = new Array(indices.data.length + 10);
							data29 = this35;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data29,0,indices.data.length);
							indices.data = data29;
						}
					}
					indices.data[key28] = bl + 1;
					var key29 = fidx++;
					if(!indices.fixed) {
						if(key29 >= indices.length) indices.length = key29 + 1;
						if(indices.data.length < indices.length) {
							var data30;
							var this36;
							this36 = new Array(indices.data.length + 10);
							data30 = this36;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data30,0,indices.data.length);
							indices.data = data30;
						}
					}
					indices.data[key29] = tl + 1;
				}
				j++;
			}
			i++;
		}
		inc += 2 * (this._segmentsW + 1) * (this._segmentsH + 1) | 0;
		i = 0;
		while(i <= this._segmentsW) {
			outer_pos = -hw + i * dw;
			j = 0;
			while(j <= this._segmentsD) {
				var key30 = vidx++;
				if(!data.fixed) {
					if(key30 >= data.length) data.length = key30 + 1;
					if(data.data.length < data.length) {
						var data31;
						var this37;
						this37 = new Array(data.data.length + 10);
						data31 = this37;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data31,0,data.data.length);
						data.data = data31;
					}
				}
				data.data[key30] = outer_pos;
				var key31 = vidx++;
				if(!data.fixed) {
					if(key31 >= data.length) data.length = key31 + 1;
					if(data.data.length < data.length) {
						var data32;
						var this38;
						this38 = new Array(data.data.length + 10);
						data32 = this38;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data32,0,data.data.length);
						data.data = data32;
					}
				}
				data.data[key31] = hh;
				var key32 = vidx++;
				if(!data.fixed) {
					if(key32 >= data.length) data.length = key32 + 1;
					if(data.data.length < data.length) {
						var data33;
						var this39;
						this39 = new Array(data.data.length + 10);
						data33 = this39;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data33,0,data.data.length);
						data.data = data33;
					}
				}
				data.data[key32] = -hd + j * dd;
				var key33 = vidx++;
				if(!data.fixed) {
					if(key33 >= data.length) data.length = key33 + 1;
					if(data.data.length < data.length) {
						var data34;
						var this40;
						this40 = new Array(data.data.length + 10);
						data34 = this40;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data34,0,data.data.length);
						data.data = data34;
					}
				}
				data.data[key33] = 0;
				var key34 = vidx++;
				if(!data.fixed) {
					if(key34 >= data.length) data.length = key34 + 1;
					if(data.data.length < data.length) {
						var data35;
						var this41;
						this41 = new Array(data.data.length + 10);
						data35 = this41;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data35,0,data.data.length);
						data.data = data35;
					}
				}
				data.data[key34] = 1;
				var key35 = vidx++;
				if(!data.fixed) {
					if(key35 >= data.length) data.length = key35 + 1;
					if(data.data.length < data.length) {
						var data36;
						var this42;
						this42 = new Array(data.data.length + 10);
						data36 = this42;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data36,0,data.data.length);
						data.data = data36;
					}
				}
				data.data[key35] = 0;
				var key36 = vidx++;
				if(!data.fixed) {
					if(key36 >= data.length) data.length = key36 + 1;
					if(data.data.length < data.length) {
						var data37;
						var this43;
						this43 = new Array(data.data.length + 10);
						data37 = this43;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data37,0,data.data.length);
						data.data = data37;
					}
				}
				data.data[key36] = 1;
				var key37 = vidx++;
				if(!data.fixed) {
					if(key37 >= data.length) data.length = key37 + 1;
					if(data.data.length < data.length) {
						var data38;
						var this44;
						this44 = new Array(data.data.length + 10);
						data38 = this44;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data38,0,data.data.length);
						data.data = data38;
					}
				}
				data.data[key37] = 0;
				var key38 = vidx++;
				if(!data.fixed) {
					if(key38 >= data.length) data.length = key38 + 1;
					if(data.data.length < data.length) {
						var data39;
						var this45;
						this45 = new Array(data.data.length + 10);
						data39 = this45;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data39,0,data.data.length);
						data.data = data39;
					}
				}
				data.data[key38] = 0;
				vidx += skip;
				var key39 = vidx++;
				if(!data.fixed) {
					if(key39 >= data.length) data.length = key39 + 1;
					if(data.data.length < data.length) {
						var data40;
						var this46;
						this46 = new Array(data.data.length + 10);
						data40 = this46;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data40,0,data.data.length);
						data.data = data40;
					}
				}
				data.data[key39] = outer_pos;
				var key40 = vidx++;
				if(!data.fixed) {
					if(key40 >= data.length) data.length = key40 + 1;
					if(data.data.length < data.length) {
						var data41;
						var this47;
						this47 = new Array(data.data.length + 10);
						data41 = this47;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data41,0,data.data.length);
						data.data = data41;
					}
				}
				data.data[key40] = -hh;
				var key41 = vidx++;
				if(!data.fixed) {
					if(key41 >= data.length) data.length = key41 + 1;
					if(data.data.length < data.length) {
						var data42;
						var this48;
						this48 = new Array(data.data.length + 10);
						data42 = this48;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data42,0,data.data.length);
						data.data = data42;
					}
				}
				data.data[key41] = -hd + j * dd;
				var key42 = vidx++;
				if(!data.fixed) {
					if(key42 >= data.length) data.length = key42 + 1;
					if(data.data.length < data.length) {
						var data43;
						var this49;
						this49 = new Array(data.data.length + 10);
						data43 = this49;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data43,0,data.data.length);
						data.data = data43;
					}
				}
				data.data[key42] = 0;
				var key43 = vidx++;
				if(!data.fixed) {
					if(key43 >= data.length) data.length = key43 + 1;
					if(data.data.length < data.length) {
						var data44;
						var this50;
						this50 = new Array(data.data.length + 10);
						data44 = this50;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data44,0,data.data.length);
						data.data = data44;
					}
				}
				data.data[key43] = -1;
				var key44 = vidx++;
				if(!data.fixed) {
					if(key44 >= data.length) data.length = key44 + 1;
					if(data.data.length < data.length) {
						var data45;
						var this51;
						this51 = new Array(data.data.length + 10);
						data45 = this51;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data45,0,data.data.length);
						data.data = data45;
					}
				}
				data.data[key44] = 0;
				var key45 = vidx++;
				if(!data.fixed) {
					if(key45 >= data.length) data.length = key45 + 1;
					if(data.data.length < data.length) {
						var data46;
						var this52;
						this52 = new Array(data.data.length + 10);
						data46 = this52;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data46,0,data.data.length);
						data.data = data46;
					}
				}
				data.data[key45] = 1;
				var key46 = vidx++;
				if(!data.fixed) {
					if(key46 >= data.length) data.length = key46 + 1;
					if(data.data.length < data.length) {
						var data47;
						var this53;
						this53 = new Array(data.data.length + 10);
						data47 = this53;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data47,0,data.data.length);
						data.data = data47;
					}
				}
				data.data[key46] = 0;
				var key47 = vidx++;
				if(!data.fixed) {
					if(key47 >= data.length) data.length = key47 + 1;
					if(data.data.length < data.length) {
						var data48;
						var this54;
						this54 = new Array(data.data.length + 10);
						data48 = this54;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data48,0,data.data.length);
						data.data = data48;
					}
				}
				data.data[key47] = 0;
				vidx += skip;
				if(i > 0 && j > 0) {
					tl = inc + 2 * ((i - 1) * (this._segmentsD + 1) + (j - 1)) | 0;
					tr = inc + 2 * (i * (this._segmentsD + 1) + (j - 1)) | 0;
					bl = tl + 2;
					br = tr + 2;
					var key48 = fidx++;
					if(!indices.fixed) {
						if(key48 >= indices.length) indices.length = key48 + 1;
						if(indices.data.length < indices.length) {
							var data49;
							var this55;
							this55 = new Array(indices.data.length + 10);
							data49 = this55;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data49,0,indices.data.length);
							indices.data = data49;
						}
					}
					indices.data[key48] = tl;
					var key49 = fidx++;
					if(!indices.fixed) {
						if(key49 >= indices.length) indices.length = key49 + 1;
						if(indices.data.length < indices.length) {
							var data50;
							var this56;
							this56 = new Array(indices.data.length + 10);
							data50 = this56;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data50,0,indices.data.length);
							indices.data = data50;
						}
					}
					indices.data[key49] = bl;
					var key50 = fidx++;
					if(!indices.fixed) {
						if(key50 >= indices.length) indices.length = key50 + 1;
						if(indices.data.length < indices.length) {
							var data51;
							var this57;
							this57 = new Array(indices.data.length + 10);
							data51 = this57;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data51,0,indices.data.length);
							indices.data = data51;
						}
					}
					indices.data[key50] = br;
					var key51 = fidx++;
					if(!indices.fixed) {
						if(key51 >= indices.length) indices.length = key51 + 1;
						if(indices.data.length < indices.length) {
							var data52;
							var this58;
							this58 = new Array(indices.data.length + 10);
							data52 = this58;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data52,0,indices.data.length);
							indices.data = data52;
						}
					}
					indices.data[key51] = tl;
					var key52 = fidx++;
					if(!indices.fixed) {
						if(key52 >= indices.length) indices.length = key52 + 1;
						if(indices.data.length < indices.length) {
							var data53;
							var this59;
							this59 = new Array(indices.data.length + 10);
							data53 = this59;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data53,0,indices.data.length);
							indices.data = data53;
						}
					}
					indices.data[key52] = br;
					var key53 = fidx++;
					if(!indices.fixed) {
						if(key53 >= indices.length) indices.length = key53 + 1;
						if(indices.data.length < indices.length) {
							var data54;
							var this60;
							this60 = new Array(indices.data.length + 10);
							data54 = this60;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data54,0,indices.data.length);
							indices.data = data54;
						}
					}
					indices.data[key53] = tr;
					var key54 = fidx++;
					if(!indices.fixed) {
						if(key54 >= indices.length) indices.length = key54 + 1;
						if(indices.data.length < indices.length) {
							var data55;
							var this61;
							this61 = new Array(indices.data.length + 10);
							data55 = this61;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data55,0,indices.data.length);
							indices.data = data55;
						}
					}
					indices.data[key54] = tr + 1;
					var key55 = fidx++;
					if(!indices.fixed) {
						if(key55 >= indices.length) indices.length = key55 + 1;
						if(indices.data.length < indices.length) {
							var data56;
							var this62;
							this62 = new Array(indices.data.length + 10);
							data56 = this62;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data56,0,indices.data.length);
							indices.data = data56;
						}
					}
					indices.data[key55] = br + 1;
					var key56 = fidx++;
					if(!indices.fixed) {
						if(key56 >= indices.length) indices.length = key56 + 1;
						if(indices.data.length < indices.length) {
							var data57;
							var this63;
							this63 = new Array(indices.data.length + 10);
							data57 = this63;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data57,0,indices.data.length);
							indices.data = data57;
						}
					}
					indices.data[key56] = bl + 1;
					var key57 = fidx++;
					if(!indices.fixed) {
						if(key57 >= indices.length) indices.length = key57 + 1;
						if(indices.data.length < indices.length) {
							var data58;
							var this64;
							this64 = new Array(indices.data.length + 10);
							data58 = this64;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data58,0,indices.data.length);
							indices.data = data58;
						}
					}
					indices.data[key57] = tr + 1;
					var key58 = fidx++;
					if(!indices.fixed) {
						if(key58 >= indices.length) indices.length = key58 + 1;
						if(indices.data.length < indices.length) {
							var data59;
							var this65;
							this65 = new Array(indices.data.length + 10);
							data59 = this65;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data59,0,indices.data.length);
							indices.data = data59;
						}
					}
					indices.data[key58] = bl + 1;
					var key59 = fidx++;
					if(!indices.fixed) {
						if(key59 >= indices.length) indices.length = key59 + 1;
						if(indices.data.length < indices.length) {
							var data60;
							var this66;
							this66 = new Array(indices.data.length + 10);
							data60 = this66;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data60,0,indices.data.length);
							indices.data = data60;
						}
					}
					indices.data[key59] = tl + 1;
				}
				j++;
			}
			i++;
		}
		inc += 2 * (this._segmentsW + 1) * (this._segmentsD + 1) | 0;
		i = 0;
		while(i <= this._segmentsD) {
			outer_pos = hd - i * dd;
			j = 0;
			while(j <= this._segmentsH) {
				var key60 = vidx++;
				if(!data.fixed) {
					if(key60 >= data.length) data.length = key60 + 1;
					if(data.data.length < data.length) {
						var data61;
						var this67;
						this67 = new Array(data.data.length + 10);
						data61 = this67;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data61,0,data.data.length);
						data.data = data61;
					}
				}
				data.data[key60] = -hw;
				var key61 = vidx++;
				if(!data.fixed) {
					if(key61 >= data.length) data.length = key61 + 1;
					if(data.data.length < data.length) {
						var data62;
						var this68;
						this68 = new Array(data.data.length + 10);
						data62 = this68;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data62,0,data.data.length);
						data.data = data62;
					}
				}
				data.data[key61] = -hh + j * dh;
				var key62 = vidx++;
				if(!data.fixed) {
					if(key62 >= data.length) data.length = key62 + 1;
					if(data.data.length < data.length) {
						var data63;
						var this69;
						this69 = new Array(data.data.length + 10);
						data63 = this69;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data63,0,data.data.length);
						data.data = data63;
					}
				}
				data.data[key62] = outer_pos;
				var key63 = vidx++;
				if(!data.fixed) {
					if(key63 >= data.length) data.length = key63 + 1;
					if(data.data.length < data.length) {
						var data64;
						var this70;
						this70 = new Array(data.data.length + 10);
						data64 = this70;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data64,0,data.data.length);
						data.data = data64;
					}
				}
				data.data[key63] = -1;
				var key64 = vidx++;
				if(!data.fixed) {
					if(key64 >= data.length) data.length = key64 + 1;
					if(data.data.length < data.length) {
						var data65;
						var this71;
						this71 = new Array(data.data.length + 10);
						data65 = this71;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data65,0,data.data.length);
						data.data = data65;
					}
				}
				data.data[key64] = 0;
				var key65 = vidx++;
				if(!data.fixed) {
					if(key65 >= data.length) data.length = key65 + 1;
					if(data.data.length < data.length) {
						var data66;
						var this72;
						this72 = new Array(data.data.length + 10);
						data66 = this72;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data66,0,data.data.length);
						data.data = data66;
					}
				}
				data.data[key65] = 0;
				var key66 = vidx++;
				if(!data.fixed) {
					if(key66 >= data.length) data.length = key66 + 1;
					if(data.data.length < data.length) {
						var data67;
						var this73;
						this73 = new Array(data.data.length + 10);
						data67 = this73;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data67,0,data.data.length);
						data.data = data67;
					}
				}
				data.data[key66] = 0;
				var key67 = vidx++;
				if(!data.fixed) {
					if(key67 >= data.length) data.length = key67 + 1;
					if(data.data.length < data.length) {
						var data68;
						var this74;
						this74 = new Array(data.data.length + 10);
						data68 = this74;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data68,0,data.data.length);
						data.data = data68;
					}
				}
				data.data[key67] = 0;
				var key68 = vidx++;
				if(!data.fixed) {
					if(key68 >= data.length) data.length = key68 + 1;
					if(data.data.length < data.length) {
						var data69;
						var this75;
						this75 = new Array(data.data.length + 10);
						data69 = this75;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data69,0,data.data.length);
						data.data = data69;
					}
				}
				data.data[key68] = -1;
				vidx += skip;
				var key69 = vidx++;
				if(!data.fixed) {
					if(key69 >= data.length) data.length = key69 + 1;
					if(data.data.length < data.length) {
						var data70;
						var this76;
						this76 = new Array(data.data.length + 10);
						data70 = this76;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data70,0,data.data.length);
						data.data = data70;
					}
				}
				data.data[key69] = hw;
				var key70 = vidx++;
				if(!data.fixed) {
					if(key70 >= data.length) data.length = key70 + 1;
					if(data.data.length < data.length) {
						var data71;
						var this77;
						this77 = new Array(data.data.length + 10);
						data71 = this77;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data71,0,data.data.length);
						data.data = data71;
					}
				}
				data.data[key70] = -hh + j * dh;
				var key71 = vidx++;
				if(!data.fixed) {
					if(key71 >= data.length) data.length = key71 + 1;
					if(data.data.length < data.length) {
						var data72;
						var this78;
						this78 = new Array(data.data.length + 10);
						data72 = this78;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data72,0,data.data.length);
						data.data = data72;
					}
				}
				data.data[key71] = outer_pos;
				var key72 = vidx++;
				if(!data.fixed) {
					if(key72 >= data.length) data.length = key72 + 1;
					if(data.data.length < data.length) {
						var data73;
						var this79;
						this79 = new Array(data.data.length + 10);
						data73 = this79;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data73,0,data.data.length);
						data.data = data73;
					}
				}
				data.data[key72] = 1;
				var key73 = vidx++;
				if(!data.fixed) {
					if(key73 >= data.length) data.length = key73 + 1;
					if(data.data.length < data.length) {
						var data74;
						var this80;
						this80 = new Array(data.data.length + 10);
						data74 = this80;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data74,0,data.data.length);
						data.data = data74;
					}
				}
				data.data[key73] = 0;
				var key74 = vidx++;
				if(!data.fixed) {
					if(key74 >= data.length) data.length = key74 + 1;
					if(data.data.length < data.length) {
						var data75;
						var this81;
						this81 = new Array(data.data.length + 10);
						data75 = this81;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data75,0,data.data.length);
						data.data = data75;
					}
				}
				data.data[key74] = 0;
				var key75 = vidx++;
				if(!data.fixed) {
					if(key75 >= data.length) data.length = key75 + 1;
					if(data.data.length < data.length) {
						var data76;
						var this82;
						this82 = new Array(data.data.length + 10);
						data76 = this82;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data76,0,data.data.length);
						data.data = data76;
					}
				}
				data.data[key75] = 0;
				var key76 = vidx++;
				if(!data.fixed) {
					if(key76 >= data.length) data.length = key76 + 1;
					if(data.data.length < data.length) {
						var data77;
						var this83;
						this83 = new Array(data.data.length + 10);
						data77 = this83;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data77,0,data.data.length);
						data.data = data77;
					}
				}
				data.data[key76] = 0;
				var key77 = vidx++;
				if(!data.fixed) {
					if(key77 >= data.length) data.length = key77 + 1;
					if(data.data.length < data.length) {
						var data78;
						var this84;
						this84 = new Array(data.data.length + 10);
						data78 = this84;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data78,0,data.data.length);
						data.data = data78;
					}
				}
				data.data[key77] = 1;
				vidx += skip;
				if(i > 0 && j > 0) {
					tl = inc + 2 * ((i - 1) * (this._segmentsH + 1) + (j - 1)) | 0;
					tr = inc + 2 * (i * (this._segmentsH + 1) + (j - 1)) | 0;
					bl = tl + 2;
					br = tr + 2;
					var key78 = fidx++;
					if(!indices.fixed) {
						if(key78 >= indices.length) indices.length = key78 + 1;
						if(indices.data.length < indices.length) {
							var data79;
							var this85;
							this85 = new Array(indices.data.length + 10);
							data79 = this85;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data79,0,indices.data.length);
							indices.data = data79;
						}
					}
					indices.data[key78] = tl;
					var key79 = fidx++;
					if(!indices.fixed) {
						if(key79 >= indices.length) indices.length = key79 + 1;
						if(indices.data.length < indices.length) {
							var data80;
							var this86;
							this86 = new Array(indices.data.length + 10);
							data80 = this86;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data80,0,indices.data.length);
							indices.data = data80;
						}
					}
					indices.data[key79] = bl;
					var key80 = fidx++;
					if(!indices.fixed) {
						if(key80 >= indices.length) indices.length = key80 + 1;
						if(indices.data.length < indices.length) {
							var data81;
							var this87;
							this87 = new Array(indices.data.length + 10);
							data81 = this87;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data81,0,indices.data.length);
							indices.data = data81;
						}
					}
					indices.data[key80] = br;
					var key81 = fidx++;
					if(!indices.fixed) {
						if(key81 >= indices.length) indices.length = key81 + 1;
						if(indices.data.length < indices.length) {
							var data82;
							var this88;
							this88 = new Array(indices.data.length + 10);
							data82 = this88;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data82,0,indices.data.length);
							indices.data = data82;
						}
					}
					indices.data[key81] = tl;
					var key82 = fidx++;
					if(!indices.fixed) {
						if(key82 >= indices.length) indices.length = key82 + 1;
						if(indices.data.length < indices.length) {
							var data83;
							var this89;
							this89 = new Array(indices.data.length + 10);
							data83 = this89;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data83,0,indices.data.length);
							indices.data = data83;
						}
					}
					indices.data[key82] = br;
					var key83 = fidx++;
					if(!indices.fixed) {
						if(key83 >= indices.length) indices.length = key83 + 1;
						if(indices.data.length < indices.length) {
							var data84;
							var this90;
							this90 = new Array(indices.data.length + 10);
							data84 = this90;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data84,0,indices.data.length);
							indices.data = data84;
						}
					}
					indices.data[key83] = tr;
					var key84 = fidx++;
					if(!indices.fixed) {
						if(key84 >= indices.length) indices.length = key84 + 1;
						if(indices.data.length < indices.length) {
							var data85;
							var this91;
							this91 = new Array(indices.data.length + 10);
							data85 = this91;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data85,0,indices.data.length);
							indices.data = data85;
						}
					}
					indices.data[key84] = tr + 1;
					var key85 = fidx++;
					if(!indices.fixed) {
						if(key85 >= indices.length) indices.length = key85 + 1;
						if(indices.data.length < indices.length) {
							var data86;
							var this92;
							this92 = new Array(indices.data.length + 10);
							data86 = this92;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data86,0,indices.data.length);
							indices.data = data86;
						}
					}
					indices.data[key85] = br + 1;
					var key86 = fidx++;
					if(!indices.fixed) {
						if(key86 >= indices.length) indices.length = key86 + 1;
						if(indices.data.length < indices.length) {
							var data87;
							var this93;
							this93 = new Array(indices.data.length + 10);
							data87 = this93;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data87,0,indices.data.length);
							indices.data = data87;
						}
					}
					indices.data[key86] = bl + 1;
					var key87 = fidx++;
					if(!indices.fixed) {
						if(key87 >= indices.length) indices.length = key87 + 1;
						if(indices.data.length < indices.length) {
							var data88;
							var this94;
							this94 = new Array(indices.data.length + 10);
							data88 = this94;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data88,0,indices.data.length);
							indices.data = data88;
						}
					}
					indices.data[key87] = tr + 1;
					var key88 = fidx++;
					if(!indices.fixed) {
						if(key88 >= indices.length) indices.length = key88 + 1;
						if(indices.data.length < indices.length) {
							var data89;
							var this95;
							this95 = new Array(indices.data.length + 10);
							data89 = this95;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data89,0,indices.data.length);
							indices.data = data89;
						}
					}
					indices.data[key88] = bl + 1;
					var key89 = fidx++;
					if(!indices.fixed) {
						if(key89 >= indices.length) indices.length = key89 + 1;
						if(indices.data.length < indices.length) {
							var data90;
							var this96;
							this96 = new Array(indices.data.length + 10);
							data90 = this96;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data90,0,indices.data.length);
							indices.data = data90;
						}
					}
					indices.data[key89] = tl + 1;
				}
				j++;
			}
			i++;
		}
		target.updateData(data);
		target.updateIndexData(indices);
	}
	,buildUVs: function(target) {
		var i = 0;
		var j;
		var uidx;
		var data;
		var u_tile_dim;
		var v_tile_dim;
		var u_tile_step;
		var v_tile_step;
		var tl0u;
		var tl0v;
		var tl1u;
		var tl1v;
		var du;
		var dv;
		var stride = target.get_UVStride();
		var numUvs = ((this._segmentsW + 1) * (this._segmentsH + 1) + (this._segmentsW + 1) * (this._segmentsD + 1) + (this._segmentsH + 1) * (this._segmentsD + 1)) * 2 * stride | 0;
		var skip = stride - 2;
		if(target.get_UVData() != null && numUvs == (function($this) {
			var $r;
			var this1 = target.get_UVData();
			$r = this1.length;
			return $r;
		}(this))) data = target.get_UVData(); else {
			data = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
				var $r;
				var this2;
				this2 = new openfl.VectorData();
				{
					var this3;
					this3 = new Array(0);
					this2.data = this3;
				}
				this2.length = 0;
				this2.fixed = false;
				$r = this2;
				return $r;
			}(this))),numUvs,0);
			this.invalidateGeometry();
		}
		if(this._tile6) {
			u_tile_dim = u_tile_step = 0.33333333333333331;
			v_tile_dim = v_tile_step = 0.5;
		} else {
			u_tile_dim = v_tile_dim = 1;
			u_tile_step = v_tile_step = 0;
		}
		uidx = target.get_UVOffset();
		tl0u = u_tile_step;
		tl0v = v_tile_step;
		tl1u = 2 * u_tile_step;
		tl1v = 0 * v_tile_step;
		du = u_tile_dim / this._segmentsW;
		dv = v_tile_dim / this._segmentsH;
		i = 0;
		while(i <= this._segmentsW) {
			j = 0;
			while(j <= this._segmentsH) {
				var key = uidx++;
				var value = (tl0u + i * du) * target.get_scaleU();
				if(!data.fixed) {
					if(key >= data.length) data.length = key + 1;
					if(data.data.length < data.length) {
						var data1;
						var this4;
						this4 = new Array(data.data.length + 10);
						data1 = this4;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data1,0,data.data.length);
						data.data = data1;
					}
				}
				data.data[key] = value;
				var key1 = uidx++;
				var value1 = (tl0v + (v_tile_dim - j * dv)) * target.get_scaleV();
				if(!data.fixed) {
					if(key1 >= data.length) data.length = key1 + 1;
					if(data.data.length < data.length) {
						var data2;
						var this5;
						this5 = new Array(data.data.length + 10);
						data2 = this5;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data2,0,data.data.length);
						data.data = data2;
					}
				}
				data.data[key1] = value1;
				uidx += skip;
				var key2 = uidx++;
				var value2 = (tl1u + (u_tile_dim - i * du)) * target.get_scaleU();
				if(!data.fixed) {
					if(key2 >= data.length) data.length = key2 + 1;
					if(data.data.length < data.length) {
						var data3;
						var this6;
						this6 = new Array(data.data.length + 10);
						data3 = this6;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data3,0,data.data.length);
						data.data = data3;
					}
				}
				data.data[key2] = value2;
				var key3 = uidx++;
				var value3 = (tl1v + (v_tile_dim - j * dv)) * target.get_scaleV();
				if(!data.fixed) {
					if(key3 >= data.length) data.length = key3 + 1;
					if(data.data.length < data.length) {
						var data4;
						var this7;
						this7 = new Array(data.data.length + 10);
						data4 = this7;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data4,0,data.data.length);
						data.data = data4;
					}
				}
				data.data[key3] = value3;
				uidx += skip;
				j++;
			}
			i++;
		}
		tl0u = u_tile_step;
		tl0v = 0 * v_tile_step;
		tl1u = 0 * u_tile_step;
		tl1v = 0 * v_tile_step;
		du = u_tile_dim / this._segmentsW;
		dv = v_tile_dim / this._segmentsD;
		i = 0;
		while(i <= this._segmentsW) {
			j = 0;
			while(j <= this._segmentsD) {
				var key4 = uidx++;
				var value4 = (tl0u + i * du) * target.get_scaleU();
				if(!data.fixed) {
					if(key4 >= data.length) data.length = key4 + 1;
					if(data.data.length < data.length) {
						var data5;
						var this8;
						this8 = new Array(data.data.length + 10);
						data5 = this8;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data5,0,data.data.length);
						data.data = data5;
					}
				}
				data.data[key4] = value4;
				var key5 = uidx++;
				var value5 = (tl0v + (v_tile_dim - j * dv)) * target.get_scaleV();
				if(!data.fixed) {
					if(key5 >= data.length) data.length = key5 + 1;
					if(data.data.length < data.length) {
						var data6;
						var this9;
						this9 = new Array(data.data.length + 10);
						data6 = this9;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data6,0,data.data.length);
						data.data = data6;
					}
				}
				data.data[key5] = value5;
				uidx += skip;
				var key6 = uidx++;
				var value6 = (tl1u + i * du) * target.get_scaleU();
				if(!data.fixed) {
					if(key6 >= data.length) data.length = key6 + 1;
					if(data.data.length < data.length) {
						var data7;
						var this10;
						this10 = new Array(data.data.length + 10);
						data7 = this10;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data7,0,data.data.length);
						data.data = data7;
					}
				}
				data.data[key6] = value6;
				var key7 = uidx++;
				var value7 = (tl1v + j * dv) * target.get_scaleV();
				if(!data.fixed) {
					if(key7 >= data.length) data.length = key7 + 1;
					if(data.data.length < data.length) {
						var data8;
						var this11;
						this11 = new Array(data.data.length + 10);
						data8 = this11;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data8,0,data.data.length);
						data.data = data8;
					}
				}
				data.data[key7] = value7;
				uidx += skip;
				j++;
			}
			i++;
		}
		tl0u = 0 * u_tile_step;
		tl0v = v_tile_step;
		tl1u = 2 * u_tile_step;
		tl1v = v_tile_step;
		du = u_tile_dim / this._segmentsD;
		dv = v_tile_dim / this._segmentsH;
		i = 0;
		while(i <= this._segmentsD) {
			j = 0;
			while(j <= this._segmentsH) {
				var key8 = uidx++;
				var value8 = (tl0u + i * du) * target.get_scaleU();
				if(!data.fixed) {
					if(key8 >= data.length) data.length = key8 + 1;
					if(data.data.length < data.length) {
						var data9;
						var this12;
						this12 = new Array(data.data.length + 10);
						data9 = this12;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data9,0,data.data.length);
						data.data = data9;
					}
				}
				data.data[key8] = value8;
				var key9 = uidx++;
				var value9 = (tl0v + (v_tile_dim - j * dv)) * target.get_scaleV();
				if(!data.fixed) {
					if(key9 >= data.length) data.length = key9 + 1;
					if(data.data.length < data.length) {
						var data10;
						var this13;
						this13 = new Array(data.data.length + 10);
						data10 = this13;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data10,0,data.data.length);
						data.data = data10;
					}
				}
				data.data[key9] = value9;
				uidx += skip;
				var key10 = uidx++;
				var value10 = (tl1u + (u_tile_dim - i * du)) * target.get_scaleU();
				if(!data.fixed) {
					if(key10 >= data.length) data.length = key10 + 1;
					if(data.data.length < data.length) {
						var data11;
						var this14;
						this14 = new Array(data.data.length + 10);
						data11 = this14;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data11,0,data.data.length);
						data.data = data11;
					}
				}
				data.data[key10] = value10;
				var key11 = uidx++;
				var value11 = (tl1v + (v_tile_dim - j * dv)) * target.get_scaleV();
				if(!data.fixed) {
					if(key11 >= data.length) data.length = key11 + 1;
					if(data.data.length < data.length) {
						var data12;
						var this15;
						this15 = new Array(data.data.length + 10);
						data12 = this15;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data12,0,data.data.length);
						data.data = data12;
					}
				}
				data.data[key11] = value11;
				uidx += skip;
				j++;
			}
			i++;
		}
		target.updateData(data);
	}
	,__class__: away3d.primitives.CubeGeometry
	,__properties__: $extend(away3d.primitives.PrimitiveBase.prototype.__properties__,{set_segmentsD:"set_segmentsD",get_segmentsD:"get_segmentsD",set_segmentsH:"set_segmentsH",get_segmentsH:"get_segmentsH",set_segmentsW:"set_segmentsW",get_segmentsW:"get_segmentsW",set_tile6:"set_tile6",get_tile6:"get_tile6",set_depth:"set_depth",get_depth:"get_depth",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width"})
});
away3d.primitives.data = {};
away3d.primitives.data.Segment = function(start,end,anchor,colorStart,colorEnd,thickness) {
	if(thickness == null) thickness = 1;
	if(colorEnd == null) colorEnd = 3355443;
	if(colorStart == null) colorStart = 3355443;
	this._index = -1;
	this._subSetIndex = -1;
	anchor = null;
	this._thickness = thickness * .5;
	this._start = start;
	this._end = end;
	this.set_startColor(colorStart);
	this.set_endColor(colorEnd);
};
$hxClasses["away3d.primitives.data.Segment"] = away3d.primitives.data.Segment;
away3d.primitives.data.Segment.__name__ = ["away3d","primitives","data","Segment"];
away3d.primitives.data.Segment.prototype = {
	_segmentsBase: null
	,_thickness: null
	,_start: null
	,_end: null
	,_startR: null
	,_startG: null
	,_startB: null
	,_endR: null
	,_endG: null
	,_endB: null
	,_index: null
	,_subSetIndex: null
	,_startColor: null
	,_endColor: null
	,updateSegment: function(start,end,anchor,colorStart,colorEnd,thickness) {
		if(thickness == null) thickness = 1;
		if(colorEnd == null) colorEnd = 3355443;
		if(colorStart == null) colorStart = 3355443;
		anchor = null;
		this._start = start;
		this._end = end;
		if(this._startColor != colorStart) this.set_startColor(colorStart);
		if(this._endColor != colorEnd) this.set_endColor(colorEnd);
		this._thickness = thickness * .5;
		this.update();
	}
	,get_start: function() {
		return this._start;
	}
	,set_start: function(value) {
		this._start = value;
		this.update();
		return value;
	}
	,get_end: function() {
		return this._end;
	}
	,set_end: function(value) {
		this._end = value;
		this.update();
		return value;
	}
	,get_thickness: function() {
		return this._thickness * 2;
	}
	,set_thickness: function(value) {
		this._thickness = value * .5;
		this.update();
		return value;
	}
	,get_startColor: function() {
		return this._startColor;
	}
	,set_startColor: function(color) {
		this._startR = (color >> 16 & 255) / 255;
		this._startG = (color >> 8 & 255) / 255;
		this._startB = (color & 255) / 255;
		this._startColor = color;
		this.update();
		return color;
	}
	,get_endColor: function() {
		return this._endColor;
	}
	,set_endColor: function(color) {
		this._endR = (color >> 16 & 255) / 255;
		this._endG = (color >> 8 & 255) / 255;
		this._endB = (color & 255) / 255;
		this._endColor = color;
		this.update();
		return color;
	}
	,dispose: function() {
		this._start = null;
		this._end = null;
	}
	,get_index: function() {
		return this._index;
	}
	,set_index: function(ind) {
		this._index = ind;
		return ind;
	}
	,get_subSetIndex: function() {
		return this._subSetIndex;
	}
	,set_subSetIndex: function(ind) {
		this._subSetIndex = ind;
		return ind;
	}
	,set_segmentsBase: function(segBase) {
		this._segmentsBase = segBase;
		return segBase;
	}
	,update: function() {
		if(this._segmentsBase == null) return;
		this._segmentsBase.updateSegment(this);
	}
	,__class__: away3d.primitives.data.Segment
	,__properties__: {set_segmentsBase:"set_segmentsBase",set_subSetIndex:"set_subSetIndex",get_subSetIndex:"get_subSetIndex",set_index:"set_index",get_index:"get_index",set_endColor:"set_endColor",get_endColor:"get_endColor",set_startColor:"set_startColor",get_startColor:"get_startColor",set_thickness:"set_thickness",get_thickness:"get_thickness",set_end:"set_end",get_end:"get_end",set_start:"set_start",get_start:"get_start"}
};
away3d.primitives.LineSegment = function(v0,v1,color0,color1,thickness) {
	if(thickness == null) thickness = 1;
	if(color1 == null) color1 = 3355443;
	if(color0 == null) color0 = 3355443;
	this.TYPE = "line";
	away3d.primitives.data.Segment.call(this,v0,v1,null,color0,color1,thickness);
};
$hxClasses["away3d.primitives.LineSegment"] = away3d.primitives.LineSegment;
away3d.primitives.LineSegment.__name__ = ["away3d","primitives","LineSegment"];
away3d.primitives.LineSegment.__super__ = away3d.primitives.data.Segment;
away3d.primitives.LineSegment.prototype = $extend(away3d.primitives.data.Segment.prototype,{
	TYPE: null
	,__class__: away3d.primitives.LineSegment
});
away3d.primitives.PlaneGeometry = function(width,height,segmentsW,segmentsH,yUp,doubleSided) {
	if(doubleSided == null) doubleSided = false;
	if(yUp == null) yUp = true;
	if(segmentsH == null) segmentsH = 1;
	if(segmentsW == null) segmentsW = 1;
	if(height == null) height = 100;
	if(width == null) width = 100;
	away3d.primitives.PrimitiveBase.call(this);
	this._segmentsW = segmentsW;
	this._segmentsH = segmentsH;
	this._yUp = yUp;
	this._width = width;
	this._height = height;
	this._doubleSided = doubleSided;
};
$hxClasses["away3d.primitives.PlaneGeometry"] = away3d.primitives.PlaneGeometry;
away3d.primitives.PlaneGeometry.__name__ = ["away3d","primitives","PlaneGeometry"];
away3d.primitives.PlaneGeometry.__super__ = away3d.primitives.PrimitiveBase;
away3d.primitives.PlaneGeometry.prototype = $extend(away3d.primitives.PrimitiveBase.prototype,{
	_segmentsW: null
	,_segmentsH: null
	,_yUp: null
	,_width: null
	,_height: null
	,_doubleSided: null
	,get_segmentsW: function() {
		return this._segmentsW;
	}
	,set_segmentsW: function(value) {
		this._segmentsW = value;
		this.invalidateGeometry();
		this.invalidateUVs();
		return value;
	}
	,get_segmentsH: function() {
		return this._segmentsH;
	}
	,set_segmentsH: function(value) {
		this._segmentsH = value;
		this.invalidateGeometry();
		this.invalidateUVs();
		return value;
	}
	,get_yUp: function() {
		return this._yUp;
	}
	,set_yUp: function(value) {
		this._yUp = value;
		this.invalidateGeometry();
		return value;
	}
	,get_doubleSided: function() {
		return this._doubleSided;
	}
	,set_doubleSided: function(value) {
		this._doubleSided = value;
		this.invalidateGeometry();
		return value;
	}
	,get_width: function() {
		return this._width;
	}
	,set_width: function(value) {
		this._width = value;
		this.invalidateGeometry();
		return value;
	}
	,get_height: function() {
		return this._height;
	}
	,set_height: function(value) {
		this._height = value;
		this.invalidateGeometry();
		return value;
	}
	,buildGeometry: function(target) {
		var data;
		var indices;
		var x;
		var y;
		var numIndices;
		var base;
		var tw = this._segmentsW + 1;
		var numVertices = (this._segmentsH + 1) * tw;
		var stride = target.get_vertexStride();
		var skip = stride - 9;
		if(this._doubleSided) numVertices *= 2;
		numIndices = this._segmentsH * this._segmentsW * 6;
		if(this._doubleSided) numIndices <<= 1;
		if(numVertices == target.get_numVertices()) {
			data = target.get_vertexData();
			indices = target.get_indexData();
			if(indices == null) indices = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
				var $r;
				var this1;
				this1 = new openfl.VectorData();
				{
					var this2;
					this2 = new Array(0);
					this1.data = this2;
				}
				this1.length = 0;
				this1.fixed = false;
				$r = this1;
				return $r;
			}(this))),numIndices,0);
		} else {
			data = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
				var $r;
				var this3;
				this3 = new openfl.VectorData();
				{
					var this4;
					this4 = new Array(0);
					this3.data = this4;
				}
				this3.length = 0;
				this3.fixed = false;
				$r = this3;
				return $r;
			}(this))),numVertices * stride,0);
			indices = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
				var $r;
				var this5;
				this5 = new openfl.VectorData();
				{
					var this6;
					this6 = new Array(0);
					this5.data = this6;
				}
				this5.length = 0;
				this5.fixed = false;
				$r = this5;
				return $r;
			}(this))),numIndices,0);
			this.invalidateUVs();
		}
		numIndices = 0;
		var index = target.get_vertexOffset();
		var yi = 0;
		while(yi <= this._segmentsH) {
			var xi = 0;
			while(xi <= this._segmentsW) {
				x = (xi / this._segmentsW - .5) * this._width;
				y = (yi / this._segmentsH - .5) * this._height;
				var key = index++;
				if(!data.fixed) {
					if(key >= data.length) data.length = key + 1;
					if(data.data.length < data.length) {
						var data1;
						var this7;
						this7 = new Array(data.data.length + 10);
						data1 = this7;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data1,0,data.data.length);
						data.data = data1;
					}
				}
				data.data[key] = x;
				if(this._yUp) {
					var key1 = index++;
					if(!data.fixed) {
						if(key1 >= data.length) data.length = key1 + 1;
						if(data.data.length < data.length) {
							var data2;
							var this8;
							this8 = new Array(data.data.length + 10);
							data2 = this8;
							haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data2,0,data.data.length);
							data.data = data2;
						}
					}
					data.data[key1] = 0;
					var key2 = index++;
					if(!data.fixed) {
						if(key2 >= data.length) data.length = key2 + 1;
						if(data.data.length < data.length) {
							var data3;
							var this9;
							this9 = new Array(data.data.length + 10);
							data3 = this9;
							haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data3,0,data.data.length);
							data.data = data3;
						}
					}
					data.data[key2] = y;
				} else {
					var key3 = index++;
					if(!data.fixed) {
						if(key3 >= data.length) data.length = key3 + 1;
						if(data.data.length < data.length) {
							var data4;
							var this10;
							this10 = new Array(data.data.length + 10);
							data4 = this10;
							haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data4,0,data.data.length);
							data.data = data4;
						}
					}
					data.data[key3] = y;
					var key4 = index++;
					if(!data.fixed) {
						if(key4 >= data.length) data.length = key4 + 1;
						if(data.data.length < data.length) {
							var data5;
							var this11;
							this11 = new Array(data.data.length + 10);
							data5 = this11;
							haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data5,0,data.data.length);
							data.data = data5;
						}
					}
					data.data[key4] = 0;
				}
				var key5 = index++;
				if(!data.fixed) {
					if(key5 >= data.length) data.length = key5 + 1;
					if(data.data.length < data.length) {
						var data6;
						var this12;
						this12 = new Array(data.data.length + 10);
						data6 = this12;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data6,0,data.data.length);
						data.data = data6;
					}
				}
				data.data[key5] = 0;
				if(this._yUp) {
					var key6 = index++;
					if(!data.fixed) {
						if(key6 >= data.length) data.length = key6 + 1;
						if(data.data.length < data.length) {
							var data7;
							var this13;
							this13 = new Array(data.data.length + 10);
							data7 = this13;
							haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data7,0,data.data.length);
							data.data = data7;
						}
					}
					data.data[key6] = 1;
					var key7 = index++;
					if(!data.fixed) {
						if(key7 >= data.length) data.length = key7 + 1;
						if(data.data.length < data.length) {
							var data8;
							var this14;
							this14 = new Array(data.data.length + 10);
							data8 = this14;
							haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data8,0,data.data.length);
							data.data = data8;
						}
					}
					data.data[key7] = 0;
				} else {
					var key8 = index++;
					if(!data.fixed) {
						if(key8 >= data.length) data.length = key8 + 1;
						if(data.data.length < data.length) {
							var data9;
							var this15;
							this15 = new Array(data.data.length + 10);
							data9 = this15;
							haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data9,0,data.data.length);
							data.data = data9;
						}
					}
					data.data[key8] = 0;
					var key9 = index++;
					if(!data.fixed) {
						if(key9 >= data.length) data.length = key9 + 1;
						if(data.data.length < data.length) {
							var data10;
							var this16;
							this16 = new Array(data.data.length + 10);
							data10 = this16;
							haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data10,0,data.data.length);
							data.data = data10;
						}
					}
					data.data[key9] = -1;
				}
				var key10 = index++;
				if(!data.fixed) {
					if(key10 >= data.length) data.length = key10 + 1;
					if(data.data.length < data.length) {
						var data11;
						var this17;
						this17 = new Array(data.data.length + 10);
						data11 = this17;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data11,0,data.data.length);
						data.data = data11;
					}
				}
				data.data[key10] = 1;
				var key11 = index++;
				if(!data.fixed) {
					if(key11 >= data.length) data.length = key11 + 1;
					if(data.data.length < data.length) {
						var data12;
						var this18;
						this18 = new Array(data.data.length + 10);
						data12 = this18;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data12,0,data.data.length);
						data.data = data12;
					}
				}
				data.data[key11] = 0;
				var key12 = index++;
				if(!data.fixed) {
					if(key12 >= data.length) data.length = key12 + 1;
					if(data.data.length < data.length) {
						var data13;
						var this19;
						this19 = new Array(data.data.length + 10);
						data13 = this19;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data13,0,data.data.length);
						data.data = data13;
					}
				}
				data.data[key12] = 0;
				index += skip;
				if(this._doubleSided) {
					var i = 0;
					while(i < 3) {
						if(!data.fixed) {
							if(index >= data.length) data.length = index + 1;
							if(data.data.length < data.length) {
								var data14;
								var this20;
								this20 = new Array(data.data.length + 10);
								data14 = this20;
								haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data14,0,data.data.length);
								data.data = data14;
							}
						}
						data.data[index] = data.data[index - stride];
						++index;
						++i;
					}
					i = 0;
					while(i < 3) {
						if(!data.fixed) {
							if(index >= data.length) data.length = index + 1;
							if(data.data.length < data.length) {
								var data15;
								var this21;
								this21 = new Array(data.data.length + 10);
								data15 = this21;
								haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data15,0,data.data.length);
								data.data = data15;
							}
						}
						data.data[index] = -data.data[index - stride];
						++index;
						++i;
					}
					i = 0;
					while(i < 3) {
						if(!data.fixed) {
							if(index >= data.length) data.length = index + 1;
							if(data.data.length < data.length) {
								var data16;
								var this22;
								this22 = new Array(data.data.length + 10);
								data16 = this22;
								haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data16,0,data.data.length);
								data.data = data16;
							}
						}
						data.data[index] = -data.data[index - stride];
						++index;
						++i;
					}
					index += skip;
				}
				if(xi != this._segmentsW && yi != this._segmentsH) {
					base = xi + yi * tw;
					var mult;
					if(this._doubleSided) mult = 2; else mult = 1;
					var key13 = numIndices++;
					if(!indices.fixed) {
						if(key13 >= indices.length) indices.length = key13 + 1;
						if(indices.data.length < indices.length) {
							var data17;
							var this23;
							this23 = new Array(indices.data.length + 10);
							data17 = this23;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data17,0,indices.data.length);
							indices.data = data17;
						}
					}
					indices.data[key13] = base * mult;
					var key14 = numIndices++;
					if(!indices.fixed) {
						if(key14 >= indices.length) indices.length = key14 + 1;
						if(indices.data.length < indices.length) {
							var data18;
							var this24;
							this24 = new Array(indices.data.length + 10);
							data18 = this24;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data18,0,indices.data.length);
							indices.data = data18;
						}
					}
					indices.data[key14] = (base + tw) * mult;
					var key15 = numIndices++;
					if(!indices.fixed) {
						if(key15 >= indices.length) indices.length = key15 + 1;
						if(indices.data.length < indices.length) {
							var data19;
							var this25;
							this25 = new Array(indices.data.length + 10);
							data19 = this25;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data19,0,indices.data.length);
							indices.data = data19;
						}
					}
					indices.data[key15] = (base + tw + 1) * mult;
					var key16 = numIndices++;
					if(!indices.fixed) {
						if(key16 >= indices.length) indices.length = key16 + 1;
						if(indices.data.length < indices.length) {
							var data20;
							var this26;
							this26 = new Array(indices.data.length + 10);
							data20 = this26;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data20,0,indices.data.length);
							indices.data = data20;
						}
					}
					indices.data[key16] = base * mult;
					var key17 = numIndices++;
					if(!indices.fixed) {
						if(key17 >= indices.length) indices.length = key17 + 1;
						if(indices.data.length < indices.length) {
							var data21;
							var this27;
							this27 = new Array(indices.data.length + 10);
							data21 = this27;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data21,0,indices.data.length);
							indices.data = data21;
						}
					}
					indices.data[key17] = (base + tw + 1) * mult;
					var key18 = numIndices++;
					if(!indices.fixed) {
						if(key18 >= indices.length) indices.length = key18 + 1;
						if(indices.data.length < indices.length) {
							var data22;
							var this28;
							this28 = new Array(indices.data.length + 10);
							data22 = this28;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data22,0,indices.data.length);
							indices.data = data22;
						}
					}
					indices.data[key18] = (base + 1) * mult;
					if(this._doubleSided) {
						var key19 = numIndices++;
						if(!indices.fixed) {
							if(key19 >= indices.length) indices.length = key19 + 1;
							if(indices.data.length < indices.length) {
								var data23;
								var this29;
								this29 = new Array(indices.data.length + 10);
								data23 = this29;
								haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data23,0,indices.data.length);
								indices.data = data23;
							}
						}
						indices.data[key19] = (base + tw + 1) * mult + 1;
						var key20 = numIndices++;
						if(!indices.fixed) {
							if(key20 >= indices.length) indices.length = key20 + 1;
							if(indices.data.length < indices.length) {
								var data24;
								var this30;
								this30 = new Array(indices.data.length + 10);
								data24 = this30;
								haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data24,0,indices.data.length);
								indices.data = data24;
							}
						}
						indices.data[key20] = (base + tw) * mult + 1;
						var key21 = numIndices++;
						if(!indices.fixed) {
							if(key21 >= indices.length) indices.length = key21 + 1;
							if(indices.data.length < indices.length) {
								var data25;
								var this31;
								this31 = new Array(indices.data.length + 10);
								data25 = this31;
								haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data25,0,indices.data.length);
								indices.data = data25;
							}
						}
						indices.data[key21] = base * mult + 1;
						var key22 = numIndices++;
						if(!indices.fixed) {
							if(key22 >= indices.length) indices.length = key22 + 1;
							if(indices.data.length < indices.length) {
								var data26;
								var this32;
								this32 = new Array(indices.data.length + 10);
								data26 = this32;
								haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data26,0,indices.data.length);
								indices.data = data26;
							}
						}
						indices.data[key22] = (base + 1) * mult + 1;
						var key23 = numIndices++;
						if(!indices.fixed) {
							if(key23 >= indices.length) indices.length = key23 + 1;
							if(indices.data.length < indices.length) {
								var data27;
								var this33;
								this33 = new Array(indices.data.length + 10);
								data27 = this33;
								haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data27,0,indices.data.length);
								indices.data = data27;
							}
						}
						indices.data[key23] = (base + tw + 1) * mult + 1;
						var key24 = numIndices++;
						if(!indices.fixed) {
							if(key24 >= indices.length) indices.length = key24 + 1;
							if(indices.data.length < indices.length) {
								var data28;
								var this34;
								this34 = new Array(indices.data.length + 10);
								data28 = this34;
								haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data28,0,indices.data.length);
								indices.data = data28;
							}
						}
						indices.data[key24] = base * mult + 1;
					}
				}
				++xi;
			}
			++yi;
		}
		target.updateData(data);
		target.updateIndexData(indices);
	}
	,buildUVs: function(target) {
		var data;
		var stride = target.get_UVStride();
		var numUvs = (this._segmentsH + 1) * (this._segmentsW + 1) * stride;
		var skip = stride - 2;
		if(this._doubleSided) numUvs *= 2;
		if(target.get_UVData() != null && numUvs == (function($this) {
			var $r;
			var this1 = target.get_UVData();
			$r = this1.length;
			return $r;
		}(this))) data = target.get_UVData(); else {
			data = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
				var $r;
				var this2;
				this2 = new openfl.VectorData();
				{
					var this3;
					this3 = new Array(0);
					this2.data = this3;
				}
				this2.length = 0;
				this2.fixed = false;
				$r = this2;
				return $r;
			}(this))),numUvs,0);
			this.invalidateGeometry();
		}
		var index = target.get_UVOffset();
		var yi = 0;
		while(yi <= this._segmentsH) {
			var xi = 0;
			while(xi <= this._segmentsW) {
				var key = index++;
				var value = xi / this._segmentsW * target.get_scaleU();
				if(!data.fixed) {
					if(key >= data.length) data.length = key + 1;
					if(data.data.length < data.length) {
						var data1;
						var this4;
						this4 = new Array(data.data.length + 10);
						data1 = this4;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data1,0,data.data.length);
						data.data = data1;
					}
				}
				data.data[key] = value;
				var key1 = index++;
				var value1 = (1 - yi / this._segmentsH) * target.get_scaleV();
				if(!data.fixed) {
					if(key1 >= data.length) data.length = key1 + 1;
					if(data.data.length < data.length) {
						var data2;
						var this5;
						this5 = new Array(data.data.length + 10);
						data2 = this5;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data2,0,data.data.length);
						data.data = data2;
					}
				}
				data.data[key1] = value1;
				index += skip;
				if(this._doubleSided) {
					var key2 = index++;
					var value2 = xi / this._segmentsW * target.get_scaleU();
					if(!data.fixed) {
						if(key2 >= data.length) data.length = key2 + 1;
						if(data.data.length < data.length) {
							var data3;
							var this6;
							this6 = new Array(data.data.length + 10);
							data3 = this6;
							haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data3,0,data.data.length);
							data.data = data3;
						}
					}
					data.data[key2] = value2;
					var key3 = index++;
					var value3 = (1 - yi / this._segmentsH) * target.get_scaleV();
					if(!data.fixed) {
						if(key3 >= data.length) data.length = key3 + 1;
						if(data.data.length < data.length) {
							var data4;
							var this7;
							this7 = new Array(data.data.length + 10);
							data4 = this7;
							haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data4,0,data.data.length);
							data.data = data4;
						}
					}
					data.data[key3] = value3;
					index += skip;
				}
				++xi;
			}
			++yi;
		}
		target.updateData(data);
	}
	,__class__: away3d.primitives.PlaneGeometry
	,__properties__: $extend(away3d.primitives.PrimitiveBase.prototype.__properties__,{set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_doubleSided:"set_doubleSided",get_doubleSided:"get_doubleSided",set_yUp:"set_yUp",get_yUp:"get_yUp",set_segmentsH:"set_segmentsH",get_segmentsH:"get_segmentsH",set_segmentsW:"set_segmentsW",get_segmentsW:"get_segmentsW"})
});
away3d.primitives.WireframePrimitiveBase = function(color,thickness) {
	if(thickness == null) thickness = 1;
	if(color == null) color = 16777215;
	this._geomDirty = true;
	if(thickness <= 0) thickness = 1;
	this._color = color;
	this._thickness = thickness;
	this.set_mouseEnabled(this.set_mouseChildren(false));
	away3d.entities.SegmentSet.call(this);
};
$hxClasses["away3d.primitives.WireframePrimitiveBase"] = away3d.primitives.WireframePrimitiveBase;
away3d.primitives.WireframePrimitiveBase.__name__ = ["away3d","primitives","WireframePrimitiveBase"];
away3d.primitives.WireframePrimitiveBase.__super__ = away3d.entities.SegmentSet;
away3d.primitives.WireframePrimitiveBase.prototype = $extend(away3d.entities.SegmentSet.prototype,{
	_geomDirty: null
	,_color: null
	,_thickness: null
	,get_color: function() {
		return this._color;
	}
	,set_color: function(value) {
		this._color = value;
		var $it0 = this._segments.iterator();
		while( $it0.hasNext() ) {
			var segRef = $it0.next();
			segRef.segment.set_startColor(segRef.segment.set_endColor(value));
		}
		return value;
	}
	,get_thickness: function() {
		return this._thickness;
	}
	,set_thickness: function(value) {
		this._thickness = value;
		var $it0 = this._segments.iterator();
		while( $it0.hasNext() ) {
			var segRef = $it0.next();
			segRef.segment.set_thickness(segRef.segment.set_thickness(value));
		}
		return value;
	}
	,removeAllSegments: function() {
		away3d.entities.SegmentSet.prototype.removeAllSegments.call(this);
	}
	,get_bounds: function() {
		if(this._geomDirty) this.updateGeometry();
		return away3d.entities.SegmentSet.prototype.get_bounds.call(this);
	}
	,buildGeometry: function() {
		throw new away3d.errors.AbstractMethodError();
	}
	,invalidateGeometry: function() {
		this._geomDirty = true;
		this.invalidateBounds();
	}
	,updateGeometry: function() {
		this.buildGeometry();
		this._geomDirty = false;
	}
	,updateOrAddSegment: function(index,v0,v1) {
		var segment;
		var s;
		var e;
		if((segment = this.getSegment(index)) != null) {
			s = segment.get_start();
			e = segment.get_end();
			s.x = v0.x;
			s.y = v0.y;
			s.z = v0.z;
			e.x = v1.x;
			e.y = v1.y;
			e.z = v1.z;
			segment.updateSegment(s,e,null,this._color,this._color,this._thickness);
		} else this.addSegment(new away3d.primitives.LineSegment(new openfl.geom.Vector3D(v0.x,v0.y,v0.z,v0.w),new openfl.geom.Vector3D(v1.x,v1.y,v1.z,v1.w),this._color,this._color,this._thickness));
	}
	,updateMouseChildren: function() {
		this._ancestorsAllowMouseEnabled = false;
	}
	,__class__: away3d.primitives.WireframePrimitiveBase
	,__properties__: $extend(away3d.entities.SegmentSet.prototype.__properties__,{set_thickness:"set_thickness",get_thickness:"get_thickness",set_color:"set_color",get_color:"get_color"})
});
away3d.primitives.WireframeCube = function(width,height,depth,color,thickness) {
	if(thickness == null) thickness = 1;
	if(color == null) color = 16777215;
	if(depth == null) depth = 100;
	if(height == null) height = 100;
	if(width == null) width = 100;
	away3d.primitives.WireframePrimitiveBase.call(this,color,thickness);
	this._width = width;
	this._height = height;
	this._depth = depth;
};
$hxClasses["away3d.primitives.WireframeCube"] = away3d.primitives.WireframeCube;
away3d.primitives.WireframeCube.__name__ = ["away3d","primitives","WireframeCube"];
away3d.primitives.WireframeCube.__super__ = away3d.primitives.WireframePrimitiveBase;
away3d.primitives.WireframeCube.prototype = $extend(away3d.primitives.WireframePrimitiveBase.prototype,{
	_width: null
	,_height: null
	,_depth: null
	,get_width: function() {
		return this._width;
	}
	,set_width: function(value) {
		this._width = value;
		this.invalidateGeometry();
		return value;
	}
	,get_height: function() {
		return this._height;
	}
	,set_height: function(value) {
		if(value <= 0) throw new openfl.errors.Error("Value needs to be greater than 0");
		this._height = value;
		this.invalidateGeometry();
		return value;
	}
	,get_depth: function() {
		return this._depth;
	}
	,set_depth: function(value) {
		this._depth = value;
		this.invalidateGeometry();
		return value;
	}
	,buildGeometry: function() {
		var v0 = new openfl.geom.Vector3D();
		var v1 = new openfl.geom.Vector3D();
		var hw = this._width * .5;
		var hh = this._height * .5;
		var hd = this._depth * .5;
		v0.x = -hw;
		v0.y = hh;
		v0.z = -hd;
		v1.x = -hw;
		v1.y = -hh;
		v1.z = -hd;
		this.updateOrAddSegment(0,v0,v1);
		v0.z = hd;
		v1.z = hd;
		this.updateOrAddSegment(1,v0,v1);
		v0.x = hw;
		v1.x = hw;
		this.updateOrAddSegment(2,v0,v1);
		v0.z = -hd;
		v1.z = -hd;
		this.updateOrAddSegment(3,v0,v1);
		v0.x = -hw;
		v0.y = -hh;
		v0.z = -hd;
		v1.x = hw;
		v1.y = -hh;
		v1.z = -hd;
		this.updateOrAddSegment(4,v0,v1);
		v0.y = hh;
		v1.y = hh;
		this.updateOrAddSegment(5,v0,v1);
		v0.z = hd;
		v1.z = hd;
		this.updateOrAddSegment(6,v0,v1);
		v0.y = -hh;
		v1.y = -hh;
		this.updateOrAddSegment(7,v0,v1);
		v0.x = -hw;
		v0.y = -hh;
		v0.z = -hd;
		v1.x = -hw;
		v1.y = -hh;
		v1.z = hd;
		this.updateOrAddSegment(8,v0,v1);
		v0.y = hh;
		v1.y = hh;
		this.updateOrAddSegment(9,v0,v1);
		v0.x = hw;
		v1.x = hw;
		this.updateOrAddSegment(10,v0,v1);
		v0.y = -hh;
		v1.y = -hh;
		this.updateOrAddSegment(11,v0,v1);
	}
	,__class__: away3d.primitives.WireframeCube
	,__properties__: $extend(away3d.primitives.WireframePrimitiveBase.prototype.__properties__,{set_depth:"set_depth",get_depth:"get_depth",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width"})
});
away3d.primitives.WireframeSphere = function(radius,segmentsW,segmentsH,color,thickness) {
	if(thickness == null) thickness = 1;
	if(color == null) color = 16777215;
	if(segmentsH == null) segmentsH = 12;
	if(segmentsW == null) segmentsW = 16;
	if(radius == null) radius = 50;
	away3d.primitives.WireframePrimitiveBase.call(this,color,thickness);
	this._radius = radius;
	this._segmentsW = segmentsW;
	this._segmentsH = segmentsH;
};
$hxClasses["away3d.primitives.WireframeSphere"] = away3d.primitives.WireframeSphere;
away3d.primitives.WireframeSphere.__name__ = ["away3d","primitives","WireframeSphere"];
away3d.primitives.WireframeSphere.__super__ = away3d.primitives.WireframePrimitiveBase;
away3d.primitives.WireframeSphere.prototype = $extend(away3d.primitives.WireframePrimitiveBase.prototype,{
	_segmentsW: null
	,_segmentsH: null
	,_radius: null
	,buildGeometry: function() {
		var vertices;
		var this1;
		this1 = new openfl.VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		vertices = this1;
		var v0 = new openfl.geom.Vector3D();
		var v1 = new openfl.geom.Vector3D();
		var i = 0;
		var j = 0;
		var numVerts = 0;
		var index = 0;
		j = 0;
		while(j <= this._segmentsH) {
			var horangle = Math.PI * j / this._segmentsH;
			var z = -this._radius * Math.cos(horangle);
			var ringradius = this._radius * Math.sin(horangle);
			i = 0;
			while(i <= this._segmentsW) {
				var verangle = 2 * Math.PI * i / this._segmentsW;
				var x = ringradius * Math.cos(verangle);
				var y = ringradius * Math.sin(verangle);
				var key = numVerts++;
				if(!vertices.fixed) {
					if(key >= vertices.length) vertices.length = key + 1;
					if(vertices.data.length < vertices.length) {
						var data;
						var this3;
						this3 = new Array(vertices.data.length + 10);
						data = this3;
						haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data,0,vertices.data.length);
						vertices.data = data;
					}
				}
				vertices.data[key] = x;
				var key1 = numVerts++;
				if(!vertices.fixed) {
					if(key1 >= vertices.length) vertices.length = key1 + 1;
					if(vertices.data.length < vertices.length) {
						var data1;
						var this4;
						this4 = new Array(vertices.data.length + 10);
						data1 = this4;
						haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data1,0,vertices.data.length);
						vertices.data = data1;
					}
				}
				vertices.data[key1] = -z;
				var key2 = numVerts++;
				if(!vertices.fixed) {
					if(key2 >= vertices.length) vertices.length = key2 + 1;
					if(vertices.data.length < vertices.length) {
						var data2;
						var this5;
						this5 = new Array(vertices.data.length + 10);
						data2 = this5;
						haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data2,0,vertices.data.length);
						vertices.data = data2;
					}
				}
				vertices.data[key2] = y;
				++i;
			}
			++j;
		}
		j = 1;
		while(j <= this._segmentsH) {
			i = 1;
			while(i <= this._segmentsW) {
				var a = ((this._segmentsW + 1) * j + i) * 3;
				var b = ((this._segmentsW + 1) * j + i - 1) * 3;
				var c = ((this._segmentsW + 1) * (j - 1) + i - 1) * 3;
				var d = ((this._segmentsW + 1) * (j - 1) + i) * 3;
				if(j == this._segmentsH) {
					v0.x = vertices.data[c];
					v0.y = vertices.data[c + 1];
					v0.z = vertices.data[c + 2];
					v1.x = vertices.data[d];
					v1.y = vertices.data[d + 1];
					v1.z = vertices.data[d + 2];
					this.updateOrAddSegment(index++,v0,v1);
					v0.x = vertices.data[a];
					v0.y = vertices.data[a + 1];
					v0.z = vertices.data[a + 2];
					this.updateOrAddSegment(index++,v0,v1);
				} else if(j == 1) {
					v1.x = vertices.data[b];
					v1.y = vertices.data[b + 1];
					v1.z = vertices.data[b + 2];
					v0.x = vertices.data[c];
					v0.y = vertices.data[c + 1];
					v0.z = vertices.data[c + 2];
					this.updateOrAddSegment(index++,v0,v1);
				} else {
					v1.x = vertices.data[b];
					v1.y = vertices.data[b + 1];
					v1.z = vertices.data[b + 2];
					v0.x = vertices.data[c];
					v0.y = vertices.data[c + 1];
					v0.z = vertices.data[c + 2];
					this.updateOrAddSegment(index++,v0,v1);
					v1.x = vertices.data[d];
					v1.y = vertices.data[d + 1];
					v1.z = vertices.data[d + 2];
					this.updateOrAddSegment(index++,v0,v1);
				}
				++i;
			}
			++j;
		}
	}
	,__class__: away3d.primitives.WireframeSphere
});
away3d.textures = {};
away3d.textures.Anisotropy = $hxClasses["away3d.textures.Anisotropy"] = { __ename__ : true, __constructs__ : ["NONE","ANISOTROPIC2X","ANISOTROPIC4X","ANISOTROPIC8X","ANISOTROPIC16X"] };
away3d.textures.Anisotropy.NONE = ["NONE",0];
away3d.textures.Anisotropy.NONE.toString = $estr;
away3d.textures.Anisotropy.NONE.__enum__ = away3d.textures.Anisotropy;
away3d.textures.Anisotropy.ANISOTROPIC2X = ["ANISOTROPIC2X",1];
away3d.textures.Anisotropy.ANISOTROPIC2X.toString = $estr;
away3d.textures.Anisotropy.ANISOTROPIC2X.__enum__ = away3d.textures.Anisotropy;
away3d.textures.Anisotropy.ANISOTROPIC4X = ["ANISOTROPIC4X",2];
away3d.textures.Anisotropy.ANISOTROPIC4X.toString = $estr;
away3d.textures.Anisotropy.ANISOTROPIC4X.__enum__ = away3d.textures.Anisotropy;
away3d.textures.Anisotropy.ANISOTROPIC8X = ["ANISOTROPIC8X",3];
away3d.textures.Anisotropy.ANISOTROPIC8X.toString = $estr;
away3d.textures.Anisotropy.ANISOTROPIC8X.__enum__ = away3d.textures.Anisotropy;
away3d.textures.Anisotropy.ANISOTROPIC16X = ["ANISOTROPIC16X",4];
away3d.textures.Anisotropy.ANISOTROPIC16X.toString = $estr;
away3d.textures.Anisotropy.ANISOTROPIC16X.__enum__ = away3d.textures.Anisotropy;
away3d.textures.TextureProxyBase = function() {
	this._format = openfl.display3D.Context3DTextureFormat.BGRA;
	this._hasMipmaps = true;
	this._textures = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(0);
			this1.data = this2;
		}
		this1.length = 0;
		this1.fixed = false;
		$r = this1;
		return $r;
	}(this))),8);
	this._dirty = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this3;
		this3 = new openfl.VectorData();
		{
			var this4;
			this4 = new Array(0);
			this3.data = this4;
		}
		this3.length = 0;
		this3.fixed = false;
		$r = this3;
		return $r;
	}(this))),8);
	away3d.library.assets.NamedAssetBase.call(this);
};
$hxClasses["away3d.textures.TextureProxyBase"] = away3d.textures.TextureProxyBase;
away3d.textures.TextureProxyBase.__name__ = ["away3d","textures","TextureProxyBase"];
away3d.textures.TextureProxyBase.__interfaces__ = [away3d.library.assets.IAsset];
away3d.textures.TextureProxyBase.__super__ = away3d.library.assets.NamedAssetBase;
away3d.textures.TextureProxyBase.prototype = $extend(away3d.library.assets.NamedAssetBase.prototype,{
	_format: null
	,_hasMipmaps: null
	,_textures: null
	,_dirty: null
	,_width: null
	,_height: null
	,get_hasMipMaps: function() {
		return this._hasMipmaps;
	}
	,get_format: function() {
		return this._format;
	}
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.TEXTURE;
	}
	,get_width: function() {
		return this._width;
	}
	,get_height: function() {
		return this._height;
	}
	,set_width: function(value) {
		if(value == this._width) return value;
		this._width = value;
		return value;
	}
	,set_height: function(value) {
		if(value == this._height) return value;
		this._height = value;
		return value;
	}
	,getTextureForStage3D: function(stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var tex = this._textures.data[contextIndex];
		var context = stage3DProxy._context3D;
		if(tex == null || this._dirty.data[contextIndex] != context) {
			var this1 = this._textures;
			var value = tex = this.createTexture(context);
			if(!this1.fixed) {
				if(contextIndex >= this1.length) this1.length = contextIndex + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[contextIndex] = value;
			var this3 = this._dirty;
			if(!this3.fixed) {
				if(contextIndex >= this3.length) this3.length = contextIndex + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[contextIndex] = context;
			this.uploadContent(tex);
		}
		return tex;
	}
	,uploadContent: function(texture) {
		throw new away3d.errors.AbstractMethodError();
	}
	,setSize: function(width,height) {
		if(this._width != width || this._height != height) this.invalidateSize();
		this._width = width;
		this._height = height;
	}
	,invalidateContent: function() {
		var i = 0;
		while(i < 8) {
			var this1 = this._dirty;
			if(!this1.fixed) {
				if(i >= this1.length) this1.length = i + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[i] = null;
			++i;
		}
	}
	,invalidateSize: function() {
		var tex;
		var i = 0;
		while(i < 8) {
			tex = this._textures.data[i];
			if(tex != null) {
				tex.dispose();
				var this1 = this._textures;
				if(!this1.fixed) {
					if(i >= this1.length) this1.length = i + 1;
					if(this1.data.length < this1.length) {
						var data;
						var this2;
						this2 = new Array(this1.data.length + 10);
						data = this2;
						haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
						this1.data = data;
					}
				}
				this1.data[i] = null;
				var this3 = this._dirty;
				if(!this3.fixed) {
					if(i >= this3.length) this3.length = i + 1;
					if(this3.data.length < this3.length) {
						var data1;
						var this4;
						this4 = new Array(this3.data.length + 10);
						data1 = this4;
						haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
						this3.data = data1;
					}
				}
				this3.data[i] = null;
			}
			++i;
		}
	}
	,createTexture: function(context) {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,dispose: function() {
		var i = 0;
		while(i < 8) {
			if(this._textures.data[i] != null) this._textures.data[i].dispose();
			++i;
		}
	}
	,__class__: away3d.textures.TextureProxyBase
	,__properties__: $extend(away3d.library.assets.NamedAssetBase.prototype.__properties__,{get_height:"get_height",get_width:"get_width",get_assetType:"get_assetType",get_format:"get_format",get_hasMipMaps:"get_hasMipMaps"})
});
away3d.textures.Texture2DBase = function() {
	away3d.textures.TextureProxyBase.call(this);
};
$hxClasses["away3d.textures.Texture2DBase"] = away3d.textures.Texture2DBase;
away3d.textures.Texture2DBase.__name__ = ["away3d","textures","Texture2DBase"];
away3d.textures.Texture2DBase.__super__ = away3d.textures.TextureProxyBase;
away3d.textures.Texture2DBase.prototype = $extend(away3d.textures.TextureProxyBase.prototype,{
	createTexture: function(context) {
		return context.createTexture(this._width,this._height,openfl.display3D.Context3DTextureFormat.BGRA,false);
	}
	,__class__: away3d.textures.Texture2DBase
});
away3d.textures.BitmapTexture = function(bitmapData,generateMipmaps) {
	if(generateMipmaps == null) generateMipmaps = true;
	away3d.textures.Texture2DBase.call(this);
	this._bitmapData = bitmapData;
	this.setSize(this._bitmapData.width,this._bitmapData.height);
	this._generateMipmaps = this._hasMipmaps = generateMipmaps;
};
$hxClasses["away3d.textures.BitmapTexture"] = away3d.textures.BitmapTexture;
away3d.textures.BitmapTexture.__name__ = ["away3d","textures","BitmapTexture"];
away3d.textures.BitmapTexture.__super__ = away3d.textures.Texture2DBase;
away3d.textures.BitmapTexture.prototype = $extend(away3d.textures.Texture2DBase.prototype,{
	_bitmapData: null
	,_mipMapHolder: null
	,_generateMipmaps: null
	,get_bitmapData: function() {
		return this._bitmapData;
	}
	,set_bitmapData: function(value) {
		if(value == this._bitmapData) return null;
		if(!away3d.tools.utils.TextureUtils.isBitmapDataValid(value)) throw new openfl.errors.Error("Invalid bitmapData: Width and height must be power of 2 and cannot exceed 2048");
		this.invalidateContent();
		this.setSize(value.width,value.height);
		this._bitmapData = value;
		if(this._generateMipmaps) this.getMipMapHolder();
		return value;
	}
	,uploadContent: function(texture) {
		(js.Boot.__cast(texture , openfl.display3D.textures.Texture)).uploadFromBitmapData(this._bitmapData,0);
	}
	,getMipMapHolder: function() {
		var newW;
		var newH;
		newW = this._bitmapData.width;
		newH = this._bitmapData.height;
		if(this._mipMapHolder != null) {
			if(this._mipMapHolder.width == newW && this._bitmapData.height == newH) return;
			this.freeMipMapHolder();
		}
		if(away3d.textures.BitmapTexture._mipMaps[newW] == null) {
			away3d.textures.BitmapTexture._mipMaps[newW] = [];
			away3d.textures.BitmapTexture._mipMapUses[newW] = [];
		}
		if(away3d.textures.BitmapTexture._mipMaps[newW][newH] == null) {
			this._mipMapHolder = away3d.textures.BitmapTexture._mipMaps[newW][newH] = new openfl.display.BitmapData(newW,newH,true);
			away3d.textures.BitmapTexture._mipMapUses[newW][newH] = 1;
		} else {
			away3d.textures.BitmapTexture._mipMapUses[newW][newH] = away3d.textures.BitmapTexture._mipMapUses[newW][newH] + 1;
			this._mipMapHolder = away3d.textures.BitmapTexture._mipMaps[newW][newH];
		}
	}
	,freeMipMapHolder: function() {
		var holderWidth = this._mipMapHolder.width;
		var holderHeight = this._mipMapHolder.height;
		if(--away3d.textures.BitmapTexture._mipMapUses[holderWidth][holderHeight] == 0) {
			away3d.textures.BitmapTexture._mipMaps[holderWidth][holderHeight].dispose();
			away3d.textures.BitmapTexture._mipMaps[holderWidth][holderHeight] = null;
		}
	}
	,dispose: function() {
		away3d.textures.Texture2DBase.prototype.dispose.call(this);
		if(this._mipMapHolder != null) this.freeMipMapHolder();
	}
	,__class__: away3d.textures.BitmapTexture
	,__properties__: $extend(away3d.textures.Texture2DBase.prototype.__properties__,{set_bitmapData:"set_bitmapData",get_bitmapData:"get_bitmapData"})
});
away3d.textures.CubeTextureBase = function() {
	away3d.textures.TextureProxyBase.call(this);
};
$hxClasses["away3d.textures.CubeTextureBase"] = away3d.textures.CubeTextureBase;
away3d.textures.CubeTextureBase.__name__ = ["away3d","textures","CubeTextureBase"];
away3d.textures.CubeTextureBase.__super__ = away3d.textures.TextureProxyBase;
away3d.textures.CubeTextureBase.prototype = $extend(away3d.textures.TextureProxyBase.prototype,{
	get_size: function() {
		return this._width;
	}
	,createTexture: function(context) {
		return context.createCubeTexture(this.get_width(),openfl.display3D.Context3DTextureFormat.BGRA,false);
	}
	,__class__: away3d.textures.CubeTextureBase
	,__properties__: $extend(away3d.textures.TextureProxyBase.prototype.__properties__,{get_size:"get_size"})
});
away3d.textures.RenderCubeTexture = function(size) {
	away3d.textures.CubeTextureBase.call(this);
	this.setSize(size,size);
};
$hxClasses["away3d.textures.RenderCubeTexture"] = away3d.textures.RenderCubeTexture;
away3d.textures.RenderCubeTexture.__name__ = ["away3d","textures","RenderCubeTexture"];
away3d.textures.RenderCubeTexture.__super__ = away3d.textures.CubeTextureBase;
away3d.textures.RenderCubeTexture.prototype = $extend(away3d.textures.CubeTextureBase.prototype,{
	set_size: function(value) {
		if(value == this._width) return value;
		if(!away3d.tools.utils.TextureUtils.isDimensionValid(value)) throw new openfl.errors.Error("Invalid size: Width and height must be power of 2 and cannot exceed 2048");
		this.invalidateContent();
		this.setSize(value,value);
		return value;
	}
	,uploadContent: function(texture) {
		var bmd = new openfl.display.BitmapData(this._width,this._height,false,0);
		var i = 0;
		while(i < 6) {
			(js.Boot.__cast(texture , openfl.display3D.textures.CubeTexture)).uploadFromBitmapData(bmd,i,0);
			++i;
		}
		bmd.dispose();
	}
	,createTexture: function(context) {
		return context.createCubeTexture(this._width,openfl.display3D.Context3DTextureFormat.BGRA,true);
	}
	,__class__: away3d.textures.RenderCubeTexture
});
away3d.textures.RenderTexture = function(_width,_height) {
	away3d.textures.Texture2DBase.call(this);
	this.setSize(_width,_height);
};
$hxClasses["away3d.textures.RenderTexture"] = away3d.textures.RenderTexture;
away3d.textures.RenderTexture.__name__ = ["away3d","textures","RenderTexture"];
away3d.textures.RenderTexture.__super__ = away3d.textures.Texture2DBase;
away3d.textures.RenderTexture.prototype = $extend(away3d.textures.Texture2DBase.prototype,{
	set_width: function(value) {
		if(value == this._width) return value;
		if(!away3d.tools.utils.TextureUtils.isDimensionValid(value)) throw new openfl.errors.Error("Invalid size: Width and height must be power of 2 and cannot exceed 2048");
		this.invalidateContent();
		this.setSize(value,this._height);
		return value;
	}
	,set_height: function(value) {
		if(value == this._height) return value;
		if(!away3d.tools.utils.TextureUtils.isDimensionValid(value)) throw new openfl.errors.Error("Invalid size: Width and height must be power of 2 and cannot exceed 2048");
		this.invalidateContent();
		this.setSize(this._width,value);
		return value;
	}
	,uploadContent: function(texture) {
	}
	,createTexture: function(context) {
		return context.createTexture(this.get_width(),this.get_height(),openfl.display3D.Context3DTextureFormat.BGRA,true);
	}
	,__class__: away3d.textures.RenderTexture
});
away3d.tools = {};
away3d.tools.utils = {};
away3d.tools.utils.GeomUtil = function() { };
$hxClasses["away3d.tools.utils.GeomUtil"] = away3d.tools.utils.GeomUtil;
away3d.tools.utils.GeomUtil.__name__ = ["away3d","tools","utils","GeomUtil"];
away3d.tools.utils.GeomUtil.fromVectors = function(verts,indices,uvs,normals,tangents,weights,jointIndices,triangleOffset) {
	if(triangleOffset == null) triangleOffset = 0;
	var LIMIT_VERTS = 196605;
	var LIMIT_INDICES = 983025;
	var subs;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	subs = this1;
	if(uvs != null && uvs.length == 0) uvs = null;
	if(normals != null && normals.length == 0) normals = null;
	if(tangents != null && tangents.length == 0) tangents = null;
	if(weights != null && weights.length == 0) weights = null;
	if(jointIndices != null && jointIndices.length == 0) jointIndices = null;
	if(indices.length >= LIMIT_INDICES || verts.length >= LIMIT_VERTS) {
		var i = 0;
		var len;
		var outIndex;
		var j;
		var splitVerts;
		var this3;
		this3 = new openfl.VectorData();
		var this4;
		this4 = new Array(0);
		this3.data = this4;
		this3.length = 0;
		this3.fixed = false;
		splitVerts = this3;
		var splitIndices;
		var this5;
		this5 = new openfl.VectorData();
		var this6;
		this6 = new Array(0);
		this5.data = this6;
		this5.length = 0;
		this5.fixed = false;
		splitIndices = this5;
		var splitUvs;
		if(uvs != null) {
			var this7;
			this7 = new openfl.VectorData();
			var this8;
			this8 = new Array(0);
			this7.data = this8;
			this7.length = 0;
			this7.fixed = false;
			splitUvs = this7;
		} else splitUvs = null;
		var splitNormals;
		if(normals != null) {
			var this9;
			this9 = new openfl.VectorData();
			var this10;
			this10 = new Array(0);
			this9.data = this10;
			this9.length = 0;
			this9.fixed = false;
			splitNormals = this9;
		} else splitNormals = null;
		var splitTangents;
		if(tangents != null) {
			var this11;
			this11 = new openfl.VectorData();
			var this12;
			this12 = new Array(0);
			this11.data = this12;
			this11.length = 0;
			this11.fixed = false;
			splitTangents = this11;
		} else splitTangents = null;
		var splitWeights;
		if(weights != null) {
			var this13;
			this13 = new openfl.VectorData();
			var this14;
			this14 = new Array(0);
			this13.data = this14;
			this13.length = 0;
			this13.fixed = false;
			splitWeights = this13;
		} else splitWeights = null;
		var splitJointIndices;
		if(jointIndices != null) {
			var this15;
			this15 = new openfl.VectorData();
			var this16;
			this16 = new Array(0);
			this15.data = this16;
			this15.length = 0;
			this15.fixed = false;
			splitJointIndices = this15;
		} else splitJointIndices = null;
		var mappings = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
			var $r;
			var this17;
			this17 = new openfl.VectorData();
			{
				var this18;
				this18 = new Array(0);
				this17.data = this18;
			}
			this17.length = 0;
			this17.fixed = false;
			$r = this17;
			return $r;
		}(this))),verts.length / 3 | 0,0);
		i = mappings.length;
		while(i-- > 0) {
			if(!mappings.fixed) {
				if(i >= mappings.length) mappings.length = i + 1;
				if(mappings.data.length < mappings.length) {
					var data;
					var this19;
					this19 = new Array(mappings.data.length + 10);
					data = this19;
					haxe.ds._Vector.Vector_Impl_.blit(mappings.data,0,data,0,mappings.data.length);
					mappings.data = data;
				}
			}
			mappings.data[i] = -1;
		}
		var originalIndex;
		var splitIndex;
		var o0;
		var o1;
		var o2;
		var s0;
		var s1;
		var s2;
		var su;
		var ou;
		var sv;
		var ov;
		outIndex = 0;
		len = indices.length;
		i = 0;
		while(i < len) {
			splitIndex = splitVerts.length + 6;
			if(outIndex + 2 >= LIMIT_INDICES || splitIndex >= LIMIT_VERTS) {
				var x = away3d.tools.utils.GeomUtil.constructSubGeometry(splitVerts,splitIndices,splitUvs,splitNormals,splitTangents,splitWeights,splitJointIndices,triangleOffset);
				if(!subs.fixed) {
					subs.length++;
					if(subs.data.length < subs.length) {
						var data1;
						var this20;
						this20 = new Array(subs.data.length + 10);
						data1 = this20;
						haxe.ds._Vector.Vector_Impl_.blit(subs.data,0,data1,0,subs.data.length);
						subs.data = data1;
					}
					subs.data[subs.length - 1] = x;
				}
				subs.length;
				var this21;
				this21 = new openfl.VectorData();
				var this22;
				this22 = new Array(0);
				this21.data = this22;
				this21.length = 0;
				this21.fixed = false;
				splitVerts = this21;
				var this23;
				this23 = new openfl.VectorData();
				var this24;
				this24 = new Array(0);
				this23.data = this24;
				this23.length = 0;
				this23.fixed = false;
				splitIndices = this23;
				if(uvs != null) {
					var this25;
					this25 = new openfl.VectorData();
					var this26;
					this26 = new Array(0);
					this25.data = this26;
					this25.length = 0;
					this25.fixed = false;
					splitUvs = this25;
				} else splitUvs = null;
				if(normals != null) {
					var this27;
					this27 = new openfl.VectorData();
					var this28;
					this28 = new Array(0);
					this27.data = this28;
					this27.length = 0;
					this27.fixed = false;
					splitNormals = this27;
				} else splitNormals = null;
				if(tangents != null) {
					var this29;
					this29 = new openfl.VectorData();
					var this30;
					this30 = new Array(0);
					this29.data = this30;
					this29.length = 0;
					this29.fixed = false;
					splitTangents = this29;
				} else splitTangents = null;
				if(weights != null) {
					var this31;
					this31 = new openfl.VectorData();
					var this32;
					this32 = new Array(0);
					this31.data = this32;
					this31.length = 0;
					this31.fixed = false;
					splitWeights = this31;
				} else splitWeights = null;
				if(jointIndices != null) {
					var this33;
					this33 = new openfl.VectorData();
					var this34;
					this34 = new Array(0);
					this33.data = this34;
					this33.length = 0;
					this33.fixed = false;
					splitJointIndices = this33;
				} else splitJointIndices = null;
				splitIndex = 0;
				j = mappings.length;
				while(j-- > 0) {
					if(!mappings.fixed) {
						if(j >= mappings.length) mappings.length = j + 1;
						if(mappings.data.length < mappings.length) {
							var data2;
							var this35;
							this35 = new Array(mappings.data.length + 10);
							data2 = this35;
							haxe.ds._Vector.Vector_Impl_.blit(mappings.data,0,data2,0,mappings.data.length);
							mappings.data = data2;
						}
					}
					mappings.data[j] = -1;
				}
				outIndex = 0;
			}
			j = 0;
			while(j < 3) {
				originalIndex = indices.data[i + j];
				if(mappings.data[originalIndex] >= 0) splitIndex = mappings.data[originalIndex]; else {
					o0 = originalIndex * 3;
					o1 = originalIndex * 3 + 1;
					o2 = originalIndex * 3 + 2;
					splitIndex = splitVerts.length / 3 | 0;
					s0 = splitIndex * 3;
					s1 = splitIndex * 3 + 1;
					s2 = splitIndex * 3 + 2;
					if(!splitVerts.fixed) {
						if(s0 >= splitVerts.length) splitVerts.length = s0 + 1;
						if(splitVerts.data.length < splitVerts.length) {
							var data3;
							var this36;
							this36 = new Array(splitVerts.data.length + 10);
							data3 = this36;
							haxe.ds._Vector.Vector_Impl_.blit(splitVerts.data,0,data3,0,splitVerts.data.length);
							splitVerts.data = data3;
						}
					}
					splitVerts.data[s0] = verts.data[o0];
					if(!splitVerts.fixed) {
						if(s1 >= splitVerts.length) splitVerts.length = s1 + 1;
						if(splitVerts.data.length < splitVerts.length) {
							var data4;
							var this37;
							this37 = new Array(splitVerts.data.length + 10);
							data4 = this37;
							haxe.ds._Vector.Vector_Impl_.blit(splitVerts.data,0,data4,0,splitVerts.data.length);
							splitVerts.data = data4;
						}
					}
					splitVerts.data[s1] = verts.data[o1];
					if(!splitVerts.fixed) {
						if(s2 >= splitVerts.length) splitVerts.length = s2 + 1;
						if(splitVerts.data.length < splitVerts.length) {
							var data5;
							var this38;
							this38 = new Array(splitVerts.data.length + 10);
							data5 = this38;
							haxe.ds._Vector.Vector_Impl_.blit(splitVerts.data,0,data5,0,splitVerts.data.length);
							splitVerts.data = data5;
						}
					}
					splitVerts.data[s2] = verts.data[o2];
					if(uvs != null) {
						su = splitIndex * 2;
						sv = splitIndex * 2 + 1;
						ou = originalIndex * 2;
						ov = originalIndex * 2 + 1;
						if(!splitUvs.fixed) {
							if(su >= splitUvs.length) splitUvs.length = su + 1;
							if(splitUvs.data.length < splitUvs.length) {
								var data6;
								var this39;
								this39 = new Array(splitUvs.data.length + 10);
								data6 = this39;
								haxe.ds._Vector.Vector_Impl_.blit(splitUvs.data,0,data6,0,splitUvs.data.length);
								splitUvs.data = data6;
							}
						}
						splitUvs.data[su] = uvs.data[ou];
						if(!splitUvs.fixed) {
							if(sv >= splitUvs.length) splitUvs.length = sv + 1;
							if(splitUvs.data.length < splitUvs.length) {
								var data7;
								var this40;
								this40 = new Array(splitUvs.data.length + 10);
								data7 = this40;
								haxe.ds._Vector.Vector_Impl_.blit(splitUvs.data,0,data7,0,splitUvs.data.length);
								splitUvs.data = data7;
							}
						}
						splitUvs.data[sv] = uvs.data[ov];
					}
					if(normals != null) {
						if(!splitNormals.fixed) {
							if(s0 >= splitNormals.length) splitNormals.length = s0 + 1;
							if(splitNormals.data.length < splitNormals.length) {
								var data8;
								var this41;
								this41 = new Array(splitNormals.data.length + 10);
								data8 = this41;
								haxe.ds._Vector.Vector_Impl_.blit(splitNormals.data,0,data8,0,splitNormals.data.length);
								splitNormals.data = data8;
							}
						}
						splitNormals.data[s0] = normals.data[o0];
						if(!splitNormals.fixed) {
							if(s1 >= splitNormals.length) splitNormals.length = s1 + 1;
							if(splitNormals.data.length < splitNormals.length) {
								var data9;
								var this42;
								this42 = new Array(splitNormals.data.length + 10);
								data9 = this42;
								haxe.ds._Vector.Vector_Impl_.blit(splitNormals.data,0,data9,0,splitNormals.data.length);
								splitNormals.data = data9;
							}
						}
						splitNormals.data[s1] = normals.data[o1];
						if(!splitNormals.fixed) {
							if(s2 >= splitNormals.length) splitNormals.length = s2 + 1;
							if(splitNormals.data.length < splitNormals.length) {
								var data10;
								var this43;
								this43 = new Array(splitNormals.data.length + 10);
								data10 = this43;
								haxe.ds._Vector.Vector_Impl_.blit(splitNormals.data,0,data10,0,splitNormals.data.length);
								splitNormals.data = data10;
							}
						}
						splitNormals.data[s2] = normals.data[o2];
					}
					if(tangents != null) {
						if(!splitTangents.fixed) {
							if(s0 >= splitTangents.length) splitTangents.length = s0 + 1;
							if(splitTangents.data.length < splitTangents.length) {
								var data11;
								var this44;
								this44 = new Array(splitTangents.data.length + 10);
								data11 = this44;
								haxe.ds._Vector.Vector_Impl_.blit(splitTangents.data,0,data11,0,splitTangents.data.length);
								splitTangents.data = data11;
							}
						}
						splitTangents.data[s0] = tangents.data[o0];
						if(!splitTangents.fixed) {
							if(s1 >= splitTangents.length) splitTangents.length = s1 + 1;
							if(splitTangents.data.length < splitTangents.length) {
								var data12;
								var this45;
								this45 = new Array(splitTangents.data.length + 10);
								data12 = this45;
								haxe.ds._Vector.Vector_Impl_.blit(splitTangents.data,0,data12,0,splitTangents.data.length);
								splitTangents.data = data12;
							}
						}
						splitTangents.data[s1] = tangents.data[o1];
						if(!splitTangents.fixed) {
							if(s2 >= splitTangents.length) splitTangents.length = s2 + 1;
							if(splitTangents.data.length < splitTangents.length) {
								var data13;
								var this46;
								this46 = new Array(splitTangents.data.length + 10);
								data13 = this46;
								haxe.ds._Vector.Vector_Impl_.blit(splitTangents.data,0,data13,0,splitTangents.data.length);
								splitTangents.data = data13;
							}
						}
						splitTangents.data[s2] = tangents.data[o2];
					}
					if(weights != null) {
						if(!splitWeights.fixed) {
							if(s0 >= splitWeights.length) splitWeights.length = s0 + 1;
							if(splitWeights.data.length < splitWeights.length) {
								var data14;
								var this47;
								this47 = new Array(splitWeights.data.length + 10);
								data14 = this47;
								haxe.ds._Vector.Vector_Impl_.blit(splitWeights.data,0,data14,0,splitWeights.data.length);
								splitWeights.data = data14;
							}
						}
						splitWeights.data[s0] = weights.data[o0];
						if(!splitWeights.fixed) {
							if(s1 >= splitWeights.length) splitWeights.length = s1 + 1;
							if(splitWeights.data.length < splitWeights.length) {
								var data15;
								var this48;
								this48 = new Array(splitWeights.data.length + 10);
								data15 = this48;
								haxe.ds._Vector.Vector_Impl_.blit(splitWeights.data,0,data15,0,splitWeights.data.length);
								splitWeights.data = data15;
							}
						}
						splitWeights.data[s1] = weights.data[o1];
						if(!splitWeights.fixed) {
							if(s2 >= splitWeights.length) splitWeights.length = s2 + 1;
							if(splitWeights.data.length < splitWeights.length) {
								var data16;
								var this49;
								this49 = new Array(splitWeights.data.length + 10);
								data16 = this49;
								haxe.ds._Vector.Vector_Impl_.blit(splitWeights.data,0,data16,0,splitWeights.data.length);
								splitWeights.data = data16;
							}
						}
						splitWeights.data[s2] = weights.data[o2];
					}
					if(jointIndices != null) {
						if(!splitJointIndices.fixed) {
							if(s0 >= splitJointIndices.length) splitJointIndices.length = s0 + 1;
							if(splitJointIndices.data.length < splitJointIndices.length) {
								var data17;
								var this50;
								this50 = new Array(splitJointIndices.data.length + 10);
								data17 = this50;
								haxe.ds._Vector.Vector_Impl_.blit(splitJointIndices.data,0,data17,0,splitJointIndices.data.length);
								splitJointIndices.data = data17;
							}
						}
						splitJointIndices.data[s0] = jointIndices.data[o0];
						if(!splitJointIndices.fixed) {
							if(s1 >= splitJointIndices.length) splitJointIndices.length = s1 + 1;
							if(splitJointIndices.data.length < splitJointIndices.length) {
								var data18;
								var this51;
								this51 = new Array(splitJointIndices.data.length + 10);
								data18 = this51;
								haxe.ds._Vector.Vector_Impl_.blit(splitJointIndices.data,0,data18,0,splitJointIndices.data.length);
								splitJointIndices.data = data18;
							}
						}
						splitJointIndices.data[s1] = jointIndices.data[o1];
						if(!splitJointIndices.fixed) {
							if(s2 >= splitJointIndices.length) splitJointIndices.length = s2 + 1;
							if(splitJointIndices.data.length < splitJointIndices.length) {
								var data19;
								var this52;
								this52 = new Array(splitJointIndices.data.length + 10);
								data19 = this52;
								haxe.ds._Vector.Vector_Impl_.blit(splitJointIndices.data,0,data19,0,splitJointIndices.data.length);
								splitJointIndices.data = data19;
							}
						}
						splitJointIndices.data[s2] = jointIndices.data[o2];
					}
					if(!mappings.fixed) {
						if(originalIndex >= mappings.length) mappings.length = originalIndex + 1;
						if(mappings.data.length < mappings.length) {
							var data20;
							var this53;
							this53 = new Array(mappings.data.length + 10);
							data20 = this53;
							haxe.ds._Vector.Vector_Impl_.blit(mappings.data,0,data20,0,mappings.data.length);
							mappings.data = data20;
						}
					}
					mappings.data[originalIndex] = splitIndex;
				}
				var key = outIndex + j;
				if(!splitIndices.fixed) {
					if(key >= splitIndices.length) splitIndices.length = key + 1;
					if(splitIndices.data.length < splitIndices.length) {
						var data21;
						var this54;
						this54 = new Array(splitIndices.data.length + 10);
						data21 = this54;
						haxe.ds._Vector.Vector_Impl_.blit(splitIndices.data,0,data21,0,splitIndices.data.length);
						splitIndices.data = data21;
					}
				}
				splitIndices.data[key] = splitIndex;
				j++;
			}
			outIndex += 3;
			i += 3;
		}
		if(splitVerts.length > 0) {
			var x1 = away3d.tools.utils.GeomUtil.constructSubGeometry(splitVerts,splitIndices,splitUvs,splitNormals,splitTangents,splitWeights,splitJointIndices,triangleOffset);
			if(!subs.fixed) {
				subs.length++;
				if(subs.data.length < subs.length) {
					var data22;
					var this55;
					this55 = new Array(subs.data.length + 10);
					data22 = this55;
					haxe.ds._Vector.Vector_Impl_.blit(subs.data,0,data22,0,subs.data.length);
					subs.data = data22;
				}
				subs.data[subs.length - 1] = x1;
			}
			subs.length;
		}
	} else {
		var x2 = away3d.tools.utils.GeomUtil.constructSubGeometry(verts,indices,uvs,normals,tangents,weights,jointIndices,triangleOffset);
		if(!subs.fixed) {
			subs.length++;
			if(subs.data.length < subs.length) {
				var data23;
				var this56;
				this56 = new Array(subs.data.length + 10);
				data23 = this56;
				haxe.ds._Vector.Vector_Impl_.blit(subs.data,0,data23,0,subs.data.length);
				subs.data = data23;
			}
			subs.data[subs.length - 1] = x2;
		}
		subs.length;
	}
	return subs;
};
away3d.tools.utils.GeomUtil.constructSubGeometry = function(verts,indices,uvs,normals,tangents,weights,jointIndices,triangleOffset) {
	var sub;
	if(weights != null && jointIndices != null) {
		sub = new away3d.core.base.SkinnedSubGeometry(weights.length / (verts.length / 3) | 0);
		(js.Boot.__cast(sub , away3d.core.base.SkinnedSubGeometry)).updateJointWeightsData(weights);
		(js.Boot.__cast(sub , away3d.core.base.SkinnedSubGeometry)).updateJointIndexData(jointIndices);
	} else sub = new away3d.core.base.CompactSubGeometry();
	sub.updateIndexData(indices);
	sub.fromVectors(verts,uvs,normals,tangents);
	return sub;
};
away3d.tools.utils.GeomUtil.interleaveBuffers = function(numVertices,vertices,normals,tangents,uvs,suvs) {
	var i = 0;
	var compIndex;
	var uvCompIndex;
	var interleavedCompIndex;
	var interleavedBuffer;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	interleavedBuffer = this1;
	i = 0;
	while(i < numVertices) {
		uvCompIndex = i * 2;
		compIndex = i * 3;
		interleavedCompIndex = i * 13;
		if(!interleavedBuffer.fixed) {
			if(interleavedCompIndex >= interleavedBuffer.length) interleavedBuffer.length = interleavedCompIndex + 1;
			if(interleavedBuffer.data.length < interleavedBuffer.length) {
				var data;
				var this3;
				this3 = new Array(interleavedBuffer.data.length + 10);
				data = this3;
				haxe.ds._Vector.Vector_Impl_.blit(interleavedBuffer.data,0,data,0,interleavedBuffer.data.length);
				interleavedBuffer.data = data;
			}
		}
		if(vertices != null) interleavedBuffer.data[interleavedCompIndex] = vertices.data[compIndex]; else interleavedBuffer.data[interleavedCompIndex] = 0;
		var key = interleavedCompIndex + 1;
		if(!interleavedBuffer.fixed) {
			if(key >= interleavedBuffer.length) interleavedBuffer.length = key + 1;
			if(interleavedBuffer.data.length < interleavedBuffer.length) {
				var data1;
				var this4;
				this4 = new Array(interleavedBuffer.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(interleavedBuffer.data,0,data1,0,interleavedBuffer.data.length);
				interleavedBuffer.data = data1;
			}
		}
		if(vertices != null) interleavedBuffer.data[key] = vertices.data[compIndex + 1]; else interleavedBuffer.data[key] = 0;
		var key1 = interleavedCompIndex + 2;
		if(!interleavedBuffer.fixed) {
			if(key1 >= interleavedBuffer.length) interleavedBuffer.length = key1 + 1;
			if(interleavedBuffer.data.length < interleavedBuffer.length) {
				var data2;
				var this5;
				this5 = new Array(interleavedBuffer.data.length + 10);
				data2 = this5;
				haxe.ds._Vector.Vector_Impl_.blit(interleavedBuffer.data,0,data2,0,interleavedBuffer.data.length);
				interleavedBuffer.data = data2;
			}
		}
		if(vertices != null) interleavedBuffer.data[key1] = vertices.data[compIndex + 2]; else interleavedBuffer.data[key1] = 0;
		var key2 = interleavedCompIndex + 3;
		if(!interleavedBuffer.fixed) {
			if(key2 >= interleavedBuffer.length) interleavedBuffer.length = key2 + 1;
			if(interleavedBuffer.data.length < interleavedBuffer.length) {
				var data3;
				var this6;
				this6 = new Array(interleavedBuffer.data.length + 10);
				data3 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(interleavedBuffer.data,0,data3,0,interleavedBuffer.data.length);
				interleavedBuffer.data = data3;
			}
		}
		if(normals != null) interleavedBuffer.data[key2] = normals.data[compIndex]; else interleavedBuffer.data[key2] = 0;
		var key3 = interleavedCompIndex + 4;
		if(!interleavedBuffer.fixed) {
			if(key3 >= interleavedBuffer.length) interleavedBuffer.length = key3 + 1;
			if(interleavedBuffer.data.length < interleavedBuffer.length) {
				var data4;
				var this7;
				this7 = new Array(interleavedBuffer.data.length + 10);
				data4 = this7;
				haxe.ds._Vector.Vector_Impl_.blit(interleavedBuffer.data,0,data4,0,interleavedBuffer.data.length);
				interleavedBuffer.data = data4;
			}
		}
		if(normals != null) interleavedBuffer.data[key3] = normals.data[compIndex + 1]; else interleavedBuffer.data[key3] = 0;
		var key4 = interleavedCompIndex + 5;
		if(!interleavedBuffer.fixed) {
			if(key4 >= interleavedBuffer.length) interleavedBuffer.length = key4 + 1;
			if(interleavedBuffer.data.length < interleavedBuffer.length) {
				var data5;
				var this8;
				this8 = new Array(interleavedBuffer.data.length + 10);
				data5 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(interleavedBuffer.data,0,data5,0,interleavedBuffer.data.length);
				interleavedBuffer.data = data5;
			}
		}
		if(normals != null) interleavedBuffer.data[key4] = normals.data[compIndex + 2]; else interleavedBuffer.data[key4] = 0;
		var key5 = interleavedCompIndex + 6;
		if(!interleavedBuffer.fixed) {
			if(key5 >= interleavedBuffer.length) interleavedBuffer.length = key5 + 1;
			if(interleavedBuffer.data.length < interleavedBuffer.length) {
				var data6;
				var this9;
				this9 = new Array(interleavedBuffer.data.length + 10);
				data6 = this9;
				haxe.ds._Vector.Vector_Impl_.blit(interleavedBuffer.data,0,data6,0,interleavedBuffer.data.length);
				interleavedBuffer.data = data6;
			}
		}
		if(tangents != null) interleavedBuffer.data[key5] = tangents.data[compIndex]; else interleavedBuffer.data[key5] = 0;
		var key6 = interleavedCompIndex + 7;
		if(!interleavedBuffer.fixed) {
			if(key6 >= interleavedBuffer.length) interleavedBuffer.length = key6 + 1;
			if(interleavedBuffer.data.length < interleavedBuffer.length) {
				var data7;
				var this10;
				this10 = new Array(interleavedBuffer.data.length + 10);
				data7 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(interleavedBuffer.data,0,data7,0,interleavedBuffer.data.length);
				interleavedBuffer.data = data7;
			}
		}
		if(tangents != null) interleavedBuffer.data[key6] = tangents.data[compIndex + 1]; else interleavedBuffer.data[key6] = 0;
		var key7 = interleavedCompIndex + 8;
		if(!interleavedBuffer.fixed) {
			if(key7 >= interleavedBuffer.length) interleavedBuffer.length = key7 + 1;
			if(interleavedBuffer.data.length < interleavedBuffer.length) {
				var data8;
				var this11;
				this11 = new Array(interleavedBuffer.data.length + 10);
				data8 = this11;
				haxe.ds._Vector.Vector_Impl_.blit(interleavedBuffer.data,0,data8,0,interleavedBuffer.data.length);
				interleavedBuffer.data = data8;
			}
		}
		if(tangents != null) interleavedBuffer.data[key7] = tangents.data[compIndex + 2]; else interleavedBuffer.data[key7] = 0;
		var key8 = interleavedCompIndex + 9;
		if(!interleavedBuffer.fixed) {
			if(key8 >= interleavedBuffer.length) interleavedBuffer.length = key8 + 1;
			if(interleavedBuffer.data.length < interleavedBuffer.length) {
				var data9;
				var this12;
				this12 = new Array(interleavedBuffer.data.length + 10);
				data9 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(interleavedBuffer.data,0,data9,0,interleavedBuffer.data.length);
				interleavedBuffer.data = data9;
			}
		}
		if(uvs != null) interleavedBuffer.data[key8] = uvs.data[uvCompIndex]; else interleavedBuffer.data[key8] = 0;
		var key9 = interleavedCompIndex + 10;
		if(!interleavedBuffer.fixed) {
			if(key9 >= interleavedBuffer.length) interleavedBuffer.length = key9 + 1;
			if(interleavedBuffer.data.length < interleavedBuffer.length) {
				var data10;
				var this13;
				this13 = new Array(interleavedBuffer.data.length + 10);
				data10 = this13;
				haxe.ds._Vector.Vector_Impl_.blit(interleavedBuffer.data,0,data10,0,interleavedBuffer.data.length);
				interleavedBuffer.data = data10;
			}
		}
		if(uvs != null) interleavedBuffer.data[key9] = uvs.data[uvCompIndex + 1]; else interleavedBuffer.data[key9] = 0;
		var key10 = interleavedCompIndex + 11;
		if(!interleavedBuffer.fixed) {
			if(key10 >= interleavedBuffer.length) interleavedBuffer.length = key10 + 1;
			if(interleavedBuffer.data.length < interleavedBuffer.length) {
				var data11;
				var this14;
				this14 = new Array(interleavedBuffer.data.length + 10);
				data11 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(interleavedBuffer.data,0,data11,0,interleavedBuffer.data.length);
				interleavedBuffer.data = data11;
			}
		}
		if(suvs != null) interleavedBuffer.data[key10] = suvs.data[uvCompIndex]; else interleavedBuffer.data[key10] = 0;
		var key11 = interleavedCompIndex + 12;
		if(!interleavedBuffer.fixed) {
			if(key11 >= interleavedBuffer.length) interleavedBuffer.length = key11 + 1;
			if(interleavedBuffer.data.length < interleavedBuffer.length) {
				var data12;
				var this15;
				this15 = new Array(interleavedBuffer.data.length + 10);
				data12 = this15;
				haxe.ds._Vector.Vector_Impl_.blit(interleavedBuffer.data,0,data12,0,interleavedBuffer.data.length);
				interleavedBuffer.data = data12;
			}
		}
		if(suvs != null) interleavedBuffer.data[key11] = suvs.data[uvCompIndex + 1]; else interleavedBuffer.data[key11] = 0;
		++i;
	}
	return interleavedBuffer;
};
away3d.tools.utils.GeomUtil.getMeshSubgeometryIndex = function(subGeometry) {
	var index = 0;
	var subGeometries = subGeometry.get_parentGeometry().get_subGeometries();
	var i = 0;
	while(i < subGeometries.length) {
		if(subGeometries.data[i] == subGeometry) {
			index = i;
			break;
		}
		++i;
	}
	return index;
};
away3d.tools.utils.GeomUtil.getMeshSubMeshIndex = function(subMesh) {
	var index = 0;
	var subMeshes = subMesh.get_parentMesh().get_subMeshes();
	var i = 0;
	while(i < subMeshes.length) {
		if(subMeshes.data[i] == subMesh) {
			index = i;
			break;
		}
		++i;
	}
	return index;
};
away3d.tools.utils.TextureUtils = function() { };
$hxClasses["away3d.tools.utils.TextureUtils"] = away3d.tools.utils.TextureUtils;
away3d.tools.utils.TextureUtils.__name__ = ["away3d","tools","utils","TextureUtils"];
away3d.tools.utils.TextureUtils.isBitmapDataValid = function(bitmapData) {
	if(bitmapData == null) return true;
	return away3d.tools.utils.TextureUtils.isDimensionValid(bitmapData.width) && away3d.tools.utils.TextureUtils.isDimensionValid(bitmapData.height);
};
away3d.tools.utils.TextureUtils.isDimensionValid = function(d) {
	return d >= 1 && d <= away3d.tools.utils.TextureUtils.MAX_SIZE && away3d.tools.utils.TextureUtils.isPowerOfTwo(d);
};
away3d.tools.utils.TextureUtils.isPowerOfTwo = function(value) {
	if(value > 0) return (value & -value) == value; else return false;
};
away3d.tools.utils.TextureUtils.getBestPowerOf2 = function(value) {
	var p = 1;
	while(p < value) p <<= 1;
	if(p > away3d.tools.utils.TextureUtils.MAX_SIZE) p = away3d.tools.utils.TextureUtils.MAX_SIZE;
	return p;
};
com.imagination.core = {};
com.imagination.core.behaviors = {};
com.imagination.core.behaviors.scene = {};
com.imagination.core.behaviors.scene.SceneManager = function() {
	this.sceneObjects = new haxe.ds.StringMap();
	this.onInactive = new msignal.Signal0();
	this.onActive = new msignal.Signal0();
	com.imagination.core.behaviors.scene.SceneManager.sceneModel.change.add($bind(this,this.OnSceneChange));
};
$hxClasses["com.imagination.core.behaviors.scene.SceneManager"] = com.imagination.core.behaviors.scene.SceneManager;
com.imagination.core.behaviors.scene.SceneManager.__name__ = ["com","imagination","core","behaviors","scene","SceneManager"];
com.imagination.core.behaviors.scene.SceneManager.sceneModel = null;
com.imagination.core.behaviors.scene.SceneManager.prototype = {
	onActive: null
	,onInactive: null
	,sceneObjects: null
	,OnSceneChange: function() {
		var active = false;
		var $it0 = this.sceneObjects.iterator();
		while( $it0.hasNext() ) {
			var item = $it0.next();
			if(item.uri == com.imagination.core.behaviors.scene.SceneManager.sceneModel.get_uri() || item.uri == "*") {
				if(item.mask) {
					active = false;
					break;
				} else active = true;
			}
		}
		if(active) this.onActive.dispatch(); else this.onInactive.dispatch();
	}
	,addURI: function(uri) {
		this.sceneObject(uri).mask = false;
		this.check();
	}
	,maskURI: function(uri) {
		this.sceneObject(uri).mask = true;
		this.check();
	}
	,check: function() {
		this.OnSceneChange();
	}
	,sceneObject: function(uri) {
		if(this.sceneObjects.get(uri) == null) {
			var v = new com.imagination.core.behaviors.scene.SceneObject(uri);
			this.sceneObjects.set(uri,v);
			v;
		}
		return this.sceneObjects.get(uri);
	}
	,__class__: com.imagination.core.behaviors.scene.SceneManager
};
com.imagination.core.behaviors.scene.SceneObject = function(uri) {
	this.mask = false;
	this.uri = uri;
};
$hxClasses["com.imagination.core.behaviors.scene.SceneObject"] = com.imagination.core.behaviors.scene.SceneObject;
com.imagination.core.behaviors.scene.SceneObject.__name__ = ["com","imagination","core","behaviors","scene","SceneObject"];
com.imagination.core.behaviors.scene.SceneObject.prototype = {
	mask: null
	,uri: null
	,__class__: com.imagination.core.behaviors.scene.SceneObject
};
com.imagination.core.utils = {};
com.imagination.core.utils.device = {};
com.imagination.core.utils.device.DeviceInfo = function() {
};
$hxClasses["com.imagination.core.utils.device.DeviceInfo"] = com.imagination.core.utils.device.DeviceInfo;
com.imagination.core.utils.device.DeviceInfo.__name__ = ["com","imagination","core","utils","device","DeviceInfo"];
com.imagination.core.utils.device.DeviceInfo.__properties__ = {get_isAndroid:"get_isAndroid",get_isIOS:"get_isIOS",get_isPhone:"get_isPhone",get_isTablet:"get_isTablet",get_isDesktop:"get_isDesktop",get_isMobile:"get_isMobile"}
com.imagination.core.utils.device.DeviceInfo._checked = null;
com.imagination.core.utils.device.DeviceInfo._os = null;
com.imagination.core.utils.device.DeviceInfo._manufacturer = null;
com.imagination.core.utils.device.DeviceInfo._isMobile = null;
com.imagination.core.utils.device.DeviceInfo._isDesktop = null;
com.imagination.core.utils.device.DeviceInfo._isAndroid = null;
com.imagination.core.utils.device.DeviceInfo._isIOS = null;
com.imagination.core.utils.device.DeviceInfo._isTablet = null;
com.imagination.core.utils.device.DeviceInfo._isPhone = null;
com.imagination.core.utils.device.DeviceInfo.dpi = null;
com.imagination.core.utils.device.DeviceInfo.screenWidth = null;
com.imagination.core.utils.device.DeviceInfo.screenHeight = null;
com.imagination.core.utils.device.DeviceInfo.isMobile = null;
com.imagination.core.utils.device.DeviceInfo.isDesktop = null;
com.imagination.core.utils.device.DeviceInfo.isTablet = null;
com.imagination.core.utils.device.DeviceInfo.isPhone = null;
com.imagination.core.utils.device.DeviceInfo.isIOS = null;
com.imagination.core.utils.device.DeviceInfo.isAndroid = null;
com.imagination.core.utils.device.DeviceInfo.get_isMobile = function() {
	if(!com.imagination.core.utils.device.DeviceInfo._checked) com.imagination.core.utils.device.DeviceInfo.checkDevice();
	return com.imagination.core.utils.device.DeviceInfo._isMobile;
};
com.imagination.core.utils.device.DeviceInfo.get_isDesktop = function() {
	if(!com.imagination.core.utils.device.DeviceInfo._checked) com.imagination.core.utils.device.DeviceInfo.checkDevice();
	return com.imagination.core.utils.device.DeviceInfo._isDesktop;
};
com.imagination.core.utils.device.DeviceInfo.get_isTablet = function() {
	if(!com.imagination.core.utils.device.DeviceInfo._checked) com.imagination.core.utils.device.DeviceInfo.checkDevice();
	return com.imagination.core.utils.device.DeviceInfo._isTablet;
};
com.imagination.core.utils.device.DeviceInfo.get_isPhone = function() {
	if(!com.imagination.core.utils.device.DeviceInfo._checked) com.imagination.core.utils.device.DeviceInfo.checkDevice();
	return com.imagination.core.utils.device.DeviceInfo._isPhone;
};
com.imagination.core.utils.device.DeviceInfo.get_isIOS = function() {
	if(!com.imagination.core.utils.device.DeviceInfo._checked) com.imagination.core.utils.device.DeviceInfo.checkDevice();
	return com.imagination.core.utils.device.DeviceInfo._isIOS;
};
com.imagination.core.utils.device.DeviceInfo.get_isAndroid = function() {
	if(!com.imagination.core.utils.device.DeviceInfo._checked) com.imagination.core.utils.device.DeviceInfo.checkDevice();
	return com.imagination.core.utils.device.DeviceInfo._isAndroid;
};
com.imagination.core.utils.device.DeviceInfo.checkDevice = function() {
	com.imagination.core.utils.device.DeviceInfo._checked = true;
	com.imagination.core.utils.device.DeviceInfo._os = "HTML5".toLowerCase();
	com.imagination.core.utils.device.DeviceInfo._manufacturer = openfl.system.Capabilities.manufacturer.toLowerCase();
	if(com.imagination.core.utils.device.DeviceInfo._manufacturer.indexOf("windows") != -1 || com.imagination.core.utils.device.DeviceInfo._manufacturer.indexOf("osx") != -1) com.imagination.core.utils.device.DeviceInfo._isMobile = false; else com.imagination.core.utils.device.DeviceInfo._isMobile = true;
	com.imagination.core.utils.device.DeviceInfo._isDesktop = !com.imagination.core.utils.device.DeviceInfo._isMobile;
	com.imagination.core.utils.device.DeviceInfo.screenWidth = Math.max(openfl.system.Capabilities.get_screenResolutionX(),openfl.system.Capabilities.get_screenResolutionY());
	com.imagination.core.utils.device.DeviceInfo.screenHeight = Math.min(openfl.system.Capabilities.get_screenResolutionX(),openfl.system.Capabilities.get_screenResolutionY());
	com.imagination.core.utils.device.DeviceInfo.dpi = openfl.system.Capabilities.get_screenDPI();
	if(com.imagination.core.utils.device.DeviceInfo._isMobile) {
		if(com.imagination.core.utils.device.DeviceInfo._manufacturer.indexOf("android") != -1) com.imagination.core.utils.device.DeviceInfo._isAndroid = true;
		if(com.imagination.core.utils.device.DeviceInfo._manufacturer.indexOf("apple") != -1) com.imagination.core.utils.device.DeviceInfo._isIOS = true;
		if(Math.sqrt(com.imagination.core.utils.device.DeviceInfo.screenWidth * com.imagination.core.utils.device.DeviceInfo.screenWidth) / com.imagination.core.utils.device.DeviceInfo.dpi >= com.imagination.core.utils.device.DeviceInfo._tabletScreenMinimumInches) com.imagination.core.utils.device.DeviceInfo._isTablet = true; else com.imagination.core.utils.device.DeviceInfo._isPhone = true;
	}
};
com.imagination.core.utils.device.DeviceInfo.prototype = {
	__class__: com.imagination.core.utils.device.DeviceInfo
};
var robotlegs = {};
robotlegs.bender = {};
robotlegs.bender.framework = {};
robotlegs.bender.framework.api = {};
robotlegs.bender.framework.api.IConfig = function() { };
$hxClasses["robotlegs.bender.framework.api.IConfig"] = robotlegs.bender.framework.api.IConfig;
robotlegs.bender.framework.api.IConfig.__name__ = ["robotlegs","bender","framework","api","IConfig"];
robotlegs.bender.framework.api.IConfig.prototype = {
	configure: null
	,__class__: robotlegs.bender.framework.api.IConfig
};
com.imagination.core.view = {};
com.imagination.core.view.BaseViewConfig = function(profile,antiAlias) {
	if(antiAlias == null) antiAlias = 0;
	if(profile == null) profile = "baselineExtended";
	this.profile = profile;
	this.antiAlias = antiAlias;
};
$hxClasses["com.imagination.core.view.BaseViewConfig"] = com.imagination.core.view.BaseViewConfig;
com.imagination.core.view.BaseViewConfig.__name__ = ["com","imagination","core","view","BaseViewConfig"];
com.imagination.core.view.BaseViewConfig.__interfaces__ = [robotlegs.bender.framework.api.IConfig];
com.imagination.core.view.BaseViewConfig.prototype = {
	context: null
	,commandMap: null
	,mediatorMap: null
	,stack: null
	,renderer: null
	,contextView: null
	,profile: null
	,antiAlias: null
	,configure: function() {
		this.context.afterInitializing($bind(this,this.init));
	}
	,init: function() {
		this.renderer.get_onReady().addOnce($bind(this,this.OnContext3DReady));
		this.renderer.init(this.profile,this.antiAlias);
		this.renderer.start();
	}
	,OnContext3DReady: function() {
		this.mapMediators();
		this.initView();
		this.renderer.start();
	}
	,mapMediators: function() {
	}
	,initView: function() {
	}
	,__class__: com.imagination.core.view.BaseViewConfig
};
com.imagination.robotlegs.starling.commands = {};
com.imagination.robotlegs.starling.commands.CommandConfig = function() {
};
$hxClasses["com.imagination.robotlegs.starling.commands.CommandConfig"] = com.imagination.robotlegs.starling.commands.CommandConfig;
com.imagination.robotlegs.starling.commands.CommandConfig.__name__ = ["com","imagination","robotlegs","starling","commands","CommandConfig"];
com.imagination.robotlegs.starling.commands.CommandConfig.__interfaces__ = [robotlegs.bender.framework.api.IConfig];
com.imagination.robotlegs.starling.commands.CommandConfig.prototype = {
	commandMap: null
	,injector: null
	,configure: function() {
		this.commandMap.map(robotlegs.bender.extensions.imag.impl.signals.AppSetupCompleteSignal).toCommand(com.imagination.robotlegs.starling.commands.keyboard.KeyboardCommand);
	}
	,__class__: com.imagination.robotlegs.starling.commands.CommandConfig
};
robotlegs.bender.extensions = {};
robotlegs.bender.extensions.commandCenter = {};
robotlegs.bender.extensions.commandCenter.api = {};
robotlegs.bender.extensions.commandCenter.api.ICommand = function() { };
$hxClasses["robotlegs.bender.extensions.commandCenter.api.ICommand"] = robotlegs.bender.extensions.commandCenter.api.ICommand;
robotlegs.bender.extensions.commandCenter.api.ICommand.__name__ = ["robotlegs","bender","extensions","commandCenter","api","ICommand"];
robotlegs.bender.extensions.commandCenter.api.ICommand.prototype = {
	execute: null
	,__class__: robotlegs.bender.extensions.commandCenter.api.ICommand
};
robotlegs.bender.bundles = {};
robotlegs.bender.bundles.mvcs = {};
robotlegs.bender.bundles.mvcs.Command = function() { };
$hxClasses["robotlegs.bender.bundles.mvcs.Command"] = robotlegs.bender.bundles.mvcs.Command;
robotlegs.bender.bundles.mvcs.Command.__name__ = ["robotlegs","bender","bundles","mvcs","Command"];
robotlegs.bender.bundles.mvcs.Command.__interfaces__ = [robotlegs.bender.extensions.commandCenter.api.ICommand];
robotlegs.bender.bundles.mvcs.Command.prototype = {
	execute: function() {
	}
	,__class__: robotlegs.bender.bundles.mvcs.Command
};
com.imagination.robotlegs.starling.commands.keyboard = {};
com.imagination.robotlegs.starling.commands.keyboard.KeyboardCommand = function() {
};
$hxClasses["com.imagination.robotlegs.starling.commands.keyboard.KeyboardCommand"] = com.imagination.robotlegs.starling.commands.keyboard.KeyboardCommand;
com.imagination.robotlegs.starling.commands.keyboard.KeyboardCommand.__name__ = ["com","imagination","robotlegs","starling","commands","keyboard","KeyboardCommand"];
com.imagination.robotlegs.starling.commands.keyboard.KeyboardCommand.__super__ = robotlegs.bender.bundles.mvcs.Command;
com.imagination.robotlegs.starling.commands.keyboard.KeyboardCommand.prototype = $extend(robotlegs.bender.bundles.mvcs.Command.prototype,{
	sceneModel: null
	,keyboardMap: null
	,execute: function() {
		this.keyboardMap.map($bind(this,this.SetScene),"1",{ params : [com.imagination.robotlegs.starling.definitions.scene.SceneIDs.XXX]});
	}
	,SetScene: function(uri) {
		this.sceneModel.set_uri(uri);
	}
	,__class__: com.imagination.robotlegs.starling.commands.keyboard.KeyboardCommand
});
com.imagination.robotlegs.starling.definitions = {};
com.imagination.robotlegs.starling.definitions.scene = {};
com.imagination.robotlegs.starling.definitions.scene.SceneIDs = function() {
};
$hxClasses["com.imagination.robotlegs.starling.definitions.scene.SceneIDs"] = com.imagination.robotlegs.starling.definitions.scene.SceneIDs;
com.imagination.robotlegs.starling.definitions.scene.SceneIDs.__name__ = ["com","imagination","robotlegs","starling","definitions","scene","SceneIDs"];
com.imagination.robotlegs.starling.definitions.scene.SceneIDs.prototype = {
	__class__: com.imagination.robotlegs.starling.definitions.scene.SceneIDs
};
com.imagination.robotlegs.starling.model = {};
com.imagination.robotlegs.starling.model.ModelConfig = function() {
};
$hxClasses["com.imagination.robotlegs.starling.model.ModelConfig"] = com.imagination.robotlegs.starling.model.ModelConfig;
com.imagination.robotlegs.starling.model.ModelConfig.__name__ = ["com","imagination","robotlegs","starling","model","ModelConfig"];
com.imagination.robotlegs.starling.model.ModelConfig.__interfaces__ = [robotlegs.bender.framework.api.IConfig];
com.imagination.robotlegs.starling.model.ModelConfig.prototype = {
	injector: null
	,configModel: null
	,configure: function() {
		this.injector.map(com.imagination.robotlegs.starling.model.example.ExampleModel).asSingleton();
	}
	,__class__: com.imagination.robotlegs.starling.model.ModelConfig
};
robotlegs.bender.extensions.imag = {};
robotlegs.bender.extensions.imag.impl = {};
robotlegs.bender.extensions.imag.impl.model = {};
robotlegs.bender.extensions.imag.impl.model.config = {};
robotlegs.bender.extensions.imag.impl.model.config.BaseConfigModel = function() {
};
$hxClasses["robotlegs.bender.extensions.imag.impl.model.config.BaseConfigModel"] = robotlegs.bender.extensions.imag.impl.model.config.BaseConfigModel;
robotlegs.bender.extensions.imag.impl.model.config.BaseConfigModel.__name__ = ["robotlegs","bender","extensions","imag","impl","model","config","BaseConfigModel"];
robotlegs.bender.extensions.imag.impl.model.config.BaseConfigModel.prototype = {
	get_configURL: function() {
		return robotlegs.bender.extensions.imag.impl.model.config.BaseConfigModel._configURL;
	}
	,set_configURL: function(value) {
		robotlegs.bender.extensions.imag.impl.model.config.BaseConfigModel._configURL = value;
		return value;
	}
	,__class__: robotlegs.bender.extensions.imag.impl.model.config.BaseConfigModel
	,__properties__: {set_configURL:"set_configURL",get_configURL:"get_configURL"}
};
robotlegs.bender.extensions.imag.api = {};
robotlegs.bender.extensions.imag.api.model = {};
robotlegs.bender.extensions.imag.api.model.config = {};
robotlegs.bender.extensions.imag.api.model.config.IConfigModel = function() { };
$hxClasses["robotlegs.bender.extensions.imag.api.model.config.IConfigModel"] = robotlegs.bender.extensions.imag.api.model.config.IConfigModel;
robotlegs.bender.extensions.imag.api.model.config.IConfigModel.__name__ = ["robotlegs","bender","extensions","imag","api","model","config","IConfigModel"];
robotlegs.bender.extensions.imag.api.model.config.IConfigModel.prototype = {
	__class__: robotlegs.bender.extensions.imag.api.model.config.IConfigModel
};
com.imagination.robotlegs.starling.model.config = {};
com.imagination.robotlegs.starling.model.config.ConfigModel = function() {
	robotlegs.bender.extensions.imag.impl.model.config.BaseConfigModel.call(this);
};
$hxClasses["com.imagination.robotlegs.starling.model.config.ConfigModel"] = com.imagination.robotlegs.starling.model.config.ConfigModel;
com.imagination.robotlegs.starling.model.config.ConfigModel.__name__ = ["com","imagination","robotlegs","starling","model","config","ConfigModel"];
com.imagination.robotlegs.starling.model.config.ConfigModel.__interfaces__ = [robotlegs.bender.extensions.imag.api.model.config.IConfigModel];
com.imagination.robotlegs.starling.model.config.ConfigModel.__super__ = robotlegs.bender.extensions.imag.impl.model.config.BaseConfigModel;
com.imagination.robotlegs.starling.model.config.ConfigModel.prototype = $extend(robotlegs.bender.extensions.imag.impl.model.config.BaseConfigModel.prototype,{
	__class__: com.imagination.robotlegs.starling.model.config.ConfigModel
});
com.imagination.robotlegs.starling.model.example = {};
com.imagination.robotlegs.starling.model.example.ExampleModel = function() {
	this.change = new msignal.Signal0();
};
$hxClasses["com.imagination.robotlegs.starling.model.example.ExampleModel"] = com.imagination.robotlegs.starling.model.example.ExampleModel;
com.imagination.robotlegs.starling.model.example.ExampleModel.__name__ = ["com","imagination","robotlegs","starling","model","example","ExampleModel"];
com.imagination.robotlegs.starling.model.example.ExampleModel.prototype = {
	_value: null
	,change: null
	,get_value: function() {
		return this._value;
	}
	,set_value: function(value) {
		if(this._value == value) return value;
		this._value = value;
		this.change.dispatch();
		return value;
	}
	,__class__: com.imagination.robotlegs.starling.model.example.ExampleModel
	,__properties__: {set_value:"set_value",get_value:"get_value"}
};
com.imagination.robotlegs.starling.services = {};
com.imagination.robotlegs.starling.services.ServiceConfig = function() {
};
$hxClasses["com.imagination.robotlegs.starling.services.ServiceConfig"] = com.imagination.robotlegs.starling.services.ServiceConfig;
com.imagination.robotlegs.starling.services.ServiceConfig.__name__ = ["com","imagination","robotlegs","starling","services","ServiceConfig"];
com.imagination.robotlegs.starling.services.ServiceConfig.__interfaces__ = [robotlegs.bender.framework.api.IConfig];
com.imagination.robotlegs.starling.services.ServiceConfig.prototype = {
	injector: null
	,configure: function() {
		this.injector.map(com.imagination.robotlegs.starling.services.example.ExampleService).asSingleton();
	}
	,__class__: com.imagination.robotlegs.starling.services.ServiceConfig
};
com.imagination.robotlegs.starling.services.example = {};
com.imagination.robotlegs.starling.services.example.ExampleService = function() {
};
$hxClasses["com.imagination.robotlegs.starling.services.example.ExampleService"] = com.imagination.robotlegs.starling.services.example.ExampleService;
com.imagination.robotlegs.starling.services.example.ExampleService.__name__ = ["com","imagination","robotlegs","starling","services","example","ExampleService"];
com.imagination.robotlegs.starling.services.example.ExampleService.prototype = {
	__class__: com.imagination.robotlegs.starling.services.example.ExampleService
};
com.imagination.robotlegs.starling.view = {};
com.imagination.robotlegs.starling.view.ViewConfig = function() {
};
$hxClasses["com.imagination.robotlegs.starling.view.ViewConfig"] = com.imagination.robotlegs.starling.view.ViewConfig;
com.imagination.robotlegs.starling.view.ViewConfig.__name__ = ["com","imagination","robotlegs","starling","view","ViewConfig"];
com.imagination.robotlegs.starling.view.ViewConfig.__interfaces__ = [robotlegs.bender.framework.api.IConfig];
com.imagination.robotlegs.starling.view.ViewConfig.prototype = {
	context: null
	,commandMap: null
	,mediatorMap: null
	,stack: null
	,renderer: null
	,contextView: null
	,configure: function() {
		this.context.afterInitializing($bind(this,this.init));
	}
	,init: function() {
		this.renderer.get_onReady().addOnce($bind(this,this.OnContext3DReady));
		this.renderer.init("baseline",2);
		this.renderer.start();
	}
	,OnContext3DReady: function() {
		this.mapMediators();
		this.initView();
		this.renderer.start();
	}
	,mapMediators: function() {
		this.mediatorMap.map(com.imagination.robotlegs.starling.view.away3d.MainAwayLayer).toMediator(com.imagination.robotlegs.starling.view.away3d.MainAwayLayerMediator);
		this.mediatorMap.map(com.imagination.robotlegs.starling.view.away3d.MainAwayLayer2).toMediator(com.imagination.robotlegs.starling.view.away3d.MainAwayLayerMediator2);
		this.mediatorMap.map(com.imagination.robotlegs.starling.view.away3d.display.ExampleAwayObject).toMediator(com.imagination.robotlegs.starling.view.away3d.display.ExampleAwayObjectMediator);
		this.mediatorMap.map(com.imagination.robotlegs.starling.view.starling.MainStarlingLayer).toMediator(com.imagination.robotlegs.starling.view.starling.MainStarlingLayerMediator);
		this.mediatorMap.map(com.imagination.robotlegs.starling.view.starling.CheckerboardStarlingLayer).toMediator(com.imagination.robotlegs.starling.view.starling.CheckerboardStarlingLayerMediator);
	}
	,initView: function() {
		this.stack.addLayer(com.imagination.robotlegs.starling.view.starling.CheckerboardStarlingLayer);
		this.stack.addLayer(com.imagination.robotlegs.starling.view.away3d.MainAwayLayer);
		this.stack.addLayer(com.imagination.robotlegs.starling.view.starling.MainStarlingLayer);
		this.stack.addLayer(com.imagination.robotlegs.starling.view.away3d.MainAwayLayer2);
	}
	,__class__: com.imagination.robotlegs.starling.view.ViewConfig
};
robotlegs.bender.extensions.stage3D = {};
robotlegs.bender.extensions.stage3D.base = {};
robotlegs.bender.extensions.stage3D.base.api = {};
robotlegs.bender.extensions.stage3D.base.api.ILayer = function() { };
$hxClasses["robotlegs.bender.extensions.stage3D.base.api.ILayer"] = robotlegs.bender.extensions.stage3D.base.api.ILayer;
robotlegs.bender.extensions.stage3D.base.api.ILayer.__name__ = ["robotlegs","bender","extensions","stage3D","base","api","ILayer"];
robotlegs.bender.extensions.stage3D.base.api.ILayer.prototype = {
	process: null
	,iRenderer: null
	,rect: null
	,__class__: robotlegs.bender.extensions.stage3D.base.api.ILayer
};
robotlegs.bender.extensions.stage3D.away3d = {};
robotlegs.bender.extensions.stage3D.away3d.impl = {};
robotlegs.bender.extensions.stage3D.away3d.impl.AwayLayer = function(profile) {
	if(profile == null) profile = "baseline";
	away3d.containers.View3D.call(this,null,null,null,false,profile,0);
	this.profile = profile;
	this.get_camera().get_lens().set_far(20000);
	this.set_backgroundColor(5592405);
	this.set_shareContext(true);
};
$hxClasses["robotlegs.bender.extensions.stage3D.away3d.impl.AwayLayer"] = robotlegs.bender.extensions.stage3D.away3d.impl.AwayLayer;
robotlegs.bender.extensions.stage3D.away3d.impl.AwayLayer.__name__ = ["robotlegs","bender","extensions","stage3D","away3d","impl","AwayLayer"];
robotlegs.bender.extensions.stage3D.away3d.impl.AwayLayer.__interfaces__ = [robotlegs.bender.extensions.stage3D.base.api.ILayer];
robotlegs.bender.extensions.stage3D.away3d.impl.AwayLayer.__super__ = away3d.containers.View3D;
robotlegs.bender.extensions.stage3D.away3d.impl.AwayLayer.prototype = $extend(away3d.containers.View3D.prototype,{
	_iRenderer: null
	,iRenderer: null
	,rect: null
	,stage3DManager: null
	,profile: null
	,process: function() {
		this.render();
	}
	,set_rect: function(r) {
		this.set_x(this.get_stage3DProxy().set_x(r.x));
		this.set_y(this.get_stage3DProxy().set_y(r.y));
		this.set_width(r.width);
		this.set_height(r.height);
		this.get_stage3DProxy().set_width(r.width);
		this.get_stage3DProxy().set_height(r.height);
		return this.rect;
	}
	,set_iRenderer: function(value) {
		this._iRenderer = value;
		return value;
	}
	,__class__: robotlegs.bender.extensions.stage3D.away3d.impl.AwayLayer
	,__properties__: $extend(away3d.containers.View3D.prototype.__properties__,{set_rect:"set_rect",set_iRenderer:"set_iRenderer"})
});
com.imagination.robotlegs.starling.view.away3d = {};
com.imagination.robotlegs.starling.view.away3d.MainAwayLayer = function(profile) {
	robotlegs.bender.extensions.stage3D.away3d.impl.AwayLayer.call(this,profile);
};
$hxClasses["com.imagination.robotlegs.starling.view.away3d.MainAwayLayer"] = com.imagination.robotlegs.starling.view.away3d.MainAwayLayer;
com.imagination.robotlegs.starling.view.away3d.MainAwayLayer.__name__ = ["com","imagination","robotlegs","starling","view","away3d","MainAwayLayer"];
com.imagination.robotlegs.starling.view.away3d.MainAwayLayer.__super__ = robotlegs.bender.extensions.stage3D.away3d.impl.AwayLayer;
com.imagination.robotlegs.starling.view.away3d.MainAwayLayer.prototype = $extend(robotlegs.bender.extensions.stage3D.away3d.impl.AwayLayer.prototype,{
	exampleAwayObject: null
	,initialize: function() {
		this.exampleAwayObject = new com.imagination.robotlegs.starling.view.away3d.display.ExampleAwayObject();
		this.get_scene().addChild(this.exampleAwayObject);
		this.stage.addEventListener(openfl.events.Event.ENTER_FRAME,$bind(this,this.Update));
	}
	,Update: function(e) {
		this.exampleAwayObject.update();
	}
	,process: function() {
		this.render();
	}
	,__class__: com.imagination.robotlegs.starling.view.away3d.MainAwayLayer
});
com.imagination.robotlegs.starling.view.away3d.MainAwayLayer2 = function(profile) {
	robotlegs.bender.extensions.stage3D.away3d.impl.AwayLayer.call(this,profile);
};
$hxClasses["com.imagination.robotlegs.starling.view.away3d.MainAwayLayer2"] = com.imagination.robotlegs.starling.view.away3d.MainAwayLayer2;
com.imagination.robotlegs.starling.view.away3d.MainAwayLayer2.__name__ = ["com","imagination","robotlegs","starling","view","away3d","MainAwayLayer2"];
com.imagination.robotlegs.starling.view.away3d.MainAwayLayer2.__super__ = robotlegs.bender.extensions.stage3D.away3d.impl.AwayLayer;
com.imagination.robotlegs.starling.view.away3d.MainAwayLayer2.prototype = $extend(robotlegs.bender.extensions.stage3D.away3d.impl.AwayLayer.prototype,{
	exampleAwayObject: null
	,initialize: function() {
		this.exampleAwayObject = new com.imagination.robotlegs.starling.view.away3d.display.ExampleAwayObject(400,5635993);
		this.get_scene().addChild(this.exampleAwayObject);
		this.exampleAwayObject.set_z(-400);
		this.stage.addEventListener(openfl.events.Event.ENTER_FRAME,$bind(this,this.Update));
	}
	,Update: function(e) {
		this.exampleAwayObject.update();
	}
	,process: function() {
		haxe.Log.trace("process",{ fileName : "MainAwayLayer2.hx", lineNumber : 43, className : "com.imagination.robotlegs.starling.view.away3d.MainAwayLayer2", methodName : "process"});
		this.render();
	}
	,__class__: com.imagination.robotlegs.starling.view.away3d.MainAwayLayer2
});
robotlegs.bender.extensions.mediatorMap = {};
robotlegs.bender.extensions.mediatorMap.api = {};
robotlegs.bender.extensions.mediatorMap.api.IMediator = function() { };
$hxClasses["robotlegs.bender.extensions.mediatorMap.api.IMediator"] = robotlegs.bender.extensions.mediatorMap.api.IMediator;
robotlegs.bender.extensions.mediatorMap.api.IMediator.__name__ = ["robotlegs","bender","extensions","mediatorMap","api","IMediator"];
robotlegs.bender.extensions.mediatorMap.api.IMediator.prototype = {
	initialize: null
	,destroy: null
	,__class__: robotlegs.bender.extensions.mediatorMap.api.IMediator
};
robotlegs.bender.bundles.mvcs.Mediator = function() { };
$hxClasses["robotlegs.bender.bundles.mvcs.Mediator"] = robotlegs.bender.bundles.mvcs.Mediator;
robotlegs.bender.bundles.mvcs.Mediator.__name__ = ["robotlegs","bender","bundles","mvcs","Mediator"];
robotlegs.bender.bundles.mvcs.Mediator.__interfaces__ = [robotlegs.bender.extensions.mediatorMap.api.IMediator];
robotlegs.bender.bundles.mvcs.Mediator.prototype = {
	eventMap: null
	,eventDispatcher: null
	,_viewComponent: null
	,set_viewComponent: function(view) {
		this._viewComponent = view;
	}
	,initialize: function() {
	}
	,destroy: function() {
	}
	,postDestroy: function() {
		this.eventMap.unmapListeners();
	}
	,addViewListener: function(eventString,listener,eventClass) {
		this.eventMap.mapListener(js.Boot.__cast(this._viewComponent , openfl.events.IEventDispatcher),eventString,listener,eventClass);
	}
	,addContextListener: function(eventString,listener,eventClass) {
		this.eventMap.mapListener(this.eventDispatcher,eventString,listener,eventClass);
	}
	,removeViewListener: function(eventString,listener,eventClass) {
		this.eventMap.unmapListener(js.Boot.__cast(this._viewComponent , openfl.events.IEventDispatcher),eventString,listener,eventClass);
	}
	,removeContextListener: function(eventString,listener,eventClass) {
		this.eventMap.unmapListener(this.eventDispatcher,eventString,listener,eventClass);
	}
	,dispatch: function(event) {
		if(this.eventDispatcher.hasEventListener(event.type)) this.eventDispatcher.dispatchEvent(event);
	}
	,__class__: robotlegs.bender.bundles.mvcs.Mediator
};
com.imagination.robotlegs.starling.view.away3d.MainAwayLayerMediator = function() {
};
$hxClasses["com.imagination.robotlegs.starling.view.away3d.MainAwayLayerMediator"] = com.imagination.robotlegs.starling.view.away3d.MainAwayLayerMediator;
com.imagination.robotlegs.starling.view.away3d.MainAwayLayerMediator.__name__ = ["com","imagination","robotlegs","starling","view","away3d","MainAwayLayerMediator"];
com.imagination.robotlegs.starling.view.away3d.MainAwayLayerMediator.__super__ = robotlegs.bender.bundles.mvcs.Mediator;
com.imagination.robotlegs.starling.view.away3d.MainAwayLayerMediator.prototype = $extend(robotlegs.bender.bundles.mvcs.Mediator.prototype,{
	view: null
	,initialize: function() {
		this.view.initialize();
	}
	,__class__: com.imagination.robotlegs.starling.view.away3d.MainAwayLayerMediator
});
com.imagination.robotlegs.starling.view.away3d.MainAwayLayerMediator2 = function() {
};
$hxClasses["com.imagination.robotlegs.starling.view.away3d.MainAwayLayerMediator2"] = com.imagination.robotlegs.starling.view.away3d.MainAwayLayerMediator2;
com.imagination.robotlegs.starling.view.away3d.MainAwayLayerMediator2.__name__ = ["com","imagination","robotlegs","starling","view","away3d","MainAwayLayerMediator2"];
com.imagination.robotlegs.starling.view.away3d.MainAwayLayerMediator2.__super__ = robotlegs.bender.bundles.mvcs.Mediator;
com.imagination.robotlegs.starling.view.away3d.MainAwayLayerMediator2.prototype = $extend(robotlegs.bender.bundles.mvcs.Mediator.prototype,{
	view: null
	,initialize: function() {
		this.view.initialize();
	}
	,__class__: com.imagination.robotlegs.starling.view.away3d.MainAwayLayerMediator2
});
com.imagination.robotlegs.starling.view.away3d.display = {};
com.imagination.robotlegs.starling.view.away3d.display.ExampleAwayObject = function(depth,colour) {
	if(colour == null) colour = 16777215;
	if(depth == null) depth = 1000;
	away3d.containers.ObjectContainer3D.call(this);
	this.depth = depth;
	this.colour = colour;
};
$hxClasses["com.imagination.robotlegs.starling.view.away3d.display.ExampleAwayObject"] = com.imagination.robotlegs.starling.view.away3d.display.ExampleAwayObject;
com.imagination.robotlegs.starling.view.away3d.display.ExampleAwayObject.__name__ = ["com","imagination","robotlegs","starling","view","away3d","display","ExampleAwayObject"];
com.imagination.robotlegs.starling.view.away3d.display.ExampleAwayObject.__super__ = away3d.containers.ObjectContainer3D;
com.imagination.robotlegs.starling.view.away3d.display.ExampleAwayObject.prototype = $extend(away3d.containers.ObjectContainer3D.prototype,{
	cubes: null
	,colour: null
	,depth: null
	,initialize: function() {
		var light = new away3d.lights.DirectionalLight();
		var lightPicker = new away3d.materials.lightpickers.StaticLightPicker([light]);
		var geo = new away3d.primitives.CubeGeometry(60,60,60);
		var material = new away3d.materials.ColorMaterial(this.colour);
		var this1;
		this1 = new openfl.VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		this.cubes = this1;
		var _g = 0;
		while(_g < 50) {
			var i = _g++;
			var mesh = new away3d.entities.Mesh(geo,material);
			mesh.set_rotationX(45);
			mesh.set_rotationY(Math.random() * 360);
			mesh.set_x(Math.random() * 2000 - 1000);
			mesh.set_y(Math.random() * 1500 - 750);
			mesh.set_z(i / 50 * -this.depth + this.depth);
			this.addChild(mesh);
			var this3 = this.cubes;
			if(!this3.fixed) {
				this3.length++;
				if(this3.data.length < this3.length) {
					var data;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
					this3.data = data;
				}
				this3.data[this3.length - 1] = mesh;
			}
			this3.length;
		}
		material.set_lightPicker(lightPicker);
	}
	,update: function() {
		var _g1 = 0;
		var _g = this.cubes.length;
		while(_g1 < _g) {
			var i = _g1++;
			var _g2 = this.cubes.data[i];
			_g2.set_rotationY(_g2.get_rotationY() + 0.5);
		}
	}
	,__class__: com.imagination.robotlegs.starling.view.away3d.display.ExampleAwayObject
});
com.imagination.robotlegs.starling.view.away3d.display.ExampleAwayObjectMediator = function() {
};
$hxClasses["com.imagination.robotlegs.starling.view.away3d.display.ExampleAwayObjectMediator"] = com.imagination.robotlegs.starling.view.away3d.display.ExampleAwayObjectMediator;
com.imagination.robotlegs.starling.view.away3d.display.ExampleAwayObjectMediator.__name__ = ["com","imagination","robotlegs","starling","view","away3d","display","ExampleAwayObjectMediator"];
com.imagination.robotlegs.starling.view.away3d.display.ExampleAwayObjectMediator.__super__ = robotlegs.bender.bundles.mvcs.Mediator;
com.imagination.robotlegs.starling.view.away3d.display.ExampleAwayObjectMediator.prototype = $extend(robotlegs.bender.bundles.mvcs.Mediator.prototype,{
	view: null
	,initialize: function() {
		this.view.initialize();
	}
	,__class__: com.imagination.robotlegs.starling.view.away3d.display.ExampleAwayObjectMediator
});
var starling = {};
starling.events = {};
starling.events.EventDispatcher = function() {
};
$hxClasses["starling.events.EventDispatcher"] = starling.events.EventDispatcher;
starling.events.EventDispatcher.__name__ = ["starling","events","EventDispatcher"];
starling.events.EventDispatcher.prototype = {
	mEventListeners: null
	,addEventListener: function(type,listener) {
		if(this.mEventListeners == null) this.mEventListeners = new haxe.ds.StringMap();
		var listeners = this.mEventListeners.get(type);
		if(listeners == null) {
			var v = new Array();
			this.mEventListeners.set(type,v);
			v;
			this.mEventListeners.get(type).push(listener);
		} else if((function($this) {
			var $r;
			var x = listener;
			$r = HxOverrides.indexOf(listeners,x,0);
			return $r;
		}(this)) == -1) listeners[listeners.length] = listener;
	}
	,removeEventListener: function(type,listener) {
		if(this.mEventListeners != null) {
			var listeners = this.mEventListeners.get(type);
			var numListeners;
			if(listeners != null) numListeners = listeners.length; else numListeners = 0;
			if(numListeners > 0) {
				var index = 0;
				var restListeners;
				var length = numListeners - 1;
				var this1;
				this1 = new openfl.VectorData();
				var this2;
				this2 = new Array(length);
				this1.data = this2;
				this1.length = length;
				this1.fixed = false;
				restListeners = this1;
				var _g = 0;
				while(_g < numListeners) {
					var i = _g++;
					var otherListener = listeners[i];
					if(otherListener != listener) {
						var key;
						key = js.Boot.__cast(index++ , Int);
						var value = otherListener;
						if(!restListeners.fixed) {
							if(key >= restListeners.length) restListeners.length = key + 1;
							if(restListeners.data.length < restListeners.length) {
								var data;
								var this3;
								this3 = new Array(restListeners.data.length + 10);
								data = this3;
								haxe.ds._Vector.Vector_Impl_.blit(restListeners.data,0,data,0,restListeners.data.length);
								restListeners.data = data;
							}
						}
						restListeners.data[key] = value;
					}
				}
				var v;
				var value1 = new Array();
				var _g1 = 0;
				var _g2 = restListeners.data.length;
				while(_g1 < _g2) {
					var i1 = _g1++;
					value1.push(restListeners.data[i1]);
				}
				v = value1;
				this.mEventListeners.set(type,v);
				v;
			}
		}
	}
	,removeEventListeners: function(type) {
		if(type != null && this.mEventListeners != null) this.mEventListeners.remove(type); else this.mEventListeners = null;
	}
	,dispatchEvent: function(event) {
		var bubbles = event.get_bubbles();
		if(!bubbles && this.mEventListeners == null) return;
		if(this.mEventListeners != null) {
			var containsType;
			var key = event.get_type();
			containsType = this.mEventListeners.exists(key);
			if(!bubbles && containsType == false) return;
		}
		var previousTarget = event.get_target();
		event.setTarget(this);
		if(bubbles && js.Boot.__instanceof(this,starling.display.DisplayObject)) this.bubbleEvent(event); else this.invokeEvent(event);
		if(previousTarget != null) event.setTarget(previousTarget);
	}
	,invokeEvent: function(event) {
		var listeners;
		if(this.mEventListeners != null) {
			var key = event.get_type();
			listeners = this.mEventListeners.get(key);
		} else listeners = null;
		var numListeners;
		if(listeners == null) numListeners = 0; else numListeners = listeners.length;
		if(numListeners) {
			event.setCurrentTarget(this);
			var _g = 0;
			while(_g < numListeners) {
				var i = _g++;
				var listener = listeners[i];
				if(listener != null) listener(event,event.get_data());
				if(event.get_stopsImmediatePropagation()) return true;
			}
			return event.get_stopsPropagation();
		} else return false;
	}
	,bubbleEvent: function(event) {
		var chain;
		var element = this;
		var length = 1;
		if(starling.events.EventDispatcher.sBubbleChains.length > 0) {
			chain = starling.events.EventDispatcher.sBubbleChains.pop();
			if(!chain.fixed) {
				if(0 >= chain.length) chain.length = 1;
				if(chain.data.length < chain.length) {
					var data;
					var this1;
					this1 = new Array(chain.data.length + 10);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(chain.data,0,data,0,chain.data.length);
					chain.data = data;
				}
			}
			chain.data[0] = element;
		} else {
			var this2;
			this2 = new openfl.VectorData();
			var this3;
			this3 = new Array(0);
			this2.data = this3;
			this2.length = 0;
			this2.fixed = false;
			chain = this2;
			if(!chain.fixed) {
				chain.length++;
				if(chain.data.length < chain.length) {
					var data1;
					var this4;
					this4 = new Array(chain.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(chain.data,0,data1,0,chain.data.length);
					chain.data = data1;
				}
				chain.data[chain.length - 1] = element;
			}
			chain.length;
		}
		while((element = element.get_parent()) != null) {
			var key;
			key = js.Boot.__cast(length++ , Int);
			if(!chain.fixed) {
				if(key >= chain.length) chain.length = key + 1;
				if(chain.data.length < chain.length) {
					var data2;
					var this5;
					this5 = new Array(chain.data.length + 10);
					data2 = this5;
					haxe.ds._Vector.Vector_Impl_.blit(chain.data,0,data2,0,chain.data.length);
					chain.data = data2;
				}
			}
			chain.data[key] = element;
		}
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var stopPropagation = chain.data[i].invokeEvent(event);
			if(stopPropagation) break;
		}
		if(!chain.fixed) {
			if(0 > chain.length) {
				var data3;
				var this6;
				this6 = new Array(0);
				data3 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(chain.data,0,data3,0,Std["int"](Math.min(chain.data.length,0)));
				chain.data = data3;
			}
			chain.length = 0;
		}
		0;
		starling.events.EventDispatcher.sBubbleChains[starling.events.EventDispatcher.sBubbleChains.length] = chain;
	}
	,dispatchEventWith: function(type,bubbles,data) {
		if(bubbles == null) bubbles = false;
		if(bubbles || this.hasEventListener(type)) {
			var event = starling.events.Event.fromPool(type,bubbles,data);
			this.dispatchEvent(event);
			starling.events.Event.toPool(event);
		}
	}
	,hasEventListener: function(type) {
		var listeners;
		if(this.mEventListeners != null) listeners = this.mEventListeners.get(type); else listeners = null;
		if(listeners != null) return listeners.length != 0; else return false;
	}
	,__class__: starling.events.EventDispatcher
};
openfl.geom.Matrix3D = function(v) {
	if(v != null && v.length == 16) this.rawData = v; else {
		var value = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(value.length);
		vec = this1;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = value[i];
		}
		vectorData.data = vec;
		this.rawData = vectorData;
	}
};
$hxClasses["openfl.geom.Matrix3D"] = openfl.geom.Matrix3D;
openfl.geom.Matrix3D.__name__ = ["openfl","geom","Matrix3D"];
openfl.geom.Matrix3D.create2D = function(x,y,scale,rotation) {
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return new openfl.geom.Matrix3D((function($this) {
		var $r;
		var value = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl.geom.Matrix3D.createABCD = function(a,b,c,d,tx,ty) {
	return new openfl.geom.Matrix3D((function($this) {
		var $r;
		var value = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl.geom.Matrix3D.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return new openfl.geom.Matrix3D((function($this) {
		var $r;
		var value = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl.geom.Matrix3D.interpolate = function(thisMat,toMat,percent) {
	var m = new openfl.geom.Matrix3D();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var this1 = m.rawData;
		if(!this1.fixed) {
			if(i >= this1.length) this1.length = i + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[i] = thisMat.rawData.data[i] + (toMat.rawData.data[i] - thisMat.rawData.data[i]) * percent;
	}
	return m;
};
openfl.geom.Matrix3D.getAxisRotation = function(x,y,z,degrees) {
	var m = new openfl.geom.Matrix3D();
	var a1 = new openfl.geom.Vector3D(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	var this1 = m.rawData;
	if(!this1.fixed) {
		if(0 >= this1.length) this1.length = 1;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
	}
	this1.data[0] = c + a1.x * a1.x * t;
	var this3 = m.rawData;
	if(!this3.fixed) {
		if(5 >= this3.length) this3.length = 6;
		if(this3.data.length < this3.length) {
			var data1;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data1 = this4;
			haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
			this3.data = data1;
		}
	}
	this3.data[5] = c + a1.y * a1.y * t;
	var this5 = m.rawData;
	if(!this5.fixed) {
		if(10 >= this5.length) this5.length = 11;
		if(this5.data.length < this5.length) {
			var data2;
			var this6;
			this6 = new Array(this5.data.length + 10);
			data2 = this6;
			haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
			this5.data = data2;
		}
	}
	this5.data[10] = c + a1.z * a1.z * t;
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	var this7 = m.rawData;
	if(!this7.fixed) {
		if(4 >= this7.length) this7.length = 5;
		if(this7.data.length < this7.length) {
			var data3;
			var this8;
			this8 = new Array(this7.data.length + 10);
			data3 = this8;
			haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
			this7.data = data3;
		}
	}
	this7.data[4] = tmp1 + tmp2;
	var this9 = m.rawData;
	if(!this9.fixed) {
		if(1 >= this9.length) this9.length = 2;
		if(this9.data.length < this9.length) {
			var data4;
			var this10;
			this10 = new Array(this9.data.length + 10);
			data4 = this10;
			haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
			this9.data = data4;
		}
	}
	this9.data[1] = tmp1 - tmp2;
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	var this11 = m.rawData;
	if(!this11.fixed) {
		if(8 >= this11.length) this11.length = 9;
		if(this11.data.length < this11.length) {
			var data5;
			var this12;
			this12 = new Array(this11.data.length + 10);
			data5 = this12;
			haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
			this11.data = data5;
		}
	}
	this11.data[8] = tmp1 - tmp2;
	var this13 = m.rawData;
	if(!this13.fixed) {
		if(2 >= this13.length) this13.length = 3;
		if(this13.data.length < this13.length) {
			var data6;
			var this14;
			this14 = new Array(this13.data.length + 10);
			data6 = this14;
			haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
			this13.data = data6;
		}
	}
	this13.data[2] = tmp1 + tmp2;
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	var this15 = m.rawData;
	if(!this15.fixed) {
		if(9 >= this15.length) this15.length = 10;
		if(this15.data.length < this15.length) {
			var data7;
			var this16;
			this16 = new Array(this15.data.length + 10);
			data7 = this16;
			haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
			this15.data = data7;
		}
	}
	this15.data[9] = tmp1 + tmp2;
	var this17 = m.rawData;
	if(!this17.fixed) {
		if(6 >= this17.length) this17.length = 7;
		if(this17.data.length < this17.length) {
			var data8;
			var this18;
			this18 = new Array(this17.data.length + 10);
			data8 = this18;
			haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
			this17.data = data8;
		}
	}
	this17.data[6] = tmp1 - tmp2;
	return m;
};
openfl.geom.Matrix3D.prototype = {
	determinant: null
	,rawData: null
	,append: function(lhs) {
		var m111 = this.rawData.data[0];
		var m121 = this.rawData.data[4];
		var m131 = this.rawData.data[8];
		var m141 = this.rawData.data[12];
		var m112 = this.rawData.data[1];
		var m122 = this.rawData.data[5];
		var m132 = this.rawData.data[9];
		var m142 = this.rawData.data[13];
		var m113 = this.rawData.data[2];
		var m123 = this.rawData.data[6];
		var m133 = this.rawData.data[10];
		var m143 = this.rawData.data[14];
		var m114 = this.rawData.data[3];
		var m124 = this.rawData.data[7];
		var m134 = this.rawData.data[11];
		var m144 = this.rawData.data[15];
		var m211 = lhs.rawData.data[0];
		var m221 = lhs.rawData.data[4];
		var m231 = lhs.rawData.data[8];
		var m241 = lhs.rawData.data[12];
		var m212 = lhs.rawData.data[1];
		var m222 = lhs.rawData.data[5];
		var m232 = lhs.rawData.data[9];
		var m242 = lhs.rawData.data[13];
		var m213 = lhs.rawData.data[2];
		var m223 = lhs.rawData.data[6];
		var m233 = lhs.rawData.data[10];
		var m243 = lhs.rawData.data[14];
		var m214 = lhs.rawData.data[3];
		var m224 = lhs.rawData.data[7];
		var m234 = lhs.rawData.data[11];
		var m244 = lhs.rawData.data[15];
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(6 >= this13.length) this13.length = 7;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(7 >= this15.length) this15.length = 8;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(8 >= this17.length) this17.length = 9;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(9 >= this19.length) this19.length = 10;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(11 >= this23.length) this23.length = 12;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(12 >= this25.length) this25.length = 13;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(13 >= this27.length) this27.length = 14;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(14 >= this29.length) this29.length = 15;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
	}
	,appendRotation: function(degrees,axis,pivotPoint) {
		var m = openfl.geom.Matrix3D.getAxisRotation(axis.x,axis.y,axis.z,degrees);
		if(pivotPoint != null) {
			var p = pivotPoint;
			m.appendTranslation(p.x,p.y,p.z);
		}
		this.append(m);
	}
	,appendScale: function(xScale,yScale,zScale) {
		this.append(new openfl.geom.Matrix3D((function($this) {
			var $r;
			var value = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
			var vectorData = new openfl.VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while(_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this))));
	}
	,appendTranslation: function(x,y,z) {
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(12 >= this1.length) this1.length = 13;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[12] = this.rawData.data[12] + x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(13 >= this3.length) this3.length = 14;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[13] = this.rawData.data[13] + y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(14 >= this5.length) this5.length = 15;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[14] = this.rawData.data[14] + z;
	}
	,clone: function() {
		return new openfl.geom.Matrix3D((function($this) {
			var $r;
			var this1 = $this.rawData;
			var vectorData = new openfl.VectorData();
			vectorData.length = this1.length;
			vectorData.fixed = this1.fixed;
			{
				var this2;
				this2 = new Array(this1.length);
				vectorData.data = this2;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
			$r = vectorData;
			return $r;
		}(this)));
	}
	,copyColumnFrom: function(column,vector3D) {
		switch(column) {
		case 0:
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = vector3D.x;
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = vector3D.y;
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = vector3D.z;
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = vector3D.w;
			break;
		case 1:
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = vector3D.x;
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = vector3D.y;
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = vector3D.z;
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = vector3D.w;
			break;
		case 2:
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = vector3D.x;
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = vector3D.y;
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = vector3D.z;
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = vector3D.w;
			break;
		case 3:
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = vector3D.x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = vector3D.y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = vector3D.z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = vector3D.w;
			break;
		default:
			throw new openfl.errors.Error("Error, Column " + column + " out of bounds [0, ..., 3]");
		}
	}
	,copyColumnTo: function(column,vector3D) {
		switch(column) {
		case 0:
			vector3D.x = this.rawData.data[0];
			vector3D.y = this.rawData.data[1];
			vector3D.z = this.rawData.data[2];
			vector3D.w = this.rawData.data[3];
			break;
		case 1:
			vector3D.x = this.rawData.data[4];
			vector3D.y = this.rawData.data[5];
			vector3D.z = this.rawData.data[6];
			vector3D.w = this.rawData.data[7];
			break;
		case 2:
			vector3D.x = this.rawData.data[8];
			vector3D.y = this.rawData.data[9];
			vector3D.z = this.rawData.data[10];
			vector3D.w = this.rawData.data[11];
			break;
		case 3:
			vector3D.x = this.rawData.data[12];
			vector3D.y = this.rawData.data[13];
			vector3D.z = this.rawData.data[14];
			vector3D.w = this.rawData.data[15];
			break;
		default:
			throw new openfl.errors.Error("Error, Column " + column + " out of bounds [0, ..., 3]");
		}
	}
	,copyFrom: function(other) {
		var this1 = other.rawData;
		var vectorData = new openfl.VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
		this.rawData = vectorData;
	}
	,copyRawDataFrom: function(vector,index,transpose) {
		if(transpose == null) transpose = false;
		if(index == null) index = 0;
		if(transpose) this.transpose();
		var l = vector.length - index;
		var _g = 0;
		while(_g < l) {
			var c = _g++;
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(c >= this1.length) this1.length = c + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[c] = vector.data[c + index];
		}
		if(transpose) this.transpose();
	}
	,copyRawDataTo: function(vector,index,transpose) {
		if(transpose == null) transpose = false;
		if(index == null) index = 0;
		if(transpose) this.transpose();
		var l = this.rawData.length;
		var _g = 0;
		while(_g < l) {
			var c = _g++;
			var key = c + index;
			if(!vector.fixed) {
				if(key >= vector.length) vector.length = key + 1;
				if(vector.data.length < vector.length) {
					var data;
					var this1;
					this1 = new Array(vector.data.length + 10);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(vector.data,0,data,0,vector.data.length);
					vector.data = data;
				}
			}
			vector.data[key] = this.rawData.data[c];
		}
		if(transpose) this.transpose();
	}
	,copyRowFrom: function(row,vector3D) {
		switch(row) {
		case 0:
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = vector3D.x;
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(4 >= this3.length) this3.length = 5;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[4] = vector3D.y;
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(8 >= this5.length) this5.length = 9;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[8] = vector3D.z;
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(12 >= this7.length) this7.length = 13;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[12] = vector3D.w;
			break;
		case 1:
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(1 >= this9.length) this9.length = 2;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[1] = vector3D.x;
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = vector3D.y;
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(9 >= this13.length) this13.length = 10;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[9] = vector3D.z;
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(13 >= this15.length) this15.length = 14;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[13] = vector3D.w;
			break;
		case 2:
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(2 >= this17.length) this17.length = 3;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[2] = vector3D.x;
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(6 >= this19.length) this19.length = 7;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[6] = vector3D.y;
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = vector3D.z;
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(14 >= this23.length) this23.length = 15;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[14] = vector3D.w;
			break;
		case 3:
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(3 >= this25.length) this25.length = 4;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[3] = vector3D.x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(7 >= this27.length) this27.length = 8;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[7] = vector3D.y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(11 >= this29.length) this29.length = 12;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[11] = vector3D.z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = vector3D.w;
			break;
		default:
			throw new openfl.errors.Error("Error, Row " + Std.string((function($this) {
				var $r;
				var $int = row;
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}(this))) + " out of bounds [0, ..., 3]");
		}
	}
	,copyRowTo: function(row,vector3D) {
		switch(row) {
		case 0:
			vector3D.x = this.rawData.data[0];
			vector3D.y = this.rawData.data[4];
			vector3D.z = this.rawData.data[8];
			vector3D.w = this.rawData.data[12];
			break;
		case 1:
			vector3D.x = this.rawData.data[1];
			vector3D.y = this.rawData.data[5];
			vector3D.z = this.rawData.data[9];
			vector3D.w = this.rawData.data[13];
			break;
		case 2:
			vector3D.x = this.rawData.data[2];
			vector3D.y = this.rawData.data[6];
			vector3D.z = this.rawData.data[10];
			vector3D.w = this.rawData.data[14];
			break;
		case 3:
			vector3D.x = this.rawData.data[3];
			vector3D.y = this.rawData.data[7];
			vector3D.z = this.rawData.data[11];
			vector3D.w = this.rawData.data[15];
			break;
		default:
			throw new openfl.errors.Error("Error, Row " + row + " out of bounds [0, ..., 3]");
		}
	}
	,copyToMatrix3D: function(other) {
		var this1 = this.rawData;
		var vectorData = new openfl.VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
		other.rawData = vectorData;
	}
	,decompose: function(orientationStyle) {
		if(orientationStyle == null) orientationStyle = openfl.geom.Orientation3D.EULER_ANGLES;
		var vec;
		var this1;
		this1 = new openfl.VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		vec = this1;
		var m = this.clone();
		var mr;
		var this3 = m.rawData;
		var vectorData = new openfl.VectorData();
		vectorData.length = this3.length;
		vectorData.fixed = this3.fixed;
		var this4;
		this4 = new Array(this3.length);
		vectorData.data = this4;
		haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,vectorData.data,0,this3.length);
		mr = vectorData;
		var pos = new openfl.geom.Vector3D(mr.data[12],mr.data[13],mr.data[14]);
		if(!mr.fixed) {
			if(12 >= mr.length) mr.length = 13;
			if(mr.data.length < mr.length) {
				var data;
				var this5;
				this5 = new Array(mr.data.length + 10);
				data = this5;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data,0,mr.data.length);
				mr.data = data;
			}
		}
		mr.data[12] = 0;
		if(!mr.fixed) {
			if(13 >= mr.length) mr.length = 14;
			if(mr.data.length < mr.length) {
				var data1;
				var this6;
				this6 = new Array(mr.data.length + 10);
				data1 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data1,0,mr.data.length);
				mr.data = data1;
			}
		}
		mr.data[13] = 0;
		if(!mr.fixed) {
			if(14 >= mr.length) mr.length = 15;
			if(mr.data.length < mr.length) {
				var data2;
				var this7;
				this7 = new Array(mr.data.length + 10);
				data2 = this7;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data2,0,mr.data.length);
				mr.data = data2;
			}
		}
		mr.data[14] = 0;
		var scale = new openfl.geom.Vector3D();
		scale.x = Math.sqrt(mr.data[0] * mr.data[0] + mr.data[1] * mr.data[1] + mr.data[2] * mr.data[2]);
		scale.y = Math.sqrt(mr.data[4] * mr.data[4] + mr.data[5] * mr.data[5] + mr.data[6] * mr.data[6]);
		scale.z = Math.sqrt(mr.data[8] * mr.data[8] + mr.data[9] * mr.data[9] + mr.data[10] * mr.data[10]);
		if(mr.data[0] * (mr.data[5] * mr.data[10] - mr.data[6] * mr.data[9]) - mr.data[1] * (mr.data[4] * mr.data[10] - mr.data[6] * mr.data[8]) + mr.data[2] * (mr.data[4] * mr.data[9] - mr.data[5] * mr.data[8]) < 0) scale.z = -scale.z;
		if(!mr.fixed) {
			if(0 >= mr.length) mr.length = 1;
			if(mr.data.length < mr.length) {
				var data3;
				var this8;
				this8 = new Array(mr.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data3,0,mr.data.length);
				mr.data = data3;
			}
		}
		mr.data[0] = mr.data[0] / scale.x;
		if(!mr.fixed) {
			if(1 >= mr.length) mr.length = 2;
			if(mr.data.length < mr.length) {
				var data4;
				var this9;
				this9 = new Array(mr.data.length + 10);
				data4 = this9;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data4,0,mr.data.length);
				mr.data = data4;
			}
		}
		mr.data[1] = mr.data[1] / scale.x;
		if(!mr.fixed) {
			if(2 >= mr.length) mr.length = 3;
			if(mr.data.length < mr.length) {
				var data5;
				var this10;
				this10 = new Array(mr.data.length + 10);
				data5 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data5,0,mr.data.length);
				mr.data = data5;
			}
		}
		mr.data[2] = mr.data[2] / scale.x;
		if(!mr.fixed) {
			if(4 >= mr.length) mr.length = 5;
			if(mr.data.length < mr.length) {
				var data6;
				var this11;
				this11 = new Array(mr.data.length + 10);
				data6 = this11;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data6,0,mr.data.length);
				mr.data = data6;
			}
		}
		mr.data[4] = mr.data[4] / scale.y;
		if(!mr.fixed) {
			if(5 >= mr.length) mr.length = 6;
			if(mr.data.length < mr.length) {
				var data7;
				var this12;
				this12 = new Array(mr.data.length + 10);
				data7 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data7,0,mr.data.length);
				mr.data = data7;
			}
		}
		mr.data[5] = mr.data[5] / scale.y;
		if(!mr.fixed) {
			if(6 >= mr.length) mr.length = 7;
			if(mr.data.length < mr.length) {
				var data8;
				var this13;
				this13 = new Array(mr.data.length + 10);
				data8 = this13;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data8,0,mr.data.length);
				mr.data = data8;
			}
		}
		mr.data[6] = mr.data[6] / scale.y;
		if(!mr.fixed) {
			if(8 >= mr.length) mr.length = 9;
			if(mr.data.length < mr.length) {
				var data9;
				var this14;
				this14 = new Array(mr.data.length + 10);
				data9 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data9,0,mr.data.length);
				mr.data = data9;
			}
		}
		mr.data[8] = mr.data[8] / scale.z;
		if(!mr.fixed) {
			if(9 >= mr.length) mr.length = 10;
			if(mr.data.length < mr.length) {
				var data10;
				var this15;
				this15 = new Array(mr.data.length + 10);
				data10 = this15;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data10,0,mr.data.length);
				mr.data = data10;
			}
		}
		mr.data[9] = mr.data[9] / scale.z;
		if(!mr.fixed) {
			if(10 >= mr.length) mr.length = 11;
			if(mr.data.length < mr.length) {
				var data11;
				var this16;
				this16 = new Array(mr.data.length + 10);
				data11 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data11,0,mr.data.length);
				mr.data = data11;
			}
		}
		mr.data[10] = mr.data[10] / scale.z;
		var rot = new openfl.geom.Vector3D();
		switch(orientationStyle[1]) {
		case 0:
			rot.w = Math.acos((mr.data[0] + mr.data[5] + mr.data[10] - 1) / 2);
			var len = Math.sqrt((mr.data[6] - mr.data[9]) * (mr.data[6] - mr.data[9]) + (mr.data[8] - mr.data[2]) * (mr.data[8] - mr.data[2]) + (mr.data[1] - mr.data[4]) * (mr.data[1] - mr.data[4]));
			if(len != 0) {
				rot.x = (mr.data[6] - mr.data[9]) / len;
				rot.y = (mr.data[8] - mr.data[2]) / len;
				rot.z = (mr.data[1] - mr.data[4]) / len;
			} else rot.x = rot.y = rot.z = 0;
			break;
		case 2:
			var tr = mr.data[0] + mr.data[5] + mr.data[10];
			if(tr > 0) {
				rot.w = Math.sqrt(1 + tr) / 2;
				rot.x = (mr.data[6] - mr.data[9]) / (4 * rot.w);
				rot.y = (mr.data[8] - mr.data[2]) / (4 * rot.w);
				rot.z = (mr.data[1] - mr.data[4]) / (4 * rot.w);
			} else if(mr.data[0] > mr.data[5] && mr.data[0] > mr.data[10]) {
				rot.x = Math.sqrt(1 + mr.data[0] - mr.data[5] - mr.data[10]) / 2;
				rot.w = (mr.data[6] - mr.data[9]) / (4 * rot.x);
				rot.y = (mr.data[1] + mr.data[4]) / (4 * rot.x);
				rot.z = (mr.data[8] + mr.data[2]) / (4 * rot.x);
			} else if(mr.data[5] > mr.data[10]) {
				rot.y = Math.sqrt(1 + mr.data[5] - mr.data[0] - mr.data[10]) / 2;
				rot.x = (mr.data[1] + mr.data[4]) / (4 * rot.y);
				rot.w = (mr.data[8] - mr.data[2]) / (4 * rot.y);
				rot.z = (mr.data[6] + mr.data[9]) / (4 * rot.y);
			} else {
				rot.z = Math.sqrt(1 + mr.data[10] - mr.data[0] - mr.data[5]) / 2;
				rot.x = (mr.data[8] + mr.data[2]) / (4 * rot.z);
				rot.y = (mr.data[6] + mr.data[9]) / (4 * rot.z);
				rot.w = (mr.data[1] - mr.data[4]) / (4 * rot.z);
			}
			break;
		case 1:
			rot.y = Math.asin(-mr.data[2]);
			if(mr.data[2] != 1 && mr.data[2] != -1) {
				rot.x = Math.atan2(mr.data[6],mr.data[10]);
				rot.z = Math.atan2(mr.data[1],mr.data[0]);
			} else {
				rot.z = 0;
				rot.x = Math.atan2(mr.data[4],mr.data[5]);
			}
			break;
		}
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data12;
				var this17;
				this17 = new Array(vec.data.length + 10);
				data12 = this17;
				haxe.ds._Vector.Vector_Impl_.blit(vec.data,0,data12,0,vec.data.length);
				vec.data = data12;
			}
			vec.data[vec.length - 1] = pos;
		}
		vec.length;
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data13;
				var this18;
				this18 = new Array(vec.data.length + 10);
				data13 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(vec.data,0,data13,0,vec.data.length);
				vec.data = data13;
			}
			vec.data[vec.length - 1] = rot;
		}
		vec.length;
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data14;
				var this19;
				this19 = new Array(vec.data.length + 10);
				data14 = this19;
				haxe.ds._Vector.Vector_Impl_.blit(vec.data,0,data14,0,vec.data.length);
				vec.data = data14;
			}
			vec.data[vec.length - 1] = scale;
		}
		vec.length;
		return vec;
	}
	,deltaTransformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl.geom.Vector3D(x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[3],x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[7],x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[11],0);
	}
	,identity: function() {
		var value = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(value.length);
		vec = this1;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = value[i];
		}
		vectorData.data = vec;
		this.rawData = vectorData;
	}
	,interpolateTo: function(toMat,percent) {
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(i >= this1.length) this1.length = i + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[i] = this.rawData.data[i] + (toMat.rawData.data[i] - this.rawData.data[i]) * percent;
		}
	}
	,invert: function() {
		var d = (this.rawData.data[0] * this.rawData.data[5] - this.rawData.data[4] * this.rawData.data[1]) * (this.rawData.data[10] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[11]) - (this.rawData.data[0] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[7]) + (this.rawData.data[0] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[7]) + (this.rawData.data[4] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[3]) - (this.rawData.data[4] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[3]) + (this.rawData.data[8] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[9]) * (this.rawData.data[2] * this.rawData.data[7] - this.rawData.data[6] * this.rawData.data[3]);
		var invertable = Math.abs(d) > 0.00000000001;
		if(invertable) {
			d = 1 / d;
			var m11 = this.rawData.data[0];
			var m21 = this.rawData.data[4];
			var m31 = this.rawData.data[8];
			var m41 = this.rawData.data[12];
			var m12 = this.rawData.data[1];
			var m22 = this.rawData.data[5];
			var m32 = this.rawData.data[9];
			var m42 = this.rawData.data[13];
			var m13 = this.rawData.data[2];
			var m23 = this.rawData.data[6];
			var m33 = this.rawData.data[10];
			var m43 = this.rawData.data[14];
			var m14 = this.rawData.data[3];
			var m24 = this.rawData.data[7];
			var m34 = this.rawData.data[11];
			var m44 = this.rawData.data[15];
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
		}
		return invertable;
	}
	,pointAt: function(pos,at,up) {
		if(at == null) at = new openfl.geom.Vector3D(0,0,-1);
		if(up == null) up = new openfl.geom.Vector3D(0,-1,0);
		var dir = new openfl.geom.Vector3D(at.x - pos.x,at.y - pos.y,at.z - pos.z);
		var vup = new openfl.geom.Vector3D(up.x,up.y,up.z,up.w);
		var right;
		dir.normalize();
		vup.normalize();
		var dir2 = new openfl.geom.Vector3D(dir.x,dir.y,dir.z,dir.w);
		dir2.scaleBy(vup.x * dir.x + vup.y * dir.y + vup.z * dir.z);
		vup = new openfl.geom.Vector3D(vup.x - dir2.x,vup.y - dir2.y,vup.z - dir2.z);
		if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) vup.normalize(); else if(dir.x != 0) vup = new openfl.geom.Vector3D(-dir.y,dir.x,0); else vup = new openfl.geom.Vector3D(1,0,0);
		right = new openfl.geom.Vector3D(vup.y * dir.z - vup.z * dir.y,vup.z * dir.x - vup.x * dir.z,vup.x * dir.y - vup.y * dir.x,1);
		right.normalize();
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = right.x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(4 >= this3.length) this3.length = 5;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[4] = right.y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(8 >= this5.length) this5.length = 9;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[8] = right.z;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(12 >= this7.length) this7.length = 13;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[12] = 0.0;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(1 >= this9.length) this9.length = 2;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[1] = vup.x;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = vup.y;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(9 >= this13.length) this13.length = 10;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[9] = vup.z;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(13 >= this15.length) this15.length = 14;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[13] = 0.0;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(2 >= this17.length) this17.length = 3;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[2] = dir.x;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(6 >= this19.length) this19.length = 7;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[6] = dir.y;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = dir.z;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(14 >= this23.length) this23.length = 15;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[14] = 0.0;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(3 >= this25.length) this25.length = 4;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[3] = pos.x;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(7 >= this27.length) this27.length = 8;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[7] = pos.y;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(11 >= this29.length) this29.length = 12;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[11] = pos.z;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = 1.0;
	}
	,prepend: function(rhs) {
		var m111 = rhs.rawData.data[0];
		var m121 = rhs.rawData.data[4];
		var m131 = rhs.rawData.data[8];
		var m141 = rhs.rawData.data[12];
		var m112 = rhs.rawData.data[1];
		var m122 = rhs.rawData.data[5];
		var m132 = rhs.rawData.data[9];
		var m142 = rhs.rawData.data[13];
		var m113 = rhs.rawData.data[2];
		var m123 = rhs.rawData.data[6];
		var m133 = rhs.rawData.data[10];
		var m143 = rhs.rawData.data[14];
		var m114 = rhs.rawData.data[3];
		var m124 = rhs.rawData.data[7];
		var m134 = rhs.rawData.data[11];
		var m144 = rhs.rawData.data[15];
		var m211 = this.rawData.data[0];
		var m221 = this.rawData.data[4];
		var m231 = this.rawData.data[8];
		var m241 = this.rawData.data[12];
		var m212 = this.rawData.data[1];
		var m222 = this.rawData.data[5];
		var m232 = this.rawData.data[9];
		var m242 = this.rawData.data[13];
		var m213 = this.rawData.data[2];
		var m223 = this.rawData.data[6];
		var m233 = this.rawData.data[10];
		var m243 = this.rawData.data[14];
		var m214 = this.rawData.data[3];
		var m224 = this.rawData.data[7];
		var m234 = this.rawData.data[11];
		var m244 = this.rawData.data[15];
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(6 >= this13.length) this13.length = 7;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(7 >= this15.length) this15.length = 8;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(8 >= this17.length) this17.length = 9;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(9 >= this19.length) this19.length = 10;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(11 >= this23.length) this23.length = 12;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(12 >= this25.length) this25.length = 13;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(13 >= this27.length) this27.length = 14;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(14 >= this29.length) this29.length = 15;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
	}
	,prependRotation: function(degrees,axis,pivotPoint) {
		var m = openfl.geom.Matrix3D.getAxisRotation(axis.x,axis.y,axis.z,degrees);
		if(pivotPoint != null) {
			var p = pivotPoint;
			m.appendTranslation(p.x,p.y,p.z);
		}
		this.prepend(m);
	}
	,prependScale: function(xScale,yScale,zScale) {
		this.prepend(new openfl.geom.Matrix3D((function($this) {
			var $r;
			var value = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
			var vectorData = new openfl.VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while(_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this))));
	}
	,prependTranslation: function(x,y,z) {
		var m = new openfl.geom.Matrix3D();
		m.set_position(new openfl.geom.Vector3D(x,y,z));
		this.prepend(m);
	}
	,recompose: function(components,orientationStyle) {
		if(components.length < 3 || components.data[2].x == 0 || components.data[2].y == 0 || components.data[2].z == 0) return false;
		if(orientationStyle == null) orientationStyle = openfl.geom.Orientation3D.EULER_ANGLES;
		this.identity();
		var scale = [];
		scale[0] = scale[1] = scale[2] = components.data[2].x;
		scale[4] = scale[5] = scale[6] = components.data[2].y;
		scale[8] = scale[9] = scale[10] = components.data[2].z;
		switch(orientationStyle[1]) {
		case 1:
			var cx = Math.cos(components.data[1].x);
			var cy = Math.cos(components.data[1].y);
			var cz = Math.cos(components.data[1].z);
			var sx = Math.sin(components.data[1].x);
			var sy = Math.sin(components.data[1].y);
			var sz = Math.sin(components.data[1].z);
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = cy * cz * scale[0];
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = cy * sz * scale[1];
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = -sy * scale[2];
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = 0;
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = (sx * sy * cz - cx * sz) * scale[4];
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = (sx * sy * sz + cx * cz) * scale[5];
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = sx * cy * scale[6];
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = 0;
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = (cx * sy * cz + sx * sz) * scale[8];
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = (cx * sy * sz - sx * cz) * scale[9];
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = cx * cy * scale[10];
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = 0;
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = components.data[0].x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = components.data[0].y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = components.data[0].z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = 1;
			break;
		default:
			var x = components.data[1].x;
			var y = components.data[1].y;
			var z = components.data[1].z;
			var w = components.data[1].w;
			if(Type.enumEq(orientationStyle,openfl.geom.Orientation3D.AXIS_ANGLE)) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			var this33 = this.rawData;
			if(!this33.fixed) {
				if(0 >= this33.length) this33.length = 1;
				if(this33.data.length < this33.length) {
					var data16;
					var this34;
					this34 = new Array(this33.data.length + 10);
					data16 = this34;
					haxe.ds._Vector.Vector_Impl_.blit(this33.data,0,data16,0,this33.data.length);
					this33.data = data16;
				}
			}
			this33.data[0] = (1 - 2 * y * y - 2 * z * z) * scale[0];
			var this35 = this.rawData;
			if(!this35.fixed) {
				if(1 >= this35.length) this35.length = 2;
				if(this35.data.length < this35.length) {
					var data17;
					var this36;
					this36 = new Array(this35.data.length + 10);
					data17 = this36;
					haxe.ds._Vector.Vector_Impl_.blit(this35.data,0,data17,0,this35.data.length);
					this35.data = data17;
				}
			}
			this35.data[1] = (2 * x * y + 2 * w * z) * scale[1];
			var this37 = this.rawData;
			if(!this37.fixed) {
				if(2 >= this37.length) this37.length = 3;
				if(this37.data.length < this37.length) {
					var data18;
					var this38;
					this38 = new Array(this37.data.length + 10);
					data18 = this38;
					haxe.ds._Vector.Vector_Impl_.blit(this37.data,0,data18,0,this37.data.length);
					this37.data = data18;
				}
			}
			this37.data[2] = (2 * x * z - 2 * w * y) * scale[2];
			var this39 = this.rawData;
			if(!this39.fixed) {
				if(3 >= this39.length) this39.length = 4;
				if(this39.data.length < this39.length) {
					var data19;
					var this40;
					this40 = new Array(this39.data.length + 10);
					data19 = this40;
					haxe.ds._Vector.Vector_Impl_.blit(this39.data,0,data19,0,this39.data.length);
					this39.data = data19;
				}
			}
			this39.data[3] = 0;
			var this41 = this.rawData;
			if(!this41.fixed) {
				if(4 >= this41.length) this41.length = 5;
				if(this41.data.length < this41.length) {
					var data20;
					var this42;
					this42 = new Array(this41.data.length + 10);
					data20 = this42;
					haxe.ds._Vector.Vector_Impl_.blit(this41.data,0,data20,0,this41.data.length);
					this41.data = data20;
				}
			}
			this41.data[4] = (2 * x * y - 2 * w * z) * scale[4];
			var this43 = this.rawData;
			if(!this43.fixed) {
				if(5 >= this43.length) this43.length = 6;
				if(this43.data.length < this43.length) {
					var data21;
					var this44;
					this44 = new Array(this43.data.length + 10);
					data21 = this44;
					haxe.ds._Vector.Vector_Impl_.blit(this43.data,0,data21,0,this43.data.length);
					this43.data = data21;
				}
			}
			this43.data[5] = (1 - 2 * x * x - 2 * z * z) * scale[5];
			var this45 = this.rawData;
			if(!this45.fixed) {
				if(6 >= this45.length) this45.length = 7;
				if(this45.data.length < this45.length) {
					var data22;
					var this46;
					this46 = new Array(this45.data.length + 10);
					data22 = this46;
					haxe.ds._Vector.Vector_Impl_.blit(this45.data,0,data22,0,this45.data.length);
					this45.data = data22;
				}
			}
			this45.data[6] = (2 * y * z + 2 * w * x) * scale[6];
			var this47 = this.rawData;
			if(!this47.fixed) {
				if(7 >= this47.length) this47.length = 8;
				if(this47.data.length < this47.length) {
					var data23;
					var this48;
					this48 = new Array(this47.data.length + 10);
					data23 = this48;
					haxe.ds._Vector.Vector_Impl_.blit(this47.data,0,data23,0,this47.data.length);
					this47.data = data23;
				}
			}
			this47.data[7] = 0;
			var this49 = this.rawData;
			if(!this49.fixed) {
				if(8 >= this49.length) this49.length = 9;
				if(this49.data.length < this49.length) {
					var data24;
					var this50;
					this50 = new Array(this49.data.length + 10);
					data24 = this50;
					haxe.ds._Vector.Vector_Impl_.blit(this49.data,0,data24,0,this49.data.length);
					this49.data = data24;
				}
			}
			this49.data[8] = (2 * x * z + 2 * w * y) * scale[8];
			var this51 = this.rawData;
			if(!this51.fixed) {
				if(9 >= this51.length) this51.length = 10;
				if(this51.data.length < this51.length) {
					var data25;
					var this52;
					this52 = new Array(this51.data.length + 10);
					data25 = this52;
					haxe.ds._Vector.Vector_Impl_.blit(this51.data,0,data25,0,this51.data.length);
					this51.data = data25;
				}
			}
			this51.data[9] = (2 * y * z - 2 * w * x) * scale[9];
			var this53 = this.rawData;
			if(!this53.fixed) {
				if(10 >= this53.length) this53.length = 11;
				if(this53.data.length < this53.length) {
					var data26;
					var this54;
					this54 = new Array(this53.data.length + 10);
					data26 = this54;
					haxe.ds._Vector.Vector_Impl_.blit(this53.data,0,data26,0,this53.data.length);
					this53.data = data26;
				}
			}
			this53.data[10] = (1 - 2 * x * x - 2 * y * y) * scale[10];
			var this55 = this.rawData;
			if(!this55.fixed) {
				if(11 >= this55.length) this55.length = 12;
				if(this55.data.length < this55.length) {
					var data27;
					var this56;
					this56 = new Array(this55.data.length + 10);
					data27 = this56;
					haxe.ds._Vector.Vector_Impl_.blit(this55.data,0,data27,0,this55.data.length);
					this55.data = data27;
				}
			}
			this55.data[11] = 0;
			var this57 = this.rawData;
			if(!this57.fixed) {
				if(12 >= this57.length) this57.length = 13;
				if(this57.data.length < this57.length) {
					var data28;
					var this58;
					this58 = new Array(this57.data.length + 10);
					data28 = this58;
					haxe.ds._Vector.Vector_Impl_.blit(this57.data,0,data28,0,this57.data.length);
					this57.data = data28;
				}
			}
			this57.data[12] = components.data[0].x;
			var this59 = this.rawData;
			if(!this59.fixed) {
				if(13 >= this59.length) this59.length = 14;
				if(this59.data.length < this59.length) {
					var data29;
					var this60;
					this60 = new Array(this59.data.length + 10);
					data29 = this60;
					haxe.ds._Vector.Vector_Impl_.blit(this59.data,0,data29,0,this59.data.length);
					this59.data = data29;
				}
			}
			this59.data[13] = components.data[0].y;
			var this61 = this.rawData;
			if(!this61.fixed) {
				if(14 >= this61.length) this61.length = 15;
				if(this61.data.length < this61.length) {
					var data30;
					var this62;
					this62 = new Array(this61.data.length + 10);
					data30 = this62;
					haxe.ds._Vector.Vector_Impl_.blit(this61.data,0,data30,0,this61.data.length);
					this61.data = data30;
				}
			}
			this61.data[14] = components.data[0].z;
			var this63 = this.rawData;
			if(!this63.fixed) {
				if(15 >= this63.length) this63.length = 16;
				if(this63.data.length < this63.length) {
					var data31;
					var this64;
					this64 = new Array(this63.data.length + 10);
					data31 = this64;
					haxe.ds._Vector.Vector_Impl_.blit(this63.data,0,data31,0,this63.data.length);
					this63.data = data31;
				}
			}
			this63.data[15] = 1;
		}
		if(components.data[2].x == 0) {
			var this65 = this.rawData;
			if(!this65.fixed) {
				if(0 >= this65.length) this65.length = 1;
				if(this65.data.length < this65.length) {
					var data32;
					var this66;
					this66 = new Array(this65.data.length + 10);
					data32 = this66;
					haxe.ds._Vector.Vector_Impl_.blit(this65.data,0,data32,0,this65.data.length);
					this65.data = data32;
				}
			}
			this65.data[0] = 1e-15;
		}
		if(components.data[2].y == 0) {
			var this67 = this.rawData;
			if(!this67.fixed) {
				if(5 >= this67.length) this67.length = 6;
				if(this67.data.length < this67.length) {
					var data33;
					var this68;
					this68 = new Array(this67.data.length + 10);
					data33 = this68;
					haxe.ds._Vector.Vector_Impl_.blit(this67.data,0,data33,0,this67.data.length);
					this67.data = data33;
				}
			}
			this67.data[5] = 1e-15;
		}
		if(components.data[2].z == 0) {
			var this69 = this.rawData;
			if(!this69.fixed) {
				if(10 >= this69.length) this69.length = 11;
				if(this69.data.length < this69.length) {
					var data34;
					var this70;
					this70 = new Array(this69.data.length + 10);
					data34 = this70;
					haxe.ds._Vector.Vector_Impl_.blit(this69.data,0,data34,0,this69.data.length);
					this69.data = data34;
				}
			}
			this69.data[10] = 1e-15;
		}
		return !(components.data[2].x == 0 || components.data[2].y == 0 || components.data[2].y == 0);
	}
	,transformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl.geom.Vector3D(x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[12],x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[13],x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[14],x * this.rawData.data[3] + y * this.rawData.data[7] + z * this.rawData.data[11] + this.rawData.data[15]);
	}
	,transformVectors: function(vin,vout) {
		var i = 0;
		while(i + 3 <= vin.length) {
			var x = vin.data[i];
			var y = vin.data[i + 1];
			var z = vin.data[i + 2];
			if(!vout.fixed) {
				if(i >= vout.length) vout.length = i + 1;
				if(vout.data.length < vout.length) {
					var data;
					var this1;
					this1 = new Array(vout.data.length + 10);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(vout.data,0,data,0,vout.data.length);
					vout.data = data;
				}
			}
			vout.data[i] = x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[12];
			var key = i + 1;
			if(!vout.fixed) {
				if(key >= vout.length) vout.length = key + 1;
				if(vout.data.length < vout.length) {
					var data1;
					var this2;
					this2 = new Array(vout.data.length + 10);
					data1 = this2;
					haxe.ds._Vector.Vector_Impl_.blit(vout.data,0,data1,0,vout.data.length);
					vout.data = data1;
				}
			}
			vout.data[key] = x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[13];
			var key1 = i + 2;
			if(!vout.fixed) {
				if(key1 >= vout.length) vout.length = key1 + 1;
				if(vout.data.length < vout.length) {
					var data2;
					var this3;
					this3 = new Array(vout.data.length + 10);
					data2 = this3;
					haxe.ds._Vector.Vector_Impl_.blit(vout.data,0,data2,0,vout.data.length);
					vout.data = data2;
				}
			}
			vout.data[key1] = x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[14];
			i += 3;
		}
	}
	,transpose: function() {
		var oRawData;
		var this1 = this.rawData;
		var vectorData = new openfl.VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
		oRawData = vectorData;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
				this3.data = data;
			}
		}
		this3.data[1] = oRawData.data[4];
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data1;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data1 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data1,0,this5.data.length);
				this5.data = data1;
			}
		}
		this5.data[2] = oRawData.data[8];
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data2;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data2 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data2,0,this7.data.length);
				this7.data = data2;
			}
		}
		this7.data[3] = oRawData.data[12];
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data3;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data3 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data3,0,this9.data.length);
				this9.data = data3;
			}
		}
		this9.data[4] = oRawData.data[1];
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(6 >= this11.length) this11.length = 7;
			if(this11.data.length < this11.length) {
				var data4;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data4 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data4,0,this11.data.length);
				this11.data = data4;
			}
		}
		this11.data[6] = oRawData.data[9];
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(7 >= this13.length) this13.length = 8;
			if(this13.data.length < this13.length) {
				var data5;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data5 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data5,0,this13.data.length);
				this13.data = data5;
			}
		}
		this13.data[7] = oRawData.data[13];
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(8 >= this15.length) this15.length = 9;
			if(this15.data.length < this15.length) {
				var data6;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data6 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data6,0,this15.data.length);
				this15.data = data6;
			}
		}
		this15.data[8] = oRawData.data[2];
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(9 >= this17.length) this17.length = 10;
			if(this17.data.length < this17.length) {
				var data7;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data7 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data7,0,this17.data.length);
				this17.data = data7;
			}
		}
		this17.data[9] = oRawData.data[6];
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(11 >= this19.length) this19.length = 12;
			if(this19.data.length < this19.length) {
				var data8;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data8 = this20;
				haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data8,0,this19.data.length);
				this19.data = data8;
			}
		}
		this19.data[11] = oRawData.data[14];
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(12 >= this21.length) this21.length = 13;
			if(this21.data.length < this21.length) {
				var data9;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data9 = this22;
				haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data9,0,this21.data.length);
				this21.data = data9;
			}
		}
		this21.data[12] = oRawData.data[3];
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(13 >= this23.length) this23.length = 14;
			if(this23.data.length < this23.length) {
				var data10;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data10 = this24;
				haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data10,0,this23.data.length);
				this23.data = data10;
			}
		}
		this23.data[13] = oRawData.data[7];
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(14 >= this25.length) this25.length = 15;
			if(this25.data.length < this25.length) {
				var data11;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data11 = this26;
				haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data11,0,this25.data.length);
				this25.data = data11;
			}
		}
		this25.data[14] = oRawData.data[11];
	}
	,get_determinant: function() {
		return (this.rawData.data[0] * this.rawData.data[5] - this.rawData.data[4] * this.rawData.data[1]) * (this.rawData.data[10] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[11]) - (this.rawData.data[0] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[7]) + (this.rawData.data[0] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[7]) + (this.rawData.data[4] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[3]) - (this.rawData.data[4] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[3]) + (this.rawData.data[8] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[9]) * (this.rawData.data[2] * this.rawData.data[7] - this.rawData.data[6] * this.rawData.data[3]);
	}
	,get_position: function() {
		return new openfl.geom.Vector3D(this.rawData.data[12],this.rawData.data[13],this.rawData.data[14]);
	}
	,set_position: function(val) {
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(12 >= this1.length) this1.length = 13;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[12] = val.x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(13 >= this3.length) this3.length = 14;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[13] = val.y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(14 >= this5.length) this5.length = 15;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[14] = val.z;
		return val;
	}
	,__class__: openfl.geom.Matrix3D
	,__properties__: {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
};
starling.display = {};
starling.display.DisplayObject = function() {
	starling.events.EventDispatcher.call(this);
	var name = Type.getClassName(Type.getClass(this));
	if(openfl.system.Capabilities.isDebugger && name == "starling.display.DisplayObject") throw new starling.errors.AbstractClassError();
	this.mX = this.mY = this.mPivotX = this.mPivotY = this.mRotation = this.mSkewX = this.mSkewY = 0.0;
	this.mScaleX = this.mScaleY = this.mAlpha = 1.0;
	this.mVisible = this.mTouchable = true;
	this.mBlendMode = starling.display.BlendMode.AUTO;
	this.mTransformationMatrix = new openfl.geom.Matrix();
	this.mOrientationChanged = this.mUseHandCursor = false;
};
$hxClasses["starling.display.DisplayObject"] = starling.display.DisplayObject;
starling.display.DisplayObject.__name__ = ["starling","display","DisplayObject"];
starling.display.DisplayObject.__super__ = starling.events.EventDispatcher;
starling.display.DisplayObject.prototype = $extend(starling.events.EventDispatcher.prototype,{
	mX: null
	,mY: null
	,mPivotX: null
	,mPivotY: null
	,mScaleX: null
	,mScaleY: null
	,mSkewX: null
	,mSkewY: null
	,mRotation: null
	,mAlpha: null
	,mVisible: null
	,mTouchable: null
	,mBlendMode: null
	,mName: null
	,mUseHandCursor: null
	,mParent: null
	,mTransformationMatrix: null
	,mTransformationMatrix3D: null
	,mOrientationChanged: null
	,mFilter: null
	,mIs3D: null
	,mMask: null
	,mIsMask: null
	,hasVisibleArea: null
	,isMask: null
	,transformationMatrix3D: null
	,is3D: null
	,bounds: null
	,parent: null
	,base: null
	,root: null
	,stage: null
	,dispose: function() {
		if(this.mFilter != null) this.mFilter.dispose();
		if(this.mMask != null) this.mMask.dispose();
		this.removeEventListeners();
		this.set_mask(null);
	}
	,removeFromParent: function(dispose) {
		if(dispose == null) dispose = false;
		if(this.mParent != null) this.mParent.removeChild(this,dispose); else if(dispose) this.dispose();
	}
	,getTransformationMatrix: function(targetSpace,resultMatrix) {
		var commonParent;
		var currentObject;
		if(resultMatrix != null) resultMatrix.identity(); else resultMatrix = new openfl.geom.Matrix();
		if(targetSpace == this) return resultMatrix; else if(targetSpace == this.mParent || targetSpace == null && this.mParent == null) {
			resultMatrix.copyFrom(this.get_transformationMatrix());
			return resultMatrix;
		} else if(targetSpace == null || targetSpace == this.get_base()) {
			currentObject = this;
			while(currentObject != targetSpace) {
				resultMatrix.concat(currentObject.get_transformationMatrix());
				currentObject = currentObject.mParent;
			}
			return resultMatrix;
		} else if(targetSpace.mParent == this) {
			targetSpace.getTransformationMatrix(this,resultMatrix);
			resultMatrix.invert();
			return resultMatrix;
		}
		commonParent = this.findCommonParent(this,targetSpace);
		currentObject = this;
		while(currentObject != commonParent) {
			resultMatrix.concat(currentObject.get_transformationMatrix());
			currentObject = currentObject.mParent;
		}
		if(commonParent == targetSpace) return resultMatrix;
		starling.display.DisplayObject.sHelperMatrix.identity();
		currentObject = targetSpace;
		while(currentObject != commonParent) {
			starling.display.DisplayObject.sHelperMatrix.concat(currentObject.get_transformationMatrix());
			currentObject = currentObject.mParent;
		}
		starling.display.DisplayObject.sHelperMatrix.invert();
		resultMatrix.concat(starling.display.DisplayObject.sHelperMatrix);
		return resultMatrix;
	}
	,getBounds: function(targetSpace,resultRect) {
		throw new starling.errors.AbstractMethodError();
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) forTouch = false;
		if(forTouch && (!this.mVisible || !this.mTouchable)) return null;
		if(this.mMask != null && !this.hitTestMask(localPoint)) return null;
		if(this.getBounds(this,starling.display.DisplayObject.sHelperRect).containsPoint(localPoint)) return this; else return null;
	}
	,hitTestMask: function(localPoint) {
		if(this.mMask != null) {
			if(this.mMask.get_stage() != null) this.getTransformationMatrix(this.mMask,starling.display.DisplayObject.sHelperMatrixAlt); else {
				starling.display.DisplayObject.sHelperMatrixAlt.copyFrom(this.mMask.get_transformationMatrix());
				starling.display.DisplayObject.sHelperMatrixAlt.invert();
			}
			starling.utils.MatrixUtil.transformPoint(starling.display.DisplayObject.sHelperMatrixAlt,localPoint,starling.display.DisplayObject.sHelperPoint);
			return this.mMask.hitTest(starling.display.DisplayObject.sHelperPoint,true) != null;
		} else return true;
	}
	,localToGlobal: function(localPoint,resultPoint) {
		if(this.get_is3D()) {
			starling.display.DisplayObject.sHelperPoint3D.setTo(localPoint.x,localPoint.y,0);
			return this.local3DToGlobal(starling.display.DisplayObject.sHelperPoint3D,resultPoint);
		} else {
			this.getTransformationMatrix(this.get_base(),starling.display.DisplayObject.sHelperMatrixAlt);
			return starling.utils.MatrixUtil.transformPoint(starling.display.DisplayObject.sHelperMatrixAlt,localPoint,resultPoint);
		}
	}
	,globalToLocal: function(globalPoint,resultPoint) {
		if(this.get_is3D()) {
			this.globalToLocal3D(globalPoint,starling.display.DisplayObject.sHelperPoint3D);
			return starling.utils.MathUtil.intersectLineWithXYPlane(this.get_stage().get_cameraPosition(),starling.display.DisplayObject.sHelperPoint3D,resultPoint);
		} else {
			this.getTransformationMatrix(this.get_base(),starling.display.DisplayObject.sHelperMatrixAlt);
			starling.display.DisplayObject.sHelperMatrixAlt.invert();
			return starling.utils.MatrixUtil.transformPoint(starling.display.DisplayObject.sHelperMatrixAlt,globalPoint,resultPoint);
		}
	}
	,render: function(support,parentAlpha) {
		throw new starling.errors.AbstractMethodError();
	}
	,get_hasVisibleArea: function() {
		return this.mAlpha != 0.0 && this.mVisible && !this.mIsMask && this.mScaleX != 0.0 && this.mScaleY != 0.0;
	}
	,alignPivot: function(hAlign,vAlign) {
		if(hAlign == null) hAlign = starling.utils.HAlign.CENTER;
		if(vAlign == null) vAlign = starling.utils.VAlign.CENTER;
		var bounds = this.getBounds(this);
		this.mOrientationChanged = true;
		if(hAlign == starling.utils.HAlign.LEFT) this.mPivotX = bounds.x; else if(hAlign == starling.utils.HAlign.CENTER) this.mPivotX = bounds.x + bounds.width / 2.0; else if(hAlign == starling.utils.HAlign.RIGHT) this.mPivotX = bounds.x + bounds.width; else throw new openfl.errors.ArgumentError("Invalid horizontal alignment: " + Std.string(hAlign));
		if(vAlign == starling.utils.VAlign.TOP) this.mPivotY = bounds.y; else if(vAlign == starling.utils.VAlign.CENTER) this.mPivotY = bounds.y + bounds.height / 2.0; else if(vAlign == starling.utils.VAlign.BOTTOM) this.mPivotY = bounds.y + bounds.height; else throw new openfl.errors.ArgumentError("Invalid vertical alignment: " + Std.string(vAlign));
	}
	,getTransformationMatrix3D: function(targetSpace,resultMatrix) {
		var commonParent;
		var currentObject;
		if(resultMatrix != null) resultMatrix.identity(); else resultMatrix = new openfl.geom.Matrix3D();
		if(targetSpace == this) return resultMatrix; else if(targetSpace == this.mParent || targetSpace == null && this.mParent == null) {
			resultMatrix.copyFrom(this.get_transformationMatrix3D());
			return resultMatrix;
		} else if(targetSpace == null || targetSpace == this.get_base()) {
			currentObject = this;
			while(currentObject != targetSpace) {
				resultMatrix.append(currentObject.get_transformationMatrix3D());
				currentObject = currentObject.mParent;
			}
			return resultMatrix;
		} else if(targetSpace.mParent == this) {
			targetSpace.getTransformationMatrix3D(this,resultMatrix);
			resultMatrix.invert();
			return resultMatrix;
		}
		commonParent = this.findCommonParent(this,targetSpace);
		currentObject = this;
		while(currentObject != commonParent) {
			resultMatrix.append(currentObject.get_transformationMatrix3D());
			currentObject = currentObject.mParent;
		}
		if(commonParent == targetSpace) return resultMatrix;
		starling.display.DisplayObject.sHelperMatrix3D.identity();
		currentObject = targetSpace;
		while(currentObject != commonParent) {
			starling.display.DisplayObject.sHelperMatrix3D.append(currentObject.get_transformationMatrix3D());
			currentObject = currentObject.mParent;
		}
		starling.display.DisplayObject.sHelperMatrix3D.invert();
		resultMatrix.append(starling.display.DisplayObject.sHelperMatrix3D);
		return resultMatrix;
	}
	,local3DToGlobal: function(localPoint,resultPoint) {
		var stage = this.get_stage();
		if(stage == null) throw new openfl.errors.IllegalOperationError("Dynamic not connected to stage");
		this.getTransformationMatrix3D(stage,starling.display.DisplayObject.sHelperMatrixAlt3D);
		starling.utils.MatrixUtil.transformPoint3D(starling.display.DisplayObject.sHelperMatrixAlt3D,localPoint,starling.display.DisplayObject.sHelperPoint3D);
		return starling.utils.MathUtil.intersectLineWithXYPlane(stage.get_cameraPosition(),starling.display.DisplayObject.sHelperPoint3D,resultPoint);
	}
	,globalToLocal3D: function(globalPoint,resultPoint) {
		var stage = this.get_stage();
		if(stage == null) throw new openfl.errors.IllegalOperationError("Dynamic not connected to stage");
		this.getTransformationMatrix3D(stage,starling.display.DisplayObject.sHelperMatrixAlt3D);
		starling.display.DisplayObject.sHelperMatrixAlt3D.invert();
		return starling.utils.MatrixUtil.transformCoords3D(starling.display.DisplayObject.sHelperMatrixAlt3D,globalPoint.x,globalPoint.y,0,resultPoint);
	}
	,setParent: function(value) {
		var ancestor = value;
		while(ancestor != this && ancestor != null) ancestor = ancestor.mParent;
		if(ancestor == this) throw new openfl.errors.ArgumentError("An object cannot be added as a child to itself or one " + "of its children (or children's children, etc.)"); else this.mParent = value;
	}
	,setIs3D: function(value) {
		this.mIs3D = value;
	}
	,get_isMask: function() {
		return this.mIsMask;
	}
	,isEquivalent: function(a,b,epsilon) {
		if(epsilon == null) epsilon = 0.0001;
		return a - epsilon < b && a + epsilon > b;
	}
	,findCommonParent: function(object1,object2) {
		var currentObject = object1;
		while(currentObject != null) {
			var this1 = starling.display.DisplayObject.sAncestors;
			var key = starling.display.DisplayObject.sAncestors.length;
			if(!this1.fixed) {
				if(key >= this1.length) this1.length = key + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[key] = currentObject;
			currentObject = currentObject.mParent;
		}
		currentObject = object2;
		while(currentObject != null && (function($this) {
			var $r;
			var this3 = starling.display.DisplayObject.sAncestors;
			var value = -1;
			{
				var _g1 = 0;
				var _g = this3.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(this3.data[i] == currentObject) {
						value = i;
						break;
					}
				}
			}
			$r = value;
			return $r;
		}(this)) == -1) currentObject = currentObject.mParent;
		var this4 = starling.display.DisplayObject.sAncestors;
		if(!this4.fixed) {
			if(0 > this4.length) {
				var data1;
				var this5;
				this5 = new Array(0);
				data1 = this5;
				haxe.ds._Vector.Vector_Impl_.blit(this4.data,0,data1,0,Std["int"](Math.min(this4.data.length,0)));
				this4.data = data1;
			}
			this4.length = 0;
		}
		0;
		if(currentObject != null) return currentObject; else throw new openfl.errors.ArgumentError("Dynamic not connected to target");
	}
	,dispatchEvent: function(event) {
		if(event.get_type() == starling.events.Event.REMOVED_FROM_STAGE && this.get_stage() == null) return; else starling.events.EventDispatcher.prototype.dispatchEvent.call(this,event);
	}
	,addEventListener: function(type,listener) {
		if(type == starling.events.Event.ENTER_FRAME && !this.hasEventListener(type)) {
			this.addEventListener(starling.events.Event.ADDED_TO_STAGE,$bind(this,this.addEnterFrameListenerToStage));
			this.addEventListener(starling.events.Event.REMOVED_FROM_STAGE,$bind(this,this.removeEnterFrameListenerFromStage));
			if(this.get_stage() != null) this.addEnterFrameListenerToStage();
		}
		starling.events.EventDispatcher.prototype.addEventListener.call(this,type,listener);
	}
	,removeEventListener: function(type,listener) {
		starling.events.EventDispatcher.prototype.removeEventListener.call(this,type,listener);
		if(type == starling.events.Event.ENTER_FRAME && !this.hasEventListener(type)) {
			this.removeEventListener(starling.events.Event.ADDED_TO_STAGE,$bind(this,this.addEnterFrameListenerToStage));
			this.removeEventListener(starling.events.Event.REMOVED_FROM_STAGE,$bind(this,this.removeEnterFrameListenerFromStage));
			this.removeEnterFrameListenerFromStage();
		}
	}
	,removeEventListeners: function(type) {
		var val1 = type == null;
		var val2 = type == starling.events.Event.ENTER_FRAME;
		var val3 = val1 || val2;
		if(val3 && this.hasEventListener(starling.events.Event.ENTER_FRAME)) {
			this.removeEventListener(starling.events.Event.ADDED_TO_STAGE,$bind(this,this.addEnterFrameListenerToStage));
			this.removeEventListener(starling.events.Event.REMOVED_FROM_STAGE,$bind(this,this.removeEnterFrameListenerFromStage));
			this.removeEnterFrameListenerFromStage();
		}
		starling.events.EventDispatcher.prototype.removeEventListeners.call(this,type);
	}
	,addEnterFrameListenerToStage: function() {
		starling.core.Starling.get_current().get_stage().addEnterFrameListener(this);
	}
	,removeEnterFrameListenerFromStage: function() {
		starling.core.Starling.get_current().get_stage().removeEnterFrameListener(this);
	}
	,get_transformationMatrix: function() {
		if(this.mOrientationChanged) {
			this.mOrientationChanged = false;
			if(this.mSkewX == 0.0 && this.mSkewY == 0.0) {
				if(this.mRotation == 0.0) this.mTransformationMatrix.setTo(this.mScaleX,0.0,0.0,this.mScaleY,this.mX - this.mPivotX * this.mScaleX,this.mY - this.mPivotY * this.mScaleY); else {
					var cos = Math.cos(this.mRotation);
					var sin = Math.sin(this.mRotation);
					var a = this.mScaleX * cos;
					var b = this.mScaleX * sin;
					var c = this.mScaleY * -sin;
					var d = this.mScaleY * cos;
					var tx = this.mX - this.mPivotX * a - this.mPivotY * c;
					var ty = this.mY - this.mPivotX * b - this.mPivotY * d;
					this.mTransformationMatrix.setTo(a,b,c,d,tx,ty);
				}
			} else {
				this.mTransformationMatrix.identity();
				this.mTransformationMatrix.scale(this.mScaleX,this.mScaleY);
				starling.utils.MatrixUtil.skew(this.mTransformationMatrix,this.mSkewX,this.mSkewY);
				this.mTransformationMatrix.rotate(this.mRotation);
				this.mTransformationMatrix.translate(this.mX,this.mY);
				if(this.mPivotX != 0.0 || this.mPivotY != 0.0) {
					this.mTransformationMatrix.tx = this.mX - this.mTransformationMatrix.a * this.mPivotX - this.mTransformationMatrix.c * this.mPivotY;
					this.mTransformationMatrix.ty = this.mY - this.mTransformationMatrix.b * this.mPivotX - this.mTransformationMatrix.d * this.mPivotY;
				}
			}
		}
		return this.mTransformationMatrix;
	}
	,set_transformationMatrix: function(matrix) {
		var PI_Q = Math.PI / 4.0;
		this.mOrientationChanged = false;
		this.mTransformationMatrix.copyFrom(matrix);
		this.mPivotX = this.mPivotY = 0;
		this.mX = matrix.tx;
		this.mY = matrix.ty;
		this.mSkewX = Math.atan(-matrix.c / matrix.d);
		this.mSkewY = Math.atan(matrix.b / matrix.a);
		if(this.mSkewX != this.mSkewX) this.mSkewX = 0.0;
		if(this.mSkewY != this.mSkewY) this.mSkewY = 0.0;
		if(this.mSkewX > -PI_Q && this.mSkewX < PI_Q) this.mScaleY = matrix.d / Math.cos(this.mSkewX); else this.mScaleY = -matrix.c / Math.sin(this.mSkewX);
		if(this.mSkewY > -PI_Q && this.mSkewY < PI_Q) this.mScaleX = matrix.a / Math.cos(this.mSkewY); else this.mScaleX = matrix.b / Math.sin(this.mSkewY);
		if(this.isEquivalent(this.mSkewX,this.mSkewY)) {
			this.mRotation = this.mSkewX;
			this.mSkewX = this.mSkewY = 0;
		} else this.mRotation = 0;
		return matrix;
	}
	,get_transformationMatrix3D: function() {
		if(this.mTransformationMatrix3D == null) this.mTransformationMatrix3D = new openfl.geom.Matrix3D();
		return starling.utils.MatrixUtil.convertTo3D(this.get_transformationMatrix(),this.mTransformationMatrix3D);
	}
	,get_is3D: function() {
		return this.mIs3D;
	}
	,get_useHandCursor: function() {
		return this.mUseHandCursor;
	}
	,set_useHandCursor: function(value) {
		if(value == this.mUseHandCursor) return value;
		this.mUseHandCursor = value;
		if(this.mUseHandCursor) this.addEventListener(starling.events.TouchEvent.TOUCH,$bind(this,this.onTouch)); else this.removeEventListener(starling.events.TouchEvent.TOUCH,$bind(this,this.onTouch));
		return value;
	}
	,onTouch: function(event) {
		haxe.Log.trace("CHECK",{ fileName : "DisplayObject.hx", lineNumber : 808, className : "starling.display.DisplayObject", methodName : "onTouch"});
	}
	,get_bounds: function() {
		return this.getBounds(this.mParent);
	}
	,get_width: function() {
		return this.getBounds(this.mParent,starling.display.DisplayObject.sHelperRect).width;
	}
	,set_width: function(value) {
		this.set_scaleX(1.0);
		var actualWidth = this.get_width();
		if(actualWidth != 0.0) this.set_scaleX(value / actualWidth);
		return value;
	}
	,get_height: function() {
		return this.getBounds(this.mParent,starling.display.DisplayObject.sHelperRect).height;
	}
	,set_height: function(value) {
		this.set_scaleY(1.0);
		var actualHeight = this.get_height();
		if(actualHeight != 0.0) this.set_scaleY(value / actualHeight);
		return value;
	}
	,get_x: function() {
		return this.mX;
	}
	,set_x: function(value) {
		if(this.mX != value) {
			this.mX = value;
			this.mOrientationChanged = true;
		}
		return value;
	}
	,get_y: function() {
		return this.mY;
	}
	,set_y: function(value) {
		if(this.mY != value) {
			this.mY = value;
			this.mOrientationChanged = true;
		}
		return value;
	}
	,get_pivotX: function() {
		return this.mPivotX;
	}
	,set_pivotX: function(value) {
		if(this.mPivotX != value) {
			this.mPivotX = value;
			this.mOrientationChanged = true;
		}
		return value;
	}
	,get_pivotY: function() {
		return this.mPivotY;
	}
	,set_pivotY: function(value) {
		if(this.mPivotY != value) {
			this.mPivotY = value;
			this.mOrientationChanged = true;
		}
		return value;
	}
	,get_scaleX: function() {
		return this.mScaleX;
	}
	,set_scaleX: function(value) {
		if(this.mScaleX != value) {
			this.mScaleX = value;
			this.mOrientationChanged = true;
		}
		return value;
	}
	,get_scaleY: function() {
		return this.mScaleY;
	}
	,set_scaleY: function(value) {
		if(this.mScaleY != value) {
			this.mScaleY = value;
			this.mOrientationChanged = true;
		}
		return value;
	}
	,get_skewX: function() {
		return this.mSkewX;
	}
	,set_skewX: function(value) {
		value = starling.utils.MathUtil.normalizeAngle(value);
		if(this.mSkewX != value) {
			this.mSkewX = value;
			this.mOrientationChanged = true;
		}
		return value;
	}
	,get_skewY: function() {
		return this.mSkewY;
	}
	,set_skewY: function(value) {
		value = starling.utils.MathUtil.normalizeAngle(value);
		if(this.mSkewY != value) {
			this.mSkewY = value;
			this.mOrientationChanged = true;
		}
		return value;
	}
	,get_rotation: function() {
		return this.mRotation;
	}
	,set_rotation: function(value) {
		value = starling.utils.MathUtil.normalizeAngle(value);
		if(this.mRotation != value) {
			this.mRotation = value;
			this.mOrientationChanged = true;
		}
		return value;
	}
	,get_alpha: function() {
		return this.mAlpha;
	}
	,set_alpha: function(value) {
		if(value < 0.0) this.mAlpha = 0.0; else if(value > 1.0) this.mAlpha = 1.0; else this.mAlpha = value;
		return value;
	}
	,get_visible: function() {
		return this.mVisible;
	}
	,set_visible: function(value) {
		this.mVisible = value;
		return value;
	}
	,get_touchable: function() {
		return this.mTouchable;
	}
	,set_touchable: function(value) {
		this.mTouchable = value;
		return value;
	}
	,get_blendMode: function() {
		return this.mBlendMode;
	}
	,set_blendMode: function(value) {
		this.mBlendMode = value;
		return value;
	}
	,get_name: function() {
		return this.mName;
	}
	,set_name: function(value) {
		this.mName = value;
		return value;
	}
	,get_filter: function() {
		return this.mFilter;
	}
	,set_filter: function(value) {
		this.mFilter = value;
		return value;
	}
	,get_mask: function() {
		return this.mMask;
	}
	,set_mask: function(value) {
		if(this.mMask != value) {
			if(this.mMask != null) this.mMask.mIsMask = false;
			if(value != null) value.mIsMask = true;
			this.mMask = value;
		}
		return value;
	}
	,get_parent: function() {
		return this.mParent;
	}
	,get_base: function() {
		var currentObject = this;
		while(currentObject.mParent != null) currentObject = currentObject.mParent;
		if(currentObject == this) return null; else return currentObject;
	}
	,get_root: function() {
		var currentObject = this;
		while(currentObject.mParent != null) if(js.Boot.__instanceof(currentObject.mParent,starling.display.Stage)) return currentObject; else currentObject = currentObject.get_parent();
		return null;
	}
	,get_stage: function() {
		if(this.get_base() == null) return null; else try {
			return this.get_base();
		} catch( e ) {
			if( js.Boot.__instanceof(e,openfl.errors.Error) ) {
				return null;
			} else throw(e);
		}
	}
	,__class__: starling.display.DisplayObject
	,__properties__: {get_stage:"get_stage",get_root:"get_root",get_base:"get_base",get_parent:"get_parent",set_mask:"set_mask",get_mask:"get_mask",set_filter:"set_filter",get_filter:"get_filter",set_name:"set_name",get_name:"get_name",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_touchable:"set_touchable",get_touchable:"get_touchable",set_visible:"set_visible",get_visible:"get_visible",set_alpha:"set_alpha",get_alpha:"get_alpha",set_rotation:"set_rotation",get_rotation:"get_rotation",set_skewY:"set_skewY",get_skewY:"get_skewY",set_skewX:"set_skewX",get_skewX:"get_skewX",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_pivotY:"set_pivotY",get_pivotY:"get_pivotY",set_pivotX:"set_pivotX",get_pivotX:"get_pivotX",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",get_bounds:"get_bounds",set_useHandCursor:"set_useHandCursor",get_useHandCursor:"get_useHandCursor",get_is3D:"get_is3D",get_transformationMatrix3D:"get_transformationMatrix3D",set_transformationMatrix:"set_transformationMatrix",get_transformationMatrix:"get_transformationMatrix",get_isMask:"get_isMask",get_hasVisibleArea:"get_hasVisibleArea"}
});
starling.display.DisplayObjectContainer = function() {
	starling.display.DisplayObject.call(this);
	var name = Type.getClassName(Type.getClass(this));
	if(openfl.system.Capabilities.isDebugger && name == "starling.display.DisplayObjectContainer") throw new starling.errors.AbstractClassError();
	this.mChildren = new Array();
};
$hxClasses["starling.display.DisplayObjectContainer"] = starling.display.DisplayObjectContainer;
starling.display.DisplayObjectContainer.__name__ = ["starling","display","DisplayObjectContainer"];
starling.display.DisplayObjectContainer.mergeSort = function(input,compareFunc,startIndex,length,buffer) {
	if(length <= 1) return; else {
		var i = 0;
		var endIndex = startIndex + length;
		var halfLength = length / 2;
		var l = startIndex;
		var r = startIndex + halfLength;
		starling.display.DisplayObjectContainer.mergeSort(input,compareFunc,startIndex,halfLength,buffer);
		starling.display.DisplayObjectContainer.mergeSort(input,compareFunc,startIndex + halfLength,length - halfLength,buffer);
		var _g = 0;
		while(_g < length) {
			var i1 = _g++;
			var func = compareFunc;
			if(l < startIndex + halfLength && (r == endIndex || func(input[l],input[r]) <= 0)) {
				buffer[i1] = input[l];
				l++;
			} else {
				buffer[i1] = input[r];
				r++;
			}
		}
		var _g1 = startIndex;
		while(_g1 < endIndex) {
			var i2 = _g1++;
			input[i2] = buffer[i2 - startIndex];
		}
	}
};
starling.display.DisplayObjectContainer.__super__ = starling.display.DisplayObject;
starling.display.DisplayObjectContainer.prototype = $extend(starling.display.DisplayObject.prototype,{
	mChildren: null
	,children: null
	,mTouchGroup: null
	,numChildren: null
	,dispose: function() {
		var _g1 = 0;
		var _g = this.mChildren.length;
		while(_g1 < _g) {
			var j = _g1++;
			var i = this.mChildren.length - j - 1;
			this.mChildren[i].dispose();
		}
		starling.display.DisplayObject.prototype.dispose.call(this);
	}
	,addChild: function(child) {
		return this.addChildAt(child,this.mChildren.length);
	}
	,addChildAt: function(child,index) {
		var numChildren = this.mChildren.length;
		if(index >= 0 && index <= numChildren) {
			if(child.get_parent() == this) this.setChildIndex(child,index); else {
				child.removeFromParent();
				if(index == numChildren) this.mChildren[numChildren] = child; else this.mChildren.splice(index,0,child);
				child.setParent(this);
				child.dispatchEventWith(starling.events.Event.ADDED,true);
				if(this.get_stage() != null) {
					var isDisplayObjectContainer = js.Boot.__instanceof(child,starling.display.DisplayObjectContainer);
					if(isDisplayObjectContainer) {
						var container;
						container = js.Boot.__cast(child , starling.display.DisplayObjectContainer);
						container.broadcastEventWith(starling.events.Event.ADDED_TO_STAGE);
					} else child.dispatchEventWith(starling.events.Event.ADDED_TO_STAGE);
				}
			}
			return child;
		} else throw new openfl.errors.RangeError("Invalid child index");
	}
	,removeChild: function(child,dispose) {
		if(dispose == null) dispose = false;
		var childIndex = this.getChildIndex(child);
		if(childIndex != -1) this.removeChildAt(childIndex,dispose);
		return child;
	}
	,removeChildAt: function(index,dispose) {
		if(dispose == null) dispose = false;
		if(index >= 0 && index < this.mChildren.length) {
			var child = this.mChildren[index];
			child.dispatchEventWith(starling.events.Event.REMOVED,true);
			if(this.get_stage() != null) {
				var container = null;
				try {
					container = child;
				} catch( e ) {
					if( js.Boot.__instanceof(e,openfl.errors.Error) ) {
					} else throw(e);
				}
				child.dispatchEventWith(starling.events.Event.REMOVED_FROM_STAGE);
			}
			child.setParent(null);
			index = HxOverrides.indexOf(this.mChildren,child,0);
			if(index >= 0) this.mChildren.splice(index,1);
			if(dispose) child.dispose();
			return child;
		} else throw new openfl.errors.RangeError("Invalid child index");
	}
	,removeChildren: function(beginIndex,endIndex,dispose) {
		if(dispose == null) dispose = false;
		if(endIndex == null) endIndex = -1;
		if(beginIndex == null) beginIndex = 0;
		if(endIndex < 0 || endIndex >= this.get_numChildren()) endIndex = this.get_numChildren() - 1;
		var _g = beginIndex;
		while(_g < endIndex) {
			var i = _g++;
			this.removeChildAt(beginIndex,dispose);
		}
	}
	,getChildAt: function(index) {
		if(index < 0) index = this.get_numChildren() + index;
		var numChildren = this.mChildren.length;
		if(index >= 0 && index < numChildren) return this.mChildren[index]; else {
			throw new openfl.errors.RangeError("Invalid child index");
			return null;
		}
	}
	,getChildByName: function(name) {
		var numChildren = this.mChildren.length;
		var _g = 0;
		while(_g < numChildren) {
			var i = _g++;
			if(this.mChildren[i].get_name() == name) return this.mChildren[i];
		}
		return null;
	}
	,getChildIndex: function(child) {
		return HxOverrides.indexOf(this.mChildren,child,0);
	}
	,setChildIndex: function(child,index) {
		var oldIndex = this.getChildIndex(child);
		if(oldIndex == index) return;
		if(oldIndex == -1) throw new openfl.errors.ArgumentError("Not a child of this container");
		this.mChildren.splice(oldIndex,1);
		this.mChildren.splice(index,0,child);
	}
	,swapChildren: function(child1,child2) {
		var index1 = this.getChildIndex(child1);
		var index2 = this.getChildIndex(child2);
		if(index1 == -1 || index2 == -1) throw new openfl.errors.ArgumentError("Not a child of this container");
		this.swapChildrenAt(index1,index2);
	}
	,swapChildrenAt: function(index1,index2) {
		var child1 = this.getChildAt(index1);
		var child2 = this.getChildAt(index2);
		this.mChildren[index1] = child2;
		this.mChildren[index2] = child1;
	}
	,sortChildren: function(compareFunction) {
		var this1 = starling.display.DisplayObjectContainer.sSortBuffer;
		var value = this.mChildren.length;
		if(!this1.fixed) {
			if(value > this1.length) {
				var data;
				var this2;
				this2 = new Array(value);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,value)));
				this1.data = data;
			}
			this1.length = value;
		}
		value;
		starling.display.DisplayObjectContainer.mergeSort(this.mChildren,compareFunction,0,this.mChildren.length,(function($this) {
			var $r;
			var this3 = starling.display.DisplayObjectContainer.sSortBuffer;
			var value1 = new Array();
			{
				var _g1 = 0;
				var _g = this3.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value1.push(this3.data[i]);
				}
			}
			$r = value1;
			return $r;
		}(this)));
		var this4 = starling.display.DisplayObjectContainer.sSortBuffer;
		if(!this4.fixed) {
			if(0 > this4.length) {
				var data1;
				var this5;
				this5 = new Array(0);
				data1 = this5;
				haxe.ds._Vector.Vector_Impl_.blit(this4.data,0,data1,0,Std["int"](Math.min(this4.data.length,0)));
				this4.data = data1;
			}
			this4.length = 0;
		}
		0;
	}
	,contains: function(child) {
		while(child != null) if(child == this) return true; else child = child.get_parent();
		return false;
	}
	,getBounds: function(targetSpace,resultRect) {
		if(resultRect == null) resultRect = new openfl.geom.Rectangle();
		var numChildren = this.mChildren.length;
		if(numChildren == 0) {
			this.getTransformationMatrix(targetSpace,starling.display.DisplayObjectContainer.sHelperMatrix);
			starling.utils.MatrixUtil.transformCoords(starling.display.DisplayObjectContainer.sHelperMatrix,0.0,0.0,starling.display.DisplayObjectContainer.sHelperPoint);
			resultRect.setTo(starling.display.DisplayObjectContainer.sHelperPoint.x,starling.display.DisplayObjectContainer.sHelperPoint.y,0,0);
		} else if(numChildren == 1) this.mChildren[0].getBounds(targetSpace,resultRect); else {
			var minX = Math.POSITIVE_INFINITY;
			var maxX = Math.NEGATIVE_INFINITY;
			var minY = Math.POSITIVE_INFINITY;
			var maxY = Math.NEGATIVE_INFINITY;
			var _g = 0;
			while(_g < numChildren) {
				var i = _g++;
				this.mChildren[i].getBounds(targetSpace,resultRect);
				if(minX > resultRect.x) minX = resultRect.x;
				if(maxX < resultRect.get_right()) maxX = resultRect.get_right();
				if(minY > resultRect.y) minY = resultRect.y;
				if(maxY < resultRect.get_bottom()) maxY = resultRect.get_bottom();
			}
			resultRect.setTo(minX,minY,maxX - minX,maxY - minY);
		}
		return resultRect;
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) forTouch = false;
		if(forTouch && (!this.get_visible() || !this.get_touchable())) return null;
		if(!this.hitTestMask(localPoint)) return null;
		var target = null;
		var localX = localPoint.x;
		var localY = localPoint.y;
		var numChildren = this.mChildren.length;
		var _g = 0;
		while(_g < numChildren) {
			var j = _g++;
			var i = numChildren - j - 1;
			var child = this.mChildren[i];
			if(child.get_isMask()) continue;
			starling.display.DisplayObjectContainer.sHelperMatrix.copyFrom(child.get_transformationMatrix());
			starling.display.DisplayObjectContainer.sHelperMatrix.invert();
			starling.utils.MatrixUtil.transformCoords(starling.display.DisplayObjectContainer.sHelperMatrix,localX,localY,starling.display.DisplayObjectContainer.sHelperPoint);
			target = child.hitTest(starling.display.DisplayObjectContainer.sHelperPoint,forTouch);
			if(target != null) if(forTouch && this.mTouchGroup) return this; else return target;
		}
		return null;
	}
	,render: function(support,parentAlpha) {
		var alpha = parentAlpha * this.get_alpha();
		var numChildren = this.mChildren.length;
		var blendMode = support.get_blendMode();
		var i = 0;
		var _g = 0;
		while(_g < numChildren) {
			var i1 = _g++;
			var child = this.mChildren[i1];
			if(child.get_hasVisibleArea()) {
				var filter = child.get_filter();
				var mask = child.get_mask();
				support.pushMatrix();
				support.transformMatrix(child);
				support.set_blendMode(child.get_blendMode());
				if(mask != null) support.pushMask(mask);
				if(filter != null) filter.render(child,support,alpha); else child.render(support,alpha);
				if(mask != null) support.popMask();
				support.set_blendMode(blendMode);
				support.popMatrix();
			}
		}
	}
	,broadcastEvent: function(event) {
		if(event.get_bubbles()) throw new openfl.errors.ArgumentError("Broadcast of bubbling events is prohibited");
		var fromIndex = starling.display.DisplayObjectContainer.sBroadcastListeners.length;
		var value = this.getChildEventListeners(this,event.get_type(),(function($this) {
			var $r;
			var this1 = starling.display.DisplayObjectContainer.sBroadcastListeners;
			var value1 = new Array();
			{
				var _g1 = 0;
				var _g = this1.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value1.push(this1.data[i]);
				}
			}
			$r = value1;
			return $r;
		}(this)));
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var vec;
		var this2;
		this2 = new Array(value.length);
		vec = this2;
		var _g11 = 0;
		var _g2 = value.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			vec[i1] = value[i1];
		}
		vectorData.data = vec;
		starling.display.DisplayObjectContainer.sBroadcastListeners = vectorData;
		var toIndex = starling.display.DisplayObjectContainer.sBroadcastListeners.length;
		var _g3 = fromIndex;
		while(_g3 < toIndex) {
			var i2 = _g3++;
			starling.display.DisplayObjectContainer.sBroadcastListeners.data[i2].dispatchEvent(event);
		}
		var this3 = starling.display.DisplayObjectContainer.sBroadcastListeners;
		if(!this3.fixed) {
			if(fromIndex > this3.length) {
				var data;
				var this4;
				this4 = new Array(fromIndex);
				data = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,Std["int"](Math.min(this3.data.length,fromIndex)));
				this3.data = data;
			}
			this3.length = fromIndex;
		}
		fromIndex;
	}
	,broadcastEventWith: function(type,data) {
		var event = starling.events.Event.fromPool(type,false,data);
		this.broadcastEvent(event);
		starling.events.Event.toPool(event);
	}
	,get_numChildren: function() {
		return this.mChildren.length;
	}
	,get_touchGroup: function() {
		return this.mTouchGroup;
	}
	,set_touchGroup: function(value) {
		this.mTouchGroup = value;
		return value;
	}
	,getChildEventListeners: function(object,eventType,listeners) {
		var isDisplayObjectContainer = js.Boot.__instanceof(object,starling.display.DisplayObjectContainer);
		var container;
		if(isDisplayObjectContainer) container = js.Boot.__cast(object , starling.display.DisplayObjectContainer); else container = null;
		if(object.hasEventListener(eventType)) listeners[listeners.length] = object;
		if(container != null) {
			var children = container.mChildren;
			var numChildren = 0;
			if(children != null) numChildren = children.length;
			var _g = 0;
			while(_g < numChildren) {
				var i = _g++;
				listeners = this.getChildEventListeners(children[i],eventType,listeners);
			}
		}
		return listeners;
	}
	,get_children: function() {
		return this.mChildren;
	}
	,__class__: starling.display.DisplayObjectContainer
	,__properties__: $extend(starling.display.DisplayObject.prototype.__properties__,{set_touchGroup:"set_touchGroup",get_touchGroup:"get_touchGroup",get_numChildren:"get_numChildren",get_children:"get_children"})
});
starling.display.Sprite = function() {
	starling.display.DisplayObjectContainer.call(this);
};
$hxClasses["starling.display.Sprite"] = starling.display.Sprite;
starling.display.Sprite.__name__ = ["starling","display","Sprite"];
starling.display.Sprite.__super__ = starling.display.DisplayObjectContainer;
starling.display.Sprite.prototype = $extend(starling.display.DisplayObjectContainer.prototype,{
	mFlattenedContents: null
	,mFlattenRequested: null
	,mFlattenOptimized: null
	,mClipRect: null
	,isFlattened: null
	,dispose: function() {
		this.disposeFlattenedContents();
		starling.display.DisplayObjectContainer.prototype.dispose.call(this);
	}
	,disposeFlattenedContents: function() {
		if(this.mFlattenedContents != null) {
			var _g1 = 0;
			var _g = this.mFlattenedContents.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.mFlattenedContents[i].dispose();
			}
			this.mFlattenedContents = null;
		}
	}
	,flatten: function(ignoreChildOrder) {
		if(ignoreChildOrder == null) ignoreChildOrder = false;
		this.mFlattenRequested = true;
		this.mFlattenOptimized = ignoreChildOrder;
		this.broadcastEventWith(starling.events.Event.FLATTEN);
	}
	,unflatten: function() {
		this.mFlattenRequested = false;
		this.disposeFlattenedContents();
	}
	,get_isFlattened: function() {
		return this.mFlattenedContents != null || this.mFlattenRequested;
	}
	,get_clipRect: function() {
		return this.mClipRect;
	}
	,set_clipRect: function(value) {
		if(this.mClipRect != null && value != null) this.mClipRect.copyFrom(value); else if(value != null) this.mClipRect = value.clone(); else this.mClipRect = null;
		return value;
	}
	,getClipRect: function(targetSpace,resultRect) {
		if(this.mClipRect == null) return null;
		if(resultRect == null) resultRect = new openfl.geom.Rectangle();
		var x = 0;
		var y = 0;
		var minX = Math.POSITIVE_INFINITY;
		var maxX = Math.NEGATIVE_INFINITY;
		var minY = Math.POSITIVE_INFINITY;
		var maxY = Math.NEGATIVE_INFINITY;
		var transMatrix = this.getTransformationMatrix(targetSpace,starling.display.Sprite.sHelperMatrix);
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			switch(i) {
			case 0:
				x = this.mClipRect.get_left();
				y = this.mClipRect.get_top();
				break;
			case 1:
				x = this.mClipRect.get_left();
				y = this.mClipRect.get_bottom();
				break;
			case 2:
				x = this.mClipRect.get_right();
				y = this.mClipRect.get_top();
				break;
			case 3:
				x = this.mClipRect.get_right();
				y = this.mClipRect.get_bottom();
				break;
			}
			var transformedPoint = starling.utils.MatrixUtil.transformCoords(transMatrix,x,y,starling.display.Sprite.sHelperPoint);
			if(minX > transformedPoint.x) minX = transformedPoint.x;
			if(maxX < transformedPoint.x) maxX = transformedPoint.x;
			if(minY > transformedPoint.y) minY = transformedPoint.y;
			if(maxY < transformedPoint.y) maxY = transformedPoint.y;
		}
		resultRect.setTo(minX,minY,maxX - minX,maxY - minY);
		return resultRect;
	}
	,getBounds: function(targetSpace,resultRect) {
		var bounds = starling.display.DisplayObjectContainer.prototype.getBounds.call(this,targetSpace,resultRect);
		if(this.mClipRect != null) starling.utils.RectangleUtil.intersect(bounds,this.getClipRect(targetSpace,starling.display.Sprite.sHelperRect),bounds);
		return bounds;
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) forTouch = false;
		if(this.mClipRect != null && !this.mClipRect.containsPoint(localPoint)) return null; else return starling.display.DisplayObjectContainer.prototype.hitTest.call(this,localPoint,forTouch);
	}
	,render: function(support,parentAlpha) {
		if(this.mClipRect != null) {
			var clipRect = support.pushClipRect(this.getClipRect(this.get_stage(),starling.display.Sprite.sHelperRect));
			if(clipRect.isEmpty()) {
				support.popClipRect();
				return;
			}
		}
		if(this.mFlattenedContents != null || this.mFlattenRequested) {
			if(this.mFlattenedContents == null) this.mFlattenedContents = new Array();
			if(this.mFlattenRequested) {
				starling.display.QuadBatch.compile(this,this.mFlattenedContents);
				if(this.mFlattenOptimized) starling.display.QuadBatch.optimize(this.mFlattenedContents);
				support.applyClipRect();
				this.mFlattenRequested = false;
			}
			var alpha = parentAlpha * this.get_alpha();
			var numBatches = this.mFlattenedContents.length;
			var mvpMatrix = support.get_mvpMatrix3D();
			support.finishQuadBatch();
			support.raiseDrawCount(numBatches);
			var _g = 0;
			while(_g < numBatches) {
				var i = _g++;
				var quadBatch = this.mFlattenedContents[i];
				var blendMode;
				if(quadBatch.get_blendMode() == starling.display.BlendMode.AUTO) blendMode = support.get_blendMode(); else blendMode = quadBatch.get_blendMode();
				quadBatch.renderCustom(mvpMatrix,alpha,blendMode);
			}
		} else starling.display.DisplayObjectContainer.prototype.render.call(this,support,parentAlpha);
		if(this.mClipRect != null) support.popClipRect();
	}
	,__class__: starling.display.Sprite
	,__properties__: $extend(starling.display.DisplayObjectContainer.prototype.__properties__,{set_clipRect:"set_clipRect",get_clipRect:"get_clipRect",get_isFlattened:"get_isFlattened"})
});
robotlegs.bender.extensions.stage3D.starling = {};
robotlegs.bender.extensions.stage3D.starling.impl = {};
robotlegs.bender.extensions.stage3D.starling.impl.StarlingLayer = function() {
	starling.display.Sprite.call(this);
};
$hxClasses["robotlegs.bender.extensions.stage3D.starling.impl.StarlingLayer"] = robotlegs.bender.extensions.stage3D.starling.impl.StarlingLayer;
robotlegs.bender.extensions.stage3D.starling.impl.StarlingLayer.__name__ = ["robotlegs","bender","extensions","stage3D","starling","impl","StarlingLayer"];
robotlegs.bender.extensions.stage3D.starling.impl.StarlingLayer.__interfaces__ = [robotlegs.bender.extensions.stage3D.base.api.ILayer];
robotlegs.bender.extensions.stage3D.starling.impl.StarlingLayer.__super__ = starling.display.Sprite;
robotlegs.bender.extensions.stage3D.starling.impl.StarlingLayer.prototype = $extend(starling.display.Sprite.prototype,{
	_iRenderer: null
	,starling: null
	,rect: null
	,process: function() {
		if(this.starling != null) this.starling.nextFrame();
	}
	,setStarling: function(starling) {
		this.starling = starling;
	}
	,set_rect: function(rect) {
		this.starling.get_viewPort().setTo(rect.x,rect.y,rect.width,rect.height);
		this.starling.get_stage().set_stageWidth(rect.width);
		this.starling.get_stage().set_stageHeight(rect.height);
		return rect;
	}
	,set_iRenderer: function(value) {
		return this._iRenderer = value;
	}
	,get_iRenderer: function() {
		return this._iRenderer;
	}
	,__class__: robotlegs.bender.extensions.stage3D.starling.impl.StarlingLayer
	,__properties__: $extend(starling.display.Sprite.prototype.__properties__,{set_iRenderer:"set_iRenderer",get_iRenderer:"get_iRenderer",set_rect:"set_rect"})
});
com.imagination.robotlegs.starling.view.starling = {};
com.imagination.robotlegs.starling.view.starling.CheckerboardStarlingLayer = function() {
	robotlegs.bender.extensions.stage3D.starling.impl.StarlingLayer.call(this);
};
$hxClasses["com.imagination.robotlegs.starling.view.starling.CheckerboardStarlingLayer"] = com.imagination.robotlegs.starling.view.starling.CheckerboardStarlingLayer;
com.imagination.robotlegs.starling.view.starling.CheckerboardStarlingLayer.__name__ = ["com","imagination","robotlegs","starling","view","starling","CheckerboardStarlingLayer"];
com.imagination.robotlegs.starling.view.starling.CheckerboardStarlingLayer.__super__ = robotlegs.bender.extensions.stage3D.starling.impl.StarlingLayer;
com.imagination.robotlegs.starling.view.starling.CheckerboardStarlingLayer.prototype = $extend(robotlegs.bender.extensions.stage3D.starling.impl.StarlingLayer.prototype,{
	initialize: function() {
		var landscape = openfl.Assets.getBitmapData("img/landscape.jpg");
		var image = new starling.display.Image(starling.textures.Texture.fromBitmapData(landscape));
		this.addChild(image);
	}
	,__class__: com.imagination.robotlegs.starling.view.starling.CheckerboardStarlingLayer
});
com.imagination.robotlegs.starling.view.starling.CheckerboardStarlingLayerMediator = function() {
};
$hxClasses["com.imagination.robotlegs.starling.view.starling.CheckerboardStarlingLayerMediator"] = com.imagination.robotlegs.starling.view.starling.CheckerboardStarlingLayerMediator;
com.imagination.robotlegs.starling.view.starling.CheckerboardStarlingLayerMediator.__name__ = ["com","imagination","robotlegs","starling","view","starling","CheckerboardStarlingLayerMediator"];
com.imagination.robotlegs.starling.view.starling.CheckerboardStarlingLayerMediator.__super__ = robotlegs.bender.bundles.mvcs.Mediator;
com.imagination.robotlegs.starling.view.starling.CheckerboardStarlingLayerMediator.prototype = $extend(robotlegs.bender.bundles.mvcs.Mediator.prototype,{
	view: null
	,initialize: function() {
		this.view.initialize();
	}
	,__class__: com.imagination.robotlegs.starling.view.starling.CheckerboardStarlingLayerMediator
});
com.imagination.robotlegs.starling.view.starling.MainStarlingLayer = function() {
	this.time = 0;
	robotlegs.bender.extensions.stage3D.starling.impl.StarlingLayer.call(this);
};
$hxClasses["com.imagination.robotlegs.starling.view.starling.MainStarlingLayer"] = com.imagination.robotlegs.starling.view.starling.MainStarlingLayer;
com.imagination.robotlegs.starling.view.starling.MainStarlingLayer.__name__ = ["com","imagination","robotlegs","starling","view","starling","MainStarlingLayer"];
com.imagination.robotlegs.starling.view.starling.MainStarlingLayer.__super__ = robotlegs.bender.extensions.stage3D.starling.impl.StarlingLayer;
com.imagination.robotlegs.starling.view.starling.MainStarlingLayer.prototype = $extend(robotlegs.bender.extensions.stage3D.starling.impl.StarlingLayer.prototype,{
	time: null
	,assets: null
	,mMovies: null
	,initialize: function() {
		var _g = this;
		this.assets = new starling.utils.AssetManager();
		var atlas_xml = Xml.parse(openfl.Assets.getText("img/atlas.xml"));
		var atlas = openfl.Assets.getBitmapData("img/atlas.png");
		this.assets.enqueueWithName(atlas,"atlas");
		this.assets.enqueueWithName(atlas_xml,"atlas_xml");
		this.assets.loadQueue(function(ratio) {
			if(ratio == 1) _g.onComplete(_g.assets);
		});
	}
	,onComplete: function(assets) {
		var frames;
		var value = assets.getTextures("flight");
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(value.length);
		vec = this1;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = value[i];
		}
		vectorData.data = vec;
		frames = vectorData;
		var this2;
		this2 = new openfl.VectorData();
		var this3;
		this3 = new Array(0);
		this2.data = this3;
		this2.length = 0;
		this2.fixed = false;
		this.mMovies = this2;
		var num = 8;
		var _g2 = 0;
		while(_g2 < num) {
			var i1 = _g2++;
			var t = i1 / num;
			var mMovie = new starling.display.MovieClip(frames,15);
			mMovie.set_currentFrame(Math.floor(frames.length * Math.random()));
			mMovie.set_y(-30 + t * 460);
			mMovie.set_x(i1 * (350 + Math.random() * 50) % 960);
			this.addChild(mMovie);
			starling.core.Starling.get_Juggler().add(mMovie);
			var this4 = this.mMovies;
			if(!this4.fixed) {
				this4.length++;
				if(this4.data.length < this4.length) {
					var data;
					var this5;
					this5 = new Array(this4.data.length + 10);
					data = this5;
					haxe.ds._Vector.Vector_Impl_.blit(this4.data,0,data,0,this4.data.length);
					this4.data = data;
				}
				this4.data[this4.length - 1] = mMovie;
			}
			this4.length;
		}
		this.addEventListener(starling.events.EnterFrameEvent.ENTER_FRAME,$bind(this,this.Update));
	}
	,Update: function(e) {
		var _g1 = 0;
		var _g = this.mMovies.length;
		while(_g1 < _g) {
			var i = _g1++;
			var _g2 = this.mMovies.data[i];
			_g2.set_x(_g2.get_x() + 1);
			if(this.mMovies.data[i].get_x() > 960) this.mMovies.data[i].set_x(-200);
		}
	}
	,__class__: com.imagination.robotlegs.starling.view.starling.MainStarlingLayer
});
com.imagination.robotlegs.starling.view.starling.MainStarlingLayerMediator = function() {
};
$hxClasses["com.imagination.robotlegs.starling.view.starling.MainStarlingLayerMediator"] = com.imagination.robotlegs.starling.view.starling.MainStarlingLayerMediator;
com.imagination.robotlegs.starling.view.starling.MainStarlingLayerMediator.__name__ = ["com","imagination","robotlegs","starling","view","starling","MainStarlingLayerMediator"];
com.imagination.robotlegs.starling.view.starling.MainStarlingLayerMediator.__super__ = robotlegs.bender.bundles.mvcs.Mediator;
com.imagination.robotlegs.starling.view.starling.MainStarlingLayerMediator.prototype = $extend(robotlegs.bender.bundles.mvcs.Mediator.prototype,{
	view: null
	,initialize: function() {
		this.view.initialize();
	}
	,__class__: com.imagination.robotlegs.starling.view.starling.MainStarlingLayerMediator
});
haxe.StackItem = $hxClasses["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe.StackItem.CFunction = ["CFunction",0];
haxe.StackItem.CFunction.toString = $estr;
haxe.StackItem.CFunction.__enum__ = haxe.StackItem;
haxe.StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe.CallStack;
haxe.CallStack.__name__ = ["haxe","CallStack"];
haxe.CallStack.callStack = function() {
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe.StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe.StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	try {
		throw new Error();
	} catch( e ) {
		var a = haxe.CallStack.makeStack(e.stack);
		if(a != null) a.shift();
		Error.prepareStackTrace = oldValue;
		return a;
	}
};
haxe.CallStack.exceptionStack = function() {
	return [];
};
haxe.CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe.CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe.CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		if(m == null) b.b += "null"; else b.b += "" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe.CallStack.itemToString(b,s1);
			b.b += " (";
		}
		if(file == null) b.b += "null"; else b.b += "" + file;
		b.b += " line ";
		if(line == null) b.b += "null"; else b.b += "" + line;
		if(s1 != null) b.b += ")";
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		if(cname == null) b.b += "null"; else b.b += "" + cname;
		b.b += ".";
		if(meth == null) b.b += "null"; else b.b += "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		if(n == null) b.b += "null"; else b.b += "" + n;
		break;
	}
};
haxe.CallStack.makeStack = function(s) {
	if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") stack.shift();
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe.StackItem.FilePos(meth == "Anonymous function"?haxe.StackItem.LocalFunction():meth == "Global code"?null:haxe.StackItem.Method(path.join("."),meth),file,line1));
			} else m.push(haxe.StackItem.Module(line));
		}
		return m;
	} else return s;
};
haxe.Log = function() { };
$hxClasses["haxe.Log"] = haxe.Log;
haxe.Log.__name__ = ["haxe","Log"];
haxe.Log.trace = function(v,infos) {
	js.Boot.__trace(v,infos);
};
haxe.Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe.Timer;
haxe.Timer.__name__ = ["haxe","Timer"];
haxe.Timer.delay = function(f,time_ms) {
	var t = new haxe.Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe.Timer.measure = function(f,pos) {
	var t0 = haxe.Timer.stamp();
	var r = f();
	haxe.Log.trace(haxe.Timer.stamp() - t0 + "s",pos);
	return r;
};
haxe.Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe.Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) return;
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe.Timer
};
haxe.Utf8 = function() { };
$hxClasses["haxe.Utf8"] = haxe.Utf8;
haxe.Utf8.__name__ = ["haxe","Utf8"];
haxe.Utf8.charCodeAt = function(s,index) {
	return HxOverrides.cca(s,index);
};
haxe.crypto = {};
haxe.crypto.BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) nbits++;
	if(nbits > 8 || len != 1 << nbits) throw "BaseCode : base length must be a power of two.";
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe.crypto.BaseCode;
haxe.crypto.BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe.crypto.BaseCode.prototype = {
	base: null
	,nbits: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = haxe.io.Bytes.alloc(size + (b.length * 8 % nbits == 0?0:1));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.get(pin++);
			}
			curbits -= nbits;
			out.set(pout++,base.b[buf >> curbits & mask]);
		}
		if(curbits > 0) out.set(pout++,base.b[buf << nbits - curbits & mask]);
		return out;
	}
	,__class__: haxe.crypto.BaseCode
};
haxe.ds.BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe.ds.BalancedTree;
haxe.ds.BalancedTree.__name__ = ["haxe","ds","BalancedTree"];
haxe.ds.BalancedTree.prototype = {
	root: null
	,set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) return node.value;
			if(c < 0) node = node.left; else node = node.right;
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( e ) {
			if( js.Boot.__instanceof(e,String) ) {
				return false;
			} else throw(e);
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) return true; else if(c < 0) node = node.left; else node = node.right;
		}
		return false;
	}
	,setLoop: function(k,v,node) {
		if(node == null) return new haxe.ds.TreeNode(null,k,v,null);
		var c = this.compare(k,node.key);
		if(c == 0) return new haxe.ds.TreeNode(node.left,k,v,node.right,node == null?0:node._height); else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) throw "Not_found";
		var c = this.compare(k,node.key);
		if(c == 0) return this.merge(node.left,node.right); else if(c < 0) return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right); else return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
	}
	,merge: function(t1,t2) {
		if(t1 == null) return t2;
		if(t2 == null) return t1;
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) throw "Not_found"; else if(t.left == null) return t; else return this.minBinding(t.left);
	}
	,removeMinBinding: function(t) {
		if(t.left == null) return t.right; else return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
	}
	,balance: function(l,k,v,r) {
		var hl;
		if(l == null) hl = 0; else hl = l._height;
		var hr;
		if(r == null) hr = 0; else hr = r._height;
		if(hl > hr + 2) {
			if((function($this) {
				var $r;
				var _this = l.left;
				$r = _this == null?0:_this._height;
				return $r;
			}(this)) >= (function($this) {
				var $r;
				var _this1 = l.right;
				$r = _this1 == null?0:_this1._height;
				return $r;
			}(this))) return new haxe.ds.TreeNode(l.left,l.key,l.value,new haxe.ds.TreeNode(l.right,k,v,r)); else return new haxe.ds.TreeNode(new haxe.ds.TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe.ds.TreeNode(l.right.right,k,v,r));
		} else if(hr > hl + 2) {
			if((function($this) {
				var $r;
				var _this2 = r.right;
				$r = _this2 == null?0:_this2._height;
				return $r;
			}(this)) > (function($this) {
				var $r;
				var _this3 = r.left;
				$r = _this3 == null?0:_this3._height;
				return $r;
			}(this))) return new haxe.ds.TreeNode(new haxe.ds.TreeNode(l,k,v,r.left),r.key,r.value,r.right); else return new haxe.ds.TreeNode(new haxe.ds.TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe.ds.TreeNode(r.left.right,r.key,r.value,r.right));
		} else return new haxe.ds.TreeNode(l,k,v,r,(hl > hr?hl:hr) + 1);
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe.ds.BalancedTree
};
haxe.ds.TreeNode = function(l,k,v,r,h) {
	if(h == null) h = -1;
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) this._height = ((function($this) {
		var $r;
		var _this = $this.left;
		$r = _this == null?0:_this._height;
		return $r;
	}(this)) > (function($this) {
		var $r;
		var _this1 = $this.right;
		$r = _this1 == null?0:_this1._height;
		return $r;
	}(this))?(function($this) {
		var $r;
		var _this2 = $this.left;
		$r = _this2 == null?0:_this2._height;
		return $r;
	}(this)):(function($this) {
		var $r;
		var _this3 = $this.right;
		$r = _this3 == null?0:_this3._height;
		return $r;
	}(this))) + 1; else this._height = h;
};
$hxClasses["haxe.ds.TreeNode"] = haxe.ds.TreeNode;
haxe.ds.TreeNode.__name__ = ["haxe","ds","TreeNode"];
haxe.ds.TreeNode.prototype = {
	left: null
	,right: null
	,key: null
	,value: null
	,_height: null
	,__class__: haxe.ds.TreeNode
};
haxe.ds.EnumValueMap = function() {
	haxe.ds.BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe.ds.EnumValueMap;
haxe.ds.EnumValueMap.__name__ = ["haxe","ds","EnumValueMap"];
haxe.ds.EnumValueMap.__interfaces__ = [IMap];
haxe.ds.EnumValueMap.__super__ = haxe.ds.BalancedTree;
haxe.ds.EnumValueMap.prototype = $extend(haxe.ds.BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1[1] - k2[1];
		if(d != 0) return d;
		var p1 = k1.slice(2);
		var p2 = k2.slice(2);
		if(p1.length == 0 && p2.length == 0) return 0;
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) return ld;
		var _g1 = 0;
		var _g = a1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) return d;
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) return this.compare(v1,v2); else if((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) return this.compareArgs(v1,v2); else return Reflect.compare(v1,v2);
	}
	,__class__: haxe.ds.EnumValueMap
});
haxe.ds.ObjectMap = function() {
	this.h = { };
	this.h.__keys__ = { };
};
$hxClasses["haxe.ds.ObjectMap"] = haxe.ds.ObjectMap;
haxe.ds.ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe.ds.ObjectMap.__interfaces__ = [IMap];
haxe.ds.ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe.ds.ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) return false;
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) a.push(this.h.__keys__[key]);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe.ds.ObjectMap
};
haxe.io = {};
haxe.io.Bytes = function(length,b) {
	this.length = length;
	this.b = b;
};
$hxClasses["haxe.io.Bytes"] = haxe.io.Bytes;
haxe.io.Bytes.__name__ = ["haxe","io","Bytes"];
haxe.io.Bytes.alloc = function(length) {
	var a = new Array();
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		a.push(0);
	}
	return new haxe.io.Bytes(length,a);
};
haxe.io.Bytes.ofString = function(s) {
	var a = new Array();
	var i = 0;
	while(i < s.length) {
		var c = StringTools.fastCodeAt(s,i++);
		if(55296 <= c && c <= 56319) c = c - 55232 << 10 | StringTools.fastCodeAt(s,i++) & 1023;
		if(c <= 127) a.push(c); else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe.io.Bytes(a.length,a);
};
haxe.io.Bytes.ofData = function(b) {
	return new haxe.io.Bytes(b.length,b);
};
haxe.io.Bytes.prototype = {
	length: null
	,b: null
	,get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) throw haxe.io.Error.OutsideBounds;
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) break;
				s += fcc(c);
			} else if(c < 224) s += fcc((c & 63) << 6 | b[i++] & 127); else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe.io.Bytes
};
haxe.io.Eof = function() { };
$hxClasses["haxe.io.Eof"] = haxe.io.Eof;
haxe.io.Eof.__name__ = ["haxe","io","Eof"];
haxe.io.Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe.io.Eof
};
haxe.io.Error = $hxClasses["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe.io.Error.Blocked = ["Blocked",0];
haxe.io.Error.Blocked.toString = $estr;
haxe.io.Error.Blocked.__enum__ = haxe.io.Error;
haxe.io.Error.Overflow = ["Overflow",1];
haxe.io.Error.Overflow.toString = $estr;
haxe.io.Error.Overflow.__enum__ = haxe.io.Error;
haxe.io.Error.OutsideBounds = ["OutsideBounds",2];
haxe.io.Error.OutsideBounds.toString = $estr;
haxe.io.Error.OutsideBounds.__enum__ = haxe.io.Error;
haxe.io.Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe.io.Error; $x.toString = $estr; return $x; };
haxe.io.Path = function(path) {
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else this.dir = null;
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe.io.Path;
haxe.io.Path.__name__ = ["haxe","io","Path"];
haxe.io.Path.withoutExtension = function(path) {
	var s = new haxe.io.Path(path);
	s.ext = null;
	return s.toString();
};
haxe.io.Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,toString: function() {
		return (this.dir == null?"":this.dir + (this.backslash?"\\":"/")) + this.file + (this.ext == null?"":"." + this.ext);
	}
	,__class__: haxe.io.Path
};
haxe.rtti = {};
haxe.rtti.Meta = function() { };
$hxClasses["haxe.rtti.Meta"] = haxe.rtti.Meta;
haxe.rtti.Meta.__name__ = ["haxe","rtti","Meta"];
haxe.rtti.Meta.getFields = function(t) {
	var meta = t.__meta__;
	if(meta == null || meta.fields == null) return { }; else return meta.fields;
};
haxe.xml = {};
haxe.xml._Fast = {};
haxe.xml._Fast.NodeAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.NodeAccess"] = haxe.xml._Fast.NodeAccess;
haxe.xml._Fast.NodeAccess.__name__ = ["haxe","xml","_Fast","NodeAccess"];
haxe.xml._Fast.NodeAccess.prototype = {
	__x: null
	,resolve: function(name) {
		var x = this.__x.elementsNamed(name).next();
		if(x == null) {
			var xname;
			if(this.__x.nodeType == Xml.Document) xname = "Document"; else xname = this.__x.get_nodeName();
			throw xname + " is missing element " + name;
		}
		return new haxe.xml.Fast(x);
	}
	,__class__: haxe.xml._Fast.NodeAccess
};
haxe.xml._Fast.AttribAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.AttribAccess"] = haxe.xml._Fast.AttribAccess;
haxe.xml._Fast.AttribAccess.__name__ = ["haxe","xml","_Fast","AttribAccess"];
haxe.xml._Fast.AttribAccess.prototype = {
	__x: null
	,resolve: function(name) {
		if(this.__x.nodeType == Xml.Document) throw "Cannot access document attribute " + name;
		var v = this.__x.get(name);
		if(v == null) throw this.__x.get_nodeName() + " is missing attribute " + name;
		return v;
	}
	,__class__: haxe.xml._Fast.AttribAccess
};
haxe.xml._Fast.HasAttribAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.HasAttribAccess"] = haxe.xml._Fast.HasAttribAccess;
haxe.xml._Fast.HasAttribAccess.__name__ = ["haxe","xml","_Fast","HasAttribAccess"];
haxe.xml._Fast.HasAttribAccess.prototype = {
	__x: null
	,resolve: function(name) {
		if(this.__x.nodeType == Xml.Document) throw "Cannot access document attribute " + name;
		return this.__x.exists(name);
	}
	,__class__: haxe.xml._Fast.HasAttribAccess
};
haxe.xml._Fast.HasNodeAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.HasNodeAccess"] = haxe.xml._Fast.HasNodeAccess;
haxe.xml._Fast.HasNodeAccess.__name__ = ["haxe","xml","_Fast","HasNodeAccess"];
haxe.xml._Fast.HasNodeAccess.prototype = {
	__x: null
	,__class__: haxe.xml._Fast.HasNodeAccess
};
haxe.xml._Fast.NodeListAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.NodeListAccess"] = haxe.xml._Fast.NodeListAccess;
haxe.xml._Fast.NodeListAccess.__name__ = ["haxe","xml","_Fast","NodeListAccess"];
haxe.xml._Fast.NodeListAccess.prototype = {
	__x: null
	,__class__: haxe.xml._Fast.NodeListAccess
};
haxe.xml.Fast = function(x) {
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) throw "Invalid nodeType " + Std.string(x.nodeType);
	this.x = x;
	this.node = new haxe.xml._Fast.NodeAccess(x);
	this.nodes = new haxe.xml._Fast.NodeListAccess(x);
	this.att = new haxe.xml._Fast.AttribAccess(x);
	this.has = new haxe.xml._Fast.HasAttribAccess(x);
	this.hasNode = new haxe.xml._Fast.HasNodeAccess(x);
};
$hxClasses["haxe.xml.Fast"] = haxe.xml.Fast;
haxe.xml.Fast.__name__ = ["haxe","xml","Fast"];
haxe.xml.Fast.prototype = {
	x: null
	,node: null
	,nodes: null
	,att: null
	,has: null
	,hasNode: null
	,get_name: function() {
		if(this.x.nodeType == Xml.Document) return "Document"; else return this.x.get_nodeName();
	}
	,get_elements: function() {
		var it = this.x.elements();
		return { hasNext : $bind(it,it.hasNext), next : function() {
			var x = it.next();
			if(x == null) return null;
			return new haxe.xml.Fast(x);
		}};
	}
	,__class__: haxe.xml.Fast
	,__properties__: {get_elements:"get_elements",get_name:"get_name"}
};
haxe.xml.Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe.xml.Parser;
haxe.xml.Parser.__name__ = ["haxe","xml","Parser"];
haxe.xml.Parser.parse = function(str) {
	var doc = Xml.createDocument();
	haxe.xml.Parser.doParse(str,0,doc);
	return doc;
};
haxe.xml.Parser.doParse = function(str,p,parent) {
	if(p == null) p = 0;
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	while(!(c != c)) {
		switch(state) {
		case 0:
			switch(c) {
			case 10:case 13:case 9:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			switch(c) {
			case 60:
				state = 0;
				next = 2;
				break;
			default:
				start = p;
				state = 13;
				continue;
			}
			break;
		case 13:
			if(c == 60) {
				var child = Xml.createPCData(buf.b + HxOverrides.substr(str,start,p - start));
				buf = new StringBuf();
				parent.addChild(child);
				nsubs++;
				state = 0;
				next = 2;
			} else if(c == 38) {
				buf.addSub(str,start,p - start);
				state = 18;
				next = 13;
				start = p + 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				nsubs++;
				p += 2;
				state = 1;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") throw "Expected <![CDATA[";
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") throw "Expected <!DOCTYPE";
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) throw "Expected <!--"; else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 63:
				state = 14;
				start = p;
				break;
			case 47:
				if(parent == null) throw "Expected node name";
				start = p + 1;
				state = 0;
				next = 10;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) throw "Expected node name";
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				nsubs++;
				break;
			case 62:
				state = 9;
				nsubs++;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) throw "Expected attribute name";
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) throw "Duplicate attribute";
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			switch(c) {
			case 61:
				state = 0;
				next = 7;
				break;
			default:
				throw "Expected =";
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				state = 8;
				start = p;
				break;
			default:
				throw "Expected \"";
			}
			break;
		case 8:
			if(c == str.charCodeAt(start)) {
				var val = HxOverrides.substr(str,start + 1,p - start - 1);
				xml.set(aname,val);
				state = 0;
				next = 4;
			}
			break;
		case 9:
			p = haxe.xml.Parser.doParse(str,p,xml);
			start = p;
			state = 1;
			break;
		case 11:
			switch(c) {
			case 62:
				state = 1;
				break;
			default:
				throw "Expected >";
			}
			break;
		case 12:
			switch(c) {
			case 62:
				if(nsubs == 0) parent.addChild(Xml.createPCData(""));
				return p;
			default:
				throw "Expected >";
			}
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) throw "Expected node name";
				var v = HxOverrides.substr(str,start,p - start);
				if(v != parent.get_nodeName()) throw "Expected </" + parent.get_nodeName() + ">";
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) nbrackets++; else if(c == 93) nbrackets--; else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				state = 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				p++;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var i;
					if(s.charCodeAt(1) == 120) i = Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)); else i = Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.add(String.fromCharCode(i));
				} else if(!haxe.xml.Parser.escapes.exists(s)) buf.b += Std.string("&" + s + ";"); else buf.add(haxe.xml.Parser.escapes.get(s));
				start = p + 1;
				state = next;
			}
			break;
		}
		c = StringTools.fastCodeAt(str,++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) parent.addChild(Xml.createPCData(buf.b + HxOverrides.substr(str,start,p - start)));
		return p;
	}
	throw "Unexpected end";
};
var js = {};
js._Boot = {};
js._Boot.HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) Error.captureStackTrace(this,js._Boot.HaxeError);
};
$hxClasses["js._Boot.HaxeError"] = js._Boot.HaxeError;
js._Boot.HaxeError.__name__ = ["js","_Boot","HaxeError"];
js._Boot.HaxeError.__super__ = Error;
js._Boot.HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js._Boot.HaxeError
});
js.Boot = function() { };
$hxClasses["js.Boot"] = js.Boot;
js.Boot.__name__ = ["js","Boot"];
js.Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js.Boot.__trace = function(v,i) {
	var msg;
	if(i != null) msg = i.fileName + ":" + i.lineNumber + ": "; else msg = "";
	msg += js.Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js.Boot.__string_rec(v1,"");
		}
	}
	var d;
	if(typeof(document) != "undefined" && (d = document.getElementById("haxe:trace")) != null) d.innerHTML += js.Boot.__unhtml(msg) + "<br/>"; else if(typeof console != "undefined" && console.log != null) console.log(msg);
};
js.Boot.__clear_trace = function() {
	var d = document.getElementById("haxe:trace");
	if(d != null) d.innerHTML = "";
};
js.Boot.isClass = function(o) {
	return o.__name__;
};
js.Boot.isEnum = function(e) {
	return e.__ename__;
};
js.Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) return Array; else {
		var cl = o.__class__;
		if(cl != null) return cl;
		var name = js.Boot.__nativeClassName(o);
		if(name != null) return js.Boot.__resolveNativeClass(name);
		return null;
	}
};
js.Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) str += "," + js.Boot.__string_rec(o[i],s); else str += js.Boot.__string_rec(o[i],s);
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g2 = 0;
			while(_g2 < l) {
				var i2 = _g2++;
				str1 += (i2 > 0?",":"") + js.Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) str2 += ", \n";
		str2 += s + k + " : " + js.Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
js.Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js.Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js.Boot.__interfLoop(cc.__super__,cl);
};
js.Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Array:
		return (o instanceof Array) && o.__enum__ == null;
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) return true;
				if(js.Boot.__interfLoop(js.Boot.getClass(o),cl)) return true;
			} else if(typeof(cl) == "object" && js.Boot.__isNativeObj(cl)) {
				if(o instanceof cl) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
};
js.Boot.__cast = function(o,t) {
	if(js.Boot.__instanceof(o,t)) return o; else throw "Cannot cast " + Std.string(o) + " to " + Std.string(t);
};
js.Boot.__nativeClassName = function(o) {
	var name = js.Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") return null;
	return name;
};
js.Boot.__isNativeObj = function(o) {
	return js.Boot.__nativeClassName(o) != null;
};
js.Boot.__resolveNativeClass = function(name) {
	if(typeof window != "undefined") return window[name]; else return global[name];
};
lime.AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe.ds.StringMap();
	this.font = new haxe.ds.StringMap();
	this.image = new haxe.ds.StringMap();
};
$hxClasses["lime.AssetCache"] = lime.AssetCache;
lime.AssetCache.__name__ = ["lime","AssetCache"];
lime.AssetCache.prototype = {
	audio: null
	,enabled: null
	,image: null
	,font: null
	,clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe.ds.StringMap();
			this.font = new haxe.ds.StringMap();
			this.image = new haxe.ds.StringMap();
		} else {
			var keys = this.audio.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.audio.remove(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.font.remove(key1);
			}
			var keys2 = this.image.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.image.remove(key2);
			}
		}
	}
	,__class__: lime.AssetCache
};
lime.Assets = function() { };
$hxClasses["lime.Assets"] = lime.Assets;
lime.Assets.__name__ = ["lime","Assets"];
lime.Assets.exists = function(id,type) {
	lime.Assets.initialize();
	if(type == null) type = "BINARY";
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) return library.exists(symbolName,type);
	return false;
};
lime.Assets.getAudioBuffer = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime.Assets.initialize();
	if(useCache && lime.Assets.cache.enabled && lime.Assets.cache.audio.exists(id)) {
		var audio = lime.Assets.cache.audio.get(id);
		if(lime.Assets.isValidAudio(audio)) return audio;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"SOUND")) {
			if(library.isLocal(symbolName,"SOUND")) {
				var audio1 = library.getAudioBuffer(symbolName);
				if(useCache && lime.Assets.cache.enabled) lime.Assets.cache.audio.set(id,audio1);
				return audio1;
			} else haxe.Log.trace("[Assets] Audio asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 115, className : "lime.Assets", methodName : "getAudioBuffer"});
		} else haxe.Log.trace("[Assets] There is no audio asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 121, className : "lime.Assets", methodName : "getAudioBuffer"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 127, className : "lime.Assets", methodName : "getAudioBuffer"});
	return null;
};
lime.Assets.getBytes = function(id) {
	lime.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			if(library.isLocal(symbolName,"BINARY")) return library.getBytes(symbolName); else haxe.Log.trace("[Assets] String or ByteArray asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 164, className : "lime.Assets", methodName : "getBytes"});
		} else haxe.Log.trace("[Assets] There is no String or ByteArray asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 170, className : "lime.Assets", methodName : "getBytes"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 176, className : "lime.Assets", methodName : "getBytes"});
	return null;
};
lime.Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime.Assets.initialize();
	if(useCache && lime.Assets.cache.enabled && lime.Assets.cache.font.exists(id)) return lime.Assets.cache.font.get(id);
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) {
			if(library.isLocal(symbolName,"FONT")) {
				var font = library.getFont(symbolName);
				if(useCache && lime.Assets.cache.enabled) lime.Assets.cache.font.set(id,font);
				return font;
			} else haxe.Log.trace("[Assets] Font asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 227, className : "lime.Assets", methodName : "getFont"});
		} else haxe.Log.trace("[Assets] There is no Font asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 233, className : "lime.Assets", methodName : "getFont"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 239, className : "lime.Assets", methodName : "getFont"});
	return null;
};
lime.Assets.getImage = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime.Assets.initialize();
	if(useCache && lime.Assets.cache.enabled && lime.Assets.cache.image.exists(id)) {
		var image = lime.Assets.cache.image.get(id);
		if(lime.Assets.isValidImage(image)) return image;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			if(library.isLocal(symbolName,"IMAGE")) {
				var image1 = library.getImage(symbolName);
				if(useCache && lime.Assets.cache.enabled) lime.Assets.cache.image.set(id,image1);
				return image1;
			} else haxe.Log.trace("[Assets] Image asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 297, className : "lime.Assets", methodName : "getImage"});
		} else haxe.Log.trace("[Assets] There is no Image asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 303, className : "lime.Assets", methodName : "getImage"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 309, className : "lime.Assets", methodName : "getImage"});
	return null;
};
lime.Assets.getLibrary = function(name) {
	if(name == null || name == "") name = "default";
	return lime.Assets.libraries.get(name);
};
lime.Assets.getPath = function(id) {
	lime.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,null)) return library.getPath(symbolName); else haxe.Log.trace("[Assets] There is no asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 426, className : "lime.Assets", methodName : "getPath"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 432, className : "lime.Assets", methodName : "getPath"});
	return null;
};
lime.Assets.getText = function(id) {
	lime.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) {
			if(library.isLocal(symbolName,"TEXT")) return library.getText(symbolName); else haxe.Log.trace("[Assets] String asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 469, className : "lime.Assets", methodName : "getText"});
		} else haxe.Log.trace("[Assets] There is no String asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 475, className : "lime.Assets", methodName : "getText"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 481, className : "lime.Assets", methodName : "getText"});
	return null;
};
lime.Assets.initialize = function() {
	if(!lime.Assets.initialized) {
		lime.Assets.registerLibrary("default",new DefaultAssetLibrary());
		lime.Assets.initialized = true;
	}
};
lime.Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) useCache = true;
	lime.Assets.initialize();
	if(useCache && lime.Assets.cache.enabled) {
		if(type == "IMAGE" || type == null) {
			if(lime.Assets.cache.image.exists(id)) return true;
		}
		if(type == "FONT" || type == null) {
			if(lime.Assets.cache.font.exists(id)) return true;
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(lime.Assets.cache.audio.exists(id)) return true;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) return library.isLocal(symbolName,type);
	return false;
};
lime.Assets.isValidAudio = function(buffer) {
	return buffer != null;
	return true;
};
lime.Assets.isValidImage = function(buffer) {
	return true;
};
lime.Assets.list = function(type) {
	lime.Assets.initialize();
	var items = [];
	var $it0 = lime.Assets.libraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var libraryItems = library.list(type);
		if(libraryItems != null) items = items.concat(libraryItems);
	}
	return items;
};
lime.Assets.loadAudioBuffer = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	lime.Assets.initialize();
	if(useCache && lime.Assets.cache.enabled && lime.Assets.cache.audio.exists(id)) {
		var audio = lime.Assets.cache.audio.get(id);
		if(lime.Assets.isValidAudio(audio)) {
			handler(audio);
			return;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"SOUND")) {
			if(useCache && lime.Assets.cache.enabled) library.loadAudioBuffer(symbolName,function(audio1) {
				var value = audio1;
				lime.Assets.cache.audio.set(id,value);
				handler(audio1);
			}); else library.loadAudioBuffer(symbolName,handler);
			return;
		} else haxe.Log.trace("[Assets] There is no audio asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 666, className : "lime.Assets", methodName : "loadAudioBuffer"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 672, className : "lime.Assets", methodName : "loadAudioBuffer"});
	handler(null);
};
lime.Assets.loadBytes = function(id,handler) {
	lime.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			library.loadBytes(symbolName,handler);
			return;
		} else haxe.Log.trace("[Assets] There is no String or ByteArray asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 702, className : "lime.Assets", methodName : "loadBytes"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 708, className : "lime.Assets", methodName : "loadBytes"});
	handler(null);
};
lime.Assets.loadImage = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	lime.Assets.initialize();
	if(useCache && lime.Assets.cache.enabled && lime.Assets.cache.image.exists(id)) {
		var image = lime.Assets.cache.image.get(id);
		if(lime.Assets.isValidImage(image)) {
			handler(image);
			return;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			if(useCache && lime.Assets.cache.enabled) library.loadImage(symbolName,function(image1) {
				lime.Assets.cache.image.set(id,image1);
				handler(image1);
			}); else library.loadImage(symbolName,handler);
			return;
		} else haxe.Log.trace("[Assets] There is no Image asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 765, className : "lime.Assets", methodName : "loadImage"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 771, className : "lime.Assets", methodName : "loadImage"});
	handler(null);
};
lime.Assets.loadLibrary = function(name,handler) {
	lime.Assets.initialize();
	var data = lime.Assets.getText("libraries/" + name + ".json");
	if(data != null && data != "") {
		var info = JSON.parse(data);
		var library = Type.createInstance(Type.resolveClass(info.type),info.args);
		lime.Assets.libraries.set(name,library);
		library.eventCallback = lime.Assets.library_onEvent;
		library.load(handler);
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + name + "\"",{ fileName : "Assets.hx", lineNumber : 800, className : "lime.Assets", methodName : "loadLibrary"});
};
lime.Assets.loadText = function(id,handler) {
	lime.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) {
			library.loadText(symbolName,handler);
			return;
		} else haxe.Log.trace("[Assets] There is no String asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 891, className : "lime.Assets", methodName : "loadText"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 897, className : "lime.Assets", methodName : "loadText"});
	handler(null);
};
lime.Assets.registerLibrary = function(name,library) {
	if(lime.Assets.libraries.exists(name)) lime.Assets.unloadLibrary(name);
	if(library != null) library.eventCallback = lime.Assets.library_onEvent;
	lime.Assets.libraries.set(name,library);
};
lime.Assets.unloadLibrary = function(name) {
	lime.Assets.initialize();
	var library = lime.Assets.libraries.get(name);
	if(library != null) {
		lime.Assets.cache.clear(name + ":");
		library.eventCallback = null;
	}
	lime.Assets.libraries.remove(name);
};
lime.Assets.library_onEvent = function(library,type) {
	if(type == "change") lime.Assets.cache.clear();
};
lime._Assets = {};
lime._Assets.AssetType_Impl_ = function() { };
$hxClasses["lime._Assets.AssetType_Impl_"] = lime._Assets.AssetType_Impl_;
lime._Assets.AssetType_Impl_.__name__ = ["lime","_Assets","AssetType_Impl_"];
lime._backend = {};
lime._backend.html5 = {};
lime._backend.html5.HTML5Application = function(parent) {
	this.parent = parent;
	lime.audio.AudioManager.init();
};
$hxClasses["lime._backend.html5.HTML5Application"] = lime._backend.html5.HTML5Application;
lime._backend.html5.HTML5Application.__name__ = ["lime","_backend","html5","HTML5Application"];
lime._backend.html5.HTML5Application.prototype = {
	cacheTime: null
	,parent: null
	,convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) return keyCode + 32;
		switch(keyCode) {
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 20:
			return 1073741881;
		case 144:
			return 1073741907;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 36:
			return 1073741898;
		case 35:
			return 1073741901;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		}
		return keyCode;
	}
	,create: function(config) {
		this.parent.config = config;
		if(config != null) {
			var $window = new lime.ui.Window(config);
			var renderer = new lime.graphics.Renderer($window);
			this.parent.addWindow($window);
			this.parent.addRenderer(renderer);
			this.parent.init(renderer.context);
		}
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		
			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] 
										   || window[vendors[x]+'CancelRequestAnimationFrame'];
			}
			
			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); }, 
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};
			
			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};
			
			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.cacheTime = new Date().getTime();
		this.handleUpdateEvent();
		return 0;
	}
	,handleKeyEvent: function(event) {
		if(this.parent.windows[0] != null) {
			var _g = event.keyCode;
			switch(_g) {
			case 32:case 37:case 38:case 39:case 40:
				event.preventDefault();
				break;
			}
			var keyCode = this.convertKeyCode(event.keyCode != null?event.keyCode:event.which);
			var modifier;
			modifier = (event.shiftKey?3:0) | (event.ctrlKey?192:0) | (event.altKey?768:0) | (event.metaKey?3072:0);
			if(event.type == "keydown") {
				var listeners = this.parent.windows[0].onKeyDown.listeners;
				var repeat = this.parent.windows[0].onKeyDown.repeat;
				var length = listeners.length;
				var i = 0;
				while(i < length) {
					listeners[i](keyCode,modifier);
					if(!repeat[i]) {
						this.parent.windows[0].onKeyDown.remove(listeners[i]);
						length--;
					} else i++;
				}
			} else {
				var listeners1 = this.parent.windows[0].onKeyUp.listeners;
				var repeat1 = this.parent.windows[0].onKeyUp.repeat;
				var length1 = listeners1.length;
				var i1 = 0;
				while(i1 < length1) {
					listeners1[i1](keyCode,modifier);
					if(!repeat1[i1]) {
						this.parent.windows[0].onKeyUp.remove(listeners1[i1]);
						length1--;
					} else i1++;
				}
			}
		}
	}
	,handleUpdateEvent: function(__) {
		var currentTime = new Date().getTime();
		var deltaTime = currentTime - this.cacheTime;
		this.cacheTime = currentTime;
		var listeners = this.parent.onUpdate.listeners;
		var repeat = this.parent.onUpdate.repeat;
		var length = listeners.length;
		var i = 0;
		while(i < length) {
			listeners[i](deltaTime | 0);
			if(!repeat[i]) {
				this.parent.onUpdate.remove(listeners[i]);
				length--;
			} else i++;
		}
		if(this.parent.renderers[0] != null) {
			var listeners1 = this.parent.renderers[0].onRender.listeners;
			var repeat1 = this.parent.renderers[0].onRender.repeat;
			var length1 = listeners1.length;
			var i1 = 0;
			while(i1 < length1) {
				listeners1[i1](this.parent.renderers[0].context);
				if(!repeat1[i1]) {
					this.parent.renderers[0].onRender.remove(listeners1[i1]);
					length1--;
				} else i1++;
			}
			this.parent.renderers[0].flip();
		}
		window.requestAnimationFrame($bind(this,this.handleUpdateEvent));
	}
	,handleWindowEvent: function(event) {
		if(this.parent.windows[0] != null) {
			var _g = event.type;
			switch(_g) {
			case "focus":
				var listeners = this.parent.windows[0].onWindowFocusIn.listeners;
				var repeat = this.parent.windows[0].onWindowFocusIn.repeat;
				var length = listeners.length;
				var i = 0;
				while(i < length) {
					listeners[i]();
					if(!repeat[i]) {
						this.parent.windows[0].onWindowFocusIn.remove(listeners[i]);
						length--;
					} else i++;
				}
				var listeners1 = this.parent.windows[0].onWindowActivate.listeners;
				var repeat1 = this.parent.windows[0].onWindowActivate.repeat;
				var length1 = listeners1.length;
				var i1 = 0;
				while(i1 < length1) {
					listeners1[i1]();
					if(!repeat1[i1]) {
						this.parent.windows[0].onWindowActivate.remove(listeners1[i1]);
						length1--;
					} else i1++;
				}
				break;
			case "blur":
				var listeners2 = this.parent.windows[0].onWindowFocusOut.listeners;
				var repeat2 = this.parent.windows[0].onWindowFocusOut.repeat;
				var length2 = listeners2.length;
				var i2 = 0;
				while(i2 < length2) {
					listeners2[i2]();
					if(!repeat2[i2]) {
						this.parent.windows[0].onWindowFocusOut.remove(listeners2[i2]);
						length2--;
					} else i2++;
				}
				var listeners3 = this.parent.windows[0].onWindowDeactivate.listeners;
				var repeat3 = this.parent.windows[0].onWindowDeactivate.repeat;
				var length3 = listeners3.length;
				var i3 = 0;
				while(i3 < length3) {
					listeners3[i3]();
					if(!repeat3[i3]) {
						this.parent.windows[0].onWindowDeactivate.remove(listeners3[i3]);
						length3--;
					} else i3++;
				}
				break;
			case "resize":
				var cacheWidth = this.parent.windows[0].__width;
				var cacheHeight = this.parent.windows[0].__height;
				this.parent.windows[0].backend.handleResize();
				if(this.parent.windows[0].__width != cacheWidth || this.parent.windows[0].__height != cacheHeight) {
					var listeners4 = this.parent.windows[0].onWindowResize.listeners;
					var repeat4 = this.parent.windows[0].onWindowResize.repeat;
					var length4 = listeners4.length;
					var i4 = 0;
					while(i4 < length4) {
						listeners4[i4](this.parent.windows[0].__width,this.parent.windows[0].__height);
						if(!repeat4[i4]) {
							this.parent.windows[0].onWindowResize.remove(listeners4[i4]);
							length4--;
						} else i4++;
					}
				}
				break;
			case "beforeunload":
				var listeners5 = this.parent.windows[0].onWindowClose.listeners;
				var repeat5 = this.parent.windows[0].onWindowClose.repeat;
				var length5 = listeners5.length;
				var i5 = 0;
				while(i5 < length5) {
					listeners5[i5]();
					if(!repeat5[i5]) {
						this.parent.windows[0].onWindowClose.remove(listeners5[i5]);
						length5--;
					} else i5++;
				}
				break;
			}
		}
	}
	,__class__: lime._backend.html5.HTML5Application
};
lime._backend.html5.HTML5Mouse = function() { };
$hxClasses["lime._backend.html5.HTML5Mouse"] = lime._backend.html5.HTML5Mouse;
lime._backend.html5.HTML5Mouse.__name__ = ["lime","_backend","html5","HTML5Mouse"];
lime._backend.html5.HTML5Mouse.__cursor = null;
lime._backend.html5.HTML5Mouse.__hidden = null;
lime._backend.html5.HTML5Mouse.hide = function() {
	if(!lime._backend.html5.HTML5Mouse.__hidden) {
		lime._backend.html5.HTML5Mouse.__hidden = true;
		var _g = 0;
		var _g1 = lime.app.Application.current.windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.backend.element.style.cursor = "none";
		}
	}
};
lime._backend.html5.HTML5Mouse.show = function() {
	if(lime._backend.html5.HTML5Mouse.__hidden) {
		lime._backend.html5.HTML5Mouse.__hidden = false;
		var cacheValue = lime._backend.html5.HTML5Mouse.__cursor;
		lime._backend.html5.HTML5Mouse.__cursor = null;
		lime._backend.html5.HTML5Mouse.set_cursor(cacheValue);
	}
};
lime._backend.html5.HTML5Mouse.warp = function(x,y,window) {
};
lime._backend.html5.HTML5Mouse.get_cursor = function() {
	if(lime._backend.html5.HTML5Mouse.__cursor == null) return lime.ui.MouseCursor.DEFAULT;
	return lime._backend.html5.HTML5Mouse.__cursor;
};
lime._backend.html5.HTML5Mouse.set_cursor = function(value) {
	if(lime._backend.html5.HTML5Mouse.__cursor != value) {
		if(!lime._backend.html5.HTML5Mouse.__hidden) {
			var _g = 0;
			var _g1 = lime.app.Application.current.windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				switch(value[1]) {
				case 0:
					$window.backend.element.style.cursor = "default";
					break;
				case 1:
					$window.backend.element.style.cursor = "crosshair";
					break;
				case 3:
					$window.backend.element.style.cursor = "move";
					break;
				case 4:
					$window.backend.element.style.cursor = "pointer";
					break;
				case 5:
					$window.backend.element.style.cursor = "nesw-resize";
					break;
				case 6:
					$window.backend.element.style.cursor = "ns-resize";
					break;
				case 7:
					$window.backend.element.style.cursor = "nwse-resize";
					break;
				case 8:
					$window.backend.element.style.cursor = "ew-resize";
					break;
				case 9:
					$window.backend.element.style.cursor = "text";
					break;
				case 10:
					$window.backend.element.style.cursor = "wait";
					break;
				case 11:
					$window.backend.element.style.cursor = "wait";
					break;
				default:
					$window.backend.element.style.cursor = "auto";
				}
			}
		}
		lime._backend.html5.HTML5Mouse.__cursor = value;
	}
	return lime._backend.html5.HTML5Mouse.__cursor;
};
lime._backend.html5.HTML5Mouse.get_lock = function() {
	return false;
};
lime._backend.html5.HTML5Mouse.set_lock = function(value) {
	return value;
};
lime._backend.html5.HTML5Renderer = function(parent) {
	this.parent = parent;
};
$hxClasses["lime._backend.html5.HTML5Renderer"] = lime._backend.html5.HTML5Renderer;
lime._backend.html5.HTML5Renderer.__name__ = ["lime","_backend","html5","HTML5Renderer"];
lime._backend.html5.HTML5Renderer.prototype = {
	parent: null
	,create: function() {
		this.createContext();
		{
			var _g = this.parent.context;
			switch(_g[1]) {
			case 0:
				this.parent.window.backend.canvas.addEventListener("webglcontextlost",$bind(this,this.handleEvent),false);
				this.parent.window.backend.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleEvent),false);
				break;
			default:
			}
		}
	}
	,createContext: function() {
		if(this.parent.window.backend.div != null) this.parent.context = lime.graphics.RenderContext.DOM(this.parent.window.backend.div); else if(this.parent.window.backend.canvas != null) {
			var webgl = null;
			if(webgl == null) this.parent.context = lime.graphics.RenderContext.CANVAS(this.parent.window.backend.canvas.getContext("2d")); else {
				lime.graphics.opengl.GL.context = webgl;
				this.parent.context = lime.graphics.RenderContext.OPENGL(lime.graphics.opengl.GL.context);
			}
		}
	}
	,flip: function() {
	}
	,handleEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "webglcontextlost":
			event.preventDefault();
			this.parent.context = null;
			var listeners = this.parent.onRenderContextLost.listeners;
			var repeat = this.parent.onRenderContextLost.repeat;
			var length = listeners.length;
			var i = 0;
			while(i < length) {
				listeners[i]();
				if(!repeat[i]) {
					this.parent.onRenderContextLost.remove(listeners[i]);
					length--;
				} else i++;
			}
			break;
		case "webglcontextrestored":
			this.createContext();
			var listeners1 = this.parent.onRenderContextRestored.listeners;
			var repeat1 = this.parent.onRenderContextRestored.repeat;
			var length1 = listeners1.length;
			var i1 = 0;
			while(i1 < length1) {
				listeners1[i1](this.parent.context);
				if(!repeat1[i1]) {
					this.parent.onRenderContextRestored.remove(listeners1[i1]);
					length1--;
				} else i1++;
			}
			break;
		default:
		}
	}
	,render: function() {
	}
	,__class__: lime._backend.html5.HTML5Renderer
};
lime._backend.html5.HTML5Window = function(parent) {
	this.parent = parent;
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"element")) this.element = parent.config.element;
};
$hxClasses["lime._backend.html5.HTML5Window"] = lime._backend.html5.HTML5Window;
lime._backend.html5.HTML5Window.__name__ = ["lime","_backend","html5","HTML5Window"];
lime._backend.html5.HTML5Window.prototype = {
	canvas: null
	,div: null
	,element: null
	,parent: null
	,setHeight: null
	,setWidth: null
	,close: function() {
	}
	,create: function(application) {
		this.setWidth = this.parent.__width;
		this.setHeight = this.parent.__height;
		if(js.Boot.__instanceof(this.element,HTMLCanvasElement)) this.canvas = this.element; else this.div = window.document.createElement("div");
		if(this.canvas != null) {
			var style = this.canvas.style;
			style.setProperty("-webkit-transform","translateZ(0)",null);
			style.setProperty("transform","translateZ(0)",null);
		} else if(this.div != null) {
			var style1 = this.div.style;
			style1.setProperty("-webkit-transform","translate3D(0,0,0)",null);
			style1.setProperty("transform","translate3D(0,0,0)",null);
			style1.position = "relative";
			style1.overflow = "hidden";
			style1.setProperty("-webkit-user-select","none",null);
			style1.setProperty("-moz-user-select","none",null);
			style1.setProperty("-ms-user-select","none",null);
			style1.setProperty("-o-user-select","none",null);
		}
		if(this.parent.__width == 0 && this.parent.__height == 0) {
			if(this.element != null) {
				this.parent.set_width(this.element.clientWidth);
				this.parent.set_height(this.element.clientHeight);
			} else {
				this.parent.set_width(window.innerWidth);
				this.parent.set_height(window.innerHeight);
			}
			this.parent.set_fullscreen(true);
		}
		if(this.canvas != null) {
			this.canvas.width = this.parent.__width;
			this.canvas.height = this.parent.__height;
		} else {
			this.div.style.width = this.parent.__width + "px";
			this.div.style.height = this.parent.__height + "px";
		}
		this.handleResize();
		if(this.element != null) {
			if(this.canvas != null) {
				if(this.element != this.canvas) this.element.appendChild(this.canvas);
			} else this.element.appendChild(this.div);
			var events = ["mousedown","mousemove","mouseup","wheel"];
			var _g = 0;
			while(_g < events.length) {
				var event = events[_g];
				++_g;
				this.element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
			}
			window.document.addEventListener("dragstart",function(e) {
				if(e.target.nodeName.toLowerCase() == "img") {
					e.preventDefault();
					return false;
				}
				return true;
			},false);
			this.element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect1 = this.div.getBoundingClientRect();
					x = event.clientX - rect1.left;
					y = event.clientY - rect1.top;
				} else {
					var rect2 = this.element.getBoundingClientRect();
					x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
					y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			var _g = event.type;
			switch(_g) {
			case "mousedown":
				var listeners = this.parent.onMouseDown.listeners;
				var repeat = this.parent.onMouseDown.repeat;
				var length = listeners.length;
				var i = 0;
				while(i < length) {
					listeners[i](x,y,event.button);
					if(!repeat[i]) {
						this.parent.onMouseDown.remove(listeners[i]);
						length--;
					} else i++;
				}
				break;
			case "mouseup":
				var listeners1 = this.parent.onMouseUp.listeners;
				var repeat1 = this.parent.onMouseUp.repeat;
				var length1 = listeners1.length;
				var i1 = 0;
				while(i1 < length1) {
					listeners1[i1](x,y,event.button);
					if(!repeat1[i1]) {
						this.parent.onMouseUp.remove(listeners1[i1]);
						length1--;
					} else i1++;
				}
				break;
			case "mousemove":
				var listeners2 = this.parent.onMouseMove.listeners;
				var repeat2 = this.parent.onMouseMove.repeat;
				var length2 = listeners2.length;
				var i2 = 0;
				while(i2 < length2) {
					listeners2[i2](x,y);
					if(!repeat2[i2]) {
						this.parent.onMouseMove.remove(listeners2[i2]);
						length2--;
					} else i2++;
				}
				break;
			default:
			}
		} else {
			var listeners3 = this.parent.onMouseWheel.listeners;
			var repeat3 = this.parent.onMouseWheel.repeat;
			var length3 = listeners3.length;
			var i3 = 0;
			while(i3 < length3) {
				listeners3[i3](event.deltaX,-event.deltaY);
				if(!repeat3[i3]) {
					this.parent.onMouseWheel.remove(listeners3[i3]);
					length3--;
				} else i3++;
			}
		}
	}
	,handleResize: function() {
		var stretch = this.parent.__fullscreen || this.setWidth == 0 && this.setHeight == 0;
		if(this.element != null && (this.div == null || this.div != null && stretch)) {
			if(stretch) {
				if(this.parent.__width != this.element.clientWidth || this.parent.__height != this.element.clientHeight) {
					this.parent.set_width(this.element.clientWidth);
					this.parent.set_height(this.element.clientHeight);
					if(this.canvas != null) {
						if(this.element != this.canvas) {
							this.canvas.width = this.element.clientWidth;
							this.canvas.height = this.element.clientHeight;
						}
					} else {
						this.div.style.width = this.element.clientWidth + "px";
						this.div.style.height = this.element.clientHeight + "px";
					}
				}
			} else {
				var scaleX = this.element.clientWidth / this.setWidth;
				var scaleY = this.element.clientHeight / this.setHeight;
				var currentRatio = scaleX / scaleY;
				var targetRatio = Math.min(scaleX,scaleY);
				if(this.canvas != null) {
					if(this.element != this.canvas) {
						this.canvas.style.width = this.setWidth * targetRatio + "px";
						this.canvas.style.height = this.setHeight * targetRatio + "px";
						this.canvas.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
						this.canvas.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
					}
				} else {
					this.div.style.width = this.setWidth * targetRatio + "px";
					this.div.style.height = this.setHeight * targetRatio + "px";
					this.div.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
					this.div.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
				}
			}
		}
	}
	,handleTouchEvent: function(event) {
		event.preventDefault();
		var touch = event.changedTouches[0];
		var id = touch.identifier;
		var x = 0.0;
		var y = 0.0;
		if(this.element != null) {
			if(this.canvas != null) {
				var rect = this.canvas.getBoundingClientRect();
				x = (touch.clientX - rect.left) * (this.parent.__width / rect.width);
				y = (touch.clientY - rect.top) * (this.parent.__height / rect.height);
			} else if(this.div != null) {
				var rect1 = this.div.getBoundingClientRect();
				x = touch.clientX - rect1.left;
				y = touch.clientY - rect1.top;
			} else {
				var rect2 = this.element.getBoundingClientRect();
				x = (touch.clientX - rect2.left) * (this.parent.__width / rect2.width);
				y = (touch.clientY - rect2.top) * (this.parent.__height / rect2.height);
			}
		} else {
			x = touch.clientX;
			y = touch.clientY;
		}
		var _g = event.type;
		switch(_g) {
		case "touchstart":
			var listeners = this.parent.onTouchStart.listeners;
			var repeat = this.parent.onTouchStart.repeat;
			var length = listeners.length;
			var i = 0;
			while(i < length) {
				listeners[i](x,y,id);
				if(!repeat[i]) {
					this.parent.onTouchStart.remove(listeners[i]);
					length--;
				} else i++;
			}
			break;
		case "touchmove":
			var listeners1 = this.parent.onTouchMove.listeners;
			var repeat1 = this.parent.onTouchMove.repeat;
			var length1 = listeners1.length;
			var i1 = 0;
			while(i1 < length1) {
				listeners1[i1](x,y,id);
				if(!repeat1[i1]) {
					this.parent.onTouchMove.remove(listeners1[i1]);
					length1--;
				} else i1++;
			}
			break;
		case "touchend":
			var listeners2 = this.parent.onTouchEnd.listeners;
			var repeat2 = this.parent.onTouchEnd.repeat;
			var length2 = listeners2.length;
			var i2 = 0;
			while(i2 < length2) {
				listeners2[i2](x,y,id);
				if(!repeat2[i2]) {
					this.parent.onTouchEnd.remove(listeners2[i2]);
					length2--;
				} else i2++;
			}
			break;
		default:
		}
	}
	,move: function(x,y) {
	}
	,resize: function(width,height) {
	}
	,setFullscreen: function(value) {
		return false;
	}
	,setIcon: function(image) {
	}
	,setMinimized: function(value) {
		return false;
	}
	,__class__: lime._backend.html5.HTML5Window
};
lime.app = {};
lime.app.IModule = function() { };
$hxClasses["lime.app.IModule"] = lime.app.IModule;
lime.app.IModule.__name__ = ["lime","app","IModule"];
lime.app.IModule.prototype = {
	init: null
	,onGamepadAxisMove: null
	,onGamepadButtonDown: null
	,onGamepadButtonUp: null
	,onGamepadConnect: null
	,onGamepadDisconnect: null
	,onKeyDown: null
	,onKeyUp: null
	,onMouseDown: null
	,onMouseMove: null
	,onMouseMoveRelative: null
	,onMouseUp: null
	,onMouseWheel: null
	,onRenderContextLost: null
	,onRenderContextRestored: null
	,onTouchEnd: null
	,onTouchMove: null
	,onTouchStart: null
	,onWindowActivate: null
	,onWindowClose: null
	,onWindowDeactivate: null
	,onWindowFocusIn: null
	,onWindowFocusOut: null
	,onWindowFullscreen: null
	,onWindowMove: null
	,onWindowMinimize: null
	,onWindowResize: null
	,onWindowRestore: null
	,render: null
	,update: null
	,__class__: lime.app.IModule
};
lime.app.Module = function() {
};
$hxClasses["lime.app.Module"] = lime.app.Module;
lime.app.Module.__name__ = ["lime","app","Module"];
lime.app.Module.__interfaces__ = [lime.app.IModule];
lime.app.Module.prototype = {
	init: function(context) {
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onKeyDown: function(keyCode,modifier) {
	}
	,onKeyUp: function(keyCode,modifier) {
	}
	,onMouseDown: function(x,y,button) {
	}
	,onMouseMove: function(x,y) {
	}
	,onMouseMoveRelative: function(x,y) {
	}
	,onMouseUp: function(x,y,button) {
	}
	,onMouseWheel: function(deltaX,deltaY) {
	}
	,onRenderContextLost: function() {
	}
	,onRenderContextRestored: function(context) {
	}
	,onTouchEnd: function(x,y,id) {
	}
	,onTouchMove: function(x,y,id) {
	}
	,onTouchStart: function(x,y,id) {
	}
	,onWindowActivate: function() {
	}
	,onWindowClose: function() {
	}
	,onWindowDeactivate: function() {
	}
	,onWindowFocusIn: function() {
	}
	,onWindowFocusOut: function() {
	}
	,onWindowFullscreen: function() {
	}
	,onWindowMinimize: function() {
	}
	,onWindowMove: function(x,y) {
	}
	,onWindowResize: function(width,height) {
	}
	,onWindowRestore: function() {
	}
	,render: function(context) {
	}
	,update: function(deltaTime) {
	}
	,__class__: lime.app.Module
};
lime.app.Application = function() {
	this.onUpdate = new lime.app.Event();
	lime.app.Module.call(this);
	if(lime.app.Application.current == null) lime.app.Application.current = this;
	this.modules = new Array();
	this.renderers = new Array();
	this.windows = new Array();
	this.backend = new lime._backend.html5.HTML5Application(this);
	this.onUpdate.add($bind(this,this.update));
};
$hxClasses["lime.app.Application"] = lime.app.Application;
lime.app.Application.__name__ = ["lime","app","Application"];
lime.app.Application.current = null;
lime.app.Application.__super__ = lime.app.Module;
lime.app.Application.prototype = $extend(lime.app.Module.prototype,{
	config: null
	,modules: null
	,onUpdate: null
	,renderer: null
	,renderers: null
	,window: null
	,windows: null
	,backend: null
	,initialized: null
	,addModule: function(module) {
		this.modules.push(module);
		if(this.initialized && this.renderers[0] != null) module.init(this.renderers[0].context);
	}
	,addRenderer: function(renderer) {
		renderer.onRender.add($bind(this,this.render));
		renderer.onRenderContextLost.add($bind(this,this.onRenderContextLost));
		renderer.onRenderContextRestored.add($bind(this,this.onRenderContextRestored));
		this.renderers.push(renderer);
	}
	,addWindow: function(window) {
		this.windows.push(window);
		window.onGamepadAxisMove.add($bind(this,this.onGamepadAxisMove));
		window.onGamepadButtonDown.add($bind(this,this.onGamepadButtonDown));
		window.onGamepadButtonUp.add($bind(this,this.onGamepadButtonUp));
		window.onGamepadConnect.add($bind(this,this.onGamepadConnect));
		window.onGamepadDisconnect.add($bind(this,this.onGamepadDisconnect));
		window.onKeyDown.add($bind(this,this.onKeyDown));
		window.onKeyUp.add($bind(this,this.onKeyUp));
		window.onMouseDown.add($bind(this,this.onMouseDown));
		window.onMouseMove.add($bind(this,this.onMouseMove));
		window.onMouseMoveRelative.add($bind(this,this.onMouseMoveRelative));
		window.onMouseUp.add($bind(this,this.onMouseUp));
		window.onMouseWheel.add($bind(this,this.onMouseWheel));
		window.onTouchStart.add($bind(this,this.onTouchStart));
		window.onTouchMove.add($bind(this,this.onTouchMove));
		window.onTouchEnd.add($bind(this,this.onTouchEnd));
		window.onWindowActivate.add($bind(this,this.onWindowActivate));
		window.onWindowClose.add($bind(this,this.onWindowClose));
		window.onWindowDeactivate.add($bind(this,this.onWindowDeactivate));
		window.onWindowFocusIn.add($bind(this,this.onWindowFocusIn));
		window.onWindowFocusOut.add($bind(this,this.onWindowFocusOut));
		window.onWindowFullscreen.add($bind(this,this.onWindowFullscreen));
		window.onWindowMinimize.add($bind(this,this.onWindowMinimize));
		window.onWindowMove.add($bind(this,this.onWindowMove));
		window.onWindowResize.add($bind(this,this.onWindowResize));
		window.onWindowRestore.add($bind(this,this.onWindowRestore));
		window.create(this);
	}
	,create: function(config) {
		this.backend.create(config);
	}
	,exec: function() {
		lime.app.Application.current = this;
		return this.backend.exec();
	}
	,init: function(context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.init(context);
		}
		this.initialized = true;
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadAxisMove(gamepad,axis,value);
		}
	}
	,onGamepadButtonDown: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonDown(gamepad,button);
		}
	}
	,onGamepadButtonUp: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonUp(gamepad,button);
		}
	}
	,onGamepadConnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadConnect(gamepad);
		}
	}
	,onGamepadDisconnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadDisconnect(gamepad);
		}
	}
	,onKeyDown: function(keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyDown(keyCode,modifier);
		}
	}
	,onKeyUp: function(keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyUp(keyCode,modifier);
		}
	}
	,onMouseDown: function(x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseDown(x,y,button);
		}
	}
	,onMouseMove: function(x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMove(x,y);
		}
	}
	,onMouseMoveRelative: function(x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMoveRelative(x,y);
		}
	}
	,onMouseUp: function(x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseUp(x,y,button);
		}
	}
	,onMouseWheel: function(deltaX,deltaY) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseWheel(deltaX,deltaY);
		}
	}
	,onRenderContextLost: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextLost();
		}
	}
	,onRenderContextRestored: function(context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextRestored(context);
		}
	}
	,onTouchEnd: function(x,y,id) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchEnd(x,y,id);
		}
	}
	,onTouchMove: function(x,y,id) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchMove(x,y,id);
		}
	}
	,onTouchStart: function(x,y,id) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchStart(x,y,id);
		}
	}
	,onWindowActivate: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowActivate();
		}
	}
	,onWindowClose: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowClose();
		}
	}
	,onWindowDeactivate: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowDeactivate();
		}
	}
	,onWindowFocusIn: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusIn();
		}
	}
	,onWindowFocusOut: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusOut();
		}
	}
	,onWindowFullscreen: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFullscreen();
		}
	}
	,onWindowMinimize: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMinimize();
		}
	}
	,onWindowMove: function(x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMove(x,y);
		}
	}
	,onWindowResize: function(width,height) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowResize(width,height);
		}
	}
	,onWindowRestore: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowRestore();
		}
	}
	,removeModule: function(module) {
		HxOverrides.remove(this.modules,module);
	}
	,removeRenderer: function(renderer) {
		if(renderer != null && HxOverrides.indexOf(this.renderers,renderer,0) > -1) HxOverrides.remove(this.renderers,renderer);
	}
	,removeWindow: function(window) {
		if(window != null && HxOverrides.indexOf(this.windows,window,0) > -1) {
			window.close();
			HxOverrides.remove(this.windows,window);
		}
	}
	,render: function(context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.render(context);
		}
	}
	,update: function(deltaTime) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.update(deltaTime);
		}
	}
	,get_renderer: function() {
		return this.renderers[0];
	}
	,get_window: function() {
		return this.windows[0];
	}
	,__class__: lime.app.Application
	,__properties__: {get_window:"get_window",get_renderer:"get_renderer"}
});
lime.app.Event = function() {
	this.listeners = new Array();
	this.priorities = new Array();
	this.repeat = new Array();
};
$hxClasses["lime.app.Event"] = lime.app.Event;
lime.app.Event.__name__ = ["lime","app","Event"];
lime.app.Event.prototype = {
	listeners: null
	,repeat: null
	,priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,remove: function(listener) {
		var index = HxOverrides.indexOf(this.listeners,listener,0);
		if(index > -1) {
			this.listeners.splice(index,1);
			this.priorities.splice(index,1);
			this.repeat.splice(index,1);
		}
	}
	,__class__: lime.app.Event
};
lime.app.Preloader = function() {
	this.total = 0;
	this.loaded = 0;
};
$hxClasses["lime.app.Preloader"] = lime.app.Preloader;
lime.app.Preloader.__name__ = ["lime","app","Preloader"];
lime.app.Preloader.prototype = {
	complete: null
	,onComplete: null
	,loaded: null
	,total: null
	,create: function(config) {
	}
	,load: function(urls,types) {
		var url = null;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			var _g2 = types[i];
			switch(_g2) {
			case "IMAGE":
				var image = new Image();
				lime.app.Preloader.images.set(url,image);
				image.onload = $bind(this,this.image_onLoad);
				image.src = url;
				this.total++;
				break;
			case "BINARY":
				var loader = new lime.net.URLLoader();
				loader.set_dataFormat(lime.net.URLLoaderDataFormat.BINARY);
				lime.app.Preloader.loaders.set(url,loader);
				this.total++;
				break;
			case "TEXT":
				var loader1 = new lime.net.URLLoader();
				lime.app.Preloader.loaders.set(url,loader1);
				this.total++;
				break;
			case "FONT":
				this.total++;
				this.loadFont(url);
				break;
			default:
			}
		}
		var $it0 = lime.app.Preloader.loaders.keys();
		while( $it0.hasNext() ) {
			var url1 = $it0.next();
			var loader2 = lime.app.Preloader.loaders.get(url1);
			loader2.onComplete.add($bind(this,this.loader_onComplete));
			loader2.load(new lime.net.URLRequest(url1));
		}
		if(this.total == 0) this.start();
	}
	,loadFont: function(font) {
		var _g = this;
		if(window.document.fonts && window.document.fonts.load) window.document.fonts.load("1em '" + font + "'").then(function(_) {
			_g.loaded++;
			_g.update(_g.loaded,_g.total);
			if(_g.loaded == _g.total) _g.start();
		}); else {
			var node = window.document.createElement("span");
			node.innerHTML = "giItT1WQy@!-/#";
			var style = node.style;
			style.position = "absolute";
			style.left = "-10000px";
			style.top = "-10000px";
			style.fontSize = "300px";
			style.fontFamily = "sans-serif";
			style.fontVariant = "normal";
			style.fontStyle = "normal";
			style.fontWeight = "normal";
			style.letterSpacing = "0";
			window.document.body.appendChild(node);
			var width = node.offsetWidth;
			style.fontFamily = "'" + font + "', sans-serif";
			var interval = null;
			var found = false;
			var checkFont = function() {
				if(node.offsetWidth != width) {
					if(!found) {
						found = true;
						return false;
					}
					_g.loaded++;
					if(interval != null) window.clearInterval(interval);
					node.parentNode.removeChild(node);
					node = null;
					_g.update(_g.loaded,_g.total);
					if(_g.loaded == _g.total) _g.start();
					return true;
				}
				return false;
			};
			if(!checkFont()) interval = window.setInterval(checkFont,50);
		}
	}
	,start: function() {
		if(this.onComplete != null) this.onComplete();
	}
	,update: function(loaded,total) {
	}
	,image_onLoad: function(_) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,loader_onComplete: function(loader) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,__class__: lime.app.Preloader
};
lime.audio = {};
lime.audio.ALAudioContext = function() {
	this.EXPONENT_DISTANCE_CLAMPED = 53254;
	this.EXPONENT_DISTANCE = 53253;
	this.LINEAR_DISTANCE_CLAMPED = 53252;
	this.LINEAR_DISTANCE = 53251;
	this.INVERSE_DISTANCE_CLAMPED = 53250;
	this.INVERSE_DISTANCE = 53249;
	this.DISTANCE_MODEL = 53248;
	this.DOPPLER_VELOCITY = 49153;
	this.SPEED_OF_SOUND = 49155;
	this.DOPPLER_FACTOR = 49152;
	this.EXTENSIONS = 45060;
	this.RENDERER = 45059;
	this.VERSION = 45058;
	this.VENDOR = 45057;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_OPERATION = 40964;
	this.INVALID_VALUE = 40963;
	this.INVALID_ENUM = 40962;
	this.INVALID_NAME = 40961;
	this.NO_ERROR = 0;
	this.SIZE = 8196;
	this.CHANNELS = 8195;
	this.BITS = 8194;
	this.FREQUENCY = 8193;
	this.FORMAT_STEREO16 = 4355;
	this.FORMAT_STEREO8 = 4354;
	this.FORMAT_MONO16 = 4353;
	this.FORMAT_MONO8 = 4352;
	this.UNDETERMINED = 4144;
	this.STREAMING = 4137;
	this.STATIC = 4136;
	this.SOURCE_TYPE = 4135;
	this.BYTE_OFFSET = 4134;
	this.SAMPLE_OFFSET = 4133;
	this.SEC_OFFSET = 4132;
	this.MAX_DISTANCE = 4131;
	this.CONE_OUTER_GAIN = 4130;
	this.ROLLOFF_FACTOR = 4129;
	this.REFERENCE_DISTANCE = 4128;
	this.BUFFERS_PROCESSED = 4118;
	this.BUFFERS_QUEUED = 4117;
	this.STOPPED = 4116;
	this.PAUSED = 4115;
	this.PLAYING = 4114;
	this.INITIAL = 4113;
	this.SOURCE_STATE = 4112;
	this.ORIENTATION = 4111;
	this.MAX_GAIN = 4110;
	this.MIN_GAIN = 4109;
	this.GAIN = 4106;
	this.BUFFER = 4105;
	this.LOOPING = 4103;
	this.VELOCITY = 4102;
	this.DIRECTION = 4101;
	this.POSITION = 4100;
	this.PITCH = 4099;
	this.CONE_OUTER_ANGLE = 4098;
	this.CONE_INNER_ANGLE = 4097;
	this.SOURCE_RELATIVE = 514;
	this.TRUE = 1;
	this.FALSE = 0;
	this.NONE = 0;
};
$hxClasses["lime.audio.ALAudioContext"] = lime.audio.ALAudioContext;
lime.audio.ALAudioContext.__name__ = ["lime","audio","ALAudioContext"];
lime.audio.ALAudioContext.prototype = {
	NONE: null
	,FALSE: null
	,TRUE: null
	,SOURCE_RELATIVE: null
	,CONE_INNER_ANGLE: null
	,CONE_OUTER_ANGLE: null
	,PITCH: null
	,POSITION: null
	,DIRECTION: null
	,VELOCITY: null
	,LOOPING: null
	,BUFFER: null
	,GAIN: null
	,MIN_GAIN: null
	,MAX_GAIN: null
	,ORIENTATION: null
	,SOURCE_STATE: null
	,INITIAL: null
	,PLAYING: null
	,PAUSED: null
	,STOPPED: null
	,BUFFERS_QUEUED: null
	,BUFFERS_PROCESSED: null
	,REFERENCE_DISTANCE: null
	,ROLLOFF_FACTOR: null
	,CONE_OUTER_GAIN: null
	,MAX_DISTANCE: null
	,SEC_OFFSET: null
	,SAMPLE_OFFSET: null
	,BYTE_OFFSET: null
	,SOURCE_TYPE: null
	,STATIC: null
	,STREAMING: null
	,UNDETERMINED: null
	,FORMAT_MONO8: null
	,FORMAT_MONO16: null
	,FORMAT_STEREO8: null
	,FORMAT_STEREO16: null
	,FREQUENCY: null
	,BITS: null
	,CHANNELS: null
	,SIZE: null
	,NO_ERROR: null
	,INVALID_NAME: null
	,INVALID_ENUM: null
	,INVALID_VALUE: null
	,INVALID_OPERATION: null
	,OUT_OF_MEMORY: null
	,VENDOR: null
	,VERSION: null
	,RENDERER: null
	,EXTENSIONS: null
	,DOPPLER_FACTOR: null
	,SPEED_OF_SOUND: null
	,DOPPLER_VELOCITY: null
	,DISTANCE_MODEL: null
	,INVERSE_DISTANCE: null
	,INVERSE_DISTANCE_CLAMPED: null
	,LINEAR_DISTANCE: null
	,LINEAR_DISTANCE_CLAMPED: null
	,EXPONENT_DISTANCE: null
	,EXPONENT_DISTANCE_CLAMPED: null
	,bufferData: function(buffer,format,data,size,freq) {
		lime.audio.openal.AL.bufferData(buffer,format,data,size,freq);
	}
	,buffer3f: function(buffer,param,value1,value2,value3) {
		lime.audio.openal.AL.buffer3f(buffer,param,value1,value2,value3);
	}
	,buffer3i: function(buffer,param,value1,value2,value3) {
		lime.audio.openal.AL.buffer3i(buffer,param,value1,value2,value3);
	}
	,bufferf: function(buffer,param,value) {
		lime.audio.openal.AL.bufferf(buffer,param,value);
	}
	,bufferfv: function(buffer,param,values) {
		lime.audio.openal.AL.bufferfv(buffer,param,values);
	}
	,bufferi: function(buffer,param,value) {
		lime.audio.openal.AL.bufferi(buffer,param,value);
	}
	,bufferiv: function(buffer,param,values) {
		lime.audio.openal.AL.bufferiv(buffer,param,values);
	}
	,deleteBuffer: function(buffer) {
		lime.audio.openal.AL.deleteBuffer(buffer);
	}
	,deleteBuffers: function(buffers) {
		lime.audio.openal.AL.deleteBuffers(buffers);
	}
	,deleteSource: function(source) {
		lime.audio.openal.AL.deleteSource(source);
	}
	,deleteSources: function(sources) {
		lime.audio.openal.AL.deleteSources(sources);
	}
	,disable: function(capability) {
		lime.audio.openal.AL.disable(capability);
	}
	,distanceModel: function(distanceModel) {
		lime.audio.openal.AL.distanceModel(distanceModel);
	}
	,dopplerFactor: function(value) {
		lime.audio.openal.AL.dopplerFactor(value);
	}
	,dopplerVelocity: function(value) {
		lime.audio.openal.AL.dopplerVelocity(value);
	}
	,enable: function(capability) {
		lime.audio.openal.AL.enable(capability);
	}
	,genSource: function() {
		return lime.audio.openal.AL.genSource();
	}
	,genSources: function(n) {
		return lime.audio.openal.AL.genSources(n);
	}
	,genBuffer: function() {
		return lime.audio.openal.AL.genBuffer();
	}
	,genBuffers: function(n) {
		return lime.audio.openal.AL.genBuffers(n);
	}
	,getBoolean: function(param) {
		return lime.audio.openal.AL.getBoolean(param);
	}
	,getBooleanv: function(param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getBooleanv(param,count);
	}
	,getBuffer3f: function(buffer,param) {
		return lime.audio.openal.AL.getBuffer3f(buffer,param);
	}
	,getBuffer3i: function(buffer,param) {
		return lime.audio.openal.AL.getBuffer3i(buffer,param);
	}
	,getBufferf: function(buffer,param) {
		return lime.audio.openal.AL.getBufferf(buffer,param);
	}
	,getBufferfv: function(buffer,param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getBufferfv(buffer,param,count);
	}
	,getBufferi: function(buffer,param) {
		return lime.audio.openal.AL.getBufferi(buffer,param);
	}
	,getBufferiv: function(buffer,param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getBufferiv(buffer,param,count);
	}
	,getDouble: function(param) {
		return lime.audio.openal.AL.getDouble(param);
	}
	,getDoublev: function(param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getDoublev(param,count);
	}
	,getEnumValue: function(ename) {
		return lime.audio.openal.AL.getEnumValue(ename);
	}
	,getError: function() {
		return lime.audio.openal.AL.getError();
	}
	,getErrorString: function() {
		return lime.audio.openal.AL.getErrorString();
	}
	,getFloat: function(param) {
		return lime.audio.openal.AL.getFloat(param);
	}
	,getFloatv: function(param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getFloatv(param,count);
	}
	,getInteger: function(param) {
		return lime.audio.openal.AL.getInteger(param);
	}
	,getIntegerv: function(param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getIntegerv(param,count);
	}
	,getListener3f: function(param) {
		return lime.audio.openal.AL.getListener3f(param);
	}
	,getListener3i: function(param) {
		return lime.audio.openal.AL.getListener3i(param);
	}
	,getListenerf: function(param) {
		return lime.audio.openal.AL.getListenerf(param);
	}
	,getListenerfv: function(param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getListenerfv(param,count);
	}
	,getListeneri: function(param) {
		return lime.audio.openal.AL.getListeneri(param);
	}
	,getListeneriv: function(param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getListeneriv(param,count);
	}
	,getProcAddress: function(fname) {
		return lime.audio.openal.AL.getProcAddress(fname);
	}
	,getSource3f: function(source,param) {
		return lime.audio.openal.AL.getSource3f(source,param);
	}
	,getSourcef: function(source,param) {
		return lime.audio.openal.AL.getSourcef(source,param);
	}
	,getSource3i: function(source,param) {
		return lime.audio.openal.AL.getSource3i(source,param);
	}
	,getSourcefv: function(source,param) {
		return lime.audio.openal.AL.getSourcefv(source,param);
	}
	,getSourcei: function(source,param) {
		return lime.audio.openal.AL.getSourcei(source,param);
	}
	,getSourceiv: function(source,param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getSourceiv(source,param,count);
	}
	,getString: function(param) {
		return lime.audio.openal.AL.getString(param);
	}
	,isBuffer: function(buffer) {
		return lime.audio.openal.AL.isBuffer(buffer);
	}
	,isEnabled: function(capability) {
		return lime.audio.openal.AL.isEnabled(capability);
	}
	,isExtensionPresent: function(extname) {
		return lime.audio.openal.AL.isExtensionPresent(extname);
	}
	,isSource: function(source) {
		return lime.audio.openal.AL.isSource(source);
	}
	,listener3f: function(param,value1,value2,value3) {
		lime.audio.openal.AL.listener3f(param,value1,value2,value3);
	}
	,listener3i: function(param,value1,value2,value3) {
		lime.audio.openal.AL.listener3i(param,value1,value2,value3);
	}
	,listenerf: function(param,value) {
		lime.audio.openal.AL.listenerf(param,value);
	}
	,listenerfv: function(param,values) {
		lime.audio.openal.AL.listenerfv(param,values);
	}
	,listeneri: function(param,value) {
		lime.audio.openal.AL.listeneri(param,value);
	}
	,listeneriv: function(param,values) {
		lime.audio.openal.AL.listeneriv(param,values);
	}
	,source3f: function(source,param,value1,value2,value3) {
		lime.audio.openal.AL.source3f(source,param,value1,value2,value3);
	}
	,source3i: function(source,param,value1,value2,value3) {
		lime.audio.openal.AL.source3i(source,param,value1,value2,value3);
	}
	,sourcef: function(source,param,value) {
		lime.audio.openal.AL.sourcef(source,param,value);
	}
	,sourcefv: function(source,param,values) {
		lime.audio.openal.AL.sourcefv(source,param,values);
	}
	,sourcei: function(source,param,value) {
		lime.audio.openal.AL.sourcei(source,param,value);
	}
	,sourceiv: function(source,param,values) {
		lime.audio.openal.AL.sourceiv(source,param,values);
	}
	,sourcePlay: function(source) {
		lime.audio.openal.AL.sourcePlay(source);
	}
	,sourcePlayv: function(sources) {
		lime.audio.openal.AL.sourcePlayv(sources);
	}
	,sourceStop: function(source) {
		lime.audio.openal.AL.sourceStop(source);
	}
	,sourceStopv: function(sources) {
		lime.audio.openal.AL.sourceStopv(sources);
	}
	,sourceRewind: function(source) {
		lime.audio.openal.AL.sourceRewind(source);
	}
	,sourceRewindv: function(sources) {
		lime.audio.openal.AL.sourceRewindv(sources);
	}
	,sourcePause: function(source) {
		lime.audio.openal.AL.sourcePause(source);
	}
	,sourcePausev: function(sources) {
		lime.audio.openal.AL.sourcePausev(sources);
	}
	,sourceQueueBuffer: function(source,buffer) {
		lime.audio.openal.AL.sourceQueueBuffer(source,buffer);
	}
	,sourceQueueBuffers: function(source,nb,buffers) {
		lime.audio.openal.AL.sourceQueueBuffers(source,nb,buffers);
	}
	,sourceUnqueueBuffer: function(source) {
		return lime.audio.openal.AL.sourceUnqueueBuffer(source);
	}
	,sourceUnqueueBuffers: function(source,nb) {
		return lime.audio.openal.AL.sourceUnqueueBuffers(source,nb);
	}
	,speedOfSound: function(value) {
		lime.audio.openal.AL.speedOfSound(value);
	}
	,__class__: lime.audio.ALAudioContext
};
lime.audio.ALCAudioContext = function() {
	this.ALL_DEVICES_SPECIFIER = 4115;
	this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
	this.ENUMERATE_ALL_EXT = 1;
	this.EXTENSIONS = 4102;
	this.DEVICE_SPECIFIER = 4101;
	this.DEFAULT_DEVICE_SPECIFIER = 4100;
	this.ALL_ATTRIBUTES = 4099;
	this.ATTRIBUTES_SIZE = 4098;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_VALUE = 40964;
	this.INVALID_ENUM = 40963;
	this.INVALID_CONTEXT = 40962;
	this.INVALID_DEVICE = 40961;
	this.NO_ERROR = 0;
	this.STEREO_SOURCES = 4113;
	this.MONO_SOURCES = 4112;
	this.SYNC = 4105;
	this.REFRESH = 4104;
	this.FREQUENCY = 4103;
	this.TRUE = 1;
	this.FALSE = 0;
};
$hxClasses["lime.audio.ALCAudioContext"] = lime.audio.ALCAudioContext;
lime.audio.ALCAudioContext.__name__ = ["lime","audio","ALCAudioContext"];
lime.audio.ALCAudioContext.prototype = {
	FALSE: null
	,TRUE: null
	,FREQUENCY: null
	,REFRESH: null
	,SYNC: null
	,MONO_SOURCES: null
	,STEREO_SOURCES: null
	,NO_ERROR: null
	,INVALID_DEVICE: null
	,INVALID_CONTEXT: null
	,INVALID_ENUM: null
	,INVALID_VALUE: null
	,OUT_OF_MEMORY: null
	,ATTRIBUTES_SIZE: null
	,ALL_ATTRIBUTES: null
	,DEFAULT_DEVICE_SPECIFIER: null
	,DEVICE_SPECIFIER: null
	,EXTENSIONS: null
	,ENUMERATE_ALL_EXT: null
	,DEFAULT_ALL_DEVICES_SPECIFIER: null
	,ALL_DEVICES_SPECIFIER: null
	,closeDevice: function(device) {
		return lime.audio.openal.ALC.closeDevice(device);
	}
	,createContext: function(device,attrlist) {
		return lime.audio.openal.ALC.createContext(device,attrlist);
	}
	,destroyContext: function(context) {
		lime.audio.openal.ALC.destroyContext(context);
	}
	,getContextsDevice: function(context) {
		return lime.audio.openal.ALC.getContextsDevice(context);
	}
	,getCurrentContext: function() {
		return lime.audio.openal.ALC.getCurrentContext();
	}
	,getError: function(device) {
		return lime.audio.openal.ALC.getError(device);
	}
	,getErrorString: function(device) {
		return lime.audio.openal.ALC.getErrorString(device);
	}
	,getIntegerv: function(device,param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.ALC.getIntegerv(device,param,count);
	}
	,getString: function(device,param) {
		return lime.audio.openal.ALC.getString(device,param);
	}
	,makeContextCurrent: function(context) {
		return lime.audio.openal.ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime.audio.openal.ALC.openDevice(deviceName);
	}
	,processContext: function(context) {
		lime.audio.openal.ALC.processContext(context);
	}
	,suspendContext: function(context) {
		lime.audio.openal.ALC.suspendContext(context);
	}
	,__class__: lime.audio.ALCAudioContext
};
lime.audio.AudioBuffer = function() {
	this.id = 0;
};
$hxClasses["lime.audio.AudioBuffer"] = lime.audio.AudioBuffer;
lime.audio.AudioBuffer.__name__ = ["lime","audio","AudioBuffer"];
lime.audio.AudioBuffer.fromBytes = function(bytes) {
	return null;
};
lime.audio.AudioBuffer.fromFile = function(path) {
	return null;
};
lime.audio.AudioBuffer.fromURL = function(url,handler) {
};
lime.audio.AudioBuffer.prototype = {
	bitsPerSample: null
	,channels: null
	,data: null
	,id: null
	,sampleRate: null
	,src: null
	,dispose: function() {
	}
	,__class__: lime.audio.AudioBuffer
};
lime.audio.AudioContext = $hxClasses["lime.audio.AudioContext"] = { __ename__ : true, __constructs__ : ["OPENAL","HTML5","WEB","FLASH","CUSTOM"] };
lime.audio.AudioContext.OPENAL = function(alc,al) { var $x = ["OPENAL",0,alc,al]; $x.__enum__ = lime.audio.AudioContext; $x.toString = $estr; return $x; };
lime.audio.AudioContext.HTML5 = function(context) { var $x = ["HTML5",1,context]; $x.__enum__ = lime.audio.AudioContext; $x.toString = $estr; return $x; };
lime.audio.AudioContext.WEB = function(context) { var $x = ["WEB",2,context]; $x.__enum__ = lime.audio.AudioContext; $x.toString = $estr; return $x; };
lime.audio.AudioContext.FLASH = function(context) { var $x = ["FLASH",3,context]; $x.__enum__ = lime.audio.AudioContext; $x.toString = $estr; return $x; };
lime.audio.AudioContext.CUSTOM = function(data) { var $x = ["CUSTOM",4,data]; $x.__enum__ = lime.audio.AudioContext; $x.toString = $estr; return $x; };
lime.audio.AudioManager = function() { };
$hxClasses["lime.audio.AudioManager"] = lime.audio.AudioManager;
lime.audio.AudioManager.__name__ = ["lime","audio","AudioManager"];
lime.audio.AudioManager.context = null;
lime.audio.AudioManager.init = function(context) {
	if(lime.audio.AudioManager.context == null) {
		if(context == null) try {
			window.AudioContext = window.AudioContext || window.webkitAudioContext;;
			lime.audio.AudioManager.context = lime.audio.AudioContext.WEB(new AudioContext ());
		} catch( e ) {
			lime.audio.AudioManager.context = lime.audio.AudioContext.HTML5(new lime.audio.HTML5AudioContext());
		} else lime.audio.AudioManager.context = context;
	}
};
lime.audio.AudioManager.resume = function() {
	if(lime.audio.AudioManager.context != null) {
		var _g = lime.audio.AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			alc.processContext(alc.getCurrentContext());
			break;
		default:
		}
	}
};
lime.audio.AudioManager.shutdown = function() {
	if(lime.audio.AudioManager.context != null) {
		var _g = lime.audio.AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				var device = alc.getContextsDevice(currentContext);
				alc.makeContextCurrent(null);
				alc.destroyContext(currentContext);
				alc.closeDevice(device);
			}
			break;
		default:
		}
	}
};
lime.audio.AudioManager.suspend = function() {
	if(lime.audio.AudioManager.context != null) {
		var _g = lime.audio.AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			alc.suspendContext(alc.getCurrentContext());
			break;
		default:
		}
	}
};
lime.audio.AudioSource = function(buffer,offset,length,loops) {
	if(loops == null) loops = 0;
	if(offset == null) offset = 0;
	this.onComplete = new lime.app.Event();
	this.buffer = buffer;
	this.offset = offset;
	if(length != null && length != 0) this.set_length(length);
	this.loops = loops;
	this.id = 0;
	if(buffer != null) this.init();
};
$hxClasses["lime.audio.AudioSource"] = lime.audio.AudioSource;
lime.audio.AudioSource.__name__ = ["lime","audio","AudioSource"];
lime.audio.AudioSource.prototype = {
	onComplete: null
	,buffer: null
	,loops: null
	,offset: null
	,id: null
	,playing: null
	,pauseTime: null
	,__length: null
	,init: function() {
		{
			var _g = lime.audio.AudioManager.context;
			switch(_g[1]) {
			case 0:
				var al = _g[3];
				var alc = _g[2];
				if((function($this) {
					var $r;
					var $int = $this.buffer.id;
					$r = $int < 0?4294967296.0 + $int:$int + 0.0;
					return $r;
				}(this)) == 0) {
					this.buffer.id = al.genBuffer();
					var format = 0;
					if(this.buffer.channels == 1) {
						if(this.buffer.bitsPerSample == 8) format = al.FORMAT_MONO8; else if(this.buffer.bitsPerSample == 16) format = al.FORMAT_MONO16;
					} else if(this.buffer.channels == 2) {
						if(this.buffer.bitsPerSample == 8) format = al.FORMAT_STEREO8; else if(this.buffer.bitsPerSample == 16) format = al.FORMAT_STEREO16;
					}
					al.bufferData(this.buffer.id,format,this.buffer.data,this.buffer.data.length,this.buffer.sampleRate);
				}
				this.id = al.genSource();
				al.sourcei(this.id,al.BUFFER,this.buffer.id);
				break;
			default:
			}
		}
	}
	,play: function() {
	}
	,pause: function() {
	}
	,stop: function() {
	}
	,timer_onRun: function() {
	}
	,get_currentTime: function() {
		return 0;
	}
	,set_currentTime: function(value) {
		return this.pauseTime = value;
	}
	,get_gain: function() {
		return 1;
	}
	,set_gain: function(value) {
		return 1;
	}
	,get_length: function() {
		if(this.__length != null) return this.__length;
		return 0;
	}
	,set_length: function(value) {
		return this.__length = value;
	}
	,__class__: lime.audio.AudioSource
	,__properties__: {set_length:"set_length",get_length:"get_length",set_gain:"set_gain",get_gain:"get_gain",set_currentTime:"set_currentTime",get_currentTime:"get_currentTime"}
};
lime.audio.FlashAudioContext = function() {
};
$hxClasses["lime.audio.FlashAudioContext"] = lime.audio.FlashAudioContext;
lime.audio.FlashAudioContext.__name__ = ["lime","audio","FlashAudioContext"];
lime.audio.FlashAudioContext.prototype = {
	createBuffer: function(stream,context) {
		return null;
	}
	,getBytesLoaded: function(buffer) {
		return 0;
	}
	,getBytesTotal: function(buffer) {
		return 0;
	}
	,getID3: function(buffer) {
		return null;
	}
	,getIsBuffering: function(buffer) {
		return false;
	}
	,getIsURLInaccessible: function(buffer) {
		return false;
	}
	,getLength: function(buffer) {
		return 0;
	}
	,getURL: function(buffer) {
		return null;
	}
	,close: function(buffer) {
	}
	,extract: function(buffer,target,length,startPosition) {
		if(startPosition == null) startPosition = -1;
		return 0;
	}
	,load: function(buffer,stream,context) {
	}
	,loadCompressedDataFromByteArray: function(buffer,bytes,bytesLength) {
	}
	,loadPCMFromByteArray: function(buffer,bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) sampleRate = 44100;
		if(stereo == null) stereo = true;
	}
	,play: function(buffer,startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0;
		return null;
	}
	,__class__: lime.audio.FlashAudioContext
};
lime.audio.HTML5AudioContext = function() {
	this.NETWORK_NO_SOURCE = 3;
	this.NETWORK_LOADING = 2;
	this.NETWORK_IDLE = 1;
	this.NETWORK_EMPTY = 0;
	this.HAVE_NOTHING = 0;
	this.HAVE_METADATA = 1;
	this.HAVE_FUTURE_DATA = 3;
	this.HAVE_ENOUGH_DATA = 4;
	this.HAVE_CURRENT_DATA = 2;
};
$hxClasses["lime.audio.HTML5AudioContext"] = lime.audio.HTML5AudioContext;
lime.audio.HTML5AudioContext.__name__ = ["lime","audio","HTML5AudioContext"];
lime.audio.HTML5AudioContext.prototype = {
	HAVE_CURRENT_DATA: null
	,HAVE_ENOUGH_DATA: null
	,HAVE_FUTURE_DATA: null
	,HAVE_METADATA: null
	,HAVE_NOTHING: null
	,NETWORK_EMPTY: null
	,NETWORK_IDLE: null
	,NETWORK_LOADING: null
	,NETWORK_NO_SOURCE: null
	,canPlayType: function(buffer,type) {
		if(buffer.src != null) return buffer.src.canPlayType(type);
		return null;
	}
	,createBuffer: function(urlString) {
		var buffer = new lime.audio.AudioBuffer();
		buffer.src = new Audio();
		buffer.src.src = urlString;
		return buffer;
	}
	,getAudioDecodedByteCount: function(buffer) {
		if(buffer.src != null) return buffer.src.audioDecodedByteCount;
		return 0;
	}
	,getAutoplay: function(buffer) {
		if(buffer.src != null) return buffer.src.autoplay;
		return false;
	}
	,getBuffered: function(buffer) {
		if(buffer.src != null) return buffer.src.buffered;
		return null;
	}
	,getController: function(buffer) {
		if(buffer.src != null) return buffer.src.controller;
		return null;
	}
	,getCurrentSrc: function(buffer) {
		if(buffer.src != null) return buffer.src.currentSrc;
		return null;
	}
	,getCurrentTime: function(buffer) {
		if(buffer.src != null) return buffer.src.currentTime;
		return 0;
	}
	,getDefaultPlaybackRate: function(buffer) {
		if(buffer.src != null) return buffer.src.defaultPlaybackRate;
		return 1;
	}
	,getDuration: function(buffer) {
		if(buffer.src != null) return buffer.src.duration;
		return 0;
	}
	,getEnded: function(buffer) {
		if(buffer.src != null) return buffer.src.ended;
		return false;
	}
	,getError: function(buffer) {
		if(buffer.src != null) return buffer.src.error;
		return null;
	}
	,getInitialTime: function(buffer) {
		if(buffer.src != null) return buffer.src.initialTime;
		return 0;
	}
	,getLoop: function(buffer) {
		if(buffer.src != null) return buffer.src.loop;
		return false;
	}
	,getMediaGroup: function(buffer) {
		if(buffer.src != null) return buffer.src.mediaGroup;
		return null;
	}
	,getMuted: function(buffer) {
		if(buffer.src != null) return buffer.src.muted;
		return false;
	}
	,getNetworkState: function(buffer) {
		if(buffer.src != null) return buffer.src.networkState;
		return 0;
	}
	,getPaused: function(buffer) {
		if(buffer.src != null) return buffer.src.paused;
		return false;
	}
	,getPlaybackRate: function(buffer) {
		if(buffer.src != null) return buffer.src.playbackRate;
		return 1;
	}
	,getPlayed: function(buffer) {
		if(buffer.src != null) return buffer.src.played;
		return null;
	}
	,getPreload: function(buffer) {
		if(buffer.src != null) return buffer.src.preload;
		return null;
	}
	,getReadyState: function(buffer) {
		if(buffer.src != null) return buffer.src.readyState;
		return 0;
	}
	,getSeekable: function(buffer) {
		if(buffer.src != null) return buffer.src.seekable;
		return null;
	}
	,getSeeking: function(buffer) {
		if(buffer.src != null) return buffer.src.seeking;
		return false;
	}
	,getSrc: function(buffer) {
		if(buffer.src != null) return buffer.src.src;
		return null;
	}
	,getStartTime: function(buffer) {
		if(buffer.src != null) return buffer.src.playbackRate;
		return 0;
	}
	,getVolume: function(buffer) {
		if(buffer.src != null) return buffer.src.volume;
		return 1;
	}
	,load: function(buffer) {
		if(buffer.src != null) return buffer.src.load();
	}
	,pause: function(buffer) {
		if(buffer.src != null) return buffer.src.pause();
	}
	,play: function(buffer) {
		if(buffer.src != null) return buffer.src.play();
	}
	,setAutoplay: function(buffer,value) {
		if(buffer.src != null) buffer.src.autoplay = value;
	}
	,setController: function(buffer,value) {
		if(buffer.src != null) buffer.src.controller = value;
	}
	,setCurrentTime: function(buffer,value) {
		if(buffer.src != null) buffer.src.currentTime = value;
	}
	,setDefaultPlaybackRate: function(buffer,value) {
		if(buffer.src != null) buffer.src.defaultPlaybackRate = value;
	}
	,setLoop: function(buffer,value) {
		if(buffer.src != null) buffer.src.loop = value;
	}
	,setMediaGroup: function(buffer,value) {
		if(buffer.src != null) buffer.src.mediaGroup = value;
	}
	,setMuted: function(buffer,value) {
		if(buffer.src != null) buffer.src.muted = value;
	}
	,setPlaybackRate: function(buffer,value) {
		if(buffer.src != null) buffer.src.playbackRate = value;
	}
	,setPreload: function(buffer,value) {
		if(buffer.src != null) buffer.src.preload = value;
	}
	,setSrc: function(buffer,value) {
		if(buffer.src != null) buffer.src.src = value;
	}
	,setVolume: function(buffer,value) {
		if(buffer.src != null) buffer.src.volume = value;
	}
	,__class__: lime.audio.HTML5AudioContext
};
lime.audio.openal = {};
lime.audio.openal.AL = function() { };
$hxClasses["lime.audio.openal.AL"] = lime.audio.openal.AL;
lime.audio.openal.AL.__name__ = ["lime","audio","openal","AL"];
lime.audio.openal.AL.bufferData = function(buffer,format,data,size,freq) {
};
lime.audio.openal.AL.buffer3f = function(buffer,param,value1,value2,value3) {
};
lime.audio.openal.AL.buffer3i = function(buffer,param,value1,value2,value3) {
};
lime.audio.openal.AL.bufferf = function(buffer,param,value) {
};
lime.audio.openal.AL.bufferfv = function(buffer,param,values) {
};
lime.audio.openal.AL.bufferi = function(buffer,param,value) {
};
lime.audio.openal.AL.bufferiv = function(buffer,param,values) {
};
lime.audio.openal.AL.deleteBuffer = function(buffer) {
};
lime.audio.openal.AL.deleteBuffers = function(buffers) {
};
lime.audio.openal.AL.deleteSource = function(source) {
};
lime.audio.openal.AL.deleteSources = function(sources) {
};
lime.audio.openal.AL.disable = function(capability) {
};
lime.audio.openal.AL.distanceModel = function(distanceModel) {
};
lime.audio.openal.AL.dopplerFactor = function(value) {
};
lime.audio.openal.AL.dopplerVelocity = function(value) {
};
lime.audio.openal.AL.enable = function(capability) {
};
lime.audio.openal.AL.genSource = function() {
	return 0;
};
lime.audio.openal.AL.genSources = function(n) {
	return null;
};
lime.audio.openal.AL.genBuffer = function() {
	return 0;
};
lime.audio.openal.AL.genBuffers = function(n) {
	return null;
};
lime.audio.openal.AL.getBoolean = function(param) {
	return false;
};
lime.audio.openal.AL.getBooleanv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getBuffer3f = function(buffer,param) {
	return null;
};
lime.audio.openal.AL.getBuffer3i = function(buffer,param) {
	return null;
};
lime.audio.openal.AL.getBufferf = function(buffer,param) {
	return 0;
};
lime.audio.openal.AL.getBufferfv = function(buffer,param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getBufferi = function(buffer,param) {
	return 0;
};
lime.audio.openal.AL.getBufferiv = function(buffer,param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getDouble = function(param) {
	return 0;
};
lime.audio.openal.AL.getDoublev = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getEnumValue = function(ename) {
	return 0;
};
lime.audio.openal.AL.getError = function() {
	return 0;
};
lime.audio.openal.AL.getErrorString = function() {
	var _g = lime.audio.openal.AL.getError();
	switch(_g) {
	case 40961:
		return "INVALID_NAME: Invalid parameter name";
	case 40962:
		return "INVALID_ENUM: Invalid enum value";
	case 40963:
		return "INVALID_VALUE: Invalid parameter value";
	case 40964:
		return "INVALID_OPERATION: Illegal operation or call";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime.audio.openal.AL.getFloat = function(param) {
	return 0;
};
lime.audio.openal.AL.getFloatv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getInteger = function(param) {
	return 0;
};
lime.audio.openal.AL.getIntegerv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getListener3f = function(param) {
	return null;
};
lime.audio.openal.AL.getListener3i = function(param) {
	return null;
};
lime.audio.openal.AL.getListenerf = function(param) {
	return 0;
};
lime.audio.openal.AL.getListenerfv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getListeneri = function(param) {
	return 0;
};
lime.audio.openal.AL.getListeneriv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getProcAddress = function(fname) {
	return null;
};
lime.audio.openal.AL.getSource3f = function(source,param) {
	return null;
};
lime.audio.openal.AL.getSourcef = function(source,param) {
	return 0;
};
lime.audio.openal.AL.getSource3i = function(source,param) {
	return null;
};
lime.audio.openal.AL.getSourcefv = function(source,param) {
	return null;
};
lime.audio.openal.AL.getSourcei = function(source,param) {
	return 0;
};
lime.audio.openal.AL.getSourceiv = function(source,param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getString = function(param) {
	return null;
};
lime.audio.openal.AL.isBuffer = function(buffer) {
	return false;
};
lime.audio.openal.AL.isEnabled = function(capability) {
	return false;
};
lime.audio.openal.AL.isExtensionPresent = function(extname) {
	return false;
};
lime.audio.openal.AL.isSource = function(source) {
	return false;
};
lime.audio.openal.AL.listener3f = function(param,value1,value2,value3) {
};
lime.audio.openal.AL.listener3i = function(param,value1,value2,value3) {
};
lime.audio.openal.AL.listenerf = function(param,value) {
};
lime.audio.openal.AL.listenerfv = function(param,values) {
};
lime.audio.openal.AL.listeneri = function(param,value) {
};
lime.audio.openal.AL.listeneriv = function(param,values) {
};
lime.audio.openal.AL.source3f = function(source,param,value1,value2,value3) {
};
lime.audio.openal.AL.source3i = function(source,param,value1,value2,value3) {
};
lime.audio.openal.AL.sourcef = function(source,param,value) {
};
lime.audio.openal.AL.sourcefv = function(source,param,values) {
};
lime.audio.openal.AL.sourcei = function(source,param,value) {
};
lime.audio.openal.AL.sourceiv = function(source,param,values) {
};
lime.audio.openal.AL.sourcePlay = function(source) {
};
lime.audio.openal.AL.sourcePlayv = function(sources) {
};
lime.audio.openal.AL.sourceStop = function(source) {
};
lime.audio.openal.AL.sourceStopv = function(sources) {
};
lime.audio.openal.AL.sourceRewind = function(source) {
};
lime.audio.openal.AL.sourceRewindv = function(sources) {
};
lime.audio.openal.AL.sourcePause = function(source) {
};
lime.audio.openal.AL.sourcePausev = function(sources) {
};
lime.audio.openal.AL.sourceQueueBuffer = function(source,buffer) {
};
lime.audio.openal.AL.sourceQueueBuffers = function(source,nb,buffers) {
};
lime.audio.openal.AL.sourceUnqueueBuffer = function(source) {
	return 0;
};
lime.audio.openal.AL.sourceUnqueueBuffers = function(source,nb) {
	return null;
};
lime.audio.openal.AL.speedOfSound = function(value) {
};
lime.audio.openal.ALC = function() { };
$hxClasses["lime.audio.openal.ALC"] = lime.audio.openal.ALC;
lime.audio.openal.ALC.__name__ = ["lime","audio","openal","ALC"];
lime.audio.openal.ALC.closeDevice = function(device) {
	return false;
};
lime.audio.openal.ALC.createContext = function(device,attrlist) {
	return null;
};
lime.audio.openal.ALC.destroyContext = function(context) {
};
lime.audio.openal.ALC.getContextsDevice = function(context) {
	return null;
};
lime.audio.openal.ALC.getCurrentContext = function() {
	return null;
};
lime.audio.openal.ALC.getError = function(device) {
	return 0;
};
lime.audio.openal.ALC.getErrorString = function(device) {
	var _g = lime.audio.openal.ALC.getError(device);
	switch(_g) {
	case 40961:
		return "INVALID_DEVICE: Invalid device (or no device?)";
	case 40962:
		return "INVALID_CONTEXT: Invalid context (or no context?)";
	case 40963:
		return "INVALID_ENUM: Invalid enum value";
	case 40964:
		return "INVALID_VALUE: Invalid param value";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime.audio.openal.ALC.getIntegerv = function(device,param,size) {
	return null;
};
lime.audio.openal.ALC.getString = function(device,param) {
	return null;
};
lime.audio.openal.ALC.makeContextCurrent = function(context) {
	return false;
};
lime.audio.openal.ALC.openDevice = function(deviceName) {
	return null;
};
lime.audio.openal.ALC.processContext = function(context) {
};
lime.audio.openal.ALC.suspendContext = function(context) {
};
lime.audio.openal._ALContext = {};
lime.audio.openal._ALContext.ALContext_Impl_ = function() { };
$hxClasses["lime.audio.openal._ALContext.ALContext_Impl_"] = lime.audio.openal._ALContext.ALContext_Impl_;
lime.audio.openal._ALContext.ALContext_Impl_.__name__ = ["lime","audio","openal","_ALContext","ALContext_Impl_"];
lime.audio.openal._ALContext.ALContext_Impl_._new = function(handle) {
	return handle;
};
lime.audio.openal._ALDevice = {};
lime.audio.openal._ALDevice.ALDevice_Impl_ = function() { };
$hxClasses["lime.audio.openal._ALDevice.ALDevice_Impl_"] = lime.audio.openal._ALDevice.ALDevice_Impl_;
lime.audio.openal._ALDevice.ALDevice_Impl_.__name__ = ["lime","audio","openal","_ALDevice","ALDevice_Impl_"];
lime.audio.openal._ALDevice.ALDevice_Impl_._new = function(handle) {
	return handle;
};
lime.graphics = {};
lime.graphics.ConsoleRenderContext = function() {
};
$hxClasses["lime.graphics.ConsoleRenderContext"] = lime.graphics.ConsoleRenderContext;
lime.graphics.ConsoleRenderContext.__name__ = ["lime","graphics","ConsoleRenderContext"];
lime.graphics.ConsoleRenderContext.prototype = {
	clear: function() {
	}
	,clearColor: function(r,g,b,a) {
	}
	,clearDepth: function(depth) {
	}
	,clearStencil: function(stencil) {
	}
	,__class__: lime.graphics.ConsoleRenderContext
};
lime.graphics.FlashRenderContext = function() {
};
$hxClasses["lime.graphics.FlashRenderContext"] = lime.graphics.FlashRenderContext;
lime.graphics.FlashRenderContext.__name__ = ["lime","graphics","FlashRenderContext"];
lime.graphics.FlashRenderContext.prototype = {
	accessibilityImplementation: null
	,accessibilityProperties: null
	,alpha: null
	,blendMode: null
	,blendShader: null
	,buttonMode: null
	,cacheAsBitmap: null
	,contextMenu: null
	,doubleClickEnabled: null
	,dropTarget: null
	,filters: null
	,focusRect: null
	,graphics: null
	,height: null
	,hitArea: null
	,loaderInfo: null
	,mask: null
	,mouseChildren: null
	,mouseEnabled: null
	,mouseX: null
	,mouseY: null
	,name: null
	,needsSoftKeyboard: null
	,numChildren: null
	,opaqueBackground: null
	,parent: null
	,root: null
	,rotation: null
	,rotationX: null
	,rotationY: null
	,rotationZ: null
	,scale9Grid: null
	,scaleX: null
	,scaleY: null
	,scaleZ: null
	,scrollRect: null
	,softKeyboardInputAreaOfInterest: null
	,soundTransform: null
	,stage: null
	,tabChildren: null
	,tabEnabled: null
	,tabIndex: null
	,textSnapshot: null
	,transform: null
	,useHandCursor: null
	,visible: null
	,width: null
	,x: null
	,y: null
	,z: null
	,addChild: function(child) {
		return null;
	}
	,addChildAt: function(child,index) {
		return null;
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		return false;
	}
	,dispatchEvent: function(event) {
		return false;
	}
	,getBounds: function(targetCoordinateSpace) {
		return null;
	}
	,getChildAt: function(index) {
		return null;
	}
	,getChildByName: function(name) {
		return null;
	}
	,getChildIndex: function(child) {
		return 0;
	}
	,getObjectsUnderPoint: function(point) {
		return null;
	}
	,getRect: function(targetCoordinateSpace) {
		return null;
	}
	,globalToLocal: function(point) {
		return null;
	}
	,globalToLocal3D: function(point) {
		return null;
	}
	,hasEventListener: function(type) {
		return false;
	}
	,hitTestObject: function(obj) {
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		return false;
	}
	,local3DToGlobal: function(point3d) {
		return null;
	}
	,localToGlobal: function(point) {
		return null;
	}
	,removeChild: function(child) {
		return null;
	}
	,removeChildAt: function(index) {
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
	}
	,requestSoftKeyboard: function() {
		return false;
	}
	,setChildIndex: function(child,index) {
	}
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
	}
	,startTouchDrag: function(touchPointID,lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
	}
	,stopAllMovieClips: function() {
	}
	,stopDrag: function() {
	}
	,stopTouchDrag: function(touchPointID) {
	}
	,swapChildren: function(child1,child2) {
	}
	,swapChildrenAt: function(index1,index2) {
	}
	,toString: function() {
		return null;
	}
	,willTrigger: function(type) {
		return false;
	}
	,__class__: lime.graphics.FlashRenderContext
};
lime.graphics.Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) height = -1;
	if(width == null) width = -1;
	if(offsetY == null) offsetY = 0;
	if(offsetX == null) offsetX = 0;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	if(type == null) {
		if(lime.app.Application.current != null && lime.app.Application.current.renderers[0] != null) {
			var _g = lime.app.Application.current.renderers[0].context;
			switch(_g[1]) {
			case 2:case 1:
				this.type = lime.graphics.ImageType.CANVAS;
				break;
			case 3:
				this.type = lime.graphics.ImageType.FLASH;
				break;
			default:
				this.type = lime.graphics.ImageType.DATA;
			}
		} else this.type = lime.graphics.ImageType.DATA;
	} else this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 0:
				this.buffer = new lime.graphics.ImageBuffer(null,width,height);
				lime.graphics.utils.ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null) this.fillRect(new lime.math.Rectangle(0,0,width,height),color);
				break;
			case 1:
				this.buffer = new lime.graphics.ImageBuffer(new Uint8Array(width * height * 4),width,height);
				if(color != null) this.fillRect(new lime.math.Rectangle(0,0,width,height),color);
				break;
			case 2:
				break;
			default:
			}
		}
	} else this.__fromImageBuffer(buffer);
};
$hxClasses["lime.graphics.Image"] = lime.graphics.Image;
lime.graphics.Image.__name__ = ["lime","graphics","Image"];
lime.graphics.Image.__base64Encoder = null;
lime.graphics.Image.fromBase64 = function(base64,type,onload) {
	var image = new lime.graphics.Image();
	image.__fromBase64(base64,type,onload);
	return image;
};
lime.graphics.Image.fromBitmapData = function(bitmapData) {
	var buffer = new lime.graphics.ImageBuffer(null,bitmapData.width,bitmapData.height);
	buffer.__srcBitmapData = bitmapData;
	return new lime.graphics.Image(buffer);
};
lime.graphics.Image.fromBytes = function(bytes,onload) {
	var image = new lime.graphics.Image();
	image.__fromBytes(bytes,onload);
	return image;
};
lime.graphics.Image.fromCanvas = function(canvas) {
	var buffer = new lime.graphics.ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	return new lime.graphics.Image(buffer);
};
lime.graphics.Image.fromFile = function(path,onload,onerror) {
	var image = new lime.graphics.Image();
	image.__fromFile(path,onload,onerror);
	return image;
};
lime.graphics.Image.fromImageElement = function(image) {
	var buffer = new lime.graphics.ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	return new lime.graphics.Image(buffer);
};
lime.graphics.Image.__base64Encode = function(bytes) {
	var extension;
	var _g = bytes.length % 3;
	switch(_g) {
	case 1:
		extension = "==";
		break;
	case 2:
		extension = "=";
		break;
	default:
		extension = "";
	}
	if(lime.graphics.Image.__base64Encoder == null) lime.graphics.Image.__base64Encoder = new haxe.crypto.BaseCode(haxe.io.Bytes.ofString(lime.graphics.Image.__base64Chars));
	return lime.graphics.Image.__base64Encoder.encodeBytes(haxe.io.Bytes.ofData(bytes.byteView)).toString() + extension;
};
lime.graphics.Image.__isJPG = function(bytes) {
	bytes.position = 0;
	return bytes.readUnsignedByte() == 255 && bytes.readUnsignedByte() == 216;
};
lime.graphics.Image.__isPNG = function(bytes) {
	bytes.position = 0;
	return bytes.readUnsignedByte() == 137 && bytes.readUnsignedByte() == 80 && bytes.readUnsignedByte() == 78 && bytes.readUnsignedByte() == 71 && bytes.readUnsignedByte() == 13 && bytes.readUnsignedByte() == 10 && bytes.readUnsignedByte() == 26 && bytes.readUnsignedByte() == 10;
};
lime.graphics.Image.__isGIF = function(bytes) {
	bytes.position = 0;
	if(bytes.readUnsignedByte() == 71 && bytes.readUnsignedByte() == 73 && bytes.readUnsignedByte() == 70 && bytes.readUnsignedByte() == 56) {
		var b = bytes.readUnsignedByte();
		return (b == 55 || b == 57) && bytes.readUnsignedByte() == 97;
	}
	return false;
};
lime.graphics.Image.prototype = {
	buffer: null
	,dirty: null
	,height: null
	,offsetX: null
	,offsetY: null
	,rect: null
	,type: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		var image = new lime.graphics.Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
		return image;
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime.math._ColorMatrix.ColorMatrix_Impl_.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) return;
		if(destChannel == lime.graphics.ImageChannel.ALPHA && !this.get_transparent()) return;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel[1]) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel[1]) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(this.buffer == null || sourceImage == null) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(destPoint.x + sourceRect.width > this.width) sourceRect.width = this.width - destPoint.x;
		if(destPoint.y + sourceRect.height > this.height) sourceRect.height = this.height - destPoint.y;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.convertToCanvas(this);
			lime.graphics.utils.ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageCanvasUtil.convertToData(sourceImage);
			lime.graphics.utils.ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null?alphaImage.buffer.get_src():null,alphaPoint != null?alphaPoint.__toFlashPoint():null,mergeAlpha);
			break;
		default:
		}
	}
	,encode: function(format,quality) {
		if(quality == null) quality = 90;
		if(format == null) format = "png";
		return null;
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			if(format == null || format == lime.graphics.PixelFormat.RGBA) color = (color & 255) << 24 | color >> 8;
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),color);
			break;
		default:
		}
	}
	,floodFill: function(x,y,color,format) {
		if(this.buffer == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.floodFill(this,x,y,color,format);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.floodFill(this,x,y,color,format);
			break;
		case 2:
			if(format == null || format == lime.graphics.PixelFormat.RGBA) color = (color & 255) << 24 | color >> 8;
			this.buffer.__srcBitmapData.floodFill(x + this.offsetX,y + this.offsetY,color);
			break;
		default:
		}
	}
	,getPixel: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime.graphics.utils.ImageCanvasUtil.getPixel(this,x,y,format);
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			return lime.graphics.utils.ImageDataUtil.getPixel(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
			if(format == null || format == lime.graphics.PixelFormat.RGBA) return (color & 255) << 24 | color >> 8; else return color;
			break;
		default:
			return 0;
		}
	}
	,getPixel32: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime.graphics.utils.ImageCanvasUtil.getPixel32(this,x,y,format);
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			return lime.graphics.utils.ImageDataUtil.getPixel32(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel32(x + this.offsetX,y + this.offsetY);
			if(format == null || format == lime.graphics.PixelFormat.RGBA) return (color & 255) << 24 | color >> 8; else return color;
			break;
		default:
			return 0;
		}
	}
	,getPixels: function(rect,format) {
		if(this.buffer == null) return null;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime.graphics.utils.ImageCanvasUtil.getPixels(this,rect,format);
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			return lime.graphics.utils.ImageDataUtil.getPixels(this,rect,format);
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var byteArray = this.buffer.__srcBitmapData.getPixels(rect.__toFlashRectangle());
			if(format == null || format == lime.graphics.PixelFormat.RGBA) {
				var color;
				var length = byteArray.length / 4 | 0;
				var _g1 = 0;
				while(_g1 < length) {
					var i = _g1++;
					color = byteArray.readUnsignedInt();
					byteArray.position -= 4;
					byteArray.writeUnsignedInt((color & 255) << 24 | color >> 8);
				}
				byteArray.position = 0;
			}
			return byteArray;
		default:
			return null;
		}
	}
	,merge: function(sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(this.buffer == null || sourceImage == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.convertToCanvas(this);
			lime.graphics.utils.ImageCanvasUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageCanvasUtil.convertToData(sourceImage);
			lime.graphics.utils.ImageDataUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 2:
			sourceRect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		default:
			return null;
		}
	}
	,resize: function(newWidth,newHeight) {
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime.graphics.utils.ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,setPixel: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.setPixel(this,x,y,color,format);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.setPixel(this,x,y,color,format);
			break;
		case 2:
			if(format == null || format == lime.graphics.PixelFormat.RGBA) color = (color & 255) << 24 | color >> 8;
			this.buffer.__srcBitmapData.setPixel(x + this.offsetX,y + this.offsetX,color);
			break;
		default:
		}
	}
	,setPixel32: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.setPixel32(this,x,y,color,format);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.setPixel32(this,x,y,color,format);
			break;
		case 2:
			if(format == null || format == lime.graphics.PixelFormat.RGBA) color = (color & 255) << 24 | color >> 8;
			this.buffer.__srcBitmapData.setPixel32(x + this.offsetX,y + this.offsetY,color);
			break;
		default:
		}
	}
	,setPixels: function(rect,byteArray,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.setPixels(this,rect,byteArray,format);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.setPixels(this,rect,byteArray,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			if(format == null || format == lime.graphics.PixelFormat.RGBA) {
				var srcData = byteArray;
				byteArray = new lime.utils.ByteArray();
				var color;
				var length = byteArray.length / 4 | 0;
				var _g1 = 0;
				while(_g1 < length) {
					var i = _g1++;
					color = srcData.readUnsignedInt();
					byteArray.writeUnsignedInt((color & 255) << 24 | color >> 8);
				}
				srcData.position = 0;
				byteArray.position = 0;
			}
			this.buffer.__srcBitmapData.setPixels(rect.__toFlashRectangle(),byteArray);
			break;
		default:
		}
	}
	,__clipRect: function(r) {
		if(r == null) return null;
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) return null;
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) return null;
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) return null;
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) return null;
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _g = this;
		var image = new Image();
		var image_onLoaded = function(event) {
			_g.buffer = new lime.graphics.ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.offsetX = 0;
			_g.offsetY = 0;
			_g.width = _g.buffer.width;
			_g.height = _g.buffer.height;
			if(onload != null) onload(_g);
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime.graphics.Image.__isPNG(bytes)) type = "image/png"; else if(lime.graphics.Image.__isJPG(bytes)) type = "image/jpeg"; else if(lime.graphics.Image.__isGIF(bytes)) type = "image/gif"; else throw "Image tried to read a PNG/JPG ByteArray, but found an invalid header.";
		this.__fromBase64(lime.graphics.Image.__base64Encode(bytes),type,onload);
	}
	,__fromFile: function(path,onload,onerror) {
		var _g = this;
		var image = new Image();
		image.onload = function(_) {
			_g.buffer = new lime.graphics.ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.width = image.width;
			_g.height = image.height;
			if(onload != null) onload(_g);
		};
		image.onerror = function(_1) {
			if(onerror != null) onerror();
		};
		image.src = path;
		if(image.complete) {
		}
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) this.width = buffer.width;
			if(this.height == -1) this.height = buffer.height;
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime.graphics.utils.ImageCanvasUtil.convertToCanvas(this);
			lime.graphics.utils.ImageCanvasUtil.sync(this);
			lime.graphics.utils.ImageCanvasUtil.createImageData(this);
		}
		return this.buffer.data;
	}
	,set_data: function(value) {
		return this.buffer.data = value;
	}
	,get_powerOfTwo: function() {
		return this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width && (this.buffer.height != 0 && (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height);
	}
	,set_powerOfTwo: function(value) {
		if(value != this.get_powerOfTwo()) {
			var newWidth = 1;
			var newHeight = 1;
			while(newWidth < this.buffer.width) newWidth <<= 1;
			while(newHeight < this.buffer.height) newHeight <<= 1;
			var _g = this.type;
			switch(_g[1]) {
			case 0:
				break;
			case 1:
				lime.graphics.utils.ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 2:
				break;
			default:
			}
		}
		return value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			var _g = this.type;
			switch(_g[1]) {
			case 1:
				lime.graphics.utils.ImageCanvasUtil.convertToData(this);
				lime.graphics.utils.ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 1:
				lime.graphics.utils.ImageCanvasUtil.convertToData(this);
				lime.graphics.utils.ImageDataUtil.unmultiplyAlpha(this);
				break;
			default:
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime.math.Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		return this.buffer.get_src();
	}
	,set_src: function(value) {
		return this.buffer.set_src(value);
	}
	,get_transparent: function() {
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		return this.buffer.transparent = value;
	}
	,__class__: lime.graphics.Image
	,__properties__: {set_transparent:"set_transparent",get_transparent:"get_transparent",set_src:"set_src",get_src:"get_src",get_rect:"get_rect",set_premultiplied:"set_premultiplied",get_premultiplied:"get_premultiplied",set_powerOfTwo:"set_powerOfTwo",get_powerOfTwo:"get_powerOfTwo",set_data:"set_data",get_data:"get_data"}
};
lime.graphics.ImageBuffer = function(data,width,height,bitsPerPixel) {
	if(bitsPerPixel == null) bitsPerPixel = 4;
	if(height == null) height = 0;
	if(width == null) width = 0;
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime.graphics.ImageBuffer;
lime.graphics.ImageBuffer.__name__ = ["lime","graphics","ImageBuffer"];
lime.graphics.ImageBuffer.prototype = {
	bitsPerPixel: null
	,data: null
	,height: null
	,premultiplied: null
	,transparent: null
	,width: null
	,__srcBitmapData: null
	,__srcCanvas: null
	,__srcContext: null
	,__srcCustom: null
	,__srcImage: null
	,__srcImageData: null
	,clone: function() {
		var buffer = new lime.graphics.ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			buffer.data = new Uint8Array(this.data.byteLength);
			var copy = new Uint8Array(this.data);
			buffer.data.set(copy);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy1 = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy1);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else buffer.__srcImage = this.__srcImage;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) return this.__srcImage;
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(js.Boot.__instanceof(value,Image)) this.__srcImage = value; else if(js.Boot.__instanceof(value,HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,__class__: lime.graphics.ImageBuffer
	,__properties__: {set_src:"set_src",get_src:"get_src"}
};
lime.graphics.ImageChannel = $hxClasses["lime.graphics.ImageChannel"] = { __ename__ : true, __constructs__ : ["RED","GREEN","BLUE","ALPHA"] };
lime.graphics.ImageChannel.RED = ["RED",0];
lime.graphics.ImageChannel.RED.toString = $estr;
lime.graphics.ImageChannel.RED.__enum__ = lime.graphics.ImageChannel;
lime.graphics.ImageChannel.GREEN = ["GREEN",1];
lime.graphics.ImageChannel.GREEN.toString = $estr;
lime.graphics.ImageChannel.GREEN.__enum__ = lime.graphics.ImageChannel;
lime.graphics.ImageChannel.BLUE = ["BLUE",2];
lime.graphics.ImageChannel.BLUE.toString = $estr;
lime.graphics.ImageChannel.BLUE.__enum__ = lime.graphics.ImageChannel;
lime.graphics.ImageChannel.ALPHA = ["ALPHA",3];
lime.graphics.ImageChannel.ALPHA.toString = $estr;
lime.graphics.ImageChannel.ALPHA.__enum__ = lime.graphics.ImageChannel;
lime.graphics.ImageType = $hxClasses["lime.graphics.ImageType"] = { __ename__ : true, __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"] };
lime.graphics.ImageType.CANVAS = ["CANVAS",0];
lime.graphics.ImageType.CANVAS.toString = $estr;
lime.graphics.ImageType.CANVAS.__enum__ = lime.graphics.ImageType;
lime.graphics.ImageType.DATA = ["DATA",1];
lime.graphics.ImageType.DATA.toString = $estr;
lime.graphics.ImageType.DATA.__enum__ = lime.graphics.ImageType;
lime.graphics.ImageType.FLASH = ["FLASH",2];
lime.graphics.ImageType.FLASH.toString = $estr;
lime.graphics.ImageType.FLASH.__enum__ = lime.graphics.ImageType;
lime.graphics.ImageType.CUSTOM = ["CUSTOM",3];
lime.graphics.ImageType.CUSTOM.toString = $estr;
lime.graphics.ImageType.CUSTOM.__enum__ = lime.graphics.ImageType;
lime.graphics.PixelFormat = $hxClasses["lime.graphics.PixelFormat"] = { __ename__ : true, __constructs__ : ["RGBA","ARGB"] };
lime.graphics.PixelFormat.RGBA = ["RGBA",0];
lime.graphics.PixelFormat.RGBA.toString = $estr;
lime.graphics.PixelFormat.RGBA.__enum__ = lime.graphics.PixelFormat;
lime.graphics.PixelFormat.ARGB = ["ARGB",1];
lime.graphics.PixelFormat.ARGB.toString = $estr;
lime.graphics.PixelFormat.ARGB.__enum__ = lime.graphics.PixelFormat;
lime.graphics.RenderContext = $hxClasses["lime.graphics.RenderContext"] = { __ename__ : true, __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CONSOLE","CUSTOM"] };
lime.graphics.RenderContext.OPENGL = function(gl) { var $x = ["OPENGL",0,gl]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.RenderContext.CANVAS = function(context) { var $x = ["CANVAS",1,context]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.RenderContext.DOM = function(element) { var $x = ["DOM",2,element]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.RenderContext.FLASH = function(stage) { var $x = ["FLASH",3,stage]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.RenderContext.CONSOLE = function(context) { var $x = ["CONSOLE",4,context]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.RenderContext.CUSTOM = function(data) { var $x = ["CUSTOM",5,data]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.Renderer = function(window) {
	this.onRender = new lime.app.Event();
	this.onRenderContextRestored = new lime.app.Event();
	this.onRenderContextLost = new lime.app.Event();
	this.window = window;
	this.backend = new lime._backend.html5.HTML5Renderer(this);
	this.window.currentRenderer = this;
};
$hxClasses["lime.graphics.Renderer"] = lime.graphics.Renderer;
lime.graphics.Renderer.__name__ = ["lime","graphics","Renderer"];
lime.graphics.Renderer.prototype = {
	context: null
	,onRenderContextLost: null
	,onRenderContextRestored: null
	,onRender: null
	,window: null
	,backend: null
	,create: function() {
		this.backend.create();
	}
	,flip: function() {
		this.backend.flip();
	}
	,render: function() {
		this.backend.render();
	}
	,__class__: lime.graphics.Renderer
};
lime.graphics.format = {};
lime.graphics.format.BMP = function() { };
$hxClasses["lime.graphics.format.BMP"] = lime.graphics.format.BMP;
lime.graphics.format.BMP.__name__ = ["lime","graphics","format","BMP"];
lime.graphics.format.BMP.encode = function(image,type) {
	if(type == null) type = lime.graphics.format.BMPType.RGB;
	var fileHeaderLength = 14;
	var infoHeaderLength = 40;
	var pixelValuesLength = image.width * image.height * 4;
	switch(type[1]) {
	case 1:
		infoHeaderLength = 108;
		break;
	case 2:
		fileHeaderLength = 0;
		pixelValuesLength += image.width * image.height;
		break;
	case 0:
		pixelValuesLength = image.width * 3 + image.width * 3 % 4 + image.height * 3 + image.height * 3;
		break;
	}
	var data = new lime.utils.ByteArray(fileHeaderLength + infoHeaderLength + pixelValuesLength);
	if(fileHeaderLength > 0) {
		data.writeByte(66);
		data.writeByte(77);
		data.writeInt(data.length);
		data.writeShort(0);
		data.writeShort(0);
		data.writeInt(fileHeaderLength + infoHeaderLength);
	}
	data.writeInt(infoHeaderLength);
	data.writeInt(image.width);
	data.writeInt(type == lime.graphics.format.BMPType.ICO?image.height * 2:image.height);
	data.writeShort(1);
	data.writeShort(type == lime.graphics.format.BMPType.RGB?24:32);
	data.writeInt(type == lime.graphics.format.BMPType.BITFIELD?3:0);
	data.writeInt(pixelValuesLength);
	data.writeInt(11824);
	data.writeInt(11824);
	data.writeInt(0);
	data.writeInt(0);
	if(type == lime.graphics.format.BMPType.BITFIELD) {
		data.writeInt(16711680);
		data.writeInt(65280);
		data.writeInt(255);
		data.writeInt(-16777216);
		data.writeByte(32);
		data.writeByte(110);
		data.writeByte(105);
		data.writeByte(87);
		var _g = 0;
		while(_g < 48) {
			var i = _g++;
			data.writeByte(0);
		}
	}
	var pixels = image.getPixels(new lime.math.Rectangle(0,0,image.width,image.height),lime.graphics.PixelFormat.ARGB);
	var a;
	var r;
	var g;
	var b;
	switch(type[1]) {
	case 1:
		var _g1 = 0;
		var _g2 = image.height;
		while(_g1 < _g2) {
			var y = _g1++;
			pixels.position = (image.height - 1 - y) * 4 * image.width;
			var _g3 = 0;
			var _g21 = image.width;
			while(_g3 < _g21) {
				var x = _g3++;
				a = pixels.readByte();
				r = pixels.readByte();
				g = pixels.readByte();
				b = pixels.readByte();
				data.writeByte(b);
				data.writeByte(g);
				data.writeByte(r);
				data.writeByte(a);
			}
		}
		break;
	case 2:
		var andMask = new lime.utils.ByteArray(image.width * image.height);
		var _g11 = 0;
		var _g4 = image.height;
		while(_g11 < _g4) {
			var y1 = _g11++;
			pixels.position = (image.height - 1 - y1) * 4 * image.width;
			var _g31 = 0;
			var _g22 = image.width;
			while(_g31 < _g22) {
				var x1 = _g31++;
				a = pixels.readByte();
				r = pixels.readByte();
				g = pixels.readByte();
				b = pixels.readByte();
				data.writeByte(b);
				data.writeByte(g);
				data.writeByte(r);
				data.writeByte(a);
				andMask.writeByte(0);
			}
		}
		data.writeBytes(andMask);
		break;
	case 0:
		var _g12 = 0;
		var _g5 = image.height;
		while(_g12 < _g5) {
			var y2 = _g12++;
			pixels.position = (image.height - 1 - y2) * 4 * image.width;
			var _g32 = 0;
			var _g23 = image.width;
			while(_g32 < _g23) {
				var x2 = _g32++;
				a = pixels.readByte();
				r = pixels.readByte();
				g = pixels.readByte();
				b = pixels.readByte();
				data.writeByte(b);
				data.writeByte(g);
				data.writeByte(r);
			}
			var _g33 = 0;
			var _g24 = image.width * 3 % 4;
			while(_g33 < _g24) {
				var i1 = _g33++;
				data.writeByte(0);
			}
		}
		break;
	}
	return data;
};
lime.graphics.format.BMPType = $hxClasses["lime.graphics.format.BMPType"] = { __ename__ : true, __constructs__ : ["RGB","BITFIELD","ICO"] };
lime.graphics.format.BMPType.RGB = ["RGB",0];
lime.graphics.format.BMPType.RGB.toString = $estr;
lime.graphics.format.BMPType.RGB.__enum__ = lime.graphics.format.BMPType;
lime.graphics.format.BMPType.BITFIELD = ["BITFIELD",1];
lime.graphics.format.BMPType.BITFIELD.toString = $estr;
lime.graphics.format.BMPType.BITFIELD.__enum__ = lime.graphics.format.BMPType;
lime.graphics.format.BMPType.ICO = ["ICO",2];
lime.graphics.format.BMPType.ICO.toString = $estr;
lime.graphics.format.BMPType.ICO.__enum__ = lime.graphics.format.BMPType;
lime.graphics.format.JPEG = function() { };
$hxClasses["lime.graphics.format.JPEG"] = lime.graphics.format.JPEG;
lime.graphics.format.JPEG.__name__ = ["lime","graphics","format","JPEG"];
lime.graphics.format.JPEG.encode = function(image,quality) {
	return null;
};
lime.graphics.format.PNG = function() { };
$hxClasses["lime.graphics.format.PNG"] = lime.graphics.format.PNG;
lime.graphics.format.PNG.__name__ = ["lime","graphics","format","PNG"];
lime.graphics.format.PNG.encode = function(image) {
	return null;
};
lime.graphics.opengl = {};
lime.graphics.opengl.GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime.graphics.opengl.GL;
lime.graphics.opengl.GL.__name__ = ["lime","graphics","opengl","GL"];
lime.graphics.opengl.GL.__properties__ = {get_version:"get_version"}
lime.graphics.opengl.GL.version = null;
lime.graphics.opengl.GL.context = null;
lime.graphics.opengl.GL.activeTexture = function(texture) {
	lime.graphics.opengl.GL.context.activeTexture(texture);
};
lime.graphics.opengl.GL.attachShader = function(program,shader) {
	lime.graphics.opengl.GL.context.attachShader(program,shader);
};
lime.graphics.opengl.GL.bindAttribLocation = function(program,index,name) {
	lime.graphics.opengl.GL.context.bindAttribLocation(program,index,name);
};
lime.graphics.opengl.GL.bindBuffer = function(target,buffer) {
	lime.graphics.opengl.GL.context.bindBuffer(target,buffer);
};
lime.graphics.opengl.GL.bindFramebuffer = function(target,framebuffer) {
	lime.graphics.opengl.GL.context.bindFramebuffer(target,framebuffer);
};
lime.graphics.opengl.GL.bindRenderbuffer = function(target,renderbuffer) {
	lime.graphics.opengl.GL.context.bindRenderbuffer(target,renderbuffer);
};
lime.graphics.opengl.GL.bindTexture = function(target,texture) {
	lime.graphics.opengl.GL.context.bindTexture(target,texture);
};
lime.graphics.opengl.GL.blendColor = function(red,green,blue,alpha) {
	lime.graphics.opengl.GL.context.blendColor(red,green,blue,alpha);
};
lime.graphics.opengl.GL.blendEquation = function(mode) {
	lime.graphics.opengl.GL.context.blendEquation(mode);
};
lime.graphics.opengl.GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	lime.graphics.opengl.GL.context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime.graphics.opengl.GL.blendFunc = function(sfactor,dfactor) {
	lime.graphics.opengl.GL.context.blendFunc(sfactor,dfactor);
};
lime.graphics.opengl.GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	lime.graphics.opengl.GL.context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime.graphics.opengl.GL.bufferData = function(target,data,usage) {
	lime.graphics.opengl.GL.context.bufferData(target,data,usage);
};
lime.graphics.opengl.GL.bufferSubData = function(target,offset,data) {
	lime.graphics.opengl.GL.context.bufferSubData(target,offset,data);
};
lime.graphics.opengl.GL.checkFramebufferStatus = function(target) {
	return lime.graphics.opengl.GL.context.checkFramebufferStatus(target);
};
lime.graphics.opengl.GL.clear = function(mask) {
	lime.graphics.opengl.GL.context.clear(mask);
};
lime.graphics.opengl.GL.clearColor = function(red,green,blue,alpha) {
	lime.graphics.opengl.GL.context.clearColor(red,green,blue,alpha);
};
lime.graphics.opengl.GL.clearDepth = function(depth) {
	lime.graphics.opengl.GL.context.clearDepth(depth);
};
lime.graphics.opengl.GL.clearStencil = function(s) {
	lime.graphics.opengl.GL.context.clearStencil(s);
};
lime.graphics.opengl.GL.colorMask = function(red,green,blue,alpha) {
	lime.graphics.opengl.GL.context.colorMask(red,green,blue,alpha);
};
lime.graphics.opengl.GL.compileShader = function(shader) {
	lime.graphics.opengl.GL.context.compileShader(shader);
};
lime.graphics.opengl.GL.compressedTexImage2D = function(target,level,internalformat,width,height,border,data) {
	lime.graphics.opengl.GL.context.compressedTexImage2D(target,level,internalformat,width,height,border,data);
};
lime.graphics.opengl.GL.compressedTexSubImage2D = function(target,level,xoffset,yoffset,width,height,format,data) {
	lime.graphics.opengl.GL.context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,data);
};
lime.graphics.opengl.GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	lime.graphics.opengl.GL.context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime.graphics.opengl.GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	lime.graphics.opengl.GL.context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime.graphics.opengl.GL.createBuffer = function() {
	return lime.graphics.opengl.GL.context.createBuffer();
};
lime.graphics.opengl.GL.createFramebuffer = function() {
	return lime.graphics.opengl.GL.context.createFramebuffer();
};
lime.graphics.opengl.GL.createProgram = function() {
	return lime.graphics.opengl.GL.context.createProgram();
};
lime.graphics.opengl.GL.createRenderbuffer = function() {
	return lime.graphics.opengl.GL.context.createRenderbuffer();
};
lime.graphics.opengl.GL.createShader = function(type) {
	return lime.graphics.opengl.GL.context.createShader(type);
};
lime.graphics.opengl.GL.createTexture = function() {
	return lime.graphics.opengl.GL.context.createTexture();
};
lime.graphics.opengl.GL.cullFace = function(mode) {
	lime.graphics.opengl.GL.context.cullFace(mode);
};
lime.graphics.opengl.GL.deleteBuffer = function(buffer) {
	lime.graphics.opengl.GL.context.deleteBuffer(buffer);
};
lime.graphics.opengl.GL.deleteFramebuffer = function(framebuffer) {
	lime.graphics.opengl.GL.context.deleteFramebuffer(framebuffer);
};
lime.graphics.opengl.GL.deleteProgram = function(program) {
	lime.graphics.opengl.GL.context.deleteProgram(program);
};
lime.graphics.opengl.GL.deleteRenderbuffer = function(renderbuffer) {
	lime.graphics.opengl.GL.context.deleteRenderbuffer(renderbuffer);
};
lime.graphics.opengl.GL.deleteShader = function(shader) {
	lime.graphics.opengl.GL.context.deleteShader(shader);
};
lime.graphics.opengl.GL.deleteTexture = function(texture) {
	lime.graphics.opengl.GL.context.deleteTexture(texture);
};
lime.graphics.opengl.GL.depthFunc = function(func) {
	lime.graphics.opengl.GL.context.depthFunc(func);
};
lime.graphics.opengl.GL.depthMask = function(flag) {
	lime.graphics.opengl.GL.context.depthMask(flag);
};
lime.graphics.opengl.GL.depthRange = function(zNear,zFar) {
	lime.graphics.opengl.GL.context.depthRange(zNear,zFar);
};
lime.graphics.opengl.GL.detachShader = function(program,shader) {
	lime.graphics.opengl.GL.context.detachShader(program,shader);
};
lime.graphics.opengl.GL.disable = function(cap) {
	lime.graphics.opengl.GL.context.disable(cap);
};
lime.graphics.opengl.GL.disableVertexAttribArray = function(index) {
	lime.graphics.opengl.GL.context.disableVertexAttribArray(index);
};
lime.graphics.opengl.GL.drawArrays = function(mode,first,count) {
	lime.graphics.opengl.GL.context.drawArrays(mode,first,count);
};
lime.graphics.opengl.GL.drawElements = function(mode,count,type,offset) {
	lime.graphics.opengl.GL.context.drawElements(mode,count,type,offset);
};
lime.graphics.opengl.GL.enable = function(cap) {
	lime.graphics.opengl.GL.context.enable(cap);
};
lime.graphics.opengl.GL.enableVertexAttribArray = function(index) {
	lime.graphics.opengl.GL.context.enableVertexAttribArray(index);
};
lime.graphics.opengl.GL.finish = function() {
	lime.graphics.opengl.GL.context.finish();
};
lime.graphics.opengl.GL.flush = function() {
	lime.graphics.opengl.GL.context.flush();
};
lime.graphics.opengl.GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	lime.graphics.opengl.GL.context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime.graphics.opengl.GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	lime.graphics.opengl.GL.context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime.graphics.opengl.GL.frontFace = function(mode) {
	lime.graphics.opengl.GL.context.frontFace(mode);
};
lime.graphics.opengl.GL.generateMipmap = function(target) {
	lime.graphics.opengl.GL.context.generateMipmap(target);
};
lime.graphics.opengl.GL.getActiveAttrib = function(program,index) {
	return lime.graphics.opengl.GL.context.getActiveAttrib(program,index);
};
lime.graphics.opengl.GL.getActiveUniform = function(program,index) {
	return lime.graphics.opengl.GL.context.getActiveUniform(program,index);
};
lime.graphics.opengl.GL.getAttachedShaders = function(program) {
	return lime.graphics.opengl.GL.context.getAttachedShaders(program);
};
lime.graphics.opengl.GL.getAttribLocation = function(program,name) {
	return lime.graphics.opengl.GL.context.getAttribLocation(program,name);
};
lime.graphics.opengl.GL.getBufferParameter = function(target,pname) {
	return lime.graphics.opengl.GL.context.getBufferParameter(target,pname);
};
lime.graphics.opengl.GL.getContextAttributes = function() {
	return lime.graphics.opengl.GL.context.getContextAttributes();
};
lime.graphics.opengl.GL.getError = function() {
	return lime.graphics.opengl.GL.context.getError();
};
lime.graphics.opengl.GL.getExtension = function(name) {
	return lime.graphics.opengl.GL.context.getExtension(name);
};
lime.graphics.opengl.GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return lime.graphics.opengl.GL.context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime.graphics.opengl.GL.getParameter = function(pname) {
	return lime.graphics.opengl.GL.context.getParameter(pname);
};
lime.graphics.opengl.GL.getProgramInfoLog = function(program) {
	return lime.graphics.opengl.GL.context.getProgramInfoLog(program);
};
lime.graphics.opengl.GL.getProgramParameter = function(program,pname) {
	return lime.graphics.opengl.GL.context.getProgramParameter(program,pname);
};
lime.graphics.opengl.GL.getRenderbufferParameter = function(target,pname) {
	return lime.graphics.opengl.GL.context.getRenderbufferParameter(target,pname);
};
lime.graphics.opengl.GL.getShaderInfoLog = function(shader) {
	return lime.graphics.opengl.GL.context.getShaderInfoLog(shader);
};
lime.graphics.opengl.GL.getShaderParameter = function(shader,pname) {
	return lime.graphics.opengl.GL.context.getShaderParameter(shader,pname);
};
lime.graphics.opengl.GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return lime.graphics.opengl.GL.context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime.graphics.opengl.GL.getShaderSource = function(shader) {
	return lime.graphics.opengl.GL.context.getShaderSource(shader);
};
lime.graphics.opengl.GL.getSupportedExtensions = function() {
	return lime.graphics.opengl.GL.context.getSupportedExtensions();
};
lime.graphics.opengl.GL.getTexParameter = function(target,pname) {
	return lime.graphics.opengl.GL.context.getTexParameter(target,pname);
};
lime.graphics.opengl.GL.getUniform = function(program,location) {
	return lime.graphics.opengl.GL.context.getUniform(program,location);
};
lime.graphics.opengl.GL.getUniformLocation = function(program,name) {
	return lime.graphics.opengl.GL.context.getUniformLocation(program,name);
};
lime.graphics.opengl.GL.getVertexAttrib = function(index,pname) {
	return lime.graphics.opengl.GL.context.getVertexAttrib(index,pname);
};
lime.graphics.opengl.GL.getVertexAttribOffset = function(index,pname) {
	return lime.graphics.opengl.GL.context.getVertexAttribOffset(index,pname);
};
lime.graphics.opengl.GL.hint = function(target,mode) {
	lime.graphics.opengl.GL.context.hint(target,mode);
};
lime.graphics.opengl.GL.isBuffer = function(buffer) {
	return lime.graphics.opengl.GL.context.isBuffer(buffer);
};
lime.graphics.opengl.GL.isContextLost = function() {
	return lime.graphics.opengl.GL.context.isContextLost();
};
lime.graphics.opengl.GL.isEnabled = function(cap) {
	return lime.graphics.opengl.GL.context.isEnabled(cap);
};
lime.graphics.opengl.GL.isFramebuffer = function(framebuffer) {
	return lime.graphics.opengl.GL.context.isFramebuffer(framebuffer);
};
lime.graphics.opengl.GL.isProgram = function(program) {
	return lime.graphics.opengl.GL.context.isProgram(program);
};
lime.graphics.opengl.GL.isRenderbuffer = function(renderbuffer) {
	return lime.graphics.opengl.GL.context.isRenderbuffer(renderbuffer);
};
lime.graphics.opengl.GL.isShader = function(shader) {
	return lime.graphics.opengl.GL.context.isShader(shader);
};
lime.graphics.opengl.GL.isTexture = function(texture) {
	return lime.graphics.opengl.GL.context.isTexture(texture);
};
lime.graphics.opengl.GL.lineWidth = function(width) {
	lime.graphics.opengl.GL.context.lineWidth(width);
};
lime.graphics.opengl.GL.linkProgram = function(program) {
	lime.graphics.opengl.GL.context.linkProgram(program);
};
lime.graphics.opengl.GL.pixelStorei = function(pname,param) {
	lime.graphics.opengl.GL.context.pixelStorei(pname,param);
};
lime.graphics.opengl.GL.polygonOffset = function(factor,units) {
	lime.graphics.opengl.GL.context.polygonOffset(factor,units);
};
lime.graphics.opengl.GL.readPixels = function(x,y,width,height,format,type,pixels) {
	lime.graphics.opengl.GL.context.readPixels(x,y,width,height,format,type,pixels);
};
lime.graphics.opengl.GL.renderbufferStorage = function(target,internalformat,width,height) {
	lime.graphics.opengl.GL.context.renderbufferStorage(target,internalformat,width,height);
};
lime.graphics.opengl.GL.sampleCoverage = function(value,invert) {
	lime.graphics.opengl.GL.context.sampleCoverage(value,invert);
};
lime.graphics.opengl.GL.scissor = function(x,y,width,height) {
	lime.graphics.opengl.GL.context.scissor(x,y,width,height);
};
lime.graphics.opengl.GL.shaderSource = function(shader,source) {
	lime.graphics.opengl.GL.context.shaderSource(shader,source);
};
lime.graphics.opengl.GL.stencilFunc = function(func,ref,mask) {
	lime.graphics.opengl.GL.context.stencilFunc(func,ref,mask);
};
lime.graphics.opengl.GL.stencilFuncSeparate = function(face,func,ref,mask) {
	lime.graphics.opengl.GL.context.stencilFuncSeparate(face,func,ref,mask);
};
lime.graphics.opengl.GL.stencilMask = function(mask) {
	lime.graphics.opengl.GL.context.stencilMask(mask);
};
lime.graphics.opengl.GL.stencilMaskSeparate = function(face,mask) {
	lime.graphics.opengl.GL.context.stencilMaskSeparate(face,mask);
};
lime.graphics.opengl.GL.stencilOp = function(fail,zfail,zpass) {
	lime.graphics.opengl.GL.context.stencilOp(fail,zfail,zpass);
};
lime.graphics.opengl.GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	lime.graphics.opengl.GL.context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime.graphics.opengl.GL.texImage2D = function(target,level,internalformat,width,height,border,format,type,pixels) {
	lime.graphics.opengl.GL.context.texImage2D(target,level,internalformat,width,height,border,format,type,pixels);
};
lime.graphics.opengl.GL.texParameterf = function(target,pname,param) {
	lime.graphics.opengl.GL.context.texParameterf(target,pname,param);
};
lime.graphics.opengl.GL.texParameteri = function(target,pname,param) {
	lime.graphics.opengl.GL.context.texParameteri(target,pname,param);
};
lime.graphics.opengl.GL.texSubImage2D = function(target,level,xoffset,yoffset,width,height,format,type,pixels) {
	lime.graphics.opengl.GL.context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,pixels);
};
lime.graphics.opengl.GL.uniform1f = function(location,x) {
	lime.graphics.opengl.GL.context.uniform1f(location,x);
};
lime.graphics.opengl.GL.uniform1fv = function(location,x) {
	lime.graphics.opengl.GL.context.uniform1fv(location,x);
};
lime.graphics.opengl.GL.uniform1i = function(location,x) {
	lime.graphics.opengl.GL.context.uniform1i(location,x);
};
lime.graphics.opengl.GL.uniform1iv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform1iv(location,v);
};
lime.graphics.opengl.GL.uniform2f = function(location,x,y) {
	lime.graphics.opengl.GL.context.uniform2f(location,x,y);
};
lime.graphics.opengl.GL.uniform2fv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform2fv(location,v);
};
lime.graphics.opengl.GL.uniform2i = function(location,x,y) {
	lime.graphics.opengl.GL.context.uniform2i(location,x,y);
};
lime.graphics.opengl.GL.uniform2iv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform2iv(location,v);
};
lime.graphics.opengl.GL.uniform3f = function(location,x,y,z) {
	lime.graphics.opengl.GL.context.uniform3f(location,x,y,z);
};
lime.graphics.opengl.GL.uniform3fv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform3fv(location,v);
};
lime.graphics.opengl.GL.uniform3i = function(location,x,y,z) {
	lime.graphics.opengl.GL.context.uniform3i(location,x,y,z);
};
lime.graphics.opengl.GL.uniform3iv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform3iv(location,v);
};
lime.graphics.opengl.GL.uniform4f = function(location,x,y,z,w) {
	lime.graphics.opengl.GL.context.uniform4f(location,x,y,z,w);
};
lime.graphics.opengl.GL.uniform4fv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform4fv(location,v);
};
lime.graphics.opengl.GL.uniform4i = function(location,x,y,z,w) {
	lime.graphics.opengl.GL.context.uniform4i(location,x,y,z,w);
};
lime.graphics.opengl.GL.uniform4iv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform4iv(location,v);
};
lime.graphics.opengl.GL.uniformMatrix2fv = function(location,transpose,v) {
	lime.graphics.opengl.GL.context.uniformMatrix2fv(location,transpose,v);
};
lime.graphics.opengl.GL.uniformMatrix3fv = function(location,transpose,v) {
	lime.graphics.opengl.GL.context.uniformMatrix3fv(location,transpose,v);
};
lime.graphics.opengl.GL.uniformMatrix4fv = function(location,transpose,v) {
	lime.graphics.opengl.GL.context.uniformMatrix4fv(location,transpose,v);
};
lime.graphics.opengl.GL.useProgram = function(program) {
	lime.graphics.opengl.GL.context.useProgram(program);
};
lime.graphics.opengl.GL.validateProgram = function(program) {
	lime.graphics.opengl.GL.context.validateProgram(program);
};
lime.graphics.opengl.GL.vertexAttrib1f = function(indx,x) {
	lime.graphics.opengl.GL.context.vertexAttrib1f(indx,x);
};
lime.graphics.opengl.GL.vertexAttrib1fv = function(indx,values) {
	lime.graphics.opengl.GL.context.vertexAttrib1fv(indx,values);
};
lime.graphics.opengl.GL.vertexAttrib2f = function(indx,x,y) {
	lime.graphics.opengl.GL.context.vertexAttrib2f(indx,x,y);
};
lime.graphics.opengl.GL.vertexAttrib2fv = function(indx,values) {
	lime.graphics.opengl.GL.context.vertexAttrib2fv(indx,values);
};
lime.graphics.opengl.GL.vertexAttrib3f = function(indx,x,y,z) {
	lime.graphics.opengl.GL.context.vertexAttrib3f(indx,x,y,z);
};
lime.graphics.opengl.GL.vertexAttrib3fv = function(indx,values) {
	lime.graphics.opengl.GL.context.vertexAttrib3fv(indx,values);
};
lime.graphics.opengl.GL.vertexAttrib4f = function(indx,x,y,z,w) {
	lime.graphics.opengl.GL.context.vertexAttrib4f(indx,x,y,z,w);
};
lime.graphics.opengl.GL.vertexAttrib4fv = function(indx,values) {
	lime.graphics.opengl.GL.context.vertexAttrib4fv(indx,values);
};
lime.graphics.opengl.GL.vertexAttribPointer = function(indx,size,type,normalized,stride,offset) {
	lime.graphics.opengl.GL.context.vertexAttribPointer(indx,size,type,normalized,stride,offset);
};
lime.graphics.opengl.GL.viewport = function(x,y,width,height) {
	lime.graphics.opengl.GL.context.viewport(x,y,width,height);
};
lime.graphics.opengl.GL.get_version = function() {
	return 2;
};
lime.graphics.utils = {};
lime.graphics.utils.ImageCanvasUtil = function() { };
$hxClasses["lime.graphics.utils.ImageCanvasUtil"] = lime.graphics.utils.ImageCanvasUtil;
lime.graphics.utils.ImageCanvasUtil.__name__ = ["lime","graphics","utils","ImageCanvasUtil"];
lime.graphics.utils.ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime.graphics.utils.ImageCanvasUtil.convertToCanvas = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime.graphics.utils.ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	}
};
lime.graphics.utils.ImageCanvasUtil.convertToData = function(image) {
	if(image.buffer.data == null) {
		lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
		lime.graphics.utils.ImageCanvasUtil.sync(image);
		lime.graphics.utils.ImageCanvasUtil.createImageData(image);
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
};
lime.graphics.utils.ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(sourceImage);
	lime.graphics.utils.ImageCanvasUtil.createImageData(sourceImage);
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime.graphics.utils.ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) alphaPoint = new lime.math.Vector2();
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime.math.Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime.math.Vector2(sourceRect.x,sourceRect.y),lime.graphics.ImageChannel.ALPHA,lime.graphics.ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime.graphics.utils.ImageCanvasUtil.sync(image);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
	}
	lime.graphics.utils.ImageCanvasUtil.sync(sourceImage);
	if(sourceImage.buffer.get_src() != null) image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
};
lime.graphics.utils.ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) buffer.__srcCanvas.setAttribute("moz-opaque","true");
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		buffer.__srcContext.mozImageSmoothingEnabled = false;
		buffer.__srcContext.webkitImageSmoothingEnabled = false;
		buffer.__srcContext.imageSmoothingEnabled = false;
	}
};
lime.graphics.utils.ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.data == null) {
		buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
		buffer.data = new Uint8Array(buffer.__srcImageData.data.buffer);
	}
};
lime.graphics.utils.ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.sync(image);
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && (color & 255) == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	var r;
	var g;
	var b;
	var a;
	if(format == lime.graphics.PixelFormat.ARGB) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		if(image.get_transparent()) a = color >> 24 & 255; else a = 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) a = color & 255; else a = 255;
	}
	image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
	image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
};
lime.graphics.utils.ImageCanvasUtil.floodFill = function(image,x,y,color,format) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.floodFill(image,x,y,color,format);
};
lime.graphics.utils.ImageCanvasUtil.getPixel = function(image,x,y,format) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	return lime.graphics.utils.ImageDataUtil.getPixel(image,x,y,format);
};
lime.graphics.utils.ImageCanvasUtil.getPixel32 = function(image,x,y,format) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	return lime.graphics.utils.ImageDataUtil.getPixel32(image,x,y,format);
};
lime.graphics.utils.ImageCanvasUtil.getPixels = function(image,rect,format) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	return lime.graphics.utils.ImageDataUtil.getPixels(image,rect,format);
};
lime.graphics.utils.ImageCanvasUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(sourceImage);
	lime.graphics.utils.ImageCanvasUtil.createImageData(sourceImage);
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.merge(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
};
lime.graphics.utils.ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime.graphics.utils.ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		lime.graphics.utils.ImageCanvasUtil.sync(image);
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime.graphics.utils.ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
};
lime.graphics.utils.ImageCanvasUtil.setPixel = function(image,x,y,color,format) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.setPixel(image,x,y,color,format);
};
lime.graphics.utils.ImageCanvasUtil.setPixel32 = function(image,x,y,color,format) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.setPixel32(image,x,y,color,format);
};
lime.graphics.utils.ImageCanvasUtil.setPixels = function(image,rect,byteArray,format) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.setPixels(image,rect,byteArray,format);
};
lime.graphics.utils.ImageCanvasUtil.sync = function(image) {
	if(image.dirty && image.type != lime.graphics.ImageType.DATA) {
		image.buffer.__srcContext.putImageData(image.buffer.__srcImageData,0,0);
		image.buffer.data = null;
		image.dirty = false;
	}
};
lime.graphics.utils.ImageDataUtil = function() { };
$hxClasses["lime.graphics.utils.ImageDataUtil"] = lime.graphics.utils.ImageDataUtil;
lime.graphics.utils.ImageDataUtil.__name__ = ["lime","graphics","utils","ImageDataUtil"];
lime.graphics.utils.ImageDataUtil.__alpha16 = null;
lime.graphics.utils.ImageDataUtil.__clamp = null;
lime.graphics.utils.ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	if(data == null) return;
	var stride = image.buffer.width * 4;
	var offset;
	var rowStart = Std["int"](rect.get_top() + image.offsetY);
	var rowEnd = Std["int"](rect.get_bottom() + image.offsetY);
	var columnStart = Std["int"](rect.get_left() + image.offsetX);
	var columnEnd = Std["int"](rect.get_right() + image.offsetX);
	var r;
	var g;
	var b;
	var a;
	var ex = 0;
	var _g = rowStart;
	while(_g < rowEnd) {
		var row = _g++;
		var _g1 = columnStart;
		while(_g1 < columnEnd) {
			var column = _g1++;
			offset = row * stride + column * 4;
			a = data[offset + 3] * colorMatrix[18] + colorMatrix[19] * 255 | 0;
			if(a > 255) ex = a - 255; else ex = 0;
			b = data[offset + 2] * colorMatrix[12] + colorMatrix[14] * 255 + ex | 0;
			if(b > 255) ex = b - 255; else ex = 0;
			g = data[offset + 1] * colorMatrix[6] + colorMatrix[9] * 255 + ex | 0;
			if(g > 255) ex = g - 255; else ex = 0;
			r = data[offset] * colorMatrix[0] + colorMatrix[4] * 255 + ex | 0;
			if(r > 255) data[offset] = 255; else data[offset] = r;
			if(g > 255) data[offset + 1] = 255; else data[offset + 1] = g;
			if(b > 255) data[offset + 2] = 255; else data[offset + 2] = b;
			if(a > 255) data[offset + 3] = 255; else data[offset + 3] = a;
		}
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel[1]) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel[1]) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) return;
	var srcStride = sourceImage.buffer.width * 4 | 0;
	var srcPosition = (sourceRect.x + sourceImage.offsetX) * 4 + srcStride * (sourceRect.y + sourceImage.offsetY) + srcIdx | 0;
	var srcRowOffset = srcStride - (4 * (sourceRect.width + sourceImage.offsetX) | 0);
	var srcRowEnd = 4 * (sourceRect.x + sourceImage.offsetX + sourceRect.width) | 0;
	var srcData1 = sourceImage.buffer.data;
	var destStride = image.buffer.width * 4 | 0;
	var destPosition = (destPoint.x + image.offsetX) * 4 + destStride * (destPoint.y + image.offsetY) + destIdx | 0;
	var destRowOffset = destStride - (4 * (sourceRect.width + image.offsetX) | 0);
	var destRowEnd = 4 * (destPoint.x + image.offsetX + sourceRect.width) | 0;
	var destData1 = image.buffer.data;
	var length = sourceRect.width * sourceRect.height | 0;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		destData1[destPosition] = srcData1[srcPosition];
		srcPosition += 4;
		destPosition += 4;
		if(srcPosition % srcStride > srcRowEnd) srcPosition += srcRowOffset;
		if(destPosition % destStride > destRowEnd) destPosition += destRowOffset;
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) alphaPoint = new lime.math.Vector2();
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime.math.Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime.math.Vector2(sourceRect.x,sourceRect.y),lime.graphics.ImageChannel.ALPHA,lime.graphics.ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	var rowOffset = destPoint.y + image.offsetY - sourceRect.y - sourceImage.offsetY | 0;
	var columnOffset = destPoint.x + image.offsetX - sourceRect.x - sourceImage.offsetY | 0;
	var sourceData = sourceImage.buffer.data;
	var sourceStride = sourceImage.buffer.width * 4;
	var sourceOffset = 0;
	var data = image.buffer.data;
	var stride = image.buffer.width * 4;
	var offset = 0;
	if(!mergeAlpha || !sourceImage.get_transparent()) {
		var _g1 = Std["int"](sourceRect.get_top() + sourceImage.offsetY);
		var _g = Std["int"](sourceRect.get_bottom() + sourceImage.offsetY);
		while(_g1 < _g) {
			var row = _g1++;
			var _g3 = Std["int"](sourceRect.get_left() + sourceImage.offsetX);
			var _g2 = Std["int"](sourceRect.get_right() + sourceImage.offsetX);
			while(_g3 < _g2) {
				var column = _g3++;
				sourceOffset = row * sourceStride + column * 4;
				offset = (row + rowOffset) * stride + (column + columnOffset) * 4;
				data[offset] = sourceData[sourceOffset];
				data[offset + 1] = sourceData[sourceOffset + 1];
				data[offset + 2] = sourceData[sourceOffset + 2];
				data[offset + 3] = sourceData[sourceOffset + 3];
			}
		}
	} else {
		var sourceAlpha;
		var oneMinusSourceAlpha;
		var _g11 = Std["int"](sourceRect.get_top() + sourceImage.offsetY);
		var _g4 = Std["int"](sourceRect.get_bottom() + sourceImage.offsetY);
		while(_g11 < _g4) {
			var row1 = _g11++;
			var _g31 = Std["int"](sourceRect.get_left() + sourceImage.offsetX);
			var _g21 = Std["int"](sourceRect.get_right() + sourceImage.offsetX);
			while(_g31 < _g21) {
				var column1 = _g31++;
				sourceOffset = row1 * sourceStride + column1 * 4;
				offset = (row1 + rowOffset) * stride + (column1 + columnOffset) * 4;
				sourceAlpha = sourceData[sourceOffset + 3] / 255;
				oneMinusSourceAlpha = 1 - sourceAlpha;
				data[offset] = lime.graphics.utils.ImageDataUtil.__clamp[sourceData[sourceOffset] + data[offset] * oneMinusSourceAlpha | 0];
				data[offset + 1] = lime.graphics.utils.ImageDataUtil.__clamp[sourceData[sourceOffset + 1] + data[offset + 1] * oneMinusSourceAlpha | 0];
				data[offset + 2] = lime.graphics.utils.ImageDataUtil.__clamp[sourceData[sourceOffset + 2] + data[offset + 2] * oneMinusSourceAlpha | 0];
				data[offset + 3] = lime.graphics.utils.ImageDataUtil.__clamp[sourceData[sourceOffset + 3] + data[offset + 3] * oneMinusSourceAlpha | 0];
			}
		}
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.fillRect = function(image,rect,color,format) {
	var r;
	var g;
	var b;
	var a;
	if(format == lime.graphics.PixelFormat.ARGB) {
		if(image.get_transparent()) a = color >> 24 & 255; else a = 255;
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) a = color & 255; else a = 255;
	}
	var rgba = r | g << 8 | b << 16 | a << 24;
	var data = image.buffer.data;
	if(data == null) return;
	if(rect.width == image.buffer.width && rect.height == image.buffer.height && rect.x == 0 && rect.y == 0 && image.offsetX == 0 && image.offsetY == 0) {
		var length = image.buffer.width * image.buffer.height;
		var j = 0;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			j = i * 4;
			data[j] = r;
			data[j + 1] = g;
			data[j + 2] = b;
			data[j + 3] = a;
		}
	} else {
		var stride = image.buffer.width * 4;
		var offset;
		var rowStart = rect.y + image.offsetY | 0;
		var rowEnd = Std["int"](rect.get_bottom() + image.offsetY);
		var columnStart = rect.x + image.offsetX | 0;
		var columnEnd = Std["int"](rect.get_right() + image.offsetX);
		var _g1 = rowStart;
		while(_g1 < rowEnd) {
			var row = _g1++;
			var _g11 = columnStart;
			while(_g11 < columnEnd) {
				var column = _g11++;
				offset = row * stride + column * 4;
				data[offset] = r;
				data[offset + 1] = g;
				data[offset + 2] = b;
				data[offset + 3] = a;
			}
		}
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.floodFill = function(image,x,y,color,format) {
	var data = image.buffer.data;
	if(data == null) return;
	if(format == lime.graphics.PixelFormat.ARGB) color = (color & 16777215) << 8 | color >> 24 & 255;
	var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
	var hitColorR = data[offset];
	var hitColorG = data[offset + 1];
	var hitColorB = data[offset + 2];
	var hitColorA;
	if(image.get_transparent()) hitColorA = data[offset + 3]; else hitColorA = 255;
	var r = color >> 24 & 255;
	var g = color >> 16 & 255;
	var b = color >> 8 & 255;
	var a;
	if(image.get_transparent()) a = color & 255; else a = 255;
	if(hitColorR == r && hitColorG == g && hitColorB == b && hitColorA == a) return;
	var dx = [0,-1,1,0];
	var dy = [-1,0,0,1];
	var minX = -image.offsetX;
	var minY = -image.offsetY;
	var maxX = minX + image.width;
	var maxY = minY + image.height;
	var queue = new Array();
	queue.push(x);
	queue.push(y);
	while(queue.length > 0) {
		var curPointY = queue.pop();
		var curPointX = queue.pop();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			var nextPointX = curPointX + dx[i];
			var nextPointY = curPointY + dy[i];
			if(nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) continue;
			var nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
			if(data[nextPointOffset] == hitColorR && data[nextPointOffset + 1] == hitColorG && data[nextPointOffset + 2] == hitColorB && data[nextPointOffset + 3] == hitColorA) {
				data[nextPointOffset] = r;
				data[nextPointOffset + 1] = g;
				data[nextPointOffset + 2] = b;
				data[nextPointOffset + 3] = a;
				queue.push(nextPointX);
				queue.push(nextPointY);
			}
		}
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.getPixel = function(image,x,y,format) {
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var pixel;
	if(image.get_premultiplied()) {
		var unmultiply = 255.0 / data[offset + 3];
		pixel = lime.graphics.utils.ImageDataUtil.__clamp[data[offset] * unmultiply | 0] << 24 | lime.graphics.utils.ImageDataUtil.__clamp[data[offset + 1] * unmultiply | 0] << 16 | lime.graphics.utils.ImageDataUtil.__clamp[data[offset + 2] * unmultiply | 0] << 8;
	} else pixel = data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8;
	if(format == lime.graphics.PixelFormat.ARGB) return pixel >> 8 & 16777215; else return pixel;
};
lime.graphics.utils.ImageDataUtil.getPixel32 = function(image,x,y,format) {
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var a;
	if(image.get_transparent()) a = data[offset + 3]; else a = 255;
	var r;
	var g;
	var b;
	if(image.get_premultiplied() && a != 0) {
		var unmultiply = 255.0 / a;
		var index = Math.round(data[offset] * unmultiply);
		r = lime.graphics.utils.ImageDataUtil.__clamp[index];
		var index1 = Math.round(data[offset + 1] * unmultiply);
		g = lime.graphics.utils.ImageDataUtil.__clamp[index1];
		var index2 = Math.round(data[offset + 2] * unmultiply);
		b = lime.graphics.utils.ImageDataUtil.__clamp[index2];
	} else {
		r = data[offset];
		g = data[offset + 1];
		b = data[offset + 2];
	}
	if(format == lime.graphics.PixelFormat.ARGB) return a << 24 | r << 16 | g << 8 | b; else return r << 24 | g << 16 | b << 8 | a;
};
lime.graphics.utils.ImageDataUtil.getPixels = function(image,rect,format) {
	if(image.buffer.data == null) return null;
	var length = rect.width * rect.height | 0;
	var byteArray = new lime.utils.ByteArray(length * 4);
	byteArray.position = 0;
	var srcData = image.buffer.data;
	var srcStride = image.buffer.width * 4 | 0;
	var srcPosition = rect.x * 4 + srcStride * rect.y | 0;
	var srcRowOffset = srcStride - (4 * rect.width | 0);
	var srcRowEnd = 4 * (rect.x + rect.width) | 0;
	byteArray.set_length(length * 4);
	if(format == lime.graphics.PixelFormat.ARGB) {
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			byteArray.__set(i * 4 + 1,srcData[srcPosition++]);
			byteArray.__set(i * 4 + 2,srcData[srcPosition++]);
			byteArray.__set(i * 4 + 3,srcData[srcPosition++]);
			byteArray.__set(i * 4,srcData[srcPosition++]);
			if(srcPosition % srcStride > srcRowEnd) srcPosition += srcRowOffset;
		}
	} else {
		var _g1 = 0;
		while(_g1 < length) {
			var i1 = _g1++;
			byteArray.__set(i1 * 4,srcData[srcPosition++]);
			byteArray.__set(i1 * 4 + 1,srcData[srcPosition++]);
			byteArray.__set(i1 * 4 + 2,srcData[srcPosition++]);
			byteArray.__set(i1 * 4 + 3,srcData[srcPosition++]);
			if(srcPosition % srcStride > srcRowEnd) srcPosition += srcRowOffset;
		}
	}
	byteArray.position = 0;
	return byteArray;
};
lime.graphics.utils.ImageDataUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	if(image.buffer.data == null || sourceImage.buffer.data == null) return;
	var rowOffset = destPoint.y + image.offsetY - sourceRect.y - sourceImage.offsetY | 0;
	var columnOffset = destPoint.x + image.offsetX - sourceRect.x - sourceImage.offsetY | 0;
	var sourceData = sourceImage.buffer.data;
	var sourceStride = sourceImage.buffer.width * 4;
	var sourceOffset = 0;
	var data = image.buffer.data;
	var stride = image.buffer.width * 4;
	var offset = 0;
	var _g1 = Std["int"](sourceRect.get_top() + sourceImage.offsetY);
	var _g = Std["int"](sourceRect.get_bottom() + sourceImage.offsetY);
	while(_g1 < _g) {
		var row = _g1++;
		var _g3 = Std["int"](sourceRect.get_left() + sourceImage.offsetX);
		var _g2 = Std["int"](sourceRect.get_right() + sourceImage.offsetX);
		while(_g3 < _g2) {
			var column = _g3++;
			sourceOffset = row * sourceStride + column * 4;
			offset = (row + rowOffset) * stride + (column + columnOffset) * 4;
			data[offset] = (sourceData[offset] * redMultiplier + data[offset] * (256 - redMultiplier)) / 256 | 0;
			data[offset + 1] = (sourceData[offset + 1] * greenMultiplier + data[offset + 1] * (256 - greenMultiplier)) / 256 | 0;
			data[offset + 2] = (sourceData[offset + 2] * blueMultiplier + data[offset + 2] * (256 - blueMultiplier)) / 256 | 0;
			data[offset + 3] = (sourceData[offset + 3] * alphaMultiplier + data[offset + 3] * (256 - alphaMultiplier)) / 256 | 0;
		}
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) return;
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		index = i * 4;
		a16 = lime.graphics.utils.ImageDataUtil.__alpha16[data[index + 3]];
		data[index] = data[index] * a16 >> 16;
		data[index + 1] = data[index + 1] * a16 >> 16;
		data[index + 2] = data[index + 2] * a16 >> 16;
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.width == newWidth && buffer.height == newHeight) return;
	var newBuffer = new lime.graphics.ImageBuffer(new Uint8Array(newWidth * newHeight * 4),newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g = 0;
	while(_g < newHeight) {
		var y = _g++;
		var _g1 = 0;
		while(_g1 < newWidth) {
			var x = _g1++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			if(sourceX < imageWidth - 1) sourceIndexX = sourceIndex + 4; else sourceIndexX = sourceIndex;
			if(sourceY < imageHeight - 1) sourceIndexY = sourceIndex + imageWidth * 4; else sourceIndexY = sourceIndex;
			if(sourceIndexX != sourceIndex) sourceIndexXY = sourceIndexY + 4; else sourceIndexXY = sourceIndexY;
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			newData[index] = (data[sourceIndex] * uOpposite + data[sourceIndexX] * uRatio) * vOpposite + (data[sourceIndexY] * uOpposite + data[sourceIndexXY] * uRatio) * vRatio | 0;
			newData[index + 1] = (data[sourceIndex + 1] * uOpposite + data[sourceIndexX + 1] * uRatio) * vOpposite + (data[sourceIndexY + 1] * uOpposite + data[sourceIndexXY + 1] * uRatio) * vRatio | 0;
			newData[index + 2] = (data[sourceIndex + 2] * uOpposite + data[sourceIndexX + 2] * uRatio) * vOpposite + (data[sourceIndexY + 2] * uOpposite + data[sourceIndexXY + 2] * uRatio) * vRatio | 0;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) newData[index + 3] = 0; else newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newBuffer.data;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime.graphics.utils.ImageDataUtil.resizeBuffer = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var data = image.get_data();
	var newData = new Uint8Array(newWidth * newHeight * 4);
	var sourceIndex;
	var index;
	var _g1 = 0;
	var _g = buffer.height;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = buffer.width;
		while(_g3 < _g2) {
			var x = _g3++;
			sourceIndex = (y * buffer.width + x) * 4;
			index = (y * newWidth + x) * 4;
			newData[index] = data[sourceIndex];
			newData[index + 1] = data[sourceIndex + 1];
			newData[index + 2] = data[sourceIndex + 2];
			newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime.graphics.utils.ImageDataUtil.setPixel = function(image,x,y,color,format) {
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(format == null || format == lime.graphics.PixelFormat.RGBA) color = color >> 8;
	data[offset] = (color & 16711680) >>> 16;
	data[offset + 1] = (color & 65280) >>> 8;
	data[offset + 2] = color & 255;
	if(image.get_transparent()) data[offset + 3] = 255;
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.setPixel32 = function(image,x,y,color,format) {
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var a;
	var r;
	var g;
	var b;
	if(format == lime.graphics.PixelFormat.ARGB) {
		if(image.get_transparent()) a = color >> 24 & 255; else a = 255;
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) a = color & 255; else a = 255;
	}
	if(image.get_transparent() && image.get_premultiplied()) {
		var a16 = lime.graphics.utils.ImageDataUtil.__alpha16[a];
		data[offset] = r * a16 >> 16;
		data[offset + 1] = g * a16 >> 16;
		data[offset + 2] = b * a16 >> 16;
		data[offset + 3] = a;
	} else {
		data[offset] = r;
		data[offset + 1] = g;
		data[offset + 2] = b;
		data[offset + 3] = a;
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.setPixels = function(image,rect,byteArray,format) {
	if(image.buffer.data == null) return;
	var len = Math.round(rect.width * rect.height);
	var data = image.buffer.data;
	var offset = Math.round(image.buffer.width * (rect.y + image.offsetX) + (rect.x + image.offsetY));
	var pos = offset * 4;
	var boundR = Math.round(rect.x + rect.width + image.offsetX);
	var width = image.buffer.width;
	var color;
	if(format == lime.graphics.PixelFormat.ARGB) {
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			if(pos % (width * 4) >= boundR * 4) pos += (width - boundR) * 4;
			color = byteArray.readUnsignedInt();
			data[pos++] = (color & 16711680) >>> 16;
			data[pos++] = (color & 65280) >>> 8;
			data[pos++] = color & 255;
			data[pos++] = (color & -16777216) >>> 24;
		}
	} else {
		var _g1 = 0;
		while(_g1 < len) {
			var i1 = _g1++;
			if(pos % (width * 4) >= boundR * 4) pos += (width - boundR) * 4;
			color = byteArray.readUnsignedInt();
			data[pos++] = (color & -16777216) >>> 24;
			data[pos++] = (color & 16711680) >>> 16;
			data[pos++] = (color & 65280) >>> 8;
			data[pos++] = color & 255;
		}
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) return;
	var index;
	var a;
	var unmultiply;
	var length = data.length / 4 | 0;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		index = i * 4;
		a = data[index + 3];
		if(a != 0) {
			unmultiply = 255.0 / a;
			data[index] = lime.graphics.utils.ImageDataUtil.__clamp[data[index] * unmultiply | 0];
			data[index + 1] = lime.graphics.utils.ImageDataUtil.__clamp[data[index + 1] * unmultiply | 0];
			data[index + 2] = lime.graphics.utils.ImageDataUtil.__clamp[data[index + 2] * unmultiply | 0];
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
};
lime.math = {};
lime.math._ColorMatrix = {};
lime.math._ColorMatrix.ColorMatrix_Impl_ = function() { };
$hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] = lime.math._ColorMatrix.ColorMatrix_Impl_;
lime.math._ColorMatrix.ColorMatrix_Impl_.__name__ = ["lime","math","_ColorMatrix","ColorMatrix_Impl_"];
lime.math._ColorMatrix.ColorMatrix_Impl_.__properties__ = {set_redOffset:"set_redOffset",get_redOffset:"get_redOffset",set_redMultiplier:"set_redMultiplier",get_redMultiplier:"get_redMultiplier",set_greenOffset:"set_greenOffset",get_greenOffset:"get_greenOffset",set_greenMultiplier:"set_greenMultiplier",get_greenMultiplier:"get_greenMultiplier",set_color:"set_color",get_color:"get_color",set_blueOffset:"set_blueOffset",get_blueOffset:"get_blueOffset",set_blueMultiplier:"set_blueMultiplier",get_blueMultiplier:"get_blueMultiplier",set_alphaOffset:"set_alphaOffset",get_alphaOffset:"get_alphaOffset",set_alphaMultiplier:"set_alphaMultiplier",get_alphaMultiplier:"get_alphaMultiplier"}
lime.math._ColorMatrix.ColorMatrix_Impl_._new = function(data) {
	var this1;
	if(data != null && data.length == 20) this1 = data; else this1 = new Float32Array(lime.math._ColorMatrix.ColorMatrix_Impl_.__identity);
	return this1;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.clone = function(this1) {
	return lime.math._ColorMatrix.ColorMatrix_Impl_._new(new Float32Array(this1));
};
lime.math._ColorMatrix.ColorMatrix_Impl_.concat = function(this1,second) {
	var _g = this1;
	var value = _g[0] + second[0];
	_g[0] = value;
	value;
	var _g1 = this1;
	var value1 = _g1[6] + second[6];
	_g1[6] = value1;
	value1;
	var _g2 = this1;
	var value2 = _g2[12] + second[12];
	_g2[12] = value2;
	value2;
	var _g3 = this1;
	var value3 = _g3[18] + second[18];
	_g3[18] = value3;
	value3;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.copyFrom = function(this1,other) {
	this1.set(other);
};
lime.math._ColorMatrix.ColorMatrix_Impl_.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 0;
	this1[6] = 1;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 0;
	this1[11] = 0;
	this1[12] = 1;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 0;
	this1[16] = 0;
	this1[17] = 0;
	this1[18] = 1;
	this1[19] = 0;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.__toFlashColorTransform = function(this1) {
	return null;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_alphaMultiplier = function(this1) {
	return this1[18];
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_alphaMultiplier = function(this1,value) {
	this1[18] = value;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_alphaOffset = function(this1) {
	return this1[19] * 255;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_alphaOffset = function(this1,value) {
	this1[19] = value / 255;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_blueMultiplier = function(this1) {
	return this1[12];
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_blueMultiplier = function(this1,value) {
	this1[12] = value;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_blueOffset = function(this1) {
	return this1[14] * 255;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_blueOffset = function(this1,value) {
	this1[14] = value / 255;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_color = function(this1) {
	return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0);
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_color = function(this1,value) {
	var value1 = value >> 16 & 255;
	this1[4] = value1 / 255;
	value1;
	var value2 = value >> 8 & 255;
	this1[9] = value2 / 255;
	value2;
	var value3 = value & 255;
	this1[14] = value3 / 255;
	value3;
	this1[0] = 0;
	0;
	this1[6] = 0;
	0;
	this1[12] = 0;
	0;
	return lime.math._ColorMatrix.ColorMatrix_Impl_.get_color(this1);
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_greenMultiplier = function(this1) {
	return this1[6];
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_greenMultiplier = function(this1,value) {
	this1[6] = value;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_greenOffset = function(this1) {
	return this1[9] * 255;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_greenOffset = function(this1,value) {
	this1[9] = value / 255;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_redMultiplier = function(this1) {
	return this1[0];
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_redMultiplier = function(this1,value) {
	this1[0] = value;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_redOffset = function(this1) {
	return this1[4] * 255;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_redOffset = function(this1,value) {
	this1[4] = value / 255;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get = function(this1,index) {
	return this1[index];
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
lime.math.Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime.math.Matrix3;
lime.math.Matrix3.__name__ = ["lime","math","Matrix3"];
lime.math.Matrix3.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,clone: function() {
		return new lime.math.Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector4) {
		if(column > 2) throw "Column " + column + " out of bounds (2)"; else if(column == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(column == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyColumnTo: function(column,vector4) {
		if(column > 2) throw "Column " + column + " out of bounds (2)"; else if(column == 0) {
			vector4.x = this.a;
			vector4.y = this.c;
			vector4.z = 0;
		} else if(column == 1) {
			vector4.x = this.b;
			vector4.y = this.d;
			vector4.z = 0;
		} else {
			vector4.x = this.tx;
			vector4.y = this.ty;
			vector4.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix3) {
		this.a = sourceMatrix3.a;
		this.b = sourceMatrix3.b;
		this.c = sourceMatrix3.c;
		this.d = sourceMatrix3.d;
		this.tx = sourceMatrix3.tx;
		this.ty = sourceMatrix3.ty;
	}
	,copyRowFrom: function(row,vector4) {
		if(row > 2) throw "Row " + row + " out of bounds (2)"; else if(row == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(row == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyRowTo: function(row,vector4) {
		if(row > 2) throw "Row " + row + " out of bounds (2)"; else if(row == 0) {
			vector4.x = this.a;
			vector4.y = this.b;
			vector4.z = this.tx;
		} else if(row == 1) {
			vector4.x = this.c;
			vector4.y = this.d;
			vector4.z = this.ty;
		} else {
			vector4.x = 0;
			vector4.y = 0;
			vector4.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = scaleX;
		this.d = scaleY;
		this.b = rotation;
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(Matrix3) {
		return Matrix3 != null && this.tx == Matrix3.tx && this.ty == Matrix3.ty && this.a == Matrix3.a && this.b == Matrix3.b && this.c == Matrix3.c && this.d == Matrix3.d;
	}
	,deltaTransformVector2: function(Vector2) {
		return new lime.math.Vector2(Vector2.x * this.a + Vector2.y * this.c,Vector2.x * this.b + Vector2.y * this.d);
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new lime.math.Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
		result.concat(m);
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) scale = 1;
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,toMozString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformVector2: function(pos) {
		return new lime.math.Vector2(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		var m = new lime.math.Matrix3();
		m.tx = dx;
		m.ty = dy;
		this.concat(m);
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__transformX: function(pos) {
		return pos.x * this.a + pos.y * this.c + this.tx;
	}
	,__transformY: function(pos) {
		return pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__translateTransformed: function(pos) {
		this.tx = pos.x * this.a + pos.y * this.c + this.tx;
		this.ty = pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__class__: lime.math.Matrix3
};
lime.math._Matrix4 = {};
lime.math._Matrix4.Matrix4_Impl_ = function() { };
$hxClasses["lime.math._Matrix4.Matrix4_Impl_"] = lime.math._Matrix4.Matrix4_Impl_;
lime.math._Matrix4.Matrix4_Impl_.__name__ = ["lime","math","_Matrix4","Matrix4_Impl_"];
lime.math._Matrix4.Matrix4_Impl_.__properties__ = {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
lime.math._Matrix4.Matrix4_Impl_._new = function(data) {
	var this1;
	if(data != null && data.length == 16) this1 = data; else this1 = new Float32Array(lime.math._Matrix4.Matrix4_Impl_.__identity);
	return this1;
};
lime.math._Matrix4.Matrix4_Impl_.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,0);
	var m221 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,4);
	var m231 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,8);
	var m241 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,12);
	var m212 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,1);
	var m222 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,5);
	var m232 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,9);
	var m242 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,13);
	var m213 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,2);
	var m223 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,6);
	var m233 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,10);
	var m243 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,14);
	var m214 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,3);
	var m224 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,7);
	var m234 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,11);
	var m244 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime.math._Matrix4.Matrix4_Impl_.appendRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime.math._Matrix4.Matrix4_Impl_.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime.math._Matrix4.Matrix4_Impl_.appendTranslation(m,p.x,p.y,p.z);
	}
	lime.math._Matrix4.Matrix4_Impl_.append(this1,m);
};
lime.math._Matrix4.Matrix4_Impl_.appendScale = function(this1,xScale,yScale,zScale) {
	lime.math._Matrix4.Matrix4_Impl_.append(this1,lime.math._Matrix4.Matrix4_Impl_._new(new Float32Array([xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0])));
};
lime.math._Matrix4.Matrix4_Impl_.appendTranslation = function(this1,x,y,z) {
	this1[12] = this1[12] + x;
	this1[13] = this1[13] + y;
	this1[14] = this1[14] + z;
};
lime.math._Matrix4.Matrix4_Impl_.clone = function(this1) {
	return lime.math._Matrix4.Matrix4_Impl_._new(new Float32Array(this1));
};
lime.math._Matrix4.Matrix4_Impl_.copyColumnFrom = function(this1,column,vector) {
	switch(column) {
	case 0:
		this1[0] = vector.x;
		this1[1] = vector.y;
		this1[2] = vector.z;
		this1[3] = vector.w;
		break;
	case 1:
		this1[4] = vector.x;
		this1[5] = vector.y;
		this1[6] = vector.z;
		this1[7] = vector.w;
		break;
	case 2:
		this1[8] = vector.x;
		this1[9] = vector.y;
		this1[10] = vector.z;
		this1[11] = vector.w;
		break;
	case 3:
		this1[12] = vector.x;
		this1[13] = vector.y;
		this1[14] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw "Error, Column " + column + " out of bounds [0, ..., 3]";
	}
};
lime.math._Matrix4.Matrix4_Impl_.copyColumnTo = function(this1,column,vector) {
	switch(column) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[1];
		vector.z = this1[2];
		vector.w = this1[3];
		break;
	case 1:
		vector.x = this1[4];
		vector.y = this1[5];
		vector.z = this1[6];
		vector.w = this1[7];
		break;
	case 2:
		vector.x = this1[8];
		vector.y = this1[9];
		vector.z = this1[10];
		vector.w = this1[11];
		break;
	case 3:
		vector.x = this1[12];
		vector.y = this1[13];
		vector.z = this1[14];
		vector.w = this1[15];
		break;
	default:
		throw "Error, Column " + column + " out of bounds [0, ..., 3]";
	}
};
lime.math._Matrix4.Matrix4_Impl_.copyFrom = function(this1,other) {
	this1.set(other);
};
lime.math._Matrix4.Matrix4_Impl_.copythisFrom = function(this1,array,index,transposeValues) {
	if(transposeValues == null) transposeValues = false;
	if(index == null) index = 0;
	if(transposeValues) lime.math._Matrix4.Matrix4_Impl_.transpose(this1);
	var l = array.length - index;
	var _g = 0;
	while(_g < l) {
		var c = _g++;
		this1[c] = array[c + index];
	}
	if(transposeValues) lime.math._Matrix4.Matrix4_Impl_.transpose(this1);
};
lime.math._Matrix4.Matrix4_Impl_.copythisTo = function(this1,array,index,transposeValues) {
	if(transposeValues == null) transposeValues = false;
	if(index == null) index = 0;
	if(transposeValues) lime.math._Matrix4.Matrix4_Impl_.transpose(this1);
	var l = this1.length;
	var _g = 0;
	while(_g < l) {
		var c = _g++;
		array[c + index] = this1[c];
	}
	if(transposeValues) lime.math._Matrix4.Matrix4_Impl_.transpose(this1);
};
lime.math._Matrix4.Matrix4_Impl_.copyRowFrom = function(this1,row,vector) {
	switch(row) {
	case 0:
		this1[0] = vector.x;
		this1[4] = vector.y;
		this1[8] = vector.z;
		this1[12] = vector.w;
		break;
	case 1:
		this1[1] = vector.x;
		this1[5] = vector.y;
		this1[9] = vector.z;
		this1[13] = vector.w;
		break;
	case 2:
		this1[2] = vector.x;
		this1[6] = vector.y;
		this1[10] = vector.z;
		this1[14] = vector.w;
		break;
	case 3:
		this1[3] = vector.x;
		this1[7] = vector.y;
		this1[11] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw "Error, Row " + Std.string((function($this) {
			var $r;
			var $int = row;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this))) + " out of bounds [0, ..., 3]";
	}
};
lime.math._Matrix4.Matrix4_Impl_.create2D = function(x,y,scale,rotation) {
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return lime.math._Matrix4.Matrix4_Impl_._new(new Float32Array([c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1]));
};
lime.math._Matrix4.Matrix4_Impl_.createABCD = function(a,b,c,d,tx,ty) {
	return lime.math._Matrix4.Matrix4_Impl_._new(new Float32Array([a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1]));
};
lime.math._Matrix4.Matrix4_Impl_.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return lime.math._Matrix4.Matrix4_Impl_._new(new Float32Array([2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1]));
};
lime.math._Matrix4.Matrix4_Impl_.copyRowTo = function(this1,row,vector) {
	switch(row) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[4];
		vector.z = this1[8];
		vector.w = this1[12];
		break;
	case 1:
		vector.x = this1[1];
		vector.y = this1[5];
		vector.z = this1[9];
		vector.w = this1[13];
		break;
	case 2:
		vector.x = this1[2];
		vector.y = this1[6];
		vector.z = this1[10];
		vector.w = this1[14];
		break;
	case 3:
		vector.x = this1[3];
		vector.y = this1[7];
		vector.z = this1[11];
		vector.w = this1[15];
		break;
	default:
		throw "Error, Row " + row + " out of bounds [0, ..., 3]";
	}
};
lime.math._Matrix4.Matrix4_Impl_.copyToMatrix4 = function(this1,other) {
	(js.Boot.__cast(other , Float32Array)).set(this1);
};
lime.math._Matrix4.Matrix4_Impl_.deltaTransformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime.math.Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[3],x * this1[1] + y * this1[5] + z * this1[9] + this1[7],x * this1[2] + y * this1[6] + z * this1[10] + this1[11],0);
};
lime.math._Matrix4.Matrix4_Impl_.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
lime.math._Matrix4.Matrix4_Impl_.interpolate = function(thisMat,toMat,percent) {
	var m = lime.math._Matrix4.Matrix4_Impl_._new();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		lime.math._Matrix4.Matrix4_Impl_.set(m,i,lime.math._Matrix4.Matrix4_Impl_.get(thisMat,i) + (lime.math._Matrix4.Matrix4_Impl_.get(toMat,i) - lime.math._Matrix4.Matrix4_Impl_.get(thisMat,i)) * percent);
	}
	return m;
};
lime.math._Matrix4.Matrix4_Impl_.interpolateTo = function(this1,toMat,percent) {
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		this1[i] = this1[i] + (lime.math._Matrix4.Matrix4_Impl_.get(toMat,i) - this1[i]) * percent;
	}
};
lime.math._Matrix4.Matrix4_Impl_.invert = function(this1) {
	var d = lime.math._Matrix4.Matrix4_Impl_.get_determinant(this1);
	var invertable = Math.abs(d) > 0.00000000001;
	if(invertable) {
		d = 1 / d;
		var m11 = this1[0];
		var m21 = this1[4];
		var m31 = this1[8];
		var m41 = this1[12];
		var m12 = this1[1];
		var m22 = this1[5];
		var m32 = this1[9];
		var m42 = this1[13];
		var m13 = this1[2];
		var m23 = this1[6];
		var m33 = this1[10];
		var m43 = this1[14];
		var m14 = this1[3];
		var m24 = this1[7];
		var m34 = this1[11];
		var m44 = this1[15];
		this1[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
		this1[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
		this1[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
		this1[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
		this1[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
		this1[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
		this1[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
		this1[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
		this1[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
		this1[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
		this1[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
		this1[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
		this1[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
		this1[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
		this1[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
		this1[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
	}
	return invertable;
};
lime.math._Matrix4.Matrix4_Impl_.pointAt = function(this1,pos,at,up) {
	if(at == null) at = new lime.math.Vector4(0,0,-1);
	if(up == null) up = new lime.math.Vector4(0,-1,0);
	var dir = new lime.math.Vector4(at.x - pos.x,at.y - pos.y,at.z - pos.z);
	var vup = new lime.math.Vector4(up.x,up.y,up.z,up.w);
	var right;
	dir.normalize();
	vup.normalize();
	var dir2 = new lime.math.Vector4(dir.x,dir.y,dir.z,dir.w);
	dir2.scaleBy(vup.x * dir.x + vup.y * dir.y + vup.z * dir.z);
	vup = new lime.math.Vector4(vup.x - dir2.x,vup.y - dir2.y,vup.z - dir2.z);
	if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) vup.normalize(); else if(dir.x != 0) vup = new lime.math.Vector4(-dir.y,dir.x,0); else vup = new lime.math.Vector4(1,0,0);
	right = new lime.math.Vector4(vup.y * dir.z - vup.z * dir.y,vup.z * dir.x - vup.x * dir.z,vup.x * dir.y - vup.y * dir.x,1);
	right.normalize();
	this1[0] = right.x;
	this1[4] = right.y;
	this1[8] = right.z;
	this1[12] = 0.0;
	this1[1] = vup.x;
	this1[5] = vup.y;
	this1[9] = vup.z;
	this1[13] = 0.0;
	this1[2] = dir.x;
	this1[6] = dir.y;
	this1[10] = dir.z;
	this1[14] = 0.0;
	this1[3] = pos.x;
	this1[7] = pos.y;
	this1[11] = pos.z;
	this1[15] = 1.0;
};
lime.math._Matrix4.Matrix4_Impl_.prepend = function(this1,rhs) {
	var m111 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,0);
	var m121 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,4);
	var m131 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,8);
	var m141 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,12);
	var m112 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,1);
	var m122 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,5);
	var m132 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,9);
	var m142 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,13);
	var m113 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,2);
	var m123 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,6);
	var m133 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,10);
	var m143 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,14);
	var m114 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,3);
	var m124 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,7);
	var m134 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,11);
	var m144 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,15);
	var m211 = this1[0];
	var m221 = this1[4];
	var m231 = this1[8];
	var m241 = this1[12];
	var m212 = this1[1];
	var m222 = this1[5];
	var m232 = this1[9];
	var m242 = this1[13];
	var m213 = this1[2];
	var m223 = this1[6];
	var m233 = this1[10];
	var m243 = this1[14];
	var m214 = this1[3];
	var m224 = this1[7];
	var m234 = this1[11];
	var m244 = this1[15];
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime.math._Matrix4.Matrix4_Impl_.prependRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime.math._Matrix4.Matrix4_Impl_.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime.math._Matrix4.Matrix4_Impl_.appendTranslation(m,p.x,p.y,p.z);
	}
	lime.math._Matrix4.Matrix4_Impl_.prepend(this1,m);
};
lime.math._Matrix4.Matrix4_Impl_.prependScale = function(this1,xScale,yScale,zScale) {
	lime.math._Matrix4.Matrix4_Impl_.prepend(this1,lime.math._Matrix4.Matrix4_Impl_._new(new Float32Array([xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0])));
};
lime.math._Matrix4.Matrix4_Impl_.prependTranslation = function(this1,x,y,z) {
	var m = lime.math._Matrix4.Matrix4_Impl_._new();
	lime.math._Matrix4.Matrix4_Impl_.set_position(m,new lime.math.Vector4(x,y,z));
	lime.math._Matrix4.Matrix4_Impl_.prepend(this1,m);
};
lime.math._Matrix4.Matrix4_Impl_.transformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime.math.Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[12],x * this1[1] + y * this1[5] + z * this1[9] + this1[13],x * this1[2] + y * this1[6] + z * this1[10] + this1[14],x * this1[3] + y * this1[7] + z * this1[11] + this1[15]);
};
lime.math._Matrix4.Matrix4_Impl_.transformVectors = function(this1,ain,aout) {
	var i = 0;
	while(i + 3 <= ain.length) {
		var x = ain[i];
		var y = ain[i + 1];
		var z = ain[i + 2];
		aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
		aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
		aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
		i += 3;
	}
};
lime.math._Matrix4.Matrix4_Impl_.transpose = function(this1) {
	var othis = new Float32Array(this1);
	this1[1] = othis[4];
	this1[2] = othis[8];
	this1[3] = othis[12];
	this1[4] = othis[1];
	this1[6] = othis[9];
	this1[7] = othis[13];
	this1[8] = othis[2];
	this1[9] = othis[6];
	this1[11] = othis[14];
	this1[12] = othis[3];
	this1[13] = othis[7];
	this1[14] = othis[11];
};
lime.math._Matrix4.Matrix4_Impl_.getAxisRotation = function(x,y,z,degrees) {
	var m = lime.math._Matrix4.Matrix4_Impl_._new();
	var a1 = new lime.math.Vector4(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	lime.math._Matrix4.Matrix4_Impl_.set(m,0,c + a1.x * a1.x * t);
	lime.math._Matrix4.Matrix4_Impl_.set(m,5,c + a1.y * a1.y * t);
	lime.math._Matrix4.Matrix4_Impl_.set(m,10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	lime.math._Matrix4.Matrix4_Impl_.set(m,4,tmp1 + tmp2);
	lime.math._Matrix4.Matrix4_Impl_.set(m,1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	lime.math._Matrix4.Matrix4_Impl_.set(m,8,tmp1 - tmp2);
	lime.math._Matrix4.Matrix4_Impl_.set(m,2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	lime.math._Matrix4.Matrix4_Impl_.set(m,9,tmp1 + tmp2);
	lime.math._Matrix4.Matrix4_Impl_.set(m,6,tmp1 - tmp2);
	return m;
};
lime.math._Matrix4.Matrix4_Impl_.get_determinant = function(this1) {
	return (this1[0] * this1[5] - this1[4] * this1[1]) * (this1[10] * this1[15] - this1[14] * this1[11]) - (this1[0] * this1[9] - this1[8] * this1[1]) * (this1[6] * this1[15] - this1[14] * this1[7]) + (this1[0] * this1[13] - this1[12] * this1[1]) * (this1[6] * this1[11] - this1[10] * this1[7]) + (this1[4] * this1[9] - this1[8] * this1[5]) * (this1[2] * this1[15] - this1[14] * this1[3]) - (this1[4] * this1[13] - this1[12] * this1[5]) * (this1[2] * this1[11] - this1[10] * this1[3]) + (this1[8] * this1[13] - this1[12] * this1[9]) * (this1[2] * this1[7] - this1[6] * this1[3]);
};
lime.math._Matrix4.Matrix4_Impl_.get_position = function(this1) {
	return new lime.math.Vector4(this1[12],this1[13],this1[14]);
};
lime.math._Matrix4.Matrix4_Impl_.set_position = function(this1,val) {
	this1[12] = val.x;
	this1[13] = val.y;
	this1[14] = val.z;
	return val;
};
lime.math._Matrix4.Matrix4_Impl_.get = function(this1,index) {
	return this1[index];
};
lime.math._Matrix4.Matrix4_Impl_.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
lime.math.Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime.math.Rectangle;
lime.math.Rectangle.__name__ = ["lime","math","Rectangle"];
lime.math.Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new lime.math.Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new lime.math.Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new lime.math.Rectangle();
		return new lime.math.Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return false;
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = tx0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		return new lime.math.Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) return toUnion.clone(); else if(toUnion.width == 0 || toUnion.height == 0) return this.clone();
		var x0;
		if(this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
		var x1;
		if(this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
		var y0;
		if(this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
		return new lime.math.Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) return;
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x < x) this.x = x;
		if(this.y < y) this.y = y;
		if(this.get_right() > x + width) this.width = x + width - this.x;
		if(this.get_bottom() > y + height) this.height = y + height - this.y;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) this.x = x;
		if(this.y > y) this.y = y;
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new lime.math.Vector2(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new lime.math.Vector2(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new lime.math.Vector2(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: lime.math.Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
lime.math.Vector2 = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime.math.Vector2;
lime.math.Vector2.__name__ = ["lime","math","Vector2"];
lime.math.Vector2.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
lime.math.Vector2.interpolate = function(pt1,pt2,f) {
	return new lime.math.Vector2(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
lime.math.Vector2.polar = function(len,angle) {
	return new lime.math.Vector2(len * Math.cos(angle),len * Math.sin(angle));
};
lime.math.Vector2.prototype = {
	length: null
	,x: null
	,y: null
	,add: function(v) {
		return new lime.math.Vector2(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new lime.math.Vector2(this.x,this.y);
	}
	,equals: function(toCompare) {
		return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new lime.math.Vector2(this.x - v.x,this.y - v.y);
	}
	,__toFlashPoint: function() {
		return null;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: lime.math.Vector2
	,__properties__: {get_length:"get_length"}
};
lime.math.Vector4 = function(x,y,z,w) {
	if(w == null) w = 0.;
	if(z == null) z = 0.;
	if(y == null) y = 0.;
	if(x == null) x = 0.;
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime.math.Vector4;
lime.math.Vector4.__name__ = ["lime","math","Vector4"];
lime.math.Vector4.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
lime.math.Vector4.X_AXIS = null;
lime.math.Vector4.Y_AXIS = null;
lime.math.Vector4.Z_AXIS = null;
lime.math.Vector4.angleBetween = function(a,b) {
	var a0 = new lime.math.Vector4(a.x,a.y,a.z,a.w);
	a0.normalize();
	var b0 = new lime.math.Vector4(b.x,b.y,b.z,b.w);
	b0.normalize();
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
lime.math.Vector4.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
lime.math.Vector4.get_X_AXIS = function() {
	return new lime.math.Vector4(1,0,0);
};
lime.math.Vector4.get_Y_AXIS = function() {
	return new lime.math.Vector4(0,1,0);
};
lime.math.Vector4.get_Z_AXIS = function() {
	return new lime.math.Vector4(0,0,1);
};
lime.math.Vector4.prototype = {
	length: null
	,lengthSquared: null
	,w: null
	,x: null
	,y: null
	,z: null
	,add: function(a) {
		return new lime.math.Vector4(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new lime.math.Vector4(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector4) {
		this.x = sourceVector4.x;
		this.y = sourceVector4.y;
		this.z = sourceVector4.z;
	}
	,crossProduct: function(a) {
		return new lime.math.Vector4(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) allFour = false;
		return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) allFour = false;
		return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new lime.math.Vector4(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: lime.math.Vector4
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
lime.net = {};
lime.net.URLLoader = function(request) {
	this.onSecurityError = new lime.app.Event();
	this.onProgress = new lime.app.Event();
	this.onOpen = new lime.app.Event();
	this.onIOError = new lime.app.Event();
	this.onHTTPStatus = new lime.app.Event();
	this.onComplete = new lime.app.Event();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.set_dataFormat(lime.net.URLLoaderDataFormat.TEXT);
	if(request != null) this.load(request);
};
$hxClasses["lime.net.URLLoader"] = lime.net.URLLoader;
lime.net.URLLoader.__name__ = ["lime","net","URLLoader"];
lime.net.URLLoader.prototype = {
	bytesLoaded: null
	,bytesTotal: null
	,data: null
	,dataFormat: null
	,onComplete: null
	,onHTTPStatus: null
	,onIOError: null
	,onOpen: null
	,onProgress: null
	,onSecurityError: null
	,close: function() {
	}
	,getData: function() {
		return null;
	}
	,load: function(request) {
		this.requestUrl(request.url,request.method,request.data,request.formatRequestHeaders());
	}
	,registerEvents: function(subject) {
		var _g = this;
		var self = this;
		if(typeof XMLHttpRequestProgressEvent != "undefined") subject.addEventListener("progress",$bind(this,this.__onProgress),false);
		subject.onreadystatechange = function() {
			if(subject.readyState != 4) return;
			var s;
			try {
				s = subject.status;
			} catch( e ) {
				s = null;
			}
			if(s == undefined) s = null;
			if(s != null) {
				var listeners = self.onHTTPStatus.listeners;
				var repeat = self.onHTTPStatus.repeat;
				var length = listeners.length;
				var i = 0;
				while(i < length) {
					listeners[i](_g,s);
					if(!repeat[i]) {
						self.onHTTPStatus.remove(listeners[i]);
						length--;
					} else i++;
				}
			}
			if(s != null && s >= 200 && s < 400) self.__onData(subject.response); else if(s == null) {
				var listeners1 = self.onIOError.listeners;
				var repeat1 = self.onIOError.repeat;
				var length1 = listeners1.length;
				var i1 = 0;
				while(i1 < length1) {
					listeners1[i1](_g,"Failed to connect or resolve host");
					if(!repeat1[i1]) {
						self.onIOError.remove(listeners1[i1]);
						length1--;
					} else i1++;
				}
			} else if(s == 12029) {
				var listeners2 = self.onIOError.listeners;
				var repeat2 = self.onIOError.repeat;
				var length2 = listeners2.length;
				var i2 = 0;
				while(i2 < length2) {
					listeners2[i2](_g,"Failed to connect to host");
					if(!repeat2[i2]) {
						self.onIOError.remove(listeners2[i2]);
						length2--;
					} else i2++;
				}
			} else if(s == 12007) {
				var listeners3 = self.onIOError.listeners;
				var repeat3 = self.onIOError.repeat;
				var length3 = listeners3.length;
				var i3 = 0;
				while(i3 < length3) {
					listeners3[i3](_g,"Unknown host");
					if(!repeat3[i3]) {
						self.onIOError.remove(listeners3[i3]);
						length3--;
					} else i3++;
				}
			} else if(s == 0) {
				var listeners4 = self.onIOError.listeners;
				var repeat4 = self.onIOError.repeat;
				var length4 = listeners4.length;
				var i4 = 0;
				while(i4 < length4) {
					listeners4[i4](_g,"Unable to make request (may be blocked due to cross-domain permissions)");
					if(!repeat4[i4]) {
						self.onIOError.remove(listeners4[i4]);
						length4--;
					} else i4++;
				}
				var listeners5 = self.onSecurityError.listeners;
				var repeat5 = self.onSecurityError.repeat;
				var length5 = listeners5.length;
				var i5 = 0;
				while(i5 < length5) {
					listeners5[i5](_g,"Unable to make request (may be blocked due to cross-domain permissions)");
					if(!repeat5[i5]) {
						self.onSecurityError.remove(listeners5[i5]);
						length5--;
					} else i5++;
				}
			} else {
				var listeners6 = self.onIOError.listeners;
				var repeat6 = self.onIOError.repeat;
				var length6 = listeners6.length;
				var i6 = 0;
				while(i6 < length6) {
					listeners6[i6](_g,"Http Error #" + subject.status);
					if(!repeat6[i6]) {
						self.onIOError.remove(listeners6[i6]);
						length6--;
					} else i6++;
				}
			}
		};
	}
	,requestUrl: function(url,method,data,requestHeaders) {
		var xmlHttpRequest = new XMLHttpRequest();
		this.registerEvents(xmlHttpRequest);
		var uri = "";
		if(js.Boot.__instanceof(data,lime.utils.ByteArray)) {
			var data1 = data;
			var _g = this.dataFormat;
			switch(_g[1]) {
			case 0:
				uri = data1.data.buffer;
				break;
			default:
				uri = data1.readUTFBytes(data1.length);
			}
		} else if(js.Boot.__instanceof(data,lime.net.URLVariables)) {
			var data2 = data;
			var _g1 = 0;
			var _g11 = Reflect.fields(data2);
			while(_g1 < _g11.length) {
				var p = _g11[_g1];
				++_g1;
				if(uri.length != 0) uri += "&";
				uri += encodeURIComponent(p) + "=" + StringTools.urlEncode(Reflect.field(data2,p));
			}
		} else if(data != null) uri = data.toString();
		try {
			if(method == "GET" && uri != null && uri != "") {
				var question = url.split("?").length <= 1;
				xmlHttpRequest.open("GET",url + (question?"?":"&") + Std.string(uri),true);
				uri = "";
			} else xmlHttpRequest.open(js.Boot.__cast(method , String),url,true);
		} catch( e ) {
			var listeners = this.onIOError.listeners;
			var repeat = this.onIOError.repeat;
			var length = listeners.length;
			var i = 0;
			while(i < length) {
				listeners[i](this,e.toString());
				if(!repeat[i]) {
					this.onIOError.remove(listeners[i]);
					length--;
				} else i++;
			}
			return;
		}
		var _g2 = this.dataFormat;
		switch(_g2[1]) {
		case 0:
			xmlHttpRequest.responseType = "arraybuffer";
			break;
		default:
		}
		var _g3 = 0;
		while(_g3 < requestHeaders.length) {
			var header = requestHeaders[_g3];
			++_g3;
			xmlHttpRequest.setRequestHeader(header.name,header.value);
		}
		xmlHttpRequest.send(uri);
		var listeners1 = this.onOpen.listeners;
		var repeat1 = this.onOpen.repeat;
		var length1 = listeners1.length;
		var i1 = 0;
		while(i1 < length1) {
			listeners1[i1](this);
			if(!repeat1[i1]) {
				this.onOpen.remove(listeners1[i1]);
				length1--;
			} else i1++;
		}
		this.getData = function() {
			if(xmlHttpRequest.response != null) return xmlHttpRequest.response; else return xmlHttpRequest.responseText;
		};
	}
	,__onData: function(_) {
		var content = this.getData();
		var _g = this.dataFormat;
		switch(_g[1]) {
		case 0:
			this.data = lime.utils.ByteArray.__ofBuffer(content);
			break;
		default:
			this.data = Std.string(content);
		}
		var listeners = this.onComplete.listeners;
		var repeat = this.onComplete.repeat;
		var length = listeners.length;
		var i = 0;
		while(i < length) {
			listeners[i](this);
			if(!repeat[i]) {
				this.onComplete.remove(listeners[i]);
				length--;
			} else i++;
		}
	}
	,__onProgress: function(event) {
		this.bytesLoaded = event.loaded;
		this.bytesTotal = event.total;
		var listeners = this.onProgress.listeners;
		var repeat = this.onProgress.repeat;
		var length = listeners.length;
		var i = 0;
		while(i < length) {
			listeners[i](this,this.bytesLoaded,this.bytesTotal);
			if(!repeat[i]) {
				this.onProgress.remove(listeners[i]);
				length--;
			} else i++;
		}
	}
	,set_dataFormat: function(inputVal) {
		if(inputVal == lime.net.URLLoaderDataFormat.BINARY && !Reflect.hasField(window,"ArrayBuffer")) this.dataFormat = lime.net.URLLoaderDataFormat.TEXT; else this.dataFormat = inputVal;
		return this.dataFormat;
	}
	,__class__: lime.net.URLLoader
	,__properties__: {set_dataFormat:"set_dataFormat"}
};
lime.net.URLLoaderDataFormat = $hxClasses["lime.net.URLLoaderDataFormat"] = { __ename__ : true, __constructs__ : ["BINARY","TEXT","VARIABLES"] };
lime.net.URLLoaderDataFormat.BINARY = ["BINARY",0];
lime.net.URLLoaderDataFormat.BINARY.toString = $estr;
lime.net.URLLoaderDataFormat.BINARY.__enum__ = lime.net.URLLoaderDataFormat;
lime.net.URLLoaderDataFormat.TEXT = ["TEXT",1];
lime.net.URLLoaderDataFormat.TEXT.toString = $estr;
lime.net.URLLoaderDataFormat.TEXT.__enum__ = lime.net.URLLoaderDataFormat;
lime.net.URLLoaderDataFormat.VARIABLES = ["VARIABLES",2];
lime.net.URLLoaderDataFormat.VARIABLES.toString = $estr;
lime.net.URLLoaderDataFormat.VARIABLES.__enum__ = lime.net.URLLoaderDataFormat;
lime.net.URLRequest = function(inURL) {
	if(inURL != null) this.url = inURL;
	this.requestHeaders = [];
	this.method = "GET";
	this.contentType = null;
};
$hxClasses["lime.net.URLRequest"] = lime.net.URLRequest;
lime.net.URLRequest.__name__ = ["lime","net","URLRequest"];
lime.net.URLRequest.prototype = {
	contentType: null
	,data: null
	,method: null
	,requestHeaders: null
	,url: null
	,userAgent: null
	,formatRequestHeaders: function() {
		var res = this.requestHeaders;
		if(res == null) res = [];
		if(this.method == "GET" || this.data == null) return res;
		if(typeof(this.data) == "string" || js.Boot.__instanceof(this.data,lime.utils.ByteArray)) {
			res = res.slice();
			res.push(new lime.net.URLRequestHeader("Content-Type",this.contentType != null?this.contentType:"application/x-www-form-urlencoded"));
		}
		return res;
	}
	,__class__: lime.net.URLRequest
};
lime.net.URLRequestHeader = function(name,value) {
	if(value == null) value = "";
	if(name == null) name = "";
	this.name = name;
	this.value = value;
};
$hxClasses["lime.net.URLRequestHeader"] = lime.net.URLRequestHeader;
lime.net.URLRequestHeader.__name__ = ["lime","net","URLRequestHeader"];
lime.net.URLRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: lime.net.URLRequestHeader
};
lime.net._URLRequestMethod = {};
lime.net._URLRequestMethod.URLRequestMethod_Impl_ = function() { };
$hxClasses["lime.net._URLRequestMethod.URLRequestMethod_Impl_"] = lime.net._URLRequestMethod.URLRequestMethod_Impl_;
lime.net._URLRequestMethod.URLRequestMethod_Impl_.__name__ = ["lime","net","_URLRequestMethod","URLRequestMethod_Impl_"];
lime.net.URLVariables = function(inEncoded) {
	if(inEncoded != null) this.decode(inEncoded);
};
$hxClasses["lime.net.URLVariables"] = lime.net.URLVariables;
lime.net.URLVariables.__name__ = ["lime","net","URLVariables"];
lime.net.URLVariables.prototype = {
	decode: function(inVars) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = inVars.split(";").join("&").split("&");
		var _g1 = 0;
		while(_g1 < fields1.length) {
			var f1 = fields1[_g1];
			++_g1;
			var eq = f1.indexOf("=");
			if(eq > 0) Reflect.setField(this,StringTools.urlDecode(HxOverrides.substr(f1,0,eq)),StringTools.urlDecode(HxOverrides.substr(f1,eq + 1,null))); else if(eq != 0) Reflect.setField(this,decodeURIComponent(f1.split("+").join(" ")),"");
		}
	}
	,toString: function() {
		var result = new Array();
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			result.push(encodeURIComponent(f) + "=" + StringTools.urlEncode(Reflect.field(this,f)));
		}
		return result.join("&");
	}
	,__class__: lime.net.URLVariables
};
lime.system._System = {};
lime.system._System.SystemDirectory_Impl_ = function() { };
$hxClasses["lime.system._System.SystemDirectory_Impl_"] = lime.system._System.SystemDirectory_Impl_;
lime.system._System.SystemDirectory_Impl_.__name__ = ["lime","system","_System","SystemDirectory_Impl_"];
lime.text = {};
lime.text.Font = function(name) {
	this.name = name;
	if(this.__fontPath != null) this.__fromFile(this.__fontPath);
};
$hxClasses["lime.text.Font"] = lime.text.Font;
lime.text.Font.__name__ = ["lime","text","Font"];
lime.text.Font.fromBytes = function(bytes) {
	var font = new lime.text.Font();
	font.__fromBytes(bytes);
	return font;
};
lime.text.Font.fromFile = function(path) {
	var font = new lime.text.Font();
	font.__fromFile(path);
	return font;
};
lime.text.Font.prototype = {
	ascender: null
	,descender: null
	,height: null
	,name: null
	,numGlyphs: null
	,src: null
	,underlinePosition: null
	,underlineThickness: null
	,unitsPerEM: null
	,__fontPath: null
	,decompose: function() {
		return null;
	}
	,getGlyph: function(character) {
		return -1;
	}
	,getGlyphs: function(characters) {
		if(characters == null) characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
		return null;
	}
	,getGlyphMetrics: function(glyph) {
		return null;
	}
	,renderGlyph: function(glyph,fontSize) {
		return null;
	}
	,renderGlyphs: function(glyphs,fontSize) {
		return null;
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,get_ascender: function() {
		return 0;
	}
	,get_descender: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,get_numGlyphs: function() {
		return 0;
	}
	,get_underlinePosition: function() {
		return 0;
	}
	,get_underlineThickness: function() {
		return 0;
	}
	,get_unitsPerEM: function() {
		return 0;
	}
	,__class__: lime.text.Font
	,__properties__: {get_unitsPerEM:"get_unitsPerEM",get_underlineThickness:"get_underlineThickness",get_underlinePosition:"get_underlinePosition",get_numGlyphs:"get_numGlyphs",get_height:"get_height",get_descender:"get_descender",get_ascender:"get_ascender"}
};
lime.text._Glyph = {};
lime.text._Glyph.Glyph_Impl_ = function() { };
$hxClasses["lime.text._Glyph.Glyph_Impl_"] = lime.text._Glyph.Glyph_Impl_;
lime.text._Glyph.Glyph_Impl_.__name__ = ["lime","text","_Glyph","Glyph_Impl_"];
lime.text._Glyph.Glyph_Impl_._new = function(i) {
	return i;
};
lime.text.GlyphMetrics = function() {
};
$hxClasses["lime.text.GlyphMetrics"] = lime.text.GlyphMetrics;
lime.text.GlyphMetrics.__name__ = ["lime","text","GlyphMetrics"];
lime.text.GlyphMetrics.prototype = {
	advance: null
	,height: null
	,horizontalBearing: null
	,verticalBearing: null
	,__class__: lime.text.GlyphMetrics
};
lime.text.GlyphPosition = function(glyph,advance,offset) {
	this.glyph = glyph;
	this.advance = advance;
	if(offset != null) this.offset = offset; else this.offset = new lime.math.Vector2();
};
$hxClasses["lime.text.GlyphPosition"] = lime.text.GlyphPosition;
lime.text.GlyphPosition.__name__ = ["lime","text","GlyphPosition"];
lime.text.GlyphPosition.prototype = {
	advance: null
	,glyph: null
	,offset: null
	,__class__: lime.text.GlyphPosition
};
lime.text._TextDirection = {};
lime.text._TextDirection.TextDirection_Impl_ = function() { };
$hxClasses["lime.text._TextDirection.TextDirection_Impl_"] = lime.text._TextDirection.TextDirection_Impl_;
lime.text._TextDirection.TextDirection_Impl_.__name__ = ["lime","text","_TextDirection","TextDirection_Impl_"];
lime.text._TextDirection.TextDirection_Impl_.__properties__ = {get_vertical:"get_vertical",get_horizontal:"get_horizontal",get_forward:"get_forward",get_backward:"get_backward"}
lime.text._TextDirection.TextDirection_Impl_.reverse = function(this1) {
	this1 = this1 ^ 1;
};
lime.text._TextDirection.TextDirection_Impl_.toString = function(this1) {
	switch(this1) {
	case 4:
		return "leftToRight";
	case 5:
		return "rightToLeft";
	case 6:
		return "topToBottom";
	case 7:
		return "bottomToTop";
	default:
		return "";
	}
};
lime.text._TextDirection.TextDirection_Impl_.get_backward = function(this1) {
	return (this1 & -3) == 5;
};
lime.text._TextDirection.TextDirection_Impl_.get_forward = function(this1) {
	return (this1 & -3) == 4;
};
lime.text._TextDirection.TextDirection_Impl_.get_horizontal = function(this1) {
	return (this1 & -2) == 4;
};
lime.text._TextDirection.TextDirection_Impl_.get_vertical = function(this1) {
	return (this1 & -2) == 6;
};
lime.text.TextLayout = function(text,font,size,direction,script,language) {
	if(language == null) language = "en";
	if(script == null) script = "Zyyy";
	if(direction == null) direction = 4;
	if(size == null) size = 12;
	if(text == null) text = "";
	this.set_text(text);
	this.set_font(font);
	this.set_size(size);
	this.__direction = direction;
	this.__script = script;
	this.__language = language;
	this.__position();
};
$hxClasses["lime.text.TextLayout"] = lime.text.TextLayout;
lime.text.TextLayout.__name__ = ["lime","text","TextLayout"];
lime.text.TextLayout.prototype = {
	font: null
	,glyphs: null
	,positions: null
	,size: null
	,text: null
	,__buffer: null
	,__direction: null
	,__handle: null
	,__language: null
	,__script: null
	,__position: function() {
		this.positions = [];
	}
	,get_direction: function() {
		return this.__direction;
	}
	,set_direction: function(value) {
		if(value == this.__direction) return value;
		this.__direction = value;
		this.__position();
		return value;
	}
	,set_font: function(value) {
		if(value == this.font) return value;
		this.font = value;
		this.__position();
		return value;
	}
	,get_glyphs: function() {
		var glyphs = [];
		var _g = 0;
		var _g1 = this.positions;
		while(_g < _g1.length) {
			var position = _g1[_g];
			++_g;
			glyphs.push(position.glyph);
		}
		return glyphs;
	}
	,get_language: function() {
		return this.__language;
	}
	,set_language: function(value) {
		if(value == this.__language) return value;
		this.__language = value;
		this.__position();
		return value;
	}
	,get_script: function() {
		return this.__script;
	}
	,set_script: function(value) {
		if(value == this.__script) return value;
		this.__script = value;
		this.__position();
		return value;
	}
	,set_size: function(value) {
		if(value == this.size) return value;
		this.size = value;
		this.__position();
		return value;
	}
	,set_text: function(value) {
		if(value == this.text) return value;
		this.text = value;
		this.__position();
		return value;
	}
	,__class__: lime.text.TextLayout
	,__properties__: {set_text:"set_text",set_size:"set_size",set_script:"set_script",get_script:"get_script",set_language:"set_language",get_language:"get_language",get_glyphs:"get_glyphs",set_font:"set_font",set_direction:"set_direction",get_direction:"get_direction"}
};
lime.text._TextScript = {};
lime.text._TextScript.TextScript_Impl_ = function() { };
$hxClasses["lime.text._TextScript.TextScript_Impl_"] = lime.text._TextScript.TextScript_Impl_;
lime.text._TextScript.TextScript_Impl_.__name__ = ["lime","text","_TextScript","TextScript_Impl_"];
lime.text._TextScript.TextScript_Impl_.__properties__ = {get_rightToLeft:"get_rightToLeft"}
lime.text._TextScript.TextScript_Impl_.get_rightToLeft = function(this1) {
	switch(this1) {
	case "Hebr":case "Arab":case "Syrc":case "Thaa":case "Nkoo":case "Samr":case "Mand":case "Armi":case "Phnx":case "Lydi":case "Cprt":case "Khar":case "Sarb":case "Avst":case "Phli":case "Phlp":case "Orkh":
		return true;
	default:
		return false;
	}
};
lime.ui = {};
lime.ui.Gamepad = function(id) {
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime.ui.Gamepad;
lime.ui.Gamepad.__name__ = ["lime","ui","Gamepad"];
lime.ui.Gamepad.prototype = {
	connected: null
	,id: null
	,get_guid: function() {
		return null;
	}
	,get_name: function() {
		return null;
	}
	,__class__: lime.ui.Gamepad
	,__properties__: {get_name:"get_name",get_guid:"get_guid"}
};
lime.ui._GamepadAxis = {};
lime.ui._GamepadAxis.GamepadAxis_Impl_ = function() { };
$hxClasses["lime.ui._GamepadAxis.GamepadAxis_Impl_"] = lime.ui._GamepadAxis.GamepadAxis_Impl_;
lime.ui._GamepadAxis.GamepadAxis_Impl_.__name__ = ["lime","ui","_GamepadAxis","GamepadAxis_Impl_"];
lime.ui._GamepadAxis.GamepadAxis_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "LEFT_X";
	case 1:
		return "LEFT_Y";
	case 2:
		return "RIGHT_X";
	case 3:
		return "RIGHT_Y";
	case 4:
		return "TRIGGER_LEFT";
	case 5:
		return "TRIGGER_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
lime.ui._GamepadButton = {};
lime.ui._GamepadButton.GamepadButton_Impl_ = function() { };
$hxClasses["lime.ui._GamepadButton.GamepadButton_Impl_"] = lime.ui._GamepadButton.GamepadButton_Impl_;
lime.ui._GamepadButton.GamepadButton_Impl_.__name__ = ["lime","ui","_GamepadButton","GamepadButton_Impl_"];
lime.ui._GamepadButton.GamepadButton_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "X";
	case 3:
		return "Y";
	case 4:
		return "BACK";
	case 5:
		return "GUIDE";
	case 6:
		return "START";
	case 7:
		return "LEFT_STICK";
	case 8:
		return "RIGHT_STICK";
	case 9:
		return "LEFT_SHOULDER";
	case 10:
		return "RIGHT_SHOULDER";
	case 11:
		return "DPAD_UP";
	case 12:
		return "DPAD_DOWN";
	case 13:
		return "DPAD_LEFT";
	case 14:
		return "DPAD_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
lime.ui._KeyCode = {};
lime.ui._KeyCode.KeyCode_Impl_ = function() { };
$hxClasses["lime.ui._KeyCode.KeyCode_Impl_"] = lime.ui._KeyCode.KeyCode_Impl_;
lime.ui._KeyCode.KeyCode_Impl_.__name__ = ["lime","ui","_KeyCode","KeyCode_Impl_"];
lime.ui._KeyModifier = {};
lime.ui._KeyModifier.KeyModifier_Impl_ = function() { };
$hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime.ui._KeyModifier.KeyModifier_Impl_;
lime.ui._KeyModifier.KeyModifier_Impl_.__name__ = ["lime","ui","_KeyModifier","KeyModifier_Impl_"];
lime.ui._KeyModifier.KeyModifier_Impl_.__properties__ = {set_shiftKey:"set_shiftKey",get_shiftKey:"get_shiftKey",set_numLock:"set_numLock",get_numLock:"get_numLock",set_metaKey:"set_metaKey",get_metaKey:"get_metaKey",set_ctrlKey:"set_ctrlKey",get_ctrlKey:"get_ctrlKey",set_capsLock:"set_capsLock",get_capsLock:"get_capsLock",set_altKey:"set_altKey",get_altKey:"get_altKey"}
lime.ui._KeyModifier.KeyModifier_Impl_.get_altKey = function(this1) {
	return (this1 & 256) > 0 || (this1 & 512) > 0;
};
lime.ui._KeyModifier.KeyModifier_Impl_.set_altKey = function(this1,value) {
	if(value) this1 |= 768; else this1 &= 268435455 - 768;
	return value;
};
lime.ui._KeyModifier.KeyModifier_Impl_.get_capsLock = function(this1) {
	return (this1 & 8192) > 0 || (this1 & 8192) > 0;
};
lime.ui._KeyModifier.KeyModifier_Impl_.set_capsLock = function(this1,value) {
	if(value) this1 |= 8192; else this1 &= 268435455 - 8192;
	return value;
};
lime.ui._KeyModifier.KeyModifier_Impl_.get_ctrlKey = function(this1) {
	return (this1 & 64) > 0 || (this1 & 128) > 0;
};
lime.ui._KeyModifier.KeyModifier_Impl_.set_ctrlKey = function(this1,value) {
	if(value) this1 |= 192; else this1 &= 268435455 - 192;
	return value;
};
lime.ui._KeyModifier.KeyModifier_Impl_.get_metaKey = function(this1) {
	return (this1 & 1024) > 0 || (this1 & 2048) > 0;
};
lime.ui._KeyModifier.KeyModifier_Impl_.set_metaKey = function(this1,value) {
	if(value) this1 |= 3072; else this1 &= 268435455 - 3072;
	return value;
};
lime.ui._KeyModifier.KeyModifier_Impl_.get_numLock = function(this1) {
	return (this1 & 4096) > 0 || (this1 & 4096) > 0;
};
lime.ui._KeyModifier.KeyModifier_Impl_.set_numLock = function(this1,value) {
	if(value) this1 |= 4096; else this1 &= 268435455 - 4096;
	return value;
};
lime.ui._KeyModifier.KeyModifier_Impl_.get_shiftKey = function(this1) {
	return (this1 & 1) > 0 || (this1 & 2) > 0;
};
lime.ui._KeyModifier.KeyModifier_Impl_.set_shiftKey = function(this1,value) {
	if(value) this1 |= 3; else this1 &= 268435455 - 3;
	return value;
};
lime.ui.Mouse = function() { };
$hxClasses["lime.ui.Mouse"] = lime.ui.Mouse;
lime.ui.Mouse.__name__ = ["lime","ui","Mouse"];
lime.ui.Mouse.__properties__ = {set_lock:"set_lock",get_lock:"get_lock",set_cursor:"set_cursor",get_cursor:"get_cursor"}
lime.ui.Mouse.hide = function() {
	lime._backend.html5.HTML5Mouse.hide();
};
lime.ui.Mouse.show = function() {
	lime._backend.html5.HTML5Mouse.show();
};
lime.ui.Mouse.warp = function(x,y,window) {
	lime._backend.html5.HTML5Mouse.warp(x,y,window);
};
lime.ui.Mouse.get_cursor = function() {
	return lime._backend.html5.HTML5Mouse.get_cursor();
};
lime.ui.Mouse.set_cursor = function(value) {
	return lime._backend.html5.HTML5Mouse.set_cursor(value);
};
lime.ui.Mouse.get_lock = function() {
	return lime._backend.html5.HTML5Mouse.get_lock();
};
lime.ui.Mouse.set_lock = function(value) {
	return lime._backend.html5.HTML5Mouse.set_lock(value);
};
lime.ui.MouseCursor = $hxClasses["lime.ui.MouseCursor"] = { __ename__ : true, __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"] };
lime.ui.MouseCursor.ARROW = ["ARROW",0];
lime.ui.MouseCursor.ARROW.toString = $estr;
lime.ui.MouseCursor.ARROW.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.CROSSHAIR = ["CROSSHAIR",1];
lime.ui.MouseCursor.CROSSHAIR.toString = $estr;
lime.ui.MouseCursor.CROSSHAIR.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.DEFAULT = ["DEFAULT",2];
lime.ui.MouseCursor.DEFAULT.toString = $estr;
lime.ui.MouseCursor.DEFAULT.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.MOVE = ["MOVE",3];
lime.ui.MouseCursor.MOVE.toString = $estr;
lime.ui.MouseCursor.MOVE.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.POINTER = ["POINTER",4];
lime.ui.MouseCursor.POINTER.toString = $estr;
lime.ui.MouseCursor.POINTER.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.RESIZE_NESW = ["RESIZE_NESW",5];
lime.ui.MouseCursor.RESIZE_NESW.toString = $estr;
lime.ui.MouseCursor.RESIZE_NESW.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.RESIZE_NS = ["RESIZE_NS",6];
lime.ui.MouseCursor.RESIZE_NS.toString = $estr;
lime.ui.MouseCursor.RESIZE_NS.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE",7];
lime.ui.MouseCursor.RESIZE_NWSE.toString = $estr;
lime.ui.MouseCursor.RESIZE_NWSE.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.RESIZE_WE = ["RESIZE_WE",8];
lime.ui.MouseCursor.RESIZE_WE.toString = $estr;
lime.ui.MouseCursor.RESIZE_WE.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.TEXT = ["TEXT",9];
lime.ui.MouseCursor.TEXT.toString = $estr;
lime.ui.MouseCursor.TEXT.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.WAIT = ["WAIT",10];
lime.ui.MouseCursor.WAIT.toString = $estr;
lime.ui.MouseCursor.WAIT.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.WAIT_ARROW = ["WAIT_ARROW",11];
lime.ui.MouseCursor.WAIT_ARROW.toString = $estr;
lime.ui.MouseCursor.WAIT_ARROW.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.CUSTOM = ["CUSTOM",12];
lime.ui.MouseCursor.CUSTOM.toString = $estr;
lime.ui.MouseCursor.CUSTOM.__enum__ = lime.ui.MouseCursor;
lime.ui.Window = function(config) {
	this.onWindowRestore = new lime.app.Event();
	this.onWindowResize = new lime.app.Event();
	this.onWindowMove = new lime.app.Event();
	this.onWindowMinimize = new lime.app.Event();
	this.onWindowFullscreen = new lime.app.Event();
	this.onWindowFocusOut = new lime.app.Event();
	this.onWindowFocusIn = new lime.app.Event();
	this.onWindowDeactivate = new lime.app.Event();
	this.onWindowClose = new lime.app.Event();
	this.onWindowActivate = new lime.app.Event();
	this.onTouchStart = new lime.app.Event();
	this.onTouchMove = new lime.app.Event();
	this.onTouchEnd = new lime.app.Event();
	this.onMouseWheel = new lime.app.Event();
	this.onMouseUp = new lime.app.Event();
	this.onMouseMoveRelative = new lime.app.Event();
	this.onMouseMove = new lime.app.Event();
	this.onMouseDown = new lime.app.Event();
	this.onKeyUp = new lime.app.Event();
	this.onKeyDown = new lime.app.Event();
	this.onGamepadDisconnect = new lime.app.Event();
	this.onGamepadConnect = new lime.app.Event();
	this.onGamepadButtonUp = new lime.app.Event();
	this.onGamepadButtonDown = new lime.app.Event();
	this.onGamepadAxisMove = new lime.app.Event();
	this.config = config;
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__x = 0;
	this.__y = 0;
	if(config != null) {
		if(Object.prototype.hasOwnProperty.call(config,"width")) this.__width = config.width;
		if(Object.prototype.hasOwnProperty.call(config,"height")) this.__height = config.height;
		if(Object.prototype.hasOwnProperty.call(config,"fullscreen")) this.__fullscreen = config.fullscreen;
	}
	this.backend = new lime._backend.html5.HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime.ui.Window;
lime.ui.Window.__name__ = ["lime","ui","Window"];
lime.ui.Window.prototype = {
	currentRenderer: null
	,config: null
	,onGamepadAxisMove: null
	,onGamepadButtonDown: null
	,onGamepadButtonUp: null
	,onGamepadConnect: null
	,onGamepadDisconnect: null
	,onKeyDown: null
	,onKeyUp: null
	,onMouseDown: null
	,onMouseMove: null
	,onMouseMoveRelative: null
	,onMouseUp: null
	,onMouseWheel: null
	,onTouchEnd: null
	,onTouchMove: null
	,onTouchStart: null
	,onWindowActivate: null
	,onWindowClose: null
	,onWindowDeactivate: null
	,onWindowFocusIn: null
	,onWindowFocusOut: null
	,onWindowFullscreen: null
	,onWindowMinimize: null
	,onWindowMove: null
	,onWindowResize: null
	,onWindowRestore: null
	,backend: null
	,__fullscreen: null
	,__height: null
	,__minimized: null
	,__width: null
	,__x: null
	,__y: null
	,close: function() {
		this.backend.close();
	}
	,create: function(application) {
		this.backend.create(application);
		if(this.currentRenderer != null) this.currentRenderer.create();
	}
	,move: function(x,y) {
		this.backend.move(x,y);
		this.__x = x;
		this.__y = y;
	}
	,resize: function(width,height) {
		this.backend.resize(width,height);
		this.__width = width;
		this.__height = height;
	}
	,setIcon: function(image) {
		if(image == null) return;
		this.backend.setIcon(image);
	}
	,get_fullscreen: function() {
		return this.__fullscreen;
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.backend.setFullscreen(value);
	}
	,get_height: function() {
		return this.__height;
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,get_minimized: function() {
		return this.__minimized;
	}
	,set_minimized: function(value) {
		return this.__minimized = this.backend.setMinimized(value);
	}
	,get_width: function() {
		return this.__width;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		this.move(value,this.__y);
		return this.__x;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		this.move(this.__x,value);
		return this.__y;
	}
	,__class__: lime.ui.Window
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_minimized:"set_minimized",get_minimized:"get_minimized",set_height:"set_height",get_height:"get_height",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen"}
};
lime.utils = {};
lime.utils.ByteArray = function(size) {
	if(size == null) size = 0;
	this.littleEndian = false;
	this.allocated = 0;
	this.position = 0;
	this.length = 0;
	if(size > 0) this.allocated = size;
	this.___resizeBuffer(this.allocated);
	this.set_length(this.allocated);
};
$hxClasses["lime.utils.ByteArray"] = lime.utils.ByteArray;
lime.utils.ByteArray.__name__ = ["lime","utils","ByteArray"];
lime.utils.ByteArray.fromBytes = function(bytes) {
	var result = new lime.utils.ByteArray();
	result.byteView = new Uint8Array(bytes.b);
	result.set_length(result.byteView.length);
	result.allocated = result.length;
	return result;
};
lime.utils.ByteArray.readFile = function(path) {
	return null;
};
lime.utils.ByteArray.__ofBuffer = function(buffer) {
	var bytes = new lime.utils.ByteArray();
	bytes.set_length(bytes.allocated = buffer.byteLength);
	bytes.data = new DataView(buffer);
	bytes.byteView = new Uint8Array(buffer);
	return bytes;
};
lime.utils.ByteArray.prototype = {
	bytesAvailable: null
	,length: null
	,objectEncoding: null
	,position: null
	,allocated: null
	,littleEndian: null
	,byteView: null
	,data: null
	,clear: function() {
		if(this.allocated < 0) this.___resizeBuffer(this.allocated = Std["int"](Math.max(0,this.allocated * 2))); else if(this.allocated > 0) this.___resizeBuffer(this.allocated = 0);
		this.length = 0;
		0;
		this.position = 0;
	}
	,compress: function(algorithm) {
	}
	,deflate: function() {
		this.compress(lime.utils.CompressionAlgorithm.DEFLATE);
	}
	,inflate: function() {
		this.uncompress(lime.utils.CompressionAlgorithm.DEFLATE);
	}
	,readBoolean: function() {
		return this.readByte() != 0;
	}
	,readByte: function() {
		var data = this.data;
		return data.getInt8(this.position++);
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(offset < 0 || length < 0) throw "Read error - Out of bounds";
		if(length == 0) length = this.length - this.position;
		var lengthToEnsure = offset + length;
		if(bytes.length < lengthToEnsure) {
			if(bytes.allocated < lengthToEnsure) bytes.___resizeBuffer(bytes.allocated = Std["int"](Math.max(lengthToEnsure,bytes.allocated * 2))); else if(bytes.allocated > lengthToEnsure * 2) bytes.___resizeBuffer(bytes.allocated = lengthToEnsure);
			bytes.length = lengthToEnsure;
			lengthToEnsure;
		}
		bytes.byteView.set(this.byteView.subarray(this.position,this.position + length),offset);
		bytes.position = offset;
		this.position += length;
		if(bytes.position + length > bytes.length) bytes.set_length(bytes.position + length);
	}
	,readDouble: function() {
		var $double = this.data.getFloat64(this.position,this.littleEndian);
		this.position += 8;
		return $double;
	}
	,readFloat: function() {
		var $float = this.data.getFloat32(this.position,this.littleEndian);
		this.position += 4;
		return $float;
	}
	,readInt: function() {
		var $int = this.data.getInt32(this.position,this.littleEndian);
		this.position += 4;
		return $int;
	}
	,readMultiByte: function(length,charSet) {
		return this.readUTFBytes(length);
	}
	,readShort: function() {
		var $short = this.data.getInt16(this.position,this.littleEndian);
		this.position += 2;
		return $short;
	}
	,readUnsignedByte: function() {
		var data = this.data;
		return data.getUint8(this.position++);
	}
	,readUnsignedInt: function() {
		var uInt = this.data.getUint32(this.position,this.littleEndian);
		this.position += 4;
		return uInt;
	}
	,readUnsignedShort: function() {
		var uShort = this.data.getUint16(this.position,this.littleEndian);
		this.position += 2;
		return uShort;
	}
	,readUTF: function() {
		var bytesCount = this.readUnsignedShort();
		return this.readUTFBytes(bytesCount);
	}
	,readUTFBytes: function(len) {
		var value = "";
		var max = this.position + len;
		while(this.position < max) {
			var data = this.data;
			var c = data.getUint8(this.position++);
			if(c < 128) {
				if(c == 0) break;
				value += String.fromCharCode(c);
			} else if(c < 224) value += String.fromCharCode((c & 63) << 6 | data.getUint8(this.position++) & 127); else if(c < 240) {
				var c2 = data.getUint8(this.position++);
				value += String.fromCharCode((c & 31) << 12 | (c2 & 127) << 6 | data.getUint8(this.position++) & 127);
			} else {
				var c21 = data.getUint8(this.position++);
				var c3 = data.getUint8(this.position++);
				value += String.fromCharCode((c & 15) << 18 | (c21 & 127) << 12 | c3 << 6 & 127 | data.getUint8(this.position++) & 127);
			}
		}
		return value;
	}
	,toString: function() {
		var cachePosition = this.position;
		this.position = 0;
		var value = this.readUTFBytes(this.length);
		this.position = cachePosition;
		return value;
	}
	,uncompress: function(algorithm) {
		haxe.Log.trace("Warning: ByteArray.uncompress on JS target requires the 'format' haxelib",{ fileName : "ByteArray.hx", lineNumber : 667, className : "lime.utils.ByteArray", methodName : "uncompress"});
	}
	,write_uncheck: function($byte) {
	}
	,writeBoolean: function(value) {
		this.writeByte(value?1:0);
	}
	,writeByte: function(value) {
		var lengthToEnsure = this.position + 1;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		var data = this.data;
		data.setInt8(this.position,value);
		this.position += 1;
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(bytes.length == 0) return;
		if((function($this) {
			var $r;
			var aNeg = 0 < 0;
			var bNeg = offset < 0;
			$r = aNeg != bNeg?aNeg:0 > offset;
			return $r;
		}(this)) || (function($this) {
			var $r;
			var aNeg1 = 0 < 0;
			var bNeg1 = length < 0;
			$r = aNeg1 != bNeg1?aNeg1:0 > length;
			return $r;
		}(this))) throw "Write error - Out of bounds";
		if((function($this) {
			var $r;
			var $int = length;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) == 0) length = bytes.length;
		var lengthToEnsure = this.position + length;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.byteView.set(bytes.byteView.subarray(offset,offset + length),this.position);
		this.position = this.position + length;
	}
	,writeDouble: function(x) {
		var lengthToEnsure = this.position + 8;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setFloat64(this.position,x,this.littleEndian);
		this.position += 8;
	}
	,writeFile: function(path) {
	}
	,writeFloat: function(x) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setFloat32(this.position,x,this.littleEndian);
		this.position += 4;
	}
	,writeInt: function(value) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setInt32(this.position,value,this.littleEndian);
		this.position += 4;
	}
	,writeShort: function(value) {
		var lengthToEnsure = this.position + 2;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setInt16(this.position,value,this.littleEndian);
		this.position += 2;
	}
	,writeUnsignedInt: function(value) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setUint32(this.position,value,this.littleEndian);
		this.position += 4;
	}
	,writeUnsignedShort: function(value) {
		var lengthToEnsure = this.position + 2;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setUint16(this.position,value,this.littleEndian);
		this.position += 2;
	}
	,writeUTF: function(value) {
		this.writeUnsignedShort(this.__getUTFBytesCount(value));
		this.writeUTFBytes(value);
	}
	,writeUTFBytes: function(value) {
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = value.charCodeAt(i);
			if(c <= 127) this.writeByte(c); else if(c <= 2047) {
				this.writeByte(192 | c >> 6);
				this.writeByte(128 | c & 63);
			} else if(c <= 65535) {
				this.writeByte(224 | c >> 12);
				this.writeByte(128 | c >> 6 & 63);
				this.writeByte(128 | c & 63);
			} else {
				this.writeByte(240 | c >> 18);
				this.writeByte(128 | c >> 12 & 63);
				this.writeByte(128 | c >> 6 & 63);
				this.writeByte(128 | c & 63);
			}
		}
	}
	,__fromBytes: function(bytes) {
		this.byteView = new Uint8Array(bytes.b);
		this.set_length(this.byteView.length);
		this.allocated = this.length;
	}
	,__get: function(pos) {
		return this.data.getInt8(pos);
	}
	,__getBuffer: function() {
		return this.data.buffer;
	}
	,__getUTFBytesCount: function(value) {
		var count = 0;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = value.charCodeAt(i);
			if(c <= 127) count += 1; else if(c <= 2047) count += 2; else if(c <= 65535) count += 3; else count += 4;
		}
		return count;
	}
	,___resizeBuffer: function(len) {
		var oldByteView = this.byteView;
		var newByteView = new Uint8Array(len);
		if(oldByteView != null) {
			if(oldByteView.length <= len) newByteView.set(oldByteView); else newByteView.set(oldByteView.subarray(0,len));
		}
		this.byteView = newByteView;
		this.data = new DataView(newByteView.buffer);
	}
	,__set: function(pos,v) {
		this.data.setUint8(pos,v);
	}
	,get_bytesAvailable: function() {
		return this.length - this.position;
	}
	,get_endian: function() {
		if(this.littleEndian) return "littleEndian"; else return "bigEndian";
	}
	,set_endian: function(endian) {
		this.littleEndian = endian == "littleEndian";
		return endian;
	}
	,set_length: function(value) {
		if(this.allocated < value) this.___resizeBuffer(this.allocated = Std["int"](Math.max(value,this.allocated * 2))); else if(this.allocated > value * 2) this.___resizeBuffer(this.allocated = value);
		this.length = value;
		return value;
	}
	,__class__: lime.utils.ByteArray
	,__properties__: {set_length:"set_length",set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
lime.utils.CompressionAlgorithm = $hxClasses["lime.utils.CompressionAlgorithm"] = { __ename__ : true, __constructs__ : ["DEFLATE","ZLIB","LZMA","GZIP"] };
lime.utils.CompressionAlgorithm.DEFLATE = ["DEFLATE",0];
lime.utils.CompressionAlgorithm.DEFLATE.toString = $estr;
lime.utils.CompressionAlgorithm.DEFLATE.__enum__ = lime.utils.CompressionAlgorithm;
lime.utils.CompressionAlgorithm.ZLIB = ["ZLIB",1];
lime.utils.CompressionAlgorithm.ZLIB.toString = $estr;
lime.utils.CompressionAlgorithm.ZLIB.__enum__ = lime.utils.CompressionAlgorithm;
lime.utils.CompressionAlgorithm.LZMA = ["LZMA",2];
lime.utils.CompressionAlgorithm.LZMA.toString = $estr;
lime.utils.CompressionAlgorithm.LZMA.__enum__ = lime.utils.CompressionAlgorithm;
lime.utils.CompressionAlgorithm.GZIP = ["GZIP",3];
lime.utils.CompressionAlgorithm.GZIP.toString = $estr;
lime.utils.CompressionAlgorithm.GZIP.__enum__ = lime.utils.CompressionAlgorithm;
lime.utils.GLUtils = function() { };
$hxClasses["lime.utils.GLUtils"] = lime.utils.GLUtils;
lime.utils.GLUtils.__name__ = ["lime","utils","GLUtils"];
lime.utils.GLUtils.compileShader = function(source,type) {
	var shader = lime.graphics.opengl.GL.context.createShader(type);
	lime.graphics.opengl.GL.context.shaderSource(shader,source);
	lime.graphics.opengl.GL.context.compileShader(shader);
	if(lime.graphics.opengl.GL.context.getShaderParameter(shader,35713) == 0) switch(type) {
	case 35633:
		throw "Error compiling vertex shader";
		break;
	case 35632:
		throw "Error compiling fragment shader";
		break;
	default:
		throw "Error compiling unknown shader type";
	}
	return shader;
};
lime.utils.GLUtils.createProgram = function(vertexSource,fragmentSource) {
	var vertexShader = lime.utils.GLUtils.compileShader(vertexSource,35633);
	var fragmentShader = lime.utils.GLUtils.compileShader(fragmentSource,35632);
	var program = lime.graphics.opengl.GL.context.createProgram();
	lime.graphics.opengl.GL.context.attachShader(program,vertexShader);
	lime.graphics.opengl.GL.context.attachShader(program,fragmentShader);
	lime.graphics.opengl.GL.context.linkProgram(program);
	if(lime.graphics.opengl.GL.context.getProgramParameter(program,35714) == 0) throw "Unable to initialize the shader program.";
	return program;
};
lime.utils.IDataInput = function() { };
$hxClasses["lime.utils.IDataInput"] = lime.utils.IDataInput;
lime.utils.IDataInput.__name__ = ["lime","utils","IDataInput"];
lime.utils.IDataInput.prototype = {
	bytesAvailable: null
	,readBoolean: null
	,readByte: null
	,readBytes: null
	,readDouble: null
	,readFloat: null
	,readInt: null
	,readShort: null
	,readUnsignedByte: null
	,readUnsignedInt: null
	,readUnsignedShort: null
	,readUTF: null
	,readUTFBytes: null
	,get_bytesAvailable: null
	,get_endian: null
	,set_endian: null
	,__class__: lime.utils.IDataInput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
lime.utils.IMemoryRange = function() { };
$hxClasses["lime.utils.IMemoryRange"] = lime.utils.IMemoryRange;
lime.utils.IMemoryRange.__name__ = ["lime","utils","IMemoryRange"];
lime.utils.IMemoryRange.prototype = {
	getByteBuffer: null
	,getStart: null
	,getLength: null
	,__class__: lime.utils.IMemoryRange
};
var msignal = {};
msignal.Signal = function(valueClasses) {
	if(valueClasses == null) valueClasses = [];
	this.valueClasses = valueClasses;
	this.slots = msignal.SlotList.NIL;
	this.priorityBased = false;
};
$hxClasses["msignal.Signal"] = msignal.Signal;
msignal.Signal.__name__ = ["msignal","Signal"];
msignal.Signal.prototype = {
	valueClasses: null
	,numListeners: null
	,slots: null
	,priorityBased: null
	,add: function(listener) {
		return this.registerListener(listener);
	}
	,addOnce: function(listener) {
		return this.registerListener(listener,true);
	}
	,addWithPriority: function(listener,priority) {
		if(priority == null) priority = 0;
		return this.registerListener(listener,false,priority);
	}
	,addOnceWithPriority: function(listener,priority) {
		if(priority == null) priority = 0;
		return this.registerListener(listener,true,priority);
	}
	,remove: function(listener) {
		var slot = this.slots.find(listener);
		if(slot == null) return null;
		this.slots = this.slots.filterNot(listener);
		return slot;
	}
	,removeAll: function() {
		this.slots = msignal.SlotList.NIL;
	}
	,registerListener: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		if(this.registrationPossible(listener,once)) {
			var newSlot = this.createSlot(listener,once,priority);
			if(!this.priorityBased && priority != 0) this.priorityBased = true;
			if(!this.priorityBased && priority == 0) this.slots = this.slots.prepend(newSlot); else this.slots = this.slots.insertWithPriority(newSlot);
			return newSlot;
		}
		return this.slots.find(listener);
	}
	,registrationPossible: function(listener,once) {
		if(!this.slots.nonEmpty) return true;
		var existingSlot = this.slots.find(listener);
		if(existingSlot == null) return true;
		if(existingSlot.once != once) throw "You cannot addOnce() then add() the same listener without removing the relationship first.";
		return false;
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		return null;
	}
	,get_numListeners: function() {
		return this.slots.get_length();
	}
	,__class__: msignal.Signal
	,__properties__: {get_numListeners:"get_numListeners"}
};
msignal.Signal0 = function() {
	msignal.Signal.call(this);
};
$hxClasses["msignal.Signal0"] = msignal.Signal0;
msignal.Signal0.__name__ = ["msignal","Signal0"];
msignal.Signal0.__super__ = msignal.Signal;
msignal.Signal0.prototype = $extend(msignal.Signal.prototype,{
	dispatch: function() {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute();
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		return new msignal.Slot0(this,listener,once,priority);
	}
	,__class__: msignal.Signal0
});
msignal.Signal1 = function(type) {
	msignal.Signal.call(this,[type]);
};
$hxClasses["msignal.Signal1"] = msignal.Signal1;
msignal.Signal1.__name__ = ["msignal","Signal1"];
msignal.Signal1.__super__ = msignal.Signal;
msignal.Signal1.prototype = $extend(msignal.Signal.prototype,{
	dispatch: function(value) {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute(value);
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		return new msignal.Slot1(this,listener,once,priority);
	}
	,__class__: msignal.Signal1
});
msignal.Signal2 = function(type1,type2) {
	msignal.Signal.call(this,[type1,type2]);
};
$hxClasses["msignal.Signal2"] = msignal.Signal2;
msignal.Signal2.__name__ = ["msignal","Signal2"];
msignal.Signal2.__super__ = msignal.Signal;
msignal.Signal2.prototype = $extend(msignal.Signal.prototype,{
	dispatch: function(value1,value2) {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute(value1,value2);
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		return new msignal.Slot2(this,listener,once,priority);
	}
	,__class__: msignal.Signal2
});
msignal.Slot = function(signal,listener,once,priority) {
	if(priority == null) priority = 0;
	if(once == null) once = false;
	this.signal = signal;
	this.set_listener(listener);
	this.once = once;
	this.priority = priority;
	this.enabled = true;
};
$hxClasses["msignal.Slot"] = msignal.Slot;
msignal.Slot.__name__ = ["msignal","Slot"];
msignal.Slot.prototype = {
	listener: null
	,once: null
	,priority: null
	,enabled: null
	,signal: null
	,remove: function() {
		this.signal.remove(this.listener);
	}
	,set_listener: function(value) {
		if(value == null) throw "listener cannot be null";
		return this.listener = value;
	}
	,__class__: msignal.Slot
	,__properties__: {set_listener:"set_listener"}
};
msignal.Slot0 = function(signal,listener,once,priority) {
	if(priority == null) priority = 0;
	if(once == null) once = false;
	msignal.Slot.call(this,signal,listener,once,priority);
};
$hxClasses["msignal.Slot0"] = msignal.Slot0;
msignal.Slot0.__name__ = ["msignal","Slot0"];
msignal.Slot0.__super__ = msignal.Slot;
msignal.Slot0.prototype = $extend(msignal.Slot.prototype,{
	execute: function() {
		if(!this.enabled) return;
		if(this.once) this.remove();
		this.listener();
	}
	,__class__: msignal.Slot0
});
msignal.Slot1 = function(signal,listener,once,priority) {
	if(priority == null) priority = 0;
	if(once == null) once = false;
	msignal.Slot.call(this,signal,listener,once,priority);
};
$hxClasses["msignal.Slot1"] = msignal.Slot1;
msignal.Slot1.__name__ = ["msignal","Slot1"];
msignal.Slot1.__super__ = msignal.Slot;
msignal.Slot1.prototype = $extend(msignal.Slot.prototype,{
	param: null
	,execute: function(value1) {
		if(!this.enabled) return;
		if(this.once) this.remove();
		if(this.param != null) value1 = this.param;
		this.listener(value1);
	}
	,__class__: msignal.Slot1
});
msignal.Slot2 = function(signal,listener,once,priority) {
	if(priority == null) priority = 0;
	if(once == null) once = false;
	msignal.Slot.call(this,signal,listener,once,priority);
};
$hxClasses["msignal.Slot2"] = msignal.Slot2;
msignal.Slot2.__name__ = ["msignal","Slot2"];
msignal.Slot2.__super__ = msignal.Slot;
msignal.Slot2.prototype = $extend(msignal.Slot.prototype,{
	param1: null
	,param2: null
	,execute: function(value1,value2) {
		if(!this.enabled) return;
		if(this.once) this.remove();
		if(this.param1 != null) value1 = this.param1;
		if(this.param2 != null) value2 = this.param2;
		this.listener(value1,value2);
	}
	,__class__: msignal.Slot2
});
msignal.SlotList = function(head,tail) {
	this.nonEmpty = false;
	if(head == null && tail == null) {
		if(msignal.SlotList.NIL != null) throw "Parameters head and tail are null. Use the NIL element instead.";
		this.nonEmpty = false;
	} else if(head == null) throw "Parameter head cannot be null."; else {
		this.head = head;
		if(tail == null) this.tail = msignal.SlotList.NIL; else this.tail = tail;
		this.nonEmpty = true;
	}
};
$hxClasses["msignal.SlotList"] = msignal.SlotList;
msignal.SlotList.__name__ = ["msignal","SlotList"];
msignal.SlotList.NIL = null;
msignal.SlotList.prototype = {
	head: null
	,tail: null
	,nonEmpty: null
	,length: null
	,get_length: function() {
		if(!this.nonEmpty) return 0;
		if(this.tail == msignal.SlotList.NIL) return 1;
		var result = 0;
		var p = this;
		while(p.nonEmpty) {
			++result;
			p = p.tail;
		}
		return result;
	}
	,prepend: function(slot) {
		return new msignal.SlotList(slot,this);
	}
	,append: function(slot) {
		if(slot == null) return this;
		if(!this.nonEmpty) return new msignal.SlotList(slot);
		if(this.tail == msignal.SlotList.NIL) return new msignal.SlotList(slot).prepend(this.head);
		var wholeClone = new msignal.SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			subClone = subClone.tail = new msignal.SlotList(current.head);
			current = current.tail;
		}
		subClone.tail = new msignal.SlotList(slot);
		return wholeClone;
	}
	,insertWithPriority: function(slot) {
		if(!this.nonEmpty) return new msignal.SlotList(slot);
		var priority = slot.priority;
		if(priority >= this.head.priority) return this.prepend(slot);
		var wholeClone = new msignal.SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			if(priority > current.head.priority) {
				subClone.tail = current.prepend(slot);
				return wholeClone;
			}
			subClone = subClone.tail = new msignal.SlotList(current.head);
			current = current.tail;
		}
		subClone.tail = new msignal.SlotList(slot);
		return wholeClone;
	}
	,filterNot: function(listener) {
		if(!this.nonEmpty || listener == null) return this;
		if(Reflect.compareMethods(this.head.listener,listener)) return this.tail;
		var wholeClone = new msignal.SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			if(Reflect.compareMethods(current.head.listener,listener)) {
				subClone.tail = current.tail;
				return wholeClone;
			}
			subClone = subClone.tail = new msignal.SlotList(current.head);
			current = current.tail;
		}
		return this;
	}
	,contains: function(listener) {
		if(!this.nonEmpty) return false;
		var p = this;
		while(p.nonEmpty) {
			if(Reflect.compareMethods(p.head.listener,listener)) return true;
			p = p.tail;
		}
		return false;
	}
	,find: function(listener) {
		if(!this.nonEmpty) return null;
		var p = this;
		while(p.nonEmpty) {
			if(Reflect.compareMethods(p.head.listener,listener)) return p.head;
			p = p.tail;
		}
		return null;
	}
	,__class__: msignal.SlotList
	,__properties__: {get_length:"get_length"}
};
openfl.IAssetCache = function() { };
$hxClasses["openfl.IAssetCache"] = openfl.IAssetCache;
openfl.IAssetCache.__name__ = ["openfl","IAssetCache"];
openfl.IAssetCache.prototype = {
	clear: null
	,getBitmapData: null
	,getFont: null
	,getSound: null
	,hasBitmapData: null
	,hasFont: null
	,hasSound: null
	,removeBitmapData: null
	,removeFont: null
	,removeSound: null
	,setBitmapData: null
	,setFont: null
	,setSound: null
	,__class__: openfl.IAssetCache
};
openfl.AssetCache = function() {
	this.__enabled = true;
	this.bitmapData = new haxe.ds.StringMap();
	this.font = new haxe.ds.StringMap();
	this.sound = new haxe.ds.StringMap();
};
$hxClasses["openfl.AssetCache"] = openfl.AssetCache;
openfl.AssetCache.__name__ = ["openfl","AssetCache"];
openfl.AssetCache.__interfaces__ = [openfl.IAssetCache];
openfl.AssetCache.prototype = {
	bitmapData: null
	,font: null
	,sound: null
	,__enabled: null
	,clear: function(prefix) {
		if(prefix == null) {
			this.bitmapData = new haxe.ds.StringMap();
			this.font = new haxe.ds.StringMap();
			this.sound = new haxe.ds.StringMap();
		} else {
			var keys = this.bitmapData.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.bitmapData.remove(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.font.remove(key1);
			}
			var keys2 = this.sound.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.sound.remove(key2);
			}
		}
	}
	,getBitmapData: function(id) {
		return this.bitmapData.get(id);
	}
	,getFont: function(id) {
		return this.font.get(id);
	}
	,getSound: function(id) {
		return this.sound.get(id);
	}
	,hasBitmapData: function(id) {
		return this.bitmapData.exists(id);
	}
	,hasFont: function(id) {
		return this.font.exists(id);
	}
	,hasSound: function(id) {
		return this.sound.exists(id);
	}
	,removeBitmapData: function(id) {
		return this.bitmapData.remove(id);
	}
	,removeFont: function(id) {
		return this.font.remove(id);
	}
	,removeSound: function(id) {
		return this.sound.remove(id);
	}
	,setBitmapData: function(id,bitmapData) {
		this.bitmapData.set(id,bitmapData);
	}
	,setFont: function(id,font) {
		this.font.set(id,font);
	}
	,setSound: function(id,sound) {
		this.sound.set(id,sound);
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,set_enabled: function(value) {
		return this.__enabled = value;
	}
	,__class__: openfl.AssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
openfl.Assets = function() { };
$hxClasses["openfl.Assets"] = openfl.Assets;
openfl.Assets.__name__ = ["openfl","Assets"];
openfl.Assets.addEventListener = function(type,listener,useCapture,priority,useWeakReference) {
	if(useWeakReference == null) useWeakReference = false;
	if(priority == null) priority = 0;
	if(useCapture == null) useCapture = false;
	openfl.Assets.dispatcher.addEventListener(type,listener,useCapture,priority,useWeakReference);
};
openfl.Assets.dispatchEvent = function(event) {
	return openfl.Assets.dispatcher.dispatchEvent(event);
};
openfl.Assets.exists = function(id,type) {
	return lime.Assets.exists(id,type);
};
openfl.Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl.Assets.cache.get_enabled() && openfl.Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl.Assets.cache.getBitmapData(id);
		if(openfl.Assets.isValidBitmapData(bitmapData)) return bitmapData;
	}
	var image = lime.Assets.getImage(id,false);
	if(image != null) {
		var bitmapData1 = openfl.display.BitmapData.fromImage(image);
		if(useCache && openfl.Assets.cache.get_enabled()) openfl.Assets.cache.setBitmapData(id,bitmapData1);
		return bitmapData1;
	}
	return null;
};
openfl.Assets.getBytes = function(id) {
	return lime.Assets.getBytes(id);
};
openfl.Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl.Assets.cache.get_enabled() && openfl.Assets.cache.hasFont(id)) return openfl.Assets.cache.getFont(id);
	var limeFont = lime.Assets.getFont(id,false);
	if(limeFont != null) {
		var font = openfl.text.Font.__fromLimeFont(limeFont);
		if(useCache && openfl.Assets.cache.get_enabled()) openfl.Assets.cache.setFont(id,font);
		return font;
	}
	return new openfl.text.Font();
};
openfl.Assets.getLibrary = function(name) {
	if(name == null || name == "") name = "default";
	return lime.Assets.libraries.get(name);
};
openfl.Assets.getMovieClip = function(id) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) {
			if(library.isLocal(symbolName,"MOVIE_CLIP")) return library.getMovieClip(symbolName); else haxe.Log.trace("[openfl.Assets] MovieClip asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 221, className : "openfl.Assets", methodName : "getMovieClip"});
		} else haxe.Log.trace("[openfl.Assets] There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 227, className : "openfl.Assets", methodName : "getMovieClip"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 233, className : "openfl.Assets", methodName : "getMovieClip"});
	return null;
};
openfl.Assets.getMusic = function(id,useCache) {
	if(useCache == null) useCache = true;
	var path = lime.Assets.getPath(id);
	if(path != null) return new openfl.media.Sound(new openfl.net.URLRequest(path));
	return null;
};
openfl.Assets.getPath = function(id) {
	return lime.Assets.getPath(id);
};
openfl.Assets.getSound = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl.Assets.cache.get_enabled() && openfl.Assets.cache.hasSound(id)) {
		var sound = openfl.Assets.cache.getSound(id);
		if(openfl.Assets.isValidSound(sound)) return sound;
	}
	var path = lime.Assets.getPath(id);
	if(path != null) return new openfl.media.Sound(new openfl.net.URLRequest(path));
	return null;
};
openfl.Assets.getText = function(id) {
	return lime.Assets.getText(id);
};
openfl.Assets.hasEventListener = function(type) {
	return openfl.Assets.dispatcher.hasEventListener(type);
};
openfl.Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl.Assets.cache.get_enabled()) {
		if(type == "IMAGE" || type == null) {
			if(openfl.Assets.cache.hasBitmapData(id)) return true;
		}
		if(type == "FONT" || type == null) {
			if(openfl.Assets.cache.hasFont(id)) return true;
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(openfl.Assets.cache.hasSound(id)) return true;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) return library.isLocal(symbolName,type);
	return false;
};
openfl.Assets.isValidBitmapData = function(bitmapData) {
	return bitmapData != null;
	return true;
};
openfl.Assets.isValidSound = function(sound) {
	return true;
};
openfl.Assets.list = function(type) {
	return lime.Assets.list(type);
};
openfl.Assets.loadBitmapData = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl.Assets.cache.get_enabled() && openfl.Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl.Assets.cache.getBitmapData(id);
		if(openfl.Assets.isValidBitmapData(bitmapData)) {
			handler(bitmapData);
			return;
		}
	}
	lime.Assets.loadImage(id,function(image) {
		if(image != null) {
			var bitmapData1 = openfl.display.BitmapData.fromImage(image);
			if(useCache && openfl.Assets.cache.get_enabled()) openfl.Assets.cache.setBitmapData(id,bitmapData1);
			handler(bitmapData1);
		}
	},false);
};
openfl.Assets.loadBytes = function(id,handler) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			library.loadBytes(symbolName,handler);
			return;
		} else haxe.Log.trace("[openfl.Assets] There is no String or ByteArray asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 546, className : "openfl.Assets", methodName : "loadBytes"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 552, className : "openfl.Assets", methodName : "loadBytes"});
	handler(null);
};
openfl.Assets.loadFont = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl.Assets.cache.get_enabled() && openfl.Assets.cache.hasFont(id)) {
		handler(openfl.Assets.cache.getFont(id));
		return;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) {
			library.loadFont(symbolName,function(limeFont) {
				var font = openfl.text.Font.__fromLimeFont(limeFont);
				if(useCache && openfl.Assets.cache.get_enabled()) openfl.Assets.cache.setFont(id,font);
				handler(font);
			});
			return;
		} else haxe.Log.trace("[openfl.Assets] There is no Font asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 611, className : "openfl.Assets", methodName : "loadFont"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 617, className : "openfl.Assets", methodName : "loadFont"});
	handler(null);
};
openfl.Assets.loadLibrary = function(name,handler) {
	lime.Assets.loadLibrary(name,handler);
};
openfl.Assets.loadMusic = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	handler(openfl.Assets.getMusic(id,useCache));
};
openfl.Assets.loadMovieClip = function(id,handler) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) {
			library.loadMovieClip(symbolName,handler);
			return;
		} else haxe.Log.trace("[openfl.Assets] There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 695, className : "openfl.Assets", methodName : "loadMovieClip"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 701, className : "openfl.Assets", methodName : "loadMovieClip"});
	handler(null);
};
openfl.Assets.loadSound = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	handler(openfl.Assets.getSound(id,useCache));
};
openfl.Assets.loadText = function(id,handler) {
	lime.Assets.loadText(id,handler);
};
openfl.Assets.registerLibrary = function(name,library) {
	lime.Assets.registerLibrary(name,library);
};
openfl.Assets.removeEventListener = function(type,listener,capture) {
	if(capture == null) capture = false;
	openfl.Assets.dispatcher.removeEventListener(type,listener,capture);
};
openfl.Assets.resolveClass = function(name) {
	return Type.resolveClass(name);
};
openfl.Assets.resolveEnum = function(name) {
	var value = Type.resolveEnum(name);
	return value;
};
openfl.Assets.unloadLibrary = function(name) {
	lime.Assets.unloadLibrary(name);
};
openfl.Assets.library_onEvent = function(library,type) {
	if(type == "change") {
		openfl.Assets.cache.clear();
		openfl.Assets.dispatchEvent(new openfl.events.Event(openfl.events.Event.CHANGE));
	}
};
openfl.AssetLibrary = function() {
	lime.AssetLibrary.call(this);
};
$hxClasses["openfl.AssetLibrary"] = openfl.AssetLibrary;
openfl.AssetLibrary.__name__ = ["openfl","AssetLibrary"];
openfl.AssetLibrary.__super__ = lime.AssetLibrary;
openfl.AssetLibrary.prototype = $extend(lime.AssetLibrary.prototype,{
	getMovieClip: function(id) {
		return null;
	}
	,getMusic: function(id) {
		return this.getSound(id);
	}
	,getSound: function(id) {
		return null;
	}
	,loadMovieClip: function(id,handler) {
		handler(this.getMovieClip(id));
	}
	,loadMusic: function(id,handler) {
		handler(this.getMusic(id));
	}
	,loadSound: function(id,handler) {
		handler(this.getSound(id));
	}
	,__class__: openfl.AssetLibrary
});
openfl._Assets = {};
openfl._Assets.AssetType_Impl_ = function() { };
$hxClasses["openfl._Assets.AssetType_Impl_"] = openfl._Assets.AssetType_Impl_;
openfl._Assets.AssetType_Impl_.__name__ = ["openfl","_Assets","AssetType_Impl_"];
openfl.Memory = function() { };
$hxClasses["openfl.Memory"] = openfl.Memory;
openfl.Memory.__name__ = ["openfl","Memory"];
openfl.Memory.gcRef = null;
openfl.Memory.len = null;
openfl.Memory._setPositionTemporarily = function(position,action) {
	var oldPosition = openfl.Memory.gcRef.position;
	openfl.Memory.gcRef.position = position;
	var value = action();
	openfl.Memory.gcRef.position = oldPosition;
	return value;
};
openfl.Memory.getByte = function(addr) {
	return openfl.Memory.gcRef.data.getInt8(addr);
};
openfl.Memory.getDouble = function(addr) {
	return openfl.Memory._setPositionTemporarily(addr,function() {
		return openfl.Memory.gcRef.readDouble();
	});
};
openfl.Memory.getFloat = function(addr) {
	return openfl.Memory._setPositionTemporarily(addr,function() {
		return openfl.Memory.gcRef.readFloat();
	});
};
openfl.Memory.getI32 = function(addr) {
	return openfl.Memory._setPositionTemporarily(addr,function() {
		return openfl.Memory.gcRef.readInt();
	});
};
openfl.Memory.getUI16 = function(addr) {
	return openfl.Memory._setPositionTemporarily(addr,function() {
		return openfl.Memory.gcRef.readUnsignedShort();
	});
};
openfl.Memory.select = function(inBytes) {
	openfl.Memory.gcRef = inBytes;
	if(inBytes != null) openfl.Memory.len = inBytes.length; else openfl.Memory.len = 0;
};
openfl.Memory.setByte = function(addr,v) {
	openfl.Memory.gcRef.data.setUint8(addr,v);
};
openfl.Memory.setDouble = function(addr,v) {
	openfl.Memory._setPositionTemporarily(addr,function() {
		openfl.Memory.gcRef.writeDouble(v);
	});
};
openfl.Memory.setFloat = function(addr,v) {
	openfl.Memory._setPositionTemporarily(addr,function() {
		openfl.Memory.gcRef.writeFloat(v);
	});
};
openfl.Memory.setI16 = function(addr,v) {
	openfl.Memory._setPositionTemporarily(addr,function() {
		openfl.Memory.gcRef.writeUnsignedShort(v);
	});
};
openfl.Memory.setI32 = function(addr,v) {
	openfl.Memory._setPositionTemporarily(addr,function() {
		openfl.Memory.gcRef.writeInt(v);
	});
};
openfl._Vector = {};
openfl._Vector.Vector_Impl_ = function() { };
$hxClasses["openfl._Vector.Vector_Impl_"] = openfl._Vector.Vector_Impl_;
openfl._Vector.Vector_Impl_.__name__ = ["openfl","_Vector","Vector_Impl_"];
openfl._Vector.Vector_Impl_.__properties__ = {set_fixed:"set_fixed",get_fixed:"get_fixed",set_length:"set_length",get_length:"get_length"}
openfl._Vector.Vector_Impl_._new = function(length,fixed) {
	if(fixed == null) fixed = false;
	if(length == null) length = 0;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(length);
	this1.data = this2;
	this1.length = length;
	this1.fixed = fixed;
	return this1;
};
openfl._Vector.Vector_Impl_.concat = function(this1,a) {
	var vectorData = new openfl.VectorData();
	if(a != null) vectorData.length = this1.length + a.length; else vectorData.length = this1.length;
	vectorData.fixed = false;
	var this2;
	this2 = new Array(vectorData.length);
	vectorData.data = this2;
	haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
	if(a != null) haxe.ds._Vector.Vector_Impl_.blit(a.data,0,vectorData.data,this1.length,a.length);
	return vectorData;
};
openfl._Vector.Vector_Impl_.copy = function(this1) {
	var vectorData = new openfl.VectorData();
	vectorData.length = this1.length;
	vectorData.fixed = this1.fixed;
	var this2;
	this2 = new Array(this1.length);
	vectorData.data = this2;
	haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
	return vectorData;
};
openfl._Vector.Vector_Impl_.iterator = function(this1) {
	return new openfl.VectorDataIterator(this1);
};
openfl._Vector.Vector_Impl_.join = function(this1,sep) {
	var output = "";
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(i > 0) output += sep;
		output += Std.string(this1.data[i]);
	}
	return output;
};
openfl._Vector.Vector_Impl_.pop = function(this1) {
	var value = null;
	if(!this1.fixed) {
		if(this1.length > 0) {
			this1.length--;
			value = this1.data[this1.length];
		}
	}
	return value;
};
openfl._Vector.Vector_Impl_.push = function(this1,x) {
	if(!this1.fixed) {
		this1.length++;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
		this1.data[this1.length - 1] = x;
	}
	return this1.length;
};
openfl._Vector.Vector_Impl_.reverse = function(this1) {
	var data;
	var this2;
	this2 = new Array(this1.length);
	data = this2;
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		data[this1.length - 1 - i] = this1.data[i];
	}
	this1.data = data;
};
openfl._Vector.Vector_Impl_.shift = function(this1) {
	if(!this1.fixed && this1.length > 0) {
		this1.length--;
		var value = this1.data[0];
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,1,this1.data,0,this1.length);
		return value;
	}
	return null;
};
openfl._Vector.Vector_Impl_.unshift = function(this1,x) {
	if(!this1.fixed) {
		this1.length++;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.length + 10);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,1,this1.data.length);
			this1.data = data;
		} else haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,this1.data,1,this1.length - 1);
		this1.data[0] = x;
	}
};
openfl._Vector.Vector_Impl_.slice = function(this1,pos,end) {
	if(end == null) end = 0;
	if(pos == null) pos = 0;
	if(pos < 0) pos += this1.length;
	if(end <= 0) end += this1.length;
	if(end > this1.length) end = this1.length;
	var length = end - pos;
	if(length <= 0 || length > this1.length) length = this1.length;
	var vectorData = new openfl.VectorData();
	vectorData.length = end - pos;
	vectorData.fixed = true;
	var this2;
	this2 = new Array(length);
	vectorData.data = this2;
	haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos,vectorData.data,0,length);
	return vectorData;
};
openfl._Vector.Vector_Impl_.sort = function(this1,f) {
	var array = haxe.ds._Vector.Vector_Impl_.toArray(this1.data);
	array.sort(f);
	var vec;
	var this2;
	this2 = new Array(array.length);
	vec = this2;
	var _g1 = 0;
	var _g = array.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = array[i];
	}
	this1.data = vec;
};
openfl._Vector.Vector_Impl_.splice = function(this1,pos,len) {
	if(pos < 0) pos += this1.length;
	if(pos + len > this1.length) len = this1.length - pos;
	if(len < 0) len = 0;
	var vectorData = new openfl.VectorData();
	vectorData.length = len;
	vectorData.fixed = false;
	var this2;
	this2 = new Array(len);
	vectorData.data = this2;
	haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos,vectorData.data,0,len);
	if(len > 0) {
		this1.length -= len;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos + len,this1.data,pos,this1.length - pos);
	}
	return vectorData;
};
openfl._Vector.Vector_Impl_.toString = function(this1) {
	return haxe.ds._Vector.Vector_Impl_.toArray(this1.data).toString();
};
openfl._Vector.Vector_Impl_.indexOf = function(this1,x,from) {
	if(from == null) from = 0;
	var value = -1;
	var _g1 = from;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(this1.data[i] == x) {
			value = i;
			break;
		}
	}
	return value;
};
openfl._Vector.Vector_Impl_.lastIndexOf = function(this1,x,from) {
	if(from == null) from = 0;
	var value = -1;
	var i = this1.length - 1;
	while(i >= from) {
		if(this1.data[i] == x) {
			value = i;
			break;
		}
		i--;
	}
	return value;
};
openfl._Vector.Vector_Impl_.ofArray = function(a) {
	var vectorData = new openfl.VectorData();
	vectorData.length = a.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(a.length);
	vec = this1;
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = a[i];
	}
	vectorData.data = vec;
	return vectorData;
};
openfl._Vector.Vector_Impl_.convert = function(v) {
	return v;
};
openfl._Vector.Vector_Impl_.get = function(this1,index) {
	return this1.data[index];
};
openfl._Vector.Vector_Impl_.set = function(this1,key,value) {
	if(!this1.fixed) {
		if(key >= this1.length) this1.length = key + 1;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
	}
	return this1.data[key] = value;
};
openfl._Vector.Vector_Impl_.fromArray = function(value) {
	var vectorData = new openfl.VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(value.length);
	vec = this1;
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = value[i];
	}
	vectorData.data = vec;
	return vectorData;
};
openfl._Vector.Vector_Impl_.toArray = function(this1) {
	var value = new Array();
	var _g1 = 0;
	var _g = this1.data.length;
	while(_g1 < _g) {
		var i = _g1++;
		value.push(this1.data[i]);
	}
	return value;
};
openfl._Vector.Vector_Impl_.fromHaxeVector = function(value) {
	var vectorData = new openfl.VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	vectorData.data = value;
	return vectorData;
};
openfl._Vector.Vector_Impl_.toHaxeVector = function(this1) {
	return this1.data;
};
openfl._Vector.Vector_Impl_.fromVectorData = function(value) {
	return value;
};
openfl._Vector.Vector_Impl_.toVectorData = function(this1) {
	return this1;
};
openfl._Vector.Vector_Impl_.get_length = function(this1) {
	return this1.length;
};
openfl._Vector.Vector_Impl_.set_length = function(this1,value) {
	if(!this1.fixed) {
		if(value > this1.length) {
			var data;
			var this2;
			this2 = new Array(value);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,value)));
			this1.data = data;
		}
		this1.length = value;
	}
	return value;
};
openfl._Vector.Vector_Impl_.get_fixed = function(this1) {
	return this1.fixed;
};
openfl._Vector.Vector_Impl_.set_fixed = function(this1,value) {
	return this1.fixed = value;
};
openfl.VectorDataIterator = function(data) {
	this.index = 0;
	this.vectorData = data;
};
$hxClasses["openfl.VectorDataIterator"] = openfl.VectorDataIterator;
openfl.VectorDataIterator.__name__ = ["openfl","VectorDataIterator"];
openfl.VectorDataIterator.prototype = {
	index: null
	,vectorData: null
	,hasNext: function() {
		return this.index < this.vectorData.length;
	}
	,next: function() {
		var index = this.index++;
		return this.vectorData.data[index];
	}
	,__class__: openfl.VectorDataIterator
};
openfl._internal = {};
openfl._internal.aglsl = {};
openfl._internal.aglsl.AGALTokenizer = function() {
};
$hxClasses["openfl._internal.aglsl.AGALTokenizer"] = openfl._internal.aglsl.AGALTokenizer;
openfl._internal.aglsl.AGALTokenizer.__name__ = ["openfl","_internal","aglsl","AGALTokenizer"];
openfl._internal.aglsl.AGALTokenizer.prototype = {
	decribeAGALByteArray: function(bytes) {
		var header = new openfl._internal.aglsl.Header();
		bytes.position = 0;
		if(bytes.readUnsignedByte() != 160) throw "Bad AGAL: Missing 0xa0 magic byte.";
		header.version = bytes.readUnsignedInt();
		if(header.version >= 16) {
			bytes.readUnsignedByte();
			header.version >>= 1;
		}
		if(bytes.readUnsignedByte() != 161) throw "Bad AGAL: Missing 0xa1 magic byte.";
		header.progid = bytes.readUnsignedByte();
		var _sw0_ = header.progid;
		switch(_sw0_) {
		case 1:
			header.type = "fragment";
			break;
		case 0:
			header.type = "vertex";
			break;
		case 2:
			header.type = "cpu";
			break;
		default:
			header.type = "";
		}
		var desc = new openfl._internal.aglsl.Description();
		var tokens = new Array();
		var agal2glsllut = openfl._internal.aglsl.Mapping.get_agal2glsllut();
		while(bytes.position < bytes.length) {
			var token = new openfl._internal.aglsl.Token();
			token.opcode = bytes.readUnsignedInt();
			var lutentry = openfl._internal.aglsl.Mapping.get_agal2glsllut()[token.opcode];
			if(lutentry == null) throw "Opcode not valid or not implemented yet: " + token.opcode;
			if(lutentry.matrixheight == 0) desc.hasmatrix = true;
			if(lutentry.dest) {
				token.dest.regnum = bytes.readUnsignedShort();
				token.dest.mask = bytes.readUnsignedByte();
				token.dest.regtype = bytes.readUnsignedByte();
				if(desc.regwrite[token.dest.regtype][token.dest.regnum] == null) desc.regwrite[token.dest.regtype][token.dest.regnum] = token.dest.mask; else desc.regwrite[token.dest.regtype][token.dest.regnum] |= token.dest.mask;
			} else {
				token.dest = null;
				bytes.readUnsignedInt();
			}
			if(lutentry.a) this.readReg(token.a,1,desc,bytes); else {
				token.a = null;
				bytes.readUnsignedInt();
				bytes.readUnsignedInt();
			}
			if(lutentry.b) this.readReg(token.b,lutentry.matrixheight | 0,desc,bytes); else {
				token.b = null;
				bytes.readUnsignedInt();
				bytes.readUnsignedInt();
			}
			tokens.push(token);
		}
		desc.header = header;
		desc.tokens = tokens;
		return desc;
	}
	,readReg: function(s,mh,desc,bytes) {
		s.regnum = bytes.readUnsignedShort();
		s.indexoffset = bytes.readByte();
		s.swizzle = bytes.readUnsignedByte();
		s.regtype = bytes.readUnsignedByte();
		desc.regread[s.regtype][s.regnum] = 15;
		if((function($this) {
			var $r;
			var $int = s.regtype;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) == 5) {
			s.lodbiad = s.indexoffset;
			s.indexoffset = 0;
			s.swizzle = 0;
			s.readmode = bytes.readUnsignedByte();
			s.dim = s.readmode >> 4;
			s.readmode &= 15;
			s.special = bytes.readUnsignedByte();
			s.wrap = s.special >> 4;
			s.special &= 15;
			s.mipmap = bytes.readUnsignedByte();
			s.filter = s.mipmap >> 4;
			s.mipmap &= 15;
			desc.samplers[s.regnum] = s;
		} else {
			s.indexregtype = bytes.readUnsignedByte();
			s.indexselect = bytes.readUnsignedByte();
			s.indirectflag = bytes.readUnsignedByte();
		}
		if(s.indirectflag == 1) desc.hasindirect = true;
		if(s.indirectflag == 0 && mh > 0) {
			var mhi = 0;
			while(mhi < mh) {
				desc.regread[s.regtype][s.regnum + mhi] = desc.regread[s.regtype][s.regnum];
				mhi++;
			}
		}
	}
	,__class__: openfl._internal.aglsl.AGALTokenizer
};
openfl._internal.aglsl.AGLSLCompiler = function() {
};
$hxClasses["openfl._internal.aglsl.AGLSLCompiler"] = openfl._internal.aglsl.AGLSLCompiler;
openfl._internal.aglsl.AGLSLCompiler.__name__ = ["openfl","_internal","aglsl","AGLSLCompiler"];
openfl._internal.aglsl.AGLSLCompiler.prototype = {
	glsl: null
	,compile: function(programType,source) {
		var agalMiniAssembler = new openfl.utils.AGALMiniAssembler();
		var tokenizer = new openfl._internal.aglsl.AGALTokenizer();
		var data;
		var concatSource;
		switch(programType) {
		case "vertex":
			concatSource = "part vertex 1 \n" + source + "\nendpart\n";
			agalMiniAssembler.assemble(concatSource);
			data = agalMiniAssembler.r.get("vertex").data;
			break;
		case "fragment":
			concatSource = "part fragment 1 \n" + source + "\nendpart\n";
			agalMiniAssembler.assemble(concatSource);
			data = agalMiniAssembler.r.get("fragment").data;
			break;
		default:
			throw "Unknown Context3DProgramType";
		}
		var description = tokenizer.decribeAGALByteArray(data);
		var parser = new openfl._internal.aglsl.AGLSLParser();
		this.glsl = parser.parse(description);
		return this.glsl;
	}
	,__class__: openfl._internal.aglsl.AGLSLCompiler
};
openfl._internal.aglsl.AGLSLParser = function() {
};
$hxClasses["openfl._internal.aglsl.AGLSLParser"] = openfl._internal.aglsl.AGLSLParser;
openfl._internal.aglsl.AGLSLParser.__name__ = ["openfl","_internal","aglsl","AGLSLParser"];
openfl._internal.aglsl.AGLSLParser.prototype = {
	parse: function(desc) {
		var header = "";
		var body = "";
		var i = 0;
		header += "precision highp float;\n";
		var tag = desc.header.type.charAt(0);
		if(desc.header.type == "vertex") header += "uniform float yflip;\n";
		if(!desc.hasindirect) {
			i = 0;
			while(i < desc.regread[1].length) {
				if(desc.regread[1][i] > 0) header += "uniform vec4 " + tag + "c" + i + ";\n";
				i++;
			}
		} else header += "uniform vec4 " + tag + "carrr[" + openfl._internal.aglsl.Context3D.maxvertexconstants + "];\n";
		i = 0;
		while(i < desc.regread[2].length || i < desc.regwrite[2].length) {
			if(desc.regread[2][i] > 0 || desc.regwrite[2][i] > 0) header += "vec4 " + tag + "t" + i + ";\n";
			i++;
		}
		i = 0;
		while(i < desc.regread[0].length) {
			if(desc.regread[0][i] > 0) header += "attribute vec4 va" + i + ";\n";
			i++;
		}
		i = 0;
		while(i < desc.regread[4].length || i < desc.regwrite[4].length) {
			if(desc.regread[4][i] > 0 || desc.regwrite[4][i] > 0) header += "varying vec4 vi" + i + ";\n";
			i++;
		}
		var samptype = ["2D","Cube","3D",""];
		i = 0;
		while(i < desc.samplers.length) {
			if(desc.samplers[i] != null) header += "uniform sampler" + samptype[desc.samplers[i].dim & 3] + " fs" + i + ";\n";
			i++;
		}
		if(desc.header.type == "vertex") header += "vec4 outpos;\n";
		if(desc.writedepth) header += "vec4 tmp_FragDepth;\n";
		body += "void main() {\n";
		i = 0;
		while(i < desc.tokens.length) {
			var lutentry = openfl._internal.aglsl.Mapping.get_agal2glsllut()[desc.tokens[i].opcode];
			if(lutentry == null) throw "Opcode not valid or not implemented yet: ";
			var sublines = Std["int"](Math.max(lutentry.matrixheight,1));
			var _g = 0;
			while(_g < sublines) {
				var sl = _g++;
				var line = "  " + lutentry.s;
				var destregstring;
				var destcaststring;
				var destmaskstring;
				if(desc.tokens[i].dest != null) {
					if(lutentry.matrixheight > 0) {
						if((desc.tokens[i].dest.mask >> sl & 1) != 1) continue;
						destregstring = this.regtostring(desc.tokens[i].dest.regtype,desc.tokens[i].dest.regnum,desc,tag);
						destcaststring = "float";
						destmaskstring = ["x","y","z","w"][sl];
						destregstring += "." + destmaskstring;
					} else {
						destregstring = this.regtostring(desc.tokens[i].dest.regtype,desc.tokens[i].dest.regnum,desc,tag);
						if(desc.tokens[i].dest.mask != 15) {
							var ndest = 0;
							destmaskstring = "";
							if((desc.tokens[i].dest.mask & 1) != 0) {
								ndest++;
								destmaskstring += "x";
							}
							if((desc.tokens[i].dest.mask & 2) != 0) {
								ndest++;
								destmaskstring += "y";
							}
							if((desc.tokens[i].dest.mask & 4) != 0) {
								ndest++;
								destmaskstring += "z";
							}
							if((desc.tokens[i].dest.mask & 8) != 0) {
								ndest++;
								destmaskstring += "w";
							}
							destregstring += "." + destmaskstring;
							switch(ndest) {
							case 1:
								destcaststring = "float";
								break;
							case 2:
								destcaststring = "vec2";
								break;
							case 3:
								destcaststring = "vec3";
								break;
							default:
								throw "Unexpected destination mask" + desc.tokens[i].dest.mask;
							}
						} else {
							destcaststring = "vec4";
							destmaskstring = "xyzw";
						}
					}
					line = StringTools.replace(line,"%dest",destregstring);
					line = StringTools.replace(line,"%cast",destcaststring);
					line = StringTools.replace(line,"%dm",destmaskstring);
				}
				var dwm = 15;
				if(!lutentry.ndwm && lutentry.dest && desc.tokens[i].dest != null) dwm = desc.tokens[i].dest.mask;
				if(desc.tokens[i].a != null) line = StringTools.replace(line,"%a",this.sourcetostring(desc.tokens[i].a,0,dwm,lutentry.scalar,desc,tag));
				if(desc.tokens[i].b != null) {
					line = StringTools.replace(line,"%b",this.sourcetostring(desc.tokens[i].b,sl,dwm,lutentry.scalar,desc,tag));
					if(desc.tokens[i].b.regtype == 5) {
						var texdim = ["2D","Cube","3D"][desc.tokens[i].b.dim];
						var texsize = ["vec2","vec3","vec3"][desc.tokens[i].b.dim];
						line = StringTools.replace(line,"%texdim",texdim);
						line = StringTools.replace(line,"%texsize",texsize);
						var texlod = "";
						line = StringTools.replace(line,"%lod",texlod);
					}
				}
				body += line;
			}
			i++;
		}
		if(desc.header.type == "vertex") body += "  gl_Position = vec4(outpos.x, yflip*outpos.y, outpos.z*2.0 - outpos.w, outpos.w);\n";
		if(desc.writedepth) body += "  gl_FragDepth = clamp(tmp_FragDepth,0.0,1.0);\n";
		body += "}\n";
		return header + body;
	}
	,regtostring: function(regtype,regnum,desc,tag) {
		switch(regtype) {
		case 0:
			return "va" + regnum;
		case 1:
			if(desc.hasindirect && desc.header.type == "vertex") return "vcarrr[" + regnum + "]"; else return tag + "c" + regnum;
			break;
		case 2:
			return tag + "t" + regnum;
		case 3:
			if(desc.header.type == "vertex") return "outpos"; else return "gl_FragColor";
			break;
		case 4:
			return "vi" + regnum;
		case 5:
			return "fs" + regnum;
		case 6:
			return "tmp_FragDepth";
		default:
			throw "Unknown register type";
		}
	}
	,sourcetostring: function(s,subline,dwm,isscalar,desc,tag) {
		var swiz = ["x","y","z","w"];
		var r;
		if(s.indirectflag == 1) {
			r = "vcarrr[int(" + this.regtostring(s.indexregtype,s.regnum,desc,tag) + "." + swiz[s.indexselect] + ")";
			var realofs = subline + s.indexoffset;
			if(realofs < 0) if(realofs == null) r += "null"; else r += "" + realofs;
			if(realofs > 0) r += "+" + (realofs == null?"null":"" + realofs);
			r += "]";
		} else r = this.regtostring(s.regtype,s.regnum + subline,desc,tag);
		if((function($this) {
			var $r;
			var $int = s.regtype;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) == 5) return r;
		if(isscalar) return r + "." + swiz[s.swizzle & 3];
		if(s.swizzle == 228 && dwm == 15) return r;
		r += ".";
		if((dwm & 1) != 0) r += swiz[s.swizzle & 3];
		if((dwm & 2) != 0) r += swiz[s.swizzle >> 2 & 3];
		if((dwm & 4) != 0) r += swiz[s.swizzle >> 4 & 3];
		if((dwm & 8) != 0) r += swiz[s.swizzle >> 6 & 3];
		return r;
	}
	,__class__: openfl._internal.aglsl.AGLSLParser
};
openfl._internal.aglsl.Sampler = function() {
	this.lodbias = 0;
	this.dim = 0;
	this.readmode = 0;
	this.special = 0;
	this.wrap = 0;
	this.mipmap = 0;
	this.filter = 0;
};
$hxClasses["openfl._internal.aglsl.Sampler"] = openfl._internal.aglsl.Sampler;
openfl._internal.aglsl.Sampler.__name__ = ["openfl","_internal","aglsl","Sampler"];
openfl._internal.aglsl.Sampler.prototype = {
	dim: null
	,filter: null
	,lodbias: null
	,mipmap: null
	,readmode: null
	,special: null
	,wrap: null
	,__class__: openfl._internal.aglsl.Sampler
};
openfl._internal.aglsl.Context3D = function() { };
$hxClasses["openfl._internal.aglsl.Context3D"] = openfl._internal.aglsl.Context3D;
openfl._internal.aglsl.Context3D.__name__ = ["openfl","_internal","aglsl","Context3D"];
openfl._internal.aglsl.Description = function() {
	this.regread = [[],[],[],[],[],[],[]];
	this.regwrite = [[],[],[],[],[],[],[]];
	this.hasindirect = false;
	this.writedepth = false;
	this.hasmatrix = false;
	this.samplers = [];
	this.tokens = [];
	this.header = new openfl._internal.aglsl.Header();
};
$hxClasses["openfl._internal.aglsl.Description"] = openfl._internal.aglsl.Description;
openfl._internal.aglsl.Description.__name__ = ["openfl","_internal","aglsl","Description"];
openfl._internal.aglsl.Description.prototype = {
	hasindirect: null
	,hasmatrix: null
	,header: null
	,regread: null
	,regwrite: null
	,samplers: null
	,tokens: null
	,writedepth: null
	,__class__: openfl._internal.aglsl.Description
};
openfl._internal.aglsl.Destination = function() {
	this.mask = 0;
	this.regnum = 0;
	this.regtype = 0;
	this.dim = 0;
};
$hxClasses["openfl._internal.aglsl.Destination"] = openfl._internal.aglsl.Destination;
openfl._internal.aglsl.Destination.__name__ = ["openfl","_internal","aglsl","Destination"];
openfl._internal.aglsl.Destination.prototype = {
	dim: null
	,filter: null
	,indexoffset: null
	,indexregtype: null
	,indexselect: null
	,indirectflag: null
	,lodbiad: null
	,mask: null
	,mipmap: null
	,readmode: null
	,regnum: null
	,regtype: null
	,special: null
	,swizzle: null
	,wrap: null
	,__class__: openfl._internal.aglsl.Destination
};
openfl._internal.aglsl.Header = function() {
	this.progid = 0;
	this.version = 0;
	this.type = "";
};
$hxClasses["openfl._internal.aglsl.Header"] = openfl._internal.aglsl.Header;
openfl._internal.aglsl.Header.__name__ = ["openfl","_internal","aglsl","Header"];
openfl._internal.aglsl.Header.prototype = {
	progid: null
	,type: null
	,version: null
	,__class__: openfl._internal.aglsl.Header
};
openfl._internal.aglsl.Mapping = function() { };
$hxClasses["openfl._internal.aglsl.Mapping"] = openfl._internal.aglsl.Mapping;
openfl._internal.aglsl.Mapping.__name__ = ["openfl","_internal","aglsl","Mapping"];
openfl._internal.aglsl.Mapping.__properties__ = {get_agal2glsllut:"get_agal2glsllut"}
openfl._internal.aglsl.Mapping._agal2glsllut = null;
openfl._internal.aglsl.Mapping.get_agal2glsllut = function() {
	if(openfl._internal.aglsl.Mapping._agal2glsllut == null) openfl._internal.aglsl.Mapping._agal2glsllut = [new openfl._internal.aglsl.OpLUT("%dest = %cast(%a);\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(%a + %b);\n",0,true,true,true,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(%a - %b);\n",0,true,true,true,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(%a * %b);\n",0,true,true,true,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(%a / %b);\n",0,true,true,true,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(1.0) / %a;\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(min(%a,%b));\n",0,true,true,true,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(max(%a,%b));\n",0,true,true,true,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(fract(%a));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(sqrt(abs(%a)));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(inversesqrt(abs(%a)));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(pow(abs(%a),%b));\n",0,true,true,true,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(log2(abs(%a)));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(exp2(%a));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(normalize(vec3( %a ) ));\n",0,true,true,false,null,null,true,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(sin(%a));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(cos(%a));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(cross(vec3(%a),vec3(%b)));\n",0,true,true,true,null,null,true,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(dot(vec3(%a),vec3(%b)));\n",0,true,true,true,null,null,true,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(dot(vec4(%a),vec4(%b)));\n",0,true,true,true,null,null,true,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(abs(%a));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(%a * -1.0);\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(clamp(%a,0.0,1.0));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(dot(vec3(%a),vec3(%b)));\n",null,true,true,true,3,3,true,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(dot(vec4(%a),vec4(%b)));\n",null,true,true,true,4,4,true,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(dot(vec4(%a),vec4(%b)));\n",null,true,true,true,4,3,true,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(dFdx(%a));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(dFdx(%a));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("if (float(%a)==float(%b)) {;\n",0,false,true,true,null,null,null,true,null,null),new openfl._internal.aglsl.OpLUT("if (float(%a)!=float(%b)) {;\n",0,false,true,true,null,null,null,true,null,null),new openfl._internal.aglsl.OpLUT("if (float(%a)>=float(%b)) {;\n",0,false,true,true,null,null,null,true,null,null),new openfl._internal.aglsl.OpLUT("if (float(%a)<float(%b)) {;\n",0,false,true,true,null,null,null,true,null,null),new openfl._internal.aglsl.OpLUT("} else {;\n",0,false,false,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("};\n",0,false,false,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT(null,null,null,null,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT(null,null,null,null,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT(null,null,null,null,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT(null,null,null,null,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(texture%texdimLod(%b,%texsize(%a)).%dm);\n",null,true,true,true,null,null,null,null,true,null),new openfl._internal.aglsl.OpLUT("if ( float(%a)<0.0 ) discard;\n",null,false,true,false,null,null,null,true,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(texture%texdim(%b,%texsize(%a)%lod).%dm);\n",null,true,true,true,null,null,true,null,true,true),new openfl._internal.aglsl.OpLUT("%dest = %cast(greaterThanEqual(%a,%b).%dm);\n",0,true,true,true,null,null,true,null,true,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(lessThan(%a,%b).%dm);\n",0,true,true,true,null,null,true,null,true,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(sign(%a));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(equal(%a,%b).%dm);\n",0,true,true,true,null,null,true,null,true,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(notEqual(%a,%b).%dm);\n",0,true,true,true,null,null,true,null,true,null)];
	return openfl._internal.aglsl.Mapping._agal2glsllut;
};
openfl._internal.aglsl.OpLUT = function(s,flags,dest,a,b,matrixwidth,matrixheight,ndwm,scaler,dm,lod) {
	if(lod == null) lod = false;
	if(dm == null) dm = false;
	if(scaler == null) scaler = false;
	if(ndwm == null) ndwm = false;
	if(matrixheight == null) matrixheight = 0;
	if(matrixwidth == null) matrixwidth = 0;
	if(b == null) b = false;
	if(a == null) a = false;
	if(dest == null) dest = false;
	if(flags == null) flags = 0;
	this.s = s;
	this.flags = flags;
	this.dest = dest;
	this.a = a;
	this.b = b;
	this.matrixwidth = matrixwidth;
	this.matrixheight = matrixheight;
	this.ndwm = ndwm;
	this.scalar = scaler;
	this.dm = dm;
	this.lod = lod;
};
$hxClasses["openfl._internal.aglsl.OpLUT"] = openfl._internal.aglsl.OpLUT;
openfl._internal.aglsl.OpLUT.__name__ = ["openfl","_internal","aglsl","OpLUT"];
openfl._internal.aglsl.OpLUT.prototype = {
	a: null
	,b: null
	,dest: null
	,dm: null
	,flags: null
	,lod: null
	,matrixwidth: null
	,matrixheight: null
	,ndwm: null
	,s: null
	,scalar: null
	,__class__: openfl._internal.aglsl.OpLUT
};
openfl._internal.aglsl.Token = function() {
	this.dest = new openfl._internal.aglsl.Destination();
	this.opcode = 0;
	this.a = new openfl._internal.aglsl.Destination();
	this.b = new openfl._internal.aglsl.Destination();
};
$hxClasses["openfl._internal.aglsl.Token"] = openfl._internal.aglsl.Token;
openfl._internal.aglsl.Token.__name__ = ["openfl","_internal","aglsl","Token"];
openfl._internal.aglsl.Token.prototype = {
	a: null
	,b: null
	,dest: null
	,opcode: null
	,__class__: openfl._internal.aglsl.Token
};
openfl._internal.aglsl.assembler = {};
openfl._internal.aglsl.assembler.FS = function() {
};
$hxClasses["openfl._internal.aglsl.assembler.FS"] = openfl._internal.aglsl.assembler.FS;
openfl._internal.aglsl.assembler.FS.__name__ = ["openfl","_internal","aglsl","assembler","FS"];
openfl._internal.aglsl.assembler.FS.prototype = {
	format: null
	,size: null
	,__class__: openfl._internal.aglsl.assembler.FS
};
openfl._internal.aglsl.assembler.Flags = function() {
};
$hxClasses["openfl._internal.aglsl.assembler.Flags"] = openfl._internal.aglsl.assembler.Flags;
openfl._internal.aglsl.assembler.Flags.__name__ = ["openfl","_internal","aglsl","assembler","Flags"];
openfl._internal.aglsl.assembler.Flags.prototype = {
	fragonly: null
	,horizontal: null
	,matrix: null
	,simple: null
	,__class__: openfl._internal.aglsl.assembler.Flags
};
openfl._internal.aglsl.assembler.Opcode = function(dest,aformat,asize,bformat,bsize,opcode,simple,horizontal,fragonly,matrix) {
	if(matrix == null) matrix = false;
	if(fragonly == null) fragonly = false;
	if(horizontal == null) horizontal = false;
	this.a = new openfl._internal.aglsl.assembler.FS();
	this.b = new openfl._internal.aglsl.assembler.FS();
	this.flags = new openfl._internal.aglsl.assembler.Flags();
	this.dest = dest;
	this.a.format = aformat;
	this.a.size = asize;
	this.b.format = bformat;
	this.b.size = bsize;
	this.opcode = opcode;
	this.flags.simple = simple;
	this.flags.horizontal = horizontal;
	this.flags.fragonly = fragonly;
	this.flags.matrix = matrix;
};
$hxClasses["openfl._internal.aglsl.assembler.Opcode"] = openfl._internal.aglsl.assembler.Opcode;
openfl._internal.aglsl.assembler.Opcode.__name__ = ["openfl","_internal","aglsl","assembler","Opcode"];
openfl._internal.aglsl.assembler.Opcode.prototype = {
	a: null
	,b: null
	,dest: null
	,flags: null
	,opcode: null
	,__class__: openfl._internal.aglsl.assembler.Opcode
};
openfl._internal.aglsl.assembler.OpcodeMap = function() { };
$hxClasses["openfl._internal.aglsl.assembler.OpcodeMap"] = openfl._internal.aglsl.assembler.OpcodeMap;
openfl._internal.aglsl.assembler.OpcodeMap.__name__ = ["openfl","_internal","aglsl","assembler","OpcodeMap"];
openfl._internal.aglsl.assembler.OpcodeMap.__properties__ = {get_map:"get_map"}
openfl._internal.aglsl.assembler.OpcodeMap._map = null;
openfl._internal.aglsl.assembler.OpcodeMap.get_map = function() {
	if(openfl._internal.aglsl.assembler.OpcodeMap._map == null) {
		openfl._internal.aglsl.assembler.OpcodeMap._map = new haxe.ds.StringMap();
		var value = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,0,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("mov",value);
		var value1 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,1,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("add",value1);
		var value2 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,2,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("sub",value2);
		var value3 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,3,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("mul",value3);
		var value4 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,4,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("div",value4);
		var value5 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,5,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("rcp",value5);
		var value6 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,6,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("min",value6);
		var value7 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,7,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("max",value7);
		var value8 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,8,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("frc",value8);
		var value9 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,9,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("sqt",value9);
		var value10 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,10,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("rsq",value10);
		var value11 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,11,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("pow",value11);
		var value12 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,12,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("log",value12);
		var value13 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,13,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("exp",value13);
		var value14 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,14,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("nrm",value14);
		var value15 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,15,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("sin",value15);
		var value16 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,16,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("cos",value16);
		var value17 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,17,true,true,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("crs",value17);
		var value18 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,18,true,true,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("dp3",value18);
		var value19 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,19,true,true,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("dp4",value19);
		var value20 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,20,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("abs",value20);
		var value21 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,21,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("neg",value21);
		var value22 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,22,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("sat",value22);
		var value23 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"sampler",1,38,true,false,true,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("ted",value23);
		var value24 = new openfl._internal.aglsl.assembler.Opcode("none","scalar",1,"none",0,39,true,false,true,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("kil",value24);
		var value25 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"sampler",1,40,true,false,true,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("tex",value25);
		var value26 = new openfl._internal.aglsl.assembler.Opcode("vector","matrix",3,"vector",3,23,true,false,false,true);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("m33",value26);
		var value27 = new openfl._internal.aglsl.assembler.Opcode("vector","matrix",4,"vector",4,24,true,false,false,true);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("m44",value27);
		var value28 = new openfl._internal.aglsl.assembler.Opcode("vector","matrix",3,"vector",4,25,true,false,false,true);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("m43",value28);
		var value29 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,41,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("sge",value29);
		var value30 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,42,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("slt",value30);
		var value31 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,43,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("sgn",value31);
		var value32 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,44,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("seq",value32);
		var value33 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,45,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("sne",value33);
	}
	return openfl._internal.aglsl.assembler.OpcodeMap._map;
};
openfl._internal.aglsl.assembler.Part = function(name,version) {
	if(version == null) version = 0;
	if(name == null) name = "";
	this.name = name;
	this.version = version;
	this.data = new lime.utils.ByteArray();
	this.data.littleEndian = true;
	"littleEndian";
};
$hxClasses["openfl._internal.aglsl.assembler.Part"] = openfl._internal.aglsl.assembler.Part;
openfl._internal.aglsl.assembler.Part.__name__ = ["openfl","_internal","aglsl","assembler","Part"];
openfl._internal.aglsl.assembler.Part.prototype = {
	data: null
	,name: null
	,version: null
	,__class__: openfl._internal.aglsl.assembler.Part
};
openfl._internal.aglsl.assembler.Reg = function(code,desc) {
	this.code = code;
	this.desc = desc;
};
$hxClasses["openfl._internal.aglsl.assembler.Reg"] = openfl._internal.aglsl.assembler.Reg;
openfl._internal.aglsl.assembler.Reg.__name__ = ["openfl","_internal","aglsl","assembler","Reg"];
openfl._internal.aglsl.assembler.Reg.prototype = {
	code: null
	,desc: null
	,__class__: openfl._internal.aglsl.assembler.Reg
};
openfl._internal.aglsl.assembler.RegMap = function() { };
$hxClasses["openfl._internal.aglsl.assembler.RegMap"] = openfl._internal.aglsl.assembler.RegMap;
openfl._internal.aglsl.assembler.RegMap.__name__ = ["openfl","_internal","aglsl","assembler","RegMap"];
openfl._internal.aglsl.assembler.RegMap.__properties__ = {get_map:"get_map"}
openfl._internal.aglsl.assembler.RegMap._map = null;
openfl._internal.aglsl.assembler.RegMap.get_map = function() {
	if(openfl._internal.aglsl.assembler.RegMap._map == null) {
		openfl._internal.aglsl.assembler.RegMap._map = new haxe.ds.StringMap();
		openfl._internal.aglsl.assembler.RegMap._map.set("va",new openfl._internal.aglsl.assembler.Reg(0,"vertex attribute"));
		openfl._internal.aglsl.assembler.RegMap._map.set("fc",new openfl._internal.aglsl.assembler.Reg(1,"fragment constant"));
		openfl._internal.aglsl.assembler.RegMap._map.set("vc",new openfl._internal.aglsl.assembler.Reg(1,"vertex constant"));
		openfl._internal.aglsl.assembler.RegMap._map.set("ft",new openfl._internal.aglsl.assembler.Reg(2,"fragment temporary"));
		openfl._internal.aglsl.assembler.RegMap._map.set("vt",new openfl._internal.aglsl.assembler.Reg(2,"vertex temporary"));
		openfl._internal.aglsl.assembler.RegMap._map.set("vo",new openfl._internal.aglsl.assembler.Reg(3,"vertex output"));
		openfl._internal.aglsl.assembler.RegMap._map.set("op",new openfl._internal.aglsl.assembler.Reg(3,"vertex output"));
		openfl._internal.aglsl.assembler.RegMap._map.set("fd",new openfl._internal.aglsl.assembler.Reg(3,"fragment depth output"));
		openfl._internal.aglsl.assembler.RegMap._map.set("fo",new openfl._internal.aglsl.assembler.Reg(3,"fragment output"));
		openfl._internal.aglsl.assembler.RegMap._map.set("oc",new openfl._internal.aglsl.assembler.Reg(3,"fragment output"));
		openfl._internal.aglsl.assembler.RegMap._map.set("v",new openfl._internal.aglsl.assembler.Reg(4,"varying"));
		openfl._internal.aglsl.assembler.RegMap._map.set("vi",new openfl._internal.aglsl.assembler.Reg(4,"varying output"));
		openfl._internal.aglsl.assembler.RegMap._map.set("fi",new openfl._internal.aglsl.assembler.Reg(4,"varying input"));
		openfl._internal.aglsl.assembler.RegMap._map.set("fs",new openfl._internal.aglsl.assembler.Reg(5,"sampler"));
	}
	return openfl._internal.aglsl.assembler.RegMap._map;
};
openfl._internal.aglsl.assembler.Sampler = function(shift,mask,value) {
	this.shift = shift;
	this.mask = mask;
	this.value = value;
};
$hxClasses["openfl._internal.aglsl.assembler.Sampler"] = openfl._internal.aglsl.assembler.Sampler;
openfl._internal.aglsl.assembler.Sampler.__name__ = ["openfl","_internal","aglsl","assembler","Sampler"];
openfl._internal.aglsl.assembler.Sampler.prototype = {
	mask: null
	,shift: null
	,value: null
	,__class__: openfl._internal.aglsl.assembler.Sampler
};
openfl._internal.aglsl.assembler.SamplerMap = function() { };
$hxClasses["openfl._internal.aglsl.assembler.SamplerMap"] = openfl._internal.aglsl.assembler.SamplerMap;
openfl._internal.aglsl.assembler.SamplerMap.__name__ = ["openfl","_internal","aglsl","assembler","SamplerMap"];
openfl._internal.aglsl.assembler.SamplerMap.__properties__ = {get_map:"get_map"}
openfl._internal.aglsl.assembler.SamplerMap._map = null;
openfl._internal.aglsl.assembler.SamplerMap.get_map = function() {
	if(openfl._internal.aglsl.assembler.SamplerMap._map == null) {
		openfl._internal.aglsl.assembler.SamplerMap._map = new haxe.ds.StringMap();
		openfl._internal.aglsl.assembler.SamplerMap._map.set("rgba",new openfl._internal.aglsl.assembler.Sampler(8,15,0));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("rg",new openfl._internal.aglsl.assembler.Sampler(8,15,5));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("r",new openfl._internal.aglsl.assembler.Sampler(8,15,4));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("compressed",new openfl._internal.aglsl.assembler.Sampler(8,15,1));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("compressed_alpha",new openfl._internal.aglsl.assembler.Sampler(8,15,2));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("dxt1",new openfl._internal.aglsl.assembler.Sampler(8,15,1));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("dxt5",new openfl._internal.aglsl.assembler.Sampler(8,15,2));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("2d",new openfl._internal.aglsl.assembler.Sampler(12,15,0));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("cube",new openfl._internal.aglsl.assembler.Sampler(12,15,1));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("3d",new openfl._internal.aglsl.assembler.Sampler(12,15,2));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("centroid",new openfl._internal.aglsl.assembler.Sampler(16,1,1));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("ignoresampler",new openfl._internal.aglsl.assembler.Sampler(16,4,4));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("clamp",new openfl._internal.aglsl.assembler.Sampler(20,15,0));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("repeat",new openfl._internal.aglsl.assembler.Sampler(20,15,1));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("wrap",new openfl._internal.aglsl.assembler.Sampler(20,15,1));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("nomip",new openfl._internal.aglsl.assembler.Sampler(24,15,0));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("mipnone",new openfl._internal.aglsl.assembler.Sampler(24,15,0));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("mipnearest",new openfl._internal.aglsl.assembler.Sampler(24,15,1));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("miplinear",new openfl._internal.aglsl.assembler.Sampler(24,15,2));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("nearest",new openfl._internal.aglsl.assembler.Sampler(28,15,0));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("linear",new openfl._internal.aglsl.assembler.Sampler(28,15,1));
	}
	return openfl._internal.aglsl.assembler.SamplerMap._map;
};
openfl._internal.renderer = {};
openfl._internal.renderer.AbstractRenderer = function(width,height) {
	this.width = width;
	this.height = height;
};
$hxClasses["openfl._internal.renderer.AbstractRenderer"] = openfl._internal.renderer.AbstractRenderer;
openfl._internal.renderer.AbstractRenderer.__name__ = ["openfl","_internal","renderer","AbstractRenderer"];
openfl._internal.renderer.AbstractRenderer.prototype = {
	height: null
	,width: null
	,transparent: null
	,renderSession: null
	,render: function(stage) {
	}
	,renderShape: function(shape) {
	}
	,resize: function(width,height) {
	}
	,__class__: openfl._internal.renderer.AbstractRenderer
};
openfl._internal.renderer.RenderSession = function() {
};
$hxClasses["openfl._internal.renderer.RenderSession"] = openfl._internal.renderer.RenderSession;
openfl._internal.renderer.RenderSession.__name__ = ["openfl","_internal","renderer","RenderSession"];
openfl._internal.renderer.RenderSession.prototype = {
	context: null
	,element: null
	,gl: null
	,projectionMatrix: null
	,renderer: null
	,roundPixels: null
	,transformProperty: null
	,transformOriginProperty: null
	,vendorPrefix: null
	,z: null
	,drawCount: null
	,currentBlendMode: null
	,projection: null
	,offset: null
	,shaderManager: null
	,maskManager: null
	,filterManager: null
	,blendModeManager: null
	,spriteBatch: null
	,stencilManager: null
	,__class__: openfl._internal.renderer.RenderSession
};
openfl._internal.renderer.canvas = {};
openfl._internal.renderer.canvas.CanvasBitmap = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasBitmap"] = openfl._internal.renderer.canvas.CanvasBitmap;
openfl._internal.renderer.canvas.CanvasBitmap.__name__ = ["openfl","_internal","renderer","canvas","CanvasBitmap"];
openfl._internal.renderer.canvas.CanvasBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
	var context = renderSession.context;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.__mask != null) renderSession.maskManager.pushMask(bitmap.__mask);
		bitmap.bitmapData.__sync();
		context.globalAlpha = bitmap.__worldAlpha;
		var transform = bitmap.__worldTransform;
		var scrollRect = bitmap.get_scrollRect();
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		if(!bitmap.smoothing) {
			context.mozImageSmoothingEnabled = false;
			context.webkitImageSmoothingEnabled = false;
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) context.drawImage(bitmap.bitmapData.__image.get_src(),0,0); else context.drawImage(bitmap.bitmapData.__image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		if(!bitmap.smoothing) {
			context.mozImageSmoothingEnabled = true;
			context.webkitImageSmoothingEnabled = true;
			context.imageSmoothingEnabled = true;
		}
		if(bitmap.__mask != null) renderSession.maskManager.popMask();
	}
};
openfl._internal.renderer.canvas.CanvasGraphics = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl._internal.renderer.canvas.CanvasGraphics;
openfl._internal.renderer.canvas.CanvasGraphics.__name__ = ["openfl","_internal","renderer","canvas","CanvasGraphics"];
openfl._internal.renderer.canvas.CanvasGraphics.bounds = null;
openfl._internal.renderer.canvas.CanvasGraphics.hasFill = null;
openfl._internal.renderer.canvas.CanvasGraphics.hasStroke = null;
openfl._internal.renderer.canvas.CanvasGraphics.inPath = null;
openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix = null;
openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix = null;
openfl._internal.renderer.canvas.CanvasGraphics.positionX = null;
openfl._internal.renderer.canvas.CanvasGraphics.positionY = null;
openfl._internal.renderer.canvas.CanvasGraphics.setFill = null;
openfl._internal.renderer.canvas.CanvasGraphics.context = null;
openfl._internal.renderer.canvas.CanvasGraphics.pattern = null;
openfl._internal.renderer.canvas.CanvasGraphics.beginPath = function() {
	if(!openfl._internal.renderer.canvas.CanvasGraphics.inPath) {
		openfl._internal.renderer.canvas.CanvasGraphics.context.beginPath();
		openfl._internal.renderer.canvas.CanvasGraphics.inPath = true;
	}
};
openfl._internal.renderer.canvas.CanvasGraphics.beginPatternFill = function(bitmapFill,bitmapRepeat) {
	if(openfl._internal.renderer.canvas.CanvasGraphics.setFill || bitmapFill == null) return;
	if(openfl._internal.renderer.canvas.CanvasGraphics.pattern == null) openfl._internal.renderer.canvas.CanvasGraphics.pattern = openfl._internal.renderer.canvas.CanvasGraphics.context.createPattern(bitmapFill.__image.get_src(),bitmapRepeat?"repeat":"no-repeat");
	openfl._internal.renderer.canvas.CanvasGraphics.context.fillStyle = openfl._internal.renderer.canvas.CanvasGraphics.pattern;
	openfl._internal.renderer.canvas.CanvasGraphics.setFill = true;
};
openfl._internal.renderer.canvas.CanvasGraphics.closePath = function(closeFill) {
	if(openfl._internal.renderer.canvas.CanvasGraphics.inPath) {
		if(openfl._internal.renderer.canvas.CanvasGraphics.hasFill) {
			openfl._internal.renderer.canvas.CanvasGraphics.context.translate(-openfl._internal.renderer.canvas.CanvasGraphics.bounds.x,-openfl._internal.renderer.canvas.CanvasGraphics.bounds.y);
			if(openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix != null) {
				openfl._internal.renderer.canvas.CanvasGraphics.context.transform(openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.a,openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.b,openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.c,openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.d,openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.tx,openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.ty);
				openfl._internal.renderer.canvas.CanvasGraphics.context.fill();
				openfl._internal.renderer.canvas.CanvasGraphics.context.transform(openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.a,openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.b,openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.c,openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.d,openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.tx,openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.ty);
			} else openfl._internal.renderer.canvas.CanvasGraphics.context.fill();
			openfl._internal.renderer.canvas.CanvasGraphics.context.translate(openfl._internal.renderer.canvas.CanvasGraphics.bounds.x,openfl._internal.renderer.canvas.CanvasGraphics.bounds.y);
		}
		openfl._internal.renderer.canvas.CanvasGraphics.context.closePath();
		if(openfl._internal.renderer.canvas.CanvasGraphics.hasStroke) openfl._internal.renderer.canvas.CanvasGraphics.context.stroke();
	}
	openfl._internal.renderer.canvas.CanvasGraphics.inPath = false;
	if(closeFill) {
		openfl._internal.renderer.canvas.CanvasGraphics.hasFill = false;
		openfl._internal.renderer.canvas.CanvasGraphics.hasStroke = false;
		openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix = null;
		openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix = null;
	}
};
openfl._internal.renderer.canvas.CanvasGraphics.drawRoundRect = function(x,y,width,height,rx,ry) {
	if(ry == -1) ry = rx;
	rx *= 0.5;
	ry *= 0.5;
	if(rx > width / 2) rx = width / 2;
	if(ry > height / 2) ry = height / 2;
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl._internal.renderer.canvas.CanvasGraphics.SIN45;
	var cx2 = -rx + rx * openfl._internal.renderer.canvas.CanvasGraphics.TAN22;
	var cy1 = -ry + ry * openfl._internal.renderer.canvas.CanvasGraphics.SIN45;
	var cy2 = -ry + ry * openfl._internal.renderer.canvas.CanvasGraphics.TAN22;
	openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(xe,ye - ry);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - rx,ye);
	openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x + rx,ye);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ry);
	openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x,y + ry);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + rx,y);
	openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(xe - rx,y);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ry);
	openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(xe,ye - ry);
};
openfl._internal.renderer.canvas.CanvasGraphics.render = function(graphics,renderSession) {
	if(graphics.__dirty) {
		openfl._internal.renderer.canvas.CanvasGraphics.bounds = graphics.__bounds;
		openfl._internal.renderer.canvas.CanvasGraphics.hasFill = false;
		openfl._internal.renderer.canvas.CanvasGraphics.hasStroke = false;
		openfl._internal.renderer.canvas.CanvasGraphics.inPath = false;
		openfl._internal.renderer.canvas.CanvasGraphics.positionX = 0;
		openfl._internal.renderer.canvas.CanvasGraphics.positionY = 0;
		if(!graphics.__visible || graphics.__commands.length == 0 || openfl._internal.renderer.canvas.CanvasGraphics.bounds == null || openfl._internal.renderer.canvas.CanvasGraphics.bounds.width == 0 || openfl._internal.renderer.canvas.CanvasGraphics.bounds.height == 0) {
			graphics.__canvas = null;
			graphics.__context = null;
		} else {
			if(graphics.__canvas == null) {
				graphics.__canvas = window.document.createElement("canvas");
				graphics.__context = graphics.__canvas.getContext("2d");
			}
			openfl._internal.renderer.canvas.CanvasGraphics.context = graphics.__context;
			graphics.__canvas.width = Math.ceil(openfl._internal.renderer.canvas.CanvasGraphics.bounds.width);
			graphics.__canvas.height = Math.ceil(openfl._internal.renderer.canvas.CanvasGraphics.bounds.height);
			var offsetX = openfl._internal.renderer.canvas.CanvasGraphics.bounds.x;
			var offsetY = openfl._internal.renderer.canvas.CanvasGraphics.bounds.y;
			var bitmapFill = null;
			var bitmapRepeat = false;
			var _g = 0;
			var _g1 = graphics.__commands;
			try {
				while(_g < _g1.length) {
					var command = _g1[_g];
					++_g;
					switch(command[1]) {
					case 0:
						var smooth = command[5];
						var repeat = command[4];
						var matrix = command[3];
						var bitmap = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.closePath(false);
						if(bitmap != bitmapFill || repeat != bitmapRepeat) {
							bitmapFill = bitmap;
							bitmapRepeat = repeat;
							openfl._internal.renderer.canvas.CanvasGraphics.pattern = null;
							openfl._internal.renderer.canvas.CanvasGraphics.setFill = false;
							bitmap.__sync();
						}
						if(matrix != null) {
							openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix = matrix;
							openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix = new openfl.geom.Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
							openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.invert();
						} else {
							openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix = null;
							openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix = null;
						}
						openfl._internal.renderer.canvas.CanvasGraphics.hasFill = true;
						break;
					case 1:
						var alpha = command[3];
						var rgb = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.closePath(false);
						if(alpha == 1) openfl._internal.renderer.canvas.CanvasGraphics.context.fillStyle = "#" + StringTools.hex(rgb,6); else {
							var r = (rgb & 16711680) >>> 16;
							var g = (rgb & 65280) >>> 8;
							var b = rgb & 255;
							openfl._internal.renderer.canvas.CanvasGraphics.context.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")";
						}
						bitmapFill = null;
						openfl._internal.renderer.canvas.CanvasGraphics.setFill = true;
						openfl._internal.renderer.canvas.CanvasGraphics.hasFill = true;
						break;
					case 2:
						var focalPointRatio = command[9];
						var interpolationMethod = command[8];
						var spreadMethod = command[7];
						var matrix1 = command[6];
						var ratios = command[5];
						var alphas = command[4];
						var colors = command[3];
						var type = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.closePath(false);
						var gradientFill = null;
						switch(type[1]) {
						case 0:
							if(matrix1 == null) matrix1 = new openfl.geom.Matrix();
							var point = matrix1.transformPoint(new openfl.geom.Point(1638.4,0));
							gradientFill = openfl._internal.renderer.canvas.CanvasGraphics.context.createRadialGradient(matrix1.tx,matrix1.ty,0,matrix1.tx,matrix1.ty,(point.x - matrix1.tx) / 2);
							break;
						case 1:
							var matrix2;
							if(matrix1 != null) matrix2 = new openfl.geom.Matrix(matrix1.a,matrix1.b,matrix1.c,matrix1.d,matrix1.tx,matrix1.ty); else matrix2 = new openfl.geom.Matrix();
							matrix2.tx -= matrix2.a * 1638.4 / 2;
							matrix2.ty -= matrix2.d * 1638.4 / 2;
							var point1 = matrix2.transformPoint(new openfl.geom.Point(0,0));
							var point2 = matrix2.transformPoint(new openfl.geom.Point(1638.4,0));
							gradientFill = openfl._internal.renderer.canvas.CanvasGraphics.context.createLinearGradient(point1.x,point1.y,point2.x,point2.y);
							break;
						}
						var _g3 = 0;
						var _g2 = colors.length;
						while(_g3 < _g2) {
							var i = _g3++;
							var rgb1 = colors[i];
							var alpha1 = alphas[i];
							var r1 = (rgb1 & 16711680) >>> 16;
							var g1 = (rgb1 & 65280) >>> 8;
							var b1 = rgb1 & 255;
							var ratio = ratios[i] / 255;
							if(ratio < 0) ratio = 0;
							if(ratio > 1) ratio = 1;
							gradientFill.addColorStop(ratio,"rgba(" + r1 + ", " + g1 + ", " + b1 + ", " + alpha1 + ")");
						}
						openfl._internal.renderer.canvas.CanvasGraphics.context.fillStyle = gradientFill;
						bitmapFill = null;
						openfl._internal.renderer.canvas.CanvasGraphics.setFill = true;
						openfl._internal.renderer.canvas.CanvasGraphics.hasFill = true;
						break;
					case 3:
						var y = command[7];
						var x = command[6];
						var cy2 = command[5];
						var cx2 = command[4];
						var cy1 = command[3];
						var cx1 = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.beginPatternFill(bitmapFill,bitmapRepeat);
						openfl._internal.renderer.canvas.CanvasGraphics.beginPath();
						openfl._internal.renderer.canvas.CanvasGraphics.context.bezierCurveTo(cx1 - offsetX,cy1 - offsetY,cx2 - offsetX,cy2 - offsetY,x - offsetX,y - offsetY);
						openfl._internal.renderer.canvas.CanvasGraphics.positionX = x;
						openfl._internal.renderer.canvas.CanvasGraphics.positionY = y;
						break;
					case 4:
						var y1 = command[5];
						var x1 = command[4];
						var cy = command[3];
						var cx = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.beginPatternFill(bitmapFill,bitmapRepeat);
						openfl._internal.renderer.canvas.CanvasGraphics.beginPath();
						openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(cx - offsetX,cy - offsetY,x1 - offsetX,y1 - offsetY);
						openfl._internal.renderer.canvas.CanvasGraphics.positionX = x1;
						openfl._internal.renderer.canvas.CanvasGraphics.positionY = y1;
						break;
					case 5:
						var radius = command[4];
						var y2 = command[3];
						var x2 = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.beginPatternFill(bitmapFill,bitmapRepeat);
						openfl._internal.renderer.canvas.CanvasGraphics.beginPath();
						openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(x2 - offsetX + radius,y2 - offsetY);
						openfl._internal.renderer.canvas.CanvasGraphics.context.arc(x2 - offsetX,y2 - offsetY,radius,0,Math.PI * 2,true);
						break;
					case 6:
						var height = command[5];
						var width = command[4];
						var y3 = command[3];
						var x3 = command[2];
						x3 -= offsetX;
						y3 -= offsetY;
						var kappa = .5522848;
						var ox = width / 2 * kappa;
						var oy = height / 2 * kappa;
						var xe = x3 + width;
						var ye = y3 + height;
						var xm = x3 + width / 2;
						var ym = y3 + height / 2;
						openfl._internal.renderer.canvas.CanvasGraphics.beginPatternFill(bitmapFill,bitmapRepeat);
						openfl._internal.renderer.canvas.CanvasGraphics.beginPath();
						openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(x3,ym);
						openfl._internal.renderer.canvas.CanvasGraphics.context.bezierCurveTo(x3,ym - oy,xm - ox,y3,xm,y3);
						openfl._internal.renderer.canvas.CanvasGraphics.context.bezierCurveTo(xm + ox,y3,xe,ym - oy,xe,ym);
						openfl._internal.renderer.canvas.CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
						openfl._internal.renderer.canvas.CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x3,ym + oy,x3,ym);
						break;
					case 7:
						var height1 = command[5];
						var width1 = command[4];
						var y4 = command[3];
						var x4 = command[2];
						var optimizationUsed = false;
						if(bitmapFill != null) {
							var st = 0;
							var sr = 0;
							var sb = 0;
							var sl = 0;
							var canOptimizeMatrix = true;
							if(openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix != null) {
								if(openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.b != 0 || openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.c != 0) canOptimizeMatrix = false; else {
									var stl = openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.transformPoint(new openfl.geom.Point(x4,y4));
									var sbr = openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.transformPoint(new openfl.geom.Point(x4 + width1,y4 + height1));
									st = stl.y;
									sl = stl.x;
									sb = sbr.y;
									sr = sbr.x;
								}
							} else {
								st = y4;
								sl = x4;
								sb = y4 + height1;
								sr = x4 + width1;
							}
							if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= bitmapFill.width && sb <= bitmapFill.height) {
								optimizationUsed = true;
								openfl._internal.renderer.canvas.CanvasGraphics.context.drawImage(bitmapFill.__image.get_src(),sl,st,sr - sl,sb - st,x4 - offsetX,y4 - offsetY,width1,height1);
							}
						}
						if(!optimizationUsed) {
							openfl._internal.renderer.canvas.CanvasGraphics.beginPatternFill(bitmapFill,bitmapRepeat);
							openfl._internal.renderer.canvas.CanvasGraphics.beginPath();
							openfl._internal.renderer.canvas.CanvasGraphics.context.rect(x4 - offsetX,y4 - offsetY,width1,height1);
						}
						break;
					case 8:
						var ry = command[7];
						var rx = command[6];
						var height2 = command[5];
						var width2 = command[4];
						var y5 = command[3];
						var x5 = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.beginPatternFill(bitmapFill,bitmapRepeat);
						openfl._internal.renderer.canvas.CanvasGraphics.beginPath();
						openfl._internal.renderer.canvas.CanvasGraphics.drawRoundRect(x5 - offsetX,y5 - offsetY,width2,height2,rx,ry);
						break;
					case 9:
						var count = command[6];
						var flags = command[5];
						var smooth1 = command[4];
						var tileData = command[3];
						var sheet = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.closePath(false);
						var useScale = (flags & 1) > 0;
						var useRotation = (flags & 2) > 0;
						var useTransform = (flags & 16) > 0;
						var useRGB = (flags & 4) > 0;
						var useAlpha = (flags & 8) > 0;
						var useRect = (flags & 32) > 0;
						var useOrigin = (flags & 64) > 0;
						var useBlendAdd = (flags & 65536) > 0;
						if(useTransform) {
							useScale = false;
							useRotation = false;
						}
						var scaleIndex = 0;
						var rotationIndex = 0;
						var rgbIndex = 0;
						var alphaIndex = 0;
						var transformIndex = 0;
						var numValues = 3;
						if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
						if(useScale) {
							scaleIndex = numValues;
							numValues++;
						}
						if(useRotation) {
							rotationIndex = numValues;
							numValues++;
						}
						if(useTransform) {
							transformIndex = numValues;
							numValues += 4;
						}
						if(useRGB) {
							rgbIndex = numValues;
							numValues += 3;
						}
						if(useAlpha) {
							alphaIndex = numValues;
							numValues++;
						}
						var totalCount = tileData.length;
						if(count >= 0 && totalCount > count) totalCount = count;
						var itemCount = totalCount / numValues | 0;
						var index = 0;
						var rect = null;
						var center = null;
						var previousTileID = -1;
						var surface;
						sheet.__bitmap.__sync();
						surface = sheet.__bitmap.__image.get_src();
						if(useBlendAdd) openfl._internal.renderer.canvas.CanvasGraphics.context.globalCompositeOperation = "lighter";
						while(index < totalCount) {
							var tileID;
							if(!useRect) tileID = tileData[index + 2] | 0; else tileID = -1;
							if(!useRect && tileID != previousTileID) {
								rect = sheet.__tileRects[tileID];
								center = sheet.__centerPoints[tileID];
								previousTileID = tileID;
							} else if(useRect) {
								rect = sheet.__rectTile;
								rect.setTo(tileData[index + 2],tileData[index + 3],tileData[index + 4],tileData[index + 5]);
								center = sheet.__point;
								if(useOrigin) {
									center.x = tileData[index + 6];
									center.y = tileData[index + 7];
								} else {
									center.x = 0;
									center.y = 0;
								}
							}
							if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
								openfl._internal.renderer.canvas.CanvasGraphics.context.save();
								openfl._internal.renderer.canvas.CanvasGraphics.context.translate(tileData[index],tileData[index + 1]);
								if(useRotation) openfl._internal.renderer.canvas.CanvasGraphics.context.rotate(tileData[index + rotationIndex]);
								var scale = 1.0;
								if(useScale) scale = tileData[index + scaleIndex];
								if(useTransform) openfl._internal.renderer.canvas.CanvasGraphics.context.transform(tileData[index + transformIndex],tileData[index + transformIndex + 1],tileData[index + transformIndex + 2],tileData[index + transformIndex + 3],0,0);
								if(useAlpha) openfl._internal.renderer.canvas.CanvasGraphics.context.globalAlpha = tileData[index + alphaIndex];
								openfl._internal.renderer.canvas.CanvasGraphics.context.drawImage(surface,rect.x,rect.y,rect.width,rect.height,-center.x * scale,-center.y * scale,rect.width * scale,rect.height * scale);
								openfl._internal.renderer.canvas.CanvasGraphics.context.restore();
							}
							index += numValues;
						}
						if(useBlendAdd) openfl._internal.renderer.canvas.CanvasGraphics.context.globalCompositeOperation = "source-over";
						break;
					case 11:
						openfl._internal.renderer.canvas.CanvasGraphics.closePath(true);
						break;
					case 12:
						var miterLimit = command[9];
						var joints = command[8];
						var caps = command[7];
						var scaleMode = command[6];
						var pixelHinting = command[5];
						var alpha2 = command[4];
						var color = command[3];
						var thickness = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.closePath(false);
						if(thickness == null) openfl._internal.renderer.canvas.CanvasGraphics.hasStroke = false; else {
							openfl._internal.renderer.canvas.CanvasGraphics.context.lineWidth = thickness;
							if(joints == null) openfl._internal.renderer.canvas.CanvasGraphics.context.lineJoin = "round"; else openfl._internal.renderer.canvas.CanvasGraphics.context.lineJoin = Std.string(joints).toLowerCase();
							if(caps == null) openfl._internal.renderer.canvas.CanvasGraphics.context.lineCap = "round"; else switch(caps[1]) {
							case 0:
								openfl._internal.renderer.canvas.CanvasGraphics.context.lineCap = "butt";
								break;
							default:
								openfl._internal.renderer.canvas.CanvasGraphics.context.lineCap = Std.string(caps).toLowerCase();
							}
							if(miterLimit == null) openfl._internal.renderer.canvas.CanvasGraphics.context.miterLimit = 3; else openfl._internal.renderer.canvas.CanvasGraphics.context.miterLimit = miterLimit;
							if(alpha2 == 1 || alpha2 == null) if(color == null) openfl._internal.renderer.canvas.CanvasGraphics.context.strokeStyle = "#000000"; else openfl._internal.renderer.canvas.CanvasGraphics.context.strokeStyle = "#" + StringTools.hex(color & 16777215,6); else {
								var r2 = (color & 16711680) >>> 16;
								var g2 = (color & 65280) >>> 8;
								var b2 = color & 255;
								if(color == null) openfl._internal.renderer.canvas.CanvasGraphics.context.strokeStyle = "#000000"; else openfl._internal.renderer.canvas.CanvasGraphics.context.strokeStyle = "rgba(" + r2 + ", " + g2 + ", " + b2 + ", " + alpha2 + ")";
							}
							openfl._internal.renderer.canvas.CanvasGraphics.hasStroke = true;
						}
						break;
					case 13:
						var y6 = command[3];
						var x6 = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.beginPatternFill(bitmapFill,bitmapRepeat);
						openfl._internal.renderer.canvas.CanvasGraphics.beginPath();
						openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x6 - offsetX,y6 - offsetY);
						openfl._internal.renderer.canvas.CanvasGraphics.positionX = x6;
						openfl._internal.renderer.canvas.CanvasGraphics.positionY = y6;
						break;
					case 14:
						var y7 = command[3];
						var x7 = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.beginPath();
						openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(x7 - offsetX,y7 - offsetY);
						openfl._internal.renderer.canvas.CanvasGraphics.positionX = x7;
						openfl._internal.renderer.canvas.CanvasGraphics.positionY = y7;
						break;
					case 10:
						var culling = command[5];
						var uvtData = command[4];
						var indices = command[3];
						var vertices = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.closePath(false);
						var v = vertices;
						var ind = indices;
						var uvt = uvtData;
						var pattern = null;
						var colorFill = bitmapFill == null;
						if(colorFill && uvt != null) throw "__break__";
						if(!colorFill) {
							if(uvtData == null) {
								var this1;
								this1 = new openfl.VectorData();
								var this2;
								this2 = new Array(0);
								this1.data = this2;
								this1.length = 0;
								this1.fixed = false;
								uvtData = this1;
								var _g31 = 0;
								var _g21 = v.length / 2 | 0;
								while(_g31 < _g21) {
									var i1 = _g31++;
									if(!uvtData.fixed) {
										uvtData.length++;
										if(uvtData.data.length < uvtData.length) {
											var data;
											var this3;
											this3 = new Array(uvtData.data.length + 10);
											data = this3;
											haxe.ds._Vector.Vector_Impl_.blit(uvtData.data,0,data,0,uvtData.data.length);
											uvtData.data = data;
										}
										uvtData.data[uvtData.length - 1] = v.data[i1 * 2] / bitmapFill.width;
									}
									uvtData.length;
									if(!uvtData.fixed) {
										uvtData.length++;
										if(uvtData.data.length < uvtData.length) {
											var data1;
											var this4;
											this4 = new Array(uvtData.data.length + 10);
											data1 = this4;
											haxe.ds._Vector.Vector_Impl_.blit(uvtData.data,0,data1,0,uvtData.data.length);
											uvtData.data = data1;
										}
										uvtData.data[uvtData.length - 1] = v.data[i1 * 2 + 1] / bitmapFill.height;
									}
									uvtData.length;
								}
							}
							var skipT = uvtData.length != v.length;
							var normalizedUvt = openfl._internal.renderer.canvas.CanvasGraphics.normalizeUvt(uvtData,skipT);
							var maxUvt = normalizedUvt.max;
							uvt = normalizedUvt.uvt;
							if(maxUvt > 1) pattern = openfl._internal.renderer.canvas.CanvasGraphics.createTempPatternCanvas(bitmapFill,bitmapRepeat,openfl._internal.renderer.canvas.CanvasGraphics.bounds.width,openfl._internal.renderer.canvas.CanvasGraphics.bounds.height); else pattern = openfl._internal.renderer.canvas.CanvasGraphics.createTempPatternCanvas(bitmapFill,bitmapRepeat,bitmapFill.width,bitmapFill.height);
						}
						var i2 = 0;
						var l = ind.length;
						var a;
						var b3;
						var c;
						var iax;
						var iay;
						var ibx;
						var iby;
						var icx;
						var icy;
						var x11;
						var y11;
						var x21;
						var y21;
						var x31;
						var y31;
						var uvx1;
						var uvy1;
						var uvx2;
						var uvy2;
						var uvx3;
						var uvy3;
						var denom;
						var t1;
						var t2;
						var t3;
						var t4;
						var dx;
						var dy;
						while(i2 < l) {
							a = i2;
							b3 = i2 + 1;
							c = i2 + 2;
							iax = ind.data[a] * 2;
							iay = ind.data[a] * 2 + 1;
							ibx = ind.data[b3] * 2;
							iby = ind.data[b3] * 2 + 1;
							icx = ind.data[c] * 2;
							icy = ind.data[c] * 2 + 1;
							x11 = v.data[iax];
							y11 = v.data[iay];
							x21 = v.data[ibx];
							y21 = v.data[iby];
							x31 = v.data[icx];
							y31 = v.data[icy];
							switch(culling[1]) {
							case 2:
								if(!((x21 - x11) * (y31 - y11) - (y21 - y11) * (x31 - x11) < 0)) {
									i2 += 3;
									continue;
								}
								break;
							case 0:
								if((x21 - x11) * (y31 - y11) - (y21 - y11) * (x31 - x11) < 0) {
									i2 += 3;
									continue;
								}
								break;
							default:
							}
							if(colorFill) {
								openfl._internal.renderer.canvas.CanvasGraphics.context.beginPath();
								openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(x11,y11);
								openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x21,y21);
								openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x31,y31);
								openfl._internal.renderer.canvas.CanvasGraphics.context.closePath();
								openfl._internal.renderer.canvas.CanvasGraphics.context.fill();
								i2 += 3;
								continue;
							}
							openfl._internal.renderer.canvas.CanvasGraphics.context.save();
							openfl._internal.renderer.canvas.CanvasGraphics.context.beginPath();
							openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(x11,y11);
							openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x21,y21);
							openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x31,y31);
							openfl._internal.renderer.canvas.CanvasGraphics.context.closePath();
							openfl._internal.renderer.canvas.CanvasGraphics.context.clip();
							uvx1 = uvt.data[iax] * pattern.width;
							uvx2 = uvt.data[ibx] * pattern.width;
							uvx3 = uvt.data[icx] * pattern.width;
							uvy1 = uvt.data[iay] * pattern.height;
							uvy2 = uvt.data[iby] * pattern.height;
							uvy3 = uvt.data[icy] * pattern.height;
							denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
							if(denom == 0) {
								i2 += 3;
								continue;
							}
							t1 = -(uvy1 * (x31 - x21) - uvy2 * x31 + uvy3 * x21 + (uvy2 - uvy3) * x11) / denom;
							t2 = (uvy2 * y31 + uvy1 * (y21 - y31) - uvy3 * y21 + (uvy3 - uvy2) * y11) / denom;
							t3 = (uvx1 * (x31 - x21) - uvx2 * x31 + uvx3 * x21 + (uvx2 - uvx3) * x11) / denom;
							t4 = -(uvx2 * y31 + uvx1 * (y21 - y31) - uvx3 * y21 + (uvx3 - uvx2) * y11) / denom;
							dx = (uvx1 * (uvy3 * x21 - uvy2 * x31) + uvy1 * (uvx2 * x31 - uvx3 * x21) + (uvx3 * uvy2 - uvx2 * uvy3) * x11) / denom;
							dy = (uvx1 * (uvy3 * y21 - uvy2 * y31) + uvy1 * (uvx2 * y31 - uvx3 * y21) + (uvx3 * uvy2 - uvx2 * uvy3) * y11) / denom;
							openfl._internal.renderer.canvas.CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
							openfl._internal.renderer.canvas.CanvasGraphics.context.drawImage(pattern,0,0);
							openfl._internal.renderer.canvas.CanvasGraphics.context.restore();
							i2 += 3;
						}
						break;
					default:
						openfl.Lib.notImplemented("CanvasGraphics");
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
		}
		graphics.set___dirty(false);
		openfl._internal.renderer.canvas.CanvasGraphics.closePath(false);
	}
};
openfl._internal.renderer.canvas.CanvasGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.length != 0) {
		var context = renderSession.context;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var _g = 0;
		var _g1 = graphics.__commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 3:
				var y = command[7];
				var x = command[6];
				var cy2 = command[5];
				var cy1 = command[4];
				var cx2 = command[3];
				var cx1 = command[2];
				context.bezierCurveTo(cx1 - offsetX,cy1 - offsetY,cx2 - offsetX,cy2 - offsetY,x - offsetX,y - offsetY);
				positionX = x;
				positionY = y;
				break;
			case 4:
				var y1 = command[5];
				var x1 = command[4];
				var cy = command[3];
				var cx = command[2];
				context.quadraticCurveTo(cx - offsetX,cy - offsetY,x1 - offsetX,y1 - offsetY);
				positionX = x1;
				positionY = y1;
				break;
			case 5:
				var radius = command[4];
				var y2 = command[3];
				var x2 = command[2];
				context.arc(x2 - offsetX,y2 - offsetY,radius,0,Math.PI * 2,true);
				break;
			case 6:
				var height = command[5];
				var width = command[4];
				var y3 = command[3];
				var x3 = command[2];
				x3 -= offsetX;
				y3 -= offsetY;
				var kappa = .5522848;
				var ox = width / 2 * kappa;
				var oy = height / 2 * kappa;
				var xe = x3 + width;
				var ye = y3 + height;
				var xm = x3 + width / 2;
				var ym = y3 + height / 2;
				context.moveTo(x3,ym);
				context.bezierCurveTo(x3,ym - oy,xm - ox,y3,xm,y3);
				context.bezierCurveTo(xm + ox,y3,xe,ym - oy,xe,ym);
				context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				context.bezierCurveTo(xm - ox,ye,x3,ym + oy,x3,ym);
				break;
			case 7:
				var height1 = command[5];
				var width1 = command[4];
				var y4 = command[3];
				var x4 = command[2];
				context.rect(x4 - offsetX,y4 - offsetY,width1,height1);
				break;
			case 8:
				var ry = command[7];
				var rx = command[6];
				var height2 = command[5];
				var width2 = command[4];
				var y5 = command[3];
				var x5 = command[2];
				openfl._internal.renderer.canvas.CanvasGraphics.drawRoundRect(x5 - offsetX,y5 - offsetY,width2,height2,rx,ry);
				break;
			case 13:
				var y6 = command[3];
				var x6 = command[2];
				context.lineTo(x6 - offsetX,y6 - offsetY);
				positionX = x6;
				positionY = y6;
				break;
			case 14:
				var y7 = command[3];
				var x7 = command[2];
				context.moveTo(x7 - offsetX,y7 - offsetY);
				positionX = x7;
				positionY = y7;
				break;
			default:
			}
		}
	}
};
openfl._internal.renderer.canvas.CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = Math.ceil(width);
	canvas.height = Math.ceil(height);
	context.fillStyle = context.createPattern(bitmap.__image.get_src(),repeat?"repeat":"no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	context.fill();
	return canvas;
};
openfl._internal.renderer.canvas.CanvasGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl._internal.renderer.canvas.CanvasGraphics.normalizeUvt = function(uvt,skipT) {
	if(skipT == null) skipT = false;
	var max = Math.NEGATIVE_INFINITY;
	var tmp = Math.NEGATIVE_INFINITY;
	var len = uvt.length;
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) continue;
		tmp = uvt.data[t - 1];
		if(max < tmp) max = tmp;
	}
	var result;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	result = this1;
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) continue;
		if(!result.fixed) {
			result.length++;
			if(result.data.length < result.length) {
				var data;
				var this3;
				this3 = new Array(result.data.length + 10);
				data = this3;
				haxe.ds._Vector.Vector_Impl_.blit(result.data,0,data,0,result.data.length);
				result.data = data;
			}
			result.data[result.length - 1] = uvt.data[t1 - 1] / max;
		}
		result.length;
	}
	return { max : max, uvt : result};
};
openfl._internal.renderer.canvas.CanvasRenderer = function(width,height,context) {
	openfl._internal.renderer.AbstractRenderer.call(this,width,height);
	this.context = context;
	this.renderSession = new openfl._internal.renderer.RenderSession();
	this.renderSession.context = context;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl._internal.renderer.canvas.MaskManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasRenderer"] = openfl._internal.renderer.canvas.CanvasRenderer;
openfl._internal.renderer.canvas.CanvasRenderer.__name__ = ["openfl","_internal","renderer","canvas","CanvasRenderer"];
openfl._internal.renderer.canvas.CanvasRenderer.__super__ = openfl._internal.renderer.AbstractRenderer;
openfl._internal.renderer.canvas.CanvasRenderer.prototype = $extend(openfl._internal.renderer.AbstractRenderer.prototype,{
	context: null
	,render: function(stage) {
		this.context.setTransform(1,0,0,1,0,0);
		this.context.globalAlpha = 1;
		if(!stage.__transparent && stage.__clearBeforeRender) {
			this.context.fillStyle = stage.__colorString;
			this.context.fillRect(0,0,stage.stageWidth,stage.stageHeight);
		} else if(stage.__transparent && stage.__clearBeforeRender) this.context.clearRect(0,0,stage.stageWidth,stage.stageHeight);
		stage.__renderCanvas(this.renderSession);
	}
	,__class__: openfl._internal.renderer.canvas.CanvasRenderer
});
openfl._internal.renderer.canvas.CanvasShape = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasShape"] = openfl._internal.renderer.canvas.CanvasShape;
openfl._internal.renderer.canvas.CanvasShape.__name__ = ["openfl","_internal","renderer","canvas","CanvasShape"];
openfl._internal.renderer.canvas.CanvasShape.render = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) return;
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl._internal.renderer.canvas.CanvasGraphics.render(graphics,renderSession);
		if(graphics.__canvas != null) {
			if(shape.__mask != null) renderSession.maskManager.pushMask(shape.__mask);
			var context = renderSession.context;
			var scrollRect = shape.get_scrollRect();
			context.globalAlpha = shape.__worldAlpha;
			var transform = shape.__worldTransform;
			if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			if(scrollRect == null) context.drawImage(graphics.__canvas,graphics.__bounds.x,graphics.__bounds.y); else context.drawImage(graphics.__canvas,scrollRect.x - graphics.__bounds.x,scrollRect.y - graphics.__bounds.y,scrollRect.width,scrollRect.height,graphics.__bounds.x + scrollRect.x,graphics.__bounds.y + scrollRect.y,scrollRect.width,scrollRect.height);
			if(shape.__mask != null) renderSession.maskManager.popMask();
		}
	}
};
openfl._internal.renderer.canvas.CanvasTextField = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl._internal.renderer.canvas.CanvasTextField;
openfl._internal.renderer.canvas.CanvasTextField.__name__ = ["openfl","_internal","renderer","canvas","CanvasTextField"];
openfl._internal.renderer.canvas.CanvasTextField.context = null;
openfl._internal.renderer.canvas.CanvasTextField.render = function(textField,renderSession) {
	if(!textField.__renderable || textField.__worldAlpha <= 0) return;
	openfl._internal.renderer.canvas.CanvasTextField.update(textField);
	if(textField.__canvas != null) {
		var context = renderSession.context;
		context.globalAlpha = textField.__worldAlpha;
		var transform = textField.__worldTransform;
		var scrollRect = textField.get_scrollRect();
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		if(scrollRect == null) context.drawImage(textField.__canvas,0,0); else context.drawImage(textField.__canvas,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
	}
};
openfl._internal.renderer.canvas.CanvasTextField.renderText = function(textField,text,format,offsetX) {
	openfl._internal.renderer.canvas.CanvasTextField.context.font = textField.__getFont(format);
	openfl._internal.renderer.canvas.CanvasTextField.context.textBaseline = "top";
	openfl._internal.renderer.canvas.CanvasTextField.context.fillStyle = "#" + StringTools.hex(format.color,6);
	var lines = [];
	if(textField.get_wordWrap()) {
		var words = text.split(" ");
		var line = "";
		var word;
		var newLineIndex;
		var test;
		var _g1 = 0;
		var _g = words.length;
		while(_g1 < _g) {
			var i = _g1++;
			word = words[i];
			newLineIndex = word.indexOf("\n");
			if(newLineIndex > -1) {
				while(newLineIndex > -1) {
					test = line + word.substring(0,newLineIndex) + " ";
					if(openfl._internal.renderer.canvas.CanvasTextField.context.measureText(test).width > textField.__width - 4 && i > 0) {
						lines.push(line);
						lines.push(word.substring(0,newLineIndex) + " ");
					} else lines.push(line + word.substring(0,newLineIndex) + " ");
					word = HxOverrides.substr(word,newLineIndex + 1,null);
					newLineIndex = word.indexOf("\n");
					line = "";
				}
				if(word != "") line = word + " ";
			} else {
				test = line + words[i] + " ";
				if(openfl._internal.renderer.canvas.CanvasTextField.context.measureText(test).width > textField.__width - 4 && i > 0) {
					lines.push(line);
					line = words[i] + " ";
				} else line = test;
			}
		}
		if(line != "") lines.push(line);
	} else lines = text.split("\n");
	var yOffset = 0;
	var _g2 = 0;
	while(_g2 < lines.length) {
		var line1 = lines[_g2];
		++_g2;
		var _g11 = format.align;
		switch(_g11[1]) {
		case 3:
			openfl._internal.renderer.canvas.CanvasTextField.context.textAlign = "center";
			openfl._internal.renderer.canvas.CanvasTextField.context.fillText(line1,textField.__width / 2,2 + yOffset,textField.__width - 4);
			break;
		case 1:
			openfl._internal.renderer.canvas.CanvasTextField.context.textAlign = "end";
			openfl._internal.renderer.canvas.CanvasTextField.context.fillText(line1,textField.__width - 2,2 + yOffset,textField.__width - 4);
			break;
		default:
			openfl._internal.renderer.canvas.CanvasTextField.context.textAlign = "start";
			openfl._internal.renderer.canvas.CanvasTextField.context.fillText(line1,2 + offsetX,2 + yOffset,textField.__width - 4);
		}
		yOffset += textField.get_textHeight();
	}
};
openfl._internal.renderer.canvas.CanvasTextField.update = function(textField) {
	if(textField.__dirty) {
		if((textField.__text == null || textField.__text == "") && !textField.background && !textField.border || (textField.get_width() <= 0 || textField.get_height() <= 0) && textField.autoSize != openfl.text.TextFieldAutoSize.LEFT) {
			textField.__canvas = null;
			textField.__context = null;
			textField.__dirty = false;
		} else {
			if(textField.__canvas == null) {
				textField.__canvas = window.document.createElement("canvas");
				textField.__context = textField.__canvas.getContext("2d");
			}
			openfl._internal.renderer.canvas.CanvasTextField.context = textField.__context;
			if(textField.__text != null && textField.__text != "") {
				var text = textField.get_text();
				if(textField.displayAsPassword) {
					var length = text.length;
					var mask = "";
					var _g = 0;
					while(_g < length) {
						var i = _g++;
						mask += "*";
					}
					text = mask;
				}
				var measurements = textField.__measureText();
				var textWidth = 0.0;
				var _g1 = 0;
				while(_g1 < measurements.length) {
					var measurement = measurements[_g1];
					++_g1;
					textWidth += measurement;
				}
				if(textField.autoSize == openfl.text.TextFieldAutoSize.LEFT) textField.__width = textWidth + 4;
				textField.__canvas.width = Math.ceil(textField.__width);
				textField.__canvas.height = Math.ceil(textField.__height);
				if(textField.border || textField.background) {
					textField.__context.rect(0.5,0.5,textField.__width - 1,textField.__height - 1);
					if(textField.background) {
						openfl._internal.renderer.canvas.CanvasTextField.context.fillStyle = "#" + StringTools.hex(textField.backgroundColor,6);
						openfl._internal.renderer.canvas.CanvasTextField.context.fill();
					}
					if(textField.border) {
						openfl._internal.renderer.canvas.CanvasTextField.context.lineWidth = 1;
						openfl._internal.renderer.canvas.CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textField.borderColor,6);
						openfl._internal.renderer.canvas.CanvasTextField.context.stroke();
					}
				}
				if(textField.__hasFocus && textField.__selectionStart == textField.__cursorPosition && textField.__showCursor) {
					var cursorOffset = textField.__getTextWidth(text.substring(0,textField.__cursorPosition));
					openfl._internal.renderer.canvas.CanvasTextField.context.fillStyle = "#" + StringTools.hex(textField.__textFormat.color,6);
					openfl._internal.renderer.canvas.CanvasTextField.context.fillRect(cursorOffset,5,1,textField.__textFormat.size - 5);
				} else if(textField.__hasFocus && Math.abs(textField.__selectionStart - textField.__cursorPosition) > 0 && !textField.__isKeyDown) {
					var lowPos = Std["int"](Math.min(textField.__selectionStart,textField.__cursorPosition));
					var highPos = Std["int"](Math.max(textField.__selectionStart,textField.__cursorPosition));
					var xPos = textField.__getTextWidth(text.substring(0,lowPos));
					var widthPos = textField.__getTextWidth(text.substring(lowPos,highPos));
					openfl._internal.renderer.canvas.CanvasTextField.context.fillStyle = "#" + StringTools.hex(textField.__textFormat.color,6);
					openfl._internal.renderer.canvas.CanvasTextField.context.fillRect(xPos,5,widthPos,textField.__textFormat.size - 5);
				}
				if(textField.__ranges == null) openfl._internal.renderer.canvas.CanvasTextField.renderText(textField,text,textField.__textFormat,0); else {
					var currentIndex = 0;
					var range;
					var offsetX = 0.0;
					var _g11 = 0;
					var _g2 = textField.__ranges.length;
					while(_g11 < _g2) {
						var i1 = _g11++;
						range = textField.__ranges[i1];
						openfl._internal.renderer.canvas.CanvasTextField.renderText(textField,text.substring(range.start,range.end),range.format,offsetX);
						offsetX += measurements[i1];
					}
				}
			} else {
				if(textField.autoSize == openfl.text.TextFieldAutoSize.LEFT) textField.__width = 4;
				textField.__canvas.width = Math.ceil(textField.__width);
				textField.__canvas.height = Math.ceil(textField.__height);
				if(textField.border || textField.background) {
					if(textField.border) openfl._internal.renderer.canvas.CanvasTextField.context.rect(0.5,0.5,textField.__width - 1,textField.__height - 1); else textField.__context.rect(0,0,textField.__width,textField.__height);
					if(textField.background) {
						openfl._internal.renderer.canvas.CanvasTextField.context.fillStyle = "#" + StringTools.hex(textField.backgroundColor,6);
						openfl._internal.renderer.canvas.CanvasTextField.context.fill();
					}
					if(textField.border) {
						openfl._internal.renderer.canvas.CanvasTextField.context.lineWidth = 1;
						openfl._internal.renderer.canvas.CanvasTextField.context.lineCap = "square";
						openfl._internal.renderer.canvas.CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textField.borderColor,6);
						openfl._internal.renderer.canvas.CanvasTextField.context.stroke();
					}
				}
			}
			textField.__dirty = false;
			return true;
		}
	}
	return false;
};
openfl._internal.renderer.canvas.MaskManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.canvas.MaskManager"] = openfl._internal.renderer.canvas.MaskManager;
openfl._internal.renderer.canvas.MaskManager.__name__ = ["openfl","_internal","renderer","canvas","MaskManager"];
openfl._internal.renderer.canvas.MaskManager.prototype = {
	renderSession: null
	,pushMask: function(mask) {
		var context = this.renderSession.context;
		context.save();
		var transform = mask.__getTransform();
		context.setTransform(transform.a,transform.c,transform.b,transform.d,transform.tx,transform.ty);
		context.beginPath();
		mask.__renderMask(this.renderSession);
		context.clip();
	}
	,pushRect: function(rect,transform) {
		var context = this.renderSession.context;
		context.save();
		context.setTransform(transform.a,transform.c,transform.b,transform.d,transform.tx,transform.ty);
		context.beginPath();
		context.rect(rect.x,rect.y,rect.width,rect.height);
		context.clip();
	}
	,popMask: function() {
		this.renderSession.context.restore();
	}
	,__class__: openfl._internal.renderer.canvas.MaskManager
};
openfl._internal.renderer.dom = {};
openfl._internal.renderer.dom.DOMBitmap = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMBitmap"] = openfl._internal.renderer.dom.DOMBitmap;
openfl._internal.renderer.dom.DOMBitmap.__name__ = ["openfl","_internal","renderer","dom","DOMBitmap"];
openfl._internal.renderer.dom.DOMBitmap.render = function(bitmap,renderSession) {
	if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.bitmapData.__image.buffer.__srcImage != null) openfl._internal.renderer.dom.DOMBitmap.renderImage(bitmap,renderSession); else openfl._internal.renderer.dom.DOMBitmap.renderCanvas(bitmap,renderSession);
	} else {
		if(bitmap.__image != null) {
			renderSession.element.removeChild(bitmap.__image);
			bitmap.__image = null;
			bitmap.__style = null;
		}
		if(bitmap.__canvas != null) {
			renderSession.element.removeChild(bitmap.__canvas);
			bitmap.__canvas = null;
			bitmap.__style = null;
		}
	}
};
openfl._internal.renderer.dom.DOMBitmap.renderCanvas = function(bitmap,renderSession) {
	if(bitmap.__image != null) {
		renderSession.element.removeChild(bitmap.__image);
		bitmap.__image = null;
	}
	if(bitmap.__canvas == null) {
		bitmap.__canvas = window.document.createElement("canvas");
		bitmap.__context = bitmap.__canvas.getContext("2d");
		if(!bitmap.smoothing) {
			bitmap.__context.mozImageSmoothingEnabled = false;
			bitmap.__context.webkitImageSmoothingEnabled = false;
			bitmap.__context.imageSmoothingEnabled = false;
		}
		openfl._internal.renderer.dom.DOMRenderer.initializeElement(bitmap,bitmap.__canvas,renderSession);
	}
	bitmap.bitmapData.__sync();
	bitmap.__canvas.width = bitmap.bitmapData.width;
	bitmap.__canvas.height = bitmap.bitmapData.height;
	bitmap.__context.globalAlpha = bitmap.__worldAlpha;
	bitmap.__context.drawImage(bitmap.bitmapData.__image.buffer.__srcCanvas,0,0);
	openfl._internal.renderer.dom.DOMRenderer.applyStyle(bitmap,renderSession,true,false,true);
};
openfl._internal.renderer.dom.DOMBitmap.renderImage = function(bitmap,renderSession) {
	if(bitmap.__canvas != null) {
		renderSession.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
	}
	if(bitmap.__image == null) {
		bitmap.__image = window.document.createElement("img");
		bitmap.__image.src = bitmap.bitmapData.__image.buffer.__srcImage.src;
		openfl._internal.renderer.dom.DOMRenderer.initializeElement(bitmap,bitmap.__image,renderSession);
	}
	openfl._internal.renderer.dom.DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
openfl._internal.renderer.dom.DOMRenderer = function(width,height,element) {
	openfl._internal.renderer.AbstractRenderer.call(this,width,height);
	this.element = element;
	this.renderSession = new openfl._internal.renderer.RenderSession();
	this.renderSession.element = element;
	this.renderSession.roundPixels = true;
	var prefix = (function () {
		  var styles = window.getComputedStyle(document.documentElement, ''),
			pre = (Array.prototype.slice
			  .call(styles)
			  .join('') 
			  .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
			)[1],
			dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
		  return {
			dom: dom,
			lowercase: pre,
			css: '-' + pre + '-',
			js: pre[0].toUpperCase() + pre.substr(1)
		  };
		})();
	this.renderSession.vendorPrefix = prefix.lowercase;
	if(prefix.lowercase == "webkit") this.renderSession.transformProperty = "-webkit-transform"; else this.renderSession.transformProperty = "transform";
	if(prefix.lowercase == "webkit") this.renderSession.transformOriginProperty = "-webkit-transform-origin"; else this.renderSession.transformOriginProperty = "transform-origin";
	this.renderSession.renderer = this;
};
$hxClasses["openfl._internal.renderer.dom.DOMRenderer"] = openfl._internal.renderer.dom.DOMRenderer;
openfl._internal.renderer.dom.DOMRenderer.__name__ = ["openfl","_internal","renderer","dom","DOMRenderer"];
openfl._internal.renderer.dom.DOMRenderer.applyStyle = function(displayObject,renderSession,setTransform,setAlpha,setClip) {
	var style = displayObject.__style;
	if(setTransform && displayObject.__worldTransformChanged) style.setProperty(renderSession.transformProperty,displayObject.__worldTransform.to3DString(renderSession.roundPixels),null);
	if(displayObject.__worldZ != ++renderSession.z) {
		displayObject.__worldZ = renderSession.z;
		style.setProperty("z-index",displayObject.__worldZ == null?"null":"" + displayObject.__worldZ,null);
	}
	if(setAlpha && displayObject.__worldAlphaChanged) {
		if(displayObject.__worldAlpha < 1) style.setProperty("opacity",displayObject.__worldAlpha == null?"null":"" + displayObject.__worldAlpha,null); else style.removeProperty("opacity");
	}
	if(setClip && displayObject.__worldClipChanged) {
		if(displayObject.__worldClip == null) style.removeProperty("clip"); else {
			var clip = displayObject.__worldClip.transform(displayObject.__worldTransform.clone().invert());
			style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
		}
	}
};
openfl._internal.renderer.dom.DOMRenderer.initializeElement = function(displayObject,element,renderSession) {
	var style = displayObject.__style = element.style;
	style.setProperty("position","absolute",null);
	style.setProperty("top","0",null);
	style.setProperty("left","0",null);
	style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
	renderSession.element.appendChild(element);
	displayObject.__worldAlphaChanged = true;
	displayObject.__worldClipChanged = true;
	displayObject.__worldTransformChanged = true;
	displayObject.__worldVisibleChanged = true;
	displayObject.__worldZ = -1;
};
openfl._internal.renderer.dom.DOMRenderer.__super__ = openfl._internal.renderer.AbstractRenderer;
openfl._internal.renderer.dom.DOMRenderer.prototype = $extend(openfl._internal.renderer.AbstractRenderer.prototype,{
	element: null
	,render: function(stage) {
		this.element.style.background = stage.__colorString;
		this.renderSession.z = 1;
		stage.__renderDOM(this.renderSession);
	}
	,__class__: openfl._internal.renderer.dom.DOMRenderer
});
openfl._internal.renderer.dom.DOMShape = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMShape"] = openfl._internal.renderer.dom.DOMShape;
openfl._internal.renderer.dom.DOMShape.__name__ = ["openfl","_internal","renderer","dom","DOMShape"];
openfl._internal.renderer.dom.DOMShape.render = function(shape,renderSession) {
	var graphics = shape.__graphics;
	if(shape.stage != null && shape.__worldVisible && shape.__renderable && graphics != null) {
		if(graphics.__dirty || shape.__worldAlphaChanged || shape.__canvas == null && graphics.__canvas != null) {
			openfl._internal.renderer.canvas.CanvasGraphics.render(graphics,renderSession);
			if(graphics.__canvas != null) {
				if(shape.__canvas == null) {
					shape.__canvas = window.document.createElement("canvas");
					shape.__context = shape.__canvas.getContext("2d");
					openfl._internal.renderer.dom.DOMRenderer.initializeElement(shape,shape.__canvas,renderSession);
				}
				shape.__canvas.width = graphics.__canvas.width;
				shape.__canvas.height = graphics.__canvas.height;
				shape.__context.globalAlpha = shape.__worldAlpha;
				shape.__context.drawImage(graphics.__canvas,0,0);
			} else if(shape.__canvas != null) {
				renderSession.element.removeChild(shape.__canvas);
				shape.__canvas = null;
				shape.__style = null;
			}
		}
		if(shape.__canvas != null) {
			if(shape.__worldTransformChanged || graphics.__transformDirty) {
				graphics.__transformDirty = false;
				var transform = new openfl.geom.Matrix();
				transform.translate(graphics.__bounds.x,graphics.__bounds.y);
				transform = transform.mult(shape.__worldTransform);
				shape.__style.setProperty(renderSession.transformProperty,renderSession.roundPixels?"matrix3d(" + transform.a + ", " + transform.b + ", " + "0, 0, " + transform.c + ", " + transform.d + ", " + "0, 0, 0, 0, 1, 0, " + (transform.tx | 0) + ", " + (transform.ty | 0) + ", 0, 1)":"matrix3d(" + transform.a + ", " + transform.b + ", " + "0, 0, " + transform.c + ", " + transform.d + ", " + "0, 0, 0, 0, 1, 0, " + transform.tx + ", " + transform.ty + ", 0, 1)",null);
			}
			openfl._internal.renderer.dom.DOMRenderer.applyStyle(shape,renderSession,false,false,true);
		}
	} else if(shape.__canvas != null) {
		renderSession.element.removeChild(shape.__canvas);
		shape.__canvas = null;
		shape.__style = null;
	}
};
openfl._internal.renderer.dom.DOMTextField = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTextField"] = openfl._internal.renderer.dom.DOMTextField;
openfl._internal.renderer.dom.DOMTextField.__name__ = ["openfl","_internal","renderer","dom","DOMTextField"];
openfl._internal.renderer.dom.DOMTextField.render = function(textField,renderSession) {
	if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
		if(textField.__dirty || textField.__div == null) {
			if(textField.__text != "" || textField.background || textField.border) {
				if(textField.__div == null) {
					textField.__div = window.document.createElement("div");
					openfl._internal.renderer.dom.DOMRenderer.initializeElement(textField,textField.__div,renderSession);
					textField.__style.setProperty("cursor","inherit",null);
				}
				var style = textField.__style;
				textField.__div.innerHTML = textField.__text;
				if(textField.background) style.setProperty("background-color","#" + StringTools.hex(textField.backgroundColor,6),null); else style.removeProperty("background-color");
				if(textField.border) style.setProperty("border","solid 1px #" + StringTools.hex(textField.borderColor,6),null); else style.removeProperty("border");
				style.setProperty("font",textField.__getFont(textField.__textFormat),null);
				style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color,6),null);
				if(textField.autoSize != openfl.text.TextFieldAutoSize.NONE) style.setProperty("width","auto",null); else style.setProperty("width",textField.__width + "px",null);
				style.setProperty("height",textField.__height + "px",null);
				var _g = textField.__textFormat.align;
				switch(_g[1]) {
				case 3:
					style.setProperty("text-align","center",null);
					break;
				case 1:
					style.setProperty("text-align","right",null);
					break;
				default:
					style.setProperty("text-align","left",null);
				}
				textField.__dirty = false;
			} else if(textField.__div != null) {
				renderSession.element.removeChild(textField.__div);
				textField.__div = null;
			}
		}
		if(textField.__div != null) openfl._internal.renderer.dom.DOMRenderer.applyStyle(textField,renderSession,true,true,false);
	} else if(textField.__div != null) {
		renderSession.element.removeChild(textField.__div);
		textField.__div = null;
		textField.__style = null;
	}
};
openfl._internal.renderer.opengl = {};
openfl._internal.renderer.opengl.GLBitmap = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLBitmap"] = openfl._internal.renderer.opengl.GLBitmap;
openfl._internal.renderer.opengl.GLBitmap.__name__ = ["openfl","_internal","renderer","opengl","GLBitmap"];
openfl._internal.renderer.opengl.GLBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0 || bitmap.bitmapData == null || !bitmap.bitmapData.__isValid) return;
	renderSession.spriteBatch.renderBitmapData(bitmap.bitmapData,bitmap.smoothing,bitmap.__worldTransform,bitmap.__worldColorTransform,bitmap.__worldAlpha,bitmap.blendMode);
};
openfl._internal.renderer.opengl.GLRenderer = function(width,height,gl,transparent,antialias,preserveDrawingBuffer) {
	if(preserveDrawingBuffer == null) preserveDrawingBuffer = false;
	if(antialias == null) antialias = false;
	if(transparent == null) transparent = false;
	if(height == null) height = 600;
	if(width == null) width = 800;
	openfl._internal.renderer.AbstractRenderer.call(this,width,height);
	this.transparent = transparent;
	this.preserveDrawingBuffer = preserveDrawingBuffer;
	this.width = width;
	this.height = height;
	this.options = { alpha : transparent, antialias : antialias, premultipliedAlpha : transparent, stencil : true, preserveDrawingBuffer : preserveDrawingBuffer};
	this._glContextId = openfl._internal.renderer.opengl.GLRenderer.glContextId++;
	this.gl = gl;
	this.defaultFramebuffer = null;
	openfl._internal.renderer.opengl.GLRenderer.glContexts[this._glContextId] = gl;
	if(openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL == null) {
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL = new haxe.ds.EnumValueMap();
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.NORMAL,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.ADD,[gl.SRC_ALPHA,gl.DST_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.MULTIPLY,[gl.DST_COLOR,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.SCREEN,[gl.SRC_ALPHA,gl.ONE]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.ALPHA,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.DARKEN,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.DIFFERENCE,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.ERASE,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.HARDLIGHT,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.INVERT,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.LAYER,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.LIGHTEN,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.OVERLAY,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.SUBTRACT,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
	}
	this.projection = new openfl.geom.Point();
	this.projection.x = this.width / 2;
	this.projection.y = -this.height / 2;
	this.offset = new openfl.geom.Point(0,0);
	this.resize(this.width,this.height);
	this.contextLost = false;
	this.shaderManager = new openfl._internal.renderer.opengl.utils.ShaderManager(gl);
	this.spriteBatch = new openfl._internal.renderer.opengl.utils.SpriteBatch(gl);
	this.maskManager = new openfl._internal.renderer.opengl.utils.MaskManager(gl);
	this.filterManager = new openfl._internal.renderer.opengl.utils.FilterManager(gl,this.transparent);
	this.stencilManager = new openfl._internal.renderer.opengl.utils.StencilManager(gl);
	this.blendModeManager = new openfl._internal.renderer.opengl.utils.BlendModeManager(gl);
	this.renderSession = new openfl._internal.renderer.RenderSession();
	this.renderSession.gl = this.gl;
	this.renderSession.drawCount = 0;
	this.renderSession.shaderManager = this.shaderManager;
	this.renderSession.maskManager = this.maskManager;
	this.renderSession.filterManager = this.filterManager;
	this.renderSession.blendModeManager = this.blendModeManager;
	this.renderSession.spriteBatch = this.spriteBatch;
	this.renderSession.stencilManager = this.stencilManager;
	this.renderSession.renderer = this;
	this.renderSession.projection = this.projection;
	this.renderSession.offset = this.offset;
	this.shaderManager.setShader(this.shaderManager.defaultShader);
	gl.disable(gl.DEPTH_TEST);
	gl.disable(gl.CULL_FACE);
	gl.enable(gl.BLEND);
	gl.colorMask(true,true,true,this.transparent);
};
$hxClasses["openfl._internal.renderer.opengl.GLRenderer"] = openfl._internal.renderer.opengl.GLRenderer;
openfl._internal.renderer.opengl.GLRenderer.__name__ = ["openfl","_internal","renderer","opengl","GLRenderer"];
openfl._internal.renderer.opengl.GLRenderer.__super__ = openfl._internal.renderer.AbstractRenderer;
openfl._internal.renderer.opengl.GLRenderer.prototype = $extend(openfl._internal.renderer.AbstractRenderer.prototype,{
	blendModeManager: null
	,contextLost: null
	,defaultFramebuffer: null
	,filterManager: null
	,gl: null
	,_glContextId: null
	,maskManager: null
	,offset: null
	,options: null
	,preserveDrawingBuffer: null
	,projection: null
	,shaderManager: null
	,spriteBatch: null
	,stencilManager: null
	,view: null
	,__stage: null
	,destroy: function() {
		openfl._internal.renderer.opengl.GLRenderer.glContexts[this._glContextId] = null;
		this.projection = null;
		this.offset = null;
		this.shaderManager.destroy();
		this.spriteBatch.destroy();
		this.maskManager.destroy();
		this.filterManager.destroy();
		this.shaderManager = null;
		this.spriteBatch = null;
		this.maskManager = null;
		this.filterManager = null;
		this.gl = null;
		this.renderSession = null;
	}
	,handleContextLost: function(event) {
		event.preventDefault();
		this.contextLost = true;
	}
	,handleContextRestored: function() {
		var gl = this.gl;
		openfl._internal.renderer.opengl.GLRenderer.glContextId++;
		this.shaderManager.setContext(gl);
		this.spriteBatch.setContext(gl);
		this.maskManager.setContext(gl);
		this.filterManager.setContext(gl);
		this.renderSession.gl = gl;
		this.defaultFramebuffer = null;
		gl.disable(gl.DEPTH_TEST);
		gl.disable(gl.CULL_FACE);
		gl.enable(gl.BLEND);
		gl.colorMask(true,true,true,this.transparent);
		gl.viewport(0,0,this.width,this.height);
		this.contextLost = false;
	}
	,render: function(stage) {
		if(this.contextLost) return;
		var gl = this.gl;
		gl.viewport(0,0,this.width,this.height);
		gl.bindFramebuffer(gl.FRAMEBUFFER,this.defaultFramebuffer);
		if(this.transparent) gl.clearColor(0,0,0,0); else gl.clearColor(stage.__colorSplit[0],stage.__colorSplit[1],stage.__colorSplit[2],1);
		gl.clear(gl.COLOR_BUFFER_BIT);
		this.renderDisplayObject(stage,this.projection);
	}
	,renderDisplayObject: function(displayObject,projection,buffer) {
		this.renderSession.blendModeManager.setBlendMode(openfl.display.BlendMode.NORMAL);
		this.renderSession.drawCount = 0;
		this.renderSession.currentBlendMode = null;
		this.renderSession.projection = projection;
		this.renderSession.offset = this.offset;
		this.spriteBatch.begin(this.renderSession);
		this.filterManager.begin(this.renderSession,buffer);
		displayObject.__renderGL(this.renderSession);
		this.spriteBatch.finish();
	}
	,resize: function(width,height) {
		this.width = width;
		this.height = height;
		openfl._internal.renderer.AbstractRenderer.prototype.resize.call(this,width,height);
		this.gl.viewport(0,0,width,height);
		this.projection.x = width / 2;
		this.projection.y = -height / 2;
	}
	,__class__: openfl._internal.renderer.opengl.GLRenderer
});
openfl._internal.renderer.opengl.GLTextField = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLTextField"] = openfl._internal.renderer.opengl.GLTextField;
openfl._internal.renderer.opengl.GLTextField.__name__ = ["openfl","_internal","renderer","opengl","GLTextField"];
openfl._internal.renderer.opengl.GLTextField.render = function(textField,renderSession) {
	if(!textField.__renderable || textField.__worldAlpha <= 0) return;
	openfl._internal.renderer.opengl.GLTextField.update(textField);
	if(textField.__graphics == null) textField.__graphics = new openfl.display.Graphics();
	var graphics = textField.__graphics;
	graphics.clear();
	if(textField.border || textField.background) {
		if(textField.border) graphics.lineStyle(1,textField.borderColor);
		if(textField.background) graphics.beginFill(textField.backgroundColor);
		graphics.drawRect(0.5,0.5,textField.__width - 1,textField.__height - 1);
	}
	if(textField.__tileData != null) {
		var $it0 = textField.__tilesheets.keys();
		while( $it0.hasNext() ) {
			var tilesheet = $it0.next();
			graphics.drawTiles(tilesheet,textField.__tileData.h[tilesheet.__id__],true,4,textField.__tileDataLength.h[tilesheet.__id__]);
		}
	}
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.render(textField,renderSession);
};
openfl._internal.renderer.opengl.GLTextField.renderText = function(textField,text,format,offsetX,textWidth) {
	var font = textField.__getFontInstance(format);
	if(font != null && format.size != null) {
		if(!(openfl._internal.renderer.opengl.GLTextField.glyphs.h.__keys__[font.__id__] != null)) {
			var value = new haxe.ds.IntMap();
			openfl._internal.renderer.opengl.GLTextField.glyphs.set(font,value);
		}
		var size = format.size | 0;
		var fontGlyphs = openfl._internal.renderer.opengl.GLTextField.glyphs.h[font.__id__];
		if(!fontGlyphs.exists(size)) {
			var value1 = font.renderGlyphs(font.getGlyphs(),size);
			fontGlyphs.set(size,value1);
		}
		var images = fontGlyphs.get(size);
		if(!(openfl._internal.renderer.opengl.GLTextField.bitmapData.h.__keys__[font.__id__] != null)) {
			var value2 = new haxe.ds.IntMap();
			openfl._internal.renderer.opengl.GLTextField.bitmapData.set(font,value2);
		}
		var fontBitmapData = openfl._internal.renderer.opengl.GLTextField.bitmapData.h[font.__id__];
		if(!fontBitmapData.exists(size)) {
			var width;
			var height;
			var data;
			var $it0 = images.iterator();
			while( $it0.hasNext() ) {
				var image = $it0.next();
				width = image.buffer.width;
				height = image.buffer.height;
				data = image.get_data();
				break;
			}
			var bitmapData = new openfl.display.BitmapData(width,height);
			var _g = 0;
			while(_g < width) {
				var x = _g++;
				var _g1 = 0;
				while(_g1 < height) {
					var y = _g1++;
					var alpha = data[y * width + x];
					var color = alpha << 24 | 16711680 | 65280 | 255;
					bitmapData.setPixel32(x,y,color);
				}
			}
			fontBitmapData.set(size,bitmapData);
		}
		var bitmapData1 = fontBitmapData.get(size);
		if(!(openfl._internal.renderer.opengl.GLTextField.tilesheets.h.__keys__[bitmapData1.__id__] != null)) {
			var tilesheet = new openfl.display.Tilesheet(bitmapData1);
			var tileID = new haxe.ds.IntMap();
			var image1;
			var index;
			var $it1 = images.keys();
			while( $it1.hasNext() ) {
				var key = $it1.next();
				image1 = images.get(key);
				index = tilesheet.addTileRect(new openfl.geom.Rectangle(image1.offsetX,image1.offsetY,image1.width,image1.height));
				tileID.set(key,index);
			}
			openfl._internal.renderer.opengl.GLTextField.tileIDs.set(bitmapData1,tileID);
			openfl._internal.renderer.opengl.GLTextField.tilesheets.set(bitmapData1,tilesheet);
		}
		var tilesheet1 = openfl._internal.renderer.opengl.GLTextField.tilesheets.h[bitmapData1.__id__];
		var tileID1 = openfl._internal.renderer.opengl.GLTextField.tileIDs.h[bitmapData1.__id__];
		var r = (format.color >> 16 & 255) / 255;
		var g = (format.color >> 8 & 255) / 255;
		var b = (format.color & 255) / 255;
		var tlm = textField.getLineMetrics(0);
		var image2;
		var x1 = offsetX;
		var y1 = 2 + tlm.ascent;
		var tileData;
		textField.__tilesheets.set(tilesheet1,true);
		if(!(textField.__tileData.h.__keys__[tilesheet1.__id__] != null)) {
			tileData = new Array();
			textField.__tileData.set(tilesheet1,tileData);
			textField.__tileDataLength.set(tilesheet1,0);
		}
		tileData = textField.__tileData.h[tilesheet1.__id__];
		var offsetY = 0;
		var lines = text.split("\n");
		if(textField.__textLayout == null) textField.__textLayout = new lime.text.TextLayout();
		var textLayout = textField.__textLayout;
		var length = 0;
		var line_i = 0;
		var oldX = x1;
		var _g2 = 0;
		while(_g2 < lines.length) {
			var line = lines[_g2];
			++_g2;
			tlm = textField.getLineMetrics(line_i);
			x1 = oldX;
			var _g11 = format.align;
			switch(_g11[1]) {
			case 0:case 2:
				x1 += 0;
				break;
			case 3:
				x1 += (textField.__width - 4 - tlm.width) / 2;
				break;
			case 1:
				x1 += textField.__width - 4 - tlm.width;
				break;
			}
			textLayout.set_text(null);
			textLayout.set_font(font);
			textLayout.set_size(size);
			textLayout.set_text(line);
			var _g12 = 0;
			var _g21 = textLayout.positions;
			while(_g12 < _g21.length) {
				var position = _g21[_g12];
				++_g12;
				image2 = images.get(position.glyph);
				if(image2 != null) {
					if(length >= tileData.length) {
						tileData.push(x1 + position.offset.x + image2.x);
						tileData.push(y1 + position.offset.y - image2.y);
						tileData.push(tileID1.get(position.glyph));
						tileData.push(r);
						tileData.push(g);
						tileData.push(b);
					} else {
						tileData[length] = x1 + position.offset.x + image2.x;
						tileData[length + 1] = y1 + position.offset.y - image2.y;
						tileData[length + 2] = tileID1.get(position.glyph);
						tileData[length + 3] = r;
						tileData[length + 4] = g;
						tileData[length + 5] = b;
					}
					length += 6;
				}
				x1 += position.advance.x;
				y1 -= position.advance.y;
			}
			y1 += tlm.height;
			line_i++;
		}
		textField.__tileDataLength.set(tilesheet1,length);
	}
};
openfl._internal.renderer.opengl.GLTextField.update = function(textField) {
	if(textField.__dirty) {
		if((textField.__text == null || textField.__text == "") && !textField.background && !textField.border || (textField.get_width() <= 0 || textField.get_height() <= 0) && textField.autoSize != openfl.text.TextFieldAutoSize.LEFT) {
			textField.__tilesheets = null;
			textField.__tileData = null;
			textField.__tileDataLength = null;
			textField.__dirty = false;
		} else {
			textField.__tilesheets = new haxe.ds.ObjectMap();
			if(textField.__tileData == null) {
				textField.__tileData = new haxe.ds.ObjectMap();
				textField.__tileDataLength = new haxe.ds.ObjectMap();
			}
			if(textField.__text != null && textField.__text != "") {
				var text = textField.get_text();
				if(textField.displayAsPassword) {
					var length = text.length;
					var mask = "";
					var _g = 0;
					while(_g < length) {
						var i = _g++;
						mask += "*";
					}
					text = mask;
				}
				var measurements = textField.__measureText();
				var textWidth = 0.0;
				var _g1 = 0;
				while(_g1 < measurements.length) {
					var measurement = measurements[_g1];
					++_g1;
					textWidth += measurement;
				}
				if(textField.autoSize == openfl.text.TextFieldAutoSize.LEFT) {
					textField.__width = textWidth + 4;
					textField.__height = textField.get_textHeight() + 4;
				}
				if(textField.__ranges == null) openfl._internal.renderer.opengl.GLTextField.renderText(textField,text,textField.__textFormat,2,textWidth); else {
					var currentIndex = 0;
					var range;
					var offsetX = 2.0;
					var _g11 = 0;
					var _g2 = textField.__ranges.length;
					while(_g11 < _g2) {
						var i1 = _g11++;
						range = textField.__ranges[i1];
						openfl._internal.renderer.opengl.GLTextField.renderText(textField,text.substring(range.start,range.end),range.format,offsetX,textWidth);
						offsetX += measurements[i1];
					}
				}
			} else if(textField.autoSize == openfl.text.TextFieldAutoSize.LEFT) {
				textField.__width = 4;
				textField.__height = 4;
			}
			var $it0 = textField.__tileData.keys();
			while( $it0.hasNext() ) {
				var key = $it0.next();
				if(!(textField.__tilesheets.h.__keys__[key.__id__] != null)) {
					textField.__tileData.remove(key);
					textField.__tileDataLength.remove(key);
				}
			}
			textField.__dirty = false;
			return true;
		}
	}
	return false;
};
openfl._internal.renderer.opengl.shaders2 = {};
openfl._internal.renderer.opengl.shaders2.Shader = function(gl) {
	this.uniforms = new haxe.ds.StringMap();
	this.attributes = new haxe.ds.StringMap();
	this.ID = openfl._internal.renderer.opengl.shaders2.Shader.UID++;
	this.gl = gl;
	this.program = null;
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.Shader"] = openfl._internal.renderer.opengl.shaders2.Shader;
openfl._internal.renderer.opengl.shaders2.Shader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","Shader"];
openfl._internal.renderer.opengl.shaders2.Shader.compileProgram = function(gl,vertexSrc,fragmentSrc) {
	var vertexShader = openfl._internal.renderer.opengl.shaders2.Shader.compileShader(gl,vertexSrc,gl.VERTEX_SHADER);
	var fragmentShader = openfl._internal.renderer.opengl.shaders2.Shader.compileShader(gl,fragmentSrc,gl.FRAGMENT_SHADER);
	var program = gl.createProgram();
	if(vertexShader != null && fragmentShader != null) {
		gl.attachShader(program,vertexShader);
		gl.attachShader(program,fragmentShader);
		gl.linkProgram(program);
		if(gl.getProgramParameter(program,gl.LINK_STATUS) == 0) haxe.Log.trace("Could not initialize shaders",{ fileName : "Shader.hx", lineNumber : 127, className : "openfl._internal.renderer.opengl.shaders2.Shader", methodName : "compileProgram"});
	}
	return program;
};
openfl._internal.renderer.opengl.shaders2.Shader.compileShader = function(gl,shaderSrc,type) {
	var src = shaderSrc.join("\n");
	var shader = gl.createShader(type);
	gl.shaderSource(shader,src);
	gl.compileShader(shader);
	if(gl.getShaderParameter(shader,gl.COMPILE_STATUS) == 0) {
		haxe.Log.trace(gl.getShaderInfoLog(shader),{ fileName : "Shader.hx", lineNumber : 141, className : "openfl._internal.renderer.opengl.shaders2.Shader", methodName : "compileShader"});
		return null;
	}
	return shader;
};
openfl._internal.renderer.opengl.shaders2.Shader.prototype = {
	gl: null
	,vertexSrc: null
	,fragmentSrc: null
	,attributes: null
	,uniforms: null
	,ID: null
	,program: null
	,init: function() {
		this.program = openfl._internal.renderer.opengl.shaders2.Shader.compileProgram(this.gl,this.vertexSrc,this.fragmentSrc);
		this.gl.useProgram(this.program);
	}
	,destroy: function() {
		if(this.program != null) this.gl.deleteProgram(this.program);
		this.attributes = null;
	}
	,getAttribLocation: function(attribute) {
		if(this.program == null) throw "Shader isn't initialized";
		if(this.attributes.exists(attribute)) return this.attributes.get(attribute); else {
			var location = this.gl.getAttribLocation(this.program,attribute);
			this.attributes.set(attribute,location);
			return location;
		}
	}
	,getUniformLocation: function(uniform) {
		if(this.program == null) throw "Shader isn't initialized";
		if(this.uniforms.exists(uniform)) return this.uniforms.get(uniform); else {
			var location = this.gl.getUniformLocation(this.program,uniform);
			this.uniforms.set(uniform,location);
			return location;
		}
	}
	,enableVertexAttribute: function(attribute,stride,offset) {
		var location = this.getAttribLocation(attribute.name);
		this.gl.enableVertexAttribArray(location);
		this.gl.vertexAttribPointer(location,attribute.components,attribute.type,attribute.normalized,stride,offset * 4);
	}
	,disableVertexAttribute: function(attribute,setDefault) {
		if(setDefault == null) setDefault = true;
		var location = this.getAttribLocation(attribute.name);
		this.gl.disableVertexAttribArray(location);
		if(setDefault) {
			var _g = attribute.components;
			switch(_g) {
			case 1:
				this.gl.vertexAttrib1fv(location,attribute.defaultValue.subarray(0,1));
				break;
			case 2:
				this.gl.vertexAttrib2fv(location,attribute.defaultValue.subarray(0,2));
				break;
			case 3:
				this.gl.vertexAttrib3fv(location,attribute.defaultValue.subarray(0,3));
				break;
			default:
				this.gl.vertexAttrib4fv(location,attribute.defaultValue.subarray(0,4));
			}
		}
	}
	,bindVertexArray: function(va) {
		var offset = 0;
		var stride = va.get_stride();
		var _g = 0;
		var _g1 = va.attributes;
		while(_g < _g1.length) {
			var attribute = _g1[_g];
			++_g;
			if(attribute.enabled) {
				this.enableVertexAttribute(attribute,stride,offset);
				offset += Math.floor(attribute.components * attribute.getElementsBytes() / 4);
			} else this.disableVertexAttribute(attribute,true);
		}
	}
	,unbindVertexArray: function(va) {
		var _g = 0;
		var _g1 = va.attributes;
		while(_g < _g1.length) {
			var attribute = _g1[_g];
			++_g;
			this.disableVertexAttribute(attribute,false);
		}
	}
	,__class__: openfl._internal.renderer.opengl.shaders2.Shader
};
openfl._internal.renderer.opengl.shaders2.DefaultShader = function(gl) {
	openfl._internal.renderer.opengl.shaders2.Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + Std.string("aPosition") + ";","attribute vec2 " + Std.string("aTexCoord0") + ";","attribute vec4 " + Std.string("aColor") + ";","uniform vec2 " + Std.string("uProjectionVector") + ";","uniform vec2 " + Std.string("uOffsetVector") + ";","varying vec2 vTexCoord;","varying vec4 vColor;","const vec2 center = vec2(-1.0, 1.0);","void main(void) {","   gl_Position = vec4( ((" + Std.string("aPosition") + " + " + Std.string("uOffsetVector") + ") / " + Std.string("uProjectionVector") + ") + center , 0.0, 1.0);","   vTexCoord = " + Std.string("aTexCoord0") + ";","   vColor = " + Std.string("aColor") + ";","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform sampler2D " + Std.string("uSampler0") + ";","uniform vec4 " + Std.string("uColorMultiplier") + ";","uniform vec4 " + Std.string("uColorOffset") + ";","varying vec2 vTexCoord;","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * tint * multiplier;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   vec4 tc = texture2D(" + Std.string("uSampler0") + ", vTexCoord);","   gl_FragColor = colorTransform(tc, vColor, " + Std.string("uColorMultiplier") + ", " + Std.string("uColorOffset") + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.DefaultShader"] = openfl._internal.renderer.opengl.shaders2.DefaultShader;
openfl._internal.renderer.opengl.shaders2.DefaultShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","DefaultShader"];
openfl._internal.renderer.opengl.shaders2.DefaultShader.__super__ = openfl._internal.renderer.opengl.shaders2.Shader;
openfl._internal.renderer.opengl.shaders2.DefaultShader.prototype = $extend(openfl._internal.renderer.opengl.shaders2.Shader.prototype,{
	init: function() {
		openfl._internal.renderer.opengl.shaders2.Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getAttribLocation("aTexCoord0");
		this.getAttribLocation("aColor");
		this.getUniformLocation("uProjectionVector");
		this.getUniformLocation("uOffsetVector");
		this.getUniformLocation("uSampler0");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl._internal.renderer.opengl.shaders2.DefaultShader
});
openfl._internal.renderer.opengl.shaders2._DefaultShader = {};
openfl._internal.renderer.opengl.shaders2._DefaultShader.Attrib_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.shaders2._DefaultShader.Attrib_Impl_"] = openfl._internal.renderer.opengl.shaders2._DefaultShader.Attrib_Impl_;
openfl._internal.renderer.opengl.shaders2._DefaultShader.Attrib_Impl_.__name__ = ["openfl","_internal","renderer","opengl","shaders2","_DefaultShader","Attrib_Impl_"];
openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_"] = openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_;
openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_.__name__ = ["openfl","_internal","renderer","opengl","shaders2","_DefaultShader","Uniform_Impl_"];
openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader = function(gl) {
	openfl._internal.renderer.opengl.shaders2.Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + Std.string("aPosition") + ";","attribute vec2 " + Std.string("aTexCoord0") + ";","attribute vec4 " + Std.string("aColor") + ";","uniform vec2 " + Std.string("uProjectionVector") + ";","uniform vec2 " + Std.string("uOffsetVector") + ";","varying vec2 vTexCoord;","varying vec4 vColor;","const vec2 center = vec2(-1.0, 1.0);","void main(void) {","   gl_Position = vec4( ((" + Std.string("aPosition") + " + " + Std.string("uOffsetVector") + ") / " + Std.string("uProjectionVector") + ") + center , 0.0, 1.0);","   vTexCoord = " + Std.string("aTexCoord0") + ";","   vColor = " + Std.string("aColor") + ".bgra;","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform sampler2D " + Std.string("uSampler0") + ";","uniform vec3 " + Std.string("uColor") + ";","uniform bool " + Std.string("uUseTexture") + ";","uniform float " + Std.string("uAlpha") + ";","uniform vec4 " + Std.string("uColorMultiplier") + ";","uniform vec4 " + Std.string("uColorOffset") + ";","varying vec2 vTexCoord;","varying vec4 vColor;","vec4 tmp;","vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * tint * multiplier;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   if(" + Std.string("uUseTexture") + ") {","       tmp = texture2D(" + Std.string("uSampler0") + ", vTexCoord);","   } else {","       tmp = vec4(" + Std.string("uColor") + ", 1.);","   }","   gl_FragColor = colorTransform(tmp, vColor, " + Std.string("uColorMultiplier") + ", " + Std.string("uColorOffset") + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader"] = openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader;
openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","DrawTrianglesShader"];
openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader.__super__ = openfl._internal.renderer.opengl.shaders2.Shader;
openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader.prototype = $extend(openfl._internal.renderer.opengl.shaders2.Shader.prototype,{
	init: function() {
		openfl._internal.renderer.opengl.shaders2.Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getAttribLocation("aTexCoord0");
		this.getAttribLocation("aColor");
		this.getUniformLocation("uSampler0");
		this.getUniformLocation("uProjectionVector");
		this.getUniformLocation("uOffsetVector");
		this.getUniformLocation("uColor");
		this.getUniformLocation("uAlpha");
		this.getUniformLocation("uUseTexture");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader
});
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader = {};
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Attrib_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Attrib_Impl_"] = openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Attrib_Impl_;
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Attrib_Impl_.__name__ = ["openfl","_internal","renderer","opengl","shaders2","_DrawTrianglesShader","Attrib_Impl_"];
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_"] = openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_;
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_.__name__ = ["openfl","_internal","renderer","opengl","shaders2","_DrawTrianglesShader","Uniform_Impl_"];
openfl._internal.renderer.opengl.shaders2.FillShader = function(gl) {
	openfl._internal.renderer.opengl.shaders2.Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + Std.string("aPosition") + ";","uniform mat3 " + Std.string("uTranslationMatrix") + ";","uniform vec2 " + Std.string("uProjectionVector") + ";","uniform vec2 " + Std.string("uOffsetVector") + ";","uniform vec4 " + Std.string("uColor") + ";","uniform float " + Std.string("uAlpha") + ";","uniform vec4 " + Std.string("uColorMultiplier") + ";","uniform vec4 " + Std.string("uColorOffset") + ";","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 result = color * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   vec3 v = " + Std.string("uTranslationMatrix") + " * vec3(" + Std.string("aPosition") + ", 1.0);","   v -= " + Std.string("uOffsetVector") + ".xyx;","   gl_Position = vec4( v.x / " + Std.string("uProjectionVector") + ".x -1.0, v.y / - " + Std.string("uProjectionVector") + ".y + 1.0 , 0.0, 1.0);","   vColor = colorTransform(" + Std.string("uColor") + ", " + Std.string("uAlpha") + ", " + Std.string("uColorMultiplier") + ", " + Std.string("uColorOffset") + ");","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","varying vec4 vColor;","void main(void) {","   gl_FragColor = vColor;","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.FillShader"] = openfl._internal.renderer.opengl.shaders2.FillShader;
openfl._internal.renderer.opengl.shaders2.FillShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","FillShader"];
openfl._internal.renderer.opengl.shaders2.FillShader.__super__ = openfl._internal.renderer.opengl.shaders2.Shader;
openfl._internal.renderer.opengl.shaders2.FillShader.prototype = $extend(openfl._internal.renderer.opengl.shaders2.Shader.prototype,{
	init: function() {
		openfl._internal.renderer.opengl.shaders2.Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getUniformLocation("uTranslationMatrix");
		this.getUniformLocation("uProjectionVector");
		this.getUniformLocation("uOffsetVector");
		this.getUniformLocation("uColor");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl._internal.renderer.opengl.shaders2.FillShader
});
openfl._internal.renderer.opengl.shaders2._FillShader = {};
openfl._internal.renderer.opengl.shaders2._FillShader.Attrib_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.shaders2._FillShader.Attrib_Impl_"] = openfl._internal.renderer.opengl.shaders2._FillShader.Attrib_Impl_;
openfl._internal.renderer.opengl.shaders2._FillShader.Attrib_Impl_.__name__ = ["openfl","_internal","renderer","opengl","shaders2","_FillShader","Attrib_Impl_"];
openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_"] = openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_;
openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_.__name__ = ["openfl","_internal","renderer","opengl","shaders2","_FillShader","Uniform_Impl_"];
openfl._internal.renderer.opengl.shaders2.PatternFillShader = function(gl) {
	openfl._internal.renderer.opengl.shaders2.Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + Std.string("aPosition") + ";","uniform mat3 " + Std.string("uTranslationMatrix") + ";","uniform vec2 " + Std.string("uProjectionVector") + ";","uniform vec2 " + Std.string("uOffsetVector") + ";","uniform mat3 " + Std.string("uPatternMatrix") + ";","varying vec2 vPosition;","void main(void) {","   vec3 v = " + Std.string("uTranslationMatrix") + " * vec3(" + Std.string("aPosition") + " , 1.0);","   v -= " + Std.string("uOffsetVector") + ".xyx;","   gl_Position = vec4( v.x / " + Std.string("uProjectionVector") + ".x -1.0, v.y / - " + Std.string("uProjectionVector") + ".y + 1.0 , 0.0, 1.0);","   vPosition = (" + Std.string("uPatternMatrix") + " * vec3(" + Std.string("aPosition") + ", 1)).xy;","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform float " + Std.string("uAlpha") + ";","uniform vec2 " + Std.string("uPatternTL") + ";","uniform vec2 " + Std.string("uPatternBR") + ";","uniform sampler2D " + Std.string("uSampler0") + ";","uniform vec4 " + Std.string("uColorMultiplier") + ";","uniform vec4 " + Std.string("uColorOffset") + ";","varying vec2 vPosition;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   vec2 pos = mix(" + Std.string("uPatternTL") + ", " + Std.string("uPatternBR") + ", vPosition);","   vec4 tcol = texture2D(" + Std.string("uSampler0") + ", pos);","   gl_FragColor = colorTransform(tcol, " + Std.string("uAlpha") + ", " + Std.string("uColorMultiplier") + ", " + Std.string("uColorOffset") + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.PatternFillShader"] = openfl._internal.renderer.opengl.shaders2.PatternFillShader;
openfl._internal.renderer.opengl.shaders2.PatternFillShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","PatternFillShader"];
openfl._internal.renderer.opengl.shaders2.PatternFillShader.__super__ = openfl._internal.renderer.opengl.shaders2.Shader;
openfl._internal.renderer.opengl.shaders2.PatternFillShader.prototype = $extend(openfl._internal.renderer.opengl.shaders2.Shader.prototype,{
	init: function() {
		openfl._internal.renderer.opengl.shaders2.Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getUniformLocation("uTranslationMatrix");
		this.getUniformLocation("uPatternMatrix");
		this.getUniformLocation("uProjectionVector");
		this.getUniformLocation("uOffsetVector");
		this.getUniformLocation("uSampler0");
		this.getUniformLocation("uPatternTL");
		this.getUniformLocation("uPatternBR");
		this.getUniformLocation("uAlpha");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl._internal.renderer.opengl.shaders2.PatternFillShader
});
openfl._internal.renderer.opengl.shaders2._PatternFillShader = {};
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Attrib_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.shaders2._PatternFillShader.Attrib_Impl_"] = openfl._internal.renderer.opengl.shaders2._PatternFillShader.Attrib_Impl_;
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Attrib_Impl_.__name__ = ["openfl","_internal","renderer","opengl","shaders2","_PatternFillShader","Attrib_Impl_"];
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_"] = openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_;
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.__name__ = ["openfl","_internal","renderer","opengl","shaders2","_PatternFillShader","Uniform_Impl_"];
openfl._internal.renderer.opengl.shaders2.PrimitiveShader = function(gl) {
	openfl._internal.renderer.opengl.shaders2.Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + Std.string("aPosition") + ";","attribute vec4 " + Std.string("aColor") + ";","uniform mat3 " + Std.string("uTranslationMatrix") + ";","uniform vec2 " + Std.string("uProjectionVector") + ";","uniform vec2 " + Std.string("uOffsetVector") + ";","uniform vec4 " + Std.string("uColorMultiplier") + ";","uniform vec4 " + Std.string("uColorOffset") + ";","uniform float " + Std.string("uAlpha") + ";","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 result = color * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   vec3 v = " + Std.string("uTranslationMatrix") + " * vec3(" + Std.string("aPosition") + " , 1.0);","   v -= " + Std.string("uOffsetVector") + ".xyx;","   gl_Position = vec4( v.x / " + Std.string("uProjectionVector") + ".x -1.0, v.y / -" + Std.string("uProjectionVector") + ".y + 1.0 , 0.0, 1.0);","   vColor = colorTransform(" + Std.string("aColor") + ", " + Std.string("uAlpha") + ", " + Std.string("uColorMultiplier") + ", " + Std.string("uColorOffset") + ");","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","varying vec4 vColor;","void main(void) {","   gl_FragColor = vColor;","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.PrimitiveShader"] = openfl._internal.renderer.opengl.shaders2.PrimitiveShader;
openfl._internal.renderer.opengl.shaders2.PrimitiveShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","PrimitiveShader"];
openfl._internal.renderer.opengl.shaders2.PrimitiveShader.__super__ = openfl._internal.renderer.opengl.shaders2.Shader;
openfl._internal.renderer.opengl.shaders2.PrimitiveShader.prototype = $extend(openfl._internal.renderer.opengl.shaders2.Shader.prototype,{
	init: function() {
		openfl._internal.renderer.opengl.shaders2.Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getAttribLocation("aColor");
		this.getUniformLocation("uTranslationMatrix");
		this.getUniformLocation("uProjectionVector");
		this.getUniformLocation("uOffsetVector");
		this.getUniformLocation("uAlpha");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl._internal.renderer.opengl.shaders2.PrimitiveShader
});
openfl._internal.renderer.opengl.shaders2._PrimitiveShader = {};
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Attrib_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Attrib_Impl_"] = openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Attrib_Impl_;
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Attrib_Impl_.__name__ = ["openfl","_internal","renderer","opengl","shaders2","_PrimitiveShader","Attrib_Impl_"];
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Uniform_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Uniform_Impl_"] = openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Uniform_Impl_;
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Uniform_Impl_.__name__ = ["openfl","_internal","renderer","opengl","shaders2","_PrimitiveShader","Uniform_Impl_"];
openfl._internal.renderer.opengl.utils = {};
openfl._internal.renderer.opengl.utils.BlendModeManager = function(gl) {
	this.gl = gl;
	this.currentBlendMode = null;
};
$hxClasses["openfl._internal.renderer.opengl.utils.BlendModeManager"] = openfl._internal.renderer.opengl.utils.BlendModeManager;
openfl._internal.renderer.opengl.utils.BlendModeManager.__name__ = ["openfl","_internal","renderer","opengl","utils","BlendModeManager"];
openfl._internal.renderer.opengl.utils.BlendModeManager.prototype = {
	currentBlendMode: null
	,gl: null
	,destroy: function() {
		this.gl = null;
	}
	,setBlendMode: function(blendMode) {
		if(blendMode == null) blendMode = openfl.display.BlendMode.NORMAL;
		if(this.currentBlendMode == blendMode) return false;
		this.currentBlendMode = blendMode;
		var blendModeWebGL = openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.get(this.currentBlendMode);
		this.gl.blendFunc(blendModeWebGL[0],blendModeWebGL[1]);
		return true;
	}
	,__class__: openfl._internal.renderer.opengl.utils.BlendModeManager
};
openfl._internal.renderer.opengl.utils.DrawPath = function() {
	this.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
	this.points = [];
	this.winding = 0;
	this.isRemovable = true;
	this.fillIndex = 0;
	this.line = new openfl._internal.renderer.opengl.utils.LineStyle();
	this.fill = openfl._internal.renderer.opengl.utils.FillType.None;
};
$hxClasses["openfl._internal.renderer.opengl.utils.DrawPath"] = openfl._internal.renderer.opengl.utils.DrawPath;
openfl._internal.renderer.opengl.utils.DrawPath.__name__ = ["openfl","_internal","renderer","opengl","utils","DrawPath"];
openfl._internal.renderer.opengl.utils.DrawPath.getStack = function(graphics,gl) {
	return openfl._internal.renderer.opengl.utils.PathBuiler.build(graphics,gl);
};
openfl._internal.renderer.opengl.utils.DrawPath.prototype = {
	line: null
	,fill: null
	,fillIndex: null
	,isRemovable: null
	,winding: null
	,points: null
	,type: null
	,update: function(line,fill,fillIndex,winding) {
		this.updateLine(line);
		this.fill = fill;
		this.fillIndex = fillIndex;
		this.winding = winding;
	}
	,updateLine: function(line) {
		this.line.width = line.width;
		this.line.color = line.color;
		if(line.alpha == null) this.line.alpha = 1; else this.line.alpha = line.alpha;
		if(line.scaleMode == null) this.line.scaleMode = openfl.display.LineScaleMode.NORMAL; else this.line.scaleMode = line.scaleMode;
		if(line.caps == null) this.line.caps = openfl.display.CapsStyle.ROUND; else this.line.caps = line.caps;
		if(line.joints == null) this.line.joints = openfl.display.JointStyle.ROUND; else this.line.joints = line.joints;
		this.line.miterLimit = line.miterLimit;
	}
	,__class__: openfl._internal.renderer.opengl.utils.DrawPath
};
openfl._internal.renderer.opengl.utils.PathBuiler = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.PathBuiler"] = openfl._internal.renderer.opengl.utils.PathBuiler;
openfl._internal.renderer.opengl.utils.PathBuiler.__name__ = ["openfl","_internal","renderer","opengl","utils","PathBuiler"];
openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = null;
openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths = null;
openfl._internal.renderer.opengl.utils.PathBuiler.__line = null;
openfl._internal.renderer.opengl.utils.PathBuiler.__fill = null;
openfl._internal.renderer.opengl.utils.PathBuiler.closePath = function() {
	var l = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length;
	if(l <= 0) return;
	if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type == openfl._internal.renderer.opengl.utils.GraphicType.Polygon && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.fill != openfl._internal.renderer.opengl.utils.FillType.None) {
		var sx = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points[0];
		var sy = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points[1];
		var ex = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points[l - 2];
		var ey = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points[l - 1];
		if(!(sx == ex && sy == ey)) {
			openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(sx);
			openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(sy);
		}
	}
};
openfl._internal.renderer.opengl.utils.PathBuiler.endFill = function() {
	openfl._internal.renderer.opengl.utils.PathBuiler.__fill = openfl._internal.renderer.opengl.utils.FillType.None;
	openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex++;
};
openfl._internal.renderer.opengl.utils.PathBuiler.moveTo = function(x,y) {
	if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(x);
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(y);
	openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
};
openfl._internal.renderer.opengl.utils.PathBuiler.lineTo = function(x,y) {
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(x);
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(y);
};
openfl._internal.renderer.opengl.utils.PathBuiler.curveTo = function(cx,cy,x,y) {
	if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) {
		if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
		openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
		openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
		openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
		openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(0);
		openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(0);
		openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
	}
	var xa = 0;
	var ya = 0;
	var n = 20;
	var points = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points;
	var fromX = points[points.length - 2];
	var fromY = points[points.length - 1];
	var px = 0;
	var py = 0;
	var tmp = 0;
	var _g1 = 1;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		tmp = i / n;
		xa = fromX + (cx - fromX) * tmp;
		ya = fromY + (cy - fromY) * tmp;
		px = xa + (cx + (x - cx) * tmp - xa) * tmp;
		py = ya + (cy + (y - cy) * tmp - ya) * tmp;
		points.push(px);
		points.push(py);
	}
};
openfl._internal.renderer.opengl.utils.PathBuiler.cubicCurveTo = function(cx,cy,cx2,cy2,x,y) {
	if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) {
		if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
		openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
		openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
		openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
		openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(0);
		openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(0);
		openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
	}
	var n = 20;
	var dt = 0;
	var dt2 = 0;
	var dt3 = 0;
	var t2 = 0;
	var t3 = 0;
	var points = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points;
	var fromX = points[points.length - 2];
	var fromY = points[points.length - 1];
	var px = 0;
	var py = 0;
	var tmp = 0;
	var _g1 = 1;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		tmp = i / n;
		dt = 1 - tmp;
		dt2 = dt * dt;
		dt3 = dt2 * dt;
		t2 = tmp * tmp;
		t3 = t2 * tmp;
		px = dt3 * fromX + 3 * dt2 * tmp * cx + 3 * dt * t2 * cx2 + t3 * x;
		py = dt3 * fromY + 3 * dt2 * tmp * cy + 3 * dt * t2 * cy2 + t3 * y;
		points.push(px);
		points.push(py);
	}
};
openfl._internal.renderer.opengl.utils.PathBuiler.graphicDataPop = function() {
	if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
};
openfl._internal.renderer.opengl.utils.PathBuiler.build = function(graphics,gl) {
	var glStack = null;
	var bounds = graphics.__bounds;
	openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths = new Array();
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
	openfl._internal.renderer.opengl.utils.PathBuiler.__line = new openfl._internal.renderer.opengl.utils.LineStyle();
	openfl._internal.renderer.opengl.utils.PathBuiler.__fill = openfl._internal.renderer.opengl.utils.FillType.None;
	openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex = 0;
	glStack = graphics.__glStack[openfl._internal.renderer.opengl.GLRenderer.glContextId];
	if(glStack == null) glStack = graphics.__glStack[openfl._internal.renderer.opengl.GLRenderer.glContextId] = new openfl._internal.renderer.opengl.utils.GLStack(gl);
	if(!graphics.__visible || graphics.__commands.length == 0 || bounds == null || bounds.width == 0 || bounds.height == 0) {
	} else {
		var _g = 0;
		var _g1 = graphics.__commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 0:
				var smooth = command[5];
				var repeat = command[4];
				var matrix = command[3];
				var bitmap = command[2];
				openfl._internal.renderer.opengl.utils.PathBuiler.endFill();
				if(bitmap != null) openfl._internal.renderer.opengl.utils.PathBuiler.__fill = openfl._internal.renderer.opengl.utils.FillType.Texture(bitmap,matrix,repeat,smooth); else openfl._internal.renderer.opengl.utils.PathBuiler.__fill = openfl._internal.renderer.opengl.utils.FillType.None;
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) {
					if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [];
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
					openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				}
				break;
			case 1:
				var alpha = command[3];
				var rgb = command[2];
				openfl._internal.renderer.opengl.utils.PathBuiler.endFill();
				if(alpha > 0) openfl._internal.renderer.opengl.utils.PathBuiler.__fill = openfl._internal.renderer.opengl.utils.FillType.Color(rgb & 16777215,alpha); else openfl._internal.renderer.opengl.utils.PathBuiler.__fill = openfl._internal.renderer.opengl.utils.FillType.None;
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) {
					if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [];
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
					openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				}
				break;
			case 3:
				var y = command[7];
				var x = command[6];
				var cy2 = command[5];
				var cx2 = command[4];
				var cy = command[3];
				var cx = command[2];
				openfl._internal.renderer.opengl.utils.PathBuiler.cubicCurveTo(cx,cy,cx2,cy2,x,y);
				break;
			case 4:
				var y1 = command[5];
				var x1 = command[4];
				var cy1 = command[3];
				var cx1 = command[2];
				openfl._internal.renderer.opengl.utils.PathBuiler.curveTo(cx1,cy1,x1,y1);
				break;
			case 5:
				var radius = command[4];
				var y2 = command[3];
				var x2 = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Circle;
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [x2,y2,radius];
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 6:
				var height = command[5];
				var width = command[4];
				var y3 = command[3];
				var x3 = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Ellipse;
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [x3,y3,width,height];
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 7:
				var height1 = command[5];
				var width1 = command[4];
				var y4 = command[3];
				var x4 = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Rectangle(false);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [x4,y4,width1,height1];
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 8:
				var ry = command[7];
				var rx = command[6];
				var height2 = command[5];
				var width2 = command[4];
				var y5 = command[3];
				var x5 = command[2];
				if(ry == -1) ry = rx;
				rx *= 0.5;
				ry *= 0.5;
				if(rx > width2 / 2) rx = width2 / 2;
				if(ry > height2 / 2) ry = height2 / 2;
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Rectangle(true);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [x5,y5,width2,height2,rx,ry];
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 11:
				openfl._internal.renderer.opengl.utils.PathBuiler.endFill();
				break;
			case 12:
				var miterLimit = command[9];
				var joints = command[8];
				var caps = command[7];
				var scaleMode = command[6];
				var pixelHinting = command[5];
				var alpha1 = command[4];
				var color = command[3];
				var thickness = command[2];
				openfl._internal.renderer.opengl.utils.PathBuiler.__line = new openfl._internal.renderer.opengl.utils.LineStyle();
				if(thickness == null || Math.isNaN(thickness) || thickness < 0) openfl._internal.renderer.opengl.utils.PathBuiler.__line.width = 0; else if(thickness == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__line.width = 1; else openfl._internal.renderer.opengl.utils.PathBuiler.__line.width = thickness;
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				if(color == null) openfl._internal.renderer.opengl.utils.PathBuiler.__line.color = 0; else openfl._internal.renderer.opengl.utils.PathBuiler.__line.color = color;
				if(alpha1 == null) openfl._internal.renderer.opengl.utils.PathBuiler.__line.alpha = 1; else openfl._internal.renderer.opengl.utils.PathBuiler.__line.alpha = alpha1;
				openfl._internal.renderer.opengl.utils.PathBuiler.__line.scaleMode = scaleMode;
				openfl._internal.renderer.opengl.utils.PathBuiler.__line.caps = caps;
				openfl._internal.renderer.opengl.utils.PathBuiler.__line.joints = joints;
				openfl._internal.renderer.opengl.utils.PathBuiler.__line.miterLimit = miterLimit;
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [];
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 13:
				var y6 = command[3];
				var x6 = command[2];
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(x6);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(y6);
				break;
			case 14:
				var y7 = command[3];
				var x7 = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(x7);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(y7);
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 10:
				var blendMode = command[7];
				var colors = command[6];
				var culling = command[5];
				var uvtData = command[4];
				var indices = command[3];
				var vertices = command[2];
				var isColor;
				{
					var _g2 = openfl._internal.renderer.opengl.utils.PathBuiler.__fill;
					switch(_g2[1]) {
					case 1:
						isColor = true;
						break;
					default:
						isColor = false;
					}
				}
				if(isColor && uvtData != null) continue;
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
				if(uvtData == null) {
					var this1;
					this1 = new openfl.VectorData();
					var this2;
					this2 = new Array(0);
					this1.data = this2;
					this1.length = 0;
					this1.fixed = false;
					uvtData = this1;
					{
						var _g21 = openfl._internal.renderer.opengl.utils.PathBuiler.__fill;
						switch(_g21[1]) {
						case 2:
							var b = _g21[2];
							var _g4 = 0;
							var _g3 = vertices.length / 2 | 0;
							while(_g4 < _g3) {
								var i = _g4++;
								if(!uvtData.fixed) {
									uvtData.length++;
									if(uvtData.data.length < uvtData.length) {
										var data;
										var this3;
										this3 = new Array(uvtData.data.length + 10);
										data = this3;
										haxe.ds._Vector.Vector_Impl_.blit(uvtData.data,0,data,0,uvtData.data.length);
										uvtData.data = data;
									}
									uvtData.data[uvtData.length - 1] = vertices.data[i * 2] / b.width;
								}
								uvtData.length;
								if(!uvtData.fixed) {
									uvtData.length++;
									if(uvtData.data.length < uvtData.length) {
										var data1;
										var this4;
										this4 = new Array(uvtData.data.length + 10);
										data1 = this4;
										haxe.ds._Vector.Vector_Impl_.blit(uvtData.data,0,data1,0,uvtData.data.length);
										uvtData.data = data1;
									}
									uvtData.data[uvtData.length - 1] = vertices.data[i * 2 + 1] / b.height;
								}
								uvtData.length;
							}
							break;
						default:
						}
					}
				}
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.DrawTriangles(vertices,indices,uvtData,culling,colors,blendMode);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable = false;
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 9:
				var count = command[6];
				var flags = command[5];
				var smooth1 = command[4];
				var tileData = command[3];
				var sheet = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex++;
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.DrawTiles(sheet,tileData,smooth1,flags,count);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable = false;
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 15:
				var winding = command[4];
				var data2 = command[3];
				var commands = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				switch(winding) {
				case openfl.display.GraphicsPathWinding.EVEN_ODD:
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding = 0;
					break;
				case openfl.display.GraphicsPathWinding.NON_ZERO:
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding = 1;
					break;
				default:
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding = 0;
				}
				var command1;
				var cx3;
				var cy3;
				var cx21;
				var cy21;
				var ax;
				var ay;
				var idx = 0;
				var _g31 = 0;
				var _g22 = commands.length;
				while(_g31 < _g22) {
					var i1 = _g31++;
					command1 = commands.data[i1];
					switch(command1) {
					case 1:
						ax = data2.data[idx];
						ay = data2.data[idx + 1];
						idx += 2;
						if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(ax);
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(ay);
						openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
						break;
					case 4:
						ax = data2.data[idx + 2];
						ay = data2.data[idx + 3];
						idx += 4;
						if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(ax);
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(ay);
						openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
						break;
					case 2:
						ax = data2.data[idx];
						ay = data2.data[idx + 1];
						idx += 2;
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(ax);
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(ay);
						break;
					case 5:
						ax = data2.data[idx + 2];
						ay = data2.data[idx + 3];
						idx += 4;
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(ax);
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(ay);
						break;
					case 3:
						cx3 = data2.data[idx];
						cy3 = data2.data[idx + 1];
						ax = data2.data[idx + 2];
						ay = data2.data[idx + 3];
						idx += 4;
						openfl._internal.renderer.opengl.utils.PathBuiler.curveTo(cx3,cy3,ax,ay);
						break;
					case 6:
						cx3 = data2.data[idx];
						cy3 = data2.data[idx + 1];
						cx21 = data2.data[idx + 2];
						cy21 = data2.data[idx + 3];
						ax = data2.data[idx + 4];
						ay = data2.data[idx + 5];
						idx += 6;
						openfl._internal.renderer.opengl.utils.PathBuiler.cubicCurveTo(cx3,cy3,cx21,cy21,ax,ay);
						break;
					default:
					}
				}
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding = 0;
				break;
			case 16:
				var m = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.OverrideMatrix(m);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable = false;
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			default:
			}
		}
		openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
	}
	graphics.__drawPaths = openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths;
	return glStack;
};
openfl._internal.renderer.opengl.utils.LineStyle = function() {
	this.width = 0;
	this.color = 0;
	this.alpha = 1;
	this.scaleMode = openfl.display.LineScaleMode.NORMAL;
	this.caps = openfl.display.CapsStyle.ROUND;
	this.joints = openfl.display.JointStyle.ROUND;
	this.miterLimit = 3;
};
$hxClasses["openfl._internal.renderer.opengl.utils.LineStyle"] = openfl._internal.renderer.opengl.utils.LineStyle;
openfl._internal.renderer.opengl.utils.LineStyle.__name__ = ["openfl","_internal","renderer","opengl","utils","LineStyle"];
openfl._internal.renderer.opengl.utils.LineStyle.prototype = {
	width: null
	,color: null
	,alpha: null
	,scaleMode: null
	,caps: null
	,joints: null
	,miterLimit: null
	,__class__: openfl._internal.renderer.opengl.utils.LineStyle
};
openfl._internal.renderer.opengl.utils._DrawPath = {};
openfl._internal.renderer.opengl.utils._DrawPath.WindingRule_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils._DrawPath.WindingRule_Impl_"] = openfl._internal.renderer.opengl.utils._DrawPath.WindingRule_Impl_;
openfl._internal.renderer.opengl.utils._DrawPath.WindingRule_Impl_.__name__ = ["openfl","_internal","renderer","opengl","utils","_DrawPath","WindingRule_Impl_"];
openfl._internal.renderer.opengl.utils.FillType = $hxClasses["openfl._internal.renderer.opengl.utils.FillType"] = { __ename__ : true, __constructs__ : ["None","Color","Texture","Gradient"] };
openfl._internal.renderer.opengl.utils.FillType.None = ["None",0];
openfl._internal.renderer.opengl.utils.FillType.None.toString = $estr;
openfl._internal.renderer.opengl.utils.FillType.None.__enum__ = openfl._internal.renderer.opengl.utils.FillType;
openfl._internal.renderer.opengl.utils.FillType.Color = function(color,alpha) { var $x = ["Color",1,color,alpha]; $x.__enum__ = openfl._internal.renderer.opengl.utils.FillType; $x.toString = $estr; return $x; };
openfl._internal.renderer.opengl.utils.FillType.Texture = function(bitmap,matrix,repeat,smooth) { var $x = ["Texture",2,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl._internal.renderer.opengl.utils.FillType; $x.toString = $estr; return $x; };
openfl._internal.renderer.opengl.utils.FillType.Gradient = ["Gradient",3];
openfl._internal.renderer.opengl.utils.FillType.Gradient.toString = $estr;
openfl._internal.renderer.opengl.utils.FillType.Gradient.__enum__ = openfl._internal.renderer.opengl.utils.FillType;
openfl._internal.renderer.opengl.utils.FilterManager = function(gl,transparent) {
	this.transparent = transparent;
	this.filterStack = [];
	this.offsetX = 0;
	this.offsetY = 0;
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.FilterManager"] = openfl._internal.renderer.opengl.utils.FilterManager;
openfl._internal.renderer.opengl.utils.FilterManager.__name__ = ["openfl","_internal","renderer","opengl","utils","FilterManager"];
openfl._internal.renderer.opengl.utils.FilterManager.prototype = {
	buffer: null
	,colorArray: null
	,colorBuffer: null
	,defaultShader: null
	,filterStack: null
	,gl: null
	,height: null
	,indexBuffer: null
	,offsetX: null
	,offsetY: null
	,renderSession: null
	,texturePool: null
	,transparent: null
	,uvArray: null
	,uvBuffer: null
	,vertexArray: null
	,vertexBuffer: null
	,width: null
	,applyFilterPass: function(filter,filterArea,width,height) {
	}
	,begin: function(renderSession,buffer) {
		this.renderSession = renderSession;
		this.defaultShader = renderSession.shaderManager.defaultShader;
		var projection = renderSession.projection;
		this.width = projection.x * 2 | 0;
		this.height = -projection.y * 2 | 0;
		this.buffer = buffer;
	}
	,destroy: function() {
		var gl = this.gl;
		this.filterStack = null;
		this.offsetX = 0;
		this.offsetY = 0;
		var _g = 0;
		var _g1 = this.texturePool;
		while(_g < _g1.length) {
			var texture = _g1[_g];
			++_g;
			texture.destroy();
		}
		this.texturePool = null;
		gl.deleteBuffer(this.vertexBuffer);
		gl.deleteBuffer(this.uvBuffer);
		gl.deleteBuffer(this.colorBuffer);
		gl.deleteBuffer(this.indexBuffer);
	}
	,initShaderBuffers: function() {
		var gl = this.gl;
		this.vertexBuffer = gl.createBuffer();
		this.uvBuffer = gl.createBuffer();
		this.colorBuffer = gl.createBuffer();
		this.indexBuffer = gl.createBuffer();
		this.vertexArray = new Float32Array([0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0]);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.vertexArray,gl.STATIC_DRAW);
		this.uvArray = new Float32Array([0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0]);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.uvBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.uvArray,gl.STATIC_DRAW);
		this.colorArray = new Float32Array([1.0,16777215,1.0,16777215,1.0,16777215,1.0,16777215]);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.colorBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.colorArray,gl.STATIC_DRAW);
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Uint16Array([0,1,2,1,3,2]),gl.STATIC_DRAW);
	}
	,popFilter: function() {
	}
	,pushFilter: function(filterBlock) {
	}
	,setContext: function(gl) {
		this.gl = gl;
		this.texturePool = [];
		this.initShaderBuffers();
	}
	,__class__: openfl._internal.renderer.opengl.utils.FilterManager
};
openfl._internal.renderer.opengl.utils.FilterTexture = function(gl,width,height,smoothing) {
	if(smoothing == null) smoothing = true;
	this.gl = gl;
	this.frameBuffer = gl.createFramebuffer();
	this.texture = gl.createTexture();
	gl.bindTexture(gl.TEXTURE_2D,this.texture);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,smoothing?gl.LINEAR:gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,smoothing?gl.LINEAR:gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
	gl.bindFramebuffer(gl.FRAMEBUFFER,this.frameBuffer);
	gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.texture,0);
	this.renderBuffer = gl.createRenderbuffer();
	gl.bindRenderbuffer(gl.RENDERBUFFER,this.renderBuffer);
	gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_STENCIL_ATTACHMENT,gl.RENDERBUFFER,this.renderBuffer);
	this.resize(width,height);
};
$hxClasses["openfl._internal.renderer.opengl.utils.FilterTexture"] = openfl._internal.renderer.opengl.utils.FilterTexture;
openfl._internal.renderer.opengl.utils.FilterTexture.__name__ = ["openfl","_internal","renderer","opengl","utils","FilterTexture"];
openfl._internal.renderer.opengl.utils.FilterTexture.prototype = {
	frameBuffer: null
	,gl: null
	,renderBuffer: null
	,smoothing: null
	,texture: null
	,width: null
	,height: null
	,clear: function() {
		this.gl.clearColor(0,0,0,0);
		this.gl.clear(this.gl.COLOR_BUFFER_BIT);
	}
	,destroy: function() {
		this.gl.deleteFramebuffer(this.frameBuffer);
		this.gl.deleteTexture(this.texture);
		this.frameBuffer = null;
		this.texture = null;
	}
	,resize: function(width,height) {
		if(this.width == width && this.height == height) return;
		this.width = width;
		this.height = height;
		this.gl.bindTexture(this.gl.TEXTURE_2D,this.texture);
		this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,width,height,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,null);
		this.gl.bindRenderbuffer(this.gl.RENDERBUFFER,this.renderBuffer);
		this.gl.renderbufferStorage(this.gl.RENDERBUFFER,this.gl.DEPTH_STENCIL,width,height);
	}
	,__class__: openfl._internal.renderer.opengl.utils.FilterTexture
};
openfl._internal.renderer.opengl.utils.VertexAttribute = function(components,type,normalized,name,defaultValue) {
	if(normalized == null) normalized = false;
	this.enabled = true;
	this.normalized = false;
	this.components = components;
	this.type = type;
	this.normalized = normalized;
	this.name = name;
	if(defaultValue == null) this.defaultValue = new Float32Array(components); else this.defaultValue = defaultValue;
};
$hxClasses["openfl._internal.renderer.opengl.utils.VertexAttribute"] = openfl._internal.renderer.opengl.utils.VertexAttribute;
openfl._internal.renderer.opengl.utils.VertexAttribute.__name__ = ["openfl","_internal","renderer","opengl","utils","VertexAttribute"];
openfl._internal.renderer.opengl.utils.VertexAttribute.prototype = {
	components: null
	,normalized: null
	,type: null
	,name: null
	,enabled: null
	,defaultValue: null
	,copy: function() {
		return new openfl._internal.renderer.opengl.utils.VertexAttribute(this.components,this.type,this.normalized,this.name,this.defaultValue);
	}
	,getElementsBytes: function() {
		var _g = this.type;
		switch(_g) {
		case 5120:case 5121:
			return 1;
		case 5122:case 5123:
			return 2;
		default:
			return 4;
		}
	}
	,get_elements: function() {
		return Math.floor(this.components * this.getElementsBytes() / 4);
	}
	,__class__: openfl._internal.renderer.opengl.utils.VertexAttribute
	,__properties__: {get_elements:"get_elements"}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.GraphicsRenderer"] = openfl._internal.renderer.opengl.utils.GraphicsRenderer;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.__name__ = ["openfl","_internal","renderer","opengl","utils","GraphicsRenderer"];
openfl._internal.renderer.opengl.utils.GraphicsRenderer.lastVertsBuffer = null;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.lastBucketMode = null;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.lastTexture = null;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.lastTextureRepeat = null;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.lastTextureSmooth = null;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.overrideMatrix = null;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildCircle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var rectData = path.points;
	var x = rectData[0];
	var y = rectData[1];
	var width = rectData[2];
	var height;
	if(rectData.length == 3) height = width; else height = rectData[3];
	if(path.type == openfl._internal.renderer.opengl.utils.GraphicType.Ellipse) {
		width /= 2;
		height /= 2;
		x += width;
		y += height;
	}
	if(localCoords) {
		x -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
		y -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
	}
	var totalSegs = 40;
	var seg = Math.PI * 2 / totalSegs;
	var bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl._internal.renderer.opengl.utils.BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vertPos = verts.length / 2 | 0;
		indices.push(vertPos);
		var _g1 = 0;
		var _g = totalSegs + 1;
		while(_g1 < _g) {
			var i = _g1++;
			verts.push(x);
			verts.push(y);
			verts.push(x + Math.sin(seg * i) * width);
			verts.push(y + Math.cos(seg * i) * height);
			indices.push(vertPos++);
			indices.push(vertPos++);
		}
		indices.push(vertPos - 1);
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = [];
		var _g11 = 0;
		var _g2 = totalSegs + 1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			path.points.push(x + Math.sin(seg * i1) * width);
			path.points.push(y + Math.cos(seg * i1) * height);
		}
		openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildComplexPoly = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var bucket = null;
	if(path.points.length >= 6) {
		var points = path.points.slice();
		if(localCoords) {
			var _g1 = 0;
			var _g = points.length / 2 | 0;
			while(_g1 < _g) {
				var i = _g1++;
				points[i * 2] -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
				points[i * 2 + 1] -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
			}
		}
		bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
		var fill = bucket.getData(openfl._internal.renderer.opengl.utils.BucketDataType.Fill);
		fill.drawMode = glStack.gl.TRIANGLE_FAN;
		fill.verts = points;
		var indices = fill.indices;
		var length = points.length / 2 | 0;
		var _g2 = 0;
		while(_g2 < length) {
			var i1 = _g2++;
			indices.push(i1);
		}
	}
	if(path.line.width > 0) {
		if(bucket == null) bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
		openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine(path,bucket,localCoords);
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine = function(path,bucket,localCoords) {
	if(localCoords == null) localCoords = false;
	var points = path.points;
	if(points.length == 0) return;
	var line = bucket.getData(openfl._internal.renderer.opengl.utils.BucketDataType.Line);
	if(localCoords) {
		var _g1 = 0;
		var _g = points.length / 2 | 0;
		while(_g1 < _g) {
			var i = _g1++;
			points[i * 2] -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
			points[i * 2 + 1] -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
		}
	}
	var firstPoint = new openfl.geom.Point(points[0],points[1]);
	var lastPoint = new openfl.geom.Point(points[points.length - 2 | 0],points[points.length - 1 | 0]);
	if(firstPoint.x == lastPoint.x && firstPoint.y == lastPoint.y) {
		points = points.slice();
		points.pop();
		points.pop();
		lastPoint = new openfl.geom.Point(points[points.length - 2 | 0],points[points.length - 1 | 0]);
		var midPointX = lastPoint.x + (firstPoint.x - lastPoint.x) * 0.5;
		var midPointY = lastPoint.y + (firstPoint.y - lastPoint.y) * 0.5;
		points.unshift(midPointY);
		points.unshift(midPointX);
		points.push(midPointX);
		points.push(midPointY);
	}
	var verts = line.verts;
	var indices = line.indices;
	var length = points.length / 2 | 0;
	var indexCount = points.length;
	var indexStart = verts.length / 6 | 0;
	var width = path.line.width / 2;
	var color = openfl._internal.renderer.opengl.utils.GraphicsRenderer.hex2rgb(path.line.color);
	var alpha = path.line.alpha;
	var r = color[0] * alpha;
	var g = color[1] * alpha;
	var b = color[2] * alpha;
	var px;
	var py;
	var p1x;
	var p1y;
	var p2x;
	var p2y;
	var p3x;
	var p3y;
	var perpx;
	var perpy;
	var perp2x;
	var perp2y;
	var perp3x;
	var perp3y;
	var a1;
	var b1;
	var c1;
	var a2;
	var b2;
	var c2;
	var denom;
	var pdist;
	var dist;
	p1x = points[0];
	p1y = points[1];
	p2x = points[2];
	p2y = points[3];
	perpx = -(p1y - p2y);
	perpy = p1x - p2x;
	dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
	perpx = perpx / dist;
	perpy = perpy / dist;
	perpx = perpx * width;
	perpy = perpy * width;
	verts.push(p1x - perpx);
	verts.push(p1y - perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	verts.push(p1x + perpx);
	verts.push(p1y + perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	var _g11 = 1;
	var _g2 = length - 1;
	while(_g11 < _g2) {
		var i1 = _g11++;
		p1x = points[(i1 - 1) * 2];
		p1y = points[(i1 - 1) * 2 + 1];
		p2x = points[i1 * 2];
		p2y = points[i1 * 2 + 1];
		p3x = points[(i1 + 1) * 2];
		p3y = points[(i1 + 1) * 2 + 1];
		perpx = -(p1y - p2y);
		perpy = p1x - p2x;
		dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
		perpx = perpx / dist;
		perpy = perpy / dist;
		perpx = perpx * width;
		perpy = perpy * width;
		perp2x = -(p2y - p3y);
		perp2y = p2x - p3x;
		dist = Math.sqrt(Math.abs(perp2x * perp2x + perp2y * perp2y));
		perp2x = perp2x / dist;
		perp2y = perp2y / dist;
		perp2x = perp2x * width;
		perp2y = perp2y * width;
		a1 = -perpy + p1y - (-perpy + p2y);
		b1 = -perpx + p2x - (-perpx + p1x);
		c1 = (-perpx + p1x) * (-perpy + p2y) - (-perpx + p2x) * (-perpy + p1y);
		a2 = -perp2y + p3y - (-perp2y + p2y);
		b2 = -perp2x + p2x - (-perp2x + p3x);
		c2 = (-perp2x + p3x) * (-perp2y + p2y) - (-perp2x + p2x) * (-perp2y + p3y);
		denom = a1 * b2 - a2 * b1;
		if(Math.abs(denom) < 0.1) {
			denom += 10.1;
			verts.push(p2x - perpx);
			verts.push(p2y - perpy);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x + perpx);
			verts.push(p2y + perpy);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			continue;
		}
		px = (b1 * c2 - b2 * c1) / denom;
		py = (a2 * c1 - a1 * c2) / denom;
		pdist = (px - p2x) * (px - p2x) + (py - p2y) + (py - p2y);
		if(pdist > 19600) {
			perp3x = perpx - perp2x;
			perp3y = perpy - perp2y;
			dist = Math.sqrt(Math.abs(perp3x * perp3x + perp3y * perp3y));
			perp3x = perp3x / dist;
			perp3y = perp3y / dist;
			perp3x = perp3x * width;
			perp3y = perp3y * width;
			verts.push(p2x - perp3x);
			verts.push(p2y - perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x + perp3x);
			verts.push(p2y + perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x - perp3x);
			verts.push(p2y - perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			indexCount++;
		} else {
			verts.push(px);
			verts.push(py);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x - (px - p2x));
			verts.push(p2y - (py - p2y));
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
		}
	}
	p1x = points[(length - 2) * 2];
	p1y = points[(length - 2) * 2 + 1];
	p2x = points[(length - 1) * 2];
	p2y = points[(length - 1) * 2 + 1];
	perpx = -(p1y - p2y);
	perpy = p1x - p2x;
	dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
	if(!Math.isFinite(dist)) haxe.Log.trace(perpx * perpx + perpy * perpy,{ fileName : "GraphicsRenderer.hx", lineNumber : 411, className : "openfl._internal.renderer.opengl.utils.GraphicsRenderer", methodName : "buildLine"});
	perpx = perpx / dist;
	perpy = perpy / dist;
	perpx = perpx * width;
	perpy = perpy * width;
	verts.push(p2x - perpx);
	verts.push(p2y - perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	verts.push(p2x + perpx);
	verts.push(p2y + perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	indices.push(indexStart);
	var _g3 = 0;
	while(_g3 < indexCount) {
		var i2 = _g3++;
		indices.push(indexStart++);
	}
	indices.push(indexStart - 1);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildPoly = function(path,glStack) {
	if(path.points.length < 6) return;
	var points = path.points;
	var l = points.length;
	var sx = points[0];
	var sy = points[1];
	var ex = points[l - 2];
	var ey = points[l - 1];
	if(sx != ex || sy != ey) {
		points.push(sx);
		points.push(sy);
	}
	var length = points.length / 2 | 0;
	var bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl._internal.renderer.opengl.utils.BucketDataType.Fill);
	var verts = fill.verts;
	var indices = fill.indices;
	if(fill != null) {
		var triangles = openfl._internal.renderer.opengl.utils.PolyK.triangulate(points);
		var vertPos = verts.length / 2;
		var i = 0;
		while(i < triangles.length) {
			indices.push(triangles[i] + vertPos | 0);
			indices.push(triangles[i] + vertPos | 0);
			indices.push(triangles[i + 1] + vertPos | 0);
			indices.push(triangles[i + 2] + vertPos | 0);
			indices.push(triangles[i + 2] + vertPos | 0);
			i += 3;
		}
		var _g = 0;
		while(_g < length) {
			var i1 = _g++;
			verts.push(points[i1 * 2]);
			verts.push(points[i1 * 2 + 1]);
		}
	}
	if(path.line.width > 0) openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine(path,bucket);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildRectangle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var rectData = path.points;
	var x = rectData[0];
	var y = rectData[1];
	var width = rectData[2];
	var height = rectData[3];
	if(localCoords) {
		x -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
		y -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
	}
	var bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl._internal.renderer.opengl.utils.BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vertPos = verts.length / 2 | 0;
		verts.push(x);
		verts.push(y);
		verts.push(x + width);
		verts.push(y);
		verts.push(x);
		verts.push(y + height);
		verts.push(x + width);
		verts.push(y + height);
		indices.push(vertPos);
		indices.push(vertPos);
		indices.push(vertPos + 1);
		indices.push(vertPos + 2);
		indices.push(vertPos + 3);
		indices.push(vertPos + 3);
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = [x,y,x + width,y,x + width,y + height,x,y + height,x,y];
		openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildRoundedRectangle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var points = path.points.slice();
	var x = points[0];
	var y = points[1];
	var width = points[2];
	var height = points[3];
	var rx = points[4];
	var ry = points[5];
	if(localCoords) {
		x -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
		y -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
	}
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl._internal.renderer.opengl.utils.GraphicsRenderer.SIN45;
	var cx2 = -rx + rx * openfl._internal.renderer.opengl.utils.GraphicsRenderer.TAN22;
	var cy1 = -ry + ry * openfl._internal.renderer.opengl.utils.GraphicsRenderer.SIN45;
	var cy2 = -ry + ry * openfl._internal.renderer.opengl.utils.GraphicsRenderer.TAN22;
	var recPoints = [];
	recPoints.push(xe);
	recPoints.push(ye - ry);
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.curveTo(recPoints,xe,ye + cy2,xe + cx1,ye + cy1);
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.curveTo(recPoints,xe + cx2,ye,xe - rx,ye);
	recPoints.push(x + rx);
	recPoints.push(ye);
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.curveTo(recPoints,x - cx2,ye,x - cx1,ye + cy1);
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.curveTo(recPoints,x,ye + cy2,x,ye - ry);
	recPoints.push(x);
	recPoints.push(y + ry);
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.curveTo(recPoints,x,y - cy2,x - cx1,y - cy1);
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.curveTo(recPoints,x - cx2,y,x + rx,y);
	recPoints.push(xe - rx);
	recPoints.push(y);
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.curveTo(recPoints,xe + cx2,y,xe + cx1,y - cy1);
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.curveTo(recPoints,xe,y - cy2,xe,y + ry);
	recPoints.push(xe);
	recPoints.push(ye - ry);
	var bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl._internal.renderer.opengl.utils.BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vecPos = verts.length / 2;
		var triangles = openfl._internal.renderer.opengl.utils.PolyK.triangulate(recPoints);
		var i = 0;
		while(i < triangles.length) {
			indices.push(triangles[i] + vecPos | 0);
			indices.push(triangles[i] + vecPos | 0);
			indices.push(triangles[i + 1] + vecPos | 0);
			indices.push(triangles[i + 2] + vecPos | 0);
			indices.push(triangles[i + 2] + vecPos | 0);
			i += 3;
		}
		i = 0;
		while(i < recPoints.length) {
			verts.push(recPoints[i]);
			verts.push(recPoints[++i]);
			i++;
		}
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = recPoints;
		openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildDrawTriangles = function(path,object,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var args = path.type.slice(2);
	var vertices = args[0];
	var indices = args[1];
	var uvtData = args[2];
	var culling = args[3];
	var colors = args[4];
	var blendMode = args[5];
	var a;
	var b;
	var c;
	var d;
	var tx;
	var ty;
	if(localCoords) {
		a = 1.0;
		b = 0.0;
		c = 0.0;
		d = 1.0;
		tx = 0.0;
		ty = 0.0;
	} else {
		a = object.__worldTransform.a;
		b = object.__worldTransform.b;
		c = object.__worldTransform.c;
		d = object.__worldTransform.d;
		tx = object.__worldTransform.tx;
		ty = object.__worldTransform.ty;
	}
	var hasColors = colors != null && colors.length > 0;
	var bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl._internal.renderer.opengl.utils.BucketDataType.Fill);
	var colorAttrib = fill.vertexArray.attributes[2];
	colorAttrib.enabled = hasColors;
	colorAttrib.defaultValue = new Float32Array([1,1,1,1]);
	fill.rawVerts = true;
	fill.glLength = indices.length;
	fill.stride = Std["int"](fill.vertexArray.get_stride() / 4);
	var vertsLength = fill.glLength * fill.stride;
	var verts;
	if(fill.glVerts == null || fill.glVerts.length < vertsLength) {
		verts = new Float32Array(vertsLength);
		fill.glVerts = verts;
	} else verts = fill.glVerts;
	var glColors = new Uint32Array(verts.buffer);
	var v0 = 0;
	var v1 = 0;
	var v2 = 0;
	var i0 = 0;
	var i1 = 0;
	var i2 = 0;
	var x0 = 0.0;
	var y0 = 0.0;
	var x1 = 0.0;
	var y1 = 0.0;
	var x2 = 0.0;
	var y2 = 0.0;
	var idx = 0;
	var _g1 = 0;
	var _g = indices.length / 3 | 0;
	while(_g1 < _g) {
		var i = _g1++;
		i0 = indices.data[i * 3];
		i1 = indices.data[i * 3 + 1];
		i2 = indices.data[i * 3 + 2];
		v0 = i0 * 2;
		v1 = i1 * 2;
		v2 = i2 * 2;
		x0 = vertices.data[v0];
		y0 = vertices.data[v0 + 1];
		x1 = vertices.data[v1];
		y1 = vertices.data[v1 + 1];
		x2 = vertices.data[v2];
		y2 = vertices.data[v2 + 1];
		if(localCoords) {
			x0 -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
			y0 -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
			x1 -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
			y1 -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
			x2 -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
			y2 -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
		}
		switch(culling[1]) {
		case 2:
			if(!((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0)) continue;
			break;
		case 0:
			if((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0) continue;
			break;
		default:
		}
		verts[idx++] = a * x0 + c * y0 + tx;
		verts[idx++] = b * x0 + d * y0 + ty;
		verts[idx++] = uvtData.data[v0];
		verts[idx++] = uvtData.data[v0 + 1];
		if(hasColors) glColors[idx++] = colors.data[i0];
		verts[idx++] = a * x1 + c * y1 + tx;
		verts[idx++] = b * x1 + d * y1 + ty;
		verts[idx++] = uvtData.data[v1];
		verts[idx++] = uvtData.data[v1 + 1];
		if(hasColors) glColors[idx++] = colors.data[i1];
		verts[idx++] = a * x2 + c * y2 + tx;
		verts[idx++] = b * x2 + d * y2 + ty;
		verts[idx++] = uvtData.data[v2];
		verts[idx++] = uvtData.data[v2 + 1];
		if(hasColors) glColors[idx++] = colors.data[i2];
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildDrawTiles = function(path,glStack) {
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.curveTo = function(points,cx,cy,x,y) {
	var xa = 0;
	var ya = 0;
	var n = 20;
	var fromX = points[points.length - 2];
	var fromY = points[points.length - 1];
	var px = 0;
	var py = 0;
	var tmp = 0;
	var _g1 = 1;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		tmp = i / n;
		xa = fromX + (cx - fromX) * tmp;
		ya = fromY + (cy - fromY) * tmp;
		px = xa + (cx + (x - cx) * tmp - xa) * tmp;
		py = ya + (cy + (y - cy) * tmp - ya) * tmp;
		points.push(px);
		points.push(py);
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.quadraticBezierCurve = function(fromX,fromY,cpX,cpY,toX,toY) {
	var xa;
	var ya;
	var xb;
	var yb;
	var x;
	var y;
	var n = 20;
	var points = [];
	var getPt = function(n1,n2,perc) {
		var diff = n2 - n1;
		return n1 + diff * perc;
	};
	var j = 0.0;
	var _g1 = 0;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		j = i / n;
		xa = getPt(fromX,cpX,j);
		ya = getPt(fromY,cpY,j);
		xb = getPt(cpX,toX,j);
		yb = getPt(cpY,toY,j);
		x = getPt(xa,xb,j);
		y = getPt(ya,yb,j);
		points.push(x);
		points.push(y);
	}
	return points;
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.render = function(object,renderSession) {
	var graphics = object.__graphics;
	var spritebatch = renderSession.spriteBatch;
	var dirty = graphics.__dirty;
	if(graphics.__commands.length <= 0) return;
	if(dirty) openfl._internal.renderer.opengl.utils.GraphicsRenderer.updateGraphics(object,object.__graphics,renderSession.gl,object.cacheAsBitmap);
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderGraphics(object,renderSession,renderSession.projection,false);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderGraphics = function(object,renderSession,projection,localCoords) {
	if(localCoords == null) localCoords = false;
	var graphics = object.__graphics;
	var gl = renderSession.gl;
	var offset = renderSession.offset;
	var glStack = graphics.__glStack[openfl._internal.renderer.opengl.GLRenderer.glContextId];
	var bucket;
	var translationMatrix;
	if(localCoords) translationMatrix = openfl.geom.Matrix.__identity; else translationMatrix = object.__worldTransform;
	renderSession.blendModeManager.setBlendMode(object.blendMode);
	var batchDrawing = renderSession.spriteBatch.drawing;
	var _g1 = 0;
	var _g = glStack.buckets.length;
	while(_g1 < _g) {
		var i = _g1++;
		batchDrawing = renderSession.spriteBatch.drawing;
		bucket = glStack.buckets[i];
		var _g2 = bucket.mode;
		switch(_g2[1]) {
		case 1:case 2:
			if(batchDrawing && !localCoords) renderSession.spriteBatch.finish();
			renderSession.stencilManager.pushBucket(bucket,renderSession,projection,translationMatrix.toArray(true));
			var shader = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareShader(bucket,renderSession,object,projection,translationMatrix.toArray(true));
			openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderFill(bucket,shader,renderSession);
			renderSession.stencilManager.popBucket(object,bucket,renderSession);
			break;
		case 5:
			if(batchDrawing && !localCoords) renderSession.spriteBatch.finish();
			var shader1 = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareShader(bucket,renderSession,object,projection,null);
			openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderDrawTriangles(bucket,shader1,renderSession);
			break;
		case 6:
			if(!batchDrawing) renderSession.spriteBatch.begin(renderSession);
			var args = bucket.graphicType.slice(2);
			renderSession.spriteBatch.renderTiles(object,args[0],args[1],args[2],args[3],args[4]);
			break;
		default:
		}
		var ct = object.__worldColorTransform;
		var _g21 = 0;
		var _g3 = bucket.lines;
		while(_g21 < _g3.length) {
			var line = _g3[_g21];
			++_g21;
			if(line != null && line.verts.length > 0) {
				batchDrawing = renderSession.spriteBatch.drawing;
				if(batchDrawing && !localCoords) renderSession.spriteBatch.finish();
				var shader2 = renderSession.shaderManager.primitiveShader;
				renderSession.shaderManager.setShader(shader2);
				gl.uniformMatrix3fv(shader2.getUniformLocation("uTranslationMatrix"),false,translationMatrix.toArray(true));
				gl.uniform2f(shader2.getUniformLocation("uProjectionVector"),projection.x,-projection.y);
				gl.uniform2f(shader2.getUniformLocation("uOffsetVector"),-offset.x,-offset.y);
				gl.uniform1f(shader2.getUniformLocation("uAlpha"),1);
				gl.uniform4f(shader2.getUniformLocation("uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,ct.alphaMultiplier);
				gl.uniform4f(shader2.getUniformLocation("uColorOffset"),ct.redOffset / 255,ct.greenOffset / 255,ct.blueOffset / 255,ct.alphaOffset / 255);
				line.vertexArray.bind();
				shader2.bindVertexArray(line.vertexArray);
				gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,line.indexBuffer);
				gl.drawElements(gl.TRIANGLE_STRIP,line.indices.length,gl.UNSIGNED_SHORT,0);
			}
		}
		batchDrawing = renderSession.spriteBatch.drawing;
		if(!batchDrawing && !localCoords) renderSession.spriteBatch.begin(renderSession);
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.updateGraphics = function(object,graphics,gl,localCoords) {
	if(localCoords == null) localCoords = false;
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectPosition.setTo(object.get_x(),object.get_y());
	if(graphics.__bounds == null) openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds = new openfl.geom.Rectangle(); else openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.copyFrom(graphics.__bounds);
	var glStack = null;
	if(graphics.__dirty) glStack = openfl._internal.renderer.opengl.utils.DrawPath.getStack(graphics,gl);
	graphics.set___dirty(false);
	var _g = 0;
	var _g1 = glStack.buckets;
	while(_g < _g1.length) {
		var data = _g1[_g];
		++_g;
		data.reset();
		openfl._internal.renderer.opengl.utils.GraphicsRenderer.bucketPool.push(data);
	}
	glStack.reset();
	var _g11 = glStack.lastIndex;
	var _g2 = graphics.__drawPaths.length;
	while(_g11 < _g2) {
		var i = _g11++;
		var path = graphics.__drawPaths[i];
		{
			var _g21 = path.type;
			switch(_g21[1]) {
			case 0:
				openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildComplexPoly(path,glStack,localCoords);
				break;
			case 1:
				var rounded = _g21[2];
				if(rounded) openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildRoundedRectangle(path,glStack,localCoords); else openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildRectangle(path,glStack,localCoords);
				break;
			case 2:case 3:
				openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildCircle(path,glStack,localCoords);
				break;
			case 4:
				openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildDrawTriangles(path,object,glStack,localCoords);
				break;
			case 5:
				openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
				break;
			case 6:
				var m = _g21[2];
				openfl._internal.renderer.opengl.utils.GraphicsRenderer.overrideMatrix = m;
				break;
			}
		}
		glStack.lastIndex++;
	}
	var _g3 = 0;
	var _g12 = glStack.buckets;
	while(_g3 < _g12.length) {
		var bucket = _g12[_g3];
		++_g3;
		if(bucket.uploadTileBuffer) bucket.uploadTile(Math.ceil(openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.get_left()),Math.ceil(openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.get_top()),Math.floor(openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.get_right()),Math.floor(openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.get_bottom()));
		bucket.optimize();
	}
	glStack.upload();
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket = function(path,glStack) {
	var bucket = null;
	{
		var _g = path.fill;
		switch(_g[1]) {
		case 1:
			var a = _g[3];
			var c = _g[2];
			bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl._internal.renderer.opengl.utils.BucketMode.Fill);
			if(c == null) bucket.color = [1,1,1]; else bucket.color = [(c >> 16 & 255) / 255,(c >> 8 & 255) / 255,(c & 255) / 255];
			bucket.color[3] = a;
			bucket.uploadTileBuffer = true;
			break;
		case 2:
			var s = _g[5];
			var r = _g[4];
			var m = _g[3];
			var b = _g[2];
			bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl._internal.renderer.opengl.utils.BucketMode.PatternFill);
			bucket.bitmap = b;
			bucket.textureRepeat = r;
			bucket.textureSmooth = s;
			bucket.texture = b.getTexture(glStack.gl);
			bucket.uploadTileBuffer = true;
			var tMatrix = bucket.textureMatrix;
			tMatrix.identity();
			var pMatrix;
			if(m == null) pMatrix = new openfl.geom.Matrix(); else pMatrix = new openfl.geom.Matrix(m.a,m.b,m.c,m.d,m.tx,m.ty);
			tMatrix.concat(pMatrix);
			pMatrix = pMatrix.invert();
			var tx = pMatrix.tx / b.width;
			var ty = pMatrix.ty / b.height;
			bucket.textureTL.x = tx;
			bucket.textureTL.y = ty;
			bucket.textureBR.x = tx + 1;
			bucket.textureBR.y = ty + 1;
			tMatrix.scale(1 / b.width,1 / b.height);
			bucket.textureMatrix = tMatrix;
			break;
		default:
			bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl._internal.renderer.opengl.utils.BucketMode.Line);
			bucket.uploadTileBuffer = false;
		}
	}
	{
		var _g1 = path.type;
		switch(_g1[1]) {
		case 4:
			bucket.mode = openfl._internal.renderer.opengl.utils.BucketMode.DrawTriangles;
			bucket.uploadTileBuffer = false;
			break;
		case 5:
			bucket.mode = openfl._internal.renderer.opengl.utils.BucketMode.DrawTiles;
			bucket.uploadTileBuffer = false;
			break;
		default:
		}
	}
	bucket.graphicType = path.type;
	bucket.overrideMatrix = openfl._internal.renderer.opengl.utils.GraphicsRenderer.overrideMatrix;
	return bucket;
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.getBucket = function(glStack,mode) {
	var b = openfl._internal.renderer.opengl.utils.GraphicsRenderer.bucketPool.pop();
	if(b == null) b = new openfl._internal.renderer.opengl.utils.GLBucket(glStack.gl);
	b.mode = mode;
	glStack.buckets.push(b);
	return b;
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.switchBucket = function(fillIndex,glStack,mode) {
	var bucket = null;
	var _g = 0;
	var _g1 = glStack.buckets;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(b.fillIndex == fillIndex) {
			bucket = b;
			break;
		}
	}
	if(bucket == null) bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.getBucket(glStack,mode);
	bucket.dirty = true;
	bucket.fillIndex = fillIndex;
	return bucket;
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareShader = function(bucket,renderSession,object,projection,translationMatrix) {
	var gl = renderSession.gl;
	var offset = renderSession.offset;
	var shader = null;
	var _g = bucket.mode;
	switch(_g[1]) {
	case 1:
		shader = renderSession.shaderManager.fillShader;
		break;
	case 2:
		shader = renderSession.shaderManager.patternFillShader;
		break;
	case 5:
		shader = renderSession.shaderManager.drawTrianglesShader;
		break;
	default:
		shader = null;
	}
	if(shader == null) return null;
	var newShader = renderSession.shaderManager.setShader(shader);
	gl.uniform2f(shader.getUniformLocation("uOffsetVector"),-offset.x,-offset.y);
	gl.uniform1f(shader.getUniformLocation("uAlpha"),object.__worldAlpha);
	var ct = object.__worldColorTransform;
	gl.uniform4f(shader.getUniformLocation("uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,ct.alphaMultiplier);
	gl.uniform4f(shader.getUniformLocation("uColorOffset"),ct.redOffset / 255,ct.greenOffset / 255,ct.blueOffset / 255,ct.alphaOffset / 255);
	var _g1 = bucket.mode;
	switch(_g1[1]) {
	case 1:
		gl.uniform2f(shader.getUniformLocation("uProjectionVector"),projection.x,-projection.y);
		gl.uniformMatrix3fv(shader.getUniformLocation("uTranslationMatrix"),false,translationMatrix);
		gl.uniform4fv(shader.getUniformLocation("uColor"),new Float32Array(bucket.color));
		break;
	case 2:
		gl.uniform2f(shader.getUniformLocation("uProjectionVector"),projection.x,-projection.y);
		gl.uniformMatrix3fv(shader.getUniformLocation("uTranslationMatrix"),false,translationMatrix);
		gl.uniform2f(shader.getUniformLocation("uPatternTL"),bucket.textureTL.x,bucket.textureTL.y);
		gl.uniform2f(shader.getUniformLocation("uPatternBR"),bucket.textureBR.x,bucket.textureBR.y);
		gl.uniformMatrix3fv(shader.getUniformLocation("uPatternMatrix"),false,bucket.textureMatrix.toArray(false));
		break;
	case 5:
		gl.uniform2f(shader.getUniformLocation("uProjectionVector"),projection.x,projection.y);
		if(bucket.texture != null) gl.uniform1i(shader.getUniformLocation("uUseTexture"),1); else {
			gl.uniform1i(shader.getUniformLocation("uUseTexture"),0);
			gl.uniform4fv(shader.getUniformLocation("uColor"),new Float32Array(bucket.color));
		}
		break;
	default:
	}
	return shader;
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderFill = function(bucket,shader,renderSession) {
	var gl = renderSession.gl;
	if(bucket.mode == openfl._internal.renderer.opengl.utils.BucketMode.PatternFill && bucket.texture != null) openfl._internal.renderer.opengl.utils.GraphicsRenderer.bindTexture(gl,bucket);
	gl.bindBuffer(gl.ARRAY_BUFFER,bucket.tileBuffer);
	gl.vertexAttribPointer(shader.getAttribLocation("aPosition"),4,gl.SHORT,false,0,0);
	gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderDrawTriangles = function(bucket,shader,renderSession) {
	var gl = renderSession.gl;
	var _g = 0;
	var _g1 = bucket.fills;
	while(_g < _g1.length) {
		var fill = _g1[_g];
		++_g;
		if(fill.available) continue;
		openfl._internal.renderer.opengl.utils.GraphicsRenderer.bindTexture(gl,bucket);
		fill.vertexArray.bind();
		shader.bindVertexArray(fill.vertexArray);
		gl.drawArrays(gl.TRIANGLES,fill.glStart,fill.glLength);
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.bindTexture = function(gl,bucket) {
	gl.bindTexture(gl.TEXTURE_2D,bucket.texture);
	if(bucket.textureRepeat && bucket.bitmap.__image.get_powerOfTwo()) {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.REPEAT);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.REPEAT);
	} else {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
	}
	if(bucket.textureSmooth) {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);
	} else {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.hex2rgb = function(hex) {
	if(hex == null) return [1,1,1]; else return [(hex >> 16 & 255) / 255,(hex >> 8 & 255) / 255,(hex & 255) / 255];
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.hex2rgba = function(hex) {
	if(hex == null) return [1,1,1,1]; else return [(hex >> 16 & 255) / 255,(hex >> 8 & 255) / 255,(hex & 255) / 255,(hex >> 24 & 255) / 255];
};
openfl._internal.renderer.opengl.utils.GLStack = function(gl) {
	this.lastIndex = 0;
	this.gl = gl;
	this.buckets = [];
	this.lastIndex = 0;
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLStack"] = openfl._internal.renderer.opengl.utils.GLStack;
openfl._internal.renderer.opengl.utils.GLStack.__name__ = ["openfl","_internal","renderer","opengl","utils","GLStack"];
openfl._internal.renderer.opengl.utils.GLStack.prototype = {
	lastIndex: null
	,buckets: null
	,gl: null
	,reset: function() {
		this.buckets = [];
		this.lastIndex = 0;
	}
	,upload: function() {
		var _g = 0;
		var _g1 = this.buckets;
		while(_g < _g1.length) {
			var bucket = _g1[_g];
			++_g;
			if(bucket.dirty) bucket.upload();
		}
	}
	,__class__: openfl._internal.renderer.opengl.utils.GLStack
};
openfl._internal.renderer.opengl.utils.GLBucket = function(gl) {
	this.uploadTileBuffer = true;
	this.textureSmooth = true;
	this.textureRepeat = false;
	this.lines = [];
	this.fills = [];
	this.fillIndex = -1;
	this.gl = gl;
	this.color = [0,0,0];
	this.lastIndex = 0;
	this.alpha = 1;
	this.dirty = true;
	this.mode = openfl._internal.renderer.opengl.utils.BucketMode.Fill;
	this.textureMatrix = new openfl.geom.Matrix();
	this.textureTL = new openfl.geom.Point();
	this.textureBR = new openfl.geom.Point(1,1);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLBucket"] = openfl._internal.renderer.opengl.utils.GLBucket;
openfl._internal.renderer.opengl.utils.GLBucket.__name__ = ["openfl","_internal","renderer","opengl","utils","GLBucket"];
openfl._internal.renderer.opengl.utils.GLBucket.prototype = {
	gl: null
	,color: null
	,alpha: null
	,dirty: null
	,graphicType: null
	,lastIndex: null
	,fillIndex: null
	,mode: null
	,fills: null
	,lines: null
	,bitmap: null
	,texture: null
	,textureMatrix: null
	,textureRepeat: null
	,textureSmooth: null
	,textureTL: null
	,textureBR: null
	,overrideMatrix: null
	,tileBuffer: null
	,glTile: null
	,tile: null
	,uploadTileBuffer: null
	,getData: function(type) {
		var data;
		switch(type[1]) {
		case 1:
			data = this.fills;
			break;
		default:
			data = this.lines;
		}
		var result = null;
		var remove = false;
		var _g = 0;
		while(_g < data.length) {
			var d = data[_g];
			++_g;
			if(d.available) {
				result = d;
				remove = true;
				break;
			}
		}
		if(result == null) result = new openfl._internal.renderer.opengl.utils.GLBucketData(this.gl);
		result.available = false;
		result.parent = this;
		result.type = type;
		if(remove) HxOverrides.remove(data,result);
		data.push(result);
		switch(type[1]) {
		case 1:
			var _g1 = this.mode;
			switch(_g1[1]) {
			case 1:case 2:
				result.vertexArray.attributes = openfl._internal.renderer.opengl.utils.GraphicsRenderer.fillVertexAttributes;
				break;
			case 5:
				result.vertexArray.attributes = openfl._internal.renderer.opengl.utils.GraphicsRenderer.drawTrianglesVertexAttributes.slice();
				result.vertexArray.attributes[2] = result.vertexArray.attributes[2].copy();
				break;
			default:
			}
			break;
		case 0:
			result.vertexArray.attributes = openfl._internal.renderer.opengl.utils.GraphicsRenderer.primitiveVertexAttributes;
			break;
		}
		return result;
	}
	,optimize: function() {
		var _g = this;
		var data = this.lines;
		if(data.length > 1) {
			var result = [];
			var tmp = null;
			var last = null;
			var idx = 0;
			var vi = 0;
			var ii = 0;
			var before = data.length;
			var _g1 = 0;
			while(_g1 < data.length) {
				var d = data[_g1];
				++_g1;
				if(d.available || d.rawVerts || d.rawIndices) {
					if(tmp != null) {
						result.push(tmp);
						tmp = null;
					}
					result.push(d);
					last = d;
					continue;
				}
				if(last == null || last.drawMode == d.drawMode) {
					if(tmp == null) tmp = d; else {
						vi = tmp.verts.length;
						ii = tmp.indices.length;
						var _g2 = 0;
						var _g11 = d.verts.length;
						while(_g2 < _g11) {
							var j = _g2++;
							tmp.verts[j + vi] = d.verts[j];
						}
						var _g21 = 0;
						var _g12 = d.indices.length;
						while(_g21 < _g12) {
							var j1 = _g21++;
							tmp.indices[j1 + ii] = d.indices[j1] + idx;
						}
					}
					idx = tmp.indices[tmp.indices.length - 1] + 1;
					last = d;
				} else {
					if(tmp != null) {
						result.push(tmp);
						tmp = null;
					}
					result.push(d);
					last = d;
					continue;
				}
			}
			if(result.length == 0 && tmp != null) result.push(tmp);
			if(result.length > 0) switch(openfl._internal.renderer.opengl.utils.BucketDataType.Line[1]) {
			case 1:
				_g.fills = result;
				break;
			default:
				_g.lines = result;
			}
		}
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this.fills;
		while(_g < _g1.length) {
			var fill = _g1[_g];
			++_g;
			fill.reset();
		}
		var _g2 = 0;
		var _g11 = this.lines;
		while(_g2 < _g11.length) {
			var line = _g11[_g2];
			++_g2;
			line.reset();
		}
		this.fillIndex = -1;
		this.uploadTileBuffer = true;
		this.graphicType = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
	}
	,uploadTile: function(x,y,w,h) {
		if(this.tileBuffer == null) this.tileBuffer = this.gl.createBuffer();
		this.tile = [x,y,0,0,w,y,1,0,x,h,0,1,w,h,1,1];
		this.glTile = new Int16Array(this.tile);
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.tileBuffer);
		this.gl.bufferData(this.gl.ARRAY_BUFFER,this.glTile,this.gl.STATIC_DRAW);
	}
	,upload: function() {
		if(this.mode != openfl._internal.renderer.opengl.utils.BucketMode.Line) {
			var _g = 0;
			var _g1 = this.fills;
			while(_g < _g1.length) {
				var fill = _g1[_g];
				++_g;
				if(!fill.available) fill.upload();
			}
		}
		var _g2 = 0;
		var _g11 = this.lines;
		while(_g2 < _g11.length) {
			var line = _g11[_g2];
			++_g2;
			if(!line.available) line.upload();
		}
		this.dirty = false;
	}
	,__class__: openfl._internal.renderer.opengl.utils.GLBucket
};
openfl._internal.renderer.opengl.utils.GLBucketData = function(gl) {
	this.available = false;
	this.rawIndices = false;
	this.stride = 0;
	this.rawVerts = false;
	this.lastVertsSize = 0;
	this.glStart = 0;
	this.glLength = 0;
	this.gl = gl;
	this.drawMode = gl.TRIANGLE_STRIP;
	this.verts = [];
	this.indices = [];
	this.vertexArray = new openfl._internal.renderer.opengl.utils.VertexArray([]);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLBucketData"] = openfl._internal.renderer.opengl.utils.GLBucketData;
openfl._internal.renderer.opengl.utils.GLBucketData.__name__ = ["openfl","_internal","renderer","opengl","utils","GLBucketData"];
openfl._internal.renderer.opengl.utils.GLBucketData.prototype = {
	type: null
	,gl: null
	,drawMode: null
	,glLength: null
	,glStart: null
	,vertexArray: null
	,glVerts: null
	,lastVertsSize: null
	,verts: null
	,rawVerts: null
	,stride: null
	,indexBuffer: null
	,glIndices: null
	,indices: null
	,rawIndices: null
	,available: null
	,parent: null
	,reset: function() {
		this.available = true;
		this.verts = [];
		this.indices = [];
		this.glLength = 0;
		this.glStart = 0;
		this.stride = 0;
		this.rawVerts = false;
		this.rawIndices = false;
	}
	,upload: function() {
		if(this.rawVerts && this.glVerts != null && this.glVerts.length > 0 || this.verts.length > 0) {
			if(!this.rawVerts) this.glVerts = new Float32Array(this.verts);
			this.vertexArray.buffer = this.glVerts.buffer;
			if(this.glVerts.length <= this.lastVertsSize) {
				this.vertexArray.bind();
				var end = this.glLength * 4 * this.stride;
				if(this.glLength > 0 && this.lastVertsSize > end) {
					var view = this.glVerts.subarray(0,end);
					this.vertexArray.upload(view);
				} else this.vertexArray.upload(this.glVerts);
			} else {
				this.vertexArray.setContext(this.gl,this.glVerts);
				this.lastVertsSize = this.glVerts.length;
			}
		}
		if(this.glLength == 0 && (this.rawIndices && this.glIndices != null && this.glIndices.length > 0 || this.indices.length > 0)) {
			if(this.indexBuffer == null) this.indexBuffer = this.gl.createBuffer();
			if(!this.rawIndices) this.glIndices = new Uint16Array(this.indices);
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
			this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,this.glIndices,this.gl.STREAM_DRAW);
		}
	}
	,__class__: openfl._internal.renderer.opengl.utils.GLBucketData
};
openfl._internal.renderer.opengl.utils.BucketMode = $hxClasses["openfl._internal.renderer.opengl.utils.BucketMode"] = { __ename__ : true, __constructs__ : ["None","Fill","PatternFill","Line","PatternLine","DrawTriangles","DrawTiles"] };
openfl._internal.renderer.opengl.utils.BucketMode.None = ["None",0];
openfl._internal.renderer.opengl.utils.BucketMode.None.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.None.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.Fill = ["Fill",1];
openfl._internal.renderer.opengl.utils.BucketMode.Fill.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.Fill.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.PatternFill = ["PatternFill",2];
openfl._internal.renderer.opengl.utils.BucketMode.PatternFill.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.PatternFill.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.Line = ["Line",3];
openfl._internal.renderer.opengl.utils.BucketMode.Line.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.Line.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.PatternLine = ["PatternLine",4];
openfl._internal.renderer.opengl.utils.BucketMode.PatternLine.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.PatternLine.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.DrawTriangles = ["DrawTriangles",5];
openfl._internal.renderer.opengl.utils.BucketMode.DrawTriangles.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.DrawTriangles.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.DrawTiles = ["DrawTiles",6];
openfl._internal.renderer.opengl.utils.BucketMode.DrawTiles.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.DrawTiles.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketDataType = $hxClasses["openfl._internal.renderer.opengl.utils.BucketDataType"] = { __ename__ : true, __constructs__ : ["Line","Fill"] };
openfl._internal.renderer.opengl.utils.BucketDataType.Line = ["Line",0];
openfl._internal.renderer.opengl.utils.BucketDataType.Line.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketDataType.Line.__enum__ = openfl._internal.renderer.opengl.utils.BucketDataType;
openfl._internal.renderer.opengl.utils.BucketDataType.Fill = ["Fill",1];
openfl._internal.renderer.opengl.utils.BucketDataType.Fill.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketDataType.Fill.__enum__ = openfl._internal.renderer.opengl.utils.BucketDataType;
openfl._internal.renderer.opengl.utils.GLGraphicsData = function(gl) {
	this.indices = [];
	this.data = [];
	this.lastIndex = 0;
	this.mode = 0;
	this.dirty = true;
	this.alpha = 1.0;
	this.tint = [1.0,1.0,1.0];
	this.gl = gl;
	this.dataBuffer = gl.createBuffer();
	this.indexBuffer = gl.createBuffer();
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLGraphicsData"] = openfl._internal.renderer.opengl.utils.GLGraphicsData;
openfl._internal.renderer.opengl.utils.GLGraphicsData.__name__ = ["openfl","_internal","renderer","opengl","utils","GLGraphicsData"];
openfl._internal.renderer.opengl.utils.GLGraphicsData.prototype = {
	gl: null
	,tint: null
	,alpha: null
	,dirty: null
	,mode: null
	,lastIndex: null
	,data: null
	,glData: null
	,dataBuffer: null
	,indices: null
	,glIndices: null
	,indexBuffer: null
	,reset: function() {
		this.data = [];
		this.indices = [];
		this.lastIndex = 0;
	}
	,upload: function() {
		this.glData = new Float32Array(this.data);
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.dataBuffer);
		this.gl.bufferData(this.gl.ARRAY_BUFFER,this.glData,this.gl.STATIC_DRAW);
		this.glIndices = new Uint16Array(this.indices);
		this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,this.glIndices,this.gl.STATIC_DRAW);
		this.dirty = false;
	}
	,__class__: openfl._internal.renderer.opengl.utils.GLGraphicsData
};
openfl._internal.renderer.opengl.utils.PolyK = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.PolyK"] = openfl._internal.renderer.opengl.utils.PolyK;
openfl._internal.renderer.opengl.utils.PolyK.__name__ = ["openfl","_internal","renderer","opengl","utils","PolyK"];
openfl._internal.renderer.opengl.utils.PolyK.triangulate = function(p) {
	var sign = true;
	var n = p.length >> 1;
	if(n < 3) return [];
	var tgs = [];
	var avl;
	var _g = [];
	var _g1 = 0;
	while(_g1 < n) {
		var i = _g1++;
		_g.push(i);
	}
	avl = _g;
	var i1 = 0;
	var al = n;
	var earFound = false;
	while(al > 3) {
		var i0 = avl[i1 % al];
		var i11 = avl[(i1 + 1) % al];
		var i2 = avl[(i1 + 2) % al];
		var ax = p[2 * i0];
		var ay = p[2 * i0 + 1];
		var bx = p[2 * i11];
		var by = p[2 * i11 + 1];
		var cx = p[2 * i2];
		var cy = p[2 * i2 + 1];
		earFound = false;
		if(openfl._internal.renderer.opengl.utils.PolyK._convex(ax,ay,bx,by,cx,cy,sign)) {
			earFound = true;
			var _g11 = 0;
			while(_g11 < al) {
				var j = _g11++;
				var vi = avl[j];
				if(vi == i0 || vi == i11 || vi == i2) continue;
				if(openfl._internal.renderer.opengl.utils.PolyK._PointInTriangle(p[2 * vi],p[2 * vi + 1],ax,ay,bx,by,cx,cy)) {
					earFound = false;
					break;
				}
			}
		}
		if(earFound) {
			tgs.push(i0);
			tgs.push(i11);
			tgs.push(i2);
			avl.splice((i1 + 1) % al,1);
			al--;
			i1 = 0;
		} else if(i1++ > 3 * al) {
			if(sign) {
				tgs = [];
				var _g12 = [];
				var _g2 = 0;
				while(_g2 < n) {
					var k = _g2++;
					_g12.push(k);
				}
				avl = _g12;
				i1 = 0;
				al = n;
				sign = false;
			} else {
				haxe.Log.trace("Warning: shape too complex to fill",{ fileName : "GraphicsRenderer.hx", lineNumber : 1712, className : "openfl._internal.renderer.opengl.utils.PolyK", methodName : "triangulate"});
				return [];
			}
		}
	}
	tgs.push(avl[0]);
	tgs.push(avl[1]);
	tgs.push(avl[2]);
	return tgs;
};
openfl._internal.renderer.opengl.utils.PolyK._PointInTriangle = function(px,py,ax,ay,bx,by,cx,cy) {
	var v0x = cx - ax | 0;
	var v0y = cy - ay | 0;
	var v1x = bx - ax | 0;
	var v1y = by - ay | 0;
	var v2x = px - ax | 0;
	var v2y = py - ay | 0;
	var dot00 = v0x * v0x + v0y * v0y;
	var dot01 = v0x * v1x + v0y * v1y;
	var dot02 = v0x * v2x + v0y * v2y;
	var dot11 = v1x * v1x + v1y * v1y;
	var dot12 = v1x * v2x + v1y * v2y;
	var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
	var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
	var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
	return u >= 0 && v >= 0 && u + v < 1;
};
openfl._internal.renderer.opengl.utils.PolyK._convex = function(ax,ay,bx,by,cx,cy,sign) {
	return (ay - by) * (cx - bx) + (bx - ax) * (cy - by) >= 0 == sign;
};
openfl._internal.renderer.opengl.utils.GraphicType = $hxClasses["openfl._internal.renderer.opengl.utils.GraphicType"] = { __ename__ : true, __constructs__ : ["Polygon","Rectangle","Circle","Ellipse","DrawTriangles","DrawTiles","OverrideMatrix"] };
openfl._internal.renderer.opengl.utils.GraphicType.Polygon = ["Polygon",0];
openfl._internal.renderer.opengl.utils.GraphicType.Polygon.toString = $estr;
openfl._internal.renderer.opengl.utils.GraphicType.Polygon.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType;
openfl._internal.renderer.opengl.utils.GraphicType.Rectangle = function(rounded) { var $x = ["Rectangle",1,rounded]; $x.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType; $x.toString = $estr; return $x; };
openfl._internal.renderer.opengl.utils.GraphicType.Circle = ["Circle",2];
openfl._internal.renderer.opengl.utils.GraphicType.Circle.toString = $estr;
openfl._internal.renderer.opengl.utils.GraphicType.Circle.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType;
openfl._internal.renderer.opengl.utils.GraphicType.Ellipse = ["Ellipse",3];
openfl._internal.renderer.opengl.utils.GraphicType.Ellipse.toString = $estr;
openfl._internal.renderer.opengl.utils.GraphicType.Ellipse.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType;
openfl._internal.renderer.opengl.utils.GraphicType.DrawTriangles = function(vertices,indices,uvtData,culling,colors,blendMode) { var $x = ["DrawTriangles",4,vertices,indices,uvtData,culling,colors,blendMode]; $x.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType; $x.toString = $estr; return $x; };
openfl._internal.renderer.opengl.utils.GraphicType.DrawTiles = function(sheet,tileData,smooth,flags,count) { var $x = ["DrawTiles",5,sheet,tileData,smooth,flags,count]; $x.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType; $x.toString = $estr; return $x; };
openfl._internal.renderer.opengl.utils.GraphicType.OverrideMatrix = function(matrix) { var $x = ["OverrideMatrix",6,matrix]; $x.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType; $x.toString = $estr; return $x; };
openfl._internal.renderer.opengl.utils._GraphicsRenderer = {};
openfl._internal.renderer.opengl.utils._GraphicsRenderer.RenderMode_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils._GraphicsRenderer.RenderMode_Impl_"] = openfl._internal.renderer.opengl.utils._GraphicsRenderer.RenderMode_Impl_;
openfl._internal.renderer.opengl.utils._GraphicsRenderer.RenderMode_Impl_.__name__ = ["openfl","_internal","renderer","opengl","utils","_GraphicsRenderer","RenderMode_Impl_"];
openfl._internal.renderer.opengl.utils.MaskManager = function(gl) {
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.MaskManager"] = openfl._internal.renderer.opengl.utils.MaskManager;
openfl._internal.renderer.opengl.utils.MaskManager.__name__ = ["openfl","_internal","renderer","opengl","utils","MaskManager"];
openfl._internal.renderer.opengl.utils.MaskManager.prototype = {
	gl: null
	,destroy: function() {
		this.gl = null;
	}
	,setContext: function(gl) {
		this.gl = gl;
	}
	,pushMask: function(object,renderSession) {
		renderSession.stencilManager.pushMask(object,renderSession);
	}
	,popMask: function(object,renderSession) {
		renderSession.stencilManager.popMask(object,renderSession);
	}
	,__class__: openfl._internal.renderer.opengl.utils.MaskManager
};
openfl._internal.renderer.opengl.utils.ShaderManager = function(gl) {
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.ShaderManager"] = openfl._internal.renderer.opengl.utils.ShaderManager;
openfl._internal.renderer.opengl.utils.ShaderManager.__name__ = ["openfl","_internal","renderer","opengl","utils","ShaderManager"];
openfl._internal.renderer.opengl.utils.ShaderManager.prototype = {
	gl: null
	,currentShader: null
	,defaultShader: null
	,fillShader: null
	,patternFillShader: null
	,drawTrianglesShader: null
	,primitiveShader: null
	,setContext: function(gl) {
		this.gl = gl;
		this.defaultShader = new openfl._internal.renderer.opengl.shaders2.DefaultShader(gl);
		this.fillShader = new openfl._internal.renderer.opengl.shaders2.FillShader(gl);
		this.patternFillShader = new openfl._internal.renderer.opengl.shaders2.PatternFillShader(gl);
		this.drawTrianglesShader = new openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader(gl);
		this.primitiveShader = new openfl._internal.renderer.opengl.shaders2.PrimitiveShader(gl);
		this.setShader(this.defaultShader,true);
	}
	,destroy: function() {
		this.defaultShader.destroy();
		this.fillShader.destroy();
		this.patternFillShader.destroy();
		this.drawTrianglesShader.destroy();
		this.primitiveShader.destroy();
		this.gl = null;
	}
	,setShader: function(shader,force) {
		if(force == null) force = false;
		if(!force && this.currentShader.ID == shader.ID) return false;
		this.currentShader = shader;
		this.gl.useProgram(shader.program);
		return true;
	}
	,__class__: openfl._internal.renderer.opengl.utils.ShaderManager
};
openfl._internal.renderer.opengl.utils.SpriteBatch = function(gl,maxSprites) {
	if(maxSprites == null) maxSprites = 2000;
	this.lastEnableColor = true;
	this.enableColor = true;
	this.attributes = [];
	this.writtenVertexBytes = 0;
	this.drawing = false;
	this.dirty = true;
	this.states = [];
	this.maxSprites = maxSprites;
	this.attributes.push(new openfl._internal.renderer.opengl.utils.VertexAttribute(2,5126,false,"aPosition"));
	this.attributes.push(new openfl._internal.renderer.opengl.utils.VertexAttribute(2,5126,false,"aTexCoord0"));
	this.attributes.push(new openfl._internal.renderer.opengl.utils.VertexAttribute(4,5121,true,"aColor"));
	this.attributes[2].defaultValue = new Float32Array([1,1,1,1]);
	this.maxElementsPerVertex = 0;
	var _g = 0;
	var _g1 = this.attributes;
	while(_g < _g1.length) {
		var a = _g1[_g];
		++_g;
		this.maxElementsPerVertex += Math.floor(a.components * a.getElementsBytes() / 4);
	}
	this.vertexArraySize = maxSprites * this.maxElementsPerVertex * 4 * 4;
	this.indexArraySize = maxSprites * 6;
	this.vertexArray = new openfl._internal.renderer.opengl.utils.VertexArray(this.attributes,this.vertexArraySize,false);
	this.positions = new Float32Array(this.vertexArray.buffer);
	this.colors = new Uint32Array(this.vertexArray.buffer);
	this.indices = new Uint16Array(this.indexArraySize);
	var i = 0;
	var j = 0;
	while(i < this.indexArraySize) {
		this.indices[i] = j;
		this.indices[i + 1] = j + 1;
		this.indices[i + 2] = j + 2;
		this.indices[i + 3] = j;
		this.indices[i + 4] = j + 2;
		this.indices[i + 5] = j + 3;
		i += 6;
		j += 4;
	}
	this.currentState = new openfl._internal.renderer.opengl.utils._SpriteBatch.State();
	this.dirty = true;
	this.drawing = false;
	this.batchedSprites = 0;
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.SpriteBatch"] = openfl._internal.renderer.opengl.utils.SpriteBatch;
openfl._internal.renderer.opengl.utils.SpriteBatch.__name__ = ["openfl","_internal","renderer","opengl","utils","SpriteBatch"];
openfl._internal.renderer.opengl.utils.SpriteBatch.prototype = {
	gl: null
	,renderSession: null
	,states: null
	,currentState: null
	,vertexArray: null
	,positions: null
	,colors: null
	,indexBuffer: null
	,indices: null
	,dirty: null
	,drawing: null
	,clipRect: null
	,maxSprites: null
	,batchedSprites: null
	,vertexArraySize: null
	,indexArraySize: null
	,maxElementsPerVertex: null
	,elementsPerVertex: null
	,writtenVertexBytes: null
	,shader: null
	,attributes: null
	,enableColor: null
	,lastEnableColor: null
	,destroy: function() {
		this.vertexArray.destroy();
		this.vertexArray = null;
		this.indices = null;
		this.gl.deleteBuffer(this.indexBuffer);
		this.currentState.destroy();
		var _g = 0;
		var _g1 = this.states;
		while(_g < _g1.length) {
			var state = _g1[_g];
			++_g;
			state.destroy();
		}
		this.gl = null;
	}
	,begin: function(renderSession,clipRect) {
		this.renderSession = renderSession;
		this.shader = renderSession.shaderManager.defaultShader;
		this.drawing = true;
		this.start(clipRect);
	}
	,finish: function() {
		this.flush();
		this.clipRect = null;
		this.drawing = false;
	}
	,start: function(clipRect) {
		if(!this.drawing) throw "Call Spritebatch.begin() before start()";
		this.dirty = true;
		this.clipRect = clipRect;
	}
	,stop: function() {
		this.flush();
	}
	,renderBitmapData: function(bitmapData,smoothing,matrix,ct,alpha,blendMode) {
		if(alpha == null) alpha = 1;
		if(bitmapData == null) return;
		var texture = bitmapData.getTexture(this.gl);
		if(this.batchedSprites >= this.maxSprites) this.flush();
		var uvs = bitmapData.__uvData;
		if(uvs == null) return;
		var color = ((alpha * 255 | 0) & 255) << 24 | 16777215;
		this.enableColor = true;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
		var index = this.batchedSprites * 4 * this.elementsPerVertex;
		this.fillVertices(index,bitmapData.width,bitmapData.height,matrix,uvs,null,color);
		this.setState(this.batchedSprites,texture,smoothing,blendMode,ct,true);
		this.batchedSprites++;
	}
	,renderTiles: function(object,sheet,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		var texture = sheet.__bitmap.getTexture(this.gl);
		if(texture == null) return;
		var useScale = (flags & 1) > 0;
		var useRotation = (flags & 2) > 0;
		var useTransform = (flags & 16) > 0;
		var useRGB = (flags & 4) > 0;
		var useAlpha = (flags & 8) > 0;
		var useRect = (flags & 32) > 0;
		var useOrigin = (flags & 64) > 0;
		var blendMode;
		var _g = flags & 983040;
		switch(_g) {
		case 65536:
			blendMode = openfl.display.BlendMode.ADD;
			break;
		case 131072:
			blendMode = openfl.display.BlendMode.MULTIPLY;
			break;
		case 262144:
			blendMode = openfl.display.BlendMode.SCREEN;
			break;
		default:
			blendMode = openfl.display.BlendMode.NORMAL;
		}
		if(useTransform) {
			useScale = false;
			useRotation = false;
		}
		var scaleIndex = 0;
		var rotationIndex = 0;
		var rgbIndex = 0;
		var alphaIndex = 0;
		var transformIndex = 0;
		var numValues = 3;
		if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
		if(useScale) {
			scaleIndex = numValues;
			numValues++;
		}
		if(useRotation) {
			rotationIndex = numValues;
			numValues++;
		}
		if(useTransform) {
			transformIndex = numValues;
			numValues += 4;
		}
		if(useRGB) {
			rgbIndex = numValues;
			numValues += 3;
		}
		if(useAlpha) {
			alphaIndex = numValues;
			numValues++;
		}
		var totalCount = tileData.length;
		if(count >= 0 && totalCount > count) totalCount = count;
		var itemCount = totalCount / numValues | 0;
		var iIndex = 0;
		var tileID = -1;
		var rect = sheet.__rectTile;
		var tileUV = sheet.__rectUV;
		var center = sheet.__point;
		var x = 0.0;
		var y = 0.0;
		var alpha = 1.0;
		var tint = 16777215;
		var color = -1;
		var scale = 1.0;
		var rotation = 0.0;
		var cosTheta = 1.0;
		var sinTheta = 0.0;
		var a = 0.0;
		var b = 0.0;
		var c = 0.0;
		var d = 0.0;
		var tx = 0.0;
		var ty = 0.0;
		var ox = 0.0;
		var oy = 0.0;
		var matrix = new openfl.geom.Matrix();
		var oMatrix = object.__worldTransform;
		var uvs = new openfl.display.TextureUvs();
		var bIndex = 0;
		this.enableColor = true;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
		while(iIndex < totalCount) {
			if(this.batchedSprites >= this.maxSprites) this.flush();
			x = tileData[iIndex];
			y = tileData[iIndex + 1];
			if(useRect) {
				tileID = -1;
				rect.x = tileData[iIndex + 2];
				rect.y = tileData[iIndex + 3];
				rect.width = tileData[iIndex + 4];
				rect.height = tileData[iIndex + 5];
				if(useOrigin) {
					center.x = tileData[iIndex + 6];
					center.y = tileData[iIndex + 7];
				} else {
					center.x = 0;
					center.y = 0;
				}
				tileUV.setTo(rect.get_left() / sheet.__bitmap.width,rect.get_top() / sheet.__bitmap.height,rect.get_right() / sheet.__bitmap.width,rect.get_bottom() / sheet.__bitmap.height);
			} else {
				tileID = (tileData[iIndex + 2] == null?0:tileData[iIndex + 2]) | 0;
				rect = sheet.__tileRects[tileID];
				center = sheet.__centerPoints[tileID];
				tileUV = sheet.__tileUVs[tileID];
			}
			if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
				alpha = 1;
				tint = 16777215;
				a = 1;
				b = 0;
				c = 0;
				d = 1;
				tx = 0;
				ty = 0;
				scale = 1.0;
				rotation = 0.0;
				cosTheta = 1.0;
				sinTheta = 0.0;
				matrix.identity();
				if(useAlpha) alpha = tileData[iIndex + alphaIndex] * object.__worldAlpha; else alpha = object.__worldAlpha;
				if(useRGB) tint = (tileData[iIndex + rgbIndex] * 255 | 0) << 16 | (tileData[iIndex + rgbIndex + 1] * 255 | 0) << 8 | (tileData[iIndex + rgbIndex + 2] * 255 | 0);
				if(useScale) scale = tileData[iIndex + scaleIndex];
				if(useRotation) {
					rotation = tileData[iIndex + rotationIndex];
					cosTheta = Math.cos(rotation);
					sinTheta = Math.sin(rotation);
				}
				if(useTransform) {
					a = tileData[iIndex + transformIndex];
					b = tileData[iIndex + transformIndex + 1];
					c = tileData[iIndex + transformIndex + 2];
					d = tileData[iIndex + transformIndex + 3];
				} else {
					a = scale * cosTheta;
					b = scale * sinTheta;
					c = -b;
					d = a;
				}
				ox = center.x * a + center.y * c;
				oy = center.x * b + center.y * d;
				tx = x - ox;
				ty = y - oy;
				matrix.a = a * oMatrix.a + b * oMatrix.c;
				matrix.b = a * oMatrix.b + b * oMatrix.d;
				matrix.c = c * oMatrix.a + d * oMatrix.c;
				matrix.d = c * oMatrix.b + d * oMatrix.d;
				matrix.tx = tx * oMatrix.a + ty * oMatrix.c + oMatrix.tx;
				matrix.ty = tx * oMatrix.b + ty * oMatrix.d + oMatrix.ty;
				uvs.x0 = tileUV.x;
				uvs.y0 = tileUV.y;
				uvs.x1 = tileUV.width;
				uvs.y1 = tileUV.y;
				uvs.x2 = tileUV.width;
				uvs.y2 = tileUV.height;
				uvs.x3 = tileUV.x;
				uvs.y3 = tileUV.height;
				bIndex = this.batchedSprites * 4 * this.elementsPerVertex;
				color = ((alpha * 255 | 0) & 255) << 24 | (tint & 255) << 16 | (tint >> 8 & 255) << 8 | tint >> 16 & 255;
				this.fillVertices(bIndex,rect.width,rect.height,matrix,uvs,null,color);
				this.setState(this.batchedSprites,texture,smooth,blendMode,object.__worldColorTransform,false);
				this.batchedSprites++;
			}
			iIndex += numValues;
		}
	}
	,renderCachedGraphics: function(object) {
		var cachedTexture = object.__graphics.__cachedTexture;
		if(cachedTexture == null) return;
		if(this.batchedSprites >= this.maxSprites) this.flush();
		var alpha = object.__worldAlpha;
		var color = ((alpha * 255 | 0) & 255) << 24 | 16777215;
		var uvs = new openfl.display.TextureUvs();
		uvs.x0 = 0;
		uvs.y0 = 1;
		uvs.x1 = 1;
		uvs.y1 = 1;
		uvs.x2 = 1;
		uvs.y2 = 0;
		uvs.x3 = 0;
		uvs.y3 = 0;
		var worldTransform = object.__worldTransform.clone();
		worldTransform.__translateTransformed(new openfl.geom.Point(object.__graphics.__bounds.x,object.__graphics.__bounds.y));
		this.enableColor = color != -1;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
		var index = this.batchedSprites * 4 * this.elementsPerVertex;
		this.fillVertices(index,cachedTexture.width,cachedTexture.height,worldTransform,uvs,null,color);
		this.setState(this.batchedSprites,cachedTexture.texture,null,object.blendMode,object.__worldColorTransform);
		this.batchedSprites++;
	}
	,fillVertices: function(index,width,height,matrix,uvs,pivot,color) {
		if(color == null) color = -1;
		var w0;
		var w1;
		var h0;
		var h1;
		if(pivot == null) {
			w0 = width;
			w1 = 0;
			h0 = height;
			h1 = 0;
		} else {
			w0 = width * (1 - pivot.x);
			w1 = width * -pivot.x;
			h0 = height * (1 - pivot.y);
			h1 = height * -pivot.y;
		}
		var a = matrix.a;
		var b = matrix.b;
		var c = matrix.c;
		var d = matrix.d;
		var tx = matrix.tx;
		var ty = matrix.ty;
		var cOffsetIndex = 0;
		this.positions[index++] = a * w1 + c * h1 + tx;
		this.positions[index++] = d * h1 + b * w1 + ty;
		this.positions[index++] = uvs.x0;
		this.positions[index++] = uvs.y0;
		if(this.enableColor) this.colors[index++] = color;
		this.positions[index++] = a * w0 + c * h1 + tx;
		this.positions[index++] = d * h1 + b * w0 + ty;
		this.positions[index++] = uvs.x1;
		this.positions[index++] = uvs.y1;
		if(this.enableColor) this.colors[index++] = color;
		this.positions[index++] = a * w0 + c * h0 + tx;
		this.positions[index++] = d * h0 + b * w0 + ty;
		this.positions[index++] = uvs.x2;
		this.positions[index++] = uvs.y2;
		if(this.enableColor) this.colors[index++] = color;
		this.positions[index++] = a * w1 + c * h0 + tx;
		this.positions[index++] = d * h0 + b * w1 + ty;
		this.positions[index++] = uvs.x3;
		this.positions[index++] = uvs.y3;
		if(this.enableColor) this.colors[index++] = color;
		this.writtenVertexBytes = index;
	}
	,enableAttributes: function(color) {
		if(color == null) color = -1;
		this.enableColor = color != -1;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
	}
	,flush: function() {
		if(this.batchedSprites == 0) return;
		if(this.clipRect == null) this.gl.disable(this.gl.SCISSOR_TEST); else {
			this.gl.enable(this.gl.SCISSOR_TEST);
			this.gl.scissor(Math.floor(this.clipRect.x),Math.floor(this.clipRect.y),Math.floor(this.clipRect.width),Math.floor(this.clipRect.height));
		}
		if(this.dirty) {
			this.dirty = false;
			this.gl.activeTexture(this.gl.TEXTURE0);
			this.vertexArray.bind();
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		}
		if(this.writtenVertexBytes > this.vertexArraySize * 0.5) this.vertexArray.upload(this.positions); else {
			var view = this.positions.subarray(0,this.writtenVertexBytes);
			this.vertexArray.upload(view);
		}
		var nextState;
		var batchSize = 0;
		var start = 0;
		this.currentState.shader = this.renderSession.shaderManager.defaultShader;
		this.currentState.texture = null;
		this.currentState.textureSmooth = false;
		this.currentState.blendMode = this.renderSession.blendModeManager.currentBlendMode;
		this.currentState.colorTransform = null;
		this.currentState.skipColorTransformAlpha = false;
		var _g1 = 0;
		var _g = this.batchedSprites;
		while(_g1 < _g) {
			var i = _g1++;
			nextState = this.states[i];
			this.currentState.skipColorTransformAlpha = nextState.skipColorTransformAlpha;
			if(!nextState.equals(this.currentState)) {
				this.renderBatch(this.currentState,batchSize,start);
				start = i;
				batchSize = 0;
				this.currentState.shader = nextState.shader;
				this.currentState.texture = nextState.texture;
				this.currentState.textureSmooth = nextState.textureSmooth;
				this.currentState.blendMode = nextState.blendMode;
				this.currentState.colorTransform = nextState.colorTransform;
			}
			batchSize++;
		}
		this.renderBatch(this.currentState,batchSize,start);
		this.batchedSprites = 0;
		this.writtenVertexBytes = 0;
		if(this.clipRect != null) this.gl.disable(this.gl.SCISSOR_TEST);
	}
	,renderBatch: function(state,size,start) {
		if(size == 0 || state.texture == null) return;
		var shader;
		if(state.shader == null) shader = this.renderSession.shaderManager.defaultShader; else shader = state.shader;
		this.renderSession.shaderManager.setShader(shader);
		shader.bindVertexArray(this.vertexArray);
		var projection = this.renderSession.projection;
		this.gl.uniform2f(shader.getUniformLocation("uProjectionVector"),projection.x,projection.y);
		if(state.colorTransform != null) {
			var ct = state.colorTransform;
			this.gl.uniform4f(shader.getUniformLocation("uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,state.skipColorTransformAlpha?1:ct.alphaMultiplier);
			this.gl.uniform4f(shader.getUniformLocation("uColorOffset"),ct.redOffset / 255.,ct.greenOffset / 255.,ct.blueOffset / 255.,ct.alphaOffset / 255.);
		} else {
			this.gl.uniform4f(shader.getUniformLocation("uColorMultiplier"),1,1,1,1);
			this.gl.uniform4f(shader.getUniformLocation("uColorOffset"),0,0,0,0);
		}
		this.renderSession.blendModeManager.setBlendMode(state.blendMode);
		this.gl.bindTexture(this.gl.TEXTURE_2D,state.texture);
		if(state.textureSmooth) {
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR);
		} else {
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST);
		}
		this.gl.drawElements(this.gl.TRIANGLES,size * 6,this.gl.UNSIGNED_SHORT,start * 6 * 2);
		this.renderSession.drawCount++;
	}
	,setState: function(index,texture,smooth,blendMode,colorTransform,skipAlpha) {
		if(skipAlpha == null) skipAlpha = false;
		if(smooth == null) smooth = false;
		var state = this.states[index];
		if(state == null) state = this.states[index] = new openfl._internal.renderer.opengl.utils._SpriteBatch.State();
		state.texture = texture;
		state.textureSmooth = smooth;
		state.blendMode = blendMode;
		state.colorTransform = colorTransform;
		state.skipColorTransformAlpha = skipAlpha;
	}
	,setContext: function(gl) {
		this.gl = gl;
		this.vertexArray.setContext(gl,this.positions);
		this.indexBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,this.indices,gl.STATIC_DRAW);
	}
	,getElementsPerVertex: function() {
		var r = 0;
		var _g = 0;
		var _g1 = this.attributes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.enabled) r += Math.floor(a.components * a.getElementsBytes() / 4);
		}
		return r;
	}
	,__class__: openfl._internal.renderer.opengl.utils.SpriteBatch
};
openfl._internal.renderer.opengl.utils._SpriteBatch = {};
openfl._internal.renderer.opengl.utils._SpriteBatch.State = function() {
	this.skipColorTransformAlpha = false;
	this.textureSmooth = true;
};
$hxClasses["openfl._internal.renderer.opengl.utils._SpriteBatch.State"] = openfl._internal.renderer.opengl.utils._SpriteBatch.State;
openfl._internal.renderer.opengl.utils._SpriteBatch.State.__name__ = ["openfl","_internal","renderer","opengl","utils","_SpriteBatch","State"];
openfl._internal.renderer.opengl.utils._SpriteBatch.State.prototype = {
	texture: null
	,textureSmooth: null
	,blendMode: null
	,colorTransform: null
	,skipColorTransformAlpha: null
	,shader: null
	,equals: function(other) {
		return (this.shader == null || other.shader == null || this.shader.ID == other.shader.ID) && this.texture == other.texture && this.textureSmooth == other.textureSmooth && this.blendMode == other.blendMode && (this.colorTransform != null && this.colorTransform.__equals(other.colorTransform,this.skipColorTransformAlpha));
	}
	,destroy: function() {
		this.texture = null;
		this.colorTransform = null;
	}
	,__class__: openfl._internal.renderer.opengl.utils._SpriteBatch.State
};
openfl._internal.renderer.opengl.utils.StencilManager = function(gl) {
	this.stencilMask = 0;
	this.stencilStack = [];
	this.setContext(gl);
	this.reverse = true;
	this.count = 0;
};
$hxClasses["openfl._internal.renderer.opengl.utils.StencilManager"] = openfl._internal.renderer.opengl.utils.StencilManager;
openfl._internal.renderer.opengl.utils.StencilManager.__name__ = ["openfl","_internal","renderer","opengl","utils","StencilManager"];
openfl._internal.renderer.opengl.utils.StencilManager.prototype = {
	count: null
	,gl: null
	,reverse: null
	,stencilStack: null
	,stencilMask: null
	,prepareGraphics: function(fill,renderSession,projection,translationMatrix) {
		var offset = renderSession.offset;
		var shader = renderSession.shaderManager.fillShader;
		renderSession.shaderManager.setShader(shader);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("uTranslationMatrix"),false,translationMatrix);
		this.gl.uniform2f(shader.getUniformLocation("uProjectionVector"),projection.x,-projection.y);
		this.gl.uniform2f(shader.getUniformLocation("uOffsetVector"),-offset.x,-offset.y);
		fill.vertexArray.bind();
		shader.bindVertexArray(fill.vertexArray);
		this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,fill.indexBuffer);
	}
	,pushBucket: function(bucket,renderSession,projection,translationMatrix,isMask) {
		if(isMask == null) isMask = false;
		if(!isMask) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
			this.gl.stencilMask(255);
			this.gl.colorMask(false,false,false,false);
			this.gl.stencilFunc(this.gl.NEVER,1,255);
			this.gl.stencilOp(this.gl.INVERT,this.gl.KEEP,this.gl.KEEP);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
		}
		var _g = 0;
		var _g1 = bucket.fills;
		while(_g < _g1.length) {
			var fill = _g1[_g];
			++_g;
			if(fill.available) continue;
			this.prepareGraphics(fill,renderSession,projection,translationMatrix);
			this.gl.drawElements(fill.drawMode,fill.glIndices.length,this.gl.UNSIGNED_SHORT,0);
		}
		if(!isMask) {
			this.gl.colorMask(true,true,true,renderSession.renderer.transparent);
			this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
			this.gl.stencilFunc(this.gl.EQUAL,255,255);
		}
	}
	,popBucket: function(object,bucket,renderSession) {
		this.gl.disable(this.gl.STENCIL_TEST);
	}
	,pushMask: function(object,renderSession) {
		var maskGraphics = object.__maskGraphics;
		if(maskGraphics == null || maskGraphics.__commands.length <= 0) return;
		if(this.stencilMask == 0) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
		}
		this.stencilMask++;
		if(maskGraphics.__dirty) openfl._internal.renderer.opengl.utils.GraphicsRenderer.updateGraphics(object,maskGraphics,renderSession.gl);
		var func;
		if(this.stencilMask == 1) func = this.gl.NEVER; else func = this.gl.EQUAL;
		var ref = this.stencilMask;
		var mask = 255 - this.stencilMask;
		this.gl.stencilMask(255);
		this.gl.colorMask(false,false,false,false);
		this.gl.stencilFunc(func,ref,mask);
		this.gl.stencilOp(this.gl.REPLACE,this.gl.KEEP,this.gl.KEEP);
		var glStack = maskGraphics.__glStack[openfl._internal.renderer.opengl.GLRenderer.glContextId];
		var bucket;
		var translationMatrix = object.__worldTransform;
		var _g1 = 0;
		var _g = glStack.buckets.length;
		while(_g1 < _g) {
			var i = _g1++;
			bucket = glStack.buckets[i];
			if(bucket.overrideMatrix != null) translationMatrix = bucket.overrideMatrix; else translationMatrix = object.__worldTransform;
			var _g2 = bucket.mode;
			switch(_g2[1]) {
			case 1:case 2:
				this.pushBucket(bucket,renderSession,renderSession.projection,translationMatrix.toArray(true),true);
				break;
			default:
			}
		}
		this.gl.colorMask(true,true,true,renderSession.renderer.transparent);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.gl.stencilFunc(this.gl.EQUAL,this.stencilMask,255);
	}
	,popMask: function(object,renderSession) {
		var maskGraphics = object.__maskGraphics;
		if(maskGraphics == null || maskGraphics.__commands.length <= 0) return;
		this.stencilMask--;
		if(this.stencilMask <= 0) {
			this.gl.disable(this.gl.STENCIL_TEST);
			this.stencilMask = 0;
		}
	}
	,bindGraphics: function(object,glData,renderSession) {
	}
	,destroy: function() {
		this.stencilStack = null;
		this.gl = null;
	}
	,popStencil: function(object,glData,renderSession) {
		this.stencilStack.pop();
		this.count--;
		if(this.stencilStack.length == 0) this.gl.disable(this.gl.STENCIL_TEST); else {
			var level = this.count;
			this.bindGraphics(object,glData,renderSession);
			this.gl.colorMask(false,false,false,false);
			if(glData.mode == 1) {
				this.reverse = !this.reverse;
				if(this.reverse) {
					this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
				} else {
					this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
				}
				this.gl.drawElements(this.gl.TRIANGLE_FAN,4,this.gl.UNSIGNED_SHORT,(glData.indices.length - 4) * 2);
				this.gl.stencilFunc(this.gl.ALWAYS,0,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INVERT);
				this.gl.drawElements(this.gl.TRIANGLE_FAN,glData.indices.length - 4,this.gl.UNSIGNED_SHORT,0);
				if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - level,255); else this.gl.stencilFunc(this.gl.EQUAL,level,255);
			} else {
				if(!this.reverse) {
					this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
				} else {
					this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
				}
				this.gl.drawElements(this.gl.TRIANGLE_STRIP,glData.indices.length,this.gl.UNSIGNED_SHORT,0);
				if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - level,255); else this.gl.stencilFunc(this.gl.EQUAL,level,255);
			}
			this.gl.colorMask(true,true,true,true);
			this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		}
	}
	,pushStencil: function(object,glData,renderSession) {
		this.bindGraphics(object,glData,renderSession);
		if(this.stencilStack.length == 0) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
			this.reverse = true;
			this.count = 0;
		}
		this.stencilStack.push(glData);
		var level = this.count;
		this.gl.colorMask(false,false,false,false);
		this.gl.stencilFunc(this.gl.ALWAYS,0,255);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INVERT);
		if(glData.mode == 1) {
			this.gl.drawElements(this.gl.TRIANGLE_FAN,glData.indices.length - 4,this.gl.UNSIGNED_SHORT,0);
			if(this.reverse) {
				this.gl.stencilFunc(this.gl.EQUAL,255 - level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
			} else {
				this.gl.stencilFunc(this.gl.EQUAL,level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
			}
			this.gl.drawElements(this.gl.TRIANGLE_FAN,4,this.gl.UNSIGNED_SHORT,(glData.indices.length - 4) * 2);
			if(this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255); else this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
			this.reverse = !this.reverse;
		} else {
			if(!this.reverse) {
				this.gl.stencilFunc(this.gl.EQUAL,255 - level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
			} else {
				this.gl.stencilFunc(this.gl.EQUAL,level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
			}
			this.gl.drawElements(this.gl.TRIANGLE_STRIP,glData.indices.length,this.gl.UNSIGNED_SHORT,0);
			if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255); else this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
		}
		this.gl.colorMask(true,true,true,true);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.count++;
	}
	,setContext: function(gl) {
		this.gl = gl;
	}
	,__class__: openfl._internal.renderer.opengl.utils.StencilManager
};
openfl._internal.renderer.opengl.utils.VertexArray = function(attributes,size,isStatic) {
	if(isStatic == null) isStatic = false;
	if(size == null) size = 0;
	this.isStatic = false;
	this.size = 0;
	this.attributes = [];
	this.size = size;
	this.attributes = attributes;
	if(size > 0) this.buffer = new ArrayBuffer(size);
	this.isStatic = isStatic;
};
$hxClasses["openfl._internal.renderer.opengl.utils.VertexArray"] = openfl._internal.renderer.opengl.utils.VertexArray;
openfl._internal.renderer.opengl.utils.VertexArray.__name__ = ["openfl","_internal","renderer","opengl","utils","VertexArray"];
openfl._internal.renderer.opengl.utils.VertexArray.prototype = {
	gl: null
	,glBuffer: null
	,attributes: null
	,buffer: null
	,size: null
	,isStatic: null
	,bind: function() {
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.glBuffer);
	}
	,unbind: function() {
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null);
	}
	,upload: function(view) {
		this.gl.bufferSubData(this.gl.ARRAY_BUFFER,0,view);
	}
	,destroy: function() {
		this.gl.deleteBuffer(this.glBuffer);
		this.buffer = null;
	}
	,setContext: function(gl,view) {
		this.gl = gl;
		this.glBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER,this.glBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,view,this.isStatic?gl.STATIC_DRAW:gl.DYNAMIC_DRAW);
	}
	,get_stride: function() {
		var s = 0;
		var _g = 0;
		var _g1 = this.attributes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.enabled) s += Math.floor(a.components * a.getElementsBytes() / 4) * 4;
		}
		return s;
	}
	,__class__: openfl._internal.renderer.opengl.utils.VertexArray
	,__properties__: {get_stride:"get_stride"}
};
openfl._internal.renderer.opengl.utils._VertexAttribute = {};
openfl._internal.renderer.opengl.utils._VertexAttribute.ElementType_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils._VertexAttribute.ElementType_Impl_"] = openfl._internal.renderer.opengl.utils._VertexAttribute.ElementType_Impl_;
openfl._internal.renderer.opengl.utils._VertexAttribute.ElementType_Impl_.__name__ = ["openfl","_internal","renderer","opengl","utils","_VertexAttribute","ElementType_Impl_"];
openfl.display.Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) smoothing = false;
	openfl.display.DisplayObjectContainer.call(this);
	this.bitmapData = bitmapData;
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) this.pixelSnapping = openfl.display.PixelSnapping.AUTO;
};
$hxClasses["openfl.display.Bitmap"] = openfl.display.Bitmap;
openfl.display.Bitmap.__name__ = ["openfl","display","Bitmap"];
openfl.display.Bitmap.__super__ = openfl.display.DisplayObjectContainer;
openfl.display.Bitmap.prototype = $extend(openfl.display.DisplayObjectContainer.prototype,{
	bitmapData: null
	,pixelSnapping: null
	,smoothing: null
	,__image: null
	,__getBounds: function(rect,matrix) {
		if(this.bitmapData != null) {
			var bounds = new openfl.geom.Rectangle(0,0,this.bitmapData.width,this.bitmapData.height);
			bounds = bounds.transform(this.__worldTransform);
			rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || this.bitmapData == null) return false;
		var point = this.globalToLocal(new openfl.geom.Point(x,y));
		if(point.x > 0 && point.y > 0 && point.x <= this.bitmapData.width && point.y <= this.bitmapData.height) {
			if(stack != null && !interactiveOnly) stack.push(this);
			return true;
		}
		return false;
	}
	,__renderCanvas: function(renderSession) {
		openfl._internal.renderer.canvas.CanvasBitmap.render(this,renderSession);
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable && this.bitmapData != null && this.bitmapData.__isValid) {
			if(this.bitmapData.__image.buffer.__srcImage != null) openfl._internal.renderer.dom.DOMBitmap.renderImage(this,renderSession); else openfl._internal.renderer.dom.DOMBitmap.renderCanvas(this,renderSession);
		} else {
			if(this.__image != null) {
				renderSession.element.removeChild(this.__image);
				this.__image = null;
				this.__style = null;
			}
			if(this.__canvas != null) {
				renderSession.element.removeChild(this.__canvas);
				this.__canvas = null;
				this.__style = null;
			}
		}
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.bitmapData == null || !this.bitmapData.__isValid) null; else renderSession.spriteBatch.renderBitmapData(this.bitmapData,this.smoothing,this.__worldTransform,this.__worldColorTransform,this.__worldAlpha,this.blendMode);
	}
	,__renderMask: function(renderSession) {
		renderSession.context.rect(0,0,this.get_width(),this.get_height());
	}
	,__updateMask: function(maskGraphics) {
		maskGraphics.__commands.push(openfl.display.DrawCommand.OverrideMatrix(this.__worldTransform));
		maskGraphics.beginFill(0);
		maskGraphics.drawRect(0,0,this.bitmapData.width,this.bitmapData.height);
		if(maskGraphics.__bounds == null) maskGraphics.__bounds = new openfl.geom.Rectangle();
		this.__getBounds(maskGraphics.__bounds,openfl.geom.Matrix.__identity);
		openfl.display.DisplayObjectContainer.prototype.__updateMask.call(this,maskGraphics);
	}
	,get_height: function() {
		if(this.bitmapData != null) return this.bitmapData.height * this.get_scaleY();
		return 0;
	}
	,set_height: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.height) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl.display.DisplayObject.__worldTransformDirty++;
				}
				this.set_scaleY(value / this.bitmapData.height);
			}
			return value;
		}
		return 0;
	}
	,get_width: function() {
		if(this.bitmapData != null) return this.bitmapData.width * this.get_scaleX();
		return 0;
	}
	,set_width: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.width) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl.display.DisplayObject.__worldTransformDirty++;
				}
				this.set_scaleX(value / this.bitmapData.width);
			}
			return value;
		}
		return 0;
	}
	,__class__: openfl.display.Bitmap
});
openfl.display.BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) fillColor = -1;
	if(transparent == null) transparent = true;
	this.transparent = transparent;
	if(width == null) width = 0; else width = width;
	if(height == null) height = 0; else height = height;
	if(width < 0) width = 0; else width = width;
	if(height < 0) height = 0; else height = height;
	this.width = width;
	this.height = height;
	this.rect = new openfl.geom.Rectangle(0,0,width,height);
	if(width > 0 && height > 0) {
		if(transparent) {
			if((function($this) {
				var $r;
				var $int = fillColor & -16777216;
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}(this)) == 0) fillColor = 0;
		} else fillColor = -16777216 | fillColor & 16777215;
		fillColor = fillColor << 8 | fillColor >> 24 & 255;
		this.__image = new lime.graphics.Image(null,0,0,width,height,fillColor);
		this.__image.set_transparent(transparent);
		this.__isValid = true;
	}
	this.__createUVs();
};
$hxClasses["openfl.display.BitmapData"] = openfl.display.BitmapData;
openfl.display.BitmapData.__name__ = ["openfl","display","BitmapData"];
openfl.display.BitmapData.__interfaces__ = [openfl.display.IBitmapDrawable];
openfl.display.BitmapData.fromBase64 = function(base64,type,onload) {
	var bitmapData = new openfl.display.BitmapData(0,0,true);
	bitmapData.__fromBase64(base64,type,onload);
	return bitmapData;
};
openfl.display.BitmapData.fromBytes = function(bytes,rawAlpha,onload) {
	var bitmapData = new openfl.display.BitmapData(0,0,true);
	bitmapData.__fromBytes(bytes,rawAlpha,onload);
	return bitmapData;
};
openfl.display.BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) transparent = true;
	var bitmapData = new openfl.display.BitmapData(0,0,transparent);
	bitmapData.__fromImage(lime.graphics.Image.fromCanvas(canvas));
	bitmapData.__image.set_transparent(transparent);
	return bitmapData;
};
openfl.display.BitmapData.fromFile = function(path,onload,onerror) {
	var bitmapData = new openfl.display.BitmapData(0,0,true);
	bitmapData.__fromFile(path,onload,onerror);
	return bitmapData;
};
openfl.display.BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) transparent = true;
	var bitmapData = new openfl.display.BitmapData(0,0,transparent);
	bitmapData.__fromImage(image);
	bitmapData.__image.set_transparent(transparent);
	return bitmapData;
};
openfl.display.BitmapData.__flipPixel = function(pixel) {
	return (pixel & 255) << 24 | (pixel >> 8 & 255) << 16 | (pixel >> 16 & 255) << 8 | pixel >> 24 & 255;
};
openfl.display.BitmapData.__ucompare = function(n1,n2) {
	var tmp1;
	var tmp2;
	tmp1 = n1 >> 24 & 255;
	tmp2 = n2 >> 24 & 255;
	if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
		tmp1 = n1 >> 16 & 255;
		tmp2 = n2 >> 16 & 255;
		if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
			tmp1 = n1 >> 8 & 255;
			tmp2 = n2 >> 8 & 255;
			if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
				tmp1 = n1 & 255;
				tmp2 = n2 & 255;
				if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else return 0;
			}
		}
	}
};
openfl.display.BitmapData.prototype = {
	height: null
	,rect: null
	,transparent: null
	,width: null
	,blendMode: null
	,__worldTransform: null
	,__worldColorTransform: null
	,__buffer: null
	,__image: null
	,__isValid: null
	,__texture: null
	,__textureImage: null
	,__framebuffer: null
	,__uvData: null
	,__spritebatch: null
	,applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(!this.__isValid || sourceBitmapData == null || !sourceBitmapData.__isValid) return;
		lime.graphics.utils.ImageCanvasUtil.convertToCanvas(this.__image);
		lime.graphics.utils.ImageCanvasUtil.createImageData(this.__image);
		lime.graphics.utils.ImageCanvasUtil.convertToCanvas(sourceBitmapData.__image);
		lime.graphics.utils.ImageCanvasUtil.createImageData(sourceBitmapData.__image);
		filter.__applyFilter(this.__image.buffer.__srcImageData,sourceBitmapData.__image.buffer.__srcImageData,sourceRect,destPoint);
		this.__image.dirty = true;
	}
	,clone: function() {
		if(!this.__isValid) return new openfl.display.BitmapData(this.width,this.height,this.transparent); else return openfl.display.BitmapData.fromImage(this.__image.clone(),this.transparent);
	}
	,colorTransform: function(rect,colorTransform) {
		if(!this.__isValid) return;
		this.__image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		if(!this.__isValid) return;
		var sourceChannel1;
		switch(sourceChannel) {
		case 1:
			sourceChannel1 = lime.graphics.ImageChannel.RED;
			break;
		case 2:
			sourceChannel1 = lime.graphics.ImageChannel.GREEN;
			break;
		case 4:
			sourceChannel1 = lime.graphics.ImageChannel.BLUE;
			break;
		case 8:
			sourceChannel1 = lime.graphics.ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		var destChannel1;
		switch(destChannel) {
		case 1:
			destChannel1 = lime.graphics.ImageChannel.RED;
			break;
		case 2:
			destChannel1 = lime.graphics.ImageChannel.GREEN;
			break;
		case 4:
			destChannel1 = lime.graphics.ImageChannel.BLUE;
			break;
		case 8:
			destChannel1 = lime.graphics.ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		this.__image.copyChannel(sourceBitmapData.__image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),sourceChannel1,destChannel1);
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(!this.__isValid || sourceBitmapData == null) return;
		this.__image.copyPixels(sourceBitmapData.__image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null?alphaBitmapData.__image:null,alphaPoint != null?alphaPoint.__toLimeVector2():null,mergeAlpha);
	}
	,dispose: function() {
		this.__image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) smoothing = false;
		if(!this.__isValid) return;
		var _g = this.__image.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.convertToCanvas(this.__image);
			lime.graphics.utils.ImageCanvasUtil.sync(this.__image);
			var buffer = this.__image.buffer;
			var renderSession = new openfl._internal.renderer.RenderSession();
			renderSession.context = buffer.__srcContext;
			renderSession.roundPixels = true;
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = false;
				buffer.__srcContext.webkitImageSmoothingEnabled = false;
				buffer.__srcContext.imageSmoothingEnabled = false;
			}
			var matrixCache = source.__worldTransform;
			if(matrix != null) source.__worldTransform = matrix; else source.__worldTransform = new openfl.geom.Matrix();
			source.__updateChildren(false);
			source.__renderCanvas(renderSession);
			source.__worldTransform = matrixCache;
			source.__updateChildren(true);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = true;
				buffer.__srcContext.webkitImageSmoothingEnabled = true;
				buffer.__srcContext.imageSmoothingEnabled = true;
			}
			buffer.__srcContext.setTransform(1,0,0,1,0,0);
			break;
		case 1:
			var renderer = openfl.Lib.current.stage.__renderer;
			if(renderer == null) return;
			var renderSession1 = renderer.renderSession;
			var gl = renderSession1.gl;
			if(gl == null) return;
			var mainSpritebatch = renderSession1.spriteBatch;
			var mainProjection = renderSession1.projection;
			var renderTransparent = renderSession1.renderer.transparent;
			if(clipRect == null) clipRect = new openfl.geom.Rectangle(0,0,this.width,this.height);
			var tmpRect = clipRect.clone();
			tmpRect.y = this.height - tmpRect.get_bottom();
			var drawSelf = false;
			if(this.__spritebatch == null) {
				this.__spritebatch = new openfl._internal.renderer.opengl.utils.SpriteBatch(gl);
				drawSelf = true;
			}
			renderSession1.spriteBatch = this.__spritebatch;
			renderSession1.projection = new openfl.geom.Point(this.width / 2,-(this.height / 2));
			renderSession1.renderer.transparent = this.transparent;
			if(this.__framebuffer == null) this.__framebuffer = new openfl._internal.renderer.opengl.utils.FilterTexture(gl,this.width,this.height,smoothing);
			this.__framebuffer.resize(this.width,this.height);
			gl.bindFramebuffer(gl.FRAMEBUFFER,this.__framebuffer.frameBuffer);
			gl.viewport(0,0,this.width,this.height);
			this.__spritebatch.begin(renderSession1,drawSelf?null:tmpRect);
			gl.colorMask(true,true,true,true);
			renderSession1.blendModeManager.setBlendMode(openfl.display.BlendMode.NORMAL);
			if(drawSelf) {
				this.__framebuffer.clear();
				this.__renderGL(renderSession1);
				this.__spritebatch.stop();
				this.__spritebatch.start(tmpRect);
			}
			var ctCache = source.__worldColorTransform;
			var matrixCache1 = source.__worldTransform;
			var blendModeCache = source.blendMode;
			if(matrix == null) matrix = new openfl.geom.Matrix();
			this.invertMatrix(matrix);
			source.__worldTransform = matrix;
			if(colorTransform != null) source.__worldColorTransform = colorTransform; else source.__worldColorTransform = new openfl.geom.ColorTransform();
			source.blendMode = blendMode;
			source.__updateChildren(false);
			source.__renderGL(renderSession1);
			source.__worldColorTransform = ctCache;
			source.__worldTransform = matrixCache1;
			source.blendMode = blendModeCache;
			source.__updateChildren(true);
			this.__spritebatch.finish();
			gl.readPixels(0,0,this.width,this.height,gl.RGBA,gl.UNSIGNED_BYTE,this.__image.buffer.data);
			gl.bindFramebuffer(gl.FRAMEBUFFER,null);
			gl.viewport(0,0,renderSession1.renderer.width,renderSession1.renderer.height);
			renderSession1.spriteBatch = mainSpritebatch;
			renderSession1.projection = mainProjection;
			renderSession1.renderer.transparent = renderTransparent;
			gl.colorMask(true,true,true,renderSession1.renderer.transparent);
			this.__texture = this.__framebuffer.texture;
			this.__image.dirty = false;
			this.__createUVs();
			this.invertMatrix(matrix);
			break;
		default:
		}
	}
	,invertMatrix: function(matrix) {
		var tx = matrix.tx;
		var ty = matrix.ty;
		matrix.tx = 0;
		matrix.ty = 0;
		matrix.scale(1,-1);
		matrix.translate(0,this.height);
		matrix.tx += tx;
		matrix.ty -= ty;
	}
	,encode: function(rect,compressor,byteArray) {
		if(!this.__isValid || rect == null) return byteArray = null;
		if(js.Boot.__instanceof(compressor,openfl.display.PNGEncoderOptions)) return byteArray = this.__image.encode("png"); else if(js.Boot.__instanceof(compressor,openfl.display.JPEGEncoderOptions)) return byteArray = this.__image.encode("jpg",(js.Boot.__cast(compressor , openfl.display.JPEGEncoderOptions)).quality);
		return byteArray = null;
	}
	,fillRect: function(rect,color) {
		if(!this.__isValid || rect == null) return;
		this.__image.fillRect(rect.__toLimeRectangle(),color,lime.graphics.PixelFormat.ARGB);
	}
	,floodFill: function(x,y,color) {
		if(!this.__isValid) return;
		this.__image.floodFill(x,y,color,lime.graphics.PixelFormat.ARGB);
	}
	,generateFilterRect: function(sourceRect,filter) {
		return sourceRect.clone();
	}
	,getBuffer: function(gl) {
		if(this.__buffer == null) {
			var data = [this.width,this.height,0,1,1,0,this.height,0,0,1,this.width,0,0,1,0,0,0,0,0,0];
			this.__buffer = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(data),gl.STATIC_DRAW);
			gl.bindBuffer(gl.ARRAY_BUFFER,null);
		}
		return this.__buffer;
	}
	,getColorBoundsRect: function(mask,color,findColor) {
		if(findColor == null) findColor = true;
		if(!this.__isValid) return new openfl.geom.Rectangle(0,0,this.width,this.height);
		return this.__image.get_rect().__toFlashRectangle();
	}
	,getPixel: function(x,y) {
		if(!this.__isValid) return 0;
		return this.__image.getPixel(x,y,lime.graphics.PixelFormat.ARGB);
	}
	,getPixel32: function(x,y) {
		if(!this.__isValid) return 0;
		return this.__image.getPixel32(x,y,lime.graphics.PixelFormat.ARGB);
	}
	,getPixels: function(rect) {
		if(!this.__isValid) return null;
		if(rect == null) rect = this.rect;
		return this.__image.getPixels(rect.__toLimeRectangle(),lime.graphics.PixelFormat.ARGB);
	}
	,getTexture: function(gl) {
		if(!this.__isValid) return null;
		if(this.__texture == null) {
			this.__texture = gl.createTexture();
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);
			this.__image.dirty = true;
		}
		if(this.__image.dirty) {
			var format;
			if(this.__image.buffer.bitsPerPixel == 1) format = gl.ALPHA; else format = gl.RGBA;
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			var textureImage = this.__image.clone();
			textureImage.set_premultiplied(true);
			gl.texImage2D(gl.TEXTURE_2D,0,format,this.width,this.height,0,format,gl.UNSIGNED_BYTE,textureImage.get_data());
			gl.bindTexture(gl.TEXTURE_2D,null);
			this.__image.dirty = false;
		}
		return this.__texture;
	}
	,getVector: function(rect) {
		var pixels = this.getPixels(rect);
		var length = pixels.length / 4 | 0;
		var result;
		var this1;
		this1 = new openfl.VectorData();
		var this2;
		this2 = new Array(length);
		this1.data = this2;
		this1.length = length;
		this1.fixed = true;
		result = this1;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var value = pixels.readUnsignedInt();
			if(!result.fixed) {
				if(i >= result.length) result.length = i + 1;
				if(result.data.length < result.length) {
					var data;
					var this3;
					this3 = new Array(result.data.length + 10);
					data = this3;
					haxe.ds._Vector.Vector_Impl_.blit(result.data,0,data,0,result.data.length);
					result.data = data;
				}
			}
			result.data[i] = value;
		}
		return result;
	}
	,histogram: function(hRect) {
		var rect;
		if(hRect != null) rect = hRect; else rect = new openfl.geom.Rectangle(0,0,this.width,this.height);
		var pixels = this.getPixels(rect);
		var result;
		var _g = [];
		var _g1 = 0;
		while(_g1 < 4) {
			var i = _g1++;
			_g.push((function($this) {
				var $r;
				var _g2 = [];
				{
					var _g3 = 0;
					while(_g3 < 256) {
						var j = _g3++;
						_g2.push(0);
					}
				}
				$r = _g2;
				return $r;
			}(this)));
		}
		result = _g;
		var _g21 = 0;
		var _g11 = pixels.length;
		while(_g21 < _g11) {
			var i1 = _g21++;
			++result[i1 % 4][pixels.readUnsignedByte()];
		}
		return result;
	}
	,hitTest: function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
		if(secondAlphaThreshold == null) secondAlphaThreshold = 1;
		if(!this.__isValid) return false;
		openfl.Lib.notImplemented("BitmapData.hitTest");
		return false;
	}
	,lock: function() {
	}
	,merge: function(sourceBitmapData,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(!this.__isValid || sourceBitmapData == null || !sourceBitmapData.__isValid || sourceRect == null || destPoint == null) return;
		this.__image.merge(sourceBitmapData.__image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) grayScale = false;
		if(channelOptions == null) channelOptions = 7;
		if(high == null) high = 255;
		if(low == null) low = 0;
		if(!this.__isValid) return;
		openfl.Lib.notImplemented("BitmapData.noise");
	}
	,paletteMap: function(sourceBitmapData,sourceRect,destPoint,redArray,greenArray,blueArray,alphaArray) {
		var sw = sourceRect.width | 0;
		var sh = sourceRect.height | 0;
		var pixels = this.getPixels(sourceRect);
		pixels.position = 0;
		var pixelValue;
		var r;
		var g;
		var b;
		var a;
		var color;
		var c1;
		var c2;
		var c3;
		var c4;
		var _g1 = 0;
		var _g = sh * sw;
		while(_g1 < _g) {
			var i = _g1++;
			pixelValue = pixels.readUnsignedInt();
			if(alphaArray == null) c1 = pixelValue & -16777216; else c1 = alphaArray[pixelValue >> 24 & 255];
			if(redArray == null) c2 = pixelValue & 16711680; else c2 = redArray[pixelValue >> 16 & 255];
			if(greenArray == null) c3 = pixelValue & 65280; else c3 = greenArray[pixelValue >> 8 & 255];
			if(blueArray == null) c4 = pixelValue & 255; else c4 = blueArray[pixelValue & 255];
			a = (c1 >> 24 & 255) + (c2 >> 24 & 255) + (c3 >> 24 & 255) + (c4 >> 24 & 255);
			if(a > 255) a == 255;
			r = (c1 >> 16 & 255) + (c2 >> 16 & 255) + (c3 >> 16 & 255) + (c4 >> 16 & 255);
			if(r > 255) r == 255;
			g = (c1 >> 8 & 255) + (c2 >> 8 & 255) + (c3 >> 8 & 255) + (c4 >> 8 & 255);
			if(g > 255) g == 255;
			b = (c1 & 255) + (c2 & 255) + (c3 & 255) + (c4 & 255);
			if(b > 255) b == 255;
			color = a << 24 | r << 16 | g << 8 | b;
			pixels.position = i * 4;
			pixels.writeUnsignedInt(color);
		}
		pixels.position = 0;
		var destRect = new openfl.geom.Rectangle(destPoint.x,destPoint.y,sw,sh);
		this.setPixels(destRect,pixels);
	}
	,perlinNoise: function(baseX,baseY,numOctaves,randomSeed,stitch,fractalNoise,channelOptions,grayScale,offsets) {
		if(grayScale == null) grayScale = false;
		if(channelOptions == null) channelOptions = 7;
		openfl.Lib.notImplemented("BitmapData.perlinNoise");
	}
	,scroll: function(x,y) {
		openfl.Lib.notImplemented("BitmapData.scroll");
	}
	,setPixel: function(x,y,color) {
		if(!this.__isValid) return;
		this.__image.setPixel(x,y,color,lime.graphics.PixelFormat.ARGB);
	}
	,setPixel32: function(x,y,color) {
		if(!this.__isValid) return;
		this.__image.setPixel32(x,y,color,lime.graphics.PixelFormat.ARGB);
	}
	,setPixels: function(rect,byteArray) {
		if(!this.__isValid || rect == null) return;
		this.__image.setPixels(rect.__toLimeRectangle(),byteArray,lime.graphics.PixelFormat.ARGB);
	}
	,setVector: function(rect,inputVector) {
		var byteArray = new lime.utils.ByteArray();
		byteArray.set_length(inputVector.length * 4);
		var _g = 0;
		while(_g < inputVector.length) {
			var color = inputVector.data[_g];
			++_g;
			byteArray.writeUnsignedInt(color);
		}
		byteArray.position = 0;
		this.setPixels(rect,byteArray);
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) copySource = false;
		if(mask == null) mask = -1;
		if(color == null) color = 0;
		if(sourceBitmapData == this && sourceRect.equals(this.rect) && destPoint.x == 0 && destPoint.y == 0) {
			var hits = 0;
			threshold = (threshold & 255) << 24 | (threshold >> 8 & 255) << 16 | (threshold >> 16 & 255) << 8 | threshold >> 24 & 255;
			color = (color & 255) << 24 | (color >> 8 & 255) << 16 | (color >> 16 & 255) << 8 | color >> 24 & 255;
			var memory = new lime.utils.ByteArray();
			memory.set_length(this.width * this.height * 4);
			memory = this.getPixels(this.rect);
			memory.position = 0;
			openfl.Memory.select(memory);
			var thresholdMask = threshold & mask;
			var width_yy;
			var position;
			var pixelMask;
			var pixelValue;
			var i;
			var test;
			var _g1 = 0;
			var _g = this.height;
			while(_g1 < _g) {
				var yy = _g1++;
				width_yy = this.width * yy;
				var _g3 = 0;
				var _g2 = this.width;
				while(_g3 < _g2) {
					var xx = _g3++;
					position = (width_yy + xx) * 4;
					pixelValue = openfl.Memory._setPositionTemporarily(position,function() {
						return openfl.Memory.gcRef.readInt();
					});
					pixelMask = pixelValue & mask;
					i = openfl.display.BitmapData.__ucompare(pixelMask,thresholdMask);
					test = false;
					if(operation == "==") test = i == 0; else if(operation == "<") test = i == -1; else if(operation == ">") test = i == 1; else if(operation == "!=") test = i != 0; else if(operation == "<=") test = i == 0 || i == -1; else if(operation == ">=") test = i == 0 || i == 1;
					if(test) {
						openfl.Memory.setI32(position,color);
						hits++;
					}
				}
			}
			memory.position = 0;
			this.setPixels(this.rect,memory);
			openfl.Memory.select(null);
			return hits;
		} else {
			var sx = sourceRect.x | 0;
			var sy = sourceRect.y | 0;
			var sw = sourceBitmapData.width | 0;
			var sh = sourceBitmapData.height | 0;
			var dx = destPoint.x | 0;
			var dy = destPoint.y | 0;
			var bw = this.width - sw - dx;
			var bh = this.height - sh - dy;
			var dw;
			if(bw < 0) dw = sw + (this.width - sw - dx); else dw = sw;
			var dh;
			if(bw < 0) dh = sh + (this.height - sh - dy); else dh = sh;
			var hits1 = 0;
			threshold = (threshold & 255) << 24 | (threshold >> 8 & 255) << 16 | (threshold >> 16 & 255) << 8 | threshold >> 24 & 255;
			color = (color & 255) << 24 | (color >> 8 & 255) << 16 | (color >> 16 & 255) << 8 | color >> 24 & 255;
			var canvasMemory = sw * sh * 4;
			var sourceMemory = 0;
			if(copySource) sourceMemory = sw * sh * 4;
			var totalMemory = canvasMemory + sourceMemory;
			var memory1 = new lime.utils.ByteArray();
			if(memory1.allocated < totalMemory) memory1.___resizeBuffer(memory1.allocated = Std["int"](Math.max(totalMemory,memory1.allocated * 2))); else if(memory1.allocated > totalMemory * 2) memory1.___resizeBuffer(memory1.allocated = totalMemory);
			memory1.length = totalMemory;
			totalMemory;
			memory1.position = 0;
			var bitmapData = sourceBitmapData.clone();
			var pixels = bitmapData.getPixels(sourceRect);
			memory1.writeBytes(pixels);
			memory1.position = canvasMemory;
			if(copySource) memory1.writeBytes(pixels);
			memory1.position = 0;
			openfl.Memory.select(memory1);
			var thresholdMask1 = threshold & mask;
			var position1;
			var pixelMask1;
			var pixelValue1;
			var i1;
			var test1;
			var _g4 = 0;
			while(_g4 < dh) {
				var yy1 = _g4++;
				var _g11 = 0;
				while(_g11 < dw) {
					var xx1 = _g11++;
					position1 = (xx1 + sx + (yy1 + sy) * sw) * 4;
					pixelValue1 = openfl.Memory._setPositionTemporarily(position1,function() {
						return openfl.Memory.gcRef.readInt();
					});
					pixelMask1 = pixelValue1 & mask;
					i1 = openfl.display.BitmapData.__ucompare(pixelMask1,thresholdMask1);
					test1 = false;
					if(operation == "==") test1 = i1 == 0; else if(operation == "<") test1 = i1 == -1; else if(operation == ">") test1 = i1 == 1; else if(operation == "!=") test1 = i1 != 0; else if(operation == "<=") test1 = i1 == 0 || i1 == -1; else if(operation == ">=") test1 = i1 == 0 || i1 == 1;
					if(test1) {
						openfl.Memory.setI32(position1,color);
						hits1++;
					} else if(copySource) openfl.Memory.setI32(position1,openfl.Memory._setPositionTemporarily(canvasMemory + position1,function() {
						return openfl.Memory.gcRef.readInt();
					}));
				}
			}
			memory1.position = 0;
			bitmapData.setPixels(sourceRect,memory1);
			this.copyPixels(bitmapData,bitmapData.rect,destPoint);
			openfl.Memory.select(null);
			return hits1;
		}
	}
	,unlock: function(changeRect) {
	}
	,__createUVs: function() {
		if(this.__uvData == null) this.__uvData = new openfl.display.TextureUvs();
		this.__uvData.x0 = 0;
		this.__uvData.y0 = 0;
		this.__uvData.x1 = 1;
		this.__uvData.y1 = 0;
		this.__uvData.x2 = 1;
		this.__uvData.y2 = 1;
		this.__uvData.x3 = 0;
		this.__uvData.y3 = 1;
	}
	,__fromBase64: function(base64,type,onload) {
		var _g = this;
		lime.graphics.Image.fromBase64(base64,type,function(image) {
			_g.__fromImage(image);
			if(onload != null) onload(_g);
		});
	}
	,__fromBytes: function(bytes,rawAlpha,onload) {
		var _g = this;
		lime.graphics.Image.fromBytes(bytes,function(image) {
			_g.__fromImage(image);
			if(rawAlpha != null) {
				lime.graphics.utils.ImageCanvasUtil.convertToCanvas(_g.__image);
				lime.graphics.utils.ImageCanvasUtil.createImageData(_g.__image);
				var data = _g.__image.buffer.data;
				var _g2 = 0;
				var _g1 = rawAlpha.length;
				while(_g2 < _g1) {
					var i = _g2++;
					data[i * 4 + 3] = rawAlpha.readUnsignedByte();
				}
				_g.__image.dirty = true;
			}
			if(onload != null) onload(_g);
		});
	}
	,__fromFile: function(path,onload,onerror) {
		var _g = this;
		lime.graphics.Image.fromFile(path,function(image) {
			_g.__fromImage(image);
			if(onload != null) onload(_g);
		},onerror);
	}
	,__fromImage: function(image) {
		this.__image = image;
		this.width = image.width;
		this.height = image.height;
		this.rect = new openfl.geom.Rectangle(0,0,image.width,image.height);
		this.__isValid = true;
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__isValid) return;
		lime.graphics.utils.ImageCanvasUtil.sync(this.__image);
		var context = renderSession.context;
		if(this.__worldTransform == null) this.__worldTransform = new openfl.geom.Matrix();
		context.globalAlpha = 1;
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.drawImage(this.__image.buffer.get_src(),0,0);
	}
	,__renderGL: function(renderSession) {
		if(this.__worldTransform == null) this.__worldTransform = new openfl.geom.Matrix();
		if(this.__worldColorTransform == null) this.__worldColorTransform = new openfl.geom.ColorTransform();
		renderSession.spriteBatch.renderBitmapData(this,true,this.__worldTransform,this.__worldColorTransform,this.__worldColorTransform.alphaMultiplier,this.blendMode);
	}
	,__renderMask: function(renderSession) {
	}
	,__updateMask: function(maskGraphics) {
	}
	,__sync: function() {
		lime.graphics.utils.ImageCanvasUtil.sync(this.__image);
	}
	,__updateChildren: function(transformOnly) {
	}
	,__class__: openfl.display.BitmapData
};
openfl.display.TextureUvs = function() {
	this.y3 = 0;
	this.y2 = 0;
	this.y1 = 0;
	this.y0 = 0;
	this.x3 = 0;
	this.x2 = 0;
	this.x1 = 0;
	this.x0 = 0;
};
$hxClasses["openfl.display.TextureUvs"] = openfl.display.TextureUvs;
openfl.display.TextureUvs.__name__ = ["openfl","display","TextureUvs"];
openfl.display.TextureUvs.prototype = {
	x0: null
	,x1: null
	,x2: null
	,x3: null
	,y0: null
	,y1: null
	,y2: null
	,y3: null
	,__class__: openfl.display.TextureUvs
};
openfl.display.BlendMode = $hxClasses["openfl.display.BlendMode"] = { __ename__ : true, __constructs__ : ["ADD","ALPHA","DARKEN","DIFFERENCE","ERASE","HARDLIGHT","INVERT","LAYER","LIGHTEN","MULTIPLY","NORMAL","OVERLAY","SCREEN","SUBTRACT"] };
openfl.display.BlendMode.ADD = ["ADD",0];
openfl.display.BlendMode.ADD.toString = $estr;
openfl.display.BlendMode.ADD.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.ALPHA = ["ALPHA",1];
openfl.display.BlendMode.ALPHA.toString = $estr;
openfl.display.BlendMode.ALPHA.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.DARKEN = ["DARKEN",2];
openfl.display.BlendMode.DARKEN.toString = $estr;
openfl.display.BlendMode.DARKEN.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.DIFFERENCE = ["DIFFERENCE",3];
openfl.display.BlendMode.DIFFERENCE.toString = $estr;
openfl.display.BlendMode.DIFFERENCE.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.ERASE = ["ERASE",4];
openfl.display.BlendMode.ERASE.toString = $estr;
openfl.display.BlendMode.ERASE.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.HARDLIGHT = ["HARDLIGHT",5];
openfl.display.BlendMode.HARDLIGHT.toString = $estr;
openfl.display.BlendMode.HARDLIGHT.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.INVERT = ["INVERT",6];
openfl.display.BlendMode.INVERT.toString = $estr;
openfl.display.BlendMode.INVERT.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.LAYER = ["LAYER",7];
openfl.display.BlendMode.LAYER.toString = $estr;
openfl.display.BlendMode.LAYER.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.LIGHTEN = ["LIGHTEN",8];
openfl.display.BlendMode.LIGHTEN.toString = $estr;
openfl.display.BlendMode.LIGHTEN.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.MULTIPLY = ["MULTIPLY",9];
openfl.display.BlendMode.MULTIPLY.toString = $estr;
openfl.display.BlendMode.MULTIPLY.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.NORMAL = ["NORMAL",10];
openfl.display.BlendMode.NORMAL.toString = $estr;
openfl.display.BlendMode.NORMAL.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.OVERLAY = ["OVERLAY",11];
openfl.display.BlendMode.OVERLAY.toString = $estr;
openfl.display.BlendMode.OVERLAY.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.SCREEN = ["SCREEN",12];
openfl.display.BlendMode.SCREEN.toString = $estr;
openfl.display.BlendMode.SCREEN.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.SUBTRACT = ["SUBTRACT",13];
openfl.display.BlendMode.SUBTRACT.toString = $estr;
openfl.display.BlendMode.SUBTRACT.__enum__ = openfl.display.BlendMode;
openfl.display.CapsStyle = $hxClasses["openfl.display.CapsStyle"] = { __ename__ : true, __constructs__ : ["NONE","ROUND","SQUARE"] };
openfl.display.CapsStyle.NONE = ["NONE",0];
openfl.display.CapsStyle.NONE.toString = $estr;
openfl.display.CapsStyle.NONE.__enum__ = openfl.display.CapsStyle;
openfl.display.CapsStyle.ROUND = ["ROUND",1];
openfl.display.CapsStyle.ROUND.toString = $estr;
openfl.display.CapsStyle.ROUND.__enum__ = openfl.display.CapsStyle;
openfl.display.CapsStyle.SQUARE = ["SQUARE",2];
openfl.display.CapsStyle.SQUARE.toString = $estr;
openfl.display.CapsStyle.SQUARE.__enum__ = openfl.display.CapsStyle;
openfl.display.DirectRenderer = function(type) {
	if(type == null) type = "DirectRenderer";
	openfl.display.DisplayObject.call(this);
};
$hxClasses["openfl.display.DirectRenderer"] = openfl.display.DirectRenderer;
openfl.display.DirectRenderer.__name__ = ["openfl","display","DirectRenderer"];
openfl.display.DirectRenderer.__super__ = openfl.display.DisplayObject;
openfl.display.DirectRenderer.prototype = $extend(openfl.display.DisplayObject.prototype,{
	__render: null
	,get_render: function() {
		return this.__render;
	}
	,set_render: function(value) {
		return this.__render = value;
	}
	,__class__: openfl.display.DirectRenderer
	,__properties__: $extend(openfl.display.DisplayObject.prototype.__properties__,{set_render:"set_render",get_render:"get_render"})
});
openfl.display.FrameLabel = function(name,frame) {
	openfl.events.EventDispatcher.call(this);
	this.__name = name;
	this.__frame = frame;
};
$hxClasses["openfl.display.FrameLabel"] = openfl.display.FrameLabel;
openfl.display.FrameLabel.__name__ = ["openfl","display","FrameLabel"];
openfl.display.FrameLabel.__super__ = openfl.events.EventDispatcher;
openfl.display.FrameLabel.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	frame: null
	,name: null
	,__frame: null
	,__name: null
	,get_frame: function() {
		return this.__frame;
	}
	,get_name: function() {
		return this.__name;
	}
	,__class__: openfl.display.FrameLabel
	,__properties__: {get_name:"get_name",get_frame:"get_frame"}
});
openfl.display.GradientType = $hxClasses["openfl.display.GradientType"] = { __ename__ : true, __constructs__ : ["RADIAL","LINEAR"] };
openfl.display.GradientType.RADIAL = ["RADIAL",0];
openfl.display.GradientType.RADIAL.toString = $estr;
openfl.display.GradientType.RADIAL.__enum__ = openfl.display.GradientType;
openfl.display.GradientType.LINEAR = ["LINEAR",1];
openfl.display.GradientType.LINEAR.toString = $estr;
openfl.display.GradientType.LINEAR.__enum__ = openfl.display.GradientType;
openfl.display.Graphics = function() {
	this.__visible = true;
	this.__glStack = [];
	this.__dirty = true;
	this.__commands = [];
	this.__commands = new Array();
	this.__halfStrokeWidth = 0;
	this.__positionX = 0;
	this.__positionY = 0;
	this.moveTo(0,0);
};
$hxClasses["openfl.display.Graphics"] = openfl.display.Graphics;
openfl.display.Graphics.__name__ = ["openfl","display","Graphics"];
openfl.display.Graphics.prototype = {
	__bounds: null
	,__commands: null
	,__dirty: null
	,__glStack: null
	,__drawPaths: null
	,__halfStrokeWidth: null
	,__positionX: null
	,__positionY: null
	,__transformDirty: null
	,__visible: null
	,__cachedTexture: null
	,__owner: null
	,__canvas: null
	,__context: null
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) smooth = false;
		if(repeat == null) repeat = true;
		this.__commands.push(openfl.display.DrawCommand.BeginBitmapFill(bitmap,matrix != null?new openfl.geom.Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty):null,repeat,smooth));
		this.__visible = true;
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) alpha = 1;
		if(color == null) color = 0;
		this.__commands.push(openfl.display.DrawCommand.BeginFill(color & 16777215,alpha));
		if(alpha > 0) this.__visible = true;
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.__commands.push(openfl.display.DrawCommand.BeginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio));
		var _g = 0;
		while(_g < alphas.length) {
			var alpha = alphas[_g];
			++_g;
			if(alpha > 0) {
				this.__visible = true;
				break;
			}
		}
	}
	,clear: function() {
		this.__commands = new Array();
		this.__halfStrokeWidth = 0;
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
		this.moveTo(0,0);
	}
	,copyFrom: function(sourceGraphics) {
		this.__bounds = sourceGraphics.__bounds.clone();
		this.__commands = sourceGraphics.__commands.slice();
		this.set___dirty(true);
		this.__halfStrokeWidth = sourceGraphics.__halfStrokeWidth;
		this.__positionX = sourceGraphics.__positionX;
		this.__positionY = sourceGraphics.__positionY;
		this.__transformDirty = true;
		this.__visible = sourceGraphics.__visible;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__inflateBounds(controlX1,controlY1);
		this.__inflateBounds(controlX2,controlY2);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.CubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY));
		this.set___dirty(true);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__inflateBounds(controlX,controlY);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.CurveTo(controlX,controlY,anchorX,anchorY));
		this.set___dirty(true);
	}
	,drawCircle: function(x,y,radius) {
		if(radius <= 0) return;
		this.__inflateBounds(x - radius - this.__halfStrokeWidth,y - radius - this.__halfStrokeWidth);
		this.__inflateBounds(x + radius + this.__halfStrokeWidth,y + radius + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.DrawCircle(x,y,radius));
		this.set___dirty(true);
	}
	,drawEllipse: function(x,y,width,height) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__halfStrokeWidth,y - this.__halfStrokeWidth);
		this.__inflateBounds(x + width + this.__halfStrokeWidth,y + height + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.DrawEllipse(x,y,width,height));
		this.set___dirty(true);
	}
	,drawGraphicsData: function(graphicsData) {
		openfl.Lib.notImplemented("Graphics.drawGraphicsData");
	}
	,drawPath: function(commands,data,winding) {
		var dataIndex = 0;
		var _g = 0;
		while(_g < commands.length) {
			var command = commands.data[_g];
			++_g;
			switch(command) {
			case 1:
				this.moveTo(data.data[dataIndex],data.data[dataIndex + 1]);
				dataIndex += 2;
				break;
			case 2:
				this.lineTo(data.data[dataIndex],data.data[dataIndex + 1]);
				dataIndex += 2;
				break;
			case 3:
				this.curveTo(data.data[dataIndex],data.data[dataIndex + 1],data.data[dataIndex + 2],data.data[dataIndex + 3]);
				dataIndex += 4;
				break;
			case 6:
				this.cubicCurveTo(data.data[dataIndex],data.data[dataIndex + 1],data.data[dataIndex + 2],data.data[dataIndex + 3],data.data[dataIndex + 4],data.data[dataIndex + 5]);
				dataIndex += 6;
				break;
			default:
			}
		}
	}
	,drawRect: function(x,y,width,height) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__halfStrokeWidth,y - this.__halfStrokeWidth);
		this.__inflateBounds(x + width + this.__halfStrokeWidth,y + height + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.DrawRect(x,y,width,height));
		this.set___dirty(true);
	}
	,drawRoundRect: function(x,y,width,height,rx,ry) {
		if(ry == null) ry = -1;
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__halfStrokeWidth,y - this.__halfStrokeWidth);
		this.__inflateBounds(x + width + this.__halfStrokeWidth,y + height + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.DrawRoundRect(x,y,width,height,rx,ry));
		this.set___dirty(true);
	}
	,drawRoundRectComplex: function(x,y,width,height,topLeftRadius,topRightRadius,bottomLeftRadius,bottomRightRadius) {
		openfl.Lib.notImplemented("Graphics.drawRoundRectComplex");
	}
	,drawTiles: function(sheet,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		this.__inflateBounds(0,0);
		this.__inflateBounds(openfl.Lib.current.stage.stageWidth,openfl.Lib.current.stage.stageHeight);
		this.__commands.push(openfl.display.DrawCommand.DrawTiles(sheet,tileData,smooth,flags,count));
		this.set___dirty(true);
		this.__visible = true;
	}
	,drawTriangles: function(vertices,indices,uvtData,culling,colors,blendMode) {
		if(blendMode == null) blendMode = 0;
		var vlen = vertices.length / 2 | 0;
		if(culling == null) culling = openfl.display.TriangleCulling.NONE;
		if(indices == null) {
			if(vlen % 3 != 0) throw new openfl.errors.ArgumentError("Not enough vertices to close a triangle.");
			var this1;
			this1 = new openfl.VectorData();
			var this2;
			this2 = new Array(0);
			this1.data = this2;
			this1.length = 0;
			this1.fixed = false;
			indices = this1;
			var _g = 0;
			while(_g < vlen) {
				var i = _g++;
				if(!indices.fixed) {
					indices.length++;
					if(indices.data.length < indices.length) {
						var data;
						var this3;
						this3 = new Array(indices.data.length + 10);
						data = this3;
						haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data,0,indices.data.length);
						indices.data = data;
					}
					indices.data[indices.length - 1] = i;
				}
				indices.length;
			}
		}
		this.__inflateBounds(0,0);
		var tmpx = Math.NEGATIVE_INFINITY;
		var tmpy = Math.NEGATIVE_INFINITY;
		var maxX = Math.NEGATIVE_INFINITY;
		var maxY = Math.NEGATIVE_INFINITY;
		var _g1 = 0;
		while(_g1 < vlen) {
			var i1 = _g1++;
			tmpx = vertices.data[i1 * 2];
			tmpy = vertices.data[i1 * 2 + 1];
			if(maxX < tmpx) maxX = tmpx;
			if(maxY < tmpy) maxY = tmpy;
		}
		this.__inflateBounds(maxX,maxY);
		this.__commands.push(openfl.display.DrawCommand.DrawTriangles(vertices,indices,uvtData,culling,colors,blendMode));
		this.set___dirty(true);
		this.__visible = true;
	}
	,endFill: function() {
		this.__commands.push(openfl.display.DrawCommand.EndFill);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) smooth = false;
		if(repeat == null) repeat = true;
		openfl.Lib.notImplemented("Graphics.lineBitmapStyle");
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		openfl.Lib.notImplemented("Graphics.lineGradientStyle");
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(thickness != null) this.__halfStrokeWidth = thickness / 2; else this.__halfStrokeWidth = 0;
		this.__commands.push(openfl.display.DrawCommand.LineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit));
		if(thickness != null) this.__visible = true;
	}
	,lineTo: function(x,y) {
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.LineTo(x,y));
		this.set___dirty(true);
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.push(openfl.display.DrawCommand.MoveTo(x,y));
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) return;
		var bounds = this.__bounds.clone().transform(matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) return false;
		var bounds = this.__bounds.clone().transform(matrix);
		return x > bounds.x && y > bounds.y && x <= bounds.get_right() && y <= bounds.get_bottom();
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl.geom.Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) this.__bounds.width = x - this.__bounds.x;
		if(y > this.__bounds.y + this.__bounds.height) this.__bounds.height = y - this.__bounds.y;
	}
	,set___dirty: function(value) {
		if(value && this.__owner != null) this.__owner.__setRenderDirty();
		return this.__dirty = value;
	}
	,__class__: openfl.display.Graphics
	,__properties__: {set___dirty:"set___dirty"}
};
openfl.display.DrawCommand = $hxClasses["openfl.display.DrawCommand"] = { __ename__ : true, __constructs__ : ["BeginBitmapFill","BeginFill","BeginGradientFill","CubicCurveTo","CurveTo","DrawCircle","DrawEllipse","DrawRect","DrawRoundRect","DrawTiles","DrawTriangles","EndFill","LineStyle","LineTo","MoveTo","DrawPathC","OverrideMatrix"] };
openfl.display.DrawCommand.BeginBitmapFill = function(bitmap,matrix,repeat,smooth) { var $x = ["BeginBitmapFill",0,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.BeginFill = function(color,alpha) { var $x = ["BeginFill",1,color,alpha]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.BeginGradientFill = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) { var $x = ["BeginGradientFill",2,type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.CubicCurveTo = function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) { var $x = ["CubicCurveTo",3,controlX1,controlY1,controlX2,controlY2,anchorX,anchorY]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.CurveTo = function(controlX,controlY,anchorX,anchorY) { var $x = ["CurveTo",4,controlX,controlY,anchorX,anchorY]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawCircle = function(x,y,radius) { var $x = ["DrawCircle",5,x,y,radius]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawEllipse = function(x,y,width,height) { var $x = ["DrawEllipse",6,x,y,width,height]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawRect = function(x,y,width,height) { var $x = ["DrawRect",7,x,y,width,height]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawRoundRect = function(x,y,width,height,rx,ry) { var $x = ["DrawRoundRect",8,x,y,width,height,rx,ry]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawTiles = function(sheet,tileData,smooth,flags,count) { var $x = ["DrawTiles",9,sheet,tileData,smooth,flags,count]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawTriangles = function(vertices,indices,uvtData,culling,colors,blendMode) { var $x = ["DrawTriangles",10,vertices,indices,uvtData,culling,colors,blendMode]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.EndFill = ["EndFill",11];
openfl.display.DrawCommand.EndFill.toString = $estr;
openfl.display.DrawCommand.EndFill.__enum__ = openfl.display.DrawCommand;
openfl.display.DrawCommand.LineStyle = function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) { var $x = ["LineStyle",12,thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.LineTo = function(x,y) { var $x = ["LineTo",13,x,y]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.MoveTo = function(x,y) { var $x = ["MoveTo",14,x,y]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawPathC = function(commands,data,winding) { var $x = ["DrawPathC",15,commands,data,winding]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.OverrideMatrix = function(matrix) { var $x = ["OverrideMatrix",16,matrix]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.GraphicsPathCommand = function() { };
$hxClasses["openfl.display.GraphicsPathCommand"] = openfl.display.GraphicsPathCommand;
openfl.display.GraphicsPathCommand.__name__ = ["openfl","display","GraphicsPathCommand"];
openfl.display.GraphicsPathWinding = $hxClasses["openfl.display.GraphicsPathWinding"] = { __ename__ : true, __constructs__ : ["EVEN_ODD","NON_ZERO"] };
openfl.display.GraphicsPathWinding.EVEN_ODD = ["EVEN_ODD",0];
openfl.display.GraphicsPathWinding.EVEN_ODD.toString = $estr;
openfl.display.GraphicsPathWinding.EVEN_ODD.__enum__ = openfl.display.GraphicsPathWinding;
openfl.display.GraphicsPathWinding.NON_ZERO = ["NON_ZERO",1];
openfl.display.GraphicsPathWinding.NON_ZERO.toString = $estr;
openfl.display.GraphicsPathWinding.NON_ZERO.__enum__ = openfl.display.GraphicsPathWinding;
openfl.display.IGraphicsData = function() { };
$hxClasses["openfl.display.IGraphicsData"] = openfl.display.IGraphicsData;
openfl.display.IGraphicsData.__name__ = ["openfl","display","IGraphicsData"];
openfl.display.IGraphicsData.prototype = {
	__graphicsDataType: null
	,__class__: openfl.display.IGraphicsData
};
openfl.display.GraphicsDataType = $hxClasses["openfl.display.GraphicsDataType"] = { __ename__ : true, __constructs__ : ["STROKE","SOLID","GRADIENT","PATH","BITMAP","END"] };
openfl.display.GraphicsDataType.STROKE = ["STROKE",0];
openfl.display.GraphicsDataType.STROKE.toString = $estr;
openfl.display.GraphicsDataType.STROKE.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.SOLID = ["SOLID",1];
openfl.display.GraphicsDataType.SOLID.toString = $estr;
openfl.display.GraphicsDataType.SOLID.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.GRADIENT = ["GRADIENT",2];
openfl.display.GraphicsDataType.GRADIENT.toString = $estr;
openfl.display.GraphicsDataType.GRADIENT.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.PATH = ["PATH",3];
openfl.display.GraphicsDataType.PATH.toString = $estr;
openfl.display.GraphicsDataType.PATH.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.BITMAP = ["BITMAP",4];
openfl.display.GraphicsDataType.BITMAP.toString = $estr;
openfl.display.GraphicsDataType.BITMAP.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.END = ["END",5];
openfl.display.GraphicsDataType.END.toString = $estr;
openfl.display.GraphicsDataType.END.__enum__ = openfl.display.GraphicsDataType;
openfl.display.InterpolationMethod = $hxClasses["openfl.display.InterpolationMethod"] = { __ename__ : true, __constructs__ : ["RGB","LINEAR_RGB"] };
openfl.display.InterpolationMethod.RGB = ["RGB",0];
openfl.display.InterpolationMethod.RGB.toString = $estr;
openfl.display.InterpolationMethod.RGB.__enum__ = openfl.display.InterpolationMethod;
openfl.display.InterpolationMethod.LINEAR_RGB = ["LINEAR_RGB",1];
openfl.display.InterpolationMethod.LINEAR_RGB.toString = $estr;
openfl.display.InterpolationMethod.LINEAR_RGB.__enum__ = openfl.display.InterpolationMethod;
openfl.display.JPEGEncoderOptions = function(quality) {
	if(quality == null) quality = 80;
	this.quality = quality;
};
$hxClasses["openfl.display.JPEGEncoderOptions"] = openfl.display.JPEGEncoderOptions;
openfl.display.JPEGEncoderOptions.__name__ = ["openfl","display","JPEGEncoderOptions"];
openfl.display.JPEGEncoderOptions.prototype = {
	quality: null
	,__class__: openfl.display.JPEGEncoderOptions
};
openfl.display.JointStyle = $hxClasses["openfl.display.JointStyle"] = { __ename__ : true, __constructs__ : ["MITER","ROUND","BEVEL"] };
openfl.display.JointStyle.MITER = ["MITER",0];
openfl.display.JointStyle.MITER.toString = $estr;
openfl.display.JointStyle.MITER.__enum__ = openfl.display.JointStyle;
openfl.display.JointStyle.ROUND = ["ROUND",1];
openfl.display.JointStyle.ROUND.toString = $estr;
openfl.display.JointStyle.ROUND.__enum__ = openfl.display.JointStyle;
openfl.display.JointStyle.BEVEL = ["BEVEL",2];
openfl.display.JointStyle.BEVEL.toString = $estr;
openfl.display.JointStyle.BEVEL.__enum__ = openfl.display.JointStyle;
openfl.display.LineScaleMode = $hxClasses["openfl.display.LineScaleMode"] = { __ename__ : true, __constructs__ : ["HORIZONTAL","NONE","NORMAL","VERTICAL"] };
openfl.display.LineScaleMode.HORIZONTAL = ["HORIZONTAL",0];
openfl.display.LineScaleMode.HORIZONTAL.toString = $estr;
openfl.display.LineScaleMode.HORIZONTAL.__enum__ = openfl.display.LineScaleMode;
openfl.display.LineScaleMode.NONE = ["NONE",1];
openfl.display.LineScaleMode.NONE.toString = $estr;
openfl.display.LineScaleMode.NONE.__enum__ = openfl.display.LineScaleMode;
openfl.display.LineScaleMode.NORMAL = ["NORMAL",2];
openfl.display.LineScaleMode.NORMAL.toString = $estr;
openfl.display.LineScaleMode.NORMAL.__enum__ = openfl.display.LineScaleMode;
openfl.display.LineScaleMode.VERTICAL = ["VERTICAL",3];
openfl.display.LineScaleMode.VERTICAL.toString = $estr;
openfl.display.LineScaleMode.VERTICAL.__enum__ = openfl.display.LineScaleMode;
openfl.display.Loader = function() {
	openfl.display.Sprite.call(this);
	this.contentLoaderInfo = openfl.display.LoaderInfo.create(this);
};
$hxClasses["openfl.display.Loader"] = openfl.display.Loader;
openfl.display.Loader.__name__ = ["openfl","display","Loader"];
openfl.display.Loader.__super__ = openfl.display.Sprite;
openfl.display.Loader.prototype = $extend(openfl.display.Sprite.prototype,{
	content: null
	,contentLoaderInfo: null
	,mImage: null
	,mShape: null
	,close: function() {
		openfl.Lib.notImplemented("Loader.close");
	}
	,load: function(request,context) {
		var extension = "";
		var parts = request.url.split(".");
		if(parts.length > 0) extension = parts[parts.length - 1].toLowerCase();
		if(extension.indexOf("?") != -1) extension = extension.split("?")[0];
		var transparent = true;
		this.contentLoaderInfo.url = request.url;
		if(request.contentType == null && request.contentType != "") switch(extension) {
		case "swf":
			this.contentLoaderInfo.contentType = "application/x-shockwave-flash";
			break;
		case "jpg":case "jpeg":
			transparent = false;
			this.contentLoaderInfo.contentType = "image/jpeg";
			break;
		case "png":
			this.contentLoaderInfo.contentType = "image/png";
			break;
		case "gif":
			this.contentLoaderInfo.contentType = "image/gif";
			break;
		default:
			this.contentLoaderInfo.contentType = "application/x-www-form-urlencoded";
		} else this.contentLoaderInfo.contentType = request.contentType;
		openfl.display.BitmapData.fromFile(request.url,$bind(this,this.BitmapData_onLoad),$bind(this,this.BitmapData_onError));
	}
	,loadBytes: function(buffer) {
		openfl.display.BitmapData.fromBytes(buffer,null,$bind(this,this.BitmapData_onLoad));
	}
	,unload: function() {
		if(this.get_numChildren() > 0) {
			while(this.get_numChildren() > 0) this.removeChildAt(0);
			this.content = null;
			this.contentLoaderInfo.url = null;
			this.contentLoaderInfo.contentType = null;
			this.contentLoaderInfo.content = null;
			this.contentLoaderInfo.bytesLoaded = 0;
			this.contentLoaderInfo.bytesTotal = 0;
			this.contentLoaderInfo.width = 0;
			this.contentLoaderInfo.height = 0;
			var event = new openfl.events.Event(openfl.events.Event.UNLOAD);
			event.currentTarget = this;
			this.dispatchEvent(event);
		}
	}
	,unloadAndStop: function(gc) {
		if(gc == null) gc = true;
		openfl.Lib.notImplemented("Loader.unloadAndStop");
	}
	,BitmapData_onLoad: function(bitmapData) {
		this.contentLoaderInfo.content = new openfl.display.Bitmap(bitmapData);
		this.content = this.contentLoaderInfo.content;
		this.addChild(this.contentLoaderInfo.content);
		var event = new openfl.events.Event(openfl.events.Event.COMPLETE);
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,BitmapData_onError: function() {
		var event = new openfl.events.IOErrorEvent(openfl.events.IOErrorEvent.IO_ERROR);
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,__class__: openfl.display.Loader
});
openfl.display.OpenGLView = function() {
	openfl.display.DirectRenderer.call(this,"OpenGLView");
	if(!this.__initialized) {
		this.__canvas = window.document.createElement("canvas");
		this.__canvas.width = openfl.Lib.current.stage.stageWidth;
		this.__canvas.height = openfl.Lib.current.stage.stageHeight;
		this.__context = this.__canvas.getContext("webgl");
		if(this.__context == null) this.__context = this.__canvas.getContext("experimental-webgl");
		lime.graphics.opengl.GL.context = this.__context;
		this.__initialized = true;
	}
};
$hxClasses["openfl.display.OpenGLView"] = openfl.display.OpenGLView;
openfl.display.OpenGLView.__name__ = ["openfl","display","OpenGLView"];
openfl.display.OpenGLView.__properties__ = {get_isSupported:"get_isSupported"}
openfl.display.OpenGLView.isSupported = null;
openfl.display.OpenGLView.get_isSupported = function() {
	if(!window.WebGLRenderingContext) return false;
	if(lime.graphics.opengl.GL.context != null) return true; else {
		var canvas = window.document.createElement("canvas");
		var context = canvas.getContext("webgl");
		if(context == null) context = canvas.getContext("experimental-webgl");
		return context != null;
	}
	return true;
};
openfl.display.OpenGLView.__super__ = openfl.display.DirectRenderer;
openfl.display.OpenGLView.prototype = $extend(openfl.display.DirectRenderer.prototype,{
	__added: null
	,__initialized: null
	,__renderCanvas: function(renderSession) {
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable) {
			if(!this.__added) {
				renderSession.element.appendChild(this.__canvas);
				this.__added = true;
				openfl._internal.renderer.dom.DOMRenderer.initializeElement(this,this.__canvas,renderSession);
			}
			if(this.__context != null) {
				var rect = null;
				if(this.get_scrollRect() == null) rect = new openfl.geom.Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight); else rect = new openfl.geom.Rectangle(this.get_x() + this.get_scrollRect().x,this.get_y() + this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height);
				if(this.__render != null) this.__render(rect);
			}
		} else if(this.__added) {
			renderSession.element.removeChild(this.__canvas);
			this.__added = false;
		}
	}
	,__renderGL: function(renderSession) {
		if(this.stage != null && this.__renderable) {
			var rect = null;
			if(this.get_scrollRect() == null) rect = new openfl.geom.Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight); else rect = new openfl.geom.Rectangle(this.get_x() + this.get_scrollRect().x,this.get_y() + this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height);
			if(this.__render != null) this.__render(rect);
		}
	}
	,__class__: openfl.display.OpenGLView
});
openfl.display.PNGEncoderOptions = function(fastCompression) {
	if(fastCompression == null) fastCompression = false;
	this.fastCompression = fastCompression;
};
$hxClasses["openfl.display.PNGEncoderOptions"] = openfl.display.PNGEncoderOptions;
openfl.display.PNGEncoderOptions.__name__ = ["openfl","display","PNGEncoderOptions"];
openfl.display.PNGEncoderOptions.prototype = {
	fastCompression: null
	,__class__: openfl.display.PNGEncoderOptions
};
openfl.display.PixelSnapping = $hxClasses["openfl.display.PixelSnapping"] = { __ename__ : true, __constructs__ : ["NEVER","AUTO","ALWAYS"] };
openfl.display.PixelSnapping.NEVER = ["NEVER",0];
openfl.display.PixelSnapping.NEVER.toString = $estr;
openfl.display.PixelSnapping.NEVER.__enum__ = openfl.display.PixelSnapping;
openfl.display.PixelSnapping.AUTO = ["AUTO",1];
openfl.display.PixelSnapping.AUTO.toString = $estr;
openfl.display.PixelSnapping.AUTO.__enum__ = openfl.display.PixelSnapping;
openfl.display.PixelSnapping.ALWAYS = ["ALWAYS",2];
openfl.display.PixelSnapping.ALWAYS.toString = $estr;
openfl.display.PixelSnapping.ALWAYS.__enum__ = openfl.display.PixelSnapping;
openfl.display.Preloader = function(display) {
	lime.app.Preloader.call(this);
	if(display != null) {
		this.display = display;
		openfl.Lib.current.addChild(display);
		if(js.Boot.__instanceof(display,NMEPreloader)) (js.Boot.__cast(display , NMEPreloader)).onInit();
	}
};
$hxClasses["openfl.display.Preloader"] = openfl.display.Preloader;
openfl.display.Preloader.__name__ = ["openfl","display","Preloader"];
openfl.display.Preloader.__super__ = lime.app.Preloader;
openfl.display.Preloader.prototype = $extend(lime.app.Preloader.prototype,{
	display: null
	,displayComplete: null
	,load: function(urls,types) {
		var sounds = [];
		var url = null;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			var _g2 = types[i];
			switch(_g2) {
			case "MUSIC":case "SOUND":
				var sound = haxe.io.Path.withoutExtension(url);
				if(!HxOverrides.remove(sounds,sound)) this.total++;
				sounds.push(sound);
				break;
			default:
			}
		}
		var _g3 = 0;
		while(_g3 < sounds.length) {
			var soundName = sounds[_g3];
			++_g3;
			var sound1 = new openfl.media.Sound();
			sound1.addEventListener(openfl.events.Event.COMPLETE,$bind(this,this.sound_onComplete));
			sound1.addEventListener(openfl.events.IOErrorEvent.IO_ERROR,$bind(this,this.sound_onIOError));
			sound1.load(new openfl.net.URLRequest(soundName + ".ogg"));
		}
		lime.app.Preloader.prototype.load.call(this,urls,types);
	}
	,start: function() {
		if(this.display != null && js.Boot.__instanceof(this.display,NMEPreloader)) {
			this.display.addEventListener(openfl.events.Event.COMPLETE,$bind(this,this.display_onComplete));
			(js.Boot.__cast(this.display , NMEPreloader)).onLoaded();
		} else lime.app.Preloader.prototype.start.call(this);
	}
	,update: function(loaded,total) {
		if(this.display != null && js.Boot.__instanceof(this.display,NMEPreloader)) (js.Boot.__cast(this.display , NMEPreloader)).onUpdate(loaded,total);
	}
	,display_onComplete: function(event) {
		this.display.removeEventListener(openfl.events.Event.COMPLETE,$bind(this,this.display_onComplete));
		openfl.Lib.current.removeChild(this.display);
		openfl.Lib.current.stage.set_focus(null);
		this.display = null;
		lime.app.Preloader.prototype.start.call(this);
	}
	,sound_onComplete: function(event) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,sound_onIOError: function(event) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,__class__: openfl.display.Preloader
});
openfl.display.SpreadMethod = $hxClasses["openfl.display.SpreadMethod"] = { __ename__ : true, __constructs__ : ["REPEAT","REFLECT","PAD"] };
openfl.display.SpreadMethod.REPEAT = ["REPEAT",0];
openfl.display.SpreadMethod.REPEAT.toString = $estr;
openfl.display.SpreadMethod.REPEAT.__enum__ = openfl.display.SpreadMethod;
openfl.display.SpreadMethod.REFLECT = ["REFLECT",1];
openfl.display.SpreadMethod.REFLECT.toString = $estr;
openfl.display.SpreadMethod.REFLECT.__enum__ = openfl.display.SpreadMethod;
openfl.display.SpreadMethod.PAD = ["PAD",2];
openfl.display.SpreadMethod.PAD.toString = $estr;
openfl.display.SpreadMethod.PAD.__enum__ = openfl.display.SpreadMethod;
openfl.display.Stage = function(width,height,color) {
	this.__mouseY = 0;
	this.__mouseX = 0;
	this.__mouseOutStack = [];
	openfl.display.DisplayObjectContainer.call(this);
	if(color == null) {
		this.__transparent = true;
		this.set_color(0);
	} else this.set_color(color);
	this.set_name(null);
	this.__displayState = openfl.display.StageDisplayState.NORMAL;
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.stageWidth = width;
	this.stageHeight = height;
	this.stage = this;
	this.align = openfl.display.StageAlign.TOP_LEFT;
	this.allowsFullScreen = false;
	this.frameRate = 60;
	this.quality = openfl.display.StageQuality.HIGH;
	this.scaleMode = openfl.display.StageScaleMode.NO_SCALE;
	this.stageFocusRect = true;
	this.__clearBeforeRender = true;
	this.__stack = [];
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.stage3Ds = this1;
	var this3 = this.stage3Ds;
	var x = new openfl.display.Stage3D();
	if(!this3.fixed) {
		this3.length++;
		if(this3.data.length < this3.length) {
			var data;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data = this4;
			haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
			this3.data = data;
		}
		this3.data[this3.length - 1] = x;
	}
	this3.length;
};
$hxClasses["openfl.display.Stage"] = openfl.display.Stage;
openfl.display.Stage.__name__ = ["openfl","display","Stage"];
openfl.display.Stage.__interfaces__ = [lime.app.IModule];
openfl.display.Stage.__super__ = openfl.display.DisplayObjectContainer;
openfl.display.Stage.prototype = $extend(openfl.display.DisplayObjectContainer.prototype,{
	align: null
	,allowsFullScreen: null
	,frameRate: null
	,quality: null
	,scaleMode: null
	,stage3Ds: null
	,stageFocusRect: null
	,stageHeight: null
	,stageWidth: null
	,__clearBeforeRender: null
	,__color: null
	,__colorSplit: null
	,__colorString: null
	,__dirty: null
	,__displayState: null
	,__dragBounds: null
	,__dragObject: null
	,__dragOffsetX: null
	,__dragOffsetY: null
	,__focus: null
	,__fullscreen: null
	,__invalidated: null
	,__lastClickTime: null
	,__mouseOutStack: null
	,__mouseX: null
	,__mouseY: null
	,__originalWidth: null
	,__originalHeight: null
	,__renderer: null
	,__rendering: null
	,__stack: null
	,__transparent: null
	,__wasDirty: null
	,globalToLocal: function(pos) {
		return pos;
	}
	,init: function(context) {
		switch(context[1]) {
		case 0:
			var gl = context[2];
			this.__renderer = new openfl._internal.renderer.opengl.GLRenderer(this.stageWidth,this.stageHeight,gl);
			break;
		case 1:
			var context1 = context[2];
			this.__renderer = new openfl._internal.renderer.canvas.CanvasRenderer(this.stageWidth,this.stageHeight,context1);
			break;
		case 2:
			var element = context[2];
			this.__renderer = new openfl._internal.renderer.dom.DOMRenderer(this.stageWidth,this.stageHeight,element);
			break;
		default:
		}
	}
	,invalidate: function() {
		this.__invalidated = true;
	}
	,localToGlobal: function(pos) {
		return pos;
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onKeyDown: function(keyCode,modifier) {
		this.__onKey(openfl.events.KeyboardEvent.KEY_DOWN,keyCode,modifier);
	}
	,onKeyUp: function(keyCode,modifier) {
		this.__onKey(openfl.events.KeyboardEvent.KEY_UP,keyCode,modifier);
	}
	,onMouseDown: function(x,y,button) {
		var type;
		switch(button) {
		case 1:
			type = openfl.events.MouseEvent.MIDDLE_MOUSE_DOWN;
			break;
		case 2:
			type = openfl.events.MouseEvent.RIGHT_MOUSE_DOWN;
			break;
		default:
			type = openfl.events.MouseEvent.MOUSE_DOWN;
		}
		this.__onMouse(type,x,y,button);
	}
	,onMouseMove: function(x,y) {
		this.__onMouse(openfl.events.MouseEvent.MOUSE_MOVE,x,y,0);
	}
	,onMouseMoveRelative: function(x,y) {
	}
	,onMouseUp: function(x,y,button) {
		var type;
		switch(button) {
		case 1:
			type = openfl.events.MouseEvent.MIDDLE_MOUSE_UP;
			break;
		case 2:
			type = openfl.events.MouseEvent.RIGHT_MOUSE_UP;
			break;
		default:
			type = openfl.events.MouseEvent.MOUSE_UP;
		}
		this.__onMouse(type,x,y,button);
	}
	,onMouseWheel: function(deltaX,deltaY) {
		this.__onMouseWheel(deltaX,deltaY);
	}
	,onRenderContextLost: function() {
	}
	,onRenderContextRestored: function(context) {
	}
	,onTouchMove: function(x,y,id) {
		this.__onTouch("touchMove",x,y,id);
	}
	,onTouchEnd: function(x,y,id) {
		this.__onTouch("touchEnd",x,y,id);
	}
	,onTouchStart: function(x,y,id) {
		this.__onTouch("touchBegin",x,y,id);
	}
	,onWindowActivate: function() {
		var event = new openfl.events.Event(openfl.events.Event.ACTIVATE);
		this.__broadcast(event,true);
	}
	,onWindowClose: function() {
	}
	,onWindowDeactivate: function() {
		var event = new openfl.events.Event(openfl.events.Event.DEACTIVATE);
		this.__broadcast(event,true);
	}
	,onWindowFocusIn: function() {
	}
	,onWindowFocusOut: function() {
	}
	,onWindowFullscreen: function() {
	}
	,onWindowMinimize: function() {
	}
	,onWindowMove: function(x,y) {
	}
	,onWindowResize: function(width,height) {
		this.stageWidth = width;
		this.stageHeight = height;
		if(this.__renderer != null) this.__renderer.resize(width,height);
		var event = new openfl.events.Event(openfl.events.Event.RESIZE);
		this.__broadcast(event,false);
	}
	,onWindowRestore: function() {
	}
	,render: function(context) {
		if(this.__rendering) return;
		this.__rendering = true;
		this.__broadcast(new openfl.events.Event(openfl.events.Event.ENTER_FRAME),true);
		if(this.__invalidated) {
			this.__invalidated = false;
			this.__broadcast(new openfl.events.Event(openfl.events.Event.RENDER),true);
		}
		this.__renderable = true;
		this.__update(false,true);
		if(this.__renderer != null) this.__renderer.render(this);
		this.__rendering = false;
	}
	,update: function(deltaTime) {
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) mouse = parent.globalToLocal(mouse);
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) x = this.__dragBounds.x; else if(x > this.__dragBounds.get_right()) x = this.__dragBounds.get_right();
			if(y < this.__dragBounds.y) y = this.__dragBounds.y; else if(y > this.__dragBounds.get_bottom()) y = this.__dragBounds.get_bottom();
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__fireEvent: function(event,stack) {
		var length = stack.length;
		if(length == 0) {
			event.eventPhase = openfl.events.EventPhase.AT_TARGET;
			event.target.__broadcast(event,false);
		} else {
			event.eventPhase = openfl.events.EventPhase.CAPTURING_PHASE;
			event.target = stack[stack.length - 1];
			var _g1 = 0;
			var _g = length - 1;
			while(_g1 < _g) {
				var i = _g1++;
				stack[i].__broadcast(event,false);
				if(event.__isCancelled) return;
			}
			event.eventPhase = openfl.events.EventPhase.AT_TARGET;
			event.target.__broadcast(event,false);
			if(event.__isCancelled) return;
			if(event.bubbles) {
				event.eventPhase = openfl.events.EventPhase.BUBBLING_PHASE;
				var i1 = length - 2;
				while(i1 >= 0) {
					stack[i1].__broadcast(event,false);
					if(event.__isCancelled) return;
					i1--;
				}
			}
		}
	}
	,__getInteractive: function(stack) {
		if(stack != null) stack.push(this);
		return true;
	}
	,__onKey: function(type,keyCode,modifier) {
		openfl.events.MouseEvent.__altKey = lime.ui._KeyModifier.KeyModifier_Impl_.get_altKey(modifier);
		openfl.events.MouseEvent.__commandKey = lime.ui._KeyModifier.KeyModifier_Impl_.get_metaKey(modifier);
		openfl.events.MouseEvent.__ctrlKey = lime.ui._KeyModifier.KeyModifier_Impl_.get_ctrlKey(modifier);
		openfl.events.MouseEvent.__shiftKey = lime.ui._KeyModifier.KeyModifier_Impl_.get_shiftKey(modifier);
		var stack = new Array();
		if(this.__focus == null) this.__getInteractive(stack); else this.__focus.__getInteractive(stack);
		if(stack.length > 0) {
			var keyCode1 = openfl.ui.Keyboard.convertKeyCode(keyCode);
			var charCode = openfl.ui.Keyboard.__getCharCode(keyCode1,lime.ui._KeyModifier.KeyModifier_Impl_.get_shiftKey(modifier));
			var event = new openfl.events.KeyboardEvent(type,true,false,charCode,keyCode1,null,lime.ui._KeyModifier.KeyModifier_Impl_.get_ctrlKey(modifier),lime.ui._KeyModifier.KeyModifier_Impl_.get_altKey(modifier),lime.ui._KeyModifier.KeyModifier_Impl_.get_shiftKey(modifier),lime.ui._KeyModifier.KeyModifier_Impl_.get_metaKey(modifier));
			stack.reverse();
			this.__fireEvent(event,stack);
		}
	}
	,__onMouse: function(type,x,y,button) {
		if(button > 2) return;
		this.__mouseX = x;
		this.__mouseY = y;
		var stack = [];
		var target = null;
		var targetPoint = new openfl.geom.Point(x,y);
		if(this.__hitTest(x,y,false,stack,true)) target = stack[stack.length - 1]; else {
			target = this;
			stack = [this];
		}
		if(type == openfl.events.MouseEvent.MOUSE_DOWN) this.set_focus(target);
		this.__fireEvent(openfl.events.MouseEvent.__create(type,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
		var clickType;
		switch(type) {
		case openfl.events.MouseEvent.MOUSE_UP:
			clickType = openfl.events.MouseEvent.CLICK;
			break;
		case openfl.events.MouseEvent.MIDDLE_MOUSE_UP:
			clickType = openfl.events.MouseEvent.MIDDLE_CLICK;
			break;
		case openfl.events.MouseEvent.RIGHT_MOUSE_UP:
			clickType = openfl.events.MouseEvent.RIGHT_CLICK;
			break;
		default:
			clickType = null;
		}
		if(clickType != null) {
			this.__fireEvent(openfl.events.MouseEvent.__create(clickType,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
			if(type == openfl.events.MouseEvent.MOUSE_UP && (js.Boot.__cast(target , openfl.display.InteractiveObject)).doubleClickEnabled) {
				var currentTime = openfl.Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500) {
					this.__fireEvent(openfl.events.MouseEvent.__create(openfl.events.MouseEvent.DOUBLE_CLICK,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
					this.__lastClickTime = 0;
				} else this.__lastClickTime = currentTime;
			}
		}
		var cursor = null;
		var _g = 0;
		while(_g < stack.length) {
			var target1 = stack[_g];
			++_g;
			cursor = target1.__getCursor();
			if(cursor != null) {
				lime.ui.Mouse.set_cursor(cursor);
				break;
			}
		}
		if(cursor == null) lime.ui.Mouse.set_cursor(lime.ui.MouseCursor.ARROW);
		var _g1 = 0;
		var _g11 = this.__mouseOutStack;
		while(_g1 < _g11.length) {
			var target2 = _g11[_g1];
			++_g1;
			if(HxOverrides.indexOf(stack,target2,0) == -1) {
				HxOverrides.remove(this.__mouseOutStack,target2);
				var localPoint = target2.globalToLocal(targetPoint);
				target2.dispatchEvent(new openfl.events.MouseEvent(openfl.events.MouseEvent.MOUSE_OUT,false,false,localPoint.x,localPoint.y,target2));
			}
		}
		var _g2 = 0;
		while(_g2 < stack.length) {
			var target3 = stack[_g2];
			++_g2;
			if(HxOverrides.indexOf(this.__mouseOutStack,target3,0) == -1) {
				if(target3.hasEventListener(openfl.events.MouseEvent.MOUSE_OVER)) {
					var localPoint1 = target3.globalToLocal(targetPoint);
					target3.dispatchEvent(new openfl.events.MouseEvent(openfl.events.MouseEvent.MOUSE_OVER,false,false,localPoint1.x,localPoint1.y,target3));
				}
				if(target3.hasEventListener(openfl.events.MouseEvent.MOUSE_OUT)) this.__mouseOutStack.push(target3);
			}
		}
		if(this.__dragObject != null) this.__drag(targetPoint);
	}
	,__onMouseWheel: function(deltaX,deltaY) {
		var x = this.__mouseX;
		var y = this.__mouseY;
		var stack = [];
		if(!this.__hitTest(x,y,false,stack,true)) stack = [this];
		var target = stack[stack.length - 1];
		var targetPoint = new openfl.geom.Point(x,y);
		var delta = deltaY | 0;
		this.__fireEvent(openfl.events.MouseEvent.__create(openfl.events.MouseEvent.MOUSE_WHEEL,0,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target,delta),stack);
	}
	,__onTouch: function(type,x,y,id) {
		var point = new openfl.geom.Point(x,y);
		this.__mouseX = point.x;
		this.__mouseY = point.y;
		var __stack = [];
		var mouseType;
		switch(type) {
		case "touchBegin":
			mouseType = openfl.events.MouseEvent.MOUSE_DOWN;
			break;
		case "touchMove":
			mouseType = openfl.events.MouseEvent.MOUSE_MOVE;
			break;
		case "touchEnd":
			mouseType = openfl.events.MouseEvent.MOUSE_UP;
			break;
		default:
			mouseType = null;
		}
		if(this.__hitTest(x,y,false,__stack,true)) {
			var target = __stack[__stack.length - 1];
			var localPoint = target.globalToLocal(point);
			var touchEvent = openfl.events.TouchEvent.__create(type,null,this.__mouseX,this.__mouseY,localPoint,target);
			touchEvent.touchPointID = id;
			touchEvent.isPrimaryTouchPoint = true;
			var mouseEvent = openfl.events.MouseEvent.__create(mouseType,0,this.__mouseX,this.__mouseY,localPoint,target);
			mouseEvent.buttonDown = type != "touchEnd";
			this.__fireEvent(touchEvent,__stack);
			this.__fireEvent(mouseEvent,__stack);
		} else {
			var touchEvent1 = openfl.events.TouchEvent.__create(type,null,this.__mouseX,this.__mouseY,point,this);
			touchEvent1.touchPointID = id;
			touchEvent1.isPrimaryTouchPoint = true;
			var mouseEvent1 = openfl.events.MouseEvent.__create(mouseType,0,this.__mouseX,this.__mouseY,point,this);
			mouseEvent1.buttonDown = type != "touchEnd";
			this.__fireEvent(touchEvent1,[this.stage]);
			this.__fireEvent(mouseEvent1,[this.stage]);
		}
		if(type == "touchMove" && this.__dragObject != null) this.__drag(point);
	}
	,__resize: function() {
	}
	,__startDrag: function(sprite,lockCenter,bounds) {
		if(bounds == null) this.__dragBounds = null; else this.__dragBounds = bounds.clone();
		this.__dragObject = sprite;
		if(this.__dragObject != null) {
			if(lockCenter) {
				this.__dragOffsetX = -this.__dragObject.get_width() / 2;
				this.__dragOffsetY = -this.__dragObject.get_height() / 2;
			} else {
				var mouse = new openfl.geom.Point(this.get_mouseX(),this.get_mouseY());
				var parent = this.__dragObject.parent;
				if(parent != null) mouse = parent.globalToLocal(mouse);
				this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
				this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
			}
		}
	}
	,__stopDrag: function(sprite) {
		this.__dragBounds = null;
		this.__dragObject = null;
	}
	,__update: function(transformOnly,updateChildren,maskGrahpics) {
		if(transformOnly) {
			if(openfl.display.DisplayObject.__worldTransformDirty > 0) {
				openfl.display.DisplayObjectContainer.prototype.__update.call(this,true,updateChildren,maskGrahpics);
				if(updateChildren) {
					openfl.display.DisplayObject.__worldTransformDirty = 0;
					this.__dirty = true;
				}
			}
		} else if(openfl.display.DisplayObject.__worldTransformDirty > 0 || this.__dirty || openfl.display.DisplayObject.__worldRenderDirty > 0) {
			openfl.display.DisplayObjectContainer.prototype.__update.call(this,false,updateChildren,maskGrahpics);
			if(updateChildren) {
				this.__wasDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty = 0;
				openfl.display.DisplayObject.__worldRenderDirty = 0;
				this.__dirty = false;
			}
		} else if(this.__wasDirty) {
			openfl.display.DisplayObjectContainer.prototype.__update.call(this,false,updateChildren,maskGrahpics);
			if(updateChildren) this.__wasDirty = false;
		}
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,canvas_onContextLost: function(event) {
	}
	,canvas_onContextRestored: function(event) {
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		var r = (value & 16711680) >>> 16;
		var g = (value & 65280) >>> 8;
		var b = value & 255;
		this.__colorSplit = [r / 255,g / 255,b / 255];
		this.__colorString = "#" + StringTools.hex(value,6);
		return this.__color = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			if(this.__focus != null) {
				var event = new openfl.events.FocusEvent(openfl.events.FocusEvent.FOCUS_OUT,true,false,value,false,0);
				this.__stack = [];
				this.__focus.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event,this.__stack);
			}
			if(value != null) {
				var event1 = new openfl.events.FocusEvent(openfl.events.FocusEvent.FOCUS_IN,true,false,this.__focus,false,0);
				this.__stack = [];
				value.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event1,this.__stack);
			}
			this.__focus = value;
		}
		return this.__focus;
	}
	,get_displayState: function() {
		return this.__displayState;
	}
	,set_displayState: function(value) {
		switch(value[1]) {
		case 0:
			openfl.Lib.application.windows[0].set_fullscreen(false);
			break;
		default:
			openfl.Lib.application.windows[0].set_fullscreen(true);
		}
		return this.__displayState = value;
	}
	,__class__: openfl.display.Stage
	,__properties__: $extend(openfl.display.DisplayObjectContainer.prototype.__properties__,{set_focus:"set_focus",get_focus:"get_focus",set_displayState:"set_displayState",get_displayState:"get_displayState",set_color:"set_color",get_color:"get_color"})
});
openfl.display.Stage3D = function() {
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["openfl.display.Stage3D"] = openfl.display.Stage3D;
openfl.display.Stage3D.__name__ = ["openfl","display","Stage3D"];
openfl.display.Stage3D.__super__ = openfl.events.EventDispatcher;
openfl.display.Stage3D.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	context3D: null
	,visible: null
	,x: null
	,y: null
	,requestContext3D: function(context3DRenderMode) {
		if(context3DRenderMode == null) context3DRenderMode = "";
		if(openfl.display.OpenGLView.get_isSupported()) {
			this.context3D = new openfl.display3D.Context3D();
			this.dispatchEvent(new openfl.events.Event(openfl.events.Event.CONTEXT3D_CREATE));
		} else this.dispatchEvent(new openfl.events.ErrorEvent(openfl.events.ErrorEvent.ERROR));
	}
	,__class__: openfl.display.Stage3D
});
openfl.display.StageAlign = $hxClasses["openfl.display.StageAlign"] = { __ename__ : true, __constructs__ : ["TOP_RIGHT","TOP_LEFT","TOP","RIGHT","LEFT","BOTTOM_RIGHT","BOTTOM_LEFT","BOTTOM"] };
openfl.display.StageAlign.TOP_RIGHT = ["TOP_RIGHT",0];
openfl.display.StageAlign.TOP_RIGHT.toString = $estr;
openfl.display.StageAlign.TOP_RIGHT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.TOP_LEFT = ["TOP_LEFT",1];
openfl.display.StageAlign.TOP_LEFT.toString = $estr;
openfl.display.StageAlign.TOP_LEFT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.TOP = ["TOP",2];
openfl.display.StageAlign.TOP.toString = $estr;
openfl.display.StageAlign.TOP.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.RIGHT = ["RIGHT",3];
openfl.display.StageAlign.RIGHT.toString = $estr;
openfl.display.StageAlign.RIGHT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.LEFT = ["LEFT",4];
openfl.display.StageAlign.LEFT.toString = $estr;
openfl.display.StageAlign.LEFT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.BOTTOM_RIGHT = ["BOTTOM_RIGHT",5];
openfl.display.StageAlign.BOTTOM_RIGHT.toString = $estr;
openfl.display.StageAlign.BOTTOM_RIGHT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.BOTTOM_LEFT = ["BOTTOM_LEFT",6];
openfl.display.StageAlign.BOTTOM_LEFT.toString = $estr;
openfl.display.StageAlign.BOTTOM_LEFT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.BOTTOM = ["BOTTOM",7];
openfl.display.StageAlign.BOTTOM.toString = $estr;
openfl.display.StageAlign.BOTTOM.__enum__ = openfl.display.StageAlign;
openfl.display.StageDisplayState = $hxClasses["openfl.display.StageDisplayState"] = { __ename__ : true, __constructs__ : ["NORMAL","FULL_SCREEN","FULL_SCREEN_INTERACTIVE"] };
openfl.display.StageDisplayState.NORMAL = ["NORMAL",0];
openfl.display.StageDisplayState.NORMAL.toString = $estr;
openfl.display.StageDisplayState.NORMAL.__enum__ = openfl.display.StageDisplayState;
openfl.display.StageDisplayState.FULL_SCREEN = ["FULL_SCREEN",1];
openfl.display.StageDisplayState.FULL_SCREEN.toString = $estr;
openfl.display.StageDisplayState.FULL_SCREEN.__enum__ = openfl.display.StageDisplayState;
openfl.display.StageDisplayState.FULL_SCREEN_INTERACTIVE = ["FULL_SCREEN_INTERACTIVE",2];
openfl.display.StageDisplayState.FULL_SCREEN_INTERACTIVE.toString = $estr;
openfl.display.StageDisplayState.FULL_SCREEN_INTERACTIVE.__enum__ = openfl.display.StageDisplayState;
openfl.display.StageQuality = $hxClasses["openfl.display.StageQuality"] = { __ename__ : true, __constructs__ : ["BEST","HIGH","MEDIUM","LOW"] };
openfl.display.StageQuality.BEST = ["BEST",0];
openfl.display.StageQuality.BEST.toString = $estr;
openfl.display.StageQuality.BEST.__enum__ = openfl.display.StageQuality;
openfl.display.StageQuality.HIGH = ["HIGH",1];
openfl.display.StageQuality.HIGH.toString = $estr;
openfl.display.StageQuality.HIGH.__enum__ = openfl.display.StageQuality;
openfl.display.StageQuality.MEDIUM = ["MEDIUM",2];
openfl.display.StageQuality.MEDIUM.toString = $estr;
openfl.display.StageQuality.MEDIUM.__enum__ = openfl.display.StageQuality;
openfl.display.StageQuality.LOW = ["LOW",3];
openfl.display.StageQuality.LOW.toString = $estr;
openfl.display.StageQuality.LOW.__enum__ = openfl.display.StageQuality;
openfl.display.StageScaleMode = $hxClasses["openfl.display.StageScaleMode"] = { __ename__ : true, __constructs__ : ["SHOW_ALL","NO_SCALE","NO_BORDER","EXACT_FIT"] };
openfl.display.StageScaleMode.SHOW_ALL = ["SHOW_ALL",0];
openfl.display.StageScaleMode.SHOW_ALL.toString = $estr;
openfl.display.StageScaleMode.SHOW_ALL.__enum__ = openfl.display.StageScaleMode;
openfl.display.StageScaleMode.NO_SCALE = ["NO_SCALE",1];
openfl.display.StageScaleMode.NO_SCALE.toString = $estr;
openfl.display.StageScaleMode.NO_SCALE.__enum__ = openfl.display.StageScaleMode;
openfl.display.StageScaleMode.NO_BORDER = ["NO_BORDER",2];
openfl.display.StageScaleMode.NO_BORDER.toString = $estr;
openfl.display.StageScaleMode.NO_BORDER.__enum__ = openfl.display.StageScaleMode;
openfl.display.StageScaleMode.EXACT_FIT = ["EXACT_FIT",3];
openfl.display.StageScaleMode.EXACT_FIT.toString = $estr;
openfl.display.StageScaleMode.EXACT_FIT.__enum__ = openfl.display.StageScaleMode;
openfl.display.Tilesheet = function(image) {
	this.__bitmap = image;
	this.__centerPoints = new Array();
	this.__tileRects = new Array();
	this.__tileUVs = new Array();
	this.__rectTile = new openfl.geom.Rectangle();
	this.__rectUV = new openfl.geom.Rectangle();
	this.__point = new openfl.geom.Point();
};
$hxClasses["openfl.display.Tilesheet"] = openfl.display.Tilesheet;
openfl.display.Tilesheet.__name__ = ["openfl","display","Tilesheet"];
openfl.display.Tilesheet.prototype = {
	__bitmap: null
	,__centerPoints: null
	,__tileRects: null
	,__tileUVs: null
	,__rectTile: null
	,__rectUV: null
	,__point: null
	,addTileRect: function(rectangle,centerPoint) {
		this.__tileRects.push(rectangle);
		if(centerPoint == null) centerPoint = openfl.display.Tilesheet.__defaultPoint;
		this.__centerPoints.push(centerPoint);
		this.__tileUVs.push(new openfl.geom.Rectangle(rectangle.get_left() / this.__bitmap.width,rectangle.get_top() / this.__bitmap.height,rectangle.get_right() / this.__bitmap.width,rectangle.get_bottom() / this.__bitmap.height));
		return this.__tileRects.length - 1;
	}
	,drawTiles: function(graphics,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		graphics.drawTiles(this,tileData,smooth,flags,count);
	}
	,getTileCenter: function(index) {
		return this.__centerPoints[index];
	}
	,getTileRect: function(index) {
		return this.__tileRects[index];
	}
	,getTileUVs: function(index) {
		return this.__tileUVs[index];
	}
	,__class__: openfl.display.Tilesheet
};
openfl.display.TriangleCulling = $hxClasses["openfl.display.TriangleCulling"] = { __ename__ : true, __constructs__ : ["NEGATIVE","NONE","POSITIVE"] };
openfl.display.TriangleCulling.NEGATIVE = ["NEGATIVE",0];
openfl.display.TriangleCulling.NEGATIVE.toString = $estr;
openfl.display.TriangleCulling.NEGATIVE.__enum__ = openfl.display.TriangleCulling;
openfl.display.TriangleCulling.NONE = ["NONE",1];
openfl.display.TriangleCulling.NONE.toString = $estr;
openfl.display.TriangleCulling.NONE.__enum__ = openfl.display.TriangleCulling;
openfl.display.TriangleCulling.POSITIVE = ["POSITIVE",2];
openfl.display.TriangleCulling.POSITIVE.toString = $estr;
openfl.display.TriangleCulling.POSITIVE.__enum__ = openfl.display.TriangleCulling;
openfl.display3D = {};
openfl.display3D.Context3D = function() {
	this.disposed = false;
	this._yFlip = 1;
	this.vertexBuffersCreated = new Array();
	this.indexBuffersCreated = new Array();
	this.programsCreated = new Array();
	this.texturesCreated = new Array();
	this.samplerParameters = new Array();
	var _g1 = 0;
	var _g = openfl.display3D.Context3D.MAX_SAMPLERS;
	while(_g1 < _g) {
		var i = _g1++;
		this.samplerParameters[i] = new openfl.display3D._Context3D.SamplerState();
		this.samplerParameters[i].wrap = openfl.display3D.Context3DWrapMode.CLAMP;
		this.samplerParameters[i].filter = openfl.display3D.Context3DTextureFilter.LINEAR;
		this.samplerParameters[i].mipfilter = openfl.display3D.Context3DMipFilter.MIPNONE;
	}
	var stage = openfl.Lib.current.stage;
	this.ogl = new openfl.display.OpenGLView();
	this.ogl.set_scrollRect(new openfl.geom.Rectangle(0,0,stage.stageWidth,stage.stageHeight));
	this.scrollRect = this.ogl.get_scrollRect().clone();
	this.ogl.set_width(stage.stageWidth);
	this.ogl.set_height(stage.stageHeight);
	stage.addChildAt(this.ogl,0);
};
$hxClasses["openfl.display3D.Context3D"] = openfl.display3D.Context3D;
openfl.display3D.Context3D.__name__ = ["openfl","display3D","Context3D"];
openfl.display3D.Context3D.prototype = {
	driverInfo: null
	,enableErrorChecking: null
	,blendDestinationFactor: null
	,blendEnabled: null
	,blendSourceFactor: null
	,currentProgram: null
	,disposed: null
	,drawing: null
	,framebuffer: null
	,indexBuffersCreated: null
	,ogl: null
	,programsCreated: null
	,renderbuffer: null
	,samplerParameters: null
	,scrollRect: null
	,stencilbuffer: null
	,stencilCompareMode: null
	,stencilRef: null
	,stencilReadMask: null
	,texturesCreated: null
	,vertexBuffersCreated: null
	,_yFlip: null
	,clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) mask = 17664;
		if(stencil == null) stencil = 0;
		if(depth == null) depth = 1;
		if(alpha == null) alpha = 1;
		if(blue == null) blue = 0;
		if(green == null) green = 0;
		if(red == null) red = 0;
		if(!this.drawing) {
			this.__updateBlendStatus();
			this.drawing = true;
		}
		lime.graphics.opengl.GL.context.clearColor(red,green,blue,alpha);
		lime.graphics.opengl.GL.context.clearDepth(depth);
		lime.graphics.opengl.GL.context.clearStencil(stencil);
		lime.graphics.opengl.GL.context.clear(mask);
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil) {
		if(enableDepthAndStencil == null) enableDepthAndStencil = true;
		if(enableDepthAndStencil) {
			lime.graphics.opengl.GL.context.enable(2929);
			lime.graphics.opengl.GL.context.enable(2960);
		}
		this.ogl.set_scrollRect(new openfl.geom.Rectangle(0,0,width,height));
		this.ogl.set_width(width);
		this.ogl.set_height(height);
		this.scrollRect = this.ogl.get_scrollRect().clone();
		lime.graphics.opengl.GL.context.viewport(this.scrollRect.x | 0,this.scrollRect.y | 0,this.scrollRect.width | 0,this.scrollRect.height | 0);
	}
	,createCubeTexture: function(size,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) streamingLevels = 0;
		var texture = new openfl.display3D.textures.CubeTexture(lime.graphics.opengl.GL.context.createTexture(),size);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createIndexBuffer: function(numIndices) {
		var indexBuffer = new openfl.display3D.IndexBuffer3D(lime.graphics.opengl.GL.context.createBuffer(),numIndices);
		this.indexBuffersCreated.push(indexBuffer);
		return indexBuffer;
	}
	,createProgram: function() {
		var program = new openfl.display3D.Program3D(lime.graphics.opengl.GL.context.createProgram());
		this.programsCreated.push(program);
		return program;
	}
	,createRectangleTexture: function(width,height,format,optimizeForRenderToTexture) {
		var texture = new openfl.display3D.textures.RectangleTexture(lime.graphics.opengl.GL.context.createTexture(),optimizeForRenderToTexture,width,height);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createTexture: function(width,height,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) streamingLevels = 0;
		var texture = new openfl.display3D.textures.Texture(lime.graphics.opengl.GL.context.createTexture(),optimizeForRenderToTexture,width,height);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createVertexBuffer: function(numVertices,data32PerVertex) {
		var vertexBuffer = new openfl.display3D.VertexBuffer3D(lime.graphics.opengl.GL.context.createBuffer(),numVertices,data32PerVertex);
		this.vertexBuffersCreated.push(vertexBuffer);
		return vertexBuffer;
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.vertexBuffersCreated;
		while(_g < _g1.length) {
			var vertexBuffer = _g1[_g];
			++_g;
			vertexBuffer.dispose();
		}
		this.vertexBuffersCreated = null;
		var _g2 = 0;
		var _g11 = this.indexBuffersCreated;
		while(_g2 < _g11.length) {
			var indexBuffer = _g11[_g2];
			++_g2;
			indexBuffer.dispose();
		}
		this.indexBuffersCreated = null;
		var _g3 = 0;
		var _g12 = this.programsCreated;
		while(_g3 < _g12.length) {
			var program = _g12[_g3];
			++_g3;
			program.dispose();
		}
		this.programsCreated = null;
		this.samplerParameters = null;
		var _g4 = 0;
		var _g13 = this.texturesCreated;
		while(_g4 < _g13.length) {
			var texture = _g13[_g4];
			++_g4;
			texture.dispose();
		}
		this.texturesCreated = null;
		if(this.framebuffer != null) {
			lime.graphics.opengl.GL.context.deleteFramebuffer(this.framebuffer);
			this.framebuffer = null;
		}
		if(this.renderbuffer != null) {
			lime.graphics.opengl.GL.context.deleteRenderbuffer(this.renderbuffer);
			this.renderbuffer = null;
		}
		this.disposed = true;
	}
	,drawToBitmapData: function(destination) {
	}
	,drawTriangles: function(indexBuffer,firstIndex,numTriangles) {
		if(numTriangles == null) numTriangles = -1;
		if(firstIndex == null) firstIndex = 0;
		var location = lime.graphics.opengl.GL.context.getUniformLocation(this.currentProgram.glProgram,"yflip");
		lime.graphics.opengl.GL.context.uniform1f(location,this._yFlip);
		if(!this.drawing) throw new openfl.errors.Error("Need to clear before drawing if the buffer has not been cleared since the last present() call.");
		var numIndices;
		if(numTriangles == -1) numIndices = indexBuffer.numIndices; else numIndices = numTriangles * 3;
		var byteOffset = firstIndex * 2;
		lime.graphics.opengl.GL.context.bindBuffer(34963,indexBuffer.glBuffer);
		lime.graphics.opengl.GL.context.drawElements(4,numIndices,5123,byteOffset);
	}
	,present: function() {
		this.drawing = false;
		lime.graphics.opengl.GL.context.useProgram(null);
		lime.graphics.opengl.GL.context.bindBuffer(34962,null);
		lime.graphics.opengl.GL.context.disable(2884);
		if(this.framebuffer != null) lime.graphics.opengl.GL.context.bindFramebuffer(36160,null);
		if(this.renderbuffer != null) lime.graphics.opengl.GL.context.bindRenderbuffer(36161,null);
	}
	,removeRenderMethod: function(func) {
		this.ogl.set_render(null);
	}
	,setBlendFactors: function(sourceFactor,destinationFactor) {
		this.blendEnabled = true;
		this.blendSourceFactor = sourceFactor;
		this.blendDestinationFactor = destinationFactor;
		this.__updateBlendStatus();
	}
	,setColorMask: function(red,green,blue,alpha) {
		lime.graphics.opengl.GL.context.colorMask(red,green,blue,alpha);
	}
	,setCulling: function(triangleFaceToCull) {
		if(triangleFaceToCull == 0) lime.graphics.opengl.GL.context.disable(2884); else {
			lime.graphics.opengl.GL.context.enable(2884);
			switch(triangleFaceToCull) {
			case 1029:
				lime.graphics.opengl.GL.context.cullFace(1029);
				break;
			case 1028:
				lime.graphics.opengl.GL.context.cullFace(1028);
				break;
			case 1032:
				lime.graphics.opengl.GL.context.cullFace(1032);
				break;
			default:
				throw "Unknown Context3DTriangleFace type.";
			}
		}
		switch(triangleFaceToCull) {
		case 1029:
			this._yFlip = -1;
			break;
		case 1028:
			this._yFlip = 1;
			break;
		case 1032:
			this._yFlip = 1;
			break;
		case 0:
			this._yFlip = 1;
			break;
		default:
			throw "Unknown culling mode " + triangleFaceToCull + ".";
		}
	}
	,setDepthTest: function(depthMask,passCompareMode) {
		lime.graphics.opengl.GL.context.depthFunc(passCompareMode);
		lime.graphics.opengl.GL.context.depthMask(depthMask);
	}
	,setGLSLProgramConstantsFromByteArray: function(locationName,data,byteArrayOffset) {
		if(byteArrayOffset == null) byteArrayOffset = 0;
		data.position = byteArrayOffset;
		var location = lime.graphics.opengl.GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime.graphics.opengl.GL.uniform4f(location,data.readFloat(),data.readFloat(),data.readFloat(),data.readFloat());
	}
	,setGLSLProgramConstantsFromMatrix: function(locationName,matrix,transposedMatrix) {
		if(transposedMatrix == null) transposedMatrix = false;
		var location = lime.graphics.opengl.GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime.graphics.opengl.GL.uniformMatrix4fv(location,!transposedMatrix,new Float32Array((function($this) {
			var $r;
			var this1 = matrix.rawData;
			var value = new Array();
			{
				var _g1 = 0;
				var _g = this1.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value.push(this1.data[i]);
				}
			}
			$r = value;
			return $r;
		}(this))));
	}
	,setGLSLProgramConstantsFromVector4: function(locationName,data,startIndex) {
		if(startIndex == null) startIndex = 0;
		var location = lime.graphics.opengl.GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime.graphics.opengl.GL.context.uniform4f(location,data[startIndex],data[startIndex + 1],data[startIndex + 2],data[startIndex + 3]);
	}
	,setGLSLTextureAt: function(locationName,texture,textureIndex) {
		switch(textureIndex) {
		case 0:
			lime.graphics.opengl.GL.context.activeTexture(33984);
			break;
		case 1:
			lime.graphics.opengl.GL.context.activeTexture(33985);
			break;
		case 2:
			lime.graphics.opengl.GL.context.activeTexture(33986);
			break;
		case 3:
			lime.graphics.opengl.GL.context.activeTexture(33987);
			break;
		case 4:
			lime.graphics.opengl.GL.context.activeTexture(33988);
			break;
		case 5:
			lime.graphics.opengl.GL.context.activeTexture(33989);
			break;
		case 6:
			lime.graphics.opengl.GL.context.activeTexture(33990);
			break;
		case 7:
			lime.graphics.opengl.GL.context.activeTexture(33991);
			break;
		default:
			throw "Does not support texture8 or more";
		}
		if(texture == null) {
			lime.graphics.opengl.GL.context.bindTexture(3553,null);
			lime.graphics.opengl.GL.context.bindTexture(34067,null);
			return;
		}
		var location = lime.graphics.opengl.GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		if(js.Boot.__instanceof(texture,openfl.display3D.textures.Texture)) {
			lime.graphics.opengl.GL.context.bindTexture(3553,(js.Boot.__cast(texture , openfl.display3D.textures.Texture)).glTexture);
			lime.graphics.opengl.GL.context.uniform1i(location,textureIndex);
		} else if(js.Boot.__instanceof(texture,openfl.display3D.textures.RectangleTexture)) {
			lime.graphics.opengl.GL.context.bindTexture(3553,(js.Boot.__cast(texture , openfl.display3D.textures.RectangleTexture)).glTexture);
			lime.graphics.opengl.GL.context.uniform1i(location,textureIndex);
		} else if(js.Boot.__instanceof(texture,openfl.display3D.textures.CubeTexture)) {
			lime.graphics.opengl.GL.context.bindTexture(34067,(js.Boot.__cast(texture , openfl.display3D.textures.CubeTexture)).glTexture);
			lime.graphics.opengl.GL.context.uniform1i(location,textureIndex);
		} else throw "Texture of type " + Type.getClassName(Type.getClass(texture)) + " not supported yet";
		var parameters = this.samplerParameters[textureIndex];
		if(parameters != null) this.setTextureParameters(texture,parameters.wrap,parameters.filter,parameters.mipfilter); else this.setTextureParameters(texture,openfl.display3D.Context3DWrapMode.CLAMP,openfl.display3D.Context3DTextureFilter.NEAREST,openfl.display3D.Context3DMipFilter.MIPNONE);
	}
	,setGLSLVertexBufferAt: function(locationName,buffer,bufferOffset,format) {
		if(bufferOffset == null) bufferOffset = 0;
		var location;
		if(this.currentProgram != null && this.currentProgram.glProgram != null) location = lime.graphics.opengl.GL.context.getAttribLocation(this.currentProgram.glProgram,locationName); else location = -1;
		if(buffer == null) {
			if(location > -1) lime.graphics.opengl.GL.context.disableVertexAttribArray(location);
			return;
		}
		lime.graphics.opengl.GL.context.bindBuffer(34962,buffer.glBuffer);
		var dimension = 4;
		var type = 5126;
		var numBytes = 4;
		if(format == openfl.display3D.Context3DVertexBufferFormat.BYTES_4) {
			dimension = 4;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl.display3D.Context3DVertexBufferFormat.FLOAT_1) {
			dimension = 1;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl.display3D.Context3DVertexBufferFormat.FLOAT_2) {
			dimension = 2;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl.display3D.Context3DVertexBufferFormat.FLOAT_3) {
			dimension = 3;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl.display3D.Context3DVertexBufferFormat.FLOAT_4) {
			dimension = 4;
			type = 5126;
			numBytes = 4;
		} else throw "Buffer format " + Std.string(format) + " is not supported";
		lime.graphics.opengl.GL.context.enableVertexAttribArray(location);
		lime.graphics.opengl.GL.context.vertexAttribPointer(location,dimension,type,false,buffer.data32PerVertex * numBytes,bufferOffset * numBytes);
	}
	,setProgram: function(program3D) {
		var glProgram = null;
		if(program3D != null) glProgram = program3D.glProgram;
		lime.graphics.opengl.GL.context.useProgram(glProgram);
		this.currentProgram = program3D;
	}
	,setProgramConstantsFromByteArray: function(programType,firstRegister,numRegisters,data,byteArrayOffset) {
		data.position = byteArrayOffset;
		var _g = 0;
		while(_g < numRegisters) {
			var i = _g++;
			var locationName = this.__getUniformLocationNameFromAgalRegisterIndex(programType,firstRegister + i);
			this.setGLSLProgramConstantsFromByteArray(locationName,data);
		}
	}
	,setProgramConstantsFromMatrix: function(programType,firstRegister,matrix,transposedMatrix) {
		if(transposedMatrix == null) transposedMatrix = false;
		var d = matrix.rawData;
		if(transposedMatrix) {
			this.setProgramConstantsFromVector(programType,firstRegister,[d.data[0],d.data[4],d.data[8],d.data[12]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 1,[d.data[1],d.data[5],d.data[9],d.data[13]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 2,[d.data[2],d.data[6],d.data[10],d.data[14]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 3,[d.data[3],d.data[7],d.data[11],d.data[15]],1);
		} else {
			this.setProgramConstantsFromVector(programType,firstRegister,[d.data[0],d.data[1],d.data[2],d.data[3]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 1,[d.data[4],d.data[5],d.data[6],d.data[7]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 2,[d.data[8],d.data[9],d.data[10],d.data[11]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 3,[d.data[12],d.data[13],d.data[14],d.data[15]],1);
		}
	}
	,setProgramConstantsFromVector: function(programType,firstRegister,data,numRegisters) {
		if(numRegisters == null) numRegisters = 1;
		var _g = 0;
		while(_g < numRegisters) {
			var i = _g++;
			var currentIndex = i * 4;
			var locationName = this.__getUniformLocationNameFromAgalRegisterIndex(programType,firstRegister + i);
			this.setGLSLProgramConstantsFromVector4(locationName,data,currentIndex);
		}
	}
	,setRenderMethod: function(func) {
		this.ogl.set_render(function(rect) {
			func(null);
		});
	}
	,setRenderToBackBuffer: function() {
		lime.graphics.opengl.GL.context.disable(2929);
		lime.graphics.opengl.GL.context.disable(2960);
		lime.graphics.opengl.GL.context.disable(3089);
		if(this.framebuffer != null) lime.graphics.opengl.GL.context.bindFramebuffer(36160,null);
		if(this.renderbuffer != null) lime.graphics.opengl.GL.context.bindRenderbuffer(36161,null);
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil,antiAlias,surfaceSelector) {
		if(surfaceSelector == null) surfaceSelector = 0;
		if(antiAlias == null) antiAlias = 0;
		if(enableDepthAndStencil == null) enableDepthAndStencil = false;
		if(this.framebuffer == null) this.framebuffer = lime.graphics.opengl.GL.context.createFramebuffer();
		lime.graphics.opengl.GL.context.bindFramebuffer(36160,this.framebuffer);
		if(this.renderbuffer == null) this.renderbuffer = lime.graphics.opengl.GL.context.createRenderbuffer();
		lime.graphics.opengl.GL.context.bindRenderbuffer(36161,this.renderbuffer);
		lime.graphics.opengl.GL.context.renderbufferStorage(36161,6408,texture.width,texture.height);
		lime.graphics.opengl.GL.context.framebufferTexture2D(36160,36064,3553,texture.glTexture,0);
		lime.graphics.opengl.GL.context.renderbufferStorage(36161,34041,texture.width,texture.height);
		lime.graphics.opengl.GL.context.framebufferRenderbuffer(36160,33306,36161,this.renderbuffer);
		if(enableDepthAndStencil) {
			lime.graphics.opengl.GL.context.enable(2929);
			lime.graphics.opengl.GL.context.enable(2960);
		}
		lime.graphics.opengl.GL.context.bindTexture(3553,texture.glTexture);
		lime.graphics.opengl.GL.context.texImage2D(3553,0,6408,texture.width,texture.height,0,6408,5121,null);
		lime.graphics.opengl.GL.context.texParameteri(3553,10240,9729);
		lime.graphics.opengl.GL.context.texParameteri(3553,10241,9985);
		lime.graphics.opengl.GL.context.viewport(0,0,texture.width,texture.height);
	}
	,setSamplerStateAt: function(sampler,wrap,filter,mipfilter) {
		if(0 <= sampler && sampler < openfl.display3D.Context3D.MAX_SAMPLERS) {
			this.samplerParameters[sampler].wrap = wrap;
			this.samplerParameters[sampler].filter = filter;
			this.samplerParameters[sampler].mipfilter = mipfilter;
		} else throw "Sampler is out of bounds.";
	}
	,setScissorRectangle: function(rectangle) {
		if(rectangle == null) {
			lime.graphics.opengl.GL.context.disable(3089);
			return;
		}
		lime.graphics.opengl.GL.context.enable(3089);
		lime.graphics.opengl.GL.context.scissor(rectangle.x | 0,rectangle.y | 0,rectangle.width | 0,rectangle.height | 0);
	}
	,setStencilActions: function(triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail) {
		this.stencilCompareMode = compareMode;
		lime.graphics.opengl.GL.context.stencilOp(actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail);
		lime.graphics.opengl.GL.context.stencilFunc(this.stencilCompareMode,this.stencilRef,this.stencilReadMask);
	}
	,setStencilReferenceValue: function(referenceValue,readMask,writeMask) {
		if(writeMask == null) writeMask = 255;
		if(readMask == null) readMask = 255;
		this.stencilReadMask = readMask;
		this.stencilRef = referenceValue;
		lime.graphics.opengl.GL.context.stencilFunc(this.stencilCompareMode,this.stencilRef,this.stencilReadMask);
		lime.graphics.opengl.GL.context.stencilMask(writeMask);
	}
	,setTextureAt: function(sampler,texture) {
		var locationName = "fs" + sampler;
		this.setGLSLTextureAt(locationName,texture,sampler);
	}
	,setTextureParameters: function(texture,wrap,filter,mipfilter) {
		if(!openfl.display3D.Context3D.anisotropySupportTested) {
			var ext = lime.graphics.opengl.GL.context.getExtension("EXT_texture_filter_anisotropic");
			if(ext == null) ext = lime.graphics.opengl.GL.context.getExtension("MOZ_EXT_texture_filter_anisotropic");
			if(ext == null) ext = lime.graphics.opengl.GL.context.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
			openfl.display3D.Context3D.supportsAnisotropy = ext != null;
			openfl.display3D.Context3D.anisotropySupportTested = true;
			lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
				var $r;
				var $int = openfl.display3D.Context3D.maxSupportedAnisotropy;
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}(this)));
			openfl.display3D.Context3D.maxSupportedAnisotropy = lime.graphics.opengl.GL.context.getTexParameter(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT);
		}
		if(js.Boot.__instanceof(texture,openfl.display3D.textures.Texture)) {
			switch(wrap[1]) {
			case 0:
				lime.graphics.opengl.GL.context.texParameteri(3553,10242,33071);
				lime.graphics.opengl.GL.context.texParameteri(3553,10243,33071);
				break;
			case 1:
				lime.graphics.opengl.GL.context.texParameteri(3553,10242,10497);
				lime.graphics.opengl.GL.context.texParameteri(3553,10243,10497);
				break;
			}
			switch(filter[1]) {
			case 4:
				lime.graphics.opengl.GL.context.texParameteri(3553,10240,9729);
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime.graphics.opengl.GL.context.texParameteri(3553,10240,9728);
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg = 2 < 0;
						var bNeg = a < 0;
						$r = aNeg != bNeg?aNeg:2 > a;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int1 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
					return $r;
				}(this)):2);
				break;
			case 1:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a1 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg1 = 4 < 0;
						var bNeg1 = a1 < 0;
						$r = aNeg1 != bNeg1?aNeg1:4 > a1;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int2 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
					return $r;
				}(this)):4);
				break;
			case 2:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a2 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg2 = 8 < 0;
						var bNeg2 = a2 < 0;
						$r = aNeg2 != bNeg2?aNeg2:8 > a2;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int3 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int3 < 0?4294967296.0 + int3:int3 + 0.0;
					return $r;
				}(this)):8);
				break;
			case 3:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a3 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg3 = 16 < 0;
						var bNeg3 = a3 < 0;
						$r = aNeg3 != bNeg3?aNeg3:16 > a3;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int4 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int4 < 0?4294967296.0 + int4:int4 + 0.0;
					return $r;
				}(this)):16);
				break;
			}
			switch(mipfilter[1]) {
			case 0:
				lime.graphics.opengl.GL.context.generateMipmap(3553);
				lime.graphics.opengl.GL.context.texParameteri(3553,10241,9987);
				break;
			case 1:
				lime.graphics.opengl.GL.context.generateMipmap(3553);
				lime.graphics.opengl.GL.context.texParameteri(3553,10241,9984);
				break;
			case 2:
				lime.graphics.opengl.GL.context.texParameteri(3553,10241,9729);
				break;
			}
		} else if(js.Boot.__instanceof(texture,openfl.display3D.textures.RectangleTexture)) {
			lime.graphics.opengl.GL.context.texParameteri(3553,10242,33071);
			lime.graphics.opengl.GL.context.texParameteri(3553,10243,33071);
			switch(filter[1]) {
			case 4:
				lime.graphics.opengl.GL.context.texParameteri(3553,10240,9729);
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime.graphics.opengl.GL.context.texParameteri(3553,10240,9728);
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a4 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg4 = 2 < 0;
						var bNeg4 = a4 < 0;
						$r = aNeg4 != bNeg4?aNeg4:2 > a4;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int5 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int5 < 0?4294967296.0 + int5:int5 + 0.0;
					return $r;
				}(this)):2);
				break;
			case 1:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a5 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg5 = 4 < 0;
						var bNeg5 = a5 < 0;
						$r = aNeg5 != bNeg5?aNeg5:4 > a5;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int6 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int6 < 0?4294967296.0 + int6:int6 + 0.0;
					return $r;
				}(this)):4);
				break;
			case 2:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a6 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg6 = 8 < 0;
						var bNeg6 = a6 < 0;
						$r = aNeg6 != bNeg6?aNeg6:8 > a6;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int7 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int7 < 0?4294967296.0 + int7:int7 + 0.0;
					return $r;
				}(this)):8);
				break;
			case 3:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a7 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg7 = 16 < 0;
						var bNeg7 = a7 < 0;
						$r = aNeg7 != bNeg7?aNeg7:16 > a7;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int8 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int8 < 0?4294967296.0 + int8:int8 + 0.0;
					return $r;
				}(this)):16);
				break;
			}
			lime.graphics.opengl.GL.context.texParameteri(3553,10241,9729);
		} else if(js.Boot.__instanceof(texture,openfl.display3D.textures.CubeTexture)) {
			switch(wrap[1]) {
			case 0:
				lime.graphics.opengl.GL.context.texParameteri(34067,10242,33071);
				lime.graphics.opengl.GL.context.texParameteri(34067,10243,33071);
				break;
			case 1:
				lime.graphics.opengl.GL.context.texParameteri(34067,10242,10497);
				lime.graphics.opengl.GL.context.texParameteri(34067,10243,10497);
				break;
			}
			switch(filter[1]) {
			case 4:
				lime.graphics.opengl.GL.context.texParameteri(34067,10240,9729);
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(34067,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime.graphics.opengl.GL.context.texParameteri(34067,10240,9728);
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(34067,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(34067,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a8 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg8 = 2 < 0;
						var bNeg8 = a8 < 0;
						$r = aNeg8 != bNeg8?aNeg8:2 > a8;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int9 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int9 < 0?4294967296.0 + int9:int9 + 0.0;
					return $r;
				}(this)):2);
				break;
			case 1:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(34067,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a9 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg9 = 4 < 0;
						var bNeg9 = a9 < 0;
						$r = aNeg9 != bNeg9?aNeg9:4 > a9;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int10 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int10 < 0?4294967296.0 + int10:int10 + 0.0;
					return $r;
				}(this)):4);
				break;
			case 2:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(34067,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a10 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg10 = 8 < 0;
						var bNeg10 = a10 < 0;
						$r = aNeg10 != bNeg10?aNeg10:8 > a10;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int11 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int11 < 0?4294967296.0 + int11:int11 + 0.0;
					return $r;
				}(this)):8);
				break;
			case 3:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(34067,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a11 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg11 = 16 < 0;
						var bNeg11 = a11 < 0;
						$r = aNeg11 != bNeg11?aNeg11:16 > a11;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int12 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int12 < 0?4294967296.0 + int12:int12 + 0.0;
					return $r;
				}(this)):16);
				break;
			}
			switch(mipfilter[1]) {
			case 0:
				lime.graphics.opengl.GL.context.texParameteri(34067,10241,9987);
				break;
			case 1:
				lime.graphics.opengl.GL.context.texParameteri(34067,10241,9984);
				break;
			case 2:
				lime.graphics.opengl.GL.context.texParameteri(34067,10241,9729);
				break;
			}
		} else throw "Texture of type " + Type.getClassName(Type.getClass(texture)) + " not supported yet";
	}
	,setVertexBufferAt: function(index,buffer,bufferOffset,format) {
		if(bufferOffset == null) bufferOffset = 0;
		var locationName = "va" + index;
		this.setGLSLVertexBufferAt(locationName,buffer,bufferOffset,format);
	}
	,__getUniformLocationNameFromAgalRegisterIndex: function(programType,firstRegister) {
		if(programType == openfl.display3D.Context3DProgramType.VERTEX) return "vc" + firstRegister; else if(programType == openfl.display3D.Context3DProgramType.FRAGMENT) return "fc" + firstRegister;
		throw "Program Type " + Std.string(programType) + " not supported";
	}
	,__updateBlendStatus: function() {
		if(this.blendEnabled) {
			lime.graphics.opengl.GL.context.enable(3042);
			lime.graphics.opengl.GL.context.blendEquation(32774);
			lime.graphics.opengl.GL.context.blendFunc(this.blendSourceFactor,this.blendDestinationFactor);
		} else lime.graphics.opengl.GL.context.disable(3042);
	}
	,__class__: openfl.display3D.Context3D
};
openfl.display3D._Context3D = {};
openfl.display3D._Context3D.SamplerState = function() {
};
$hxClasses["openfl.display3D._Context3D.SamplerState"] = openfl.display3D._Context3D.SamplerState;
openfl.display3D._Context3D.SamplerState.__name__ = ["openfl","display3D","_Context3D","SamplerState"];
openfl.display3D._Context3D.SamplerState.prototype = {
	wrap: null
	,filter: null
	,mipfilter: null
	,__class__: openfl.display3D._Context3D.SamplerState
};
openfl.display3D._Context3DBlendFactor = {};
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_ = function() { };
$hxClasses["openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_"] = openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.__name__ = ["openfl","display3D","_Context3DBlendFactor","Context3DBlendFactor_Impl_"];
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_._new = function(a) {
	return a;
};
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.fromInt = function(s) {
	return s;
};
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.toInt = function(this1) {
	return this1;
};
openfl.display3D.Context3DClearMask = function() { };
$hxClasses["openfl.display3D.Context3DClearMask"] = openfl.display3D.Context3DClearMask;
openfl.display3D.Context3DClearMask.__name__ = ["openfl","display3D","Context3DClearMask"];
openfl.display3D._Context3DCompareMode = {};
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_ = function() { };
$hxClasses["openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_"] = openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.__name__ = ["openfl","display3D","_Context3DCompareMode","Context3DCompareMode_Impl_"];
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_._new = function(a) {
	return a;
};
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.fromInt = function(s) {
	return s;
};
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.toInt = function(this1) {
	return this1;
};
openfl.display3D.Context3DMipFilter = $hxClasses["openfl.display3D.Context3DMipFilter"] = { __ename__ : true, __constructs__ : ["MIPLINEAR","MIPNEAREST","MIPNONE"] };
openfl.display3D.Context3DMipFilter.MIPLINEAR = ["MIPLINEAR",0];
openfl.display3D.Context3DMipFilter.MIPLINEAR.toString = $estr;
openfl.display3D.Context3DMipFilter.MIPLINEAR.__enum__ = openfl.display3D.Context3DMipFilter;
openfl.display3D.Context3DMipFilter.MIPNEAREST = ["MIPNEAREST",1];
openfl.display3D.Context3DMipFilter.MIPNEAREST.toString = $estr;
openfl.display3D.Context3DMipFilter.MIPNEAREST.__enum__ = openfl.display3D.Context3DMipFilter;
openfl.display3D.Context3DMipFilter.MIPNONE = ["MIPNONE",2];
openfl.display3D.Context3DMipFilter.MIPNONE.toString = $estr;
openfl.display3D.Context3DMipFilter.MIPNONE.__enum__ = openfl.display3D.Context3DMipFilter;
openfl.display3D.Context3DProfile = $hxClasses["openfl.display3D.Context3DProfile"] = { __ename__ : true, __constructs__ : ["BASELINE","BASELINE_CONSTRAINED","BASELINE_EXTENDED"] };
openfl.display3D.Context3DProfile.BASELINE = ["BASELINE",0];
openfl.display3D.Context3DProfile.BASELINE.toString = $estr;
openfl.display3D.Context3DProfile.BASELINE.__enum__ = openfl.display3D.Context3DProfile;
openfl.display3D.Context3DProfile.BASELINE_CONSTRAINED = ["BASELINE_CONSTRAINED",1];
openfl.display3D.Context3DProfile.BASELINE_CONSTRAINED.toString = $estr;
openfl.display3D.Context3DProfile.BASELINE_CONSTRAINED.__enum__ = openfl.display3D.Context3DProfile;
openfl.display3D.Context3DProfile.BASELINE_EXTENDED = ["BASELINE_EXTENDED",2];
openfl.display3D.Context3DProfile.BASELINE_EXTENDED.toString = $estr;
openfl.display3D.Context3DProfile.BASELINE_EXTENDED.__enum__ = openfl.display3D.Context3DProfile;
openfl.display3D.Context3DProgramType = $hxClasses["openfl.display3D.Context3DProgramType"] = { __ename__ : true, __constructs__ : ["VERTEX","FRAGMENT"] };
openfl.display3D.Context3DProgramType.VERTEX = ["VERTEX",0];
openfl.display3D.Context3DProgramType.VERTEX.toString = $estr;
openfl.display3D.Context3DProgramType.VERTEX.__enum__ = openfl.display3D.Context3DProgramType;
openfl.display3D.Context3DProgramType.FRAGMENT = ["FRAGMENT",1];
openfl.display3D.Context3DProgramType.FRAGMENT.toString = $estr;
openfl.display3D.Context3DProgramType.FRAGMENT.__enum__ = openfl.display3D.Context3DProgramType;
openfl.display3D.Context3DRenderMode = $hxClasses["openfl.display3D.Context3DRenderMode"] = { __ename__ : true, __constructs__ : ["AUTO","SOFTWARE"] };
openfl.display3D.Context3DRenderMode.AUTO = ["AUTO",0];
openfl.display3D.Context3DRenderMode.AUTO.toString = $estr;
openfl.display3D.Context3DRenderMode.AUTO.__enum__ = openfl.display3D.Context3DRenderMode;
openfl.display3D.Context3DRenderMode.SOFTWARE = ["SOFTWARE",1];
openfl.display3D.Context3DRenderMode.SOFTWARE.toString = $estr;
openfl.display3D.Context3DRenderMode.SOFTWARE.__enum__ = openfl.display3D.Context3DRenderMode;
openfl.display3D._Context3DStencilAction = {};
openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_ = function() { };
$hxClasses["openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_"] = openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_;
openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_.__name__ = ["openfl","display3D","_Context3DStencilAction","Context3DStencilAction_Impl_"];
openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_._new = function(a) {
	return a;
};
openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_.fromInt = function(s) {
	return s;
};
openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_.toInt = function(this1) {
	return this1;
};
openfl.display3D.Context3DTextureFilter = $hxClasses["openfl.display3D.Context3DTextureFilter"] = { __ename__ : true, __constructs__ : ["ANISOTROPIC2X","ANISOTROPIC4X","ANISOTROPIC8X","ANISOTROPIC16X","LINEAR","NEAREST"] };
openfl.display3D.Context3DTextureFilter.ANISOTROPIC2X = ["ANISOTROPIC2X",0];
openfl.display3D.Context3DTextureFilter.ANISOTROPIC2X.toString = $estr;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC2X.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC4X = ["ANISOTROPIC4X",1];
openfl.display3D.Context3DTextureFilter.ANISOTROPIC4X.toString = $estr;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC4X.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC8X = ["ANISOTROPIC8X",2];
openfl.display3D.Context3DTextureFilter.ANISOTROPIC8X.toString = $estr;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC8X.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC16X = ["ANISOTROPIC16X",3];
openfl.display3D.Context3DTextureFilter.ANISOTROPIC16X.toString = $estr;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC16X.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFilter.LINEAR = ["LINEAR",4];
openfl.display3D.Context3DTextureFilter.LINEAR.toString = $estr;
openfl.display3D.Context3DTextureFilter.LINEAR.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFilter.NEAREST = ["NEAREST",5];
openfl.display3D.Context3DTextureFilter.NEAREST.toString = $estr;
openfl.display3D.Context3DTextureFilter.NEAREST.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFormat = $hxClasses["openfl.display3D.Context3DTextureFormat"] = { __ename__ : true, __constructs__ : ["BGRA","COMPRESSED","COMPRESSED_ALPHA"] };
openfl.display3D.Context3DTextureFormat.BGRA = ["BGRA",0];
openfl.display3D.Context3DTextureFormat.BGRA.toString = $estr;
openfl.display3D.Context3DTextureFormat.BGRA.__enum__ = openfl.display3D.Context3DTextureFormat;
openfl.display3D.Context3DTextureFormat.COMPRESSED = ["COMPRESSED",1];
openfl.display3D.Context3DTextureFormat.COMPRESSED.toString = $estr;
openfl.display3D.Context3DTextureFormat.COMPRESSED.__enum__ = openfl.display3D.Context3DTextureFormat;
openfl.display3D.Context3DTextureFormat.COMPRESSED_ALPHA = ["COMPRESSED_ALPHA",2];
openfl.display3D.Context3DTextureFormat.COMPRESSED_ALPHA.toString = $estr;
openfl.display3D.Context3DTextureFormat.COMPRESSED_ALPHA.__enum__ = openfl.display3D.Context3DTextureFormat;
openfl.display3D._Context3DTriangleFace = {};
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_ = function() { };
$hxClasses["openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_"] = openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_;
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.__name__ = ["openfl","display3D","_Context3DTriangleFace","Context3DTriangleFace_Impl_"];
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_._new = function(a) {
	return a;
};
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.fromInt = function(s) {
	return s;
};
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.toInt = function(this1) {
	return this1;
};
openfl.display3D.Context3DVertexBufferFormat = $hxClasses["openfl.display3D.Context3DVertexBufferFormat"] = { __ename__ : true, __constructs__ : ["BYTES_4","FLOAT_1","FLOAT_2","FLOAT_3","FLOAT_4"] };
openfl.display3D.Context3DVertexBufferFormat.BYTES_4 = ["BYTES_4",0];
openfl.display3D.Context3DVertexBufferFormat.BYTES_4.toString = $estr;
openfl.display3D.Context3DVertexBufferFormat.BYTES_4.__enum__ = openfl.display3D.Context3DVertexBufferFormat;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_1 = ["FLOAT_1",1];
openfl.display3D.Context3DVertexBufferFormat.FLOAT_1.toString = $estr;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_1.__enum__ = openfl.display3D.Context3DVertexBufferFormat;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_2 = ["FLOAT_2",2];
openfl.display3D.Context3DVertexBufferFormat.FLOAT_2.toString = $estr;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_2.__enum__ = openfl.display3D.Context3DVertexBufferFormat;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_3 = ["FLOAT_3",3];
openfl.display3D.Context3DVertexBufferFormat.FLOAT_3.toString = $estr;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_3.__enum__ = openfl.display3D.Context3DVertexBufferFormat;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_4 = ["FLOAT_4",4];
openfl.display3D.Context3DVertexBufferFormat.FLOAT_4.toString = $estr;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_4.__enum__ = openfl.display3D.Context3DVertexBufferFormat;
openfl.display3D.Context3DWrapMode = $hxClasses["openfl.display3D.Context3DWrapMode"] = { __ename__ : true, __constructs__ : ["CLAMP","REPEAT"] };
openfl.display3D.Context3DWrapMode.CLAMP = ["CLAMP",0];
openfl.display3D.Context3DWrapMode.CLAMP.toString = $estr;
openfl.display3D.Context3DWrapMode.CLAMP.__enum__ = openfl.display3D.Context3DWrapMode;
openfl.display3D.Context3DWrapMode.REPEAT = ["REPEAT",1];
openfl.display3D.Context3DWrapMode.REPEAT.toString = $estr;
openfl.display3D.Context3DWrapMode.REPEAT.__enum__ = openfl.display3D.Context3DWrapMode;
openfl.display3D.IndexBuffer3D = function(glBuffer,numIndices) {
	this.glBuffer = glBuffer;
	this.numIndices = numIndices;
};
$hxClasses["openfl.display3D.IndexBuffer3D"] = openfl.display3D.IndexBuffer3D;
openfl.display3D.IndexBuffer3D.__name__ = ["openfl","display3D","IndexBuffer3D"];
openfl.display3D.IndexBuffer3D.prototype = {
	glBuffer: null
	,numIndices: null
	,dispose: function() {
		lime.graphics.opengl.GL.context.deleteBuffer(this.glBuffer);
	}
	,uploadFromByteArray: function(byteArray,byteArrayOffset,startOffset,count) {
		var bytesPerIndex = 2;
		lime.graphics.opengl.GL.context.bindBuffer(34963,this.glBuffer);
		var length = count * bytesPerIndex;
		var offset = byteArrayOffset + startOffset * bytesPerIndex;
		var indices;
		indices = new Int16Array(length);
		byteArray.position = offset;
		var i = 0;
		while(byteArray.position < length + offset) {
			indices[i] = byteArray.readUnsignedByte();
			i++;
		}
		lime.graphics.opengl.GL.context.bufferData(34963,indices,35044);
	}
	,uploadFromVector: function(data,startOffset,count) {
		lime.graphics.opengl.GL.context.bindBuffer(34963,this.glBuffer);
		var indices;
		indices = new Int16Array(count);
		var _g1 = startOffset;
		var _g = startOffset + count;
		while(_g1 < _g) {
			var i = _g1++;
			indices[i] = data.data[i];
		}
		lime.graphics.opengl.GL.context.bufferData(34963,indices,35044);
	}
	,__class__: openfl.display3D.IndexBuffer3D
};
openfl.display3D.Program3D = function(program) {
	this.glProgram = program;
};
$hxClasses["openfl.display3D.Program3D"] = openfl.display3D.Program3D;
openfl.display3D.Program3D.__name__ = ["openfl","display3D","Program3D"];
openfl.display3D.Program3D.prototype = {
	glProgram: null
	,dispose: function() {
		lime.graphics.opengl.GL.context.deleteProgram(this.glProgram);
	}
	,upload: function(vertexShader,fragmentShader) {
		lime.graphics.opengl.GL.context.attachShader(this.glProgram,vertexShader);
		lime.graphics.opengl.GL.context.attachShader(this.glProgram,fragmentShader);
		lime.graphics.opengl.GL.context.linkProgram(this.glProgram);
		if(lime.graphics.opengl.GL.context.getProgramParameter(this.glProgram,35714) == 0) {
			var result = lime.graphics.opengl.GL.context.getProgramInfoLog(this.glProgram);
			if(result != "") throw result;
		}
	}
	,__class__: openfl.display3D.Program3D
};
openfl.display3D.VertexBuffer3D = function(glBuffer,numVertices,data32PerVertex) {
	this.glBuffer = glBuffer;
	this.numVertices = numVertices;
	this.data32PerVertex = data32PerVertex;
};
$hxClasses["openfl.display3D.VertexBuffer3D"] = openfl.display3D.VertexBuffer3D;
openfl.display3D.VertexBuffer3D.__name__ = ["openfl","display3D","VertexBuffer3D"];
openfl.display3D.VertexBuffer3D.prototype = {
	data32PerVertex: null
	,glBuffer: null
	,numVertices: null
	,dispose: function() {
		lime.graphics.opengl.GL.context.deleteBuffer(this.glBuffer);
	}
	,uploadFromByteArray: function(byteArray,byteArrayOffset,startOffset,count) {
		var bytesPerVertex = this.data32PerVertex * 4;
		lime.graphics.opengl.GL.context.bindBuffer(34962,this.glBuffer);
		var length = count * bytesPerVertex;
		var offset = byteArrayOffset + startOffset * bytesPerVertex;
		var float32Array;
		float32Array = new Float32Array(length);
		byteArray.position = offset;
		var i = 0;
		while(byteArray.position < length + offset) {
			float32Array[i] = byteArray.readUnsignedByte();
			i++;
		}
		lime.graphics.opengl.GL.context.bufferData(34962,float32Array,35044);
	}
	,uploadFromFloat32Array: function(data,startVertex,numVertices) {
		lime.graphics.opengl.GL.context.bindBuffer(34962,this.glBuffer);
		lime.graphics.opengl.GL.context.bufferData(34962,data,35044);
	}
	,uploadFromVector: function(data,startVertex,numVertices) {
		var bytesPerVertex = this.data32PerVertex * 4;
		lime.graphics.opengl.GL.context.bindBuffer(34962,this.glBuffer);
		var length = numVertices * this.data32PerVertex;
		var offset = startVertex;
		var float32Array;
		float32Array = new Float32Array(length);
		var _g1 = startVertex;
		var _g = startVertex + length;
		while(_g1 < _g) {
			var i = _g1++;
			float32Array[i] = data.data[i];
		}
		lime.graphics.opengl.GL.context.bufferData(34962,float32Array,35044);
		float32Array = null;
	}
	,__class__: openfl.display3D.VertexBuffer3D
};
openfl.display3D._shaders = {};
openfl.display3D._shaders.AGLSLShaderUtils = function() { };
$hxClasses["openfl.display3D._shaders.AGLSLShaderUtils"] = openfl.display3D._shaders.AGLSLShaderUtils;
openfl.display3D._shaders.AGLSLShaderUtils.__name__ = ["openfl","display3D","_shaders","AGLSLShaderUtils"];
openfl.display3D._shaders.AGLSLShaderUtils.compile = function(programType,source) {
	var agalMiniAssembler = new openfl.utils.AGALMiniAssembler();
	var data = null;
	var concatSource;
	switch(programType) {
	case "vertex":
		concatSource = "part vertex 1 \n" + source + "endpart";
		agalMiniAssembler.assemble(concatSource);
		data = agalMiniAssembler.r.get("vertex").data;
		break;
	case "fragment":
		concatSource = "part fragment 1 \n" + source + "endpart";
		agalMiniAssembler.assemble(concatSource);
		data = agalMiniAssembler.r.get("fragment").data;
		break;
	default:
		throw "Unknown Context3DProgramType";
	}
	return data;
};
openfl.display3D._shaders.AGLSLShaderUtils.createShader = function(type,shaderSource) {
	var aglsl = new openfl._internal.aglsl.AGLSLCompiler();
	var glType;
	var shaderType;
	switch(type[1]) {
	case 0:
		glType = 35633;
		shaderType = "vertex";
		break;
	case 1:
		glType = 35632;
		shaderType = "fragment";
		break;
	}
	var shaderSourceString = aglsl.compile(shaderType,shaderSource);
	var shader = lime.graphics.opengl.GL.context.createShader(glType);
	lime.graphics.opengl.GL.context.shaderSource(shader,shaderSourceString);
	lime.graphics.opengl.GL.context.compileShader(shader);
	if(lime.graphics.opengl.GL.context.getShaderParameter(shader,35713) == 0) {
		haxe.Log.trace("--- ERR ---\n" + shaderSourceString,{ fileName : "AGLSLShaderUtils.hx", lineNumber : 85, className : "openfl.display3D._shaders.AGLSLShaderUtils", methodName : "createShader"});
		var err = lime.graphics.opengl.GL.context.getShaderInfoLog(shader);
		if(err != "") throw err;
	}
	return shader;
};
openfl.display3D.textures = {};
openfl.display3D.textures.TextureBase = function(glTexture,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	openfl.events.EventDispatcher.call(this);
	this.width = width;
	this.height = height;
	this.glTexture = glTexture;
};
$hxClasses["openfl.display3D.textures.TextureBase"] = openfl.display3D.textures.TextureBase;
openfl.display3D.textures.TextureBase.__name__ = ["openfl","display3D","textures","TextureBase"];
openfl.display3D.textures.TextureBase.__super__ = openfl.events.EventDispatcher;
openfl.display3D.textures.TextureBase.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	height: null
	,frameBuffer: null
	,glTexture: null
	,width: null
	,dispose: function() {
		lime.graphics.opengl.GL.context.deleteTexture(this.glTexture);
	}
	,__class__: openfl.display3D.textures.TextureBase
});
openfl.display3D.textures.CubeTexture = function(glTexture,size) {
	openfl.display3D.textures.TextureBase.call(this,glTexture,size,size);
	this.size = size;
	this._textures = [];
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		this._textures[i] = lime.graphics.opengl.GL.context.createTexture();
	}
};
$hxClasses["openfl.display3D.textures.CubeTexture"] = openfl.display3D.textures.CubeTexture;
openfl.display3D.textures.CubeTexture.__name__ = ["openfl","display3D","textures","CubeTexture"];
openfl.display3D.textures.CubeTexture.__super__ = openfl.display3D.textures.TextureBase;
openfl.display3D.textures.CubeTexture.prototype = $extend(openfl.display3D.textures.TextureBase.prototype,{
	size: null
	,_textures: null
	,glTextureAt: function(index) {
		return this._textures[index];
	}
	,uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) async = false;
	}
	,uploadFromBitmapData: function(bitmapData,side,miplevel) {
		if(miplevel == null) miplevel = 0;
		var source = bitmapData.__image.get_data();
		lime.graphics.opengl.GL.context.bindTexture(34067,this.glTexture);
		switch(side) {
		case 0:
			lime.graphics.opengl.GL.context.texImage2D(34069,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 1:
			lime.graphics.opengl.GL.context.texImage2D(34070,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 2:
			lime.graphics.opengl.GL.context.texImage2D(34071,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 3:
			lime.graphics.opengl.GL.context.texImage2D(34072,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 4:
			lime.graphics.opengl.GL.context.texImage2D(34073,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 5:
			lime.graphics.opengl.GL.context.texImage2D(34074,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		default:
			throw "unknown side type";
		}
		lime.graphics.opengl.GL.context.bindTexture(34067,null);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,side,miplevel) {
		if(miplevel == null) miplevel = 0;
	}
	,__class__: openfl.display3D.textures.CubeTexture
});
openfl.display3D.textures.RectangleTexture = function(glTexture,optimize,width,height) {
	this.optimizeForRenderToTexture = optimize;
	if(this.optimizeForRenderToTexture == null) this.optimizeForRenderToTexture = false;
	openfl.display3D.textures.TextureBase.call(this,glTexture,width,height);
};
$hxClasses["openfl.display3D.textures.RectangleTexture"] = openfl.display3D.textures.RectangleTexture;
openfl.display3D.textures.RectangleTexture.__name__ = ["openfl","display3D","textures","RectangleTexture"];
openfl.display3D.textures.RectangleTexture.__super__ = openfl.display3D.textures.TextureBase;
openfl.display3D.textures.RectangleTexture.prototype = $extend(openfl.display3D.textures.TextureBase.prototype,{
	optimizeForRenderToTexture: null
	,uploadFromBitmapData: function(bitmapData,miplevel) {
		if(miplevel == null) miplevel = 0;
		var p = lime.utils.ByteArray.__ofBuffer(bitmapData.__image.get_data().buffer);
		this.width = bitmapData.width;
		this.height = bitmapData.height;
		this.uploadFromByteArray(p,0);
	}
	,uploadFromByteArray: function(data,byteArrayOffset) {
		lime.graphics.opengl.GL.context.bindTexture(3553,this.glTexture);
		if(this.optimizeForRenderToTexture) lime.graphics.opengl.GL.context.pixelStorei(37440,1);
		lime.graphics.opengl.GL.context.texParameteri(3553,10240,9728);
		lime.graphics.opengl.GL.context.texParameteri(3553,10241,9728);
		lime.graphics.opengl.GL.context.texParameteri(3553,10242,33071);
		lime.graphics.opengl.GL.context.texParameteri(3553,10243,33071);
		var source = new Uint8Array(data.length);
		data.position = byteArrayOffset;
		var i = 0;
		while(data.position < data.length) {
			source[i] = data.readUnsignedByte();
			i++;
		}
		lime.graphics.opengl.GL.context.texImage2D(3553,0,6408,this.width,this.height,0,6408,5121,source);
		lime.graphics.opengl.GL.context.bindTexture(3553,null);
	}
	,__class__: openfl.display3D.textures.RectangleTexture
});
openfl.display3D.textures.Texture = function(glTexture,optimize,width,height) {
	this.optimizeForRenderToTexture = optimize;
	if(this.optimizeForRenderToTexture == null) this.optimizeForRenderToTexture = false;
	openfl.display3D.textures.TextureBase.call(this,glTexture,width,height);
};
$hxClasses["openfl.display3D.textures.Texture"] = openfl.display3D.textures.Texture;
openfl.display3D.textures.Texture.__name__ = ["openfl","display3D","textures","Texture"];
openfl.display3D.textures.Texture.__super__ = openfl.display3D.textures.TextureBase;
openfl.display3D.textures.Texture.prototype = $extend(openfl.display3D.textures.TextureBase.prototype,{
	optimizeForRenderToTexture: null
	,uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) async = false;
	}
	,uploadFromBitmapData: function(bitmapData,miplevel) {
		if(miplevel == null) miplevel = 0;
		var p = lime.utils.ByteArray.__ofBuffer(bitmapData.__image.get_data().buffer);
		this.width = bitmapData.width;
		this.height = bitmapData.height;
		this.uploadFromByteArray(p,0,miplevel);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,miplevel) {
		if(miplevel == null) miplevel = 0;
		lime.graphics.opengl.GL.context.bindTexture(3553,this.glTexture);
		if(this.optimizeForRenderToTexture) {
			lime.graphics.opengl.GL.context.pixelStorei(37440,1);
			lime.graphics.opengl.GL.context.texParameteri(3553,10240,9728);
			lime.graphics.opengl.GL.context.texParameteri(3553,10241,9728);
			lime.graphics.opengl.GL.context.texParameteri(3553,10242,33071);
			lime.graphics.opengl.GL.context.texParameteri(3553,10243,33071);
		}
		var source = new Uint8Array(data.length);
		data.position = byteArrayOffset;
		var i = 0;
		while(data.position < data.length) {
			source[i] = data.readUnsignedByte();
			i++;
		}
		lime.graphics.opengl.GL.context.texImage2D(3553,miplevel,6408,this.width,this.height,0,6408,5121,source);
		lime.graphics.opengl.GL.context.bindTexture(3553,null);
	}
	,__class__: openfl.display3D.textures.Texture
});
openfl.errors.ArgumentError = function(inMessage) {
	if(inMessage == null) inMessage = "";
	openfl.errors.Error.call(this,inMessage);
};
$hxClasses["openfl.errors.ArgumentError"] = openfl.errors.ArgumentError;
openfl.errors.ArgumentError.__name__ = ["openfl","errors","ArgumentError"];
openfl.errors.ArgumentError.__super__ = openfl.errors.Error;
openfl.errors.ArgumentError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: openfl.errors.ArgumentError
});
openfl.errors.IOError = function(message) {
	if(message == null) message = "";
	openfl.errors.Error.call(this,message);
};
$hxClasses["openfl.errors.IOError"] = openfl.errors.IOError;
openfl.errors.IOError.__name__ = ["openfl","errors","IOError"];
openfl.errors.IOError.__super__ = openfl.errors.Error;
openfl.errors.IOError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: openfl.errors.IOError
});
openfl.errors.IllegalOperationError = function(inMessage) {
	if(inMessage == null) inMessage = "";
	openfl.errors.Error.call(this,inMessage,0);
};
$hxClasses["openfl.errors.IllegalOperationError"] = openfl.errors.IllegalOperationError;
openfl.errors.IllegalOperationError.__name__ = ["openfl","errors","IllegalOperationError"];
openfl.errors.IllegalOperationError.__super__ = openfl.errors.Error;
openfl.errors.IllegalOperationError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: openfl.errors.IllegalOperationError
});
openfl.errors.RangeError = function(inMessage) {
	if(inMessage == null) inMessage = "";
	openfl.errors.Error.call(this,inMessage,0);
};
$hxClasses["openfl.errors.RangeError"] = openfl.errors.RangeError;
openfl.errors.RangeError.__name__ = ["openfl","errors","RangeError"];
openfl.errors.RangeError.__super__ = openfl.errors.Error;
openfl.errors.RangeError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: openfl.errors.RangeError
});
openfl.errors.TypeError = function(inMessage) {
	if(inMessage == null) inMessage = "";
	openfl.errors.Error.call(this,inMessage,0);
};
$hxClasses["openfl.errors.TypeError"] = openfl.errors.TypeError;
openfl.errors.TypeError.__name__ = ["openfl","errors","TypeError"];
openfl.errors.TypeError.__super__ = openfl.errors.Error;
openfl.errors.TypeError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: openfl.errors.TypeError
});
openfl.events.TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl.events.TextEvent;
openfl.events.TextEvent.__name__ = ["openfl","events","TextEvent"];
openfl.events.TextEvent.__super__ = openfl.events.Event;
openfl.events.TextEvent.prototype = $extend(openfl.events.Event.prototype,{
	text: null
	,clone: function() {
		return new openfl.events.TextEvent(this.type,this.bubbles,this.cancelable,this.text);
	}
	,toString: function() {
		return "[TextEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + "]";
	}
	,__class__: openfl.events.TextEvent
});
openfl.events.ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl.events.ErrorEvent;
openfl.events.ErrorEvent.__name__ = ["openfl","events","ErrorEvent"];
openfl.events.ErrorEvent.__super__ = openfl.events.TextEvent;
openfl.events.ErrorEvent.prototype = $extend(openfl.events.TextEvent.prototype,{
	errorID: null
	,clone: function() {
		return new openfl.events.ErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
	}
	,toString: function() {
		return "[ErrorEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + " errorID=" + this.errorID + "]";
	}
	,__class__: openfl.events.ErrorEvent
});
openfl.events._EventDispatcher = {};
openfl.events._EventDispatcher.Listener = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl.events._EventDispatcher.Listener;
openfl.events._EventDispatcher.Listener.__name__ = ["openfl","events","_EventDispatcher","Listener"];
openfl.events._EventDispatcher.Listener.prototype = {
	callback: null
	,priority: null
	,useCapture: null
	,match: function(callback,useCapture) {
		return Reflect.compareMethods(this.callback,callback) && this.useCapture == useCapture;
	}
	,__class__: openfl.events._EventDispatcher.Listener
};
openfl.events.FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) keyCode = 0;
	if(shiftKey == null) shiftKey = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl.events.FocusEvent;
openfl.events.FocusEvent.__name__ = ["openfl","events","FocusEvent"];
openfl.events.FocusEvent.__super__ = openfl.events.Event;
openfl.events.FocusEvent.prototype = $extend(openfl.events.Event.prototype,{
	keyCode: null
	,relatedObject: null
	,shiftKey: null
	,clone: function() {
		var event = new openfl.events.FocusEvent(this.type,this.bubbles,this.cancelable,this.relatedObject,this.shiftKey,this.keyCode);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return "[FocusEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " relatedObject=" + Std.string(this.relatedObject) + " shiftKey=" + Std.string(this.shiftKey) + " keyCode=" + this.keyCode + "]";
	}
	,__class__: openfl.events.FocusEvent
});
openfl.events.HTTPStatusEvent = function(type,bubbles,cancelable,status) {
	if(status == null) status = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.status = status;
	openfl.events.Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl.events.HTTPStatusEvent;
openfl.events.HTTPStatusEvent.__name__ = ["openfl","events","HTTPStatusEvent"];
openfl.events.HTTPStatusEvent.__super__ = openfl.events.Event;
openfl.events.HTTPStatusEvent.prototype = $extend(openfl.events.Event.prototype,{
	responseHeaders: null
	,responseURL: null
	,status: null
	,__class__: openfl.events.HTTPStatusEvent
});
openfl.events.IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl.events.ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl.events.IOErrorEvent;
openfl.events.IOErrorEvent.__name__ = ["openfl","events","IOErrorEvent"];
openfl.events.IOErrorEvent.__super__ = openfl.events.ErrorEvent;
openfl.events.IOErrorEvent.prototype = $extend(openfl.events.ErrorEvent.prototype,{
	clone: function() {
		return new openfl.events.IOErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
	}
	,toString: function() {
		return "[IOErrorEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + " errorID=" + this.errorID + "]";
	}
	,__class__: openfl.events.IOErrorEvent
});
openfl.events.KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) commandKeyValue = false;
	if(controlKeyValue == null) controlKeyValue = false;
	if(shiftKeyValue == null) shiftKeyValue = false;
	if(altKeyValue == null) altKeyValue = false;
	if(ctrlKeyValue == null) ctrlKeyValue = false;
	if(keyCodeValue == null) keyCodeValue = 0;
	if(charCodeValue == null) charCodeValue = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	if(keyLocationValue != null) this.keyLocation = keyLocationValue; else this.keyLocation = 0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl.events.KeyboardEvent;
openfl.events.KeyboardEvent.__name__ = ["openfl","events","KeyboardEvent"];
openfl.events.KeyboardEvent.__super__ = openfl.events.Event;
openfl.events.KeyboardEvent.prototype = $extend(openfl.events.Event.prototype,{
	altKey: null
	,charCode: null
	,ctrlKey: null
	,commandKey: null
	,controlKey: null
	,keyCode: null
	,keyLocation: null
	,shiftKey: null
	,clone: function() {
		return new openfl.events.KeyboardEvent(this.type,this.bubbles,this.cancelable,this.charCode,this.keyCode,this.keyLocation,this.ctrlKey,this.altKey,this.shiftKey,this.controlKey,this.commandKey);
	}
	,toString: function() {
		return "[KeyboardEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " charCode=" + this.charCode + " keyCode=" + this.keyCode + " keyLocation=" + Std.string(this.keyLocation) + " ctrlKey=" + Std.string(this.ctrlKey) + " altKey=" + Std.string(this.altKey) + " shiftKey=" + Std.string(this.shiftKey) + "]";
	}
	,__class__: openfl.events.KeyboardEvent
});
openfl.events.MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
};
$hxClasses["openfl.events.MouseEvent"] = openfl.events.MouseEvent;
openfl.events.MouseEvent.__name__ = ["openfl","events","MouseEvent"];
openfl.events.MouseEvent.__altKey = null;
openfl.events.MouseEvent.__commandKey = null;
openfl.events.MouseEvent.__ctrlKey = null;
openfl.events.MouseEvent.__shiftKey = null;
openfl.events.MouseEvent.__create = function(type,button,stageX,stageY,local,target,delta) {
	if(delta == null) delta = 0;
	switch(type) {
	case openfl.events.MouseEvent.MOUSE_DOWN:case openfl.events.MouseEvent.MIDDLE_MOUSE_DOWN:case openfl.events.MouseEvent.RIGHT_MOUSE_DOWN:
		openfl.events.MouseEvent.__buttonDown[button] = true;
		break;
	case openfl.events.MouseEvent.MOUSE_UP:case openfl.events.MouseEvent.MIDDLE_MOUSE_UP:case openfl.events.MouseEvent.RIGHT_MOUSE_UP:
		openfl.events.MouseEvent.__buttonDown[button] = false;
		break;
	}
	var event = new openfl.events.MouseEvent(type,true,false,local.x,local.y,null,openfl.events.MouseEvent.__ctrlKey,openfl.events.MouseEvent.__altKey,openfl.events.MouseEvent.__shiftKey,openfl.events.MouseEvent.__buttonDown[button],delta,openfl.events.MouseEvent.__commandKey);
	event.stageX = stageX;
	event.stageY = stageY;
	event.target = target;
	return event;
};
openfl.events.MouseEvent.__super__ = openfl.events.Event;
openfl.events.MouseEvent.prototype = $extend(openfl.events.Event.prototype,{
	altKey: null
	,buttonDown: null
	,commandKey: null
	,clickCount: null
	,ctrlKey: null
	,delta: null
	,localX: null
	,localY: null
	,relatedObject: null
	,shiftKey: null
	,stageX: null
	,stageY: null
	,clone: function() {
		return new openfl.events.MouseEvent(this.type,this.bubbles,this.cancelable,this.localX,this.localY,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.buttonDown,this.delta,this.commandKey,this.clickCount);
	}
	,toString: function() {
		return "[MouseEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " localX=" + this.localX + " localY=" + this.localY + " relatedObject=" + Std.string(this.relatedObject) + " ctrlKey=" + Std.string(this.ctrlKey) + " altKey=" + Std.string(this.altKey) + " shiftKey=" + Std.string(this.shiftKey) + " buttonDown=" + Std.string(this.buttonDown) + " delta=" + this.delta + "]";
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl.events.MouseEvent
});
openfl.events.NetStatusEvent = function(type,bubbles,cancelable,info) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.info = info;
	openfl.events.Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.NetStatusEvent"] = openfl.events.NetStatusEvent;
openfl.events.NetStatusEvent.__name__ = ["openfl","events","NetStatusEvent"];
openfl.events.NetStatusEvent.__super__ = openfl.events.Event;
openfl.events.NetStatusEvent.prototype = $extend(openfl.events.Event.prototype,{
	info: null
	,__class__: openfl.events.NetStatusEvent
});
openfl.events.ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) bytesTotal = 0;
	if(bytesLoaded == null) bytesLoaded = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl.events.ProgressEvent;
openfl.events.ProgressEvent.__name__ = ["openfl","events","ProgressEvent"];
openfl.events.ProgressEvent.__super__ = openfl.events.Event;
openfl.events.ProgressEvent.prototype = $extend(openfl.events.Event.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,clone: function() {
		return new openfl.events.ProgressEvent(this.type,this.bubbles,this.cancelable,this.bytesLoaded,this.bytesTotal);
	}
	,toString: function() {
		return "[ProgressEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " bytesLoaded=" + this.bytesLoaded + " bytesTotal=" + this.bytesTotal + "]";
	}
	,__class__: openfl.events.ProgressEvent
});
openfl.events.SecurityErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl.events.SecurityErrorEvent;
openfl.events.SecurityErrorEvent.__name__ = ["openfl","events","SecurityErrorEvent"];
openfl.events.SecurityErrorEvent.__super__ = openfl.events.ErrorEvent;
openfl.events.SecurityErrorEvent.prototype = $extend(openfl.events.ErrorEvent.prototype,{
	clone: function() {
		return new openfl.events.SecurityErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
	}
	,toString: function() {
		return "[SecurityErrorEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + " errorID=" + this.errorID + "]";
	}
	,__class__: openfl.events.SecurityErrorEvent
});
openfl.events.TouchEvent = function(type,bubbles,cancelable,localX,localY,sizeX,sizeY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(sizeY == null) sizeY = 1;
	if(sizeX == null) sizeX = 1;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.pressure = 1;
	this.touchPointID = 0;
	this.isPrimaryTouchPoint = true;
};
$hxClasses["openfl.events.TouchEvent"] = openfl.events.TouchEvent;
openfl.events.TouchEvent.__name__ = ["openfl","events","TouchEvent"];
openfl.events.TouchEvent.__create = function(type,touch,stageX,stageY,local,target) {
	var evt = new openfl.events.TouchEvent(type,true,false,local.x,local.y,null,null,null,false,false,false,false,0,null,0);
	evt.stageX = stageX;
	evt.stageY = stageY;
	evt.target = target;
	return evt;
};
openfl.events.TouchEvent.__super__ = openfl.events.Event;
openfl.events.TouchEvent.prototype = $extend(openfl.events.Event.prototype,{
	altKey: null
	,buttonDown: null
	,commandKey: null
	,ctrlKey: null
	,delta: null
	,isPrimaryTouchPoint: null
	,localX: null
	,localY: null
	,pressure: null
	,relatedObject: null
	,shiftKey: null
	,sizeX: null
	,sizeY: null
	,stageX: null
	,stageY: null
	,touchPointID: null
	,updateAfterEvent: function() {
	}
	,__class__: openfl.events.TouchEvent
});
openfl.filters = {};
openfl.filters.BitmapFilter = function() {
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl.filters.BitmapFilter;
openfl.filters.BitmapFilter.__name__ = ["openfl","filters","BitmapFilter"];
openfl.filters.BitmapFilter.prototype = {
	clone: function() {
		return new openfl.filters.BitmapFilter();
	}
	,__applyFilter: function(sourceData,targetData,sourceRect,destPoint) {
	}
	,__class__: openfl.filters.BitmapFilter
};
openfl.geom.Orientation3D = $hxClasses["openfl.geom.Orientation3D"] = { __ename__ : true, __constructs__ : ["AXIS_ANGLE","EULER_ANGLES","QUATERNION"] };
openfl.geom.Orientation3D.AXIS_ANGLE = ["AXIS_ANGLE",0];
openfl.geom.Orientation3D.AXIS_ANGLE.toString = $estr;
openfl.geom.Orientation3D.AXIS_ANGLE.__enum__ = openfl.geom.Orientation3D;
openfl.geom.Orientation3D.EULER_ANGLES = ["EULER_ANGLES",1];
openfl.geom.Orientation3D.EULER_ANGLES.toString = $estr;
openfl.geom.Orientation3D.EULER_ANGLES.__enum__ = openfl.geom.Orientation3D;
openfl.geom.Orientation3D.QUATERNION = ["QUATERNION",2];
openfl.geom.Orientation3D.QUATERNION.toString = $estr;
openfl.geom.Orientation3D.QUATERNION.__enum__ = openfl.geom.Orientation3D;
openfl.geom.Transform = function(displayObject) {
	this.__colorTransform = new openfl.geom.ColorTransform();
	this.concatenatedColorTransform = new openfl.geom.ColorTransform();
	this.concatenatedMatrix = new openfl.geom.Matrix();
	this.pixelBounds = new openfl.geom.Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl.geom.Transform;
openfl.geom.Transform.__name__ = ["openfl","geom","Transform"];
openfl.geom.Transform.prototype = {
	concatenatedColorTransform: null
	,concatenatedMatrix: null
	,pixelBounds: null
	,__colorTransform: null
	,__displayObject: null
	,__hasMatrix: null
	,__hasMatrix3D: null
	,get_colorTransform: function() {
		return this.__colorTransform;
	}
	,set_colorTransform: function(value) {
		this.__colorTransform = value;
		if(value != null) this.__displayObject.set_alpha(value.alphaMultiplier);
		return this.__colorTransform;
	}
	,get_matrix: function() {
		if(this.__hasMatrix) {
			var matrix = new openfl.geom.Matrix();
			matrix.scale(this.__displayObject.get_scaleX(),this.__displayObject.get_scaleY());
			matrix.rotate(this.__displayObject.get_rotation() * (Math.PI / 180));
			matrix.translate(this.__displayObject.get_x(),this.__displayObject.get_y());
			return matrix;
		}
		return null;
	}
	,set_matrix: function(value) {
		if(value == null) {
			this.__hasMatrix = false;
			return null;
		}
		this.__hasMatrix = true;
		this.__hasMatrix3D = false;
		if(this.__displayObject != null) {
			this.__displayObject.set_x(value.tx);
			this.__displayObject.set_y(value.ty);
			this.__displayObject.set_scaleX(Math.sqrt(value.a * value.a + value.b * value.b));
			this.__displayObject.set_scaleY(Math.sqrt(value.c * value.c + value.d * value.d));
			this.__displayObject.set_rotation(Math.atan2(value.b,value.a) * (180 / Math.PI));
		}
		return value;
	}
	,get_matrix3D: function() {
		if(this.__hasMatrix3D) {
			var matrix = new openfl.geom.Matrix();
			matrix.scale(this.__displayObject.get_scaleX(),this.__displayObject.get_scaleY());
			matrix.rotate(this.__displayObject.get_rotation() * (Math.PI / 180));
			matrix.translate(this.__displayObject.get_x(),this.__displayObject.get_y());
			return new openfl.geom.Matrix3D((function($this) {
				var $r;
				var value = [matrix.a,matrix.b,0.0,0.0,matrix.c,matrix.d,0.0,0.0,0.0,0.0,1.0,0.0,matrix.tx,matrix.ty,0.0,1.0];
				var vectorData = new openfl.VectorData();
				vectorData.length = value.length;
				vectorData.fixed = true;
				{
					var vec;
					var this1;
					this1 = new Array(value.length);
					vec = this1;
					var _g1 = 0;
					var _g = value.length;
					while(_g1 < _g) {
						var i = _g1++;
						vec[i] = value[i];
					}
					vectorData.data = vec;
				}
				$r = vectorData;
				return $r;
			}(this)));
		}
		return null;
	}
	,set_matrix3D: function(value) {
		if(value == null) {
			this.__hasMatrix3D = false;
			return null;
		}
		this.__hasMatrix = false;
		this.__hasMatrix3D = true;
		if(this.__displayObject != null) {
			this.__displayObject.set_x(value.rawData.data[12]);
			this.__displayObject.set_y(value.rawData.data[13]);
			this.__displayObject.set_scaleX(Math.sqrt(value.rawData.data[0] * value.rawData.data[0] + value.rawData.data[1] * value.rawData.data[1]));
			this.__displayObject.set_scaleY(Math.sqrt(value.rawData.data[4] * value.rawData.data[4] + value.rawData.data[5] * value.rawData.data[5]));
			this.__displayObject.set_rotation(Math.atan2(value.rawData.data[1],value.rawData.data[0]) * (180 / Math.PI));
		}
		return value;
	}
	,__class__: openfl.geom.Transform
	,__properties__: {set_matrix3D:"set_matrix3D",get_matrix3D:"get_matrix3D",set_matrix:"set_matrix",get_matrix:"get_matrix",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform"}
};
openfl.media = {};
openfl.media.ID3Info = function() {
};
$hxClasses["openfl.media.ID3Info"] = openfl.media.ID3Info;
openfl.media.ID3Info.__name__ = ["openfl","media","ID3Info"];
openfl.media.ID3Info.prototype = {
	album: null
	,artist: null
	,comment: null
	,genre: null
	,songName: null
	,track: null
	,year: null
	,__class__: openfl.media.ID3Info
};
openfl.media.Sound = function(stream,context) {
	openfl.events.EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.id3 = null;
	this.isBuffering = false;
	this.length = 0;
	this.url = null;
	if(stream != null) this.load(stream,context);
};
$hxClasses["openfl.media.Sound"] = openfl.media.Sound;
openfl.media.Sound.__name__ = ["openfl","media","Sound"];
openfl.media.Sound.fromAudioBuffer = function(buffer) {
	var sound = new openfl.media.Sound();
	sound.__buffer = buffer;
	return sound;
};
openfl.media.Sound.fromFile = function(path) {
	return openfl.media.Sound.fromAudioBuffer(lime.audio.AudioBuffer.fromFile(path));
};
openfl.media.Sound.__super__ = openfl.events.EventDispatcher;
openfl.media.Sound.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,id3: null
	,isBuffering: null
	,length: null
	,url: null
	,__buffer: null
	,__sound: null
	,__soundID: null
	,close: function() {
		if(openfl.media.Sound.__registeredSounds.exists(this.__soundID)) createjs.Sound.removeSound(this.__soundID);
	}
	,load: function(stream,context) {
		this.url = stream.url;
		this.__soundID = haxe.io.Path.withoutExtension(stream.url);
		if(!openfl.media.Sound.__registeredSounds.exists(this.__soundID)) {
			openfl.media.Sound.__registeredSounds.set(this.__soundID,true);
			createjs.Sound.addEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.addEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			createjs.Sound.registerSound(this.url,this.__soundID);
		} else this.dispatchEvent(new openfl.events.Event(openfl.events.Event.COMPLETE));
	}
	,loadCompressedDataFromByteArray: function(bytes,bytesLength,forcePlayAsMusic) {
		if(forcePlayAsMusic == null) forcePlayAsMusic = false;
		openfl.Lib.notImplemented("Sound.loadCompressedDataFromByteArray");
	}
	,loadPCMFromByteArray: function(bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) sampleRate = 44100;
		if(stereo == null) stereo = true;
		openfl.Lib.notImplemented("Sound.loadPCMFromByteArray");
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0.0;
		if(sndTransform == null) sndTransform = new openfl.media.SoundTransform(1,0);
		var instance;
		if(loops > 1) instance = createjs.Sound.play(this.__soundID,"any",0,startTime | 0,loops - 1,sndTransform.volume,sndTransform.pan); else instance = createjs.Sound.play(this.__soundID,"any",0,startTime | 0,0,sndTransform.volume,sndTransform.pan);
		return new openfl.media.SoundChannel(instance);
	}
	,get_id3: function() {
		return new openfl.media.ID3Info();
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		this.__buffer = buffer;
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.COMPLETE));
	}
	,SoundJS_onFileLoad: function(event) {
		if(event.id == this.__soundID) {
			createjs.Sound.removeEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.removeEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			this.dispatchEvent(new openfl.events.Event(openfl.events.Event.COMPLETE));
		}
	}
	,SoundJS_onFileError: function(event) {
		if(event.id == this.__soundID) {
			createjs.Sound.removeEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.removeEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			this.dispatchEvent(new openfl.events.IOErrorEvent(openfl.events.IOErrorEvent.IO_ERROR));
		}
	}
	,__class__: openfl.media.Sound
	,__properties__: {get_id3:"get_id3"}
});
openfl.media.SoundChannel = function(soundInstance) {
	openfl.events.EventDispatcher.call(this,this);
	this.leftPeak = 1;
	this.rightPeak = 1;
	if(soundInstance != null) {
		this.__soundInstance = soundInstance;
		this.__soundInstance.addEventListener("complete",$bind(this,this.source_onComplete));
		this.__isValid = true;
	}
};
$hxClasses["openfl.media.SoundChannel"] = openfl.media.SoundChannel;
openfl.media.SoundChannel.__name__ = ["openfl","media","SoundChannel"];
openfl.media.SoundChannel.__super__ = openfl.events.EventDispatcher;
openfl.media.SoundChannel.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	leftPeak: null
	,rightPeak: null
	,__isValid: null
	,__source: null
	,__soundInstance: null
	,stop: function() {
		if(!this.__isValid) return;
		this.__soundInstance.stop();
	}
	,__dispose: function() {
		if(!this.__isValid) return;
		this.__soundInstance.stop();
		this.__soundInstance = null;
	}
	,get_position: function() {
		if(!this.__isValid) return 0;
		return this.__soundInstance.getPosition();
	}
	,set_position: function(value) {
		if(!this.__isValid) return 0;
		this.__soundInstance.setPosition(value | 0);
		return this.__soundInstance.getPosition();
	}
	,get_soundTransform: function() {
		if(!this.__isValid) return new openfl.media.SoundTransform();
		return new openfl.media.SoundTransform(this.__soundInstance.getVolume(),this.__soundInstance.getPan());
	}
	,set_soundTransform: function(value) {
		if(!this.__isValid) return value;
		this.__soundInstance.setVolume(value.volume);
		this.__soundInstance.setPan(value.pan);
		return value;
	}
	,soundInstance_onComplete: function(_) {
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.SOUND_COMPLETE));
	}
	,source_onComplete: function() {
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.SOUND_COMPLETE));
	}
	,__class__: openfl.media.SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_position:"set_position",get_position:"get_position"}
});
openfl.media.SoundLoaderContext = function(bufferTime,checkPolicyFile) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	if(bufferTime == null) bufferTime = 0;
	this.bufferTime = bufferTime;
	this.checkPolicyFile = checkPolicyFile;
};
$hxClasses["openfl.media.SoundLoaderContext"] = openfl.media.SoundLoaderContext;
openfl.media.SoundLoaderContext.__name__ = ["openfl","media","SoundLoaderContext"];
openfl.media.SoundLoaderContext.prototype = {
	bufferTime: null
	,checkPolicyFile: null
	,__class__: openfl.media.SoundLoaderContext
};
openfl.media.SoundTransform = function(vol,panning) {
	if(panning == null) panning = 0;
	if(vol == null) vol = 1;
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl.media.SoundTransform;
openfl.media.SoundTransform.__name__ = ["openfl","media","SoundTransform"];
openfl.media.SoundTransform.prototype = {
	leftToLeft: null
	,leftToRight: null
	,pan: null
	,rightToLeft: null
	,rightToRight: null
	,volume: null
	,clone: function() {
		return new openfl.media.SoundTransform(this.volume,this.pan);
	}
	,__class__: openfl.media.SoundTransform
};
openfl.net = {};
openfl.net.NetConnection = function() {
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["openfl.net.NetConnection"] = openfl.net.NetConnection;
openfl.net.NetConnection.__name__ = ["openfl","net","NetConnection"];
openfl.net.NetConnection.__super__ = openfl.events.EventDispatcher;
openfl.net.NetConnection.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	connect: function(command,_,_1,_2,_3,_4) {
		if(command != null) throw "Error: Can only connect in \"HTTP streaming\" mode";
		this.dispatchEvent(new openfl.events.NetStatusEvent(openfl.events.NetStatusEvent.NET_STATUS,false,true,{ code : "connectSuccess"}));
	}
	,__class__: openfl.net.NetConnection
});
openfl.net.NetStream = function(connection) {
	openfl.events.EventDispatcher.call(this);
	this.__connection = connection;
	this.__video = window.document.createElement("video");
	this.__video.addEventListener("error",$bind(this,this.video_onError),false);
	this.__video.addEventListener("waiting",$bind(this,this.video_onWaiting),false);
	this.__video.addEventListener("ended",$bind(this,this.video_onEnd),false);
	this.__video.addEventListener("pause",$bind(this,this.video_onPause),false);
	this.__video.addEventListener("seeking",$bind(this,this.video_onSeeking),false);
	this.__video.addEventListener("playing",$bind(this,this.video_onPlaying),false);
	this.__video.addEventListener("timeupdate",$bind(this,this.video_onTimeUpdate),false);
	this.__video.addEventListener("loadstart",$bind(this,this.video_onLoadStart),false);
	this.__video.addEventListener("stalled",$bind(this,this.video_onStalled),false);
	this.__video.addEventListener("durationchanged",$bind(this,this.video_onDurationChanged),false);
	this.__video.addEventListener("canplay",$bind(this,this.video_onCanPlay),false);
	this.__video.addEventListener("canplaythrough",$bind(this,this.video_onCanPlayThrough),false);
};
$hxClasses["openfl.net.NetStream"] = openfl.net.NetStream;
openfl.net.NetStream.__name__ = ["openfl","net","NetStream"];
openfl.net.NetStream.__super__ = openfl.events.EventDispatcher;
openfl.net.NetStream.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	audioCodec: null
	,bufferLength: null
	,bufferTime: null
	,bytesLoaded: null
	,bytesTotal: null
	,checkPolicyFile: null
	,client: null
	,currentFPS: null
	,decodedFrames: null
	,liveDelay: null
	,objectEncoding: null
	,soundTransform: null
	,time: null
	,videoCodec: null
	,__connection: null
	,__timer: null
	,__video: null
	,pause: function() {
		this.__video.pause();
	}
	,play: function(url,_,_1,_2,_3,_4) {
		this.__video.src = url;
		this.__video.play();
	}
	,requestVideoStatus: function() {
		var _g = this;
		if(this.__timer == null) this.__timer = new haxe.Timer(1);
		this.__timer.run = function() {
			if(_g.__video.paused) _g.__playStatus("NetStream.Play.pause"); else _g.__playStatus("NetStream.Play.playing");
			_g.__timer.stop();
		};
	}
	,resume: function() {
		this.__video.play();
	}
	,seek: function(offset) {
		var time = this.__video.currentTime + offset;
		if(time < 0) time = 0; else if(time > this.__video.duration) time = this.__video.duration;
		this.__video.currentTime = time;
	}
	,togglePause: function() {
		if(this.__video.paused) this.__video.play(); else this.__video.pause();
	}
	,__playStatus: function(code) {
		if(this.client != null) try {
			var handler = this.client.onPlayStatus;
			handler({ code : code, duration : this.__video.duration, position : this.__video.currentTime, speed : this.__video.playbackRate, start : this.__video.startTime});
		} catch( e ) {
		}
	}
	,video_onCanPlay: function(event) {
		this.__playStatus("NetStream.Play.canplay");
	}
	,video_onCanPlayThrough: function(event) {
		this.__playStatus("NetStream.Play.canplaythrough");
	}
	,video_onDurationChanged: function(event) {
		this.__playStatus("NetStream.Play.durationchanged");
	}
	,video_onEnd: function(event) {
		this.__connection.dispatchEvent(new openfl.events.NetStatusEvent(openfl.events.NetStatusEvent.NET_STATUS,false,false,{ code : "NetStream.Play.Stop"}));
		this.__playStatus("NetStream.Play.Complete");
	}
	,video_onError: function(event) {
		this.__connection.dispatchEvent(new openfl.events.NetStatusEvent(openfl.events.NetStatusEvent.NET_STATUS,false,false,{ code : "NetStream.Play.Stop"}));
		this.__playStatus("NetStream.Play.error");
	}
	,video_onLoadStart: function(event) {
		this.__playStatus("NetStream.Play.loadstart");
	}
	,video_onPause: function(event) {
		this.__playStatus("NetStream.Play.pause");
	}
	,video_onPlaying: function(event) {
		this.__connection.dispatchEvent(new openfl.events.NetStatusEvent(openfl.events.NetStatusEvent.NET_STATUS,false,false,{ code : "NetStream.Play.Start"}));
		this.__playStatus("NetStream.Play.playing");
	}
	,video_onSeeking: function(event) {
		this.__playStatus("NetStream.Play.seeking");
	}
	,video_onStalled: function(event) {
		this.__playStatus("NetStream.Play.stalled");
	}
	,video_onTimeUpdate: function(event) {
		this.__playStatus("NetStream.Play.timeupdate");
	}
	,video_onWaiting: function(event) {
		this.__playStatus("NetStream.Play.waiting");
	}
	,get_speed: function() {
		return this.__video.playbackRate;
	}
	,set_speed: function(value) {
		return this.__video.playbackRate = value;
	}
	,__class__: openfl.net.NetStream
	,__properties__: {set_speed:"set_speed",get_speed:"get_speed"}
});
openfl.net.URLLoader = function(request) {
	openfl.events.EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.set_dataFormat(openfl.net.URLLoaderDataFormat.TEXT);
	if(request != null) this.load(request);
};
$hxClasses["openfl.net.URLLoader"] = openfl.net.URLLoader;
openfl.net.URLLoader.__name__ = ["openfl","net","URLLoader"];
openfl.net.URLLoader.__super__ = openfl.events.EventDispatcher;
openfl.net.URLLoader.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,data: null
	,dataFormat: null
	,close: function() {
	}
	,getData: function() {
		return null;
	}
	,load: function(request) {
		this.requestUrl(request.url,request.method,request.data,request.formatRequestHeaders());
	}
	,registerEvents: function(subject) {
		var self = this;
		if(typeof XMLHttpRequestProgressEvent != "undefined") subject.addEventListener("progress",$bind(this,this.onProgress),false);
		subject.onreadystatechange = function() {
			if(subject.readyState != 4) return;
			var s;
			try {
				s = subject.status;
			} catch( e ) {
				s = null;
			}
			if(s == undefined) s = null;
			if(s != null) self.onStatus(s);
			if(s != null && s >= 200 && s < 400) self.onData(subject.response); else if(s == null) self.onError("Failed to connect or resolve host"); else if(s == 12029) self.onError("Failed to connect to host"); else if(s == 12007) self.onError("Unknown host"); else if(s == 0) {
				self.onError("Unable to make request (may be blocked due to cross-domain permissions)");
				self.onSecurityError("Unable to make request (may be blocked due to cross-domain permissions)");
			} else self.onError("Http Error #" + subject.status);
		};
	}
	,requestUrl: function(url,method,data,requestHeaders) {
		var xmlHttpRequest = new XMLHttpRequest();
		this.registerEvents(xmlHttpRequest);
		var uri = "";
		if(js.Boot.__instanceof(data,lime.utils.ByteArray)) {
			var data1 = data;
			var _g = this.dataFormat;
			switch(_g[1]) {
			case 0:
				uri = data1.data.buffer;
				break;
			default:
				uri = data1.readUTFBytes(data1.length);
			}
		} else if(js.Boot.__instanceof(data,openfl.net.URLVariables)) {
			var data2 = data;
			var _g1 = 0;
			var _g11 = Reflect.fields(data2);
			while(_g1 < _g11.length) {
				var p = _g11[_g1];
				++_g1;
				if(uri.length != 0) uri += "&";
				uri += encodeURIComponent(p) + "=" + StringTools.urlEncode(Reflect.field(data2,p));
			}
		} else if(data != null) uri = data.toString();
		try {
			if(method == "GET" && uri != null && uri != "") {
				var question = url.split("?").length <= 1;
				xmlHttpRequest.open(method,url + (question?"?":"&") + Std.string(uri),true);
				uri = "";
			} else xmlHttpRequest.open(method,url,true);
		} catch( e ) {
			this.onError(e.toString());
			return;
		}
		var _g2 = this.dataFormat;
		switch(_g2[1]) {
		case 0:
			xmlHttpRequest.responseType = "arraybuffer";
			break;
		default:
		}
		var _g3 = 0;
		while(_g3 < requestHeaders.length) {
			var header = requestHeaders[_g3];
			++_g3;
			xmlHttpRequest.setRequestHeader(header.name,header.value);
		}
		xmlHttpRequest.send(uri);
		this.onOpen();
		this.getData = function() {
			if(xmlHttpRequest.response != null) return xmlHttpRequest.response; else return xmlHttpRequest.responseText;
		};
	}
	,onData: function(_) {
		var content = this.getData();
		var _g = this.dataFormat;
		switch(_g[1]) {
		case 0:
			this.data = lime.utils.ByteArray.__ofBuffer(content);
			break;
		default:
			this.data = Std.string(content);
		}
		var evt = new openfl.events.Event(openfl.events.Event.COMPLETE);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onError: function(msg) {
		var evt = new openfl.events.IOErrorEvent(openfl.events.IOErrorEvent.IO_ERROR);
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onOpen: function() {
		var evt = new openfl.events.Event(openfl.events.Event.OPEN);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onProgress: function(event) {
		var evt = new openfl.events.ProgressEvent(openfl.events.ProgressEvent.PROGRESS);
		evt.currentTarget = this;
		evt.bytesLoaded = event.loaded;
		evt.bytesTotal = event.total;
		this.dispatchEvent(evt);
	}
	,onSecurityError: function(msg) {
		var evt = new openfl.events.SecurityErrorEvent(openfl.events.SecurityErrorEvent.SECURITY_ERROR);
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onStatus: function(status) {
		var evt = new openfl.events.HTTPStatusEvent(openfl.events.HTTPStatusEvent.HTTP_STATUS,false,false,status);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,set_dataFormat: function(inputVal) {
		if(inputVal == openfl.net.URLLoaderDataFormat.BINARY && !Reflect.hasField(window,"ArrayBuffer")) this.dataFormat = openfl.net.URLLoaderDataFormat.TEXT; else this.dataFormat = inputVal;
		return this.dataFormat;
	}
	,__class__: openfl.net.URLLoader
	,__properties__: {set_dataFormat:"set_dataFormat"}
});
openfl.net.URLLoaderDataFormat = $hxClasses["openfl.net.URLLoaderDataFormat"] = { __ename__ : true, __constructs__ : ["BINARY","TEXT","VARIABLES"] };
openfl.net.URLLoaderDataFormat.BINARY = ["BINARY",0];
openfl.net.URLLoaderDataFormat.BINARY.toString = $estr;
openfl.net.URLLoaderDataFormat.BINARY.__enum__ = openfl.net.URLLoaderDataFormat;
openfl.net.URLLoaderDataFormat.TEXT = ["TEXT",1];
openfl.net.URLLoaderDataFormat.TEXT.toString = $estr;
openfl.net.URLLoaderDataFormat.TEXT.__enum__ = openfl.net.URLLoaderDataFormat;
openfl.net.URLLoaderDataFormat.VARIABLES = ["VARIABLES",2];
openfl.net.URLLoaderDataFormat.VARIABLES.toString = $estr;
openfl.net.URLLoaderDataFormat.VARIABLES.__enum__ = openfl.net.URLLoaderDataFormat;
openfl.net.URLRequest = function(inURL) {
	if(inURL != null) this.url = inURL;
	this.requestHeaders = [];
	this.method = openfl.net.URLRequestMethod.GET;
	this.contentType = null;
};
$hxClasses["openfl.net.URLRequest"] = openfl.net.URLRequest;
openfl.net.URLRequest.__name__ = ["openfl","net","URLRequest"];
openfl.net.URLRequest.prototype = {
	contentType: null
	,data: null
	,method: null
	,requestHeaders: null
	,url: null
	,userAgent: null
	,formatRequestHeaders: function() {
		var res = this.requestHeaders;
		if(res == null) res = [];
		if(this.method == openfl.net.URLRequestMethod.GET || this.data == null) return res;
		if(typeof(this.data) == "string" || js.Boot.__instanceof(this.data,lime.utils.ByteArray)) {
			res = res.slice();
			res.push(new openfl.net.URLRequestHeader("Content-Type",this.contentType != null?this.contentType:"application/x-www-form-urlencoded"));
		}
		return res;
	}
	,__class__: openfl.net.URLRequest
};
openfl.net.URLRequestHeader = function(name,value) {
	if(value == null) value = "";
	if(name == null) name = "";
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl.net.URLRequestHeader;
openfl.net.URLRequestHeader.__name__ = ["openfl","net","URLRequestHeader"];
openfl.net.URLRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: openfl.net.URLRequestHeader
};
openfl.net.URLRequestMethod = function() { };
$hxClasses["openfl.net.URLRequestMethod"] = openfl.net.URLRequestMethod;
openfl.net.URLRequestMethod.__name__ = ["openfl","net","URLRequestMethod"];
openfl.net.URLVariables = function(inEncoded) {
	if(inEncoded != null) this.decode(inEncoded);
};
$hxClasses["openfl.net.URLVariables"] = openfl.net.URLVariables;
openfl.net.URLVariables.__name__ = ["openfl","net","URLVariables"];
openfl.net.URLVariables.prototype = {
	decode: function(inVars) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = inVars.split(";").join("&").split("&");
		var _g1 = 0;
		while(_g1 < fields1.length) {
			var f1 = fields1[_g1];
			++_g1;
			var eq = f1.indexOf("=");
			if(eq > 0) Reflect.setField(this,StringTools.urlDecode(HxOverrides.substr(f1,0,eq)),StringTools.urlDecode(HxOverrides.substr(f1,eq + 1,null))); else if(eq != 0) Reflect.setField(this,decodeURIComponent(f1.split("+").join(" ")),"");
		}
	}
	,toString: function() {
		var result = new Array();
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			result.push(encodeURIComponent(f) + "=" + StringTools.urlEncode(Reflect.field(this,f)));
		}
		return result.join("&");
	}
	,__class__: openfl.net.URLVariables
};
openfl.system.TouchscreenType = $hxClasses["openfl.system.TouchscreenType"] = { __ename__ : true, __constructs__ : ["FINGER","NONE","STYLUS"] };
openfl.system.TouchscreenType.FINGER = ["FINGER",0];
openfl.system.TouchscreenType.FINGER.toString = $estr;
openfl.system.TouchscreenType.FINGER.__enum__ = openfl.system.TouchscreenType;
openfl.system.TouchscreenType.NONE = ["NONE",1];
openfl.system.TouchscreenType.NONE.toString = $estr;
openfl.system.TouchscreenType.NONE.__enum__ = openfl.system.TouchscreenType;
openfl.system.TouchscreenType.STYLUS = ["STYLUS",2];
openfl.system.TouchscreenType.STYLUS.toString = $estr;
openfl.system.TouchscreenType.STYLUS.__enum__ = openfl.system.TouchscreenType;
openfl.system.Capabilities = function() { };
$hxClasses["openfl.system.Capabilities"] = openfl.system.Capabilities;
openfl.system.Capabilities.__name__ = ["openfl","system","Capabilities"];
openfl.system.Capabilities.__properties__ = {get_version:"get_version",get_screenResolutionY:"get_screenResolutionY",get_screenResolutionX:"get_screenResolutionX",get_screenDPI:"get_screenDPI",get_pixelAspectRatio:"get_pixelAspectRatio",get_os:"get_os",get_language:"get_language"}
openfl.system.Capabilities.language = null;
openfl.system.Capabilities.os = null;
openfl.system.Capabilities.pixelAspectRatio = null;
openfl.system.Capabilities.screenDPI = null;
openfl.system.Capabilities.screenResolutionX = null;
openfl.system.Capabilities.screenResolutionY = null;
openfl.system.Capabilities.version = null;
openfl.system.Capabilities.hasMultiChannelAudio = function(type) {
	return false;
};
openfl.system.Capabilities.get_os = function() {
	return "HTML5";
};
openfl.system.Capabilities.get_pixelAspectRatio = function() {
	return 1;
};
openfl.system.Capabilities.get_screenDPI = function() {
	if(openfl.system.Capabilities.screenDPI > 0) return openfl.system.Capabilities.screenDPI;
	var body = window.document.getElementsByTagName("body")[0];
	var testDiv = window.document.createElement("div");
	testDiv.style.width = testDiv.style.height = "1in";
	testDiv.style.padding = testDiv.style.margin = "0px";
	testDiv.style.position = "absolute";
	testDiv.style.top = "-100%";
	body.appendChild(testDiv);
	openfl.system.Capabilities.screenDPI = testDiv.offsetWidth;
	body.removeChild(testDiv);
	return openfl.system.Capabilities.screenDPI;
};
openfl.system.Capabilities.get_screenResolutionX = function() {
	return window.screen.width;
};
openfl.system.Capabilities.get_screenResolutionY = function() {
	return window.screen.height;
};
openfl.system.Capabilities.get_language = function() {
	return navigator.language;
};
openfl.system.Capabilities.get_version = function() {
	var value = "WEB";
	value += " " + StringTools.replace("3.0.3",".",",") + ",0";
	return value;
};
openfl.system.LoaderContext = function(checkPolicyFile,applicationDomain,securityDomain) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	this.checkPolicyFile = checkPolicyFile;
	this.securityDomain = securityDomain;
	this.applicationDomain = applicationDomain;
	this.allowCodeImport = true;
	this.allowLoadBytesCodeExecution = true;
};
$hxClasses["openfl.system.LoaderContext"] = openfl.system.LoaderContext;
openfl.system.LoaderContext.__name__ = ["openfl","system","LoaderContext"];
openfl.system.LoaderContext.prototype = {
	allowCodeImport: null
	,allowLoadBytesCodeExecution: null
	,applicationDomain: null
	,checkPolicyFile: null
	,securityDomain: null
	,__class__: openfl.system.LoaderContext
};
openfl.system.SecurityDomain = function() {
};
$hxClasses["openfl.system.SecurityDomain"] = openfl.system.SecurityDomain;
openfl.system.SecurityDomain.__name__ = ["openfl","system","SecurityDomain"];
openfl.system.SecurityDomain.prototype = {
	__class__: openfl.system.SecurityDomain
};
openfl.system.System = function() { };
$hxClasses["openfl.system.System"] = openfl.system.System;
openfl.system.System.__name__ = ["openfl","system","System"];
openfl.system.System.__properties__ = {get_vmVersion:"get_vmVersion",get_totalMemory:"get_totalMemory"}
openfl.system.System.totalMemory = null;
openfl.system.System.vmVersion = null;
openfl.system.System.exit = function(code) {
	lime.system.System.exit(code);
};
openfl.system.System.gc = function() {
};
openfl.system.System.pause = function() {
	throw "System.pause is currently not supported for HTML5";
};
openfl.system.System.resume = function() {
	throw "System.resume is currently not supported for HTML5";
};
openfl.system.System.setClipboard = function(string) {
	throw "System.setClipboard is currently not supported for HTML5";
};
openfl.system.System.get_totalMemory = function() {
	return 0;
};
openfl.system.System.get_vmVersion = function() {
	return "1.0.0";
};
openfl.text = {};
openfl.text.AntiAliasType = $hxClasses["openfl.text.AntiAliasType"] = { __ename__ : true, __constructs__ : ["ADVANCED","NORMAL"] };
openfl.text.AntiAliasType.ADVANCED = ["ADVANCED",0];
openfl.text.AntiAliasType.ADVANCED.toString = $estr;
openfl.text.AntiAliasType.ADVANCED.__enum__ = openfl.text.AntiAliasType;
openfl.text.AntiAliasType.NORMAL = ["NORMAL",1];
openfl.text.AntiAliasType.NORMAL.toString = $estr;
openfl.text.AntiAliasType.NORMAL.__enum__ = openfl.text.AntiAliasType;
openfl.text.Font = function(name) {
	lime.text.Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl.text.Font;
openfl.text.Font.__name__ = ["openfl","text","Font"];
openfl.text.Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) enumerateDeviceFonts = false;
	return [];
};
openfl.text.Font.fromBytes = function(bytes) {
	var font = new openfl.text.Font();
	font.__fromBytes(bytes);
	return font;
};
openfl.text.Font.fromFile = function(path) {
	var font = new openfl.text.Font();
	font.__fromFile(path);
	return font;
};
openfl.text.Font.registerFont = function(font) {
	var instance;
	instance = js.Boot.__cast(Type.createInstance(font,[]) , openfl.text.Font);
	if(instance != null) openfl.text.Font.__registeredFonts.push(instance);
};
openfl.text.Font.__fromLimeFont = function(value) {
	var font = new openfl.text.Font();
	font.name = value.name;
	font.src = value.src;
	return font;
};
openfl.text.Font.__super__ = lime.text.Font;
openfl.text.Font.prototype = $extend(lime.text.Font.prototype,{
	fontStyle: null
	,fontType: null
	,get_fontName: function() {
		return this.name;
	}
	,set_fontName: function(value) {
		return this.name = value;
	}
	,__class__: openfl.text.Font
	,__properties__: $extend(lime.text.Font.prototype.__properties__,{set_fontName:"set_fontName",get_fontName:"get_fontName"})
});
openfl.text.FontStyle = $hxClasses["openfl.text.FontStyle"] = { __ename__ : true, __constructs__ : ["REGULAR","ITALIC","BOLD_ITALIC","BOLD"] };
openfl.text.FontStyle.REGULAR = ["REGULAR",0];
openfl.text.FontStyle.REGULAR.toString = $estr;
openfl.text.FontStyle.REGULAR.__enum__ = openfl.text.FontStyle;
openfl.text.FontStyle.ITALIC = ["ITALIC",1];
openfl.text.FontStyle.ITALIC.toString = $estr;
openfl.text.FontStyle.ITALIC.__enum__ = openfl.text.FontStyle;
openfl.text.FontStyle.BOLD_ITALIC = ["BOLD_ITALIC",2];
openfl.text.FontStyle.BOLD_ITALIC.toString = $estr;
openfl.text.FontStyle.BOLD_ITALIC.__enum__ = openfl.text.FontStyle;
openfl.text.FontStyle.BOLD = ["BOLD",3];
openfl.text.FontStyle.BOLD.toString = $estr;
openfl.text.FontStyle.BOLD.__enum__ = openfl.text.FontStyle;
openfl.text.FontType = $hxClasses["openfl.text.FontType"] = { __ename__ : true, __constructs__ : ["DEVICE","EMBEDDED","EMBEDDED_CFF"] };
openfl.text.FontType.DEVICE = ["DEVICE",0];
openfl.text.FontType.DEVICE.toString = $estr;
openfl.text.FontType.DEVICE.__enum__ = openfl.text.FontType;
openfl.text.FontType.EMBEDDED = ["EMBEDDED",1];
openfl.text.FontType.EMBEDDED.toString = $estr;
openfl.text.FontType.EMBEDDED.__enum__ = openfl.text.FontType;
openfl.text.FontType.EMBEDDED_CFF = ["EMBEDDED_CFF",2];
openfl.text.FontType.EMBEDDED_CFF.toString = $estr;
openfl.text.FontType.EMBEDDED_CFF.__enum__ = openfl.text.FontType;
openfl.text.GridFitType = $hxClasses["openfl.text.GridFitType"] = { __ename__ : true, __constructs__ : ["NONE","PIXEL","SUBPIXEL"] };
openfl.text.GridFitType.NONE = ["NONE",0];
openfl.text.GridFitType.NONE.toString = $estr;
openfl.text.GridFitType.NONE.__enum__ = openfl.text.GridFitType;
openfl.text.GridFitType.PIXEL = ["PIXEL",1];
openfl.text.GridFitType.PIXEL.toString = $estr;
openfl.text.GridFitType.PIXEL.__enum__ = openfl.text.GridFitType;
openfl.text.GridFitType.SUBPIXEL = ["SUBPIXEL",2];
openfl.text.GridFitType.SUBPIXEL.toString = $estr;
openfl.text.GridFitType.SUBPIXEL.__enum__ = openfl.text.GridFitType;
openfl.text.TextField = function() {
	openfl.display.InteractiveObject.call(this);
	this.__width = 100;
	this.__height = 100;
	this.__text = "";
	this.set_type(openfl.text.TextFieldType.DYNAMIC);
	this.set_autoSize(openfl.text.TextFieldAutoSize.NONE);
	this.displayAsPassword = false;
	this.embedFonts = false;
	this.selectable = true;
	this.set_borderColor(0);
	this.set_border(false);
	this.set_backgroundColor(16777215);
	this.set_background(false);
	this.gridFitType = openfl.text.GridFitType.PIXEL;
	this.maxChars = 0;
	this.multiline = false;
	this.sharpness = 0;
	this.scrollH = 0;
	this.scrollV = 1;
	this.set_wordWrap(false);
	if(openfl.text.TextField.__defaultTextFormat == null) {
		openfl.text.TextField.__defaultTextFormat = new openfl.text.TextFormat("Times New Roman",12,0,false,false,false,"","",openfl.text.TextFormatAlign.LEFT,0,0,0,0);
		openfl.text.TextField.__defaultTextFormat.blockIndent = 0;
		openfl.text.TextField.__defaultTextFormat.bullet = false;
		openfl.text.TextField.__defaultTextFormat.letterSpacing = 0;
		openfl.text.TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl.text.TextField.__defaultTextFormat.clone();
};
$hxClasses["openfl.text.TextField"] = openfl.text.TextField;
openfl.text.TextField.__name__ = ["openfl","text","TextField"];
openfl.text.TextField.__defaultTextFormat = null;
openfl.text.TextField.__super__ = openfl.display.InteractiveObject;
openfl.text.TextField.prototype = $extend(openfl.display.InteractiveObject.prototype,{
	antiAliasType: null
	,autoSize: null
	,background: null
	,backgroundColor: null
	,border: null
	,borderColor: null
	,bottomScrollV: null
	,caretIndex: null
	,caretPos: null
	,displayAsPassword: null
	,embedFonts: null
	,gridFitType: null
	,length: null
	,maxChars: null
	,maxScrollH: null
	,maxScrollV: null
	,multiline: null
	,numLines: null
	,restrict: null
	,scrollH: null
	,scrollV: null
	,selectable: null
	,selectionBeginIndex: null
	,selectionEndIndex: null
	,sharpness: null
	,textHeight: null
	,textWidth: null
	,type: null
	,wordWrap: null
	,__cursorPosition: null
	,__cursorTimer: null
	,__dirty: null
	,__hasFocus: null
	,__height: null
	,__isHTML: null
	,__isKeyDown: null
	,__measuredHeight: null
	,__measuredWidth: null
	,__ranges: null
	,__selectionStart: null
	,__showCursor: null
	,__text: null
	,__textFormat: null
	,__textLayout: null
	,__texture: null
	,__tileData: null
	,__tileDataLength: null
	,__tilesheets: null
	,__width: null
	,__div: null
	,__hiddenInput: null
	,appendText: function(text) {
		var _g = this;
		_g.set_text(_g.get_text() + text);
	}
	,getCharBoundaries: function(a) {
		openfl.Lib.notImplemented("TextField.getCharBoundaries");
		return null;
	}
	,getCharIndexAtPoint: function(x,y) {
		openfl.Lib.notImplemented("TextField.getCharIndexAtPoint");
		return 0;
	}
	,getLineIndexAtPoint: function(x,y) {
		openfl.Lib.notImplemented("TextField.getLineIndexAtPoint");
		return 0;
	}
	,getLineMetrics: function(lineIndex) {
		var height = this.get_textHeight();
		var lineWidth = this.__getLineWidth(lineIndex);
		var lineHeight = this.__getLineMetric(lineIndex,2);
		var ascender = this.__getLineMetric(lineIndex,0);
		var descender = this.__getLineMetric(lineIndex,1);
		var leading = this.__getLineMetric(lineIndex,3);
		var margin;
		var _g = this.__textFormat.align;
		switch(_g[1]) {
		case 0:case 2:
			margin = 2;
			break;
		case 1:
			margin = this.get_width() - lineWidth - 2;
			break;
		case 3:
			margin = (this.get_width() - lineWidth) / 2;
			break;
		}
		return new openfl.text.TextLineMetrics(margin,lineWidth,lineHeight,ascender,descender,leading);
	}
	,getLineOffset: function(lineIndex) {
		openfl.Lib.notImplemented("TextField.getLineOffset");
		return 0;
	}
	,getLineText: function(lineIndex) {
		openfl.Lib.notImplemented("TextField.getLineText");
		return "";
	}
	,getTextFormat: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		return this.__textFormat.clone();
	}
	,setSelection: function(beginIndex,endIndex) {
		openfl.Lib.notImplemented("TextField.setSelection");
	}
	,setTextFormat: function(format,beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		if(format.font != null) this.__textFormat.font = format.font;
		if(format.size != null) this.__textFormat.size = format.size;
		if(format.color != null) this.__textFormat.color = format.color;
		if(format.bold != null) this.__textFormat.bold = format.bold;
		if(format.italic != null) this.__textFormat.italic = format.italic;
		if(format.underline != null) this.__textFormat.underline = format.underline;
		if(format.url != null) this.__textFormat.url = format.url;
		if(format.target != null) this.__textFormat.target = format.target;
		if(format.align != null) this.__textFormat.align = format.align;
		if(format.leftMargin != null) this.__textFormat.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.__textFormat.rightMargin = format.rightMargin;
		if(format.indent != null) this.__textFormat.indent = format.indent;
		if(format.leading != null) this.__textFormat.leading = format.leading;
		if(format.blockIndent != null) this.__textFormat.blockIndent = format.blockIndent;
		if(format.bullet != null) this.__textFormat.bullet = format.bullet;
		if(format.kerning != null) this.__textFormat.kerning = format.kerning;
		if(format.letterSpacing != null) this.__textFormat.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.__textFormat.tabStops = format.tabStops;
		this.__dirty = true;
	}
	,__clipText: function(value) {
		var textWidth = this.__getTextWidth(value);
		var fillPer = textWidth / this.__width;
		this.set_text(fillPer > 1?(function($this) {
			var $r;
			var _this = $this.get_text();
			var pos = -1 * Math.floor($this.get_text().length / fillPer);
			$r = HxOverrides.substr(_this,pos,null);
			return $r;
		}(this)):this.get_text());
		return this.get_text() + "";
	}
	,__disableInputMode: function() {
		this.this_onRemovedFromStage(null);
	}
	,__enableInputMode: function() {
		this.__cursorPosition = -1;
		if(this.__hiddenInput == null) {
			this.__hiddenInput = window.document.createElement("input");
			this.__hiddenInput.type = "text";
			this.__hiddenInput.style.position = "absolute";
			this.__hiddenInput.style.opacity = "0";
			this.__hiddenInput.style.pointerEvents = "none";
			this.__hiddenInput.style.left = this.get_x() + (this.__canvas != null?this.__canvas.offsetLeft:0) + "px";
			this.__hiddenInput.style.top = this.get_y() + (this.__canvas != null?this.__canvas.offsetTop:0) + "px";
			this.__hiddenInput.style.width = this.__width + "px";
			this.__hiddenInput.style.height = this.__height + "px";
			this.__hiddenInput.style.zIndex = "0";
			if(this.maxChars > 0) this.__hiddenInput.maxLength = this.maxChars;
			window.document.body.appendChild(this.__hiddenInput);
			this.__hiddenInput.value = this.__text;
		}
		if(this.stage != null) this.this_onAddedToStage(null); else {
			this.addEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.this_onAddedToStage));
			this.addEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.this_onRemovedFromStage));
		}
	}
	,__findFont: function(name) {
		return null;
	}
	,__getBounds: function(rect,matrix) {
		var bounds = new openfl.geom.Rectangle(0,0,this.__width,this.__height);
		bounds.transform(this.__worldTransform);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__getCursor: function() {
		if(this.type == openfl.text.TextFieldType.INPUT) return lime.ui.MouseCursor.TEXT; else return null;
	}
	,__getFont: function(format) {
		var font;
		if(format.italic) font = "italic "; else font = "normal ";
		font += "normal ";
		if(format.bold) font += "bold "; else font += "normal ";
		font += format.size + "px";
		font += "/" + (format.size + format.leading) + "px ";
		font += "'" + (function($this) {
			var $r;
			var _g = format.font;
			$r = (function($this) {
				var $r;
				switch(_g) {
				case "_sans":
					$r = "sans-serif";
					break;
				case "_serif":
					$r = "serif";
					break;
				case "_typewriter":
					$r = "monospace";
					break;
				default:
					$r = format.font;
				}
				return $r;
			}($this));
			return $r;
		}(this));
		font += "'";
		return font;
	}
	,__getFontInstance: function(format) {
		return null;
	}
	,__getLineBreaks: function() {
		var lines = 0;
		var _g1 = 0;
		var _g;
		var s = this.get_text();
		_g = s.length;
		while(_g1 < _g) {
			var i = _g1++;
			var $char = haxe.Utf8.charCodeAt(this.get_text(),i);
			if($char == openfl.text.TextField.__utf8_endline_code) lines++;
		}
		return lines;
	}
	,__getLineBreakIndeces: function() {
		var breaks = [];
		var _g1 = 0;
		var _g;
		var s = this.get_text();
		_g = s.length;
		while(_g1 < _g) {
			var i = _g1++;
			var $char = haxe.Utf8.charCodeAt(this.get_text(),i);
			if($char == openfl.text.TextField.__utf8_endline_code) breaks.push(i);
		}
		return breaks;
	}
	,__getLineBreaksInRange: function(i) {
		var lines = 0;
		if(this.__ranges.length > i && i >= 0) {
			var range = this.__ranges[i];
			if(range.start > 0 && range.end < this.get_text().length) {
				var _g1 = range.start;
				var _g = range.end + 1;
				while(_g1 < _g) {
					var j = _g1++;
					var $char = haxe.Utf8.charCodeAt(this.get_text(),i);
					if($char == openfl.text.TextField.__utf8_endline_code) lines++;
				}
			}
		}
		return lines;
	}
	,__getLineIndeces: function(line) {
		var breaks = this.__getLineBreakIndeces();
		var i = 0;
		var first_char = 0;
		var last_char = this.get_text().length - 1;
		var _g = 0;
		while(_g < breaks.length) {
			var br = breaks[_g];
			++_g;
			if(i == line) {
				first_char = br + 1;
				if(i != breaks.length - 1) last_char = breaks[i + 1] - 1;
			}
			i++;
		}
		return [first_char,last_char];
	}
	,__getLineWidth: function(line) {
		var measurements = this.__measureTextSub(false);
		var currWidth = 0.0;
		var bestWidth = 0.0;
		var linebreaks = this.__getLineBreakIndeces();
		var currLine = 0;
		var _g1 = 0;
		var _g = measurements.length;
		while(_g1 < _g) {
			var i = _g1++;
			var measure = measurements[i];
			if(HxOverrides.indexOf(linebreaks,i,0) != -1) {
				if(currLine == line) return currWidth; else if(line == -1 && currWidth > bestWidth) bestWidth = currWidth;
				currWidth = 0;
				currLine++;
			} else currWidth += measurements[i];
		}
		if(currLine == line) bestWidth = currWidth; else if(line == -1 && currWidth > bestWidth) bestWidth = currWidth;
		return bestWidth;
	}
	,__getLineMetric: function(line,metric) {
		if(this.__ranges == null) return this.__getLineMetricSubRangesNull(true,metric); else return this.__getLineMetricSubRangesNotNull(line,metric);
	}
	,__getLineMetricSubRangesNull: function(singleLine,metric) {
		if(singleLine == null) singleLine = false;
		var font = this.__getFontInstance(this.__textFormat);
		if(font != null) switch(metric) {
		case 2:
			return this.__getLineMetricSubRangesNull(singleLine,0) + this.__getLineMetricSubRangesNull(singleLine,1) + this.__getLineMetricSubRangesNull(singleLine,3);
		case 0:
			return font.get_ascender() / font.get_unitsPerEM() * this.__textFormat.size;
		case 1:
			return Math.abs(font.get_descender() / font.get_unitsPerEM() * this.__textFormat.size);
		case 3:
			return this.__textFormat.leading;
		default:
			return 0;
		}
		return 0;
	}
	,__getLineMetricSubRangesNotNull: function(specificLine,metric) {
		var lineChars = this.__getLineIndeces(specificLine);
		var m = 0.0;
		var best_m = 0.0;
		var _g = 0;
		var _g1 = this.__ranges;
		while(_g < _g1.length) {
			var range = _g1[_g];
			++_g;
			if(range.start >= lineChars[0]) {
				var font = this.__getFontInstance(range.format);
				if(font != null) switch(metric) {
				case 2:
					m = this.__getLineMetricSubRangesNotNull(specificLine,0) + this.__getLineMetricSubRangesNotNull(specificLine,1) + this.__getLineMetricSubRangesNotNull(specificLine,3);
					break;
				case 0:
					m = font.get_ascender() / font.get_unitsPerEM() * this.__textFormat.size;
					break;
				case 1:
					m = Math.abs(font.get_descender() / font.get_unitsPerEM() * this.__textFormat.size);
					break;
				case 3:
					m = this.__textFormat.leading;
					break;
				default:
					m = 0;
				}
			}
			if(m > best_m) best_m = m;
			m = 0;
		}
		return best_m;
	}
	,__getPosition: function(x,y) {
		var value = this.get_text();
		var text = value;
		var totalW = 0;
		var pos = text.length;
		if(x < this.__getTextWidth(text)) {
			var _g1 = 0;
			var _g = text.length;
			while(_g1 < _g) {
				var i = _g1++;
				totalW += this.__getTextWidth(text.charAt(i));
				if(totalW >= x) {
					pos = i;
					break;
				}
			}
		}
		return pos;
	}
	,__getTextWidth: function(text) {
		if(this.__context == null) {
			this.__canvas = window.document.createElement("canvas");
			this.__context = this.__canvas.getContext("2d");
		}
		this.__context.font = this.__getFont(this.__textFormat);
		this.__context.textAlign = "left";
		return this.__context.measureText(text).width;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || interactiveOnly && !this.mouseEnabled) return false;
		var point = this.globalToLocal(new openfl.geom.Point(x,y));
		if(point.x > 0 && point.y > 0 && point.x <= this.__width && point.y <= this.__height) {
			if(stack != null) stack.push(this);
			return true;
		}
		return false;
	}
	,__measureText: function(condense) {
		if(condense == null) condense = true;
		if(this.__context == null) {
			this.__canvas = window.document.createElement("canvas");
			this.__context = this.__canvas.getContext("2d");
		}
		if(this.__ranges == null) {
			this.__context.font = this.__getFont(this.__textFormat);
			return [this.__context.measureText(this.__text).width];
		} else {
			var measurements = [];
			var _g = 0;
			var _g1 = this.__ranges;
			while(_g < _g1.length) {
				var range = _g1[_g];
				++_g;
				this.__context.font = this.__getFont(range.format);
				measurements.push(this.__context.measureText(this.get_text().substring(range.start,range.end)).width);
			}
			return measurements;
		}
	}
	,__measureTextSub: function(condense) {
		if(this.__textLayout == null) this.__textLayout = new lime.text.TextLayout();
		if(this.__ranges == null) return this.__measureTextSubRangesNull(condense); else return this.__measureTextSubRangesNotNull(condense);
		return null;
	}
	,__measureTextSubRangesNull: function(condense) {
		var font = this.__getFontInstance(this.__textFormat);
		var width = 0.0;
		var widths = [];
		if(font != null && this.__textFormat.size != null) {
			this.__textLayout.set_text(null);
			this.__textLayout.set_font(font);
			this.__textLayout.set_size(this.__textFormat.size | 0);
			this.__textLayout.set_text(this.__text);
			var _g = 0;
			var _g1 = this.__textLayout.positions;
			while(_g < _g1.length) {
				var position = _g1[_g];
				++_g;
				if(condense) width += position.advance.x; else widths.push(position.advance.x);
			}
		}
		if(condense) widths.push(width);
		return widths;
	}
	,__measureTextSubRangesNotNull: function(condense) {
		var measurements = [];
		var _g = 0;
		var _g1 = this.__ranges;
		while(_g < _g1.length) {
			var range = _g1[_g];
			++_g;
			var font = this.__getFontInstance(range.format);
			var width = 0.0;
			if(font != null && range.format.size != null) {
				this.__textLayout.set_text(null);
				this.__textLayout.set_font(font);
				this.__textLayout.set_size(range.format.size | 0);
				this.__textLayout.set_text(this.get_text().substring(range.start,range.end));
				var _g2 = 0;
				var _g3 = this.__textLayout.positions;
				while(_g2 < _g3.length) {
					var position = _g3[_g2];
					++_g2;
					if(condense) width += position.advance.x; else measurements.push(position.advance.x);
				}
			}
			if(condense) measurements.push(width);
		}
		return measurements;
	}
	,__measureTextWithDOM: function() {
		var div = this.__div;
		if(this.__div == null) {
			div = window.document.createElement("div");
			div.innerHTML = new EReg("\n","g").replace(this.__text,"<br>");
			div.style.setProperty("font",this.__getFont(this.__textFormat),null);
			div.style.position = "absolute";
			div.style.top = "110%";
			window.document.body.appendChild(div);
		}
		this.__measuredWidth = div.clientWidth;
		if(this.__div == null) div.style.width = Std.string(this.__width) + "px";
		this.__measuredHeight = div.clientHeight;
		if(this.__div == null) window.document.body.removeChild(div);
	}
	,__renderCanvas: function(renderSession) {
		openfl._internal.renderer.canvas.CanvasTextField.render(this,renderSession);
	}
	,__renderDOM: function(renderSession) {
		openfl._internal.renderer.dom.DOMTextField.render(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		openfl._internal.renderer.opengl.GLTextField.render(this,renderSession);
	}
	,__startCursorTimer: function() {
		this.__cursorTimer = haxe.Timer.delay($bind(this,this.__startCursorTimer),500);
		this.__showCursor = !this.__showCursor;
		this.__dirty = true;
	}
	,__stopCursorTimer: function() {
		if(this.__cursorTimer != null) this.__cursorTimer.stop();
	}
	,input_onKeyUp: function(event) {
		this.__isKeyDown = false;
		if(event == null) event == window.event;
		this.__text = this.__hiddenInput.value;
		this.__ranges = null;
		this.__isHTML = false;
		this.__cursorPosition = this.__hiddenInput.selectionStart;
		this.__selectionStart = this.__cursorPosition;
		this.__dirty = true;
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.CHANGE,true));
	}
	,input_onKeyDown: function(event) {
		this.__isKeyDown = true;
		if(event == null) event == window.event;
		var keyCode = event.which;
		var isShift = event.shiftKey;
		if(keyCode == 65 && (event.ctrlKey || event.metaKey)) {
			this.__hiddenInput.selectionStart = 0;
			this.__hiddenInput.selectionEnd = this.get_text().length;
			event.preventDefault();
			this.__dirty = true;
			return;
		}
		if(keyCode == 17 || event.metaKey || event.ctrlKey) return;
		this.__text = this.__hiddenInput.value;
		this.__ranges = null;
		this.__isHTML = false;
		this.__selectionStart = this.__hiddenInput.selectionStart;
		this.__dirty = true;
	}
	,stage_onMouseMove: function(event) {
		if(this.__hasFocus && this.__selectionStart >= 0) {
			this.__cursorPosition = this.__getPosition(event.localX,event.localY);
			this.__dirty = true;
		}
	}
	,stage_onMouseUp: function(event) {
		this.stage.removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.stage_onMouseMove));
		this.stage.removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
		if(this.stage.get_focus() == this) {
			var upPos = this.__getPosition(event.localX,event.localY);
			var leftPos;
			var rightPos;
			leftPos = Std["int"](Math.min(this.__selectionStart,upPos));
			rightPos = Std["int"](Math.max(this.__selectionStart,upPos));
			this.__selectionStart = leftPos;
			this.__cursorPosition = rightPos;
			this.this_onFocusIn(null);
		}
	}
	,this_onAddedToStage: function(event) {
		this.addEventListener(openfl.events.FocusEvent.FOCUS_IN,$bind(this,this.this_onFocusIn));
		this.addEventListener(openfl.events.FocusEvent.FOCUS_OUT,$bind(this,this.this_onFocusOut));
		this.__hiddenInput.addEventListener("keydown",$bind(this,this.input_onKeyDown));
		this.__hiddenInput.addEventListener("keyup",$bind(this,this.input_onKeyUp));
		this.__hiddenInput.addEventListener("input",$bind(this,this.input_onKeyUp));
		this.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.this_onMouseDown));
		if(this.stage.get_focus() == this) this.this_onFocusIn(null);
	}
	,this_onFocusIn: function(event) {
		if(this.__cursorPosition < 0) {
			this.__cursorPosition = this.__text.length;
			this.__selectionStart = this.__cursorPosition;
		}
		this.__hiddenInput.focus();
		this.__hiddenInput.selectionStart = this.__selectionStart;
		this.__hiddenInput.selectionEnd = this.__cursorPosition;
		this.__stopCursorTimer();
		this.__startCursorTimer();
		this.__hasFocus = true;
		this.__dirty = true;
		this.stage.addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
	}
	,this_onFocusOut: function(event) {
		this.__cursorPosition = -1;
		this.__hasFocus = false;
		this.__stopCursorTimer();
		this.__hiddenInput.blur();
		this.__dirty = true;
	}
	,this_onMouseDown: function(event) {
		this.__selectionStart = this.__getPosition(event.localX,event.localY);
		this.stage.addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
	}
	,this_onRemovedFromStage: function(event) {
		this.removeEventListener(openfl.events.FocusEvent.FOCUS_IN,$bind(this,this.this_onFocusIn));
		this.removeEventListener(openfl.events.FocusEvent.FOCUS_OUT,$bind(this,this.this_onFocusOut));
		if(this.__hiddenInput != null) this.__hiddenInput.removeEventListener("keydown",$bind(this,this.input_onKeyDown));
		if(this.__hiddenInput != null) this.__hiddenInput.removeEventListener("keyup",$bind(this,this.input_onKeyUp));
		if(this.__hiddenInput != null) this.__hiddenInput.removeEventListener("input",$bind(this,this.input_onKeyUp));
		this.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.this_onMouseDown));
		if(this.stage != null) this.stage.removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.stage_onMouseMove));
		if(this.stage != null) this.stage.removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
	}
	,set_autoSize: function(value) {
		if(value != this.autoSize) this.__dirty = true;
		return this.autoSize = value;
	}
	,set_background: function(value) {
		if(value != this.background) this.__dirty = true;
		return this.background = value;
	}
	,set_backgroundColor: function(value) {
		if(value != this.backgroundColor) this.__dirty = true;
		return this.backgroundColor = value;
	}
	,set_border: function(value) {
		if(value != this.border) this.__dirty = true;
		return this.border = value;
	}
	,set_borderColor: function(value) {
		if(value != this.borderColor) this.__dirty = true;
		return this.borderColor = value;
	}
	,get_bottomScrollV: function() {
		return this.get_numLines();
	}
	,get_caretPos: function() {
		return 0;
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		return value;
	}
	,get_height: function() {
		return this.__height * this.get_scaleY();
	}
	,set_height: function(value) {
		if(this.get_scaleY() != 1 || value != this.__height) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
		}
		this.set_scaleY(1);
		return this.__height = value;
	}
	,get_htmlText: function() {
		return this.__text;
	}
	,set_htmlText: function(value) {
		if(!this.__isHTML || this.__text != value) this.__dirty = true;
		this.__ranges = null;
		this.__isHTML = true;
		if(this.__hiddenInput != null) this.__hiddenInput.value = value;
		return this.__text = value;
	}
	,get_maxScrollH: function() {
		return 0;
	}
	,get_maxScrollV: function() {
		return 1;
	}
	,get_numLines: function() {
		if(this.get_text() != "" && this.get_text() != null) {
			var count = this.get_text().split("\n").length;
			if(this.__isHTML) count += this.get_text().split("<br>").length - 1;
			return count;
		}
		return 1;
	}
	,get_text: function() {
		if(this.__isHTML) {
		}
		return this.__text;
	}
	,set_text: function(value) {
		if(this.__text != value && this.__hiddenInput != null) this.__hiddenInput.value = value;
		if(this.__isHTML || this.__text != value) this.__dirty = true;
		this.__ranges = null;
		this.__isHTML = false;
		return this.__text = value;
	}
	,get_textColor: function() {
		return this.__textFormat.color;
	}
	,set_textColor: function(value) {
		if(value != this.__textFormat.color) this.__dirty = true;
		if(this.__ranges != null) {
			var _g = 0;
			var _g1 = this.__ranges;
			while(_g < _g1.length) {
				var range = _g1[_g];
				++_g;
				range.format.color = value;
			}
		}
		return this.__textFormat.color = value;
	}
	,get_textWidth: function() {
		if(this.__canvas != null) {
			var sizes = this.__measureText();
			var total = 0;
			var _g = 0;
			while(_g < sizes.length) {
				var size = sizes[_g];
				++_g;
				total += size;
			}
			return total;
		} else if(this.__div != null) return this.__div.clientWidth; else {
			this.__measureTextWithDOM();
			return this.__measuredWidth;
		}
	}
	,get_textHeight: function() {
		if(this.__canvas != null) return this.__textFormat.size * 1.185; else if(this.__div != null) return this.__div.clientHeight; else {
			this.__measureTextWithDOM();
			return this.__measuredHeight + this.__textFormat.size * 0.185;
		}
	}
	,set_type: function(value) {
		if(value != this.type) this.__dirty = true;
		return this.type = value;
	}
	,get_width: function() {
		if(this.autoSize == openfl.text.TextFieldAutoSize.LEFT) return (this.get_textWidth() + 4) * this.get_scaleX(); else return this.__width * this.get_scaleX();
	}
	,set_width: function(value) {
		if(this.get_scaleX() != 1 || this.__width != value) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
		}
		this.set_scaleX(1);
		return this.__width = value;
	}
	,get_wordWrap: function() {
		return this.wordWrap;
	}
	,set_wordWrap: function(value) {
		return this.wordWrap = value;
	}
	,__class__: openfl.text.TextField
	,__properties__: $extend(openfl.display.InteractiveObject.prototype.__properties__,{set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_type:"set_type",get_textWidth:"get_textWidth",get_textHeight:"get_textHeight",set_textColor:"set_textColor",get_textColor:"get_textColor",set_text:"set_text",get_text:"get_text",get_numLines:"get_numLines",get_maxScrollV:"get_maxScrollV",get_maxScrollH:"get_maxScrollH",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",get_caretPos:"get_caretPos",get_bottomScrollV:"get_bottomScrollV",set_borderColor:"set_borderColor",set_border:"set_border",set_backgroundColor:"set_backgroundColor",set_background:"set_background",set_autoSize:"set_autoSize"})
});
openfl.text.TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl.text.TextFormatRange"] = openfl.text.TextFormatRange;
openfl.text.TextFormatRange.__name__ = ["openfl","text","TextFormatRange"];
openfl.text.TextFormatRange.prototype = {
	end: null
	,format: null
	,start: null
	,__class__: openfl.text.TextFormatRange
};
openfl.text.TextFieldAutoSize = $hxClasses["openfl.text.TextFieldAutoSize"] = { __ename__ : true, __constructs__ : ["CENTER","LEFT","NONE","RIGHT"] };
openfl.text.TextFieldAutoSize.CENTER = ["CENTER",0];
openfl.text.TextFieldAutoSize.CENTER.toString = $estr;
openfl.text.TextFieldAutoSize.CENTER.__enum__ = openfl.text.TextFieldAutoSize;
openfl.text.TextFieldAutoSize.LEFT = ["LEFT",1];
openfl.text.TextFieldAutoSize.LEFT.toString = $estr;
openfl.text.TextFieldAutoSize.LEFT.__enum__ = openfl.text.TextFieldAutoSize;
openfl.text.TextFieldAutoSize.NONE = ["NONE",2];
openfl.text.TextFieldAutoSize.NONE.toString = $estr;
openfl.text.TextFieldAutoSize.NONE.__enum__ = openfl.text.TextFieldAutoSize;
openfl.text.TextFieldAutoSize.RIGHT = ["RIGHT",3];
openfl.text.TextFieldAutoSize.RIGHT.toString = $estr;
openfl.text.TextFieldAutoSize.RIGHT.__enum__ = openfl.text.TextFieldAutoSize;
openfl.text.TextFieldType = $hxClasses["openfl.text.TextFieldType"] = { __ename__ : true, __constructs__ : ["DYNAMIC","INPUT"] };
openfl.text.TextFieldType.DYNAMIC = ["DYNAMIC",0];
openfl.text.TextFieldType.DYNAMIC.toString = $estr;
openfl.text.TextFieldType.DYNAMIC.__enum__ = openfl.text.TextFieldType;
openfl.text.TextFieldType.INPUT = ["INPUT",1];
openfl.text.TextFieldType.INPUT.toString = $estr;
openfl.text.TextFieldType.INPUT.__enum__ = openfl.text.TextFieldType;
openfl.text.TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl.text.TextFormat;
openfl.text.TextFormat.__name__ = ["openfl","text","TextFormat"];
openfl.text.TextFormat.prototype = {
	align: null
	,blockIndent: null
	,bold: null
	,bullet: null
	,color: null
	,font: null
	,indent: null
	,italic: null
	,kerning: null
	,leading: null
	,leftMargin: null
	,letterSpacing: null
	,rightMargin: null
	,size: null
	,tabStops: null
	,target: null
	,underline: null
	,url: null
	,clone: function() {
		var newFormat = new openfl.text.TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) this.font = format.font;
		if(format.size != null) this.size = format.size;
		if(format.color != null) this.color = format.color;
		if(format.bold != null) this.bold = format.bold;
		if(format.italic != null) this.italic = format.italic;
		if(format.underline != null) this.underline = format.underline;
		if(format.url != null) this.url = format.url;
		if(format.target != null) this.target = format.target;
		if(format.align != null) this.align = format.align;
		if(format.leftMargin != null) this.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.rightMargin = format.rightMargin;
		if(format.indent != null) this.indent = format.indent;
		if(format.leading != null) this.leading = format.leading;
		if(format.blockIndent != null) this.blockIndent = format.blockIndent;
		if(format.bullet != null) this.bullet = format.bullet;
		if(format.kerning != null) this.kerning = format.kerning;
		if(format.letterSpacing != null) this.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.tabStops = format.tabStops;
	}
	,__class__: openfl.text.TextFormat
};
openfl.text.TextFormatAlign = $hxClasses["openfl.text.TextFormatAlign"] = { __ename__ : true, __constructs__ : ["LEFT","RIGHT","JUSTIFY","CENTER"] };
openfl.text.TextFormatAlign.LEFT = ["LEFT",0];
openfl.text.TextFormatAlign.LEFT.toString = $estr;
openfl.text.TextFormatAlign.LEFT.__enum__ = openfl.text.TextFormatAlign;
openfl.text.TextFormatAlign.RIGHT = ["RIGHT",1];
openfl.text.TextFormatAlign.RIGHT.toString = $estr;
openfl.text.TextFormatAlign.RIGHT.__enum__ = openfl.text.TextFormatAlign;
openfl.text.TextFormatAlign.JUSTIFY = ["JUSTIFY",2];
openfl.text.TextFormatAlign.JUSTIFY.toString = $estr;
openfl.text.TextFormatAlign.JUSTIFY.__enum__ = openfl.text.TextFormatAlign;
openfl.text.TextFormatAlign.CENTER = ["CENTER",3];
openfl.text.TextFormatAlign.CENTER.toString = $estr;
openfl.text.TextFormatAlign.CENTER.__enum__ = openfl.text.TextFormatAlign;
openfl.text.TextLineMetrics = function(x,width,height,ascent,descent,leading) {
	this.x = x;
	this.width = width;
	this.height = height;
	this.ascent = ascent;
	this.descent = descent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextLineMetrics"] = openfl.text.TextLineMetrics;
openfl.text.TextLineMetrics.__name__ = ["openfl","text","TextLineMetrics"];
openfl.text.TextLineMetrics.prototype = {
	ascent: null
	,descent: null
	,height: null
	,leading: null
	,width: null
	,x: null
	,__class__: openfl.text.TextLineMetrics
};
openfl.ui = {};
openfl.ui._KeyLocation = {};
openfl.ui._KeyLocation.KeyLocation_Impl_ = function() { };
$hxClasses["openfl.ui._KeyLocation.KeyLocation_Impl_"] = openfl.ui._KeyLocation.KeyLocation_Impl_;
openfl.ui._KeyLocation.KeyLocation_Impl_.__name__ = ["openfl","ui","_KeyLocation","KeyLocation_Impl_"];
openfl.ui.Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl.ui.Keyboard;
openfl.ui.Keyboard.__name__ = ["openfl","ui","Keyboard"];
openfl.ui.Keyboard.capsLock = null;
openfl.ui.Keyboard.numLock = null;
openfl.ui.Keyboard.convertKeyCode = function(key) {
	switch(key) {
	case 8:
		return 8;
	case 9:
		return 9;
	case 13:
		return 13;
	case 27:
		return 27;
	case 32:
		return 32;
	case 33:
		return 49;
	case 34:
		return 222;
	case 35:
		return 51;
	case 36:
		return 52;
	case 37:
		return 53;
	case 38:
		return 55;
	case 39:
		return 222;
	case 40:
		return 57;
	case 41:
		return 48;
	case 42:
		return 56;
	case 44:
		return 188;
	case 45:
		return 189;
	case 46:
		return 190;
	case 47:
		return 191;
	case 48:
		return 48;
	case 49:
		return 49;
	case 50:
		return 50;
	case 51:
		return 51;
	case 52:
		return 52;
	case 53:
		return 53;
	case 54:
		return 54;
	case 55:
		return 55;
	case 56:
		return 56;
	case 57:
		return 57;
	case 58:
		return 186;
	case 59:
		return 186;
	case 60:
		return 60;
	case 61:
		return 187;
	case 62:
		return 190;
	case 63:
		return 191;
	case 64:
		return 50;
	case 91:
		return 219;
	case 92:
		return 220;
	case 93:
		return 221;
	case 94:
		return 54;
	case 95:
		return 189;
	case 96:
		return 192;
	case 97:
		return 65;
	case 98:
		return 66;
	case 99:
		return 67;
	case 100:
		return 68;
	case 101:
		return 69;
	case 102:
		return 70;
	case 103:
		return 71;
	case 104:
		return 72;
	case 105:
		return 73;
	case 106:
		return 74;
	case 107:
		return 75;
	case 108:
		return 76;
	case 109:
		return 77;
	case 110:
		return 78;
	case 111:
		return 79;
	case 112:
		return 80;
	case 113:
		return 81;
	case 114:
		return 82;
	case 115:
		return 83;
	case 116:
		return 84;
	case 117:
		return 85;
	case 118:
		return 86;
	case 119:
		return 87;
	case 120:
		return 88;
	case 121:
		return 89;
	case 122:
		return 90;
	case 127:
		return 46;
	case 1073741881:
		return 20;
	case 1073741882:
		return 112;
	case 1073741883:
		return 113;
	case 1073741884:
		return 114;
	case 1073741885:
		return 115;
	case 1073741886:
		return 116;
	case 1073741887:
		return 117;
	case 1073741888:
		return 118;
	case 1073741889:
		return 119;
	case 1073741890:
		return 120;
	case 1073741891:
		return 121;
	case 1073741892:
		return 122;
	case 1073741893:
		return 123;
	case 1073741894:
		return 301;
	case 1073741895:
		return 145;
	case 1073741896:
		return 19;
	case 1073741897:
		return 45;
	case 1073741898:
		return 36;
	case 1073741899:
		return 33;
	case 1073741901:
		return 35;
	case 1073741902:
		return 34;
	case 1073741903:
		return 39;
	case 1073741904:
		return 37;
	case 1073741905:
		return 40;
	case 1073741906:
		return 38;
	case 1073741907:
		return 144;
	case 1073741908:
		return 111;
	case 1073741909:
		return 106;
	case 1073741910:
		return 109;
	case 1073741911:
		return 107;
	case 1073741912:
		return 108;
	case 1073741913:
		return 97;
	case 1073741914:
		return 98;
	case 1073741915:
		return 99;
	case 1073741916:
		return 100;
	case 1073741917:
		return 101;
	case 1073741918:
		return 102;
	case 1073741919:
		return 103;
	case 1073741920:
		return 104;
	case 1073741921:
		return 105;
	case 1073741922:
		return 96;
	case 1073741923:
		return 110;
	case 1073741925:
		return 302;
	case 1073741928:
		return 124;
	case 1073741929:
		return 125;
	case 1073741930:
		return 126;
	case 1073741982:
		return 13;
	case 1073742044:
		return 110;
	case 1073742048:
		return 17;
	case 1073742049:
		return 16;
	case 1073742050:
		return 18;
	case 1073742051:
		return 15;
	case 1073742052:
		return 17;
	case 1073742053:
		return 16;
	case 1073742054:
		return 18;
	case 1073742055:
		return 15;
	default:
		return key;
	}
};
openfl.ui.Keyboard.isAccessible = function() {
	return false;
};
openfl.ui.Keyboard.__getCharCode = function(key,shift) {
	if(shift == null) shift = false;
	if(!shift) {
		switch(key) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		if(key >= 48 && key <= 57) return key - 48 + 48;
		if(key >= 65 && key <= 90) return key - 65 + 97;
	} else {
		switch(key) {
		case 48:
			return 41;
		case 49:
			return 33;
		case 50:
			return 64;
		case 51:
			return 35;
		case 52:
			return 36;
		case 53:
			return 37;
		case 54:
			return 94;
		case 55:
			return 38;
		case 56:
			return 42;
		case 57:
			return 40;
		case 186:
			return 58;
		case 187:
			return 43;
		case 188:
			return 60;
		case 189:
			return 95;
		case 190:
			return 62;
		case 191:
			return 63;
		case 192:
			return 126;
		case 219:
			return 123;
		case 220:
			return 124;
		case 221:
			return 125;
		case 222:
			return 34;
		}
		if(key >= 65 && key <= 90) return key - 65 + 65;
	}
	if(key >= 96 && key <= 105) return key - 96 + 48;
	switch(key) {
	case 106:
		return 42;
	case 107:
		return 43;
	case 108:
		return 44;
	case 110:
		return 45;
	case 111:
		return 46;
	case 46:
		return 127;
	case 13:
		return 13;
	case 8:
		return 8;
	}
	return 0;
};
openfl.ui.Mouse = function() { };
$hxClasses["openfl.ui.Mouse"] = openfl.ui.Mouse;
openfl.ui.Mouse.__name__ = ["openfl","ui","Mouse"];
openfl.ui.Mouse.hide = function() {
	lime.ui.Mouse.hide();
};
openfl.ui.Mouse.show = function() {
	lime.ui.Mouse.show();
};
openfl.ui.Multitouch = function() { };
$hxClasses["openfl.ui.Multitouch"] = openfl.ui.Multitouch;
openfl.ui.Multitouch.__name__ = ["openfl","ui","Multitouch"];
openfl.ui.Multitouch.__properties__ = {get_supportsTouchEvents:"get_supportsTouchEvents",set_inputMode:"set_inputMode",get_inputMode:"get_inputMode"}
openfl.ui.Multitouch.maxTouchPoints = null;
openfl.ui.Multitouch.supportedGestures = null;
openfl.ui.Multitouch.supportsGestureEvents = null;
openfl.ui.Multitouch.supportsTouchEvents = null;
openfl.ui.Multitouch.get_inputMode = function() {
	return openfl.ui.MultitouchInputMode.TOUCH_POINT;
};
openfl.ui.Multitouch.set_inputMode = function(inMode) {
	if(inMode == openfl.ui.MultitouchInputMode.GESTURE) return openfl.ui.Multitouch.get_inputMode();
	return inMode;
};
openfl.ui.Multitouch.get_supportsTouchEvents = function() {
	if(('ontouchstart' in document.documentElement) || (window.DocumentTouch && document instanceof DocumentTouch)) return true;
	return false;
};
openfl.ui.MultitouchInputMode = $hxClasses["openfl.ui.MultitouchInputMode"] = { __ename__ : true, __constructs__ : ["NONE","TOUCH_POINT","GESTURE"] };
openfl.ui.MultitouchInputMode.NONE = ["NONE",0];
openfl.ui.MultitouchInputMode.NONE.toString = $estr;
openfl.ui.MultitouchInputMode.NONE.__enum__ = openfl.ui.MultitouchInputMode;
openfl.ui.MultitouchInputMode.TOUCH_POINT = ["TOUCH_POINT",1];
openfl.ui.MultitouchInputMode.TOUCH_POINT.toString = $estr;
openfl.ui.MultitouchInputMode.TOUCH_POINT.__enum__ = openfl.ui.MultitouchInputMode;
openfl.ui.MultitouchInputMode.GESTURE = ["GESTURE",2];
openfl.ui.MultitouchInputMode.GESTURE.toString = $estr;
openfl.ui.MultitouchInputMode.GESTURE.__enum__ = openfl.ui.MultitouchInputMode;
openfl.utils = {};
openfl.utils.AGALMiniAssembler = function() {
	this.r = new haxe.ds.StringMap();
	this.cur = new openfl._internal.aglsl.assembler.Part();
};
$hxClasses["openfl.utils.AGALMiniAssembler"] = openfl.utils.AGALMiniAssembler;
openfl.utils.AGALMiniAssembler.__name__ = ["openfl","utils","AGALMiniAssembler"];
openfl.utils.AGALMiniAssembler.prototype = {
	cur: null
	,r: null
	,addHeader: function(partname,version) {
		if(version == 0) version = 1;
		if(!this.r.exists(partname)) {
			this.r.set(partname,new openfl._internal.aglsl.assembler.Part(partname,version));
			this.emitHeader(this.r.get(partname));
		} else if(this.r.get(partname).version != (version | 0)) throw "Multiple versions for part " + partname;
		this.cur = this.r.get(partname);
	}
	,assemble: function(source,ext_part,ext_version) {
		if(ext_version == 0) ext_version = 1;
		if(ext_part != null) this.addHeader(ext_part,ext_version);
		var reg = new EReg("[\n\r]+","g");
		var lines = reg.split(source);
		var i;
		var _g1 = 0;
		var _g = lines.length;
		while(_g1 < _g) {
			var i1 = _g1++;
			this.processLine(lines[i1],i1);
		}
		return this.r;
	}
	,emitDest: function(pr,token,opdest) {
		var reg = this.getGroupMatches(new EReg("([fov]?[tpocidavs])(\\d*)(\\.[xyzw]{1,4})?","i"),token,3);
		if(openfl._internal.aglsl.assembler.RegMap.get_map().get(reg[1]) == null) return false;
		if(Std.parseInt(reg[2]) == null) reg[2] = "0";
		var em_num;
		if(reg[2] != null) em_num = reg[2]; else em_num = "0";
		var em_code = openfl._internal.aglsl.assembler.RegMap.get_map().get(reg[1]).code;
		var em_mask = this.stringToMask(reg[3]);
		pr.data.writeShort(Std.parseInt(em_num));
		pr.data.writeByte(em_mask);
		pr.data.writeByte(em_code);
		return true;
	}
	,emitHeader: function(pr) {
		pr.data.writeByte(160);
		pr.data.writeUnsignedInt(pr.version);
		if(pr.version >= 16) pr.data.writeByte(0);
		pr.data.writeByte(161);
		var _g = pr.name;
		switch(_g) {
		case "fragment":
			pr.data.writeByte(1);
			break;
		case "vertex":
			pr.data.writeByte(0);
			break;
		case "cpu":
			pr.data.writeByte(2);
			break;
		default:
			pr.data.writeByte(255);
		}
	}
	,emitOpcode: function(pr,opcode) {
		pr.data.writeUnsignedInt(opcode);
	}
	,emitSampler: function(pr,token,opsrc,opts) {
		var reg = this.getGroupMatches(new EReg("fs(\\d*)","i"),token,1);
		if(reg.length < 1) return false;
		pr.data.writeShort(Std.parseInt(reg[1]));
		pr.data.writeByte(0);
		pr.data.writeByte(0);
		var samplerbits = 5;
		var sampleroptset = 0;
		var _g1 = 0;
		var _g = opts.length;
		while(_g1 < _g) {
			var i = _g1++;
			var o = openfl._internal.aglsl.assembler.SamplerMap.get_map().get(opts[i].toLowerCase());
			if(o != null) {
				if((function($this) {
					var $r;
					var $int = sampleroptset >> o.shift & o.mask;
					$r = $int < 0?4294967296.0 + $int:$int + 0.0;
					return $r;
				}(this)) != 0) haxe.Log.trace("Warning, duplicate sampler option",{ fileName : "AGALMiniAssembler.hx", lineNumber : 173, className : "openfl.utils.AGALMiniAssembler", methodName : "emitSampler"});
				sampleroptset = sampleroptset | o.mask << o.shift;
				samplerbits = samplerbits & ~(o.mask << o.shift);
				samplerbits = samplerbits | o.value << o.shift;
			} else {
			}
		}
		pr.data.writeUnsignedInt(samplerbits);
		return true;
	}
	,emitSource: function(pr,token,opsrc) {
		var indexed = this.getGroupMatches(new EReg("vc\\[(v[tcai])(\\d+)\\.([xyzw])([\\+\\-]\\d+)?\\](\\.[xyzw]{1,4})?","i"),token,5);
		var reg;
		if(indexed.length > 0) {
			if(openfl._internal.aglsl.assembler.RegMap.get_map().get(indexed[1]) == null) return false;
			var selindex = { x : 0, y : 1, z : 2, w : 3};
			var em = { num : Std.parseInt(indexed[2]) | 0, code : openfl._internal.aglsl.assembler.RegMap.get_map().get(indexed[1]).code, swizzle : this.stringToSwizzle(indexed[5]), select : Reflect.getProperty(selindex,indexed[3]), offset : Std.parseInt(indexed[4]) | 0};
			pr.data.writeShort(em.num);
			pr.data.writeByte(em.offset);
			pr.data.writeByte(em.swizzle);
			pr.data.writeByte(1);
			pr.data.writeByte(em.code);
			pr.data.writeByte(em.select);
			pr.data.writeByte(128);
		} else {
			reg = this.getGroupMatches(new EReg("([fov]?[tpocidavs])(\\d*)(\\.[xyzw]{1,4})?","i"),token,3);
			if(openfl._internal.aglsl.assembler.RegMap.get_map().get(reg[1]) == null) return false;
			if(reg.length < 4) reg.push("");
			var em1 = { num : Std.parseInt(reg[2]) | 0, code : openfl._internal.aglsl.assembler.RegMap.get_map().get(reg[1]).code, swizzle : this.stringToSwizzle(reg[3])};
			pr.data.writeShort(em1.num);
			pr.data.writeByte(0);
			pr.data.writeByte(em1.swizzle);
			pr.data.writeByte(em1.code);
			pr.data.writeByte(0);
			pr.data.writeByte(0);
			pr.data.writeByte(0);
		}
		return true;
	}
	,emitZeroDword: function(pr) {
		pr.data.writeUnsignedInt(0);
	}
	,emitZeroQword: function(pr) {
		pr.data.writeUnsignedInt(0);
		pr.data.writeUnsignedInt(0);
	}
	,getGroupMatches: function(ereg,text,groupCount) {
		if(groupCount == null) groupCount = 0;
		var matches = [];
		if(!ereg.match(text)) return matches;
		var m = 0;
		var t = null;
		var completed = false;
		while(!completed && (t = ereg.matched(m++)) != null) {
			matches.push(t);
			if((function($this) {
				var $r;
				var $int = groupCount;
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}(this)) != 0 && (function($this) {
				var $r;
				var aNeg = m < 0;
				var bNeg = groupCount < 0;
				$r = aNeg != bNeg?aNeg:m > groupCount;
				return $r;
			}(this))) completed = true;
		}
		return matches;
	}
	,getMatches: function(ereg,text) {
		var matches = [];
		while(ereg.match(text)) {
			var t = ereg.matched(1);
			matches.push(t);
			text = ereg.matchedRight();
		}
		return matches;
	}
	,processLine: function(line,linenr) {
		var startcomment = line.indexOf("//");
		if(startcomment != -1) line = line.substring(0,startcomment);
		var r = new EReg("^\\s+|\\s+$","g");
		line = r.replace(line,"");
		if(!(line.length > 0)) return;
		r = new EReg("<.*>","g");
		var optsb = r.match(line);
		var opts = null;
		if(optsb) {
			var optsi = r.matchedPos().pos;
			opts = this.getMatches(new EReg("([\\w\\.\\-\\+]+)","gi"),line.substring(optsi));
			line = line.substring(0,optsi);
		}
		var tokens = this.getMatches(new EReg("([\\w\\.\\+\\[\\]]+)","gi"),line);
		if(tokens.length == 0) {
			if(line.length >= 3) haxe.Log.trace("Warning: bad line " + Std.string((function($this) {
				var $r;
				var $int = linenr;
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}(this))) + ": " + line,{ fileName : "AGALMiniAssembler.hx", lineNumber : 349, className : "openfl.utils.AGALMiniAssembler", methodName : "processLine"});
			return;
		}
		var _g = tokens[0];
		switch(_g) {
		case "part":
			this.addHeader(tokens[1],Std.parseInt(tokens[2]));
			break;
		case "endpart":
			if(this.cur == null) throw "Unexpected endpart";
			this.cur.data.position = 0;
			this.cur = null;
			return;
		default:
			if(this.cur == null) {
				haxe.Log.trace("Warning: bad line " + Std.string((function($this) {
					var $r;
					var int1 = linenr;
					$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
					return $r;
				}(this))) + ": " + line + " (Outside of any part definition)",{ fileName : "AGALMiniAssembler.hx", lineNumber : 380, className : "openfl.utils.AGALMiniAssembler", methodName : "processLine"});
				return;
			}
			if(this.cur.name == "comment") return;
			var op;
			var this1 = openfl._internal.aglsl.assembler.OpcodeMap.get_map();
			op = this1.get(tokens[0]);
			if(op == null) throw "Bad opcode " + tokens[0] + " " + Std.string((function($this) {
				var $r;
				var int2 = linenr;
				$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
				return $r;
			}(this))) + ": " + line;
			this.emitOpcode(this.cur,op.opcode);
			var ti = 1;
			if(op.dest != null && op.dest != "none") {
				if(!this.emitDest(this.cur,tokens[ti++],op.dest)) throw "Bad destination register " + tokens[ti - 1] + " " + Std.string((function($this) {
					var $r;
					var int3 = linenr;
					$r = int3 < 0?4294967296.0 + int3:int3 + 0.0;
					return $r;
				}(this))) + ": " + line;
			} else this.emitZeroDword(this.cur);
			if(op.a != null && op.a.format != "none") {
				if(!this.emitSource(this.cur,tokens[ti++],op.a)) throw "Bad source register " + tokens[ti - 1] + " " + Std.string((function($this) {
					var $r;
					var int4 = linenr;
					$r = int4 < 0?4294967296.0 + int4:int4 + 0.0;
					return $r;
				}(this))) + ": " + line;
			} else this.emitZeroQword(this.cur);
			if(op.b != null && op.b.format != "none") {
				if(op.b.format == "sampler") {
					if(!this.emitSampler(this.cur,tokens[ti++],op.b,opts)) throw "Bad sampler register " + tokens[ti - 1] + " " + Std.string((function($this) {
						var $r;
						var int5 = linenr;
						$r = int5 < 0?4294967296.0 + int5:int5 + 0.0;
						return $r;
					}(this))) + ": " + line;
				} else if(!this.emitSource(this.cur,tokens[ti++],op.b)) throw "Bad source register " + tokens[ti - 1] + " " + Std.string((function($this) {
					var $r;
					var int6 = linenr;
					$r = int6 < 0?4294967296.0 + int6:int6 + 0.0;
					return $r;
				}(this))) + ": " + line;
			} else this.emitZeroQword(this.cur);
		}
	}
	,stringToMask: function(s) {
		if(s == null) return 15;
		var r = 0;
		if(s.indexOf("x") != -1) r |= 1;
		if(s.indexOf("y") != -1) r |= 2;
		if(s.indexOf("z") != -1) r |= 4;
		if(s.indexOf("w") != -1) r |= 8;
		return r;
	}
	,stringToSwizzle: function(s) {
		if(s == "") return 228;
		var chartoindex = { x : 0, y : 1, z : 2, w : 3};
		var sw = 0;
		if(s.charAt(0) != ".") throw "Missing . for swizzle";
		if(s.length > 1) sw |= Reflect.field(chartoindex,s.charAt(1));
		if(s.length > 2) sw |= Reflect.field(chartoindex,s.charAt(2)) << 2; else sw |= (sw & 3) << 2;
		if(s.length > 3) sw |= Reflect.field(chartoindex,s.charAt(3)) << 4; else sw |= (sw & 12) << 2;
		if(s.length > 4) sw |= Reflect.field(chartoindex,s.charAt(4)) << 6; else sw |= (sw & 48) << 2;
		return sw;
	}
	,__class__: openfl.utils.AGALMiniAssembler
};
openfl.utils.Dictionary = function(weakKeys) {
	if(weakKeys == null) weakKeys = false;
};
$hxClasses["openfl.utils.Dictionary"] = openfl.utils.Dictionary;
openfl.utils.Dictionary.__name__ = ["openfl","utils","Dictionary"];
openfl.utils.Dictionary.prototype = {
	__class__: openfl.utils.Dictionary
};
openfl.utils.Endian = function() { };
$hxClasses["openfl.utils.Endian"] = openfl.utils.Endian;
openfl.utils.Endian.__name__ = ["openfl","utils","Endian"];
var org = {};
org.swiftsuspenders = {};
org.swiftsuspenders.InjectionEvent = function(type,instance,instanceType) {
	openfl.events.Event.call(this,type);
	this.instance = instance;
	this.instanceType = instanceType;
};
$hxClasses["org.swiftsuspenders.InjectionEvent"] = org.swiftsuspenders.InjectionEvent;
org.swiftsuspenders.InjectionEvent.__name__ = ["org","swiftsuspenders","InjectionEvent"];
org.swiftsuspenders.InjectionEvent.__super__ = openfl.events.Event;
org.swiftsuspenders.InjectionEvent.prototype = $extend(openfl.events.Event.prototype,{
	instance: null
	,instanceType: null
	,clone: function() {
		return new org.swiftsuspenders.InjectionEvent(this.type,this.instance,this.instanceType);
	}
	,__class__: org.swiftsuspenders.InjectionEvent
});
org.swiftsuspenders.utils = {};
org.swiftsuspenders.utils.CallProxy = function() {
};
$hxClasses["org.swiftsuspenders.utils.CallProxy"] = org.swiftsuspenders.utils.CallProxy;
org.swiftsuspenders.utils.CallProxy.__name__ = ["org","swiftsuspenders","utils","CallProxy"];
org.swiftsuspenders.utils.CallProxy.replaceClassName = function(c) {
	var className = org.swiftsuspenders.utils.CallProxy.getClassName(c);
	className = className.split("flash.").join("openfl.");
	return className;
};
org.swiftsuspenders.utils.CallProxy.getClassName = function(c) {
	var className = Type.getClassName(c);
	return className;
};
org.swiftsuspenders.utils.CallProxy.hasField = function(o,field) {
	var fields;
	var clazz;
	if(js.Boot.__instanceof(o,Class)) {
		clazz = o;
		fields = Type.getInstanceFields(clazz);
	} else fields = Reflect.fields(o);
	var _g1 = 0;
	var _g = fields.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(fields[i] == field) return true;
	}
	var f = Reflect.getProperty(o,field);
	var isFunction = Reflect.isFunction(f);
	var isObject = Reflect.isObject(f);
	if(isFunction || isObject) return true; else return false;
};
org.swiftsuspenders.utils.CallProxy.createInstance = function(cl,args) {
	var instance = Type.createInstance(cl,args);
	return instance;
};
org.swiftsuspenders.utils.CallProxy.prototype = {
	__class__: org.swiftsuspenders.utils.CallProxy
};
org.swiftsuspenders.Injector = function() {
	this.providerMappings = new haxe.ds.StringMap();
	this._mappings = new haxe.ds.StringMap();
	this._mappingsInProcess = new haxe.ds.StringMap();
	this._managedObjects = new haxe.ds.StringMap();
	this._reflector = new org.swiftsuspenders.reflection.DescribeTypeRTTIReflector();
	this._classDescriptor = new org.swiftsuspenders.utils.TypeDescriptor(this._reflector,org.swiftsuspenders.Injector.INJECTION_POINTS_CACHE);
	this.set_applicationDomain(openfl.system.ApplicationDomain.currentDomain);
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["org.swiftsuspenders.Injector"] = org.swiftsuspenders.Injector;
org.swiftsuspenders.Injector.__name__ = ["org","swiftsuspenders","Injector"];
org.swiftsuspenders.Injector.initBaseTypeMappingIds = function(types) {
	var returnArray = new Array();
	var _g1 = 0;
	var _g = types.length;
	while(_g1 < _g) {
		var i = _g1++;
		returnArray.push(org.swiftsuspenders.utils.CallProxy.replaceClassName(types[i]) + "|");
	}
	return returnArray;
};
org.swiftsuspenders.Injector.purgeInjectionPointsCache = function() {
	org.swiftsuspenders.Injector.INJECTION_POINTS_CACHE = new haxe.ds.StringMap();
};
org.swiftsuspenders.Injector.__super__ = openfl.events.EventDispatcher;
org.swiftsuspenders.Injector.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	parentInjector: null
	,set_parentInjector: function(parentInjector) {
		this.parentInjector = parentInjector;
		return this.get_parentInjector();
	}
	,get_parentInjector: function() {
		return this.parentInjector;
	}
	,applicationDomain: null
	,set_applicationDomain: function(applicationDomain) {
		if(applicationDomain != null) this.applicationDomain = applicationDomain; else this.applicationDomain = openfl.system.ApplicationDomain.currentDomain;
		return this.get_applicationDomain();
	}
	,get_applicationDomain: function() {
		return this.applicationDomain;
	}
	,_classDescriptor: null
	,_mappings: null
	,_mappingsInProcess: null
	,_managedObjects: null
	,_reflector: null
	,fallbackProvider: null
	,get_fallbackProvider: function() {
		return this.fallbackProvider;
	}
	,set_fallbackProvider: function(provider) {
		this.fallbackProvider = provider;
		return provider;
	}
	,blockParentFallbackProvider: null
	,get_blockParentFallbackProvider: function() {
		return this.blockParentFallbackProvider;
	}
	,set_blockParentFallbackProvider: function(value) {
		this.blockParentFallbackProvider = value;
		return value;
	}
	,providerMappings: null
	,map: function(type,name) {
		if(name == null) name = "";
		var mappingId = org.swiftsuspenders.utils.CallProxy.replaceClassName(type) + "|" + name;
		if(this._mappings.get(mappingId) != null) return this._mappings.get(mappingId);
		return this.createMapping(type,name,mappingId);
	}
	,unmap: function(type,name) {
		if(name == null) name = "";
		var mappingId = org.swiftsuspenders.utils.CallProxy.replaceClassName(type) + "|" + name;
		var mapping = this._mappings.get(mappingId);
		if(mapping != null && mapping.get_isSealed()) throw new org.swiftsuspenders.errors.InjectorError("Can't unmap a sealed mapping");
		if(mapping == null) throw new org.swiftsuspenders.errors.InjectorError("Error while removing an injector mapping: " + "No mapping defined for dependency " + mappingId);
		mapping.getProvider().destroy();
		this._mappings.remove(mappingId);
		this.providerMappings.remove(mappingId);
		this.hasEventListener(org.swiftsuspenders.mapping.MappingEvent.POST_MAPPING_REMOVE) && this.dispatchEvent(new org.swiftsuspenders.mapping.MappingEvent(org.swiftsuspenders.mapping.MappingEvent.POST_MAPPING_REMOVE,type,name,null));
	}
	,satisfies: function(type,name) {
		if(name == null) name = "";
		var mappingId = org.swiftsuspenders.utils.CallProxy.replaceClassName(type) + "|" + name;
		return this.getProvider(mappingId,true) != null;
	}
	,satisfiesDirectly: function(type,name) {
		if(name == null) name = "";
		return this.hasDirectMapping(type,name) || this.getDefaultProvider(org.swiftsuspenders.utils.CallProxy.replaceClassName(type) + "|" + name,false) != null;
	}
	,getMapping: function(type,name) {
		if(name == null) name = "";
		var mappingId = org.swiftsuspenders.utils.CallProxy.replaceClassName(type) + "|" + name;
		var mapping = this._mappings.get(mappingId);
		if(mapping == null) throw new org.swiftsuspenders.errors.InjectorMissingMappingError("Error while retrieving an injector mapping: " + "No mapping defined for dependency " + mappingId);
		return mapping;
	}
	,hasManagedInstance: function(instance) {
		var key = org.swiftsuspenders.utils.UID.instanceID(instance);
		return this._managedObjects.get(key);
	}
	,injectInto: function(target) {
		var type = this._reflector.getClass(target);
		this.applyInjectionPoints(target,type,this._classDescriptor.getDescription(type));
	}
	,getInstance: function(type,name,targetType) {
		if(name == null) name = "";
		var mappingId = org.swiftsuspenders.utils.CallProxy.replaceClassName(type) + "|" + name;
		var provider;
		if(this.getProvider(mappingId) != null) provider = this.getProvider(mappingId); else provider = this.getDefaultProvider(mappingId,true);
		if(provider != null) {
			var ctor = this._classDescriptor.getDescription(type).ctor;
			var returnVal;
			if(ctor != null) returnVal = provider.apply(targetType,this,ctor.injectParameters); else returnVal = provider.apply(targetType,this,null);
			return returnVal;
		}
		var fallbackMessage;
		if(this.get_fallbackProvider() != null) fallbackMessage = "the fallbackProvider, '" + Std.string(this.get_fallbackProvider()) + "', was unable to fulfill this request."; else fallbackMessage = "the injector has no fallbackProvider.";
		throw new org.swiftsuspenders.errors.InjectorMissingMappingError("No mapping found for request " + mappingId + " and " + fallbackMessage);
	}
	,getOrCreateNewInstance: function(type) {
		var _satisfies = this.satisfies(type);
		if(_satisfies) return this.getInstance(type); else return this.instantiateUnmapped(type);
	}
	,instantiateUnmapped: function(type) {
		if(!this.canBeInstantiated(type)) throw new org.swiftsuspenders.errors.InjectorInterfaceConstructionError("Can't instantiate interface " + org.swiftsuspenders.utils.CallProxy.replaceClassName(type));
		var description = this._classDescriptor.getDescription(type);
		var instance = description.ctor.createInstance(type,this);
		if(this.hasEventListener(org.swiftsuspenders.InjectionEvent.POST_INSTANTIATE)) this.dispatchEvent(new org.swiftsuspenders.InjectionEvent(org.swiftsuspenders.InjectionEvent.POST_INSTANTIATE,instance,type));
		this.applyInjectionPoints(instance,type,description);
		return instance;
	}
	,destroyInstance: function(instance) {
		var k = org.swiftsuspenders.utils.UID.clearInstanceID(instance);
		this._managedObjects.set(k,null);
		null;
		var type = this._reflector.getClass(instance);
		var typeDescription = this.getTypeDescription(type);
	}
	,teardown: function() {
		var $it0 = this._mappings.iterator();
		while( $it0.hasNext() ) {
			var mapping = $it0.next();
			mapping.getProvider().destroy();
		}
		var objectsToRemove = new Array();
		var fields;
		var $it1 = this._managedObjects.iterator();
		while( $it1.hasNext() ) {
			var instance = $it1.next();
			if(instance) objectsToRemove.push(instance);
		}
		while(objectsToRemove.length > 0) this.destroyInstance(objectsToRemove.pop());
		fields = Reflect.fields(this.providerMappings);
		var _g = 0;
		while(_g < fields.length) {
			var mappingId = fields[_g];
			++_g;
			this.providerMappings.remove(mappingId);
		}
		this._mappings = new haxe.ds.StringMap();
		this._mappingsInProcess = new haxe.ds.StringMap();
		this._managedObjects = new haxe.ds.StringMap();
		this.set_fallbackProvider(null);
		this.set_blockParentFallbackProvider(false);
	}
	,createChildInjector: function(applicationDomain) {
		var injector = new org.swiftsuspenders.Injector();
		if(applicationDomain != null) injector.set_applicationDomain(applicationDomain); else injector.set_applicationDomain(this.get_applicationDomain());
		injector.set_parentInjector(this);
		return injector;
	}
	,addTypeDescription: function(type,description) {
		this._classDescriptor.addDescription(type,description);
	}
	,getTypeDescription: function(type) {
		return this._reflector.describeInjections(type);
	}
	,hasMapping: function(type,name) {
		if(name == null) name = "";
		return this.getProvider(org.swiftsuspenders.utils.CallProxy.replaceClassName(type) + "|" + name) != null;
	}
	,hasDirectMapping: function(type,name) {
		if(name == null) name = "";
		return (function($this) {
			var $r;
			var key = org.swiftsuspenders.utils.CallProxy.replaceClassName(type) + "|" + name;
			$r = $this._mappings.get(key);
			return $r;
		}(this)) != null;
	}
	,canBeInstantiated: function(type) {
		var description = this._classDescriptor.getDescription(type);
		return description.ctor != null;
	}
	,getProvider: function(mappingId,fallbackToDefault) {
		if(fallbackToDefault == null) fallbackToDefault = true;
		var softProvider = null;
		var injector = this;
		while(injector != null) {
			var provider = injector.providerMappings.get(mappingId);
			if(provider != null) {
				if(js.Boot.__instanceof(provider,org.swiftsuspenders.dependencyproviders.SoftDependencyProvider)) {
					softProvider = provider;
					injector = injector.get_parentInjector();
					continue;
				}
				if(js.Boot.__instanceof(provider,org.swiftsuspenders.dependencyproviders.LocalOnlyProvider) && injector != this) {
					injector = injector.get_parentInjector();
					continue;
				}
				return provider;
			}
			injector = injector.get_parentInjector();
		}
		if(softProvider != null) return softProvider;
		if(fallbackToDefault) return this.getDefaultProvider(mappingId,true); else return null;
	}
	,getDefaultProvider: function(mappingId,consultParents) {
		if(HxOverrides.indexOf(org.swiftsuspenders.Injector._baseTypes,mappingId,0) > -1) return null;
		if(this.get_fallbackProvider() != null && this.get_fallbackProvider().prepareNextRequest(mappingId)) return this.get_fallbackProvider();
		if(consultParents && this.get_blockParentFallbackProvider() && this.get_parentInjector() != null) return this.get_parentInjector().getDefaultProvider(mappingId,consultParents);
		return null;
	}
	,createMapping: function(type,name,mappingId) {
		if(this._mappingsInProcess.get(mappingId)) throw new org.swiftsuspenders.errors.InjectorError("Can't change a mapping from inside a listener to it's creation event");
		this._mappingsInProcess.set(mappingId,true);
		true;
		this.hasEventListener(org.swiftsuspenders.mapping.MappingEvent.PRE_MAPPING_CREATE) && this.dispatchEvent(new org.swiftsuspenders.mapping.MappingEvent(org.swiftsuspenders.mapping.MappingEvent.PRE_MAPPING_CREATE,type,name,null));
		var mapping = new org.swiftsuspenders.mapping.InjectionMapping(this,type,name,mappingId);
		this._mappings.set(mappingId,mapping);
		mapping;
		var sealKey = mapping.seal();
		this.hasEventListener(org.swiftsuspenders.mapping.MappingEvent.POST_MAPPING_CREATE) && this.dispatchEvent(new org.swiftsuspenders.mapping.MappingEvent(org.swiftsuspenders.mapping.MappingEvent.POST_MAPPING_CREATE,type,name,mapping));
		this._mappingsInProcess.remove(mappingId);
		mapping.unseal(sealKey);
		return mapping;
	}
	,applyInjectionPoints: function(target,targetType,description) {
		var injectionPoint = description.injectionPoints;
		if(this.hasEventListener(org.swiftsuspenders.InjectionEvent.PRE_CONSTRUCT)) this.dispatchEvent(new org.swiftsuspenders.InjectionEvent(org.swiftsuspenders.InjectionEvent.PRE_CONSTRUCT,target,targetType));
		while(injectionPoint != null) {
			injectionPoint.applyInjection(target,targetType,this);
			injectionPoint = injectionPoint.next;
		}
		if(description.preDestroyMethods != null) {
			var k = org.swiftsuspenders.utils.UID.instanceID(target);
			var v = target;
			this._managedObjects.set(k,v);
			v;
		}
		this.hasEventListener(org.swiftsuspenders.InjectionEvent.POST_CONSTRUCT) && this.dispatchEvent(new org.swiftsuspenders.InjectionEvent(org.swiftsuspenders.InjectionEvent.POST_CONSTRUCT,target,targetType));
	}
	,__class__: org.swiftsuspenders.Injector
	,__properties__: {set_blockParentFallbackProvider:"set_blockParentFallbackProvider",get_blockParentFallbackProvider:"get_blockParentFallbackProvider",set_fallbackProvider:"set_fallbackProvider",get_fallbackProvider:"get_fallbackProvider",set_applicationDomain:"set_applicationDomain",get_applicationDomain:"get_applicationDomain",set_parentInjector:"set_parentInjector",get_parentInjector:"get_parentInjector"}
});
org.swiftsuspenders.dependencyproviders = {};
org.swiftsuspenders.dependencyproviders.DependencyProvider = function() { };
$hxClasses["org.swiftsuspenders.dependencyproviders.DependencyProvider"] = org.swiftsuspenders.dependencyproviders.DependencyProvider;
org.swiftsuspenders.dependencyproviders.DependencyProvider.__name__ = ["org","swiftsuspenders","dependencyproviders","DependencyProvider"];
org.swiftsuspenders.dependencyproviders.DependencyProvider.prototype = {
	apply: null
	,destroy: null
	,__class__: org.swiftsuspenders.dependencyproviders.DependencyProvider
};
org.swiftsuspenders.dependencyproviders.ClassProvider = function(responseType) {
	this._responseType = responseType;
};
$hxClasses["org.swiftsuspenders.dependencyproviders.ClassProvider"] = org.swiftsuspenders.dependencyproviders.ClassProvider;
org.swiftsuspenders.dependencyproviders.ClassProvider.__name__ = ["org","swiftsuspenders","dependencyproviders","ClassProvider"];
org.swiftsuspenders.dependencyproviders.ClassProvider.__interfaces__ = [org.swiftsuspenders.dependencyproviders.DependencyProvider];
org.swiftsuspenders.dependencyproviders.ClassProvider.prototype = {
	_responseType: null
	,apply: function(targetType,activeInjector,injectParameters) {
		return activeInjector.instantiateUnmapped(this._responseType);
	}
	,destroy: function() {
	}
	,__class__: org.swiftsuspenders.dependencyproviders.ClassProvider
};
org.swiftsuspenders.dependencyproviders.FallbackDependencyProvider = function() { };
$hxClasses["org.swiftsuspenders.dependencyproviders.FallbackDependencyProvider"] = org.swiftsuspenders.dependencyproviders.FallbackDependencyProvider;
org.swiftsuspenders.dependencyproviders.FallbackDependencyProvider.__name__ = ["org","swiftsuspenders","dependencyproviders","FallbackDependencyProvider"];
org.swiftsuspenders.dependencyproviders.FallbackDependencyProvider.__interfaces__ = [org.swiftsuspenders.dependencyproviders.DependencyProvider];
org.swiftsuspenders.dependencyproviders.FallbackDependencyProvider.prototype = {
	prepareNextRequest: null
	,__class__: org.swiftsuspenders.dependencyproviders.FallbackDependencyProvider
};
org.swiftsuspenders.dependencyproviders.ForwardingProvider = function(provider) {
	this.provider = provider;
};
$hxClasses["org.swiftsuspenders.dependencyproviders.ForwardingProvider"] = org.swiftsuspenders.dependencyproviders.ForwardingProvider;
org.swiftsuspenders.dependencyproviders.ForwardingProvider.__name__ = ["org","swiftsuspenders","dependencyproviders","ForwardingProvider"];
org.swiftsuspenders.dependencyproviders.ForwardingProvider.__interfaces__ = [org.swiftsuspenders.dependencyproviders.DependencyProvider];
org.swiftsuspenders.dependencyproviders.ForwardingProvider.prototype = {
	provider: null
	,apply: function(targetType,activeInjector,injectParameters) {
		return this.provider.apply(targetType,activeInjector,injectParameters);
	}
	,destroy: function() {
		this.provider.destroy();
	}
	,__class__: org.swiftsuspenders.dependencyproviders.ForwardingProvider
};
org.swiftsuspenders.dependencyproviders.InjectorUsingProvider = function(injector,provider) {
	org.swiftsuspenders.dependencyproviders.ForwardingProvider.call(this,provider);
	this.injector = injector;
};
$hxClasses["org.swiftsuspenders.dependencyproviders.InjectorUsingProvider"] = org.swiftsuspenders.dependencyproviders.InjectorUsingProvider;
org.swiftsuspenders.dependencyproviders.InjectorUsingProvider.__name__ = ["org","swiftsuspenders","dependencyproviders","InjectorUsingProvider"];
org.swiftsuspenders.dependencyproviders.InjectorUsingProvider.__super__ = org.swiftsuspenders.dependencyproviders.ForwardingProvider;
org.swiftsuspenders.dependencyproviders.InjectorUsingProvider.prototype = $extend(org.swiftsuspenders.dependencyproviders.ForwardingProvider.prototype,{
	injector: null
	,apply: function(targetType,activeInjector,injectParameters) {
		return this.provider.apply(targetType,this.injector,injectParameters);
	}
	,__class__: org.swiftsuspenders.dependencyproviders.InjectorUsingProvider
});
org.swiftsuspenders.dependencyproviders.LocalOnlyProvider = function(provider) {
	org.swiftsuspenders.dependencyproviders.ForwardingProvider.call(this,provider);
};
$hxClasses["org.swiftsuspenders.dependencyproviders.LocalOnlyProvider"] = org.swiftsuspenders.dependencyproviders.LocalOnlyProvider;
org.swiftsuspenders.dependencyproviders.LocalOnlyProvider.__name__ = ["org","swiftsuspenders","dependencyproviders","LocalOnlyProvider"];
org.swiftsuspenders.dependencyproviders.LocalOnlyProvider.__super__ = org.swiftsuspenders.dependencyproviders.ForwardingProvider;
org.swiftsuspenders.dependencyproviders.LocalOnlyProvider.prototype = $extend(org.swiftsuspenders.dependencyproviders.ForwardingProvider.prototype,{
	__class__: org.swiftsuspenders.dependencyproviders.LocalOnlyProvider
});
org.swiftsuspenders.dependencyproviders.SingletonProvider = function(responseType,creatingInjector) {
	this._responseType = responseType;
	this._creatingInjector = creatingInjector;
};
$hxClasses["org.swiftsuspenders.dependencyproviders.SingletonProvider"] = org.swiftsuspenders.dependencyproviders.SingletonProvider;
org.swiftsuspenders.dependencyproviders.SingletonProvider.__name__ = ["org","swiftsuspenders","dependencyproviders","SingletonProvider"];
org.swiftsuspenders.dependencyproviders.SingletonProvider.__interfaces__ = [org.swiftsuspenders.dependencyproviders.DependencyProvider];
org.swiftsuspenders.dependencyproviders.SingletonProvider.prototype = {
	_responseType: null
	,_creatingInjector: null
	,_response: null
	,_destroyed: null
	,apply: function(targetType,activeInjector,injectParameters) {
		if(this._response == null) this._response = this.createResponse(this._creatingInjector);
		return this._response;
	}
	,createResponse: function(injector) {
		if(this._destroyed) throw new org.swiftsuspenders.errors.InjectorError("Forbidden usage of unmapped singleton provider for type " + org.swiftsuspenders.utils.CallProxy.replaceClassName(this._responseType));
		return injector.instantiateUnmapped(this._responseType);
	}
	,destroy: function() {
		this._destroyed = true;
		if(this._response != null && this._creatingInjector != null && this._creatingInjector.hasManagedInstance(this._response)) this._creatingInjector.destroyInstance(this._response);
		this._creatingInjector = null;
		this._response = null;
	}
	,__class__: org.swiftsuspenders.dependencyproviders.SingletonProvider
};
org.swiftsuspenders.dependencyproviders.SoftDependencyProvider = function(provider) {
	org.swiftsuspenders.dependencyproviders.ForwardingProvider.call(this,provider);
};
$hxClasses["org.swiftsuspenders.dependencyproviders.SoftDependencyProvider"] = org.swiftsuspenders.dependencyproviders.SoftDependencyProvider;
org.swiftsuspenders.dependencyproviders.SoftDependencyProvider.__name__ = ["org","swiftsuspenders","dependencyproviders","SoftDependencyProvider"];
org.swiftsuspenders.dependencyproviders.SoftDependencyProvider.__super__ = org.swiftsuspenders.dependencyproviders.ForwardingProvider;
org.swiftsuspenders.dependencyproviders.SoftDependencyProvider.prototype = $extend(org.swiftsuspenders.dependencyproviders.ForwardingProvider.prototype,{
	__class__: org.swiftsuspenders.dependencyproviders.SoftDependencyProvider
});
org.swiftsuspenders.dependencyproviders.ValueProvider = function(value,creatingInjector) {
	this._value = value;
	this._creatingInjector = creatingInjector;
};
$hxClasses["org.swiftsuspenders.dependencyproviders.ValueProvider"] = org.swiftsuspenders.dependencyproviders.ValueProvider;
org.swiftsuspenders.dependencyproviders.ValueProvider.__name__ = ["org","swiftsuspenders","dependencyproviders","ValueProvider"];
org.swiftsuspenders.dependencyproviders.ValueProvider.__interfaces__ = [org.swiftsuspenders.dependencyproviders.DependencyProvider];
org.swiftsuspenders.dependencyproviders.ValueProvider.prototype = {
	_value: null
	,_creatingInjector: null
	,apply: function(targetType,activeInjector,injectParameters) {
		return this._value;
	}
	,destroy: function() {
		if(this._value != null && this._creatingInjector != null && this._creatingInjector.hasManagedInstance(this._value)) this._creatingInjector.destroyInstance(this._value);
		this._creatingInjector = null;
		this._value = null;
	}
	,__class__: org.swiftsuspenders.dependencyproviders.ValueProvider
};
org.swiftsuspenders.errors = {};
org.swiftsuspenders.errors.InjectorError = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "";
	haxe.Log.trace(Std.string(message) + " " + Std.string(id),{ fileName : "InjectorError.hx", lineNumber : 19, className : "org.swiftsuspenders.errors.InjectorError", methodName : "new"});
};
$hxClasses["org.swiftsuspenders.errors.InjectorError"] = org.swiftsuspenders.errors.InjectorError;
org.swiftsuspenders.errors.InjectorError.__name__ = ["org","swiftsuspenders","errors","InjectorError"];
org.swiftsuspenders.errors.InjectorError.prototype = {
	__class__: org.swiftsuspenders.errors.InjectorError
};
org.swiftsuspenders.errors.InjectorInterfaceConstructionError = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "";
	org.swiftsuspenders.errors.InjectorError.call(this,message,id);
};
$hxClasses["org.swiftsuspenders.errors.InjectorInterfaceConstructionError"] = org.swiftsuspenders.errors.InjectorInterfaceConstructionError;
org.swiftsuspenders.errors.InjectorInterfaceConstructionError.__name__ = ["org","swiftsuspenders","errors","InjectorInterfaceConstructionError"];
org.swiftsuspenders.errors.InjectorInterfaceConstructionError.__super__ = org.swiftsuspenders.errors.InjectorError;
org.swiftsuspenders.errors.InjectorInterfaceConstructionError.prototype = $extend(org.swiftsuspenders.errors.InjectorError.prototype,{
	__class__: org.swiftsuspenders.errors.InjectorInterfaceConstructionError
});
org.swiftsuspenders.errors.InjectorMissingMappingError = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "";
	org.swiftsuspenders.errors.InjectorError.call(this,message,id);
};
$hxClasses["org.swiftsuspenders.errors.InjectorMissingMappingError"] = org.swiftsuspenders.errors.InjectorMissingMappingError;
org.swiftsuspenders.errors.InjectorMissingMappingError.__name__ = ["org","swiftsuspenders","errors","InjectorMissingMappingError"];
org.swiftsuspenders.errors.InjectorMissingMappingError.__super__ = org.swiftsuspenders.errors.InjectorError;
org.swiftsuspenders.errors.InjectorMissingMappingError.prototype = $extend(org.swiftsuspenders.errors.InjectorError.prototype,{
	__class__: org.swiftsuspenders.errors.InjectorMissingMappingError
});
org.swiftsuspenders.mapping = {};
org.swiftsuspenders.mapping.UnsealedMapping = function() { };
$hxClasses["org.swiftsuspenders.mapping.UnsealedMapping"] = org.swiftsuspenders.mapping.UnsealedMapping;
org.swiftsuspenders.mapping.UnsealedMapping.__name__ = ["org","swiftsuspenders","mapping","UnsealedMapping"];
org.swiftsuspenders.mapping.UnsealedMapping.prototype = {
	seal: null
	,__class__: org.swiftsuspenders.mapping.UnsealedMapping
};
org.swiftsuspenders.mapping.ProviderlessMapping = function() { };
$hxClasses["org.swiftsuspenders.mapping.ProviderlessMapping"] = org.swiftsuspenders.mapping.ProviderlessMapping;
org.swiftsuspenders.mapping.ProviderlessMapping.__name__ = ["org","swiftsuspenders","mapping","ProviderlessMapping"];
org.swiftsuspenders.mapping.ProviderlessMapping.prototype = {
	toType: null
	,toValue: null
	,toSingleton: null
	,asSingleton: null
	,toProvider: null
	,seal: null
	,__class__: org.swiftsuspenders.mapping.ProviderlessMapping
};
org.swiftsuspenders.mapping.InjectionMapping = function(creatingInjector,type,name,mappingId) {
	this._creatingInjector = creatingInjector;
	this._type = type;
	this._name = name;
	this._mappingId = mappingId;
	this._defaultProviderSet = true;
	this.mapProvider(new org.swiftsuspenders.dependencyproviders.ClassProvider(type));
};
$hxClasses["org.swiftsuspenders.mapping.InjectionMapping"] = org.swiftsuspenders.mapping.InjectionMapping;
org.swiftsuspenders.mapping.InjectionMapping.__name__ = ["org","swiftsuspenders","mapping","InjectionMapping"];
org.swiftsuspenders.mapping.InjectionMapping.__interfaces__ = [org.swiftsuspenders.mapping.UnsealedMapping,org.swiftsuspenders.mapping.ProviderlessMapping];
org.swiftsuspenders.mapping.InjectionMapping.prototype = {
	_type: null
	,_name: null
	,_mappingId: null
	,_creatingInjector: null
	,_defaultProviderSet: null
	,_overridingInjector: null
	,_soft: null
	,_local: null
	,_sealed: null
	,_sealKey: null
	,asSingleton: function(initializeImmediately) {
		if(initializeImmediately == null) initializeImmediately = false;
		this.toSingleton(this._type,initializeImmediately);
		return this;
	}
	,toType: function(type) {
		this.toProvider(new org.swiftsuspenders.dependencyproviders.ClassProvider(type));
		return this;
	}
	,toSingleton: function(type,initializeImmediately) {
		if(initializeImmediately == null) initializeImmediately = false;
		this.toProvider(new org.swiftsuspenders.dependencyproviders.SingletonProvider(type,this._creatingInjector));
		if(initializeImmediately) this._creatingInjector.getInstance(this._type,this._name);
		return this;
	}
	,toValue: function(value,autoInject,destroyOnUnmap) {
		if(destroyOnUnmap == null) destroyOnUnmap = false;
		if(autoInject == null) autoInject = false;
		this.toProvider(new org.swiftsuspenders.dependencyproviders.ValueProvider(value,destroyOnUnmap?this._creatingInjector:null));
		if(autoInject) this._creatingInjector.injectInto(value);
		return this;
	}
	,toProvider: function(provider) {
		if(this._sealed) this.throwSealedError();
		if(this.hasProvider() && provider != null && !this._defaultProviderSet) {
			haxe.Log.trace("Warning: Injector already has a mapping for " + this._mappingId + ".\n " + "If you have overridden this mapping intentionally you can use " + "\"injector.unmap()\" prior to your replacement mapping in order to " + "avoid seeing this message.",{ fileName : "InjectionMapping.hx", lineNumber : 160, className : "org.swiftsuspenders.mapping.InjectionMapping", methodName : "toProvider"});
			this._creatingInjector.hasEventListener(org.swiftsuspenders.mapping.MappingEvent.MAPPING_OVERRIDE) && this._creatingInjector.dispatchEvent(new org.swiftsuspenders.mapping.MappingEvent(org.swiftsuspenders.mapping.MappingEvent.MAPPING_OVERRIDE,this._type,this._name,this));
		}
		this.dispatchPreChangeEvent();
		this._defaultProviderSet = false;
		this.mapProvider(provider);
		this.dispatchPostChangeEvent();
		return this;
	}
	,toProviderOf: function(type,name) {
		if(name == null) name = "";
		var provider = this._creatingInjector.getMapping(type,name).getProvider();
		this.toProvider(provider);
		return this;
	}
	,softly: function() {
		if(this._sealed) this.throwSealedError();
		if(!this._soft) {
			var provider = this.getProvider();
			this.dispatchPreChangeEvent();
			this._soft = true;
			this.mapProvider(provider);
			this.dispatchPostChangeEvent();
		}
		return this;
	}
	,locally: function() {
		if(this._sealed) this.throwSealedError();
		if(this._local) return this;
		var provider = this.getProvider();
		this.dispatchPreChangeEvent();
		this._local = true;
		this.mapProvider(provider);
		this.dispatchPostChangeEvent();
		return this;
	}
	,seal: function() {
		if(this._sealed) throw new org.swiftsuspenders.errors.InjectorError("Mapping is already sealed.");
		this._sealed = true;
		this._sealKey = { };
		return this._sealKey;
	}
	,unseal: function(key) {
		if(!this._sealed) throw new org.swiftsuspenders.errors.InjectorError("Can't unseal a non-sealed mapping.");
		if(key != this._sealKey) throw new org.swiftsuspenders.errors.InjectorError("Can't unseal mapping without the correct key.");
		this._sealed = false;
		this._sealKey = null;
		return this;
	}
	,isSealed: null
	,get_isSealed: function() {
		return this._sealed;
	}
	,hasProvider: function() {
		if(this._creatingInjector.providerMappings.get(this._mappingId) == null) return false;
		return true;
	}
	,getProvider: function() {
		var provider = this._creatingInjector.providerMappings.get(this._mappingId);
		while(js.Boot.__instanceof(provider,org.swiftsuspenders.dependencyproviders.ForwardingProvider)) provider = (js.Boot.__cast(provider , org.swiftsuspenders.dependencyproviders.ForwardingProvider)).provider;
		return provider;
	}
	,setInjector: function(injector) {
		if(this._sealed) this.throwSealedError();
		if(injector == this._overridingInjector) return this;
		var provider = this.getProvider();
		this._overridingInjector = injector;
		this.mapProvider(provider);
		return this;
	}
	,mapProvider: function(provider) {
		if(this._soft) provider = new org.swiftsuspenders.dependencyproviders.SoftDependencyProvider(provider);
		if(this._local) provider = new org.swiftsuspenders.dependencyproviders.LocalOnlyProvider(provider);
		if(this._overridingInjector != null) provider = new org.swiftsuspenders.dependencyproviders.InjectorUsingProvider(this._overridingInjector,provider);
		this._creatingInjector.providerMappings.set(this._mappingId,provider);
		provider;
	}
	,throwSealedError: function() {
		throw new org.swiftsuspenders.errors.InjectorError("Can't change a sealed mapping");
	}
	,dispatchPreChangeEvent: function() {
		this._creatingInjector.hasEventListener(org.swiftsuspenders.mapping.MappingEvent.PRE_MAPPING_CHANGE) && this._creatingInjector.dispatchEvent(new org.swiftsuspenders.mapping.MappingEvent(org.swiftsuspenders.mapping.MappingEvent.PRE_MAPPING_CHANGE,this._type,this._name,this));
	}
	,dispatchPostChangeEvent: function() {
		this._creatingInjector.hasEventListener(org.swiftsuspenders.mapping.MappingEvent.POST_MAPPING_CHANGE) && this._creatingInjector.dispatchEvent(new org.swiftsuspenders.mapping.MappingEvent(org.swiftsuspenders.mapping.MappingEvent.POST_MAPPING_CHANGE,this._type,this._name,this));
	}
	,__class__: org.swiftsuspenders.mapping.InjectionMapping
	,__properties__: {get_isSealed:"get_isSealed"}
};
org.swiftsuspenders.mapping.MappingEvent = function(type,mappedType,mappedName,mapping) {
	openfl.events.Event.call(this,type);
	this.mappedType = mappedType;
	this.mappedName = mappedName;
	this.mapping = mapping;
};
$hxClasses["org.swiftsuspenders.mapping.MappingEvent"] = org.swiftsuspenders.mapping.MappingEvent;
org.swiftsuspenders.mapping.MappingEvent.__name__ = ["org","swiftsuspenders","mapping","MappingEvent"];
org.swiftsuspenders.mapping.MappingEvent.__super__ = openfl.events.Event;
org.swiftsuspenders.mapping.MappingEvent.prototype = $extend(openfl.events.Event.prototype,{
	mappedType: null
	,mappedName: null
	,mapping: null
	,clone: function() {
		return new org.swiftsuspenders.mapping.MappingEvent(this.type,this.mappedType,this.mappedName,this.mapping);
	}
	,__class__: org.swiftsuspenders.mapping.MappingEvent
});
org.swiftsuspenders.reflection = {};
org.swiftsuspenders.reflection.Reflector = function() { };
$hxClasses["org.swiftsuspenders.reflection.Reflector"] = org.swiftsuspenders.reflection.Reflector;
org.swiftsuspenders.reflection.Reflector.__name__ = ["org","swiftsuspenders","reflection","Reflector"];
org.swiftsuspenders.reflection.Reflector.prototype = {
	getClass: null
	,getFQCN: null
	,typeImplements: null
	,describeInjections: null
	,__class__: org.swiftsuspenders.reflection.Reflector
};
org.swiftsuspenders.reflection.DescribeTypeRTTIReflector = function() {
};
$hxClasses["org.swiftsuspenders.reflection.DescribeTypeRTTIReflector"] = org.swiftsuspenders.reflection.DescribeTypeRTTIReflector;
org.swiftsuspenders.reflection.DescribeTypeRTTIReflector.__name__ = ["org","swiftsuspenders","reflection","DescribeTypeRTTIReflector"];
org.swiftsuspenders.reflection.DescribeTypeRTTIReflector.__interfaces__ = [org.swiftsuspenders.reflection.Reflector];
org.swiftsuspenders.reflection.DescribeTypeRTTIReflector.prototype = {
	_currentFactoryXML: null
	,_currentFactoryXMLFast: null
	,constructorElem: null
	,rtti: null
	,extendPath: null
	,extendDescribeTypeReflector: null
	,extendTypeDescription: null
	,getClass: function(value) {
		if(js.Boot.__instanceof(value,Xml)) return Xml; else if((value instanceof Array) && value.__enum__ == null) return Array;
		return value.constructor;
	}
	,getFQCN: function(value,replaceColons) {
		if(replaceColons == null) replaceColons = false;
		var fqcn;
		if(typeof(value) == "string") {
			fqcn = value;
			if(!replaceColons && fqcn.indexOf("::") == -1) {
				var lastDotIndex = fqcn.lastIndexOf(".");
				if(lastDotIndex == -1) return fqcn;
				return fqcn.substring(0,lastDotIndex) + "::" + fqcn.substring(lastDotIndex + 1);
			}
		} else fqcn = org.swiftsuspenders.utils.CallProxy.replaceClassName(value);
		if(replaceColons == true) return fqcn.split("::").join(".");
		return fqcn;
	}
	,typeImplements: function(type,superType) {
		return this.classExtendsOrImplements(type,superType);
	}
	,classExtendsOrImplements: function(classOrClassName,superClass) {
		var actualClass = null;
		if(js.Boot.__instanceof(classOrClassName,Class)) actualClass = js.Boot.__cast(classOrClassName , Class); else if(typeof(classOrClassName) == "string") try {
			actualClass = Type.resolveClass(js.Boot.__cast(classOrClassName , String));
		} catch( e ) {
			throw "The class name " + Std.string(classOrClassName) + " is not valid because of " + Std.string(e) + "\n" + Std.string(e.getStackTrace());
		}
		if(actualClass == null) throw "The parameter classOrClassName must be a Class or fully qualified class name.";
		var classInstance = Type.createEmptyInstance(actualClass);
		return js.Boot.__instanceof(classInstance,superClass);
	}
	,describeInjections: function(_type) {
		if(this.extendDescribeTypeReflector == null) this.extendDescribeTypeReflector = new org.swiftsuspenders.reflection.DescribeTypeRTTIReflector();
		var type = _type;
		this.rtti = type.__rtti;
		if(this.rtti == null) {
			if(!this.isInterface(type)) haxe.Log.trace("Warning: " + org.swiftsuspenders.utils.CallProxy.getClassName(type) + " missing @:rtti matadata",{ fileName : "DescribeTypeRTTIReflector.hx", lineNumber : 160, className : "org.swiftsuspenders.reflection.DescribeTypeRTTIReflector", methodName : "describeInjections"});
		}
		if(this.rtti != null) {
			this._currentFactoryXML = Xml.parse(this.rtti).firstElement();
			this._currentFactoryXMLFast = new haxe.xml.Fast(this._currentFactoryXML);
			var $it0 = this._currentFactoryXMLFast.get_elements();
			while( $it0.hasNext() ) {
				var elem = $it0.next();
				if(elem.get_name() == "new") this.constructorElem = elem;
				if(elem.get_name() == "extends") {
					this.extendPath = elem.att.resolve("path");
					var extendClass = Type.resolveClass(this.extendPath);
					this.extendTypeDescription = this.extendDescribeTypeReflector.describeInjections(extendClass);
				}
			}
		}
		var description = new org.swiftsuspenders.typedescriptions.TypeDescription(false);
		this.addCtorInjectionPoint(description,type);
		this.addFieldInjectionPoints(description,type);
		this.addMethodInjectionPoints(description,type);
		this.addPostConstructMethodPoints(description,type);
		this.addPreDestroyMethodPoints(description,type);
		this._currentFactoryXML = null;
		this._currentFactoryXMLFast = null;
		this.constructorElem = null;
		this.rtti = null;
		this.extendPath = null;
		this.extendTypeDescription = null;
		return description;
	}
	,isInterface: function(type) {
		var classPath = org.swiftsuspenders.utils.CallProxy.replaceClassName(type);
		var split = classPath.split(".");
		var className = split[split.length - 1];
		if(className.length <= 1) return false; else {
			var r = new EReg("(I)([A-Z])","");
			var f2 = HxOverrides.substr(className,0,2);
			if(r.match(f2)) return true; else return false;
		}
	}
	,addCtorInjectionPoint: function(description,type) {
		if(this.constructorElem == null) {
			description.ctor = new org.swiftsuspenders.typedescriptions.NoParamsConstructorInjectionPoint();
			return;
		}
		var className = org.swiftsuspenders.utils.CallProxy.getClassName(type);
		var injectParameters = null;
		var parameterNames = this.constructorElem.node.resolve("f").att.resolve("a").split(":");
		var parameters = this.parametersFromXml(this.constructorElem.x);
		var requiredParameters = 0;
		var _g1 = 0;
		var _g = parameterNames.length;
		while(_g1 < _g) {
			var j = _g1++;
			if(parameterNames[j].indexOf("?") != 0) requiredParameters++;
		}
		description.ctor = new org.swiftsuspenders.typedescriptions.ConstructorInjectionPoint(parameters,requiredParameters,injectParameters);
	}
	,parametersFromXml: function(x) {
		var parameters = [];
		var $it0 = x.firstElement().iterator();
		while( $it0.hasNext() ) {
			var node = $it0.next();
			if(node.nodeType == Xml.Element) {
				var nodeFast = new haxe.xml.Fast(node);
				parameters.push(nodeFast.att.resolve("path") + "|");
			}
		}
		parameters.pop();
		return parameters;
	}
	,addFieldInjectionPoints: function(description,type) {
		var metaFields = haxe.rtti.Meta.getFields(type);
		var fields = Reflect.fields(metaFields);
		var injectFields = [];
		var _g = 0;
		while(_g < fields.length) {
			var value = fields[_g];
			++_g;
			var metaFields1 = Reflect.getProperty(metaFields,value);
			var fields1 = Reflect.fields(metaFields1);
			if(fields1[0] == "inject") injectFields.push(value);
		}
		if(this.extendTypeDescription != null) description.injectionPoints = this.extendTypeDescription.injectionPoints;
		var _g1 = 0;
		while(_g1 < injectFields.length) {
			var propertyName = injectFields[_g1];
			++_g1;
			var optional = false;
			var injectParams = Reflect.getProperty(Reflect.getProperty(metaFields,propertyName),"inject");
			if(injectParams != null) {
				var _g2 = 0;
				var _g11 = injectParams.length;
				while(_g2 < _g11) {
					var i = _g2++;
					if(injectParams[i].indexOf("optional=") != -1) {
						if(injectParams[i].split("optional=")[1].toLowerCase() == "true") optional = true;
					}
				}
			}
			var mappingId = "";
			var $it0 = this._currentFactoryXMLFast.get_elements();
			while( $it0.hasNext() ) {
				var elem = $it0.next();
				if(elem.get_name() == propertyName) {
					var pathFast = new haxe.xml.Fast(elem.x.firstElement());
					if(pathFast.has.resolve("path")) mappingId = pathFast.att.resolve("path") + "|";
				}
			}
			var injectParameters = new haxe.ds.StringMap();
			var injectionPoint = new org.swiftsuspenders.typedescriptions.PropertyInjectionPoint(mappingId,propertyName,optional,injectParameters);
			description.addInjectionPoint(injectionPoint);
		}
	}
	,addMethodInjectionPoints: function(description,type) {
	}
	,addPostConstructMethodPoints: function(description,type) {
		var injectionPoints = this.gatherOrderedInjectionPointsForTag(org.swiftsuspenders.typedescriptions.PostConstructInjectionPoint,"PostConstruct",type);
		var length = injectionPoints.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			description.addInjectionPoint(injectionPoints[i]);
		}
	}
	,addPreDestroyMethodPoints: function(description,type) {
		var injectionPoints = this.gatherOrderedInjectionPointsForTag(org.swiftsuspenders.typedescriptions.PreDestroyInjectionPoint,"PreDestroy",type);
		if(injectionPoints.length == 0) return;
		description.preDestroyMethods = injectionPoints[0];
		description.preDestroyMethods.last = injectionPoints[0];
		var length = injectionPoints.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			description.preDestroyMethods.last.next = injectionPoints[i];
			description.preDestroyMethods.last = injectionPoints[i];
		}
	}
	,gatherOrderedInjectionPointsForTag: function(injectionPointType,tag,type) {
		var injectionPoints = [];
		var metaFields = haxe.rtti.Meta.getFields(type);
		var fields = Reflect.fields(metaFields);
		var injectMethods = [];
		var _g = 0;
		while(_g < fields.length) {
			var value = fields[_g];
			++_g;
			var metaFields1 = Reflect.getProperty(metaFields,value);
			var fields1 = Reflect.fields(metaFields1);
			if(fields1[0].toLowerCase() == tag.toLowerCase()) {
				injectMethods.push(value);
				var $it0 = this._currentFactoryXML.iterator();
				while( $it0.hasNext() ) {
					var node = $it0.next();
					if(node.nodeType == Xml.Element) {
						if(node.get_nodeName() == value) {
							var parameterNames = new haxe.xml.Fast(node).node.resolve("f").att.resolve("a").split(":");
							var requiredParameters = 0;
							var _g2 = 0;
							var _g1 = parameterNames.length;
							while(_g2 < _g1) {
								var i = _g2++;
								if(parameterNames[i].indexOf("?") != 0) requiredParameters++;
							}
							requiredParameters--;
							var parameters = this.parametersFromXml(node);
							var injectionPoint = org.swiftsuspenders.utils.CallProxy.createInstance(injectionPointType,[node.get_nodeName(),parameters,requiredParameters,1073741823]);
							injectionPoints.push(injectionPoint);
						}
					}
				}
			}
		}
		return injectionPoints;
	}
	,__class__: org.swiftsuspenders.reflection.DescribeTypeRTTIReflector
};
org.swiftsuspenders.typedescriptions = {};
org.swiftsuspenders.typedescriptions.InjectionPoint = function() {
};
$hxClasses["org.swiftsuspenders.typedescriptions.InjectionPoint"] = org.swiftsuspenders.typedescriptions.InjectionPoint;
org.swiftsuspenders.typedescriptions.InjectionPoint.__name__ = ["org","swiftsuspenders","typedescriptions","InjectionPoint"];
org.swiftsuspenders.typedescriptions.InjectionPoint.prototype = {
	next: null
	,last: null
	,injectParameters: null
	,applyInjection: function(target,targetType,injector) {
	}
	,__class__: org.swiftsuspenders.typedescriptions.InjectionPoint
};
org.swiftsuspenders.typedescriptions.MethodInjectionPoint = function(methodName,parameters,requiredParameters,isOptional,injectParameters) {
	this._methodName = methodName;
	this._parameterMappingIDs = parameters;
	this._requiredParameters = requiredParameters;
	this._isOptional = isOptional;
	this.injectParameters = injectParameters;
	org.swiftsuspenders.typedescriptions.InjectionPoint.call(this);
};
$hxClasses["org.swiftsuspenders.typedescriptions.MethodInjectionPoint"] = org.swiftsuspenders.typedescriptions.MethodInjectionPoint;
org.swiftsuspenders.typedescriptions.MethodInjectionPoint.__name__ = ["org","swiftsuspenders","typedescriptions","MethodInjectionPoint"];
org.swiftsuspenders.typedescriptions.MethodInjectionPoint.__super__ = org.swiftsuspenders.typedescriptions.InjectionPoint;
org.swiftsuspenders.typedescriptions.MethodInjectionPoint.prototype = $extend(org.swiftsuspenders.typedescriptions.InjectionPoint.prototype,{
	_parameterMappingIDs: null
	,_requiredParameters: null
	,_isOptional: null
	,_methodName: null
	,applyInjection: function(target,targetType,injector) {
		var p = this.gatherParameterValues(target,targetType,injector);
		if(p.length >= this._requiredParameters) {
			var func = Reflect.getProperty(target,this._methodName);
			if(Reflect.isFunction(func)) func.apply(target,p);
		}
		p = [];
	}
	,gatherParameterValues: function(target,targetType,injector) {
		var length = this._parameterMappingIDs.length;
		var parameters = [];
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var parameterMappingId = this._parameterMappingIDs[i];
			var provider = injector.getProvider(parameterMappingId);
			if(provider == null) {
				if(i >= this._requiredParameters || this._isOptional) break;
				var errorMsg = "Injector is missing a mapping to handle injection into target \"";
				errorMsg += Std.string(target);
				errorMsg += "\" of type \"";
				errorMsg += org.swiftsuspenders.utils.CallProxy.replaceClassName(targetType);
				errorMsg += "\". Target dependency: ";
				errorMsg += parameterMappingId;
				errorMsg += ", method: ";
				errorMsg += this._methodName;
				errorMsg += ", parameter: ";
				errorMsg += i + 1;
				throw new org.swiftsuspenders.errors.InjectorMissingMappingError(errorMsg);
			}
			parameters[i] = provider.apply(targetType,injector,this.injectParameters);
		}
		return parameters;
	}
	,__class__: org.swiftsuspenders.typedescriptions.MethodInjectionPoint
});
org.swiftsuspenders.typedescriptions.ConstructorInjectionPoint = function(parameters,requiredParameters,injectParameters) {
	org.swiftsuspenders.typedescriptions.MethodInjectionPoint.call(this,"ctor",parameters,requiredParameters,false,injectParameters);
};
$hxClasses["org.swiftsuspenders.typedescriptions.ConstructorInjectionPoint"] = org.swiftsuspenders.typedescriptions.ConstructorInjectionPoint;
org.swiftsuspenders.typedescriptions.ConstructorInjectionPoint.__name__ = ["org","swiftsuspenders","typedescriptions","ConstructorInjectionPoint"];
org.swiftsuspenders.typedescriptions.ConstructorInjectionPoint.__super__ = org.swiftsuspenders.typedescriptions.MethodInjectionPoint;
org.swiftsuspenders.typedescriptions.ConstructorInjectionPoint.prototype = $extend(org.swiftsuspenders.typedescriptions.MethodInjectionPoint.prototype,{
	createInstance: function(type,injector) {
		var p = this.gatherParameterValues(type,type,injector);
		var result;
		var _g = p.length;
		switch(_g) {
		case 0:
			result = org.swiftsuspenders.utils.CallProxy.createInstance(type,[]);
			break;
		case 1:
			result = org.swiftsuspenders.utils.CallProxy.createInstance(type,[p[0]]);
			break;
		case 2:
			result = org.swiftsuspenders.utils.CallProxy.createInstance(type,[p[0],p[1]]);
			break;
		case 3:
			result = org.swiftsuspenders.utils.CallProxy.createInstance(type,[p[0],p[1],p[2]]);
			break;
		case 4:
			result = org.swiftsuspenders.utils.CallProxy.createInstance(type,[p[0],p[1],p[2],p[3]]);
			break;
		case 5:
			result = org.swiftsuspenders.utils.CallProxy.createInstance(type,[p[0],p[1],p[2],p[3],p[4]]);
			break;
		case 6:
			result = org.swiftsuspenders.utils.CallProxy.createInstance(type,[p[0],p[1],p[2],p[3],p[4],p[5]]);
			break;
		case 7:
			result = org.swiftsuspenders.utils.CallProxy.createInstance(type,[p[0],p[1],p[2],p[3],p[4],p[5],p[6]]);
			break;
		case 8:
			result = org.swiftsuspenders.utils.CallProxy.createInstance(type,[p[0],p[1],p[2],p[3],p[4],p[5],p[6],p[7]]);
			break;
		case 9:
			result = org.swiftsuspenders.utils.CallProxy.createInstance(type,[p[0],p[1],p[2],p[3],p[4],p[5],p[6],p[7],p[8]]);
			break;
		case 10:
			result = org.swiftsuspenders.utils.CallProxy.createInstance(type,[p[0],p[1],p[2],p[3],p[4],p[5],p[6],p[7],p[8],p[9]]);
			break;
		default:
			throw new openfl.errors.Error("The constructor for " + Std.string(type) + " has too many arguments, maximum is 10");
		}
		p = [];
		return result;
	}
	,__class__: org.swiftsuspenders.typedescriptions.ConstructorInjectionPoint
});
org.swiftsuspenders.typedescriptions.NoParamsConstructorInjectionPoint = function() {
	org.swiftsuspenders.typedescriptions.ConstructorInjectionPoint.call(this,[],0,this.injectParameters);
};
$hxClasses["org.swiftsuspenders.typedescriptions.NoParamsConstructorInjectionPoint"] = org.swiftsuspenders.typedescriptions.NoParamsConstructorInjectionPoint;
org.swiftsuspenders.typedescriptions.NoParamsConstructorInjectionPoint.__name__ = ["org","swiftsuspenders","typedescriptions","NoParamsConstructorInjectionPoint"];
org.swiftsuspenders.typedescriptions.NoParamsConstructorInjectionPoint.__super__ = org.swiftsuspenders.typedescriptions.ConstructorInjectionPoint;
org.swiftsuspenders.typedescriptions.NoParamsConstructorInjectionPoint.prototype = $extend(org.swiftsuspenders.typedescriptions.ConstructorInjectionPoint.prototype,{
	createInstance: function(type,injector) {
		return org.swiftsuspenders.utils.CallProxy.createInstance(type,[]);
	}
	,__class__: org.swiftsuspenders.typedescriptions.NoParamsConstructorInjectionPoint
});
org.swiftsuspenders.typedescriptions.OrderedInjectionPoint = function(methodName,parameters,requiredParameters,order) {
	org.swiftsuspenders.typedescriptions.MethodInjectionPoint.call(this,methodName,parameters,requiredParameters,false,null);
	this.order = order;
};
$hxClasses["org.swiftsuspenders.typedescriptions.OrderedInjectionPoint"] = org.swiftsuspenders.typedescriptions.OrderedInjectionPoint;
org.swiftsuspenders.typedescriptions.OrderedInjectionPoint.__name__ = ["org","swiftsuspenders","typedescriptions","OrderedInjectionPoint"];
org.swiftsuspenders.typedescriptions.OrderedInjectionPoint.__super__ = org.swiftsuspenders.typedescriptions.MethodInjectionPoint;
org.swiftsuspenders.typedescriptions.OrderedInjectionPoint.prototype = $extend(org.swiftsuspenders.typedescriptions.MethodInjectionPoint.prototype,{
	order: null
	,__class__: org.swiftsuspenders.typedescriptions.OrderedInjectionPoint
});
org.swiftsuspenders.typedescriptions.PostConstructInjectionPoint = function(methodName,parameters,requiredParameters,order) {
	org.swiftsuspenders.typedescriptions.OrderedInjectionPoint.call(this,methodName,parameters,requiredParameters,order);
};
$hxClasses["org.swiftsuspenders.typedescriptions.PostConstructInjectionPoint"] = org.swiftsuspenders.typedescriptions.PostConstructInjectionPoint;
org.swiftsuspenders.typedescriptions.PostConstructInjectionPoint.__name__ = ["org","swiftsuspenders","typedescriptions","PostConstructInjectionPoint"];
org.swiftsuspenders.typedescriptions.PostConstructInjectionPoint.__super__ = org.swiftsuspenders.typedescriptions.OrderedInjectionPoint;
org.swiftsuspenders.typedescriptions.PostConstructInjectionPoint.prototype = $extend(org.swiftsuspenders.typedescriptions.OrderedInjectionPoint.prototype,{
	__class__: org.swiftsuspenders.typedescriptions.PostConstructInjectionPoint
});
org.swiftsuspenders.typedescriptions.PreDestroyInjectionPoint = function(methodName,parameters,requiredParameters,order) {
	org.swiftsuspenders.typedescriptions.OrderedInjectionPoint.call(this,methodName,parameters,requiredParameters,order);
};
$hxClasses["org.swiftsuspenders.typedescriptions.PreDestroyInjectionPoint"] = org.swiftsuspenders.typedescriptions.PreDestroyInjectionPoint;
org.swiftsuspenders.typedescriptions.PreDestroyInjectionPoint.__name__ = ["org","swiftsuspenders","typedescriptions","PreDestroyInjectionPoint"];
org.swiftsuspenders.typedescriptions.PreDestroyInjectionPoint.__super__ = org.swiftsuspenders.typedescriptions.OrderedInjectionPoint;
org.swiftsuspenders.typedescriptions.PreDestroyInjectionPoint.prototype = $extend(org.swiftsuspenders.typedescriptions.OrderedInjectionPoint.prototype,{
	__class__: org.swiftsuspenders.typedescriptions.PreDestroyInjectionPoint
});
org.swiftsuspenders.typedescriptions.PropertyInjectionPoint = function(mappingId,propertyName,optional,injectParameters) {
	this._propertyName = propertyName;
	this._mappingId = mappingId;
	this._optional = optional;
	this.injectParameters = injectParameters;
	org.swiftsuspenders.typedescriptions.InjectionPoint.call(this);
};
$hxClasses["org.swiftsuspenders.typedescriptions.PropertyInjectionPoint"] = org.swiftsuspenders.typedescriptions.PropertyInjectionPoint;
org.swiftsuspenders.typedescriptions.PropertyInjectionPoint.__name__ = ["org","swiftsuspenders","typedescriptions","PropertyInjectionPoint"];
org.swiftsuspenders.typedescriptions.PropertyInjectionPoint.__super__ = org.swiftsuspenders.typedescriptions.InjectionPoint;
org.swiftsuspenders.typedescriptions.PropertyInjectionPoint.prototype = $extend(org.swiftsuspenders.typedescriptions.InjectionPoint.prototype,{
	_propertyName: null
	,_mappingId: null
	,_optional: null
	,applyInjection: function(target,targetType,injector) {
		var provider = injector.getProvider(this._mappingId);
		if(provider == null) {
			if(this._optional) return;
			throw new org.swiftsuspenders.errors.InjectorMissingMappingError("Injector is missing a mapping to handle injection into property \"" + this._propertyName + "\" of object \"" + Std.string(target) + "\" with type \"" + org.swiftsuspenders.utils.CallProxy.replaceClassName(targetType) + "\". Target dependency: \"" + this._mappingId + "\"");
		}
		Reflect.setProperty(target,this._propertyName,provider.apply(targetType,injector,this.injectParameters));
	}
	,__class__: org.swiftsuspenders.typedescriptions.PropertyInjectionPoint
});
org.swiftsuspenders.typedescriptions.TypeDescription = function(useDefaultConstructor) {
	if(useDefaultConstructor == null) useDefaultConstructor = true;
	if(useDefaultConstructor) this.ctor = new org.swiftsuspenders.typedescriptions.NoParamsConstructorInjectionPoint();
};
$hxClasses["org.swiftsuspenders.typedescriptions.TypeDescription"] = org.swiftsuspenders.typedescriptions.TypeDescription;
org.swiftsuspenders.typedescriptions.TypeDescription.__name__ = ["org","swiftsuspenders","typedescriptions","TypeDescription"];
org.swiftsuspenders.typedescriptions.TypeDescription.prototype = {
	ctor: null
	,injectionPoints: null
	,preDestroyMethods: null
	,_postConstructAdded: null
	,setConstructor: function(parameterTypes,parameterNames,requiredParameters,metadata) {
		if(requiredParameters == null) requiredParameters = 1073741823;
		var param;
		if(parameterNames != null) param = parameterNames; else param = [];
		this.ctor = new org.swiftsuspenders.typedescriptions.ConstructorInjectionPoint(this.createParameterMappings(parameterTypes,param),requiredParameters,metadata);
		return this;
	}
	,addFieldInjection: function(fieldName,type,injectionName,optional,metadata) {
		if(optional == null) optional = false;
		if(injectionName == null) injectionName = "";
		if(this._postConstructAdded) throw new org.swiftsuspenders.errors.InjectorError("Can't add injection point after post construct method");
		this.addInjectionPoint(new org.swiftsuspenders.typedescriptions.PropertyInjectionPoint(org.swiftsuspenders.utils.CallProxy.replaceClassName(type) + "|" + injectionName,fieldName,optional,metadata));
		return this;
	}
	,addMethodInjection: function(methodName,parameterTypes,parameterNames,requiredParameters,optional,metadata) {
		if(optional == null) optional = false;
		if(requiredParameters == null) requiredParameters = 1073741823;
		if(this._postConstructAdded) throw new org.swiftsuspenders.errors.InjectorError("Can't add injection point after post construct method");
		var param;
		if(parameterNames != null) param = parameterNames; else param = [];
		this.addInjectionPoint(new org.swiftsuspenders.typedescriptions.MethodInjectionPoint(methodName,this.createParameterMappings(parameterTypes,param),js.Boot.__cast(Math.min((function($this) {
			var $r;
			var $int = requiredParameters;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)),parameterTypes.length) , Int),optional,metadata));
		return this;
	}
	,addPostConstructMethod: function(methodName,parameterTypes,parameterNames,requiredParameters) {
		if(requiredParameters == null) requiredParameters = 1073741823;
		var param;
		if(parameterNames != null) param = parameterNames; else param = [];
		this._postConstructAdded = true;
		this.addInjectionPoint(new org.swiftsuspenders.typedescriptions.PostConstructInjectionPoint(methodName,this.createParameterMappings(parameterTypes,param),js.Boot.__cast(Math.min((function($this) {
			var $r;
			var $int = requiredParameters;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)),parameterTypes.length) , Int),0));
		return this;
	}
	,addPreDestroyMethod: function(methodName,parameterTypes,parameterNames,requiredParameters) {
		if(requiredParameters == null) requiredParameters = 1073741823;
		var param;
		if(parameterNames != null) param = parameterNames; else param = [];
		var method = new org.swiftsuspenders.typedescriptions.PreDestroyInjectionPoint(methodName,this.createParameterMappings(parameterTypes,param),js.Boot.__cast(Math.min((function($this) {
			var $r;
			var $int = requiredParameters;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)),parameterTypes.length) , Int),0);
		if(this.preDestroyMethods != null) {
			this.preDestroyMethods.last.next = method;
			this.preDestroyMethods.last = method;
		} else {
			this.preDestroyMethods = method;
			this.preDestroyMethods.last = method;
		}
		return this;
	}
	,addInjectionPoint: function(injectionPoint) {
		if(this.injectionPoints != null) {
			this.injectionPoints.last.next = injectionPoint;
			this.injectionPoints.last = injectionPoint;
		} else {
			this.injectionPoints = injectionPoint;
			this.injectionPoints.last = injectionPoint;
		}
	}
	,createParameterMappings: function(parameterTypes,parameterNames) {
		var parameters = new Array();
		var _g1 = 0;
		var _g = parameterTypes.length;
		while(_g1 < _g) {
			var n = _g1++;
			var i = parameters.length - n;
			parameters[i] = org.swiftsuspenders.utils.CallProxy.replaceClassName(parameterTypes[i]) + "|";
			if(parameterNames[i]) parameters[i] += parameterNames[i];
		}
		return parameters;
	}
	,__class__: org.swiftsuspenders.typedescriptions.TypeDescription
};
org.swiftsuspenders.utils.TypeDescriptor = function(reflector,descriptionsCache) {
	this._descriptionsCache = descriptionsCache;
	this._reflector = reflector;
};
$hxClasses["org.swiftsuspenders.utils.TypeDescriptor"] = org.swiftsuspenders.utils.TypeDescriptor;
org.swiftsuspenders.utils.TypeDescriptor.__name__ = ["org","swiftsuspenders","utils","TypeDescriptor"];
org.swiftsuspenders.utils.TypeDescriptor.prototype = {
	_descriptionsCache: null
	,_reflector: null
	,getDescription: function(type) {
		var id = org.swiftsuspenders.utils.UID.classID(type);
		if(this._descriptionsCache.get(id) == null) {
			var v = this._reflector.describeInjections(type);
			this._descriptionsCache.set(id,v);
			v;
		}
		return this._descriptionsCache.get(id);
	}
	,addDescription: function(type,description) {
		var k = org.swiftsuspenders.utils.UID.classID(type);
		this._descriptionsCache.set(k,description);
		description;
	}
	,__class__: org.swiftsuspenders.utils.TypeDescriptor
};
org.swiftsuspenders.utils.UID = function() { };
$hxClasses["org.swiftsuspenders.utils.UID"] = org.swiftsuspenders.utils.UID;
org.swiftsuspenders.utils.UID.__name__ = ["org","swiftsuspenders","utils","UID"];
org.swiftsuspenders.utils.UID._i = null;
org.swiftsuspenders.utils.UID.create = function(source) {
	var className = org.swiftsuspenders.utils.UID.classID(source);
	var random = Math.floor(Math.random() * 255);
	var returnVal = "";
	if(source != null) returnVal = className;
	returnVal += "-";
	returnVal += random;
	return returnVal;
};
org.swiftsuspenders.utils.UID.classID = function(source) {
	var className = "";
	if(js.Boot.__instanceof(source,Class)) className = org.swiftsuspenders.utils.CallProxy.replaceClassName(source); else if(Type.getClass(source) != null) className = org.swiftsuspenders.utils.CallProxy.replaceClassName(Type.getClass(source));
	return className;
};
org.swiftsuspenders.utils.UID.instanceID = function(source) {
	var classID = org.swiftsuspenders.utils.UID.classID(source);
	if(js.Boot.__instanceof(source,Class)) return classID;
	if(org.swiftsuspenders.utils.UID.classRefs.get(classID) == null) {
		var v = [];
		org.swiftsuspenders.utils.UID.classRefs.set(classID,v);
		v;
	}
	var id = -1;
	var _g1 = 0;
	var _g = org.swiftsuspenders.utils.UID.classRefs.get(classID).length;
	while(_g1 < _g) {
		var i = _g1++;
		if(org.swiftsuspenders.utils.UID.classRefs.get(classID)[i] == source) {
			id = i;
			break;
		}
	}
	if(id == -1) {
		id = org.swiftsuspenders.utils.UID.classRefs.get(classID).length;
		org.swiftsuspenders.utils.UID.classRefs.get(classID).push(source);
	}
	return org.swiftsuspenders.utils.UID.classID(source) + "-" + id;
};
org.swiftsuspenders.utils.UID.clearInstanceID = function(source) {
	var classID = org.swiftsuspenders.utils.UID.classID(source);
	if(js.Boot.__instanceof(source,Class)) return classID;
	if(org.swiftsuspenders.utils.UID.classRefs.get(classID) == null) {
		var v = [];
		org.swiftsuspenders.utils.UID.classRefs.set(classID,v);
		v;
	}
	var _g1 = 0;
	var _g = org.swiftsuspenders.utils.UID.classRefs.get(classID).length;
	while(_g1 < _g) {
		var i = _g1++;
		if(org.swiftsuspenders.utils.UID.classRefs.get(classID)[i] == source) {
			org.swiftsuspenders.utils.UID.classRefs.get(classID)[i] = null;
			return org.swiftsuspenders.utils.UID.classID(source) + "-" + i;
		}
	}
	throw new openfl.errors.Error("instanceID: " + Std.string(source) + " is not in use");
	return "";
};
robotlegs.bender.framework.api.IExtension = function() { };
$hxClasses["robotlegs.bender.framework.api.IExtension"] = robotlegs.bender.framework.api.IExtension;
robotlegs.bender.framework.api.IExtension.__name__ = ["robotlegs","bender","framework","api","IExtension"];
robotlegs.bender.framework.api.IExtension.prototype = {
	extend: null
	,__class__: robotlegs.bender.framework.api.IExtension
};
robotlegs.bender.framework.api.IBundle = function() { };
$hxClasses["robotlegs.bender.framework.api.IBundle"] = robotlegs.bender.framework.api.IBundle;
robotlegs.bender.framework.api.IBundle.__name__ = ["robotlegs","bender","framework","api","IBundle"];
robotlegs.bender.framework.api.IBundle.__interfaces__ = [robotlegs.bender.framework.api.IExtension];
robotlegs.bender.bundles.Away3DBundle = function() { };
$hxClasses["robotlegs.bender.bundles.Away3DBundle"] = robotlegs.bender.bundles.Away3DBundle;
robotlegs.bender.bundles.Away3DBundle.__name__ = ["robotlegs","bender","bundles","Away3DBundle"];
robotlegs.bender.bundles.Away3DBundle.__interfaces__ = [robotlegs.bender.framework.api.IBundle];
robotlegs.bender.bundles.Away3DBundle.prototype = {
	extend: function(context) {
		context.install([robotlegs.bender.extensions.stage3D.away3d.AwayIntegrationExtension,robotlegs.bender.extensions.stage3D.away3d.AwayStageSyncExtension]);
	}
	,__class__: robotlegs.bender.bundles.Away3DBundle
};
robotlegs.bender.bundles.ImagBundle = function() { };
$hxClasses["robotlegs.bender.bundles.ImagBundle"] = robotlegs.bender.bundles.ImagBundle;
robotlegs.bender.bundles.ImagBundle.__name__ = ["robotlegs","bender","bundles","ImagBundle"];
robotlegs.bender.bundles.ImagBundle.__interfaces__ = [robotlegs.bender.framework.api.IBundle];
robotlegs.bender.bundles.ImagBundle.prototype = {
	extend: function(context) {
		context.install([robotlegs.bender.bundles.mvcs.MVCSBundle]);
		context.set_logLevel(robotlegs.bender.framework.api.LogLevel.INFO);
		context.install([robotlegs.bender.extensions.viewManager.ManualStageObserverExtension,robotlegs.bender.extensions.signalCommandMap.SignalCommandMapExtension,robotlegs.bender.extensions.imag.ImagSignalExtension,robotlegs.bender.extensions.imag.ImagModelExtension,robotlegs.bender.extensions.imag.ImagServiceExtension,robotlegs.bender.extensions.imag.ImagCommandExtension,robotlegs.bender.extensions.stage3D.base.Stage3DStackExtension]);
	}
	,__class__: robotlegs.bender.bundles.ImagBundle
};
robotlegs.bender.bundles.StarlingBundle = function() { };
$hxClasses["robotlegs.bender.bundles.StarlingBundle"] = robotlegs.bender.bundles.StarlingBundle;
robotlegs.bender.bundles.StarlingBundle.__name__ = ["robotlegs","bender","bundles","StarlingBundle"];
robotlegs.bender.bundles.StarlingBundle.__interfaces__ = [robotlegs.bender.framework.api.IBundle];
robotlegs.bender.bundles.StarlingBundle.prototype = {
	extend: function(context) {
		context.install([robotlegs.bender.extensions.stage3D.starling.StarlingIntegrationExtension,robotlegs.bender.extensions.stage3D.starling.StarlingStageSyncExtension]);
	}
	,__class__: robotlegs.bender.bundles.StarlingBundle
};
robotlegs.bender.bundles.mvcs.MVCSBundle = function() {
};
$hxClasses["robotlegs.bender.bundles.mvcs.MVCSBundle"] = robotlegs.bender.bundles.mvcs.MVCSBundle;
robotlegs.bender.bundles.mvcs.MVCSBundle.__name__ = ["robotlegs","bender","bundles","mvcs","MVCSBundle"];
robotlegs.bender.bundles.mvcs.MVCSBundle.__interfaces__ = [robotlegs.bender.framework.api.IBundle];
robotlegs.bender.bundles.mvcs.MVCSBundle.prototype = {
	extend: function(context) {
		context.set_logLevel(robotlegs.bender.framework.api.LogLevel.INFO);
		context.install([robotlegs.bender.extensions.enhancedLogging.TraceLoggingExtension,robotlegs.bender.extensions.vigilance.VigilanceExtension,robotlegs.bender.extensions.enhancedLogging.InjectableLoggerExtension,robotlegs.bender.extensions.contextView.ContextViewExtension,robotlegs.bender.extensions.eventDispatcher.EventDispatcherExtension,robotlegs.bender.extensions.modularity.ModularityExtension,robotlegs.bender.extensions.directCommandMap.DirectCommandMapExtension,robotlegs.bender.extensions.eventCommandMap.EventCommandMapExtension,robotlegs.bender.extensions.localEventMap.LocalEventMapExtension,robotlegs.bender.extensions.viewManager.ViewManagerExtension,robotlegs.bender.extensions.viewManager.StageObserverExtension,robotlegs.bender.extensions.mediatorMap.MediatorMapExtension,robotlegs.bender.extensions.viewProcessorMap.ViewProcessorMapExtension,robotlegs.bender.extensions.viewManager.StageCrawlerExtension,robotlegs.bender.extensions.contextView.StageSyncExtension]);
		context.configure([robotlegs.bender.extensions.contextView.ContextViewListenerConfig]);
	}
	,__class__: robotlegs.bender.bundles.mvcs.MVCSBundle
};
robotlegs.bender.extensions.commandCenter.api.CommandPayload = function(values,classes) {
	this.values = values;
	this.classes = classes;
};
$hxClasses["robotlegs.bender.extensions.commandCenter.api.CommandPayload"] = robotlegs.bender.extensions.commandCenter.api.CommandPayload;
robotlegs.bender.extensions.commandCenter.api.CommandPayload.__name__ = ["robotlegs","bender","extensions","commandCenter","api","CommandPayload"];
robotlegs.bender.extensions.commandCenter.api.CommandPayload.prototype = {
	values: null
	,get_values: function() {
		return this.values;
	}
	,classes: null
	,get_classes: function() {
		return this.classes;
	}
	,length: null
	,get_length: function() {
		if(this.get_classes() != null) return this.get_classes().length; else return 0;
	}
	,addPayload: function(payloadValue,payloadClass) {
		if(this.get_values() != null) this.get_values().push(payloadValue); else this.values = [payloadValue];
		if(this.get_classes() != null) this.get_classes().push(payloadClass); else this.classes = [payloadClass];
		return this;
	}
	,hasPayload: function() {
		if(this.get_values() != null && this.get_classes() != null) {
			if(this.get_values().length > 0 && this.get_classes().length == this.get_values().length) return true; else return false;
		} else return false;
	}
	,__class__: robotlegs.bender.extensions.commandCenter.api.CommandPayload
	,__properties__: {get_length:"get_length",get_classes:"get_classes",get_values:"get_values"}
};
robotlegs.bender.extensions.commandCenter.api.ICommandExecutor = function() { };
$hxClasses["robotlegs.bender.extensions.commandCenter.api.ICommandExecutor"] = robotlegs.bender.extensions.commandCenter.api.ICommandExecutor;
robotlegs.bender.extensions.commandCenter.api.ICommandExecutor.__name__ = ["robotlegs","bender","extensions","commandCenter","api","ICommandExecutor"];
robotlegs.bender.extensions.commandCenter.api.ICommandExecutor.prototype = {
	executeCommand: null
	,executeCommands: null
	,__class__: robotlegs.bender.extensions.commandCenter.api.ICommandExecutor
};
robotlegs.bender.extensions.commandCenter.api.ICommandMapping = function() { };
$hxClasses["robotlegs.bender.extensions.commandCenter.api.ICommandMapping"] = robotlegs.bender.extensions.commandCenter.api.ICommandMapping;
robotlegs.bender.extensions.commandCenter.api.ICommandMapping.__name__ = ["robotlegs","bender","extensions","commandCenter","api","ICommandMapping"];
robotlegs.bender.extensions.commandCenter.api.ICommandMapping.prototype = {
	commandClass: null
	,executeMethod: null
	,guards: null
	,hooks: null
	,fireOnce: null
	,payloadInjectionEnabled: null
	,setExecuteMethod: null
	,addGuards: null
	,addHooks: null
	,setFireOnce: null
	,setPayloadInjectionEnabled: null
	,__class__: robotlegs.bender.extensions.commandCenter.api.ICommandMapping
};
robotlegs.bender.extensions.commandCenter.api.ICommandMappingList = function() { };
$hxClasses["robotlegs.bender.extensions.commandCenter.api.ICommandMappingList"] = robotlegs.bender.extensions.commandCenter.api.ICommandMappingList;
robotlegs.bender.extensions.commandCenter.api.ICommandMappingList.__name__ = ["robotlegs","bender","extensions","commandCenter","api","ICommandMappingList"];
robotlegs.bender.extensions.commandCenter.api.ICommandMappingList.prototype = {
	withSortFunction: null
	,getList: null
	,addMapping: null
	,removeMapping: null
	,removeMappingFor: null
	,removeAllMappings: null
	,__class__: robotlegs.bender.extensions.commandCenter.api.ICommandMappingList
};
robotlegs.bender.extensions.commandCenter.api.ICommandTrigger = function() { };
$hxClasses["robotlegs.bender.extensions.commandCenter.api.ICommandTrigger"] = robotlegs.bender.extensions.commandCenter.api.ICommandTrigger;
robotlegs.bender.extensions.commandCenter.api.ICommandTrigger.__name__ = ["robotlegs","bender","extensions","commandCenter","api","ICommandTrigger"];
robotlegs.bender.extensions.commandCenter.api.ICommandTrigger.prototype = {
	activate: null
	,deactivate: null
	,__class__: robotlegs.bender.extensions.commandCenter.api.ICommandTrigger
};
robotlegs.bender.extensions.commandCenter.dsl = {};
robotlegs.bender.extensions.commandCenter.dsl.ICommandConfigurator = function() { };
$hxClasses["robotlegs.bender.extensions.commandCenter.dsl.ICommandConfigurator"] = robotlegs.bender.extensions.commandCenter.dsl.ICommandConfigurator;
robotlegs.bender.extensions.commandCenter.dsl.ICommandConfigurator.__name__ = ["robotlegs","bender","extensions","commandCenter","dsl","ICommandConfigurator"];
robotlegs.bender.extensions.commandCenter.dsl.ICommandConfigurator.prototype = {
	withExecuteMethod: null
	,withGuards: null
	,withHooks: null
	,once: null
	,withPayloadInjection: null
	,__class__: robotlegs.bender.extensions.commandCenter.dsl.ICommandConfigurator
};
robotlegs.bender.extensions.commandCenter.dsl.ICommandMapper = function() { };
$hxClasses["robotlegs.bender.extensions.commandCenter.dsl.ICommandMapper"] = robotlegs.bender.extensions.commandCenter.dsl.ICommandMapper;
robotlegs.bender.extensions.commandCenter.dsl.ICommandMapper.__name__ = ["robotlegs","bender","extensions","commandCenter","dsl","ICommandMapper"];
robotlegs.bender.extensions.commandCenter.dsl.ICommandMapper.prototype = {
	toCommand: null
	,__class__: robotlegs.bender.extensions.commandCenter.dsl.ICommandMapper
};
robotlegs.bender.extensions.commandCenter.dsl.ICommandUnmapper = function() { };
$hxClasses["robotlegs.bender.extensions.commandCenter.dsl.ICommandUnmapper"] = robotlegs.bender.extensions.commandCenter.dsl.ICommandUnmapper;
robotlegs.bender.extensions.commandCenter.dsl.ICommandUnmapper.__name__ = ["robotlegs","bender","extensions","commandCenter","dsl","ICommandUnmapper"];
robotlegs.bender.extensions.commandCenter.dsl.ICommandUnmapper.prototype = {
	fromCommand: null
	,fromAll: null
	,__class__: robotlegs.bender.extensions.commandCenter.dsl.ICommandUnmapper
};
robotlegs.bender.extensions.commandCenter.impl = {};
robotlegs.bender.extensions.commandCenter.impl.CommandExecutor = function(injector,removeMapping,handleResult) {
	this._injector = injector.createChild();
	this._removeMapping = removeMapping;
	this._handleResult = handleResult;
};
$hxClasses["robotlegs.bender.extensions.commandCenter.impl.CommandExecutor"] = robotlegs.bender.extensions.commandCenter.impl.CommandExecutor;
robotlegs.bender.extensions.commandCenter.impl.CommandExecutor.__name__ = ["robotlegs","bender","extensions","commandCenter","impl","CommandExecutor"];
robotlegs.bender.extensions.commandCenter.impl.CommandExecutor.__interfaces__ = [robotlegs.bender.extensions.commandCenter.api.ICommandExecutor];
robotlegs.bender.extensions.commandCenter.impl.CommandExecutor.prototype = {
	_injector: null
	,_removeMapping: null
	,_handleResult: null
	,executeCommands: function(mappings,payload) {
		var length = mappings.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			this.executeCommand(mappings[i],payload);
		}
	}
	,executeCommand: function(mapping,payload) {
		var hasPayload = payload != null && payload.hasPayload();
		var injectionEnabled = hasPayload && mapping.get_payloadInjectionEnabled();
		var command = null;
		if(injectionEnabled) this.mapPayload(payload);
		if(mapping.get_guards().length == 0 || robotlegs.bender.framework.impl.GuardsApprove.call(mapping.get_guards(),this._injector)) {
			var commandClass = mapping.get_commandClass();
			if(mapping.get_fireOnce() && this._removeMapping != null) this._removeMapping(mapping);
			command = this._injector.getOrCreateNewInstance(commandClass);
			if(mapping.get_hooks().length > 0) {
				this._injector.map(commandClass).toValue(command);
				robotlegs.bender.framework.impl.ApplyHooks.call(mapping.get_hooks(),this._injector);
				this._injector.unmap(commandClass);
			}
		}
		if(injectionEnabled) this.unmapPayload(payload);
		if(command != null && mapping.get_executeMethod() != null) {
			var executeMethod = Reflect.getProperty(command,mapping.get_executeMethod());
			var result;
			if(hasPayload && executeMethod.length > 0) result = Reflect.callMethod(null,executeMethod,payload.get_values()); else result = executeMethod.apply(command,[]);
			if(this._handleResult != null) this._handleResult(result,command,mapping);
		}
	}
	,mapPayload: function(payload) {
		var i = payload.get_length();
		while((function($this) {
			var $r;
			var a = i--;
			var aNeg = a < 0;
			var bNeg = 0 < 0;
			$r = aNeg != bNeg?aNeg:a > 0;
			return $r;
		}(this))) this._injector.map(payload.get_classes()[i]).toValue(payload.get_values()[i]);
	}
	,unmapPayload: function(payload) {
		var i = payload.get_length();
		while((function($this) {
			var $r;
			var a = i--;
			var aNeg = a < 0;
			var bNeg = 0 < 0;
			$r = aNeg != bNeg?aNeg:a > 0;
			return $r;
		}(this))) this._injector.unmap(payload.get_classes()[i]);
	}
	,__class__: robotlegs.bender.extensions.commandCenter.impl.CommandExecutor
};
robotlegs.bender.extensions.commandCenter.impl.CommandMapper = function(mappings) {
	this._mappings = mappings;
};
$hxClasses["robotlegs.bender.extensions.commandCenter.impl.CommandMapper"] = robotlegs.bender.extensions.commandCenter.impl.CommandMapper;
robotlegs.bender.extensions.commandCenter.impl.CommandMapper.__name__ = ["robotlegs","bender","extensions","commandCenter","impl","CommandMapper"];
robotlegs.bender.extensions.commandCenter.impl.CommandMapper.__interfaces__ = [robotlegs.bender.extensions.commandCenter.dsl.ICommandConfigurator,robotlegs.bender.extensions.commandCenter.dsl.ICommandUnmapper,robotlegs.bender.extensions.commandCenter.dsl.ICommandMapper];
robotlegs.bender.extensions.commandCenter.impl.CommandMapper.prototype = {
	_mappings: null
	,_mapping: null
	,toCommand: function(commandClass) {
		this._mapping = new robotlegs.bender.extensions.commandCenter.impl.CommandMapping(commandClass);
		this._mappings.addMapping(this._mapping);
		return this;
	}
	,fromCommand: function(commandClass) {
		this._mappings.removeMappingFor(commandClass);
	}
	,fromAll: function() {
		this._mappings.removeAllMappings();
	}
	,once: function(value) {
		if(value == null) value = true;
		this._mapping.setFireOnce(value);
		return this;
	}
	,withGuards: function(guards) {
		($_=this._mapping,$bind($_,$_.addGuards)).apply(null,guards);
		return this;
	}
	,withHooks: function(hooks) {
		($_=this._mapping,$bind($_,$_.addHooks)).apply(null,hooks);
		return this;
	}
	,withExecuteMethod: function(name) {
		this._mapping.setExecuteMethod(name);
		return this;
	}
	,withPayloadInjection: function(value) {
		if(value == null) value = true;
		this._mapping.setPayloadInjectionEnabled(value);
		return this;
	}
	,__class__: robotlegs.bender.extensions.commandCenter.impl.CommandMapper
};
robotlegs.bender.extensions.commandCenter.impl.CommandMapping = function(commandClass) {
	this._payloadInjectionEnabled = true;
	this._fireOnce = false;
	this._hooks = [];
	this._guards = [];
	this._executeMethod = "execute";
	this._commandClass = commandClass;
};
$hxClasses["robotlegs.bender.extensions.commandCenter.impl.CommandMapping"] = robotlegs.bender.extensions.commandCenter.impl.CommandMapping;
robotlegs.bender.extensions.commandCenter.impl.CommandMapping.__name__ = ["robotlegs","bender","extensions","commandCenter","impl","CommandMapping"];
robotlegs.bender.extensions.commandCenter.impl.CommandMapping.__interfaces__ = [robotlegs.bender.extensions.commandCenter.api.ICommandMapping];
robotlegs.bender.extensions.commandCenter.impl.CommandMapping.prototype = {
	_commandClass: null
	,commandClass: null
	,get_commandClass: function() {
		return this._commandClass;
	}
	,_executeMethod: null
	,executeMethod: null
	,get_executeMethod: function() {
		return this._executeMethod;
	}
	,_guards: null
	,guards: null
	,get_guards: function() {
		return this._guards;
	}
	,_hooks: null
	,hooks: null
	,get_hooks: function() {
		return this._hooks;
	}
	,_fireOnce: null
	,fireOnce: null
	,get_fireOnce: function() {
		return this._fireOnce;
	}
	,_payloadInjectionEnabled: null
	,payloadInjectionEnabled: null
	,get_payloadInjectionEnabled: function() {
		return this._payloadInjectionEnabled;
	}
	,setExecuteMethod: function(name) {
		this._executeMethod = name;
		return this;
	}
	,addGuards: function(guards) {
		this._guards = ($_=this._guards,$bind($_,$_.concat)).apply(null,guards);
		return this;
	}
	,addHooks: function(hooks) {
		this._hooks = ($_=this._hooks,$bind($_,$_.concat)).apply(null,hooks);
		return this;
	}
	,setFireOnce: function(value) {
		this._fireOnce = value;
		return this;
	}
	,setPayloadInjectionEnabled: function(value) {
		this._payloadInjectionEnabled = value;
		return this;
	}
	,toString: function() {
		return "Command " + Std.string(this._commandClass);
	}
	,__class__: robotlegs.bender.extensions.commandCenter.impl.CommandMapping
	,__properties__: {get_payloadInjectionEnabled:"get_payloadInjectionEnabled",get_fireOnce:"get_fireOnce",get_hooks:"get_hooks",get_guards:"get_guards",get_executeMethod:"get_executeMethod",get_commandClass:"get_commandClass"}
};
robotlegs.bender.extensions.commandCenter.impl.CommandMappingList = function(trigger,processors,logger) {
	this._sorted = false;
	this._mappings = new Array();
	this._mappingsByCommand = new haxe.ds.StringMap();
	this._trigger = trigger;
	this._processors = processors;
	this._logger = logger;
};
$hxClasses["robotlegs.bender.extensions.commandCenter.impl.CommandMappingList"] = robotlegs.bender.extensions.commandCenter.impl.CommandMappingList;
robotlegs.bender.extensions.commandCenter.impl.CommandMappingList.__name__ = ["robotlegs","bender","extensions","commandCenter","impl","CommandMappingList"];
robotlegs.bender.extensions.commandCenter.impl.CommandMappingList.__interfaces__ = [robotlegs.bender.extensions.commandCenter.api.ICommandMappingList];
robotlegs.bender.extensions.commandCenter.impl.CommandMappingList.prototype = {
	_mappingsByCommand: null
	,_mappings: null
	,_trigger: null
	,_processors: null
	,_logger: null
	,_compareFunction: null
	,_sorted: null
	,getList: function() {
		if(!this._sorted) this.sortMappings();
		return this._mappings.concat([]);
	}
	,withSortFunction: function(sorter) {
		this._sorted = false;
		this._compareFunction = sorter;
		return this;
	}
	,addMapping: function(mapping) {
		this._sorted = false;
		this.applyProcessors(mapping);
		var oldMapping;
		var key = org.swiftsuspenders.utils.UID.instanceID(mapping.get_commandClass());
		oldMapping = this._mappingsByCommand.get(key);
		if(oldMapping != null) this.overwriteMapping(oldMapping,mapping); else {
			this.storeMapping(mapping);
			if(this._mappings.length == 1) this._trigger.activate();
		}
	}
	,removeMapping: function(mapping) {
		if((function($this) {
			var $r;
			var key = org.swiftsuspenders.utils.UID.clearInstanceID(mapping.get_commandClass());
			$r = $this._mappingsByCommand.get(key);
			return $r;
		}(this))) {
			this.deleteMapping(mapping);
			if(this._mappings.length == 0) this._trigger.deactivate();
		}
	}
	,removeMappingFor: function(commandClass) {
		var mapping;
		var key = org.swiftsuspenders.utils.UID.instanceID(commandClass);
		mapping = this._mappingsByCommand.get(key);
		if(mapping != null) this.removeMapping(mapping);
	}
	,removeAllMappings: function() {
		if(this._mappings.length > 0) {
			var list = this._mappings.concat([]);
			var length = list.length;
			while(length-- > 0) this.deleteMapping(list[length]);
			this._trigger.deactivate();
		}
	}
	,storeMapping: function(mapping) {
		var k = org.swiftsuspenders.utils.UID.instanceID(mapping.get_commandClass());
		this._mappingsByCommand.set(k,mapping);
		mapping;
		this._mappings.push(mapping);
		if(this._logger != null) this._logger.debug("{0} mapped to {1}",[this._trigger,mapping]);
	}
	,deleteMapping: function(mapping) {
		var key = org.swiftsuspenders.utils.UID.clearInstanceID(mapping.get_commandClass());
		this._mappingsByCommand.remove(key);
		this._mappings.splice(HxOverrides.indexOf(this._mappings,mapping,0),1);
		if(this._logger != null) this._logger.debug("{0} unmapped from {1}",[this._trigger,mapping]);
	}
	,overwriteMapping: function(oldMapping,newMapping) {
		if(this._logger != null) this._logger.warn("{0} already mapped to {1}\n" + "If you have overridden this mapping intentionally you can use \"unmap()\" " + "prior to your replacement mapping in order to avoid seeing this message.\n",[this._trigger,oldMapping]);
		this.deleteMapping(oldMapping);
		this.storeMapping(newMapping);
	}
	,sortMappings: function() {
		this._sorted = true;
	}
	,applyProcessors: function(mapping) {
		var _g = 0;
		var _g1 = this._processors;
		while(_g < _g1.length) {
			var processor = _g1[_g];
			++_g;
			processor(mapping);
		}
	}
	,__class__: robotlegs.bender.extensions.commandCenter.impl.CommandMappingList
};
robotlegs.bender.extensions.commandCenter.impl.CommandTriggerMap = function(keyFactory,triggerFactory) {
	this._triggers = new haxe.ds.StringMap();
	this._keyFactory = keyFactory;
	this._triggerFactory = triggerFactory;
};
$hxClasses["robotlegs.bender.extensions.commandCenter.impl.CommandTriggerMap"] = robotlegs.bender.extensions.commandCenter.impl.CommandTriggerMap;
robotlegs.bender.extensions.commandCenter.impl.CommandTriggerMap.__name__ = ["robotlegs","bender","extensions","commandCenter","impl","CommandTriggerMap"];
robotlegs.bender.extensions.commandCenter.impl.CommandTriggerMap.prototype = {
	_triggers: null
	,_keyFactory: null
	,_triggerFactory: null
	,getTrigger: function(params) {
		var key = this.getKey(params);
		if((function($this) {
			var $r;
			var key1 = org.swiftsuspenders.utils.UID.instanceID(key);
			$r = $this._triggers.get(key1);
			return $r;
		}(this)) == null) {
			var k = org.swiftsuspenders.utils.UID.instanceID(key);
			var v = this.createTrigger(params);
			this._triggers.set(k,v);
			v;
		}
		var key2 = org.swiftsuspenders.utils.UID.instanceID(key);
		return this._triggers.get(key2);
	}
	,removeTrigger: function(params) {
		return this.destroyTrigger(this.getKey(params));
	}
	,getKey: function(mapperArgs) {
		return this._keyFactory.apply(null,mapperArgs);
	}
	,createTrigger: function(mapperArgs) {
		return this._triggerFactory.apply(null,mapperArgs);
	}
	,destroyTrigger: function(key) {
		var id = org.swiftsuspenders.utils.UID.clearInstanceID(key);
		var trigger = this._triggers.get(id);
		if(trigger != null) {
			trigger.deactivate();
			this._triggers.remove(id);
		}
		return trigger;
	}
	,__class__: robotlegs.bender.extensions.commandCenter.impl.CommandTriggerMap
};
robotlegs.bender.extensions.commandCenter.impl.NullCommandTrigger = function() {
};
$hxClasses["robotlegs.bender.extensions.commandCenter.impl.NullCommandTrigger"] = robotlegs.bender.extensions.commandCenter.impl.NullCommandTrigger;
robotlegs.bender.extensions.commandCenter.impl.NullCommandTrigger.__name__ = ["robotlegs","bender","extensions","commandCenter","impl","NullCommandTrigger"];
robotlegs.bender.extensions.commandCenter.impl.NullCommandTrigger.__interfaces__ = [robotlegs.bender.extensions.commandCenter.api.ICommandTrigger];
robotlegs.bender.extensions.commandCenter.impl.NullCommandTrigger.prototype = {
	activate: function() {
	}
	,deactivate: function() {
	}
	,__class__: robotlegs.bender.extensions.commandCenter.impl.NullCommandTrigger
};
robotlegs.bender.extensions.contextView = {};
robotlegs.bender.extensions.contextView.ContextView = function(view) {
	this.view = view;
};
$hxClasses["robotlegs.bender.extensions.contextView.ContextView"] = robotlegs.bender.extensions.contextView.ContextView;
robotlegs.bender.extensions.contextView.ContextView.__name__ = ["robotlegs","bender","extensions","contextView","ContextView"];
robotlegs.bender.extensions.contextView.ContextView.prototype = {
	view: null
	,__class__: robotlegs.bender.extensions.contextView.ContextView
};
robotlegs.bender.extensions.contextView.ContextViewExtension = function() { };
$hxClasses["robotlegs.bender.extensions.contextView.ContextViewExtension"] = robotlegs.bender.extensions.contextView.ContextViewExtension;
robotlegs.bender.extensions.contextView.ContextViewExtension.__name__ = ["robotlegs","bender","extensions","contextView","ContextViewExtension"];
robotlegs.bender.extensions.contextView.ContextViewExtension.__interfaces__ = [robotlegs.bender.framework.api.IExtension];
robotlegs.bender.extensions.contextView.ContextViewExtension.prototype = {
	_injector: null
	,_logger: null
	,extend: function(context) {
		this._injector = context.get_injector();
		this._logger = context.getLogger(this);
		context.beforeInitializing($bind(this,this.beforeInitializing));
		context.addConfigHandler(robotlegs.bender.extensions.matching.InstanceOfType.call(robotlegs.bender.extensions.contextView.ContextView),$bind(this,this.handleContextView));
	}
	,handleContextView: function(contextView) {
		if(this._injector.hasDirectMapping(robotlegs.bender.extensions.contextView.ContextView)) this._logger.warn("A contextView has already been installed, ignoring {0}",[contextView.view]); else {
			this._logger.debug("Mapping {0} as contextView",[contextView.view]);
			this._injector.map(robotlegs.bender.extensions.contextView.ContextView).toValue(contextView);
		}
	}
	,beforeInitializing: function() {
		if(!this._injector.hasDirectMapping(robotlegs.bender.extensions.contextView.ContextView)) this._logger.error("A ContextView must be installed if you install the ContextViewExtension.");
	}
	,__class__: robotlegs.bender.extensions.contextView.ContextViewExtension
};
robotlegs.bender.extensions.contextView.ContextViewListenerConfig = function() {
};
$hxClasses["robotlegs.bender.extensions.contextView.ContextViewListenerConfig"] = robotlegs.bender.extensions.contextView.ContextViewListenerConfig;
robotlegs.bender.extensions.contextView.ContextViewListenerConfig.__name__ = ["robotlegs","bender","extensions","contextView","ContextViewListenerConfig"];
robotlegs.bender.extensions.contextView.ContextViewListenerConfig.__interfaces__ = [robotlegs.bender.framework.api.IConfig];
robotlegs.bender.extensions.contextView.ContextViewListenerConfig.prototype = {
	contextView: null
	,viewManager: null
	,configure: function() {
		this.viewManager.addContainer(this.contextView.view);
	}
	,__class__: robotlegs.bender.extensions.contextView.ContextViewListenerConfig
};
robotlegs.bender.extensions.contextView.StageSyncExtension = function() { };
$hxClasses["robotlegs.bender.extensions.contextView.StageSyncExtension"] = robotlegs.bender.extensions.contextView.StageSyncExtension;
robotlegs.bender.extensions.contextView.StageSyncExtension.__name__ = ["robotlegs","bender","extensions","contextView","StageSyncExtension"];
robotlegs.bender.extensions.contextView.StageSyncExtension.__interfaces__ = [robotlegs.bender.framework.api.IExtension];
robotlegs.bender.extensions.contextView.StageSyncExtension.prototype = {
	_context: null
	,_contextView: null
	,_logger: null
	,extend: function(context) {
		this._context = context;
		this._logger = context.getLogger(this);
		this._context.addConfigHandler(robotlegs.bender.extensions.matching.InstanceOfType.call(robotlegs.bender.extensions.contextView.ContextView),$bind(this,this.handleContextView));
	}
	,handleContextView: function(contextView) {
		if(this._contextView != null) {
			this._logger.warn("A contextView has already been installed, ignoring {0}",[contextView.view]);
			return;
		}
		this._contextView = contextView.view;
		if(this._contextView.stage != null) this.initializeContext(); else {
			this._logger.debug("Context view is not yet on stage. Waiting...");
			this._contextView.addEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.onAddedToStage));
		}
	}
	,onAddedToStage: function(event) {
		this._contextView.removeEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.onAddedToStage));
		this.initializeContext();
	}
	,initializeContext: function() {
		this._logger.debug("Context view is now on stage. Initializing context...");
		this._context.initialize();
		this._contextView.addEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.onRemovedFromStage));
	}
	,onRemovedFromStage: function(event) {
		this._logger.debug("Context view has left the stage. Destroying context...");
		this._contextView.removeEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.onRemovedFromStage));
		this._context.destroy();
	}
	,__class__: robotlegs.bender.extensions.contextView.StageSyncExtension
};
robotlegs.bender.extensions.directCommandMap = {};
robotlegs.bender.extensions.directCommandMap.DirectCommandMapExtension = function() { };
$hxClasses["robotlegs.bender.extensions.directCommandMap.DirectCommandMapExtension"] = robotlegs.bender.extensions.directCommandMap.DirectCommandMapExtension;
robotlegs.bender.extensions.directCommandMap.DirectCommandMapExtension.__name__ = ["robotlegs","bender","extensions","directCommandMap","DirectCommandMapExtension"];
robotlegs.bender.extensions.directCommandMap.DirectCommandMapExtension.__interfaces__ = [robotlegs.bender.framework.api.IExtension];
robotlegs.bender.extensions.directCommandMap.DirectCommandMapExtension.prototype = {
	extend: function(context) {
		context.get_injector().map(robotlegs.bender.extensions.directCommandMap.api.IDirectCommandMap).toType(robotlegs.bender.extensions.directCommandMap.impl.DirectCommandMap);
	}
	,__class__: robotlegs.bender.extensions.directCommandMap.DirectCommandMapExtension
};
robotlegs.bender.extensions.directCommandMap.api = {};
robotlegs.bender.extensions.directCommandMap.api.IDirectCommandMapper = function() { };
$hxClasses["robotlegs.bender.extensions.directCommandMap.api.IDirectCommandMapper"] = robotlegs.bender.extensions.directCommandMap.api.IDirectCommandMapper;
robotlegs.bender.extensions.directCommandMap.api.IDirectCommandMapper.__name__ = ["robotlegs","bender","extensions","directCommandMap","api","IDirectCommandMapper"];
robotlegs.bender.extensions.directCommandMap.api.IDirectCommandMapper.prototype = {
	map: null
	,execute: null
	,__class__: robotlegs.bender.extensions.directCommandMap.api.IDirectCommandMapper
};
robotlegs.bender.extensions.directCommandMap.api.IDirectCommandMap = function() { };
$hxClasses["robotlegs.bender.extensions.directCommandMap.api.IDirectCommandMap"] = robotlegs.bender.extensions.directCommandMap.api.IDirectCommandMap;
robotlegs.bender.extensions.directCommandMap.api.IDirectCommandMap.__name__ = ["robotlegs","bender","extensions","directCommandMap","api","IDirectCommandMap"];
robotlegs.bender.extensions.directCommandMap.api.IDirectCommandMap.__interfaces__ = [robotlegs.bender.extensions.directCommandMap.api.IDirectCommandMapper];
robotlegs.bender.extensions.directCommandMap.api.IDirectCommandMap.prototype = {
	detain: null
	,release: null
	,addMappingProcessor: null
	,__class__: robotlegs.bender.extensions.directCommandMap.api.IDirectCommandMap
};
robotlegs.bender.extensions.directCommandMap.dsl = {};
robotlegs.bender.extensions.directCommandMap.dsl.IDirectCommandConfigurator = function() { };
$hxClasses["robotlegs.bender.extensions.directCommandMap.dsl.IDirectCommandConfigurator"] = robotlegs.bender.extensions.directCommandMap.dsl.IDirectCommandConfigurator;
robotlegs.bender.extensions.directCommandMap.dsl.IDirectCommandConfigurator.__name__ = ["robotlegs","bender","extensions","directCommandMap","dsl","IDirectCommandConfigurator"];
robotlegs.bender.extensions.directCommandMap.dsl.IDirectCommandConfigurator.__interfaces__ = [robotlegs.bender.extensions.directCommandMap.api.IDirectCommandMapper];
robotlegs.bender.extensions.directCommandMap.dsl.IDirectCommandConfigurator.prototype = {
	withExecuteMethod: null
	,withGuards: null
	,withHooks: null
	,withPayloadInjection: null
	,__class__: robotlegs.bender.extensions.directCommandMap.dsl.IDirectCommandConfigurator
};
robotlegs.bender.extensions.directCommandMap.impl = {};
robotlegs.bender.extensions.directCommandMap.impl.DirectCommandMap = function(context) {
	this._mappingProcessors = [];
	this._context = context;
	var sandboxedInjector = context.get_injector().createChild();
	sandboxedInjector.map(robotlegs.bender.extensions.directCommandMap.api.IDirectCommandMap).toValue(this);
	this._mappings = new robotlegs.bender.extensions.commandCenter.impl.CommandMappingList(new robotlegs.bender.extensions.commandCenter.impl.NullCommandTrigger(),this._mappingProcessors,context.getLogger(this));
	this._executor = new robotlegs.bender.extensions.commandCenter.impl.CommandExecutor(sandboxedInjector,($_=this._mappings,$bind($_,$_.removeMapping)));
};
$hxClasses["robotlegs.bender.extensions.directCommandMap.impl.DirectCommandMap"] = robotlegs.bender.extensions.directCommandMap.impl.DirectCommandMap;
robotlegs.bender.extensions.directCommandMap.impl.DirectCommandMap.__name__ = ["robotlegs","bender","extensions","directCommandMap","impl","DirectCommandMap"];
robotlegs.bender.extensions.directCommandMap.impl.DirectCommandMap.__interfaces__ = [robotlegs.bender.extensions.directCommandMap.api.IDirectCommandMap];
robotlegs.bender.extensions.directCommandMap.impl.DirectCommandMap.prototype = {
	_mappingProcessors: null
	,_context: null
	,_executor: null
	,_mappings: null
	,map: function(commandClass) {
		return new robotlegs.bender.extensions.directCommandMap.impl.DirectCommandMapper(this._executor,this._mappings,commandClass);
	}
	,detain: function(command) {
		this._context.detain(command);
	}
	,release: function(command) {
		this._context.release(command);
	}
	,execute: function(payload) {
		this._executor.executeCommands(this._mappings.getList(),payload);
	}
	,addMappingProcessor: function(handler) {
		if(HxOverrides.indexOf(this._mappingProcessors,handler,0) == -1) this._mappingProcessors.push(handler);
		return this;
	}
	,__class__: robotlegs.bender.extensions.directCommandMap.impl.DirectCommandMap
};
robotlegs.bender.extensions.directCommandMap.impl.DirectCommandMapper = function(executor,mappings,commandClass) {
	this._executor = executor;
	this._mappings = mappings;
	this._mapping = new robotlegs.bender.extensions.commandCenter.impl.CommandMapping(commandClass);
	this._mapping.setFireOnce(true);
	this._mappings.addMapping(this._mapping);
};
$hxClasses["robotlegs.bender.extensions.directCommandMap.impl.DirectCommandMapper"] = robotlegs.bender.extensions.directCommandMap.impl.DirectCommandMapper;
robotlegs.bender.extensions.directCommandMap.impl.DirectCommandMapper.__name__ = ["robotlegs","bender","extensions","directCommandMap","impl","DirectCommandMapper"];
robotlegs.bender.extensions.directCommandMap.impl.DirectCommandMapper.__interfaces__ = [robotlegs.bender.extensions.directCommandMap.dsl.IDirectCommandConfigurator];
robotlegs.bender.extensions.directCommandMap.impl.DirectCommandMapper.prototype = {
	_mappings: null
	,_mapping: null
	,_executor: null
	,withExecuteMethod: function(name) {
		this._mapping.setExecuteMethod(name);
		return this;
	}
	,withGuards: function(guards) {
		($_=this._mapping,$bind($_,$_.addGuards)).apply(null,guards);
		return this;
	}
	,withHooks: function(hooks) {
		($_=this._mapping,$bind($_,$_.addHooks)).apply(null,hooks);
		return this;
	}
	,withPayloadInjection: function(value) {
		if(value == null) value = true;
		this._mapping.setPayloadInjectionEnabled(value);
		return this;
	}
	,execute: function(payload) {
		this._executor.executeCommands(this._mappings.getList(),payload);
	}
	,map: function(commandClass) {
		return new robotlegs.bender.extensions.directCommandMap.impl.DirectCommandMapper(this._executor,this._mappings,commandClass);
	}
	,__class__: robotlegs.bender.extensions.directCommandMap.impl.DirectCommandMapper
};
robotlegs.bender.extensions.enhancedLogging = {};
robotlegs.bender.extensions.enhancedLogging.InjectableLoggerExtension = function() { };
$hxClasses["robotlegs.bender.extensions.enhancedLogging.InjectableLoggerExtension"] = robotlegs.bender.extensions.enhancedLogging.InjectableLoggerExtension;
robotlegs.bender.extensions.enhancedLogging.InjectableLoggerExtension.__name__ = ["robotlegs","bender","extensions","enhancedLogging","InjectableLoggerExtension"];
robotlegs.bender.extensions.enhancedLogging.InjectableLoggerExtension.__interfaces__ = [robotlegs.bender.framework.api.IExtension];
robotlegs.bender.extensions.enhancedLogging.InjectableLoggerExtension.prototype = {
	extend: function(context) {
		context.get_injector().map(robotlegs.bender.framework.api.ILogger).toProvider(new robotlegs.bender.extensions.enhancedLogging.impl.LoggerProvider(context));
	}
	,__class__: robotlegs.bender.extensions.enhancedLogging.InjectableLoggerExtension
};
robotlegs.bender.extensions.enhancedLogging.TraceLoggingExtension = function() { };
$hxClasses["robotlegs.bender.extensions.enhancedLogging.TraceLoggingExtension"] = robotlegs.bender.extensions.enhancedLogging.TraceLoggingExtension;
robotlegs.bender.extensions.enhancedLogging.TraceLoggingExtension.__name__ = ["robotlegs","bender","extensions","enhancedLogging","TraceLoggingExtension"];
robotlegs.bender.extensions.enhancedLogging.TraceLoggingExtension.__interfaces__ = [robotlegs.bender.framework.api.IExtension];
robotlegs.bender.extensions.enhancedLogging.TraceLoggingExtension.prototype = {
	extend: function(context) {
		context.addLogTarget(new robotlegs.bender.extensions.enhancedLogging.impl.TraceLogTarget(context));
	}
	,__class__: robotlegs.bender.extensions.enhancedLogging.TraceLoggingExtension
};
robotlegs.bender.extensions.enhancedLogging.impl = {};
robotlegs.bender.extensions.enhancedLogging.impl.LogMessageParser = function() {
};
$hxClasses["robotlegs.bender.extensions.enhancedLogging.impl.LogMessageParser"] = robotlegs.bender.extensions.enhancedLogging.impl.LogMessageParser;
robotlegs.bender.extensions.enhancedLogging.impl.LogMessageParser.__name__ = ["robotlegs","bender","extensions","enhancedLogging","impl","LogMessageParser"];
robotlegs.bender.extensions.enhancedLogging.impl.LogMessageParser.prototype = {
	parseMessage: function(message,params) {
		if(params != null) {
			var numParams = params.length;
			var _g = 0;
			while(_g < numParams) {
				var i = _g++;
				message = message.split("{" + i + "}").join(params[i]);
			}
		}
		return message;
	}
	,__class__: robotlegs.bender.extensions.enhancedLogging.impl.LogMessageParser
};
robotlegs.bender.extensions.enhancedLogging.impl.LoggerProvider = function(context) {
	this._context = context;
};
$hxClasses["robotlegs.bender.extensions.enhancedLogging.impl.LoggerProvider"] = robotlegs.bender.extensions.enhancedLogging.impl.LoggerProvider;
robotlegs.bender.extensions.enhancedLogging.impl.LoggerProvider.__name__ = ["robotlegs","bender","extensions","enhancedLogging","impl","LoggerProvider"];
robotlegs.bender.extensions.enhancedLogging.impl.LoggerProvider.__interfaces__ = [org.swiftsuspenders.dependencyproviders.DependencyProvider];
robotlegs.bender.extensions.enhancedLogging.impl.LoggerProvider.prototype = {
	_context: null
	,apply: function(targetType,activeInjector,injectParameters) {
		return this._context.getLogger(targetType);
	}
	,destroy: function() {
	}
	,__class__: robotlegs.bender.extensions.enhancedLogging.impl.LoggerProvider
};
robotlegs.bender.framework.api.ILogTarget = function() { };
$hxClasses["robotlegs.bender.framework.api.ILogTarget"] = robotlegs.bender.framework.api.ILogTarget;
robotlegs.bender.framework.api.ILogTarget.__name__ = ["robotlegs","bender","framework","api","ILogTarget"];
robotlegs.bender.framework.api.ILogTarget.prototype = {
	log: null
	,__class__: robotlegs.bender.framework.api.ILogTarget
};
robotlegs.bender.extensions.enhancedLogging.impl.TraceLogTarget = function(context) {
	this._messageParser = new robotlegs.bender.extensions.enhancedLogging.impl.LogMessageParser();
	this._context = context;
};
$hxClasses["robotlegs.bender.extensions.enhancedLogging.impl.TraceLogTarget"] = robotlegs.bender.extensions.enhancedLogging.impl.TraceLogTarget;
robotlegs.bender.extensions.enhancedLogging.impl.TraceLogTarget.__name__ = ["robotlegs","bender","extensions","enhancedLogging","impl","TraceLogTarget"];
robotlegs.bender.extensions.enhancedLogging.impl.TraceLogTarget.__interfaces__ = [robotlegs.bender.framework.api.ILogTarget];
robotlegs.bender.extensions.enhancedLogging.impl.TraceLogTarget.prototype = {
	_messageParser: null
	,_context: null
	,log: function(source,level,timestamp,message,params) {
		var sourceName = org.swiftsuspenders.utils.CallProxy.getClassName(Type.getClass(source));
		var split = sourceName.split(".");
		sourceName = split[split.length - 1];
		haxe.Log.trace(timestamp + " " + robotlegs.bender.framework.api.LogLevel.NAME[level] + " " + sourceName + ": " + " " + this._messageParser.parseMessage(message,params),{ fileName : "TraceLogTarget.hx", lineNumber : 59, className : "robotlegs.bender.extensions.enhancedLogging.impl.TraceLogTarget", methodName : "log"});
	}
	,__class__: robotlegs.bender.extensions.enhancedLogging.impl.TraceLogTarget
};
robotlegs.bender.extensions.eventCommandMap = {};
robotlegs.bender.extensions.eventCommandMap.EventCommandMapExtension = function() { };
$hxClasses["robotlegs.bender.extensions.eventCommandMap.EventCommandMapExtension"] = robotlegs.bender.extensions.eventCommandMap.EventCommandMapExtension;
robotlegs.bender.extensions.eventCommandMap.EventCommandMapExtension.__name__ = ["robotlegs","bender","extensions","eventCommandMap","EventCommandMapExtension"];
robotlegs.bender.extensions.eventCommandMap.EventCommandMapExtension.__interfaces__ = [robotlegs.bender.framework.api.IExtension];
robotlegs.bender.extensions.eventCommandMap.EventCommandMapExtension.prototype = {
	extend: function(context) {
		context.get_injector().map(robotlegs.bender.extensions.eventCommandMap.api.IEventCommandMap).toSingleton(robotlegs.bender.extensions.eventCommandMap.impl.EventCommandMap);
	}
	,__class__: robotlegs.bender.extensions.eventCommandMap.EventCommandMapExtension
};
robotlegs.bender.extensions.eventCommandMap.api = {};
robotlegs.bender.extensions.eventCommandMap.api.IEventCommandMap = function() { };
$hxClasses["robotlegs.bender.extensions.eventCommandMap.api.IEventCommandMap"] = robotlegs.bender.extensions.eventCommandMap.api.IEventCommandMap;
robotlegs.bender.extensions.eventCommandMap.api.IEventCommandMap.__name__ = ["robotlegs","bender","extensions","eventCommandMap","api","IEventCommandMap"];
robotlegs.bender.extensions.eventCommandMap.api.IEventCommandMap.prototype = {
	map: null
	,unmap: null
	,addMappingProcessor: null
	,__class__: robotlegs.bender.extensions.eventCommandMap.api.IEventCommandMap
};
robotlegs.bender.extensions.eventCommandMap.impl = {};
robotlegs.bender.extensions.eventCommandMap.impl.EventCommandMap = function(context,dispatcher) {
	this._mappingProcessors = [];
	this._injector = context.get_injector();
	this._logger = context.getLogger(this);
	this._dispatcher = dispatcher;
	this._triggerMap = new robotlegs.bender.extensions.commandCenter.impl.CommandTriggerMap($bind(this,this.getKey),$bind(this,this.createTrigger));
};
$hxClasses["robotlegs.bender.extensions.eventCommandMap.impl.EventCommandMap"] = robotlegs.bender.extensions.eventCommandMap.impl.EventCommandMap;
robotlegs.bender.extensions.eventCommandMap.impl.EventCommandMap.__name__ = ["robotlegs","bender","extensions","eventCommandMap","impl","EventCommandMap"];
robotlegs.bender.extensions.eventCommandMap.impl.EventCommandMap.__interfaces__ = [robotlegs.bender.extensions.eventCommandMap.api.IEventCommandMap];
robotlegs.bender.extensions.eventCommandMap.impl.EventCommandMap.prototype = {
	_mappingProcessors: null
	,_injector: null
	,_dispatcher: null
	,_triggerMap: null
	,_logger: null
	,map: function(type,eventClass) {
		return this.getTrigger(type,eventClass).createMapper();
	}
	,unmap: function(type,eventClass) {
		return this.getTrigger(type,eventClass).createMapper();
	}
	,addMappingProcessor: function(handler) {
		if(HxOverrides.indexOf(this._mappingProcessors,handler,0) == -1) this._mappingProcessors.push(handler);
		return this;
	}
	,getKey: function(type,eventClass) {
		return type + Std.string(eventClass);
	}
	,getTrigger: function(type,eventClass) {
		return js.Boot.__cast(this._triggerMap.getTrigger([type,eventClass]) , robotlegs.bender.extensions.eventCommandMap.impl.EventCommandTrigger);
	}
	,createTrigger: function(type,eventClass) {
		return new robotlegs.bender.extensions.eventCommandMap.impl.EventCommandTrigger(this._injector,this._dispatcher,type,eventClass,this._mappingProcessors,this._logger);
	}
	,__class__: robotlegs.bender.extensions.eventCommandMap.impl.EventCommandMap
};
robotlegs.bender.extensions.eventCommandMap.impl.EventCommandTrigger = function(injector,dispatcher,type,eventClass,processors,logger) {
	this._dispatcher = dispatcher;
	this._type = type;
	this._eventClass = eventClass;
	this._mappings = new robotlegs.bender.extensions.commandCenter.impl.CommandMappingList(this,processors,logger);
	this._executor = new robotlegs.bender.extensions.commandCenter.impl.CommandExecutor(injector,($_=this._mappings,$bind($_,$_.removeMapping)));
};
$hxClasses["robotlegs.bender.extensions.eventCommandMap.impl.EventCommandTrigger"] = robotlegs.bender.extensions.eventCommandMap.impl.EventCommandTrigger;
robotlegs.bender.extensions.eventCommandMap.impl.EventCommandTrigger.__name__ = ["robotlegs","bender","extensions","eventCommandMap","impl","EventCommandTrigger"];
robotlegs.bender.extensions.eventCommandMap.impl.EventCommandTrigger.__interfaces__ = [robotlegs.bender.extensions.commandCenter.api.ICommandTrigger];
robotlegs.bender.extensions.eventCommandMap.impl.EventCommandTrigger.prototype = {
	_dispatcher: null
	,_type: null
	,_eventClass: null
	,_mappings: null
	,_executor: null
	,createMapper: function() {
		return new robotlegs.bender.extensions.commandCenter.impl.CommandMapper(this._mappings);
	}
	,activate: function() {
		this._dispatcher.addEventListener(this._type,$bind(this,this.eventHandler));
	}
	,deactivate: function() {
		this._dispatcher.removeEventListener(this._type,$bind(this,this.eventHandler));
	}
	,toString: function() {
		return Std.string(this._eventClass) + " with selector '" + this._type + "'";
	}
	,eventHandler: function(event) {
		var eventConstructor = Type.getClass(event);
		var payloadEventClass;
		if(eventConstructor == this._eventClass || this._eventClass == null) payloadEventClass = eventConstructor; else if(this._eventClass == openfl.events.Event) payloadEventClass = this._eventClass; else return;
		this._executor.executeCommands(this._mappings.getList(),new robotlegs.bender.extensions.commandCenter.api.CommandPayload([event],[payloadEventClass]));
	}
	,__class__: robotlegs.bender.extensions.eventCommandMap.impl.EventCommandTrigger
};
robotlegs.bender.extensions.eventDispatcher = {};
robotlegs.bender.extensions.eventDispatcher.EventDispatcherExtension = function(eventDispatcher) {
	if(eventDispatcher != null) this._eventDispatcher = eventDispatcher; else this._eventDispatcher = new openfl.events.EventDispatcher();
};
$hxClasses["robotlegs.bender.extensions.eventDispatcher.EventDispatcherExtension"] = robotlegs.bender.extensions.eventDispatcher.EventDispatcherExtension;
robotlegs.bender.extensions.eventDispatcher.EventDispatcherExtension.__name__ = ["robotlegs","bender","extensions","eventDispatcher","EventDispatcherExtension"];
robotlegs.bender.extensions.eventDispatcher.EventDispatcherExtension.__interfaces__ = [robotlegs.bender.framework.api.IExtension];
robotlegs.bender.extensions.eventDispatcher.EventDispatcherExtension.prototype = {
	_context: null
	,_eventDispatcher: null
	,_lifecycleRelay: null
	,extend: function(context) {
		this._context = context;
		this._context.get_injector().map(openfl.events.IEventDispatcher).toValue(this._eventDispatcher);
		this._context.beforeInitializing($bind(this,this.configureLifecycleEventRelay));
		this._context.afterDestroying($bind(this,this.destroyLifecycleEventRelay));
	}
	,configureLifecycleEventRelay: function() {
		this._lifecycleRelay = new robotlegs.bender.extensions.eventDispatcher.impl.LifecycleEventRelay(this._context,this._eventDispatcher);
	}
	,destroyLifecycleEventRelay: function() {
		this._lifecycleRelay.destroy();
	}
	,__class__: robotlegs.bender.extensions.eventDispatcher.EventDispatcherExtension
};
robotlegs.bender.extensions.eventDispatcher.impl = {};
robotlegs.bender.extensions.eventDispatcher.impl.EventRelay = function(source,destination,types) {
	this._active = false;
	this._source = source;
	this._destination = destination;
	if(types != null) this._types = types; else this._types = [];
};
$hxClasses["robotlegs.bender.extensions.eventDispatcher.impl.EventRelay"] = robotlegs.bender.extensions.eventDispatcher.impl.EventRelay;
robotlegs.bender.extensions.eventDispatcher.impl.EventRelay.__name__ = ["robotlegs","bender","extensions","eventDispatcher","impl","EventRelay"];
robotlegs.bender.extensions.eventDispatcher.impl.EventRelay.prototype = {
	_source: null
	,_destination: null
	,_types: null
	,_active: null
	,start: function() {
		if(!this._active) {
			this._active = true;
			this.addListeners();
		}
		return this;
	}
	,stop: function() {
		if(this._active) {
			this._active = false;
			this.removeListeners();
		}
		return this;
	}
	,addType: function(eventType) {
		this._types.push(eventType);
		if(this._active) this.addListener(eventType);
	}
	,removeType: function(eventType) {
		var index = HxOverrides.indexOf(this._types,eventType,0);
		if(index > -1) {
			this._types.splice(index,1);
			this.removeListener(eventType);
		}
	}
	,removeListener: function(type) {
		this._source.removeEventListener(type,($_=this._destination,$bind($_,$_.dispatchEvent)));
	}
	,addListener: function(type) {
		this._source.addEventListener(type,($_=this._destination,$bind($_,$_.dispatchEvent)));
	}
	,addListeners: function() {
		var _g = 0;
		var _g1 = this._types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			this.addListener(type);
		}
	}
	,removeListeners: function() {
		var _g = 0;
		var _g1 = this._types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			this.removeListener(type);
		}
	}
	,__class__: robotlegs.bender.extensions.eventDispatcher.impl.EventRelay
};
robotlegs.bender.framework.api.LifecycleEvent = function(type,error) {
	openfl.events.Event.call(this,type);
	this._error = error;
};
$hxClasses["robotlegs.bender.framework.api.LifecycleEvent"] = robotlegs.bender.framework.api.LifecycleEvent;
robotlegs.bender.framework.api.LifecycleEvent.__name__ = ["robotlegs","bender","framework","api","LifecycleEvent"];
robotlegs.bender.framework.api.LifecycleEvent.__super__ = openfl.events.Event;
robotlegs.bender.framework.api.LifecycleEvent.prototype = $extend(openfl.events.Event.prototype,{
	_error: null
	,error: null
	,clone: function() {
		return new robotlegs.bender.framework.api.LifecycleEvent(this.type,this.error);
	}
	,__class__: robotlegs.bender.framework.api.LifecycleEvent
});
robotlegs.bender.extensions.eventDispatcher.impl.LifecycleEventRelay = function(source,destination) {
	this._relay = new robotlegs.bender.extensions.eventDispatcher.impl.EventRelay(source,destination,robotlegs.bender.extensions.eventDispatcher.impl.LifecycleEventRelay.TYPES).start();
};
$hxClasses["robotlegs.bender.extensions.eventDispatcher.impl.LifecycleEventRelay"] = robotlegs.bender.extensions.eventDispatcher.impl.LifecycleEventRelay;
robotlegs.bender.extensions.eventDispatcher.impl.LifecycleEventRelay.__name__ = ["robotlegs","bender","extensions","eventDispatcher","impl","LifecycleEventRelay"];
robotlegs.bender.extensions.eventDispatcher.impl.LifecycleEventRelay.prototype = {
	_relay: null
	,destroy: function() {
		this._relay.stop();
		this._relay = null;
	}
	,__class__: robotlegs.bender.extensions.eventDispatcher.impl.LifecycleEventRelay
};
robotlegs.bender.extensions.imag.ImagCommandExtension = function() {
};
$hxClasses["robotlegs.bender.extensions.imag.ImagCommandExtension"] = robotlegs.bender.extensions.imag.ImagCommandExtension;
robotlegs.bender.extensions.imag.ImagCommandExtension.__name__ = ["robotlegs","bender","extensions","imag","ImagCommandExtension"];
robotlegs.bender.extensions.imag.ImagCommandExtension.__interfaces__ = [robotlegs.bender.framework.api.IExtension];
robotlegs.bender.extensions.imag.ImagCommandExtension.prototype = {
	_uid: null
	,context: null
	,injector: null
	,extend: function(context) {
		this._uid = robotlegs.bender.framework.impl.UID.create(robotlegs.bender.extensions.imag.ImagCommandExtension);
		this.context = context;
		this.injector = context.get_injector();
		context.configure([robotlegs.bender.extensions.imag.impl.commands.ExecuteImagCommands]);
	}
	,toString: function() {
		return this._uid;
	}
	,__class__: robotlegs.bender.extensions.imag.ImagCommandExtension
};
robotlegs.bender.extensions.imag.ImagModelExtension = function() {
	this._uid = robotlegs.bender.framework.impl.UID.create(robotlegs.bender.extensions.imag.ImagModelExtension);
};
$hxClasses["robotlegs.bender.extensions.imag.ImagModelExtension"] = robotlegs.bender.extensions.imag.ImagModelExtension;
robotlegs.bender.extensions.imag.ImagModelExtension.__name__ = ["robotlegs","bender","extensions","imag","ImagModelExtension"];
robotlegs.bender.extensions.imag.ImagModelExtension.__interfaces__ = [robotlegs.bender.framework.api.IExtension];
robotlegs.bender.extensions.imag.ImagModelExtension.ConfigClass = null;
robotlegs.bender.extensions.imag.ImagModelExtension.prototype = {
	_uid: null
	,context: null
	,injector: null
	,extend: function(context) {
		this.context = context;
		this.injector = context.get_injector();
		context.addConfigHandler(robotlegs.bender.extensions.matching.InstanceOfType.call(robotlegs.bender.extensions.imag.api.model.config.IConfigModel),$bind(this,this.handleConfigModel));
		this.injector.map(robotlegs.bender.extensions.imag.impl.model.activity.ActivityModel).asSingleton();
		this.injector.map(robotlegs.bender.extensions.imag.impl.model.scene.SceneModel).asSingleton();
	}
	,handleConfigModel: function(configModel) {
		robotlegs.bender.extensions.imag.ImagModelExtension.ConfigClass = Reflect.getProperty(configModel,"constructor");
		this.injector.map(robotlegs.bender.extensions.imag.api.model.config.IConfigModel).toSingleton(robotlegs.bender.extensions.imag.ImagModelExtension.ConfigClass);
	}
	,toString: function() {
		return this._uid;
	}
	,__class__: robotlegs.bender.extensions.imag.ImagModelExtension
};
robotlegs.bender.extensions.imag.ImagServiceExtension = function() {
	this._uid = robotlegs.bender.framework.impl.UID.create(robotlegs.bender.extensions.imag.ImagServiceExtension);
};
$hxClasses["robotlegs.bender.extensions.imag.ImagServiceExtension"] = robotlegs.bender.extensions.imag.ImagServiceExtension;
robotlegs.bender.extensions.imag.ImagServiceExtension.__name__ = ["robotlegs","bender","extensions","imag","ImagServiceExtension"];
robotlegs.bender.extensions.imag.ImagServiceExtension.__interfaces__ = [robotlegs.bender.framework.api.IExtension];
robotlegs.bender.extensions.imag.ImagServiceExtension.prototype = {
	_uid: null
	,context: null
	,injector: null
	,extend: function(context) {
		this.context = context;
		this.injector = context.get_injector();
		this.injector.map(robotlegs.bender.extensions.imag.api.services.keyboard.IKeyboardMap).toSingleton(robotlegs.bender.extensions.imag.impl.services.keyboard.KeyboardMap);
		this.injector.map(robotlegs.bender.extensions.imag.impl.services.keyboard.KeyboardMap).asSingleton();
	}
	,toString: function() {
		return this._uid;
	}
	,__class__: robotlegs.bender.extensions.imag.ImagServiceExtension
};
robotlegs.bender.extensions.imag.ImagSignalExtension = function() {
	this._uid = robotlegs.bender.framework.impl.UID.create(robotlegs.bender.extensions.imag.ImagSignalExtension);
};
$hxClasses["robotlegs.bender.extensions.imag.ImagSignalExtension"] = robotlegs.bender.extensions.imag.ImagSignalExtension;
robotlegs.bender.extensions.imag.ImagSignalExtension.__name__ = ["robotlegs","bender","extensions","imag","ImagSignalExtension"];
robotlegs.bender.extensions.imag.ImagSignalExtension.__interfaces__ = [robotlegs.bender.framework.api.IExtension];
robotlegs.bender.extensions.imag.ImagSignalExtension.prototype = {
	_uid: null
	,context: null
	,injector: null
	,extend: function(context) {
		this.context = context;
		this.injector = context.get_injector();
		context.get_injector().map(robotlegs.bender.extensions.imag.impl.signals.InitializeAppSignal).asSingleton();
		context.get_injector().map(robotlegs.bender.extensions.imag.impl.signals.LoadConfigSignal).asSingleton();
		context.get_injector().map(robotlegs.bender.extensions.imag.impl.signals.AppSetupCompleteSignal).asSingleton();
	}
	,toString: function() {
		return this._uid;
	}
	,__class__: robotlegs.bender.extensions.imag.ImagSignalExtension
};
robotlegs.bender.extensions.imag.api.services = {};
robotlegs.bender.extensions.imag.api.services.keyboard = {};
robotlegs.bender.extensions.imag.api.services.keyboard.IKeyboardMap = function() { };
$hxClasses["robotlegs.bender.extensions.imag.api.services.keyboard.IKeyboardMap"] = robotlegs.bender.extensions.imag.api.services.keyboard.IKeyboardMap;
robotlegs.bender.extensions.imag.api.services.keyboard.IKeyboardMap.__name__ = ["robotlegs","bender","extensions","imag","api","services","keyboard","IKeyboardMap"];
robotlegs.bender.extensions.imag.api.services.keyboard.IKeyboardMap.prototype = {
	map: null
	,__class__: robotlegs.bender.extensions.imag.api.services.keyboard.IKeyboardMap
};
robotlegs.bender.extensions.imag.impl.commands = {};
robotlegs.bender.extensions.imag.impl.commands.ExecuteImagCommands = function() {
};
$hxClasses["robotlegs.bender.extensions.imag.impl.commands.ExecuteImagCommands"] = robotlegs.bender.extensions.imag.impl.commands.ExecuteImagCommands;
robotlegs.bender.extensions.imag.impl.commands.ExecuteImagCommands.__name__ = ["robotlegs","bender","extensions","imag","impl","commands","ExecuteImagCommands"];
robotlegs.bender.extensions.imag.impl.commands.ExecuteImagCommands.__interfaces__ = [robotlegs.bender.framework.api.IConfig];
robotlegs.bender.extensions.imag.impl.commands.ExecuteImagCommands.prototype = {
	commandMap: null
	,injector: null
	,configModel: null
	,initializeAppSignal: null
	,loadConfigSignal: null
	,configure: function() {
		this.commandMap.map(robotlegs.bender.extensions.imag.impl.signals.InitializeAppSignal).toCommand(robotlegs.bender.extensions.imag.impl.commands.stageSetup.StageSetupCommand).once();
		this.commandMap.map(robotlegs.bender.extensions.imag.impl.signals.InitializeAppSignal).toCommand(robotlegs.bender.extensions.imag.impl.commands.viewportResize.FullStageViewportCommand).once();
		this.commandMap.map(robotlegs.bender.extensions.imag.impl.signals.InitializeAppSignal).toCommand(robotlegs.bender.extensions.imag.impl.commands.fullscreen.HTMLFullscreenCommand).once();
		this.setupSwfCommands();
		this.initializeAppSignal.dispatch();
		this.injector.map(robotlegs.bender.extensions.imag.ImagModelExtension.ConfigClass).toValue(this.configModel);
		this.commandMap.map(robotlegs.bender.extensions.imag.impl.signals.LoadConfigSignal).toCommand(robotlegs.bender.extensions.imag.impl.commands.config.ConfigCommand);
		this.loadConfigSignal.dispatch();
	}
	,setupSwfCommands: function() {
	}
	,__class__: robotlegs.bender.extensions.imag.impl.commands.ExecuteImagCommands
};
robotlegs.bender.extensions.imag.impl.commands.config = {};
robotlegs.bender.extensions.imag.impl.commands.config.ConfigCommand = function() {
	this.totalAssets = 0;
	this.loadCount = 0;
	this.xmlLoaderService = new robotlegs.bender.extensions.imag.impl.utils.loaders.XMLLoaderService();
	this.xmlToTypedObject = new robotlegs.bender.extensions.imag.impl.utils.parsers.XMLToTypedObject();
};
$hxClasses["robotlegs.bender.extensions.imag.impl.commands.config.ConfigCommand"] = robotlegs.bender.extensions.imag.impl.commands.config.ConfigCommand;
robotlegs.bender.extensions.imag.impl.commands.config.ConfigCommand.__name__ = ["robotlegs","bender","extensions","imag","impl","commands","config","ConfigCommand"];
robotlegs.bender.extensions.imag.impl.commands.config.ConfigCommand.__super__ = robotlegs.bender.bundles.mvcs.Command;
robotlegs.bender.extensions.imag.impl.commands.config.ConfigCommand.prototype = $extend(robotlegs.bender.bundles.mvcs.Command.prototype,{
	configModel: null
	,appSetupCompleteSignal: null
	,xmlLoaderService: null
	,xmlToTypedObject: null
	,loadCount: null
	,totalAssets: null
	,execute: function() {
		this.load("xml/config.xml");
	}
	,load: function(url) {
		this.totalAssets++;
		this.xmlLoaderService.load(url).onComplete.addOnce($bind(this,this.OnLoadComplete));
	}
	,OnLoadComplete: function(data,id) {
		this.xmlToTypedObject.populate(this.configModel,data);
		this.loadCount++;
		if(this.loadCount == this.totalAssets) this.AllFilesLoaded();
	}
	,AllFilesLoaded: function() {
		this.appSetupCompleteSignal.dispatch();
	}
	,__class__: robotlegs.bender.extensions.imag.impl.commands.config.ConfigCommand
});
robotlegs.bender.extensions.imag.impl.commands.fullscreen = {};
robotlegs.bender.extensions.imag.impl.commands.fullscreen.HTMLFullscreenCommand = function() {
};
$hxClasses["robotlegs.bender.extensions.imag.impl.commands.fullscreen.HTMLFullscreenCommand"] = robotlegs.bender.extensions.imag.impl.commands.fullscreen.HTMLFullscreenCommand;
robotlegs.bender.extensions.imag.impl.commands.fullscreen.HTMLFullscreenCommand.__name__ = ["robotlegs","bender","extensions","imag","impl","commands","fullscreen","HTMLFullscreenCommand"];
robotlegs.bender.extensions.imag.impl.commands.fullscreen.HTMLFullscreenCommand.__super__ = robotlegs.bender.bundles.mvcs.Command;
robotlegs.bender.extensions.imag.impl.commands.fullscreen.HTMLFullscreenCommand.prototype = $extend(robotlegs.bender.bundles.mvcs.Command.prototype,{
	contextView: null
	,execute: function() {
		this.toggleFullScreen();
		this.contextView.view.stage.addEventListener(openfl.events.MouseEvent.DOUBLE_CLICK,$bind(this,this.OnDoubleClickFullscreen));
		this.contextView.view.stage.addEventListener("touchEnd",$bind(this,this.OnEndTouchFullscreen));
	}
	,OnEndTouchFullscreen: function(e) {
		this.contextView.view.stage.removeEventListener("touchEnd",$bind(this,this.OnEndTouchFullscreen));
		this.GoFullScreen();
	}
	,OnDoubleClickFullscreen: function(e) {
		this.GoFullScreen();
	}
	,GoFullScreen: function() {
		haxe.Log.trace("GoFullScreen",{ fileName : "HTMLFullscreenCommand.hx", lineNumber : 62, className : "robotlegs.bender.extensions.imag.impl.commands.fullscreen.HTMLFullscreenCommand", methodName : "GoFullScreen"});
		var js = openfl.Assets.getText("js/Fullscreen.js");
		eval(js);
	}
	,toggleFullScreen: function() {
	}
	,__class__: robotlegs.bender.extensions.imag.impl.commands.fullscreen.HTMLFullscreenCommand
});
robotlegs.bender.extensions.imag.impl.commands.stageSetup = {};
robotlegs.bender.extensions.imag.impl.commands.stageSetup.StageSetupCommand = function() {
};
$hxClasses["robotlegs.bender.extensions.imag.impl.commands.stageSetup.StageSetupCommand"] = robotlegs.bender.extensions.imag.impl.commands.stageSetup.StageSetupCommand;
robotlegs.bender.extensions.imag.impl.commands.stageSetup.StageSetupCommand.__name__ = ["robotlegs","bender","extensions","imag","impl","commands","stageSetup","StageSetupCommand"];
robotlegs.bender.extensions.imag.impl.commands.stageSetup.StageSetupCommand.__super__ = robotlegs.bender.bundles.mvcs.Command;
robotlegs.bender.extensions.imag.impl.commands.stageSetup.StageSetupCommand.prototype = $extend(robotlegs.bender.bundles.mvcs.Command.prototype,{
	contextView: null
	,execute: function() {
		var stage = this.contextView.view.stage;
		stage.scaleMode = openfl.display.StageScaleMode.NO_SCALE;
		stage.align = openfl.display.StageAlign.TOP_LEFT;
	}
	,__class__: robotlegs.bender.extensions.imag.impl.commands.stageSetup.StageSetupCommand
});
robotlegs.bender.extensions.imag.impl.commands.viewportResize = {};
robotlegs.bender.extensions.imag.impl.commands.viewportResize.FullStageViewportCommand = function() {
};
$hxClasses["robotlegs.bender.extensions.imag.impl.commands.viewportResize.FullStageViewportCommand"] = robotlegs.bender.extensions.imag.impl.commands.viewportResize.FullStageViewportCommand;
robotlegs.bender.extensions.imag.impl.commands.viewportResize.FullStageViewportCommand.__name__ = ["robotlegs","bender","extensions","imag","impl","commands","viewportResize","FullStageViewportCommand"];
robotlegs.bender.extensions.imag.impl.commands.viewportResize.FullStageViewportCommand.__super__ = robotlegs.bender.bundles.mvcs.Command;
robotlegs.bender.extensions.imag.impl.commands.viewportResize.FullStageViewportCommand.prototype = $extend(robotlegs.bender.bundles.mvcs.Command.prototype,{
	viewport: null
	,contextView: null
	,stage: null
	,resizeCount: null
	,canvas: null
	,div: null
	,execute: function() {
		this.stage = this.contextView.view.stage;
		this.stage.addEventListener(openfl.events.Event.RESIZE,$bind(this,this.OnStageResize));
		window.addEventListener("resize",$bind(this,this.OnWindowResize),false);
		this.stage.addEventListener(openfl.events.Event.ENTER_FRAME,$bind(this,this.JSResizer));
	}
	,OnStageResize: function(e) {
		this.viewport.get_rect().setTo(0,0,this.stage.stageWidth,this.stage.stageHeight);
	}
	,OnWindowResize: function(event) {
		this.UpdateWindowDimensions();
		this.resizeCount = 0;
	}
	,JSResizer: function(e) {
		if(this.resizeCount < 2) this.UpdateWindowDimensions();
		this.resizeCount++;
	}
	,UpdateWindowDimensions: function() {
		var width = window.innerWidth;
		var height = window.innerHeight;
		this.viewport.get_rect().setTo(0,0,width,height);
		var openflContent = window.document.getElementById("openfl-content");
		openflContent.style.width = width + "px";
		openflContent.style.height = height + "px";
		this.div = openflContent.childNodes[0];
		this.div.style.width = width + "px";
		this.div.style.height = height + "px";
		this.canvas = this.div.childNodes[0];
		if(this.canvas != null) {
			this.canvas.width = width;
			this.canvas.height = height;
		}
	}
	,__class__: robotlegs.bender.extensions.imag.impl.commands.viewportResize.FullStageViewportCommand
});
robotlegs.bender.extensions.imag.impl.model.activity = {};
robotlegs.bender.extensions.imag.impl.model.activity.ActivityModel = function() {
	this.standardFPS = 60;
	this.throttleFPS = 4;
	this.timeout = 2;
	this._throttleFramerate = false;
	this._throttlingActive = false;
	this.InteractionCount = 0;
	this.animationCount = 0;
	this.InteractiveEvents = [openfl.events.MouseEvent.MOUSE_DOWN,openfl.events.MouseEvent.MOUSE_MOVE,openfl.events.MouseEvent.MOUSE_UP,openfl.events.MouseEvent.MOUSE_WHEEL,"touchBegin","touchMove","touchEnd"];
};
$hxClasses["robotlegs.bender.extensions.imag.impl.model.activity.ActivityModel"] = robotlegs.bender.extensions.imag.impl.model.activity.ActivityModel;
robotlegs.bender.extensions.imag.impl.model.activity.ActivityModel.__name__ = ["robotlegs","bender","extensions","imag","impl","model","activity","ActivityModel"];
robotlegs.bender.extensions.imag.impl.model.activity.ActivityModel.prototype = {
	contextView: null
	,animationCount: null
	,InteractionCount: null
	,_throttlingActive: null
	,_throttleFramerate: null
	,timeout: null
	,throttleFPS: null
	,standardFPS: null
	,InteractiveEvents: null
	,animating: function() {
		this.animationCount = 0;
	}
	,Interacting: function() {
		this.InteractionCount = 0;
	}
	,get_throttlingActive: function() {
		return this._throttlingActive;
	}
	,set_throttlingActive: function(value) {
		if(this._throttlingActive == value) return value;
		this._throttlingActive = value;
		if(this.get_throttlingActive()) {
			this.contextView.view.stage.addEventListener(openfl.events.Event.ENTER_FRAME,$bind(this,this.Update));
			var _g1 = 0;
			var _g = this.InteractiveEvents.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.contextView.view.stage.addEventListener(this.InteractiveEvents[i],$bind(this,this.OnInteraction));
			}
		} else {
			this.contextView.view.stage.removeEventListener(openfl.events.Event.ENTER_FRAME,$bind(this,this.Update));
			var _g11 = 0;
			var _g2 = this.InteractiveEvents.length;
			while(_g11 < _g2) {
				var j = _g11++;
				this.contextView.view.stage.removeEventListener(this.InteractiveEvents[j],$bind(this,this.OnInteraction));
			}
		}
		return this._throttlingActive;
	}
	,get_throttleFramerate: function() {
		return this._throttleFramerate;
	}
	,set_throttleFramerate: function(value) {
		if(this._throttleFramerate == value) return value;
		this._throttleFramerate = value;
		if(this.get_throttleFramerate()) this.contextView.view.stage.frameRate = this.throttleFPS; else this.contextView.view.stage.frameRate = this.standardFPS;
		return this._throttleFramerate;
	}
	,OnInteraction: function(e) {
		this.InteractionCount = 0;
	}
	,Update: function(e) {
		this.animationCount++;
		this.InteractionCount++;
		if(this.animationCount < this.timeout * this.standardFPS || this.InteractionCount < this.timeout * this.standardFPS) this.set_throttleFramerate(false); else this.set_throttleFramerate(true);
	}
	,__class__: robotlegs.bender.extensions.imag.impl.model.activity.ActivityModel
	,__properties__: {set_throttleFramerate:"set_throttleFramerate",get_throttleFramerate:"get_throttleFramerate",set_throttlingActive:"set_throttlingActive",get_throttlingActive:"get_throttlingActive"}
};
robotlegs.bender.extensions.imag.impl.model.scene = {};
robotlegs.bender.extensions.imag.impl.model.scene.SceneModel = function() {
	this.change = new msignal.Signal0();
	this._scene = new Array();
	com.imagination.core.behaviors.scene.SceneManager.sceneModel = this;
};
$hxClasses["robotlegs.bender.extensions.imag.impl.model.scene.SceneModel"] = robotlegs.bender.extensions.imag.impl.model.scene.SceneModel;
robotlegs.bender.extensions.imag.impl.model.scene.SceneModel.__name__ = ["robotlegs","bender","extensions","imag","impl","model","scene","SceneModel"];
robotlegs.bender.extensions.imag.impl.model.scene.SceneModel.prototype = {
	_scene: null
	,change: null
	,_uri: null
	,init: function() {
	}
	,get_uri: function() {
		return this._uri;
	}
	,set_uri: function(value) {
		if(this._uri == value) return value;
		this._uri = value;
		this.change.dispatch();
		return value;
	}
	,__class__: robotlegs.bender.extensions.imag.impl.model.scene.SceneModel
	,__properties__: {set_uri:"set_uri",get_uri:"get_uri"}
};
robotlegs.bender.extensions.imag.impl.model.scene.sceneVO = {};
robotlegs.bender.extensions.imag.impl.model.scene.sceneVO.IModelSceneVO = function() { };
$hxClasses["robotlegs.bender.extensions.imag.impl.model.scene.sceneVO.IModelSceneVO"] = robotlegs.bender.extensions.imag.impl.model.scene.sceneVO.IModelSceneVO;
robotlegs.bender.extensions.imag.impl.model.scene.sceneVO.IModelSceneVO.__name__ = ["robotlegs","bender","extensions","imag","impl","model","scene","sceneVO","IModelSceneVO"];
robotlegs.bender.extensions.imag.impl.model.scene.sceneVO.IModelSceneVO.prototype = {
	child: null
	,childById: null
	,__class__: robotlegs.bender.extensions.imag.impl.model.scene.sceneVO.IModelSceneVO
};
robotlegs.bender.extensions.imag.impl.model.scene.sceneVO.ModelSceneVO = function() {
	this.children = new Array();
	this.index = 0;
};
$hxClasses["robotlegs.bender.extensions.imag.impl.model.scene.sceneVO.ModelSceneVO"] = robotlegs.bender.extensions.imag.impl.model.scene.sceneVO.ModelSceneVO;
robotlegs.bender.extensions.imag.impl.model.scene.sceneVO.ModelSceneVO.__name__ = ["robotlegs","bender","extensions","imag","impl","model","scene","sceneVO","ModelSceneVO"];
robotlegs.bender.extensions.imag.impl.model.scene.sceneVO.ModelSceneVO.__interfaces__ = [robotlegs.bender.extensions.imag.impl.model.scene.sceneVO.IModelSceneVO];
robotlegs.bender.extensions.imag.impl.model.scene.sceneVO.ModelSceneVO.prototype = {
	parent: null
	,index: null
	,id: null
	,children: null
	,child: function(index) {
		if(index > this.children.length) return null;
		if(index == this.children.length) {
			var modelSceneVO = new robotlegs.bender.extensions.imag.impl.model.scene.sceneVO.ModelSceneVO();
			modelSceneVO.parent = this;
			modelSceneVO.index = index;
			this.children.push(modelSceneVO);
			return modelSceneVO;
		}
		return this.children[index];
	}
	,childById: function(id) {
		var _g1 = 0;
		var _g = this.children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.children[i].id == id) return this.children[i];
		}
		var modelSceneVO = new robotlegs.bender.extensions.imag.impl.model.scene.sceneVO.ModelSceneVO();
		modelSceneVO.parent = this;
		modelSceneVO.id = id;
		modelSceneVO.index = this.children.length;
		this.children.push(modelSceneVO);
		return modelSceneVO;
	}
	,__class__: robotlegs.bender.extensions.imag.impl.model.scene.sceneVO.ModelSceneVO
};
robotlegs.bender.extensions.imag.impl.services = {};
robotlegs.bender.extensions.imag.impl.services.keyboard = {};
robotlegs.bender.extensions.imag.impl.services.keyboard.BoolMap = function(keyboardMap) {
	this.keyboardMap = keyboardMap;
};
$hxClasses["robotlegs.bender.extensions.imag.impl.services.keyboard.BoolMap"] = robotlegs.bender.extensions.imag.impl.services.keyboard.BoolMap;
robotlegs.bender.extensions.imag.impl.services.keyboard.BoolMap.__name__ = ["robotlegs","bender","extensions","imag","impl","services","keyboard","BoolMap"];
robotlegs.bender.extensions.imag.impl.services.keyboard.BoolMap.prototype = {
	keyboardMap: null
	,property: null
	,object: null
	,map: function(object,property,charOrKeycode,options) {
		this.object = object;
		this.property = property;
		var pressOptions = { };
		var releaseOptions = { };
		if(options != null) {
			var fields = Reflect.fields(options);
			var _g = 0;
			while(_g < fields.length) {
				var prop = fields[_g];
				++_g;
				Reflect.setProperty(pressOptions,prop,Reflect.getProperty(options,prop));
				Reflect.setProperty(releaseOptions,prop,Reflect.getProperty(options,prop));
			}
		}
		Reflect.setProperty(pressOptions,"action",robotlegs.bender.extensions.imag.impl.services.keyboard.KeyboardMap.ACTION_DOWN);
		Reflect.setProperty(releaseOptions,"action",robotlegs.bender.extensions.imag.impl.services.keyboard.KeyboardMap.ACTION_UP);
		this.keyboardMap.map($bind(this,this.OnPress),charOrKeycode,pressOptions);
		this.keyboardMap.map($bind(this,this.OnRelease),charOrKeycode,releaseOptions);
	}
	,OnPress: function() {
		Reflect.setProperty(this.object,this.property,true);
	}
	,OnRelease: function() {
		Reflect.setProperty(this.object,this.property,false);
	}
	,__class__: robotlegs.bender.extensions.imag.impl.services.keyboard.BoolMap
};
robotlegs.bender.extensions.imag.impl.services.keyboard.KeyboardMap = function() {
	this.intBooleanMaps = new haxe.ds.IntMap();
	this.strBooleanMaps = new haxe.ds.StringMap();
	this._traceKeyIDs = false;
	this.initiated = false;
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["robotlegs.bender.extensions.imag.impl.services.keyboard.KeyboardMap"] = robotlegs.bender.extensions.imag.impl.services.keyboard.KeyboardMap;
robotlegs.bender.extensions.imag.impl.services.keyboard.KeyboardMap.__name__ = ["robotlegs","bender","extensions","imag","impl","services","keyboard","KeyboardMap"];
robotlegs.bender.extensions.imag.impl.services.keyboard.KeyboardMap.__interfaces__ = [robotlegs.bender.extensions.imag.api.services.keyboard.IKeyboardMap];
robotlegs.bender.extensions.imag.impl.services.keyboard.KeyboardMap.__super__ = openfl.events.EventDispatcher;
robotlegs.bender.extensions.imag.impl.services.keyboard.KeyboardMap.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	contextView: null
	,initiated: null
	,_keyLookup: null
	,_charLookup: null
	,_shortcuts: null
	,_traceKeyIDs: null
	,strBooleanMaps: null
	,intBooleanMaps: null
	,init: function() {
		if(this.initiated) return;
		this.initiated = true;
		this._shortcuts = new Array();
		this._keyLookup = new haxe.ds.IntMap();
		this._charLookup = new haxe.ds.StringMap();
		this.contextView.view.stage.addEventListener(openfl.events.KeyboardEvent.KEY_DOWN,$bind(this,this.OnKeyDown));
		this.contextView.view.stage.addEventListener(openfl.events.KeyboardEvent.KEY_UP,$bind(this,this.OnKeyUp));
	}
	,OnKeyDown: function(e) {
		this.dispatchEvent(e);
		if(this.get_traceKeyIDs()) haxe.Log.trace("[KeyboardMap] Down: " + e.keyCode,{ fileName : "KeyboardMap.hx", lineNumber : 55, className : "robotlegs.bender.extensions.imag.impl.services.keyboard.KeyboardMap", methodName : "OnKeyDown", customParams : [String.fromCharCode(e.charCode).toLowerCase()]});
		this.executeList(this._keyLookup.get(e.keyCode),e);
		this.executeList((function($this) {
			var $r;
			var key = String.fromCharCode(e.charCode).toLowerCase();
			$r = $this._charLookup.get(key);
			return $r;
		}(this)),e);
	}
	,OnKeyUp: function(e) {
		this.dispatchEvent(e);
		if(this.get_traceKeyIDs()) haxe.Log.trace("[KeyboardMap] Up: " + e.keyCode,{ fileName : "KeyboardMap.hx", lineNumber : 64, className : "robotlegs.bender.extensions.imag.impl.services.keyboard.KeyboardMap", methodName : "OnKeyUp", customParams : [String.fromCharCode(e.charCode).toLowerCase()]});
		this.executeList(this._keyLookup.get(e.keyCode),e);
		this.executeList((function($this) {
			var $r;
			var key = String.fromCharCode(e.charCode).toLowerCase();
			$r = $this._charLookup.get(key);
			return $r;
		}(this)),e);
	}
	,map: function(callback,charOrKeycode,options) {
		this.init();
		if(typeof(charOrKeycode) == "string") {
			if((js.Boot.__cast(charOrKeycode , String)).length == 1) this.addCharShortcut(callback,js.Boot.__cast(charOrKeycode , String),options); else {
				var keyboardWord = new robotlegs.bender.extensions.imag.impl.services.keyboard.KeyboardWord(this,callback,js.Boot.__cast(charOrKeycode , String),options);
			}
		} else if(((charOrKeycode | 0) === charOrKeycode)) this.addKeyShortcut(callback,js.Boot.__cast(charOrKeycode , Int),options); else throw new openfl.errors.Error("unknown charOrKeycode type, should be String or Int");
	}
	,mapBool: function(object,property,charOrKeycode,options) {
		if(typeof(charOrKeycode) == "string") this.booleanMapStr(charOrKeycode).map(object,property,charOrKeycode,options); else if(((charOrKeycode | 0) === charOrKeycode)) this.booleanMapInt(charOrKeycode).map(object,property,charOrKeycode,options);
	}
	,booleanMapStr: function(charOrKeycode) {
		if(this.strBooleanMaps.get(charOrKeycode) == null) {
			var v = new robotlegs.bender.extensions.imag.impl.services.keyboard.BoolMap(this);
			this.strBooleanMaps.set(charOrKeycode,v);
			v;
		}
		return this.strBooleanMaps.get(charOrKeycode);
	}
	,booleanMapInt: function(charOrKeycode) {
		if(this.intBooleanMaps.get(charOrKeycode) == null) {
			var v = new robotlegs.bender.extensions.imag.impl.services.keyboard.BoolMap(this);
			this.intBooleanMaps.set(charOrKeycode,v);
			v;
		}
		return this.intBooleanMaps.get(charOrKeycode);
	}
	,addCharShortcut: function(callback,$char,options) {
		this.addShortcut(callback,[$char],[],String,options);
	}
	,addKeyShortcut: function(callback,key,options) {
		this.addShortcut(callback,[],[key],Int,options);
	}
	,addShortcut: function(callback,chars,keys,type,options) {
		var ctrl = false;
		var alt = false;
		var shift = false;
		var action = robotlegs.bender.extensions.imag.impl.services.keyboard.KeyboardMap.ACTION_UP;
		var params = null;
		if(options != null) {
			if(org.swiftsuspenders.utils.CallProxy.hasField(options,"ctrl")) ctrl = Reflect.getProperty(options,"ctrl");
			if(org.swiftsuspenders.utils.CallProxy.hasField(options,"alt")) alt = Reflect.getProperty(options,"alt");
			if(org.swiftsuspenders.utils.CallProxy.hasField(options,"shift")) shift = Reflect.getProperty(options,"shift");
			if(org.swiftsuspenders.utils.CallProxy.hasField(options,"action")) action = Reflect.getProperty(options,"action");
			if(org.swiftsuspenders.utils.CallProxy.hasField(options,"params")) params = Reflect.getProperty(options,"params");
		}
		var shortcut = new robotlegs.bender.extensions.imag.impl.services.keyboard.Shortcut(callback,chars,keys,type,ctrl,alt,shift,action,params);
		var _g = 0;
		while(_g < chars.length) {
			var $char = chars[_g];
			++_g;
			var v = this.addToList(this._charLookup,$char,shortcut);
			this._charLookup.set($char,v);
			v;
		}
		var _g1 = 0;
		while(_g1 < keys.length) {
			var key = keys[_g1];
			++_g1;
			var v1 = this.addToList(this._keyLookup,key,shortcut);
			this._keyLookup.set(key,v1);
			v1;
		}
	}
	,executeList: function(shortcuts,e) {
		if(shortcuts == null) return;
		var _g = 0;
		while(_g < shortcuts.length) {
			var shortcut = shortcuts[_g];
			++_g;
			if(shortcut.ctrl == e.ctrlKey && shortcut.shift == e.shiftKey && shortcut.alt == e.altKey && shortcut.action == e.type) {
				if(shortcut.params != null) shortcut.callback(shortcut.params); else shortcut.callback();
			}
		}
	}
	,addToList: function(lookup,key,shortcut) {
		var list = null;
		if(typeof(key) == "string") {
			var _lookupStr = lookup;
			if(_lookupStr != null) {
				var key1 = key;
				list = _lookupStr.get(key1);
			}
		} else if(((key | 0) === key)) {
			var _lookupInt = lookup;
			if(_lookupInt != null) {
				var key2 = key;
				list = _lookupInt.get(key2);
			}
		}
		if(list == null) list = new Array();
		list.push(shortcut);
		return list;
	}
	,get_traceKeyIDs: function() {
		return this._traceKeyIDs;
	}
	,set_traceKeyIDs: function(value) {
		this._traceKeyIDs = value;
		return value;
	}
	,__class__: robotlegs.bender.extensions.imag.impl.services.keyboard.KeyboardMap
	,__properties__: {set_traceKeyIDs:"set_traceKeyIDs",get_traceKeyIDs:"get_traceKeyIDs"}
});
robotlegs.bender.extensions.imag.impl.services.keyboard.Shortcut = function(callback,chars,keys,type,ctrl,alt,shift,action,params) {
	this.callback = callback;
	this.chars = chars;
	this.keys = keys;
	this.type = type;
	this.ctrl = ctrl;
	this.alt = alt;
	this.shift = shift;
	this.action = action;
	this.params = params;
};
$hxClasses["robotlegs.bender.extensions.imag.impl.services.keyboard.Shortcut"] = robotlegs.bender.extensions.imag.impl.services.keyboard.Shortcut;
robotlegs.bender.extensions.imag.impl.services.keyboard.Shortcut.__name__ = ["robotlegs","bender","extensions","imag","impl","services","keyboard","Shortcut"];
robotlegs.bender.extensions.imag.impl.services.keyboard.Shortcut.prototype = {
	type: null
	,callback: null
	,ctrl: null
	,shift: null
	,alt: null
	,action: null
	,params: null
	,chars: null
	,keys: null
	,__class__: robotlegs.bender.extensions.imag.impl.services.keyboard.Shortcut
};
robotlegs.bender.extensions.imag.impl.services.keyboard.KeyboardWord = function(keyboardMap,callback,charOrKeycode,options) {
	this.count = 0;
	if(options != null) this.params = Reflect.getProperty(options,"params"); else options = { };
	this.callback = callback;
	this.split = charOrKeycode.split("");
	var _g1 = 0;
	var _g = this.split.length;
	while(_g1 < _g) {
		var i = _g1++;
		Reflect.setProperty(options,"params",[i]);
		keyboardMap.map($bind(this,this.CountFunction),this.split[i],options);
	}
	keyboardMap.addEventListener(openfl.events.KeyboardEvent.KEY_UP,$bind(this,this.OnKeyUp));
};
$hxClasses["robotlegs.bender.extensions.imag.impl.services.keyboard.KeyboardWord"] = robotlegs.bender.extensions.imag.impl.services.keyboard.KeyboardWord;
robotlegs.bender.extensions.imag.impl.services.keyboard.KeyboardWord.__name__ = ["robotlegs","bender","extensions","imag","impl","services","keyboard","KeyboardWord"];
robotlegs.bender.extensions.imag.impl.services.keyboard.KeyboardWord.prototype = {
	count: null
	,split: null
	,callback: null
	,params: null
	,OnKeyUp: function(e) {
		var character = String.fromCharCode(e.charCode);
		var _g1 = 0;
		var _g = this.split.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.split[i] == character) return;
		}
		this.count = 0;
	}
	,CountFunction: function(index) {
		if(this.count == index) {
			this.count++;
			if(this.count == this.split.length) {
				this.count = 0;
				if(this.params != null) this.callback(this.params); else this.callback();
			}
		}
	}
	,__class__: robotlegs.bender.extensions.imag.impl.services.keyboard.KeyboardWord
};
robotlegs.bender.extensions.imag.impl.signals = {};
robotlegs.bender.extensions.imag.impl.signals.AppSetupCompleteSignal = function() {
	msignal.Signal0.call(this);
};
$hxClasses["robotlegs.bender.extensions.imag.impl.signals.AppSetupCompleteSignal"] = robotlegs.bender.extensions.imag.impl.signals.AppSetupCompleteSignal;
robotlegs.bender.extensions.imag.impl.signals.AppSetupCompleteSignal.__name__ = ["robotlegs","bender","extensions","imag","impl","signals","AppSetupCompleteSignal"];
robotlegs.bender.extensions.imag.impl.signals.AppSetupCompleteSignal.__super__ = msignal.Signal0;
robotlegs.bender.extensions.imag.impl.signals.AppSetupCompleteSignal.prototype = $extend(msignal.Signal0.prototype,{
	__class__: robotlegs.bender.extensions.imag.impl.signals.AppSetupCompleteSignal
});
robotlegs.bender.extensions.imag.impl.signals.InitializeAppSignal = function() {
	msignal.Signal0.call(this);
};
$hxClasses["robotlegs.bender.extensions.imag.impl.signals.InitializeAppSignal"] = robotlegs.bender.extensions.imag.impl.signals.InitializeAppSignal;
robotlegs.bender.extensions.imag.impl.signals.InitializeAppSignal.__name__ = ["robotlegs","bender","extensions","imag","impl","signals","InitializeAppSignal"];
robotlegs.bender.extensions.imag.impl.signals.InitializeAppSignal.__super__ = msignal.Signal0;
robotlegs.bender.extensions.imag.impl.signals.InitializeAppSignal.prototype = $extend(msignal.Signal0.prototype,{
	__class__: robotlegs.bender.extensions.imag.impl.signals.InitializeAppSignal
});
robotlegs.bender.extensions.imag.impl.signals.LoadConfigSignal = function() {
	msignal.Signal0.call(this);
};
$hxClasses["robotlegs.bender.extensions.imag.impl.signals.LoadConfigSignal"] = robotlegs.bender.extensions.imag.impl.signals.LoadConfigSignal;
robotlegs.bender.extensions.imag.impl.signals.LoadConfigSignal.__name__ = ["robotlegs","bender","extensions","imag","impl","signals","LoadConfigSignal"];
robotlegs.bender.extensions.imag.impl.signals.LoadConfigSignal.__super__ = msignal.Signal0;
robotlegs.bender.extensions.imag.impl.signals.LoadConfigSignal.prototype = $extend(msignal.Signal0.prototype,{
	__class__: robotlegs.bender.extensions.imag.impl.signals.LoadConfigSignal
});
robotlegs.bender.extensions.imag.impl.utils = {};
robotlegs.bender.extensions.imag.impl.utils.loaders = {};
robotlegs.bender.extensions.imag.impl.utils.loaders.XMLLoaderService = function() {
};
$hxClasses["robotlegs.bender.extensions.imag.impl.utils.loaders.XMLLoaderService"] = robotlegs.bender.extensions.imag.impl.utils.loaders.XMLLoaderService;
robotlegs.bender.extensions.imag.impl.utils.loaders.XMLLoaderService.__name__ = ["robotlegs","bender","extensions","imag","impl","utils","loaders","XMLLoaderService"];
robotlegs.bender.extensions.imag.impl.utils.loaders.XMLLoaderService.prototype = {
	load: function(url) {
		var xmlLoader = new robotlegs.bender.extensions.imag.impl.utils.loaders.XMLLoader();
		xmlLoader.load(url);
		return xmlLoader;
	}
	,__class__: robotlegs.bender.extensions.imag.impl.utils.loaders.XMLLoaderService
};
robotlegs.bender.extensions.imag.impl.utils.loaders.XMLLoader = function() {
	this.onFail = new msignal.Signal1(String);
	this.onComplete = new msignal.Signal2(Xml,String);
	this.available = true;
};
$hxClasses["robotlegs.bender.extensions.imag.impl.utils.loaders.XMLLoader"] = robotlegs.bender.extensions.imag.impl.utils.loaders.XMLLoader;
robotlegs.bender.extensions.imag.impl.utils.loaders.XMLLoader.__name__ = ["robotlegs","bender","extensions","imag","impl","utils","loaders","XMLLoader"];
robotlegs.bender.extensions.imag.impl.utils.loaders.XMLLoader.prototype = {
	available: null
	,url: null
	,request: null
	,loader: null
	,onComplete: null
	,onFail: null
	,XMLLoader: function(url) {
		if(url == null) url = "";
		this.url = url;
	}
	,load: function(url) {
		this.url = url;
		if(this.loader == null) {
			this.loader = new openfl.net.URLLoader();
			this.loader.addEventListener(openfl.events.Event.COMPLETE,$bind(this,this.OnLoadComplete));
			this.loader.addEventListener(openfl.events.ErrorEvent.ERROR,$bind(this,this.OnError));
			this.loader.addEventListener(openfl.events.IOErrorEvent.IO_ERROR,$bind(this,this.OnError));
		}
		this.available = false;
		this.request = new openfl.net.URLRequest(url);
		this.loader.load(this.request);
	}
	,OnLoadComplete: function(e) {
		this.available = true;
		var xml = Xml.parse(this.loader.data);
		this.onComplete.dispatch(xml,this.url);
	}
	,OnError: function(e) {
		haxe.Log.trace("Load Error: " + Std.string(e),{ fileName : "XMLLoaderService.hx", lineNumber : 74, className : "robotlegs.bender.extensions.imag.impl.utils.loaders.XMLLoader", methodName : "OnError"});
		this.available = true;
		this.onComplete.dispatch(null,this.url);
	}
	,dispose: function() {
		if(this.loader != null) {
			this.loader.removeEventListener(openfl.events.Event.COMPLETE,$bind(this,this.OnLoadComplete));
			this.loader.removeEventListener(openfl.events.ErrorEvent.ERROR,$bind(this,this.OnError));
			this.loader = null;
		}
		this.request = null;
		this.onComplete = null;
	}
	,__class__: robotlegs.bender.extensions.imag.impl.utils.loaders.XMLLoader
};
robotlegs.bender.extensions.imag.impl.utils.parsers = {};
robotlegs.bender.extensions.imag.impl.utils.parsers.XMLToTypedObject = function() {
};
$hxClasses["robotlegs.bender.extensions.imag.impl.utils.parsers.XMLToTypedObject"] = robotlegs.bender.extensions.imag.impl.utils.parsers.XMLToTypedObject;
robotlegs.bender.extensions.imag.impl.utils.parsers.XMLToTypedObject.__name__ = ["robotlegs","bender","extensions","imag","impl","utils","parsers","XMLToTypedObject"];
robotlegs.bender.extensions.imag.impl.utils.parsers.XMLToTypedObject.prototype = {
	typedObject: null
	,xml: null
	,setObject: null
	,StaticRef: null
	,populate: function(typedObject,xml) {
		if(xml == null) return;
		this.xml = xml;
		this.typedObject = typedObject;
		this.StaticRef = Type.getClass(typedObject);
		var classFields = Type.getClassFields(this.StaticRef);
		var $it0 = xml.elementsNamed("data");
		while( $it0.hasNext() ) {
			var data = $it0.next();
			var $it1 = data.elements();
			while( $it1.hasNext() ) {
				var element = $it1.next();
				if(org.swiftsuspenders.utils.CallProxy.hasField(typedObject,element.get_nodeName())) Reflect.setProperty(typedObject,element.get_nodeName(),element.firstChild());
				var _g1 = 0;
				var _g = classFields.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(classFields[i] == element.get_nodeName()) Reflect.setProperty(this.StaticRef,element.get_nodeName(),element.firstChild());
				}
			}
		}
	}
	,parseVars: function(typedObjectXML) {
	}
	,setVars: function(type,property,value) {
	}
	,setFrom: function(property,xml) {
		return "";
	}
	,__class__: robotlegs.bender.extensions.imag.impl.utils.parsers.XMLToTypedObject
};
robotlegs.bender.extensions.localEventMap = {};
robotlegs.bender.extensions.localEventMap.LocalEventMapExtension = function() { };
$hxClasses["robotlegs.bender.extensions.localEventMap.LocalEventMapExtension"] = robotlegs.bender.extensions.localEventMap.LocalEventMapExtension;
robotlegs.bender.extensions.localEventMap.LocalEventMapExtension.__name__ = ["robotlegs","bender","extensions","localEventMap","LocalEventMapExtension"];
robotlegs.bender.extensions.localEventMap.LocalEventMapExtension.__interfaces__ = [robotlegs.bender.framework.api.IExtension];
robotlegs.bender.extensions.localEventMap.LocalEventMapExtension.prototype = {
	extend: function(context) {
		context.get_injector().map(robotlegs.bender.extensions.localEventMap.api.IEventMap).toType(robotlegs.bender.extensions.localEventMap.impl.EventMap);
	}
	,__class__: robotlegs.bender.extensions.localEventMap.LocalEventMapExtension
};
robotlegs.bender.extensions.localEventMap.api = {};
robotlegs.bender.extensions.localEventMap.api.IEventMap = function() { };
$hxClasses["robotlegs.bender.extensions.localEventMap.api.IEventMap"] = robotlegs.bender.extensions.localEventMap.api.IEventMap;
robotlegs.bender.extensions.localEventMap.api.IEventMap.__name__ = ["robotlegs","bender","extensions","localEventMap","api","IEventMap"];
robotlegs.bender.extensions.localEventMap.api.IEventMap.prototype = {
	mapListener: null
	,unmapListener: null
	,unmapListeners: null
	,suspend: null
	,resume: null
	,__class__: robotlegs.bender.extensions.localEventMap.api.IEventMap
};
robotlegs.bender.extensions.localEventMap.impl = {};
robotlegs.bender.extensions.localEventMap.impl.EventMap = function() {
	this._suspended = false;
	this._suspendedListeners = new Array();
	this._listeners = new Array();
};
$hxClasses["robotlegs.bender.extensions.localEventMap.impl.EventMap"] = robotlegs.bender.extensions.localEventMap.impl.EventMap;
robotlegs.bender.extensions.localEventMap.impl.EventMap.__name__ = ["robotlegs","bender","extensions","localEventMap","impl","EventMap"];
robotlegs.bender.extensions.localEventMap.impl.EventMap.__interfaces__ = [robotlegs.bender.extensions.localEventMap.api.IEventMap];
robotlegs.bender.extensions.localEventMap.impl.EventMap.prototype = {
	_listeners: null
	,_suspendedListeners: null
	,_suspended: null
	,mapListener: function(dispatcher,eventString,listener,eventClass,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = true;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		var _g = this;
		if(eventClass == null) eventClass = openfl.events.Event;
		var currentListeners;
		if(this._suspended) currentListeners = this._suspendedListeners; else currentListeners = this._listeners;
		var config;
		var i = currentListeners.length;
		while(i-- > 0) {
			config = currentListeners[i];
			if(config.equalTo(dispatcher,eventString,listener,eventClass,useCapture)) return;
		}
		var callback;
		if(eventClass == openfl.events.Event) callback = listener; else callback = function(event) {
			_g.routeEventToListener(event,listener,eventClass);
		};
		config = new robotlegs.bender.extensions.localEventMap.impl.EventMapConfig(dispatcher,eventString,listener,eventClass,callback,useCapture);
		currentListeners.push(config);
		if(!this._suspended) dispatcher.addEventListener(eventString,callback,useCapture,priority,useWeakReference);
	}
	,unmapListener: function(dispatcher,eventString,listener,eventClass,useCapture) {
		if(useCapture == null) useCapture = false;
		if(eventClass == null) eventClass = openfl.events.Event;
		var currentListeners;
		if(this._suspended) currentListeners = this._suspendedListeners; else currentListeners = this._listeners;
		var i = currentListeners.length;
		while(i-- > 0) {
			var config = currentListeners[i];
			if(config.equalTo(dispatcher,eventString,listener,eventClass,useCapture)) {
				if(!this._suspended) dispatcher.removeEventListener(eventString,config.callback,useCapture);
				currentListeners.splice(i,1);
				return;
			}
		}
	}
	,unmapListeners: function() {
		var currentListeners;
		if(this._suspended) currentListeners = this._suspendedListeners; else currentListeners = this._listeners;
		var eventConfig;
		var dispatcher;
		while((eventConfig = currentListeners.pop()) != null) if(!this._suspended) {
			dispatcher = eventConfig.dispatcher;
			dispatcher.removeEventListener(eventConfig.eventString,eventConfig.callback,eventConfig.useCapture);
		}
	}
	,suspend: function() {
		if(this._suspended) return;
		this._suspended = true;
		var eventConfig;
		var dispatcher;
		while((eventConfig = this._listeners.pop()) != null) {
			dispatcher = eventConfig.dispatcher;
			dispatcher.removeEventListener(eventConfig.eventString,eventConfig.callback,eventConfig.useCapture);
			this._suspendedListeners.push(eventConfig);
		}
	}
	,resume: function() {
		if(!this._suspended) return;
		this._suspended = false;
		var eventConfig;
		var dispatcher;
		while((eventConfig = this._suspendedListeners.pop()) != null) {
			dispatcher = eventConfig.dispatcher;
			dispatcher.addEventListener(eventConfig.eventString,eventConfig.callback,eventConfig.useCapture);
			this._listeners.push(eventConfig);
		}
	}
	,routeEventToListener: function(event,listener,originalEventClass) {
		if(js.Boot.__instanceof(event,originalEventClass)) listener(event);
	}
	,__class__: robotlegs.bender.extensions.localEventMap.impl.EventMap
};
robotlegs.bender.extensions.localEventMap.impl.EventMapConfig = function(dispatcher,eventString,listener,eventClass,callback,useCapture) {
	this._useCapture = false;
	this._dispatcher = dispatcher;
	this._eventString = eventString;
	this._listener = listener;
	this._eventClass = eventClass;
	this._callback = callback;
	this._useCapture = useCapture;
};
$hxClasses["robotlegs.bender.extensions.localEventMap.impl.EventMapConfig"] = robotlegs.bender.extensions.localEventMap.impl.EventMapConfig;
robotlegs.bender.extensions.localEventMap.impl.EventMapConfig.__name__ = ["robotlegs","bender","extensions","localEventMap","impl","EventMapConfig"];
robotlegs.bender.extensions.localEventMap.impl.EventMapConfig.prototype = {
	_dispatcher: null
	,dispatcher: null
	,_eventString: null
	,eventString: null
	,_listener: null
	,listener: null
	,_eventClass: null
	,eventClass: null
	,_callback: null
	,callback: null
	,_useCapture: null
	,useCapture: null
	,equalTo: function(dispatcher,eventString,listener,eventClass,useCapture) {
		return this._eventString == eventString && this._eventClass == eventClass && this._dispatcher == dispatcher && this._listener == listener && this._useCapture == useCapture;
	}
	,__class__: robotlegs.bender.extensions.localEventMap.impl.EventMapConfig
};
robotlegs.bender.framework.api.IMatcher = function() { };
$hxClasses["robotlegs.bender.framework.api.IMatcher"] = robotlegs.bender.framework.api.IMatcher;
robotlegs.bender.framework.api.IMatcher.__name__ = ["robotlegs","bender","framework","api","IMatcher"];
robotlegs.bender.framework.api.IMatcher.prototype = {
	matches: null
	,__class__: robotlegs.bender.framework.api.IMatcher
};
robotlegs.bender.extensions.matching = {};
robotlegs.bender.extensions.matching.ITypeFilter = function() { };
$hxClasses["robotlegs.bender.extensions.matching.ITypeFilter"] = robotlegs.bender.extensions.matching.ITypeFilter;
robotlegs.bender.extensions.matching.ITypeFilter.__name__ = ["robotlegs","bender","extensions","matching","ITypeFilter"];
robotlegs.bender.extensions.matching.ITypeFilter.__interfaces__ = [robotlegs.bender.framework.api.IMatcher];
robotlegs.bender.extensions.matching.ITypeFilter.prototype = {
	allOfTypes: null
	,anyOfTypes: null
	,noneOfTypes: null
	,descriptor: null
	,__class__: robotlegs.bender.extensions.matching.ITypeFilter
};
robotlegs.bender.extensions.matching.ITypeMatcher = function() { };
$hxClasses["robotlegs.bender.extensions.matching.ITypeMatcher"] = robotlegs.bender.extensions.matching.ITypeMatcher;
robotlegs.bender.extensions.matching.ITypeMatcher.__name__ = ["robotlegs","bender","extensions","matching","ITypeMatcher"];
robotlegs.bender.extensions.matching.ITypeMatcher.prototype = {
	createTypeFilter: null
	,__class__: robotlegs.bender.extensions.matching.ITypeMatcher
};
robotlegs.bender.extensions.matching.ITypeMatcherFactory = function() { };
$hxClasses["robotlegs.bender.extensions.matching.ITypeMatcherFactory"] = robotlegs.bender.extensions.matching.ITypeMatcherFactory;
robotlegs.bender.extensions.matching.ITypeMatcherFactory.__name__ = ["robotlegs","bender","extensions","matching","ITypeMatcherFactory"];
robotlegs.bender.extensions.matching.ITypeMatcherFactory.__interfaces__ = [robotlegs.bender.extensions.matching.ITypeMatcher];
robotlegs.bender.extensions.matching.ITypeMatcherFactory.prototype = {
	clone: null
	,__class__: robotlegs.bender.extensions.matching.ITypeMatcherFactory
};
robotlegs.bender.extensions.matching.InstanceOfType = function() { };
$hxClasses["robotlegs.bender.extensions.matching.InstanceOfType"] = robotlegs.bender.extensions.matching.InstanceOfType;
robotlegs.bender.extensions.matching.InstanceOfType.__name__ = ["robotlegs","bender","extensions","matching","InstanceOfType"];
robotlegs.bender.extensions.matching.InstanceOfType.call = function(type) {
	return new robotlegs.bender.extensions.matching.InstanceOfMatcher(type);
};
robotlegs.bender.extensions.matching.InstanceOfMatcher = function(type) {
	this._type = type;
};
$hxClasses["robotlegs.bender.extensions.matching.InstanceOfMatcher"] = robotlegs.bender.extensions.matching.InstanceOfMatcher;
robotlegs.bender.extensions.matching.InstanceOfMatcher.__name__ = ["robotlegs","bender","extensions","matching","InstanceOfMatcher"];
robotlegs.bender.extensions.matching.InstanceOfMatcher.__interfaces__ = [robotlegs.bender.framework.api.IMatcher];
robotlegs.bender.extensions.matching.InstanceOfMatcher.prototype = {
	_type: null
	,matches: function(item) {
		return js.Boot.__instanceof(item,this._type);
	}
	,__class__: robotlegs.bender.extensions.matching.InstanceOfMatcher
};
robotlegs.bender.extensions.matching.TypeFilter = function(allOf,anyOf,noneOf) {
	if(allOf == null || anyOf == null || noneOf == null) throw new openfl.errors.ArgumentError("TypeFilter parameters can not be null");
	this.allOfTypes = allOf;
	this.anyOfTypes = anyOf;
	this.noneOfTypes = noneOf;
};
$hxClasses["robotlegs.bender.extensions.matching.TypeFilter"] = robotlegs.bender.extensions.matching.TypeFilter;
robotlegs.bender.extensions.matching.TypeFilter.__name__ = ["robotlegs","bender","extensions","matching","TypeFilter"];
robotlegs.bender.extensions.matching.TypeFilter.__interfaces__ = [robotlegs.bender.extensions.matching.ITypeFilter];
robotlegs.bender.extensions.matching.TypeFilter.prototype = {
	allOfTypes: null
	,get_allOfTypes: function() {
		return this.allOfTypes;
	}
	,anyOfTypes: null
	,get_anyOfTypes: function() {
		return this.anyOfTypes;
	}
	,noneOfTypes: null
	,get_noneOfTypes: function() {
		return this.noneOfTypes;
	}
	,descriptor: null
	,get_descriptor: function() {
		if(this.descriptor == null) this.descriptor = this.createDescriptor();
		return this.descriptor;
	}
	,matches: function(item) {
		var i = this.get_allOfTypes().length;
		while((function($this) {
			var $r;
			var a = i--;
			var aNeg = a < 0;
			var bNeg = 0 < 0;
			$r = aNeg != bNeg?aNeg:a > 0;
			return $r;
		}(this))) if(!Std["is"](item,this.get_allOfTypes()[i])) return false;
		i = this.get_noneOfTypes().length;
		while((function($this) {
			var $r;
			var a1 = i--;
			var aNeg1 = a1 < 0;
			var bNeg1 = 0 < 0;
			$r = aNeg1 != bNeg1?aNeg1:a1 > 0;
			return $r;
		}(this))) if(Std["is"](item,this.get_noneOfTypes()[i])) return false;
		if(this.get_anyOfTypes().length == 0 && (this.get_allOfTypes().length > 0 || this.get_noneOfTypes().length > 0)) return true;
		i = this.get_anyOfTypes().length;
		while((function($this) {
			var $r;
			var a2 = i--;
			var aNeg2 = a2 < 0;
			var bNeg2 = 0 < 0;
			$r = aNeg2 != bNeg2?aNeg2:a2 > 0;
			return $r;
		}(this))) if(Std["is"](item,this.get_anyOfTypes()[i])) return true;
		return false;
	}
	,alphabetiseCaseInsensitiveFCQNs: function(classVector) {
		var fqcn;
		var allFCQNs = new Array();
		var iLength = classVector.length;
		var _g = 0;
		while(_g < iLength) {
			var i = _g++;
			fqcn = org.swiftsuspenders.utils.CallProxy.replaceClassName(classVector[i]);
			allFCQNs[allFCQNs.length] = fqcn;
		}
		allFCQNs.sort($bind(this,this.stringSort));
		return allFCQNs;
	}
	,createDescriptor: function() {
		var allOf_FCQNs = this.alphabetiseCaseInsensitiveFCQNs(this.get_allOfTypes());
		var anyOf_FCQNs = this.alphabetiseCaseInsensitiveFCQNs(this.get_anyOfTypes());
		var noneOf_FQCNs = this.alphabetiseCaseInsensitiveFCQNs(this.get_noneOfTypes());
		return "all of: " + allOf_FCQNs.toString() + ", any of: " + anyOf_FCQNs.toString() + ", none of: " + noneOf_FQCNs.toString();
	}
	,stringSort: function(item1,item2) {
		if(item1 < item2) return 1;
		return -1;
	}
	,__class__: robotlegs.bender.extensions.matching.TypeFilter
	,__properties__: {get_descriptor:"get_descriptor",get_noneOfTypes:"get_noneOfTypes",get_anyOfTypes:"get_anyOfTypes",get_allOfTypes:"get_allOfTypes"}
};
robotlegs.bender.extensions.matching.TypeMatcher = function() {
	this._noneOfTypes = new Array();
	this._anyOfTypes = new Array();
	this._allOfTypes = new Array();
};
$hxClasses["robotlegs.bender.extensions.matching.TypeMatcher"] = robotlegs.bender.extensions.matching.TypeMatcher;
robotlegs.bender.extensions.matching.TypeMatcher.__name__ = ["robotlegs","bender","extensions","matching","TypeMatcher"];
robotlegs.bender.extensions.matching.TypeMatcher.__interfaces__ = [robotlegs.bender.extensions.matching.ITypeMatcherFactory,robotlegs.bender.extensions.matching.ITypeMatcher];
robotlegs.bender.extensions.matching.TypeMatcher.prototype = {
	_allOfTypes: null
	,_anyOfTypes: null
	,_noneOfTypes: null
	,_typeFilter: null
	,allOf: function(types) {
		this.pushAddedTypesTo(types,this._allOfTypes);
		return this;
	}
	,anyOf: function(types) {
		this.pushAddedTypesTo(types,this._anyOfTypes);
		return this;
	}
	,noneOf: function(types) {
		this.pushAddedTypesTo(types,this._noneOfTypes);
		return this;
	}
	,createTypeFilter: function() {
		if(this._typeFilter == null) this._typeFilter = this.buildTypeFilter();
		return this._typeFilter;
	}
	,lock: function() {
		this.createTypeFilter();
		return this;
	}
	,clone: function() {
		return new robotlegs.bender.extensions.matching.TypeMatcher().allOf(this._allOfTypes).anyOf(this._anyOfTypes).noneOf(this._noneOfTypes);
	}
	,buildTypeFilter: function() {
		if(this._allOfTypes.length == 0 && this._anyOfTypes.length == 0 && this._noneOfTypes.length == 0) throw new robotlegs.bender.extensions.matching.TypeMatcherError(robotlegs.bender.extensions.matching.TypeMatcherError.EMPTY_MATCHER);
		return new robotlegs.bender.extensions.matching.TypeFilter(this._allOfTypes,this._anyOfTypes,this._noneOfTypes);
	}
	,pushAddedTypesTo: function(types,targetSet) {
		if(this._typeFilter != null) this.throwSealedMatcherError();
		this.pushValuesToClassVector(types,targetSet);
	}
	,throwSealedMatcherError: function() {
		throw new robotlegs.bender.extensions.matching.TypeMatcherError(robotlegs.bender.extensions.matching.TypeMatcherError.SEALED_MATCHER);
	}
	,pushValuesToClassVector: function(values,vector) {
		var isArray = (values[0] instanceof Array) && values[0].__enum__ == null;
		if(values.length == 1 && isArray) {
			var array;
			array = js.Boot.__cast(values[0] , Array);
			var _g = 0;
			while(_g < array.length) {
				var type = array[_g];
				++_g;
				vector.push(type);
			}
		} else {
			var _g1 = 0;
			while(_g1 < values.length) {
				var type1 = values[_g1];
				++_g1;
				vector.push(type1);
			}
		}
	}
	,__class__: robotlegs.bender.extensions.matching.TypeMatcher
};
robotlegs.bender.extensions.matching.TypeMatcherError = function(message) {
	openfl.errors.Error.call(this,message);
};
$hxClasses["robotlegs.bender.extensions.matching.TypeMatcherError"] = robotlegs.bender.extensions.matching.TypeMatcherError;
robotlegs.bender.extensions.matching.TypeMatcherError.__name__ = ["robotlegs","bender","extensions","matching","TypeMatcherError"];
robotlegs.bender.extensions.matching.TypeMatcherError.__super__ = openfl.errors.Error;
robotlegs.bender.extensions.matching.TypeMatcherError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: robotlegs.bender.extensions.matching.TypeMatcherError
});
robotlegs.bender.extensions.mediatorMap.MediatorMapExtension = function() { };
$hxClasses["robotlegs.bender.extensions.mediatorMap.MediatorMapExtension"] = robotlegs.bender.extensions.mediatorMap.MediatorMapExtension;
robotlegs.bender.extensions.mediatorMap.MediatorMapExtension.__name__ = ["robotlegs","bender","extensions","mediatorMap","MediatorMapExtension"];
robotlegs.bender.extensions.mediatorMap.MediatorMapExtension.__interfaces__ = [robotlegs.bender.framework.api.IExtension];
robotlegs.bender.extensions.mediatorMap.MediatorMapExtension.prototype = {
	_injector: null
	,_mediatorMap: null
	,_viewManager: null
	,extend: function(context) {
		context.beforeInitializing($bind(this,this.beforeInitializing)).beforeDestroying($bind(this,this.beforeDestroying)).whenDestroying($bind(this,this.whenDestroying));
		this._injector = context.get_injector();
		this._injector.map(robotlegs.bender.extensions.mediatorMap.api.IMediatorMap).toSingleton(robotlegs.bender.extensions.mediatorMap.impl.MediatorMap);
	}
	,beforeInitializing: function() {
		this._mediatorMap = this._injector.getInstance(robotlegs.bender.extensions.mediatorMap.api.IMediatorMap);
		if(this._injector.satisfiesDirectly(robotlegs.bender.extensions.viewManager.api.IViewManager)) {
			this._viewManager = this._injector.getInstance(robotlegs.bender.extensions.viewManager.api.IViewManager);
			this._viewManager.addViewHandler(this._mediatorMap);
		}
	}
	,beforeDestroying: function() {
		this._mediatorMap.unmediateAll();
		if(this._injector.satisfiesDirectly(robotlegs.bender.extensions.viewManager.api.IViewManager)) {
			this._viewManager = this._injector.getInstance(robotlegs.bender.extensions.viewManager.api.IViewManager);
			this._viewManager.removeViewHandler(this._mediatorMap);
		}
	}
	,whenDestroying: function() {
		if(this._injector.satisfiesDirectly(robotlegs.bender.extensions.mediatorMap.api.IMediatorMap)) this._injector.unmap(robotlegs.bender.extensions.mediatorMap.api.IMediatorMap);
	}
	,__class__: robotlegs.bender.extensions.mediatorMap.MediatorMapExtension
};
robotlegs.bender.extensions.mediatorMap.api.IMediatorMap = function() { };
$hxClasses["robotlegs.bender.extensions.mediatorMap.api.IMediatorMap"] = robotlegs.bender.extensions.mediatorMap.api.IMediatorMap;
robotlegs.bender.extensions.mediatorMap.api.IMediatorMap.__name__ = ["robotlegs","bender","extensions","mediatorMap","api","IMediatorMap"];
robotlegs.bender.extensions.mediatorMap.api.IMediatorMap.prototype = {
	mapMatcher: null
	,map: null
	,unmapMatcher: null
	,unmap: null
	,mediate: null
	,unmediate: null
	,unmediateAll: null
	,__class__: robotlegs.bender.extensions.mediatorMap.api.IMediatorMap
};
robotlegs.bender.extensions.mediatorMap.api.IMediatorMapping = function() { };
$hxClasses["robotlegs.bender.extensions.mediatorMap.api.IMediatorMapping"] = robotlegs.bender.extensions.mediatorMap.api.IMediatorMapping;
robotlegs.bender.extensions.mediatorMap.api.IMediatorMapping.__name__ = ["robotlegs","bender","extensions","mediatorMap","api","IMediatorMapping"];
robotlegs.bender.extensions.mediatorMap.api.IMediatorMapping.prototype = {
	matcher: null
	,mediatorClass: null
	,guards: null
	,hooks: null
	,autoRemoveEnabled: null
	,__class__: robotlegs.bender.extensions.mediatorMap.api.IMediatorMapping
};
robotlegs.bender.extensions.mediatorMap.dsl = {};
robotlegs.bender.extensions.mediatorMap.dsl.IMediatorConfigurator = function() { };
$hxClasses["robotlegs.bender.extensions.mediatorMap.dsl.IMediatorConfigurator"] = robotlegs.bender.extensions.mediatorMap.dsl.IMediatorConfigurator;
robotlegs.bender.extensions.mediatorMap.dsl.IMediatorConfigurator.__name__ = ["robotlegs","bender","extensions","mediatorMap","dsl","IMediatorConfigurator"];
robotlegs.bender.extensions.mediatorMap.dsl.IMediatorConfigurator.prototype = {
	withGuards: null
	,withHooks: null
	,autoRemove: null
	,__class__: robotlegs.bender.extensions.mediatorMap.dsl.IMediatorConfigurator
};
robotlegs.bender.extensions.mediatorMap.dsl.IMediatorMapper = function() { };
$hxClasses["robotlegs.bender.extensions.mediatorMap.dsl.IMediatorMapper"] = robotlegs.bender.extensions.mediatorMap.dsl.IMediatorMapper;
robotlegs.bender.extensions.mediatorMap.dsl.IMediatorMapper.__name__ = ["robotlegs","bender","extensions","mediatorMap","dsl","IMediatorMapper"];
robotlegs.bender.extensions.mediatorMap.dsl.IMediatorMapper.prototype = {
	toMediator: null
	,__class__: robotlegs.bender.extensions.mediatorMap.dsl.IMediatorMapper
};
robotlegs.bender.extensions.mediatorMap.dsl.IMediatorUnmapper = function() { };
$hxClasses["robotlegs.bender.extensions.mediatorMap.dsl.IMediatorUnmapper"] = robotlegs.bender.extensions.mediatorMap.dsl.IMediatorUnmapper;
robotlegs.bender.extensions.mediatorMap.dsl.IMediatorUnmapper.__name__ = ["robotlegs","bender","extensions","mediatorMap","dsl","IMediatorUnmapper"];
robotlegs.bender.extensions.mediatorMap.dsl.IMediatorUnmapper.prototype = {
	fromMediator: null
	,fromAll: null
	,__class__: robotlegs.bender.extensions.mediatorMap.dsl.IMediatorUnmapper
};
robotlegs.bender.extensions.mediatorMap.impl = {};
robotlegs.bender.extensions.mediatorMap.impl.MediatorFactory = function(injector,manager) {
	this._mediators = new haxe.ds.StringMap();
	this._injector = injector;
	if(manager != null) this._manager = manager; else this._manager = new robotlegs.bender.extensions.mediatorMap.impl.MediatorManager(this);
};
$hxClasses["robotlegs.bender.extensions.mediatorMap.impl.MediatorFactory"] = robotlegs.bender.extensions.mediatorMap.impl.MediatorFactory;
robotlegs.bender.extensions.mediatorMap.impl.MediatorFactory.__name__ = ["robotlegs","bender","extensions","mediatorMap","impl","MediatorFactory"];
robotlegs.bender.extensions.mediatorMap.impl.MediatorFactory.prototype = {
	_mediators: null
	,_injector: null
	,_manager: null
	,getMediator: function(item,mapping) {
		var id = org.swiftsuspenders.utils.UID.instanceID(item);
		var _mediatorsItem;
		if(this._mediators.get(id) != null) {
			var v = new haxe.ds.StringMap();
			this._mediators.set(id,v);
			v;
		}
		return this._mediators.get(id);
		if(this._mediators.get(id) != null) {
			_mediatorsItem = this._mediators.get(id);
			return _mediatorsItem.h[mapping.__id__];
		}
		return null;
	}
	,createMediators: function(item,type,mappings) {
		var createdMediators = [];
		var mediator;
		var _g = 0;
		while(_g < mappings.length) {
			var mapping = mappings[_g];
			++_g;
			mediator = this.getMediator(item,mapping);
			if(mediator == null) {
				this.mapTypeForFilterBinding(mapping.matcher,type,item);
				mediator = this.createMediator(item,mapping);
				this.unmapTypeForFilterBinding(mapping.matcher,type,item);
			}
			if(mediator) createdMediators.push(mediator);
		}
		return createdMediators;
	}
	,removeMediators: function(item) {
		var mediators;
		var key = org.swiftsuspenders.utils.UID.classID(item);
		mediators = this._mediators.get(key);
		if(mediators == null) return;
		var $it0 = mediators.iterator();
		while( $it0.hasNext() ) {
			var mapping = $it0.next();
			this._manager.removeMediator(mediators.get(mapping),item,js.Boot.__cast(mapping , robotlegs.bender.extensions.mediatorMap.api.IMediatorMapping));
		}
		var key1 = item;
		this._mediators.remove(key1);
	}
	,removeAllMediators: function() {
		var $it0 = this._mediators.iterator();
		while( $it0.hasNext() ) {
			var item = $it0.next();
			this.removeMediators(item);
		}
	}
	,createMediator: function(item,mapping) {
		var mediator = this.getMediator(item,mapping);
		if(mediator) return mediator;
		if(mapping.get_guards().length == 0 || robotlegs.bender.framework.impl.GuardsApprove.call(mapping.get_guards(),this._injector)) {
			var mediatorClass = mapping.get_mediatorClass();
			mediator = this._injector.instantiateUnmapped(mediatorClass);
			if(mapping.get_hooks().length > 0) {
				this._injector.map(mediatorClass).toValue(mediator);
				robotlegs.bender.framework.impl.ApplyHooks.call(mapping.get_hooks(),this._injector);
				this._injector.unmap(mediatorClass);
			}
			haxe.Log.trace("3",{ fileName : "MediatorFactory.hx", lineNumber : 157, className : "robotlegs.bender.extensions.mediatorMap.impl.MediatorFactory", methodName : "createMediator"});
			this.addMediator(mediator,item,mapping);
		}
		return mediator;
	}
	,addMediator: function(mediator,item,mapping) {
		var id = org.swiftsuspenders.utils.UID.instanceID(item);
		var _mediatorsItem;
		if(this._mediators.get(id) == null) _mediatorsItem = new haxe.ds.ObjectMap(); else _mediatorsItem = this._mediators.get(id);
		var v = mediator;
		_mediatorsItem.set(mapping,v);
		v;
		var v1 = _mediatorsItem.h[mapping.__id__];
		this._mediators.set(id,v1);
		v1;
		this._manager.addMediator(mediator,item,mapping);
	}
	,mapTypeForFilterBinding: function(filter,type,item) {
		var _g = 0;
		var _g1 = this.requiredTypesFor(filter,type);
		while(_g < _g1.length) {
			var requiredType = _g1[_g];
			++_g;
			this._injector.map(requiredType).toValue(item);
		}
	}
	,unmapTypeForFilterBinding: function(filter,type,item) {
		var _g = 0;
		var _g1 = this.requiredTypesFor(filter,type);
		while(_g < _g1.length) {
			var requiredType = _g1[_g];
			++_g;
			if(this._injector.satisfiesDirectly(requiredType)) this._injector.unmap(requiredType);
		}
	}
	,requiredTypesFor: function(filter,type) {
		var requiredTypes = filter.get_allOfTypes().concat(filter.get_anyOfTypes());
		if(HxOverrides.indexOf(requiredTypes,type,0) == -1) requiredTypes.push(type);
		return requiredTypes;
	}
	,__class__: robotlegs.bender.extensions.mediatorMap.impl.MediatorFactory
};
robotlegs.bender.extensions.mediatorMap.impl.MediatorManager = function(factory) {
	this._factory = factory;
};
$hxClasses["robotlegs.bender.extensions.mediatorMap.impl.MediatorManager"] = robotlegs.bender.extensions.mediatorMap.impl.MediatorManager;
robotlegs.bender.extensions.mediatorMap.impl.MediatorManager.__name__ = ["robotlegs","bender","extensions","mediatorMap","impl","MediatorManager"];
robotlegs.bender.extensions.mediatorMap.impl.MediatorManager.UIComponentClass = null;
robotlegs.bender.extensions.mediatorMap.impl.MediatorManager.prototype = {
	_factory: null
	,addMediator: function(mediator,item,mapping) {
		var displayObject = null;
		if(js.Boot.__instanceof(item,openfl.display.DisplayObject)) displayObject = js.Boot.__cast(item , openfl.display.DisplayObject);
		if(displayObject != null && mapping.get_autoRemoveEnabled()) displayObject.addEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.onRemovedFromStage));
		if(this.itemInitialized(item)) this.initializeMediator(mediator,item); else {
			var mediatorManagerAddMediator = new robotlegs.bender.extensions.mediatorMap.impl.MediatorManagerAddMediator($bind(this,this.initializeMediator),this._factory,displayObject,mediator,item,mapping);
			displayObject.addEventListener(robotlegs.bender.extensions.mediatorMap.impl.MediatorManager.CREATION_COMPLETE,$bind(mediatorManagerAddMediator,mediatorManagerAddMediator.creationComplete));
		}
	}
	,removeMediator: function(mediator,item,mapping) {
		if(js.Boot.__instanceof(item,openfl.display.DisplayObject)) (js.Boot.__cast(item , openfl.display.DisplayObject)).removeEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.onRemovedFromStage));
		if(this.itemInitialized(item)) this.destroyMediator(mediator);
	}
	,onRemovedFromStage: function(event) {
		this._factory.removeMediators(event.target);
	}
	,itemInitialized: function(item) {
		if(robotlegs.bender.extensions.mediatorMap.impl.MediatorManager.flexAvailable && js.Boot.__instanceof(item,robotlegs.bender.extensions.mediatorMap.impl.MediatorManager.UIComponentClass) && !org.swiftsuspenders.utils.CallProxy.hasField(item,"initialized")) return false;
		return true;
	}
	,initializeMediator: function(mediator,mediatedItem) {
		if(org.swiftsuspenders.utils.CallProxy.hasField(mediator,"preInitialize")) mediator.preInitialize();
		if(org.swiftsuspenders.utils.CallProxy.hasField(mediator,"viewComponent")) mediator.viewComponent = mediatedItem;
		if(org.swiftsuspenders.utils.CallProxy.hasField(mediator,"initialize")) mediator.initialize();
		if(org.swiftsuspenders.utils.CallProxy.hasField(mediator,"postInitialize")) mediator.postInitialize();
	}
	,destroyMediator: function(mediator) {
		if(org.swiftsuspenders.utils.CallProxy.hasField(mediator,"preDestroy")) mediator.preDestroy();
		if(org.swiftsuspenders.utils.CallProxy.hasField(mediator,"destroy")) mediator.destroy();
		if(org.swiftsuspenders.utils.CallProxy.hasField(mediator,"viewComponent")) mediator.viewComponent = null;
		if(org.swiftsuspenders.utils.CallProxy.hasField(mediator,"postDestroy")) mediator.postDestroy();
	}
	,__class__: robotlegs.bender.extensions.mediatorMap.impl.MediatorManager
};
robotlegs.bender.extensions.mediatorMap.impl.MediatorManagerAddMediator = function(initializeMediator,_factory,displayObject,mediator,item,mapping) {
	this.initializeMediator = initializeMediator;
	this._factory = _factory;
	this.mapping = mapping;
	this.item = item;
	this.mediator = mediator;
	this.displayObject = displayObject;
};
$hxClasses["robotlegs.bender.extensions.mediatorMap.impl.MediatorManagerAddMediator"] = robotlegs.bender.extensions.mediatorMap.impl.MediatorManagerAddMediator;
robotlegs.bender.extensions.mediatorMap.impl.MediatorManagerAddMediator.__name__ = ["robotlegs","bender","extensions","mediatorMap","impl","MediatorManagerAddMediator"];
robotlegs.bender.extensions.mediatorMap.impl.MediatorManagerAddMediator.prototype = {
	displayObject: null
	,mediator: null
	,item: null
	,mapping: null
	,_factory: null
	,initializeMediator: null
	,creationComplete: function(e) {
		this.displayObject.removeEventListener(robotlegs.bender.extensions.mediatorMap.impl.MediatorManager.CREATION_COMPLETE,$bind(this,this.creationComplete));
		if(this._factory.getMediator(this.item,this.mapping) == this.mediator) this.initializeMediator(this.mediator,this.item);
	}
	,__class__: robotlegs.bender.extensions.mediatorMap.impl.MediatorManagerAddMediator
};
robotlegs.bender.extensions.viewManager = {};
robotlegs.bender.extensions.viewManager.api = {};
robotlegs.bender.extensions.viewManager.api.IViewHandler = function() { };
$hxClasses["robotlegs.bender.extensions.viewManager.api.IViewHandler"] = robotlegs.bender.extensions.viewManager.api.IViewHandler;
robotlegs.bender.extensions.viewManager.api.IViewHandler.__name__ = ["robotlegs","bender","extensions","viewManager","api","IViewHandler"];
robotlegs.bender.extensions.viewManager.api.IViewHandler.prototype = {
	handleView: null
	,__class__: robotlegs.bender.extensions.viewManager.api.IViewHandler
};
robotlegs.bender.extensions.mediatorMap.impl.MediatorMap = function(context) {
	this.NULL_UNMAPPER = new robotlegs.bender.extensions.mediatorMap.impl.NullMediatorUnmapper();
	this._mappers = new haxe.ds.StringMap();
	this._logger = context.getLogger(this);
	this._factory = new robotlegs.bender.extensions.mediatorMap.impl.MediatorFactory(context.get_injector());
	this._viewHandler = new robotlegs.bender.extensions.mediatorMap.impl.MediatorViewHandler(this._factory);
};
$hxClasses["robotlegs.bender.extensions.mediatorMap.impl.MediatorMap"] = robotlegs.bender.extensions.mediatorMap.impl.MediatorMap;
robotlegs.bender.extensions.mediatorMap.impl.MediatorMap.__name__ = ["robotlegs","bender","extensions","mediatorMap","impl","MediatorMap"];
robotlegs.bender.extensions.mediatorMap.impl.MediatorMap.__interfaces__ = [robotlegs.bender.extensions.viewManager.api.IViewHandler,robotlegs.bender.extensions.mediatorMap.api.IMediatorMap];
robotlegs.bender.extensions.mediatorMap.impl.MediatorMap.prototype = {
	_mappers: null
	,_logger: null
	,_factory: null
	,_viewHandler: null
	,NULL_UNMAPPER: null
	,mapMatcher: function(matcher) {
		if((function($this) {
			var $r;
			var key = matcher.createTypeFilter().get_descriptor();
			$r = $this._mappers.get(key);
			return $r;
		}(this)) == null) {
			var k = matcher.createTypeFilter().get_descriptor();
			var v = this.createMapper(matcher);
			this._mappers.set(k,v);
			v;
		}
		var key1 = matcher.createTypeFilter().get_descriptor();
		return this._mappers.get(key1);
	}
	,map: function(type) {
		return this.mapMatcher(new robotlegs.bender.extensions.matching.TypeMatcher().allOf([type]));
	}
	,unmapMatcher: function(matcher) {
		var val;
		var key = matcher.createTypeFilter().get_descriptor();
		val = this._mappers.get(key);
		if(val != null) return val; else return this.NULL_UNMAPPER;
	}
	,unmap: function(type) {
		return this.unmapMatcher(new robotlegs.bender.extensions.matching.TypeMatcher().allOf([type]));
	}
	,handleView: function(view,type) {
		this._viewHandler.handleView(view,type);
	}
	,mediate: function(item) {
		this._viewHandler.handleItem(item,Type.getClass(item));
	}
	,unmediate: function(item) {
		this._factory.removeMediators(item);
	}
	,unmediateAll: function() {
		this._factory.removeAllMediators();
	}
	,createMapper: function(matcher) {
		return new robotlegs.bender.extensions.mediatorMap.impl.MediatorMapper(matcher.createTypeFilter(),this._viewHandler,this._logger);
	}
	,__class__: robotlegs.bender.extensions.mediatorMap.impl.MediatorMap
};
robotlegs.bender.extensions.mediatorMap.impl.MediatorMapper = function(typeFilter,handler,logger) {
	this._mappings = new haxe.ds.StringMap();
	this._typeFilter = typeFilter;
	this._handler = handler;
	this._logger = logger;
};
$hxClasses["robotlegs.bender.extensions.mediatorMap.impl.MediatorMapper"] = robotlegs.bender.extensions.mediatorMap.impl.MediatorMapper;
robotlegs.bender.extensions.mediatorMap.impl.MediatorMapper.__name__ = ["robotlegs","bender","extensions","mediatorMap","impl","MediatorMapper"];
robotlegs.bender.extensions.mediatorMap.impl.MediatorMapper.__interfaces__ = [robotlegs.bender.extensions.mediatorMap.dsl.IMediatorUnmapper,robotlegs.bender.extensions.mediatorMap.dsl.IMediatorMapper];
robotlegs.bender.extensions.mediatorMap.impl.MediatorMapper.prototype = {
	_mappings: null
	,_typeFilter: null
	,_handler: null
	,_logger: null
	,toMediator: function(mediatorClass) {
		var mapping;
		var key = org.swiftsuspenders.utils.UID.classID(mediatorClass);
		mapping = this._mappings.get(key);
		if(mapping != null) return this.overwriteMapping(mapping); else return this.createMapping(mediatorClass);
	}
	,fromMediator: function(mediatorClass) {
		var mapping;
		var key = org.swiftsuspenders.utils.UID.classID(mediatorClass);
		mapping = this._mappings.get(key);
		if(mapping != null) this.deleteMapping(mapping);
	}
	,fromAll: function() {
		var $it0 = this._mappings.iterator();
		while( $it0.hasNext() ) {
			var mapping = $it0.next();
			this.deleteMapping(mapping);
		}
	}
	,createMapping: function(mediatorClass) {
		var mapping = new robotlegs.bender.extensions.mediatorMap.impl.MediatorMapping(this._typeFilter,mediatorClass);
		this._handler.addMapping(mapping);
		var k = org.swiftsuspenders.utils.UID.classID(mediatorClass);
		this._mappings.set(k,mapping);
		mapping;
		if(this._logger != null) this._logger.debug("{0} mapped to {1}",[this._typeFilter,mapping]);
		return mapping;
	}
	,deleteMapping: function(mapping) {
		this._handler.removeMapping(mapping);
		var key = org.swiftsuspenders.utils.UID.classID(mapping.get_mediatorClass());
		this._mappings.remove(key);
		if(this._logger != null) this._logger.debug("{0} unmapped from {1}",[this._typeFilter,mapping]);
	}
	,overwriteMapping: function(mapping) {
		if(this._logger != null) this._logger.warn("{0} already mapped to {1}\n" + "If you have overridden this mapping intentionally you can use \"unmap()\" " + "prior to your replacement mapping in order to avoid seeing this message.\n",[this._typeFilter,mapping]);
		this.deleteMapping(mapping);
		return this.createMapping(mapping.get_mediatorClass());
	}
	,__class__: robotlegs.bender.extensions.mediatorMap.impl.MediatorMapper
};
robotlegs.bender.extensions.mediatorMap.impl.MediatorMapping = function(matcher,mediatorClass) {
	this.hooks = new Array();
	this.guards = new Array();
	this.matcher = matcher;
	this.mediatorClass = mediatorClass;
};
$hxClasses["robotlegs.bender.extensions.mediatorMap.impl.MediatorMapping"] = robotlegs.bender.extensions.mediatorMap.impl.MediatorMapping;
robotlegs.bender.extensions.mediatorMap.impl.MediatorMapping.__name__ = ["robotlegs","bender","extensions","mediatorMap","impl","MediatorMapping"];
robotlegs.bender.extensions.mediatorMap.impl.MediatorMapping.__interfaces__ = [robotlegs.bender.extensions.mediatorMap.dsl.IMediatorConfigurator,robotlegs.bender.extensions.mediatorMap.api.IMediatorMapping];
robotlegs.bender.extensions.mediatorMap.impl.MediatorMapping.prototype = {
	matcher: null
	,get_matcher: function() {
		return this.matcher;
	}
	,mediatorClass: null
	,get_mediatorClass: function() {
		return this.mediatorClass;
	}
	,guards: null
	,get_guards: function() {
		return this.guards;
	}
	,hooks: null
	,get_hooks: function() {
		return this.hooks;
	}
	,autoRemoveEnabled: null
	,get_autoRemoveEnabled: function() {
		return this.autoRemoveEnabled;
	}
	,withGuards: function(guards) {
		var _g1 = 0;
		var _g = guards.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.get_guards().push(guards[i]);
		}
		return this;
	}
	,withHooks: function(hooks) {
		var _g1 = 0;
		var _g = hooks.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.get_hooks().push(hooks[i]);
		}
		return this;
	}
	,autoRemove: function(value) {
		if(value == null) value = true;
		this.autoRemoveEnabled = value;
		return this;
	}
	,__class__: robotlegs.bender.extensions.mediatorMap.impl.MediatorMapping
	,__properties__: {get_autoRemoveEnabled:"get_autoRemoveEnabled",get_hooks:"get_hooks",get_guards:"get_guards",get_mediatorClass:"get_mediatorClass",get_matcher:"get_matcher"}
};
robotlegs.bender.extensions.mediatorMap.impl.MediatorViewHandler = function(factory) {
	this._knownMappings = new haxe.ds.StringMap();
	this._mappings = [];
	this._factory = factory;
};
$hxClasses["robotlegs.bender.extensions.mediatorMap.impl.MediatorViewHandler"] = robotlegs.bender.extensions.mediatorMap.impl.MediatorViewHandler;
robotlegs.bender.extensions.mediatorMap.impl.MediatorViewHandler.__name__ = ["robotlegs","bender","extensions","mediatorMap","impl","MediatorViewHandler"];
robotlegs.bender.extensions.mediatorMap.impl.MediatorViewHandler.__interfaces__ = [robotlegs.bender.extensions.viewManager.api.IViewHandler];
robotlegs.bender.extensions.mediatorMap.impl.MediatorViewHandler.prototype = {
	_mappings: null
	,_knownMappings: null
	,_factory: null
	,addMapping: function(mapping) {
		var index = HxOverrides.indexOf(this._mappings,mapping,0);
		if(index > -1) return;
		this._mappings.push(mapping);
		this.flushCache();
	}
	,removeMapping: function(mapping) {
		var index = HxOverrides.indexOf(this._mappings,mapping,0);
		if(index == -1) return;
		this._mappings.splice(index,1);
		this.flushCache();
	}
	,handleView: function(view,type) {
		var interestedMappings = this.getInterestedMappingsFor(view,type);
		if(interestedMappings != null) this._factory.createMediators(view,type,interestedMappings);
	}
	,handleItem: function(item,type) {
		var interestedMappings = this.getInterestedMappingsFor(item,type);
		if(interestedMappings != null) this._factory.createMediators(item,type,interestedMappings);
	}
	,flushCache: function() {
		this._knownMappings = new haxe.ds.StringMap();
	}
	,getInterestedMappingsFor: function(item,type) {
		var mapping;
		var typeID = org.swiftsuspenders.utils.UID.classID(type);
		if(this._knownMappings.get(typeID) == false) return null;
		if(this._knownMappings.get(typeID) == null) {
			this._knownMappings.set(typeID,false);
			false;
			var _g1 = 0;
			var _g = this._mappings.length;
			while(_g1 < _g) {
				var i = _g1++;
				mapping = this._mappings[i];
				if(mapping.get_matcher().matches(item)) {
					if(this._knownMappings.get(typeID) == false) {
						var v = [];
						this._knownMappings.set(typeID,v);
						v;
					}
					this._knownMappings.get(typeID).push(mapping);
				}
			}
			if(this._knownMappings.get(typeID) == false) return null;
		}
		return js.Boot.__cast(this._knownMappings.get(typeID) , Array);
	}
	,__class__: robotlegs.bender.extensions.mediatorMap.impl.MediatorViewHandler
};
robotlegs.bender.extensions.mediatorMap.impl.NullMediatorUnmapper = function() {
};
$hxClasses["robotlegs.bender.extensions.mediatorMap.impl.NullMediatorUnmapper"] = robotlegs.bender.extensions.mediatorMap.impl.NullMediatorUnmapper;
robotlegs.bender.extensions.mediatorMap.impl.NullMediatorUnmapper.__name__ = ["robotlegs","bender","extensions","mediatorMap","impl","NullMediatorUnmapper"];
robotlegs.bender.extensions.mediatorMap.impl.NullMediatorUnmapper.__interfaces__ = [robotlegs.bender.extensions.mediatorMap.dsl.IMediatorUnmapper];
robotlegs.bender.extensions.mediatorMap.impl.NullMediatorUnmapper.prototype = {
	fromMediator: function(mediatorClass) {
	}
	,fromAll: function() {
	}
	,__class__: robotlegs.bender.extensions.mediatorMap.impl.NullMediatorUnmapper
};
robotlegs.bender.extensions.modularity = {};
robotlegs.bender.extensions.modularity.ModularityExtension = function(inherit,expose) {
	if(expose == null) expose = true;
	if(inherit == null) inherit = true;
	this._expose = false;
	this._inherit = false;
	this._inherit = inherit;
	this._expose = expose;
};
$hxClasses["robotlegs.bender.extensions.modularity.ModularityExtension"] = robotlegs.bender.extensions.modularity.ModularityExtension;
robotlegs.bender.extensions.modularity.ModularityExtension.__name__ = ["robotlegs","bender","extensions","modularity","ModularityExtension"];
robotlegs.bender.extensions.modularity.ModularityExtension.__interfaces__ = [robotlegs.bender.framework.api.IExtension];
robotlegs.bender.extensions.modularity.ModularityExtension.prototype = {
	_context: null
	,_injector: null
	,_logger: null
	,_inherit: null
	,_expose: null
	,_contextView: null
	,extend: function(context) {
		context.beforeInitializing($bind(this,this.beforeInitializing));
		this._context = context;
		this._injector = context.get_injector();
		this._logger = context.getLogger(this);
		this._context.addConfigHandler(robotlegs.bender.extensions.matching.InstanceOfType.call(robotlegs.bender.extensions.contextView.ContextView),$bind(this,this.handleContextView));
		this._injector.map(robotlegs.bender.extensions.modularity.api.IModuleConnector).toSingleton(robotlegs.bender.extensions.modularity.impl.ModuleConnector);
	}
	,beforeInitializing: function() {
		if(this._contextView == null) this._logger.error("Context has no ContextView, and ModularityExtension doesn't allow this.");
	}
	,handleContextView: function(contextView) {
		this._contextView = contextView.view;
		if(this._expose) this.configureExistenceWatcher();
		if(this._inherit) this.configureExistenceBroadcaster();
	}
	,configureExistenceWatcher: function() {
		if(this._injector.hasDirectMapping(robotlegs.bender.extensions.viewManager.api.IViewManager)) {
			this._logger.debug("Context has a ViewManager. Configuring view manager based context existence watcher...");
			var viewManager = this._injector.getInstance(robotlegs.bender.extensions.viewManager.api.IViewManager);
			new robotlegs.bender.extensions.modularity.impl.ViewManagerBasedExistenceWatcher(this._context,viewManager);
		} else {
			this._logger.debug("Context has a ContextView. Configuring context view based context existence watcher...");
			new robotlegs.bender.extensions.modularity.impl.ContextViewBasedExistenceWatcher(this._context,this._contextView);
		}
	}
	,configureExistenceBroadcaster: function() {
		if(this._contextView.stage != null) this.broadcastContextExistence(); else {
			this._logger.debug("Context view is not yet on stage. Waiting...");
			this._contextView.addEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.onAddedToStage));
		}
	}
	,onAddedToStage: function(event) {
		this._logger.debug("Context view is now on stage. Continuing...");
		this._contextView.removeEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.onAddedToStage));
		this.broadcastContextExistence();
	}
	,broadcastContextExistence: function() {
		this._logger.debug("Context configured to inherit. Broadcasting existence event...");
		this._contextView.dispatchEvent(new robotlegs.bender.extensions.modularity.impl.ModularContextEvent(robotlegs.bender.extensions.modularity.impl.ModularContextEvent.CONTEXT_ADD,this._context));
	}
	,__class__: robotlegs.bender.extensions.modularity.ModularityExtension
};
robotlegs.bender.extensions.modularity.api = {};
robotlegs.bender.extensions.modularity.api.IModuleConnector = function() { };
$hxClasses["robotlegs.bender.extensions.modularity.api.IModuleConnector"] = robotlegs.bender.extensions.modularity.api.IModuleConnector;
robotlegs.bender.extensions.modularity.api.IModuleConnector.__name__ = ["robotlegs","bender","extensions","modularity","api","IModuleConnector"];
robotlegs.bender.extensions.modularity.api.IModuleConnector.prototype = {
	onChannel: null
	,onDefaultChannel: null
	,__class__: robotlegs.bender.extensions.modularity.api.IModuleConnector
};
robotlegs.bender.extensions.modularity.dsl = {};
robotlegs.bender.extensions.modularity.dsl.IModuleConnectionAction = function() { };
$hxClasses["robotlegs.bender.extensions.modularity.dsl.IModuleConnectionAction"] = robotlegs.bender.extensions.modularity.dsl.IModuleConnectionAction;
robotlegs.bender.extensions.modularity.dsl.IModuleConnectionAction.__name__ = ["robotlegs","bender","extensions","modularity","dsl","IModuleConnectionAction"];
robotlegs.bender.extensions.modularity.dsl.IModuleConnectionAction.prototype = {
	relayEvent: null
	,receiveEvent: null
	,suspend: null
	,resume: null
	,__class__: robotlegs.bender.extensions.modularity.dsl.IModuleConnectionAction
};
robotlegs.bender.extensions.modularity.impl = {};
robotlegs.bender.extensions.modularity.impl.ContextViewBasedExistenceWatcher = function(context,contextView) {
	this._logger = context.getLogger(this);
	this._contextView = contextView;
	this._context = context;
	this._context.whenDestroying($bind(this,this.destroy));
	this.init();
};
$hxClasses["robotlegs.bender.extensions.modularity.impl.ContextViewBasedExistenceWatcher"] = robotlegs.bender.extensions.modularity.impl.ContextViewBasedExistenceWatcher;
robotlegs.bender.extensions.modularity.impl.ContextViewBasedExistenceWatcher.__name__ = ["robotlegs","bender","extensions","modularity","impl","ContextViewBasedExistenceWatcher"];
robotlegs.bender.extensions.modularity.impl.ContextViewBasedExistenceWatcher.prototype = {
	_logger: null
	,_contextView: null
	,_context: null
	,init: function() {
		this._logger.debug("Listening for context existence events on contextView {0}",[this._contextView]);
		this._contextView.addEventListener(robotlegs.bender.extensions.modularity.impl.ModularContextEvent.CONTEXT_ADD,$bind(this,this.onContextAdd));
	}
	,destroy: function() {
		this._logger.debug("Removing modular context existence event listener from contextView {0}",[this._contextView]);
		this._contextView.removeEventListener(robotlegs.bender.extensions.modularity.impl.ModularContextEvent.CONTEXT_ADD,$bind(this,this.onContextAdd));
	}
	,onContextAdd: function(event) {
		if(event.context != this._context) {
			event.stopImmediatePropagation();
			this._logger.debug("Context existence event caught. Configuring child context {0}",[event.context]);
			if(event.context != null) this._context.addChild(event.context);
		}
	}
	,__class__: robotlegs.bender.extensions.modularity.impl.ContextViewBasedExistenceWatcher
};
robotlegs.bender.extensions.modularity.impl.ModularContextEvent = function(type,context) {
	openfl.events.Event.call(this,type,true,true);
	this._context = context;
};
$hxClasses["robotlegs.bender.extensions.modularity.impl.ModularContextEvent"] = robotlegs.bender.extensions.modularity.impl.ModularContextEvent;
robotlegs.bender.extensions.modularity.impl.ModularContextEvent.__name__ = ["robotlegs","bender","extensions","modularity","impl","ModularContextEvent"];
robotlegs.bender.extensions.modularity.impl.ModularContextEvent.__super__ = openfl.events.Event;
robotlegs.bender.extensions.modularity.impl.ModularContextEvent.prototype = $extend(openfl.events.Event.prototype,{
	_context: null
	,context: null
	,clone: function() {
		return new robotlegs.bender.extensions.modularity.impl.ModularContextEvent(this.type,this.context);
	}
	,toString: function() {
		return "[ModularContextEvent, context]";
	}
	,__class__: robotlegs.bender.extensions.modularity.impl.ModularContextEvent
});
robotlegs.bender.extensions.modularity.impl.ModuleConnectionConfigurator = function(localDispatcher,channelDispatcher) {
	this._localToChannelRelay = new robotlegs.bender.extensions.eventDispatcher.impl.EventRelay(localDispatcher,channelDispatcher).start();
	this._channelToLocalRelay = new robotlegs.bender.extensions.eventDispatcher.impl.EventRelay(channelDispatcher,localDispatcher).start();
};
$hxClasses["robotlegs.bender.extensions.modularity.impl.ModuleConnectionConfigurator"] = robotlegs.bender.extensions.modularity.impl.ModuleConnectionConfigurator;
robotlegs.bender.extensions.modularity.impl.ModuleConnectionConfigurator.__name__ = ["robotlegs","bender","extensions","modularity","impl","ModuleConnectionConfigurator"];
robotlegs.bender.extensions.modularity.impl.ModuleConnectionConfigurator.__interfaces__ = [robotlegs.bender.extensions.modularity.dsl.IModuleConnectionAction];
robotlegs.bender.extensions.modularity.impl.ModuleConnectionConfigurator.prototype = {
	_channelToLocalRelay: null
	,_localToChannelRelay: null
	,relayEvent: function(eventType) {
		this._localToChannelRelay.addType(eventType);
		return this;
	}
	,receiveEvent: function(eventType) {
		this._channelToLocalRelay.addType(eventType);
		return this;
	}
	,suspend: function() {
		this._channelToLocalRelay.stop();
		this._localToChannelRelay.stop();
	}
	,resume: function() {
		this._channelToLocalRelay.start();
		this._localToChannelRelay.start();
	}
	,destroy: function() {
		this._localToChannelRelay.stop();
		this._localToChannelRelay = null;
		this._channelToLocalRelay.stop();
		this._channelToLocalRelay = null;
	}
	,__class__: robotlegs.bender.extensions.modularity.impl.ModuleConnectionConfigurator
};
robotlegs.bender.extensions.modularity.impl.ModuleConnector = function(context) {
	var injector = context.get_injector();
	this._rootInjector = this.getRootInjector(injector);
	this._localDispatcher = injector.getInstance(openfl.events.IEventDispatcher);
	context.whenDestroying($bind(this,this.destroy));
};
$hxClasses["robotlegs.bender.extensions.modularity.impl.ModuleConnector"] = robotlegs.bender.extensions.modularity.impl.ModuleConnector;
robotlegs.bender.extensions.modularity.impl.ModuleConnector.__name__ = ["robotlegs","bender","extensions","modularity","impl","ModuleConnector"];
robotlegs.bender.extensions.modularity.impl.ModuleConnector.__interfaces__ = [robotlegs.bender.extensions.modularity.api.IModuleConnector];
robotlegs.bender.extensions.modularity.impl.ModuleConnector.prototype = {
	_rootInjector: null
	,_localDispatcher: null
	,_configuratorsByChannel: null
	,onChannel: function(channelId) {
		return this.getOrCreateConfigurator(channelId);
	}
	,onDefaultChannel: function() {
		return this.getOrCreateConfigurator("global");
	}
	,destroy: function() {
		var $it0 = this._configuratorsByChannel.iterator();
		while( $it0.hasNext() ) {
			var channelId = $it0.next();
			var id;
			id = js.Boot.__cast(channelId , String);
			var configurator = this._configuratorsByChannel.get(id);
			configurator.destroy();
			this._configuratorsByChannel.set(id,null);
			null;
		}
		this._configuratorsByChannel = null;
		this._localDispatcher = null;
		this._rootInjector = null;
	}
	,getOrCreateConfigurator: function(channelId) {
		if(!org.swiftsuspenders.utils.CallProxy.hasField(this._configuratorsByChannel,channelId)) Reflect.setField(this._configuratorsByChannel,channelId,this.createConfigurator(channelId));
		return Reflect.getProperty(this._configuratorsByChannel,channelId);
	}
	,createConfigurator: function(channelId) {
		if(this._rootInjector.hasMapping(openfl.events.IEventDispatcher,channelId)) this._rootInjector.map(openfl.events.IEventDispatcher,channelId).toValue(new openfl.events.EventDispatcher());
		return new robotlegs.bender.extensions.modularity.impl.ModuleConnectionConfigurator(this._localDispatcher,this._rootInjector.getInstance(openfl.events.IEventDispatcher,channelId));
	}
	,getRootInjector: function(injector) {
		while(injector.get_parent() != null) injector = injector.get_parent();
		return injector;
	}
	,__class__: robotlegs.bender.extensions.modularity.impl.ModuleConnector
};
robotlegs.bender.extensions.modularity.impl.ViewManagerBasedExistenceWatcher = function(context,viewManager) {
	this._logger = context.getLogger(this);
	this._viewManager = viewManager;
	this._context = context;
	this._context.whenDestroying($bind(this,this.destroy));
	this.init();
};
$hxClasses["robotlegs.bender.extensions.modularity.impl.ViewManagerBasedExistenceWatcher"] = robotlegs.bender.extensions.modularity.impl.ViewManagerBasedExistenceWatcher;
robotlegs.bender.extensions.modularity.impl.ViewManagerBasedExistenceWatcher.__name__ = ["robotlegs","bender","extensions","modularity","impl","ViewManagerBasedExistenceWatcher"];
robotlegs.bender.extensions.modularity.impl.ViewManagerBasedExistenceWatcher.prototype = {
	_logger: null
	,_viewManager: null
	,_context: null
	,init: function() {
		var _g = 0;
		var _g1 = this._viewManager.get_containers();
		while(_g < _g1.length) {
			var container = _g1[_g];
			++_g;
			this._logger.debug("Adding context existence event listener to container {0}",[container]);
			container.addEventListener(robotlegs.bender.extensions.modularity.impl.ModularContextEvent.CONTEXT_ADD,$bind(this,this.onContextAdd));
		}
		this._viewManager.addEventListener(robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent.CONTAINER_ADD,$bind(this,this.onContainerAdd));
		this._viewManager.addEventListener(robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent.CONTAINER_REMOVE,$bind(this,this.onContainerRemove));
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this._viewManager.get_containers();
		while(_g < _g1.length) {
			var container = _g1[_g];
			++_g;
			this._logger.debug("Removing context existence event listener from container {0}",[container]);
			container.removeEventListener(robotlegs.bender.extensions.modularity.impl.ModularContextEvent.CONTEXT_ADD,$bind(this,this.onContextAdd));
		}
		this._viewManager.removeEventListener(robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent.CONTAINER_ADD,$bind(this,this.onContainerAdd));
		this._viewManager.removeEventListener(robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent.CONTAINER_REMOVE,$bind(this,this.onContainerRemove));
	}
	,onContainerAdd: function(event) {
		this._logger.debug("Adding context existence event listener to container {0}",[event.container]);
		event.container.addEventListener(robotlegs.bender.extensions.modularity.impl.ModularContextEvent.CONTEXT_ADD,$bind(this,this.onContextAdd));
	}
	,onContainerRemove: function(event) {
		this._logger.debug("Removing context existence event listener from container {0}",[event.container]);
		event.container.removeEventListener(robotlegs.bender.extensions.modularity.impl.ModularContextEvent.CONTEXT_ADD,$bind(this,this.onContextAdd));
	}
	,onContextAdd: function(event) {
		if(event.context != this._context) {
			event.stopImmediatePropagation();
			this._logger.debug("Context existence event caught. Configuring child context {0}",[event.context]);
			this._context.addChild(event.context);
		}
	}
	,__class__: robotlegs.bender.extensions.modularity.impl.ViewManagerBasedExistenceWatcher
};
robotlegs.bender.extensions.signalCommandMap = {};
robotlegs.bender.extensions.signalCommandMap.SignalCommandMapExtension = function() { };
$hxClasses["robotlegs.bender.extensions.signalCommandMap.SignalCommandMapExtension"] = robotlegs.bender.extensions.signalCommandMap.SignalCommandMapExtension;
robotlegs.bender.extensions.signalCommandMap.SignalCommandMapExtension.__name__ = ["robotlegs","bender","extensions","signalCommandMap","SignalCommandMapExtension"];
robotlegs.bender.extensions.signalCommandMap.SignalCommandMapExtension.__interfaces__ = [robotlegs.bender.framework.api.IExtension];
robotlegs.bender.extensions.signalCommandMap.SignalCommandMapExtension.prototype = {
	_uid: null
	,SignalCommandMapExtension: function() {
	}
	,extend: function(context) {
		this._uid = robotlegs.bender.framework.impl.UID.create($bind(this,this.SignalCommandMapExtension));
		context.get_injector().map(robotlegs.bender.extensions.signalCommandMap.api.ISignalCommandMap).toSingleton(robotlegs.bender.extensions.signalCommandMap.impl.SignalCommandMap);
	}
	,toString: function() {
		return this._uid;
	}
	,__class__: robotlegs.bender.extensions.signalCommandMap.SignalCommandMapExtension
};
robotlegs.bender.extensions.signalCommandMap.api = {};
robotlegs.bender.extensions.signalCommandMap.api.ISignalCommandMap = function() { };
$hxClasses["robotlegs.bender.extensions.signalCommandMap.api.ISignalCommandMap"] = robotlegs.bender.extensions.signalCommandMap.api.ISignalCommandMap;
robotlegs.bender.extensions.signalCommandMap.api.ISignalCommandMap.__name__ = ["robotlegs","bender","extensions","signalCommandMap","api","ISignalCommandMap"];
robotlegs.bender.extensions.signalCommandMap.api.ISignalCommandMap.prototype = {
	map: null
	,unmap: null
	,addMappingProcessor: null
	,__class__: robotlegs.bender.extensions.signalCommandMap.api.ISignalCommandMap
};
robotlegs.bender.extensions.signalCommandMap.impl = {};
robotlegs.bender.extensions.signalCommandMap.impl.SignalCommandMap = function(context) {
	this._mappingProcessors = [];
	this._injector = context.get_injector();
	this._logger = context.getLogger(this);
	this._triggerMap = new robotlegs.bender.extensions.commandCenter.impl.CommandTriggerMap($bind(this,this.getKey),$bind(this,this.createTrigger));
};
$hxClasses["robotlegs.bender.extensions.signalCommandMap.impl.SignalCommandMap"] = robotlegs.bender.extensions.signalCommandMap.impl.SignalCommandMap;
robotlegs.bender.extensions.signalCommandMap.impl.SignalCommandMap.__name__ = ["robotlegs","bender","extensions","signalCommandMap","impl","SignalCommandMap"];
robotlegs.bender.extensions.signalCommandMap.impl.SignalCommandMap.__interfaces__ = [robotlegs.bender.extensions.signalCommandMap.api.ISignalCommandMap];
robotlegs.bender.extensions.signalCommandMap.impl.SignalCommandMap.prototype = {
	_mappingProcessors: null
	,_injector: null
	,_triggerMap: null
	,_logger: null
	,map: function(signalClass) {
		return this.getTrigger(signalClass).createMapper();
	}
	,unmap: function(signalClass) {
		return this.getTrigger(signalClass).createMapper();
	}
	,addMappingProcessor: function(handler) {
		if((function($this) {
			var $r;
			var x = handler;
			$r = HxOverrides.indexOf($this._mappingProcessors,x,0);
			return $r;
		}(this)) == -1) this._mappingProcessors.push(handler);
		return this;
	}
	,getTrigger: function(signalClass) {
		return js.Boot.__cast(this._triggerMap.getTrigger([signalClass]) , robotlegs.bender.extensions.signalCommandMap.impl.SignalCommandTrigger);
	}
	,getKey: function(signalClass) {
		return "" + Std.string(signalClass);
	}
	,createTrigger: function(signalClass) {
		return new robotlegs.bender.extensions.signalCommandMap.impl.SignalCommandTrigger(this._injector,signalClass,this._mappingProcessors);
	}
	,__class__: robotlegs.bender.extensions.signalCommandMap.impl.SignalCommandMap
};
robotlegs.bender.extensions.signalCommandMap.impl.SignalCommandTrigger = function(injector,signalClass,processors,logger) {
	this._injector = injector;
	this._signalClass = signalClass;
	this._mappings = new robotlegs.bender.extensions.commandCenter.impl.CommandMappingList(this,processors,logger);
	this._executor = new robotlegs.bender.extensions.commandCenter.impl.CommandExecutor(injector,($_=this._mappings,$bind($_,$_.removeMapping)));
};
$hxClasses["robotlegs.bender.extensions.signalCommandMap.impl.SignalCommandTrigger"] = robotlegs.bender.extensions.signalCommandMap.impl.SignalCommandTrigger;
robotlegs.bender.extensions.signalCommandMap.impl.SignalCommandTrigger.__name__ = ["robotlegs","bender","extensions","signalCommandMap","impl","SignalCommandTrigger"];
robotlegs.bender.extensions.signalCommandMap.impl.SignalCommandTrigger.__interfaces__ = [robotlegs.bender.extensions.commandCenter.api.ICommandTrigger];
robotlegs.bender.extensions.signalCommandMap.impl.SignalCommandTrigger.prototype = {
	_signalClass: null
	,_signal: null
	,_injector: null
	,_mappings: null
	,_executor: null
	,createMapper: function() {
		return new robotlegs.bender.extensions.commandCenter.impl.CommandMapper(this._mappings);
	}
	,activate: function() {
		if(!this._injector.hasMapping(this._signalClass)) this._injector.map(this._signalClass).asSingleton();
		this._signal = this._injector.getInstance(this._signalClass);
		this._signal.add($bind(this,this.routePayloadToCommands));
	}
	,deactivate: function() {
	}
	,toString: function() {
		return js.Boot.__cast(this._signalClass , String);
	}
	,routePayloadToCommands: function() {
		var payload = new robotlegs.bender.extensions.commandCenter.api.CommandPayload(null,this._signal.valueClasses);
		this._executor.executeCommands(this._mappings.getList(),payload);
	}
	,__class__: robotlegs.bender.extensions.signalCommandMap.impl.SignalCommandTrigger
};
robotlegs.bender.extensions.stage3D.away3d.AwayIntegrationExtension = function() { };
$hxClasses["robotlegs.bender.extensions.stage3D.away3d.AwayIntegrationExtension"] = robotlegs.bender.extensions.stage3D.away3d.AwayIntegrationExtension;
robotlegs.bender.extensions.stage3D.away3d.AwayIntegrationExtension.__name__ = ["robotlegs","bender","extensions","stage3D","away3d","AwayIntegrationExtension"];
robotlegs.bender.extensions.stage3D.away3d.AwayIntegrationExtension.__interfaces__ = [robotlegs.bender.framework.api.IExtension];
robotlegs.bender.extensions.stage3D.away3d.AwayIntegrationExtension.prototype = {
	_uid: null
	,_context: null
	,_logger: null
	,AwayIntegrationExtension: function() {
	}
	,extend: function(context) {
		this._uid = robotlegs.bender.framework.impl.UID.create($bind(this,this.AwayIntegrationExtension));
		this._context = context;
		this._logger = context.getLogger(this);
		this._context.get_injector().map(robotlegs.bender.extensions.stage3D.away3d.impl.Away3DInitializerAvailable).asSingleton();
		this._context.addConfigHandler(robotlegs.bender.extensions.matching.InstanceOfType.call(robotlegs.bender.extensions.stage3D.away3d.impl.AwayCollection),$bind(this,this.handleAwayCollection));
	}
	,toString: function() {
		return this._uid;
	}
	,handleAwayCollection: function(awayCollection) {
		this._logger.debug("Mapping provided View3D as Away3D contextView...");
		this._context.get_injector().map(robotlegs.bender.extensions.stage3D.away3d.impl.AwayCollection).toValue(awayCollection);
		var key;
		var $it0 = awayCollection.items.iterator();
		while( $it0.hasNext() ) {
			var key1 = $it0.next();
			var view3D = awayCollection.items.get(key1);
			this._context.get_injector().map(away3d.containers.View3D,key1).toValue(view3D);
		}
		this._context.get_injector().map(robotlegs.bender.extensions.stage3D.away3d.api.IAway3DViewMap).toSingleton(robotlegs.bender.extensions.stage3D.away3d.impl.Away3DViewMap);
		this._context.get_injector().getInstance(robotlegs.bender.extensions.stage3D.away3d.api.IAway3DViewMap);
	}
	,__class__: robotlegs.bender.extensions.stage3D.away3d.AwayIntegrationExtension
};
robotlegs.bender.extensions.stage3D.away3d.AwayStageSyncExtension = function() { };
$hxClasses["robotlegs.bender.extensions.stage3D.away3d.AwayStageSyncExtension"] = robotlegs.bender.extensions.stage3D.away3d.AwayStageSyncExtension;
robotlegs.bender.extensions.stage3D.away3d.AwayStageSyncExtension.__name__ = ["robotlegs","bender","extensions","stage3D","away3d","AwayStageSyncExtension"];
robotlegs.bender.extensions.stage3D.away3d.AwayStageSyncExtension.__interfaces__ = [robotlegs.bender.framework.api.IExtension];
robotlegs.bender.extensions.stage3D.away3d.AwayStageSyncExtension.prototype = {
	_uid: null
	,_context: null
	,_contextView: null
	,_logger: null
	,AwayStageSyncExtension: function() {
	}
	,extend: function(context) {
		this._uid = robotlegs.bender.framework.impl.UID.create($bind(this,this.AwayStageSyncExtension));
		this._context = context;
		this._logger = context.getLogger(this);
		this._context.addConfigHandler(robotlegs.bender.extensions.matching.InstanceOfType.call(robotlegs.bender.extensions.contextView.ContextView),$bind(this,this.handleContextView));
	}
	,toString: function() {
		return this._uid;
	}
	,handleContextView: function(contextView) {
		if(this._contextView != null) {
			this._logger.warn("A contextView has already been set, ignoring {0}",[contextView.view]);
			return;
		}
		this._contextView = contextView.view;
		if(this._contextView.stage != null) this.initializeContext(); else {
			this._logger.debug("Context view is not yet on stage. Waiting...");
			this._contextView.addEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.onAddedToStage));
		}
	}
	,onAddedToStage: function(event) {
		this._logger.debug("Context view added on stage.");
		this._contextView.removeEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.onAddedToStage));
		this._contextView.addEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.onRemovedFromStage));
		this.initializeContext();
	}
	,onRemovedFromStage: function(event) {
		this._logger.debug("Context view has left the stage. Destroying context...");
		this._contextView.removeEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.onRemovedFromStage));
		this._context.destroy();
	}
	,initializeContext: function() {
		this._logger.debug("Away3D context views are now on stage. Initializing context...");
		this._context.initialize();
	}
	,__class__: robotlegs.bender.extensions.stage3D.away3d.AwayStageSyncExtension
};
robotlegs.bender.extensions.stage3D.away3d.api = {};
robotlegs.bender.extensions.stage3D.away3d.api.IAway3DViewMap = function() { };
$hxClasses["robotlegs.bender.extensions.stage3D.away3d.api.IAway3DViewMap"] = robotlegs.bender.extensions.stage3D.away3d.api.IAway3DViewMap;
robotlegs.bender.extensions.stage3D.away3d.api.IAway3DViewMap.__name__ = ["robotlegs","bender","extensions","stage3D","away3d","api","IAway3DViewMap"];
robotlegs.bender.extensions.stage3D.away3d.api.IAway3DViewMap.prototype = {
	addAway3DView: null
	,removeAway3DView: null
	,__class__: robotlegs.bender.extensions.stage3D.away3d.api.IAway3DViewMap
};
robotlegs.bender.extensions.stage3D.base.impl = {};
robotlegs.bender.extensions.stage3D.base.impl.BaseInitializer = function() {
	this._debug = false;
};
$hxClasses["robotlegs.bender.extensions.stage3D.base.impl.BaseInitializer"] = robotlegs.bender.extensions.stage3D.base.impl.BaseInitializer;
robotlegs.bender.extensions.stage3D.base.impl.BaseInitializer.__name__ = ["robotlegs","bender","extensions","stage3D","base","impl","BaseInitializer"];
robotlegs.bender.extensions.stage3D.base.impl.BaseInitializer.prototype = {
	renderer: null
	,contextView: null
	,context: null
	,_debug: null
	,BaseInitializer: function() {
	}
	,init: function(renderer,contextView,context) {
		this.renderer = renderer;
		this.contextView = contextView;
		this.context = context;
	}
	,addLayer: function(ViewClass,index,id) {
	}
	,autoID: function(ClassName) {
		return "" + Math.random() * 1000;
	}
	,set_debug: function(value) {
		this._debug = value;
		return value;
	}
	,get_debug: function() {
		return this._debug;
	}
	,__class__: robotlegs.bender.extensions.stage3D.base.impl.BaseInitializer
	,__properties__: {set_debug:"set_debug",get_debug:"get_debug"}
};
robotlegs.bender.extensions.stage3D.away3d.impl.Away3DInitializer = function() {
	robotlegs.bender.extensions.stage3D.base.impl.BaseInitializer.call(this);
};
$hxClasses["robotlegs.bender.extensions.stage3D.away3d.impl.Away3DInitializer"] = robotlegs.bender.extensions.stage3D.away3d.impl.Away3DInitializer;
robotlegs.bender.extensions.stage3D.away3d.impl.Away3DInitializer.__name__ = ["robotlegs","bender","extensions","stage3D","away3d","impl","Away3DInitializer"];
robotlegs.bender.extensions.stage3D.away3d.impl.Away3DInitializer.__super__ = robotlegs.bender.extensions.stage3D.base.impl.BaseInitializer;
robotlegs.bender.extensions.stage3D.away3d.impl.Away3DInitializer.prototype = $extend(robotlegs.bender.extensions.stage3D.base.impl.BaseInitializer.prototype,{
	addLayer: function(ViewClass,index,id) {
		if(id == "") id = this.autoID(ViewClass);
		var awayLayer = org.swiftsuspenders.utils.CallProxy.createInstance(ViewClass,[this.renderer.get_profile()]);
		awayLayer.set_iRenderer(this.renderer);
		var awayCollection = new robotlegs.bender.extensions.stage3D.away3d.impl.AwayCollection([awayLayer,id]);
		this.context.configure([awayCollection]);
		this.contextView.view.addChild(awayLayer);
		if(index == -1) this.renderer.addLayer(awayLayer); else this.renderer.addLayerAt(awayLayer,index);
	}
	,__class__: robotlegs.bender.extensions.stage3D.away3d.impl.Away3DInitializer
});
robotlegs.bender.extensions.stage3D.away3d.impl.Away3DInitializerAvailable = function() { };
$hxClasses["robotlegs.bender.extensions.stage3D.away3d.impl.Away3DInitializerAvailable"] = robotlegs.bender.extensions.stage3D.away3d.impl.Away3DInitializerAvailable;
robotlegs.bender.extensions.stage3D.away3d.impl.Away3DInitializerAvailable.__name__ = ["robotlegs","bender","extensions","stage3D","away3d","impl","Away3DInitializerAvailable"];
robotlegs.bender.extensions.stage3D.away3d.impl.Away3DInitializerAvailable.prototype = {
	Away3DInitializerAvailable: function() {
	}
	,__class__: robotlegs.bender.extensions.stage3D.away3d.impl.Away3DInitializerAvailable
};
robotlegs.bender.extensions.stage3D.away3d.impl.Away3DViewMap = function() { };
$hxClasses["robotlegs.bender.extensions.stage3D.away3d.impl.Away3DViewMap"] = robotlegs.bender.extensions.stage3D.away3d.impl.Away3DViewMap;
robotlegs.bender.extensions.stage3D.away3d.impl.Away3DViewMap.__name__ = ["robotlegs","bender","extensions","stage3D","away3d","impl","Away3DViewMap"];
robotlegs.bender.extensions.stage3D.away3d.impl.Away3DViewMap.__interfaces__ = [robotlegs.bender.extensions.stage3D.away3d.api.IAway3DViewMap];
robotlegs.bender.extensions.stage3D.away3d.impl.Away3DViewMap.prototype = {
	awayCollection: null
	,mediatorMap: null
	,Away3DViewMap: function() {
	}
	,init: function() {
		var $it0 = this.awayCollection.items.iterator();
		while( $it0.hasNext() ) {
			var v = $it0.next();
			if(v == null) continue;
			var view3D = v;
			view3D.get_scene().addEventListener(away3d.events.Scene3DEvent.ADDED_TO_SCENE,$bind(this,this.onSceneAdded));
			view3D.get_scene().addEventListener(away3d.events.Scene3DEvent.REMOVED_FROM_SCENE,$bind(this,this.onSceneRemoved));
			this.addAway3DView(view3D.get_scene());
		}
	}
	,addAway3DView: function(view) {
		if(this.validateView(view)) {
			if(js.Boot.__instanceof(view,robotlegs.bender.extensions.stage3D.base.api.IDisplayObject)) {
				var displayObject = view;
				displayObject.init();
			}
			this.mediatorMap.mediate(view);
		} else throw new openfl.errors.Error("Not sure what to do with this view type..");
	}
	,removeAway3DView: function(view) {
		if(js.Boot.__instanceof(view,robotlegs.bender.extensions.stage3D.base.api.IDisplayObject)) {
			var displayObject = view;
			displayObject.destroy();
		}
		this.mediatorMap.unmediate(view);
	}
	,validateView: function(view) {
		if(js.Boot.__instanceof(view,away3d.containers.Scene3D) || js.Boot.__instanceof(view,away3d.containers.ObjectContainer3D)) return true; else return false;
	}
	,onSceneAdded: function(event) {
		this.addAway3DView(event.objectContainer3D);
	}
	,onSceneRemoved: function(event) {
		this.removeAway3DView(event.objectContainer3D);
	}
	,__class__: robotlegs.bender.extensions.stage3D.away3d.impl.Away3DViewMap
};
robotlegs.bender.extensions.stage3D.base.impl.BaseCollection = function() {
	this.items = new haxe.ds.StringMap();
	this._length = 0;
};
$hxClasses["robotlegs.bender.extensions.stage3D.base.impl.BaseCollection"] = robotlegs.bender.extensions.stage3D.base.impl.BaseCollection;
robotlegs.bender.extensions.stage3D.base.impl.BaseCollection.__name__ = ["robotlegs","bender","extensions","stage3D","base","impl","BaseCollection"];
robotlegs.bender.extensions.stage3D.base.impl.BaseCollection.prototype = {
	_length: null
	,items: null
	,length: null
	,get_length: function() {
		return this._length;
	}
	,__class__: robotlegs.bender.extensions.stage3D.base.impl.BaseCollection
	,__properties__: {get_length:"get_length"}
};
robotlegs.bender.extensions.stage3D.away3d.impl.AwayCollection = function(awayCollectionData) {
	this.view3Ds = new Array();
	robotlegs.bender.extensions.stage3D.base.impl.BaseCollection.call(this);
	if(awayCollectionData != null) {
		var view3D = awayCollectionData[0];
		var viewID = awayCollectionData[1];
		this.addItem(view3D,viewID);
	}
};
$hxClasses["robotlegs.bender.extensions.stage3D.away3d.impl.AwayCollection"] = robotlegs.bender.extensions.stage3D.away3d.impl.AwayCollection;
robotlegs.bender.extensions.stage3D.away3d.impl.AwayCollection.__name__ = ["robotlegs","bender","extensions","stage3D","away3d","impl","AwayCollection"];
robotlegs.bender.extensions.stage3D.away3d.impl.AwayCollection.__super__ = robotlegs.bender.extensions.stage3D.base.impl.BaseCollection;
robotlegs.bender.extensions.stage3D.away3d.impl.AwayCollection.prototype = $extend(robotlegs.bender.extensions.stage3D.base.impl.BaseCollection.prototype,{
	view3Ds: null
	,addItem: function(view3D,name) {
		this.view3Ds.push(view3D);
		if(this.items.get(name) == null) {
			this.items.set(name,view3D);
			view3D;
			this._length++;
		}
		return this._length;
	}
	,removeItem: function(name) {
		var result = this.getItem(name);
		var _g1 = 0;
		var _g = this.view3Ds.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.view3Ds[i] == result) this.view3Ds.splice(i,1);
		}
		if(result != null) {
			this.items.remove(name);
			this._length--;
		}
		return result;
	}
	,getItem: function(name) {
		if(this.items.get(name) == null) return null;
		var view3D = this.items.get(name);
		return view3D;
	}
	,__class__: robotlegs.bender.extensions.stage3D.away3d.impl.AwayCollection
});
robotlegs.bender.extensions.stage3D.base.Stage3DStackExtension = function() { };
$hxClasses["robotlegs.bender.extensions.stage3D.base.Stage3DStackExtension"] = robotlegs.bender.extensions.stage3D.base.Stage3DStackExtension;
robotlegs.bender.extensions.stage3D.base.Stage3DStackExtension.__name__ = ["robotlegs","bender","extensions","stage3D","base","Stage3DStackExtension"];
robotlegs.bender.extensions.stage3D.base.Stage3DStackExtension.__interfaces__ = [robotlegs.bender.framework.api.IExtension];
robotlegs.bender.extensions.stage3D.base.Stage3DStackExtension.prototype = {
	_uid: null
	,Stage3DStackExtension: function() {
	}
	,extend: function(context) {
		this._uid = robotlegs.bender.framework.impl.UID.create($bind(this,this.Stage3DStackExtension));
		context.get_injector().map(robotlegs.bender.extensions.stage3D.base.api.IStack).toSingleton(robotlegs.bender.extensions.stage3D.base.impl.Stack);
		context.get_injector().map(robotlegs.bender.extensions.stage3D.base.api.IRenderer).toSingleton(robotlegs.bender.extensions.stage3D.base.impl.Renderer);
		context.get_injector().map(robotlegs.bender.extensions.stage3D.base.api.IViewport).toSingleton(robotlegs.bender.extensions.stage3D.base.impl.Viewport);
	}
	,toString: function() {
		return this._uid;
	}
	,__class__: robotlegs.bender.extensions.stage3D.base.Stage3DStackExtension
};
robotlegs.bender.extensions.stage3D.base.api.IDisplayObject = function() { };
$hxClasses["robotlegs.bender.extensions.stage3D.base.api.IDisplayObject"] = robotlegs.bender.extensions.stage3D.base.api.IDisplayObject;
robotlegs.bender.extensions.stage3D.base.api.IDisplayObject.__name__ = ["robotlegs","bender","extensions","stage3D","base","api","IDisplayObject"];
robotlegs.bender.extensions.stage3D.base.api.IDisplayObject.prototype = {
	init: null
	,destroy: null
	,__class__: robotlegs.bender.extensions.stage3D.base.api.IDisplayObject
};
robotlegs.bender.extensions.stage3D.base.api.IRenderer = function() { };
$hxClasses["robotlegs.bender.extensions.stage3D.base.api.IRenderer"] = robotlegs.bender.extensions.stage3D.base.api.IRenderer;
robotlegs.bender.extensions.stage3D.base.api.IRenderer.__name__ = ["robotlegs","bender","extensions","stage3D","base","api","IRenderer"];
robotlegs.bender.extensions.stage3D.base.api.IRenderer.prototype = {
	init: null
	,start: null
	,stop: null
	,render: null
	,addLayer: null
	,addLayerAt: null
	,removeLayer: null
	,getLayerIndex: null
	,onReady: null
	,stage3D: null
	,context3D: null
	,profile: null
	,numLayers: null
	,__class__: robotlegs.bender.extensions.stage3D.base.api.IRenderer
};
robotlegs.bender.extensions.stage3D.base.api.IStack = function() { };
$hxClasses["robotlegs.bender.extensions.stage3D.base.api.IStack"] = robotlegs.bender.extensions.stage3D.base.api.IStack;
robotlegs.bender.extensions.stage3D.base.api.IStack.__name__ = ["robotlegs","bender","extensions","stage3D","base","api","IStack"];
robotlegs.bender.extensions.stage3D.base.api.IStack.prototype = {
	addLayer: null
	,addLayerAt: null
	,__class__: robotlegs.bender.extensions.stage3D.base.api.IStack
};
robotlegs.bender.extensions.stage3D.base.api.IViewport = function() { };
$hxClasses["robotlegs.bender.extensions.stage3D.base.api.IViewport"] = robotlegs.bender.extensions.stage3D.base.api.IViewport;
robotlegs.bender.extensions.stage3D.base.api.IViewport.__name__ = ["robotlegs","bender","extensions","stage3D","base","api","IViewport"];
robotlegs.bender.extensions.stage3D.base.api.IViewport.prototype = {
	init: null
	,onChange: null
	,__class__: robotlegs.bender.extensions.stage3D.base.api.IViewport
};
robotlegs.bender.extensions.stage3D.base.impl.Renderer = function(context) {
	this.freeFreeStage3DIndex = 0;
	this.layers = new Array();
	this._onReady = new msignal.Signal0();
	this.set_id(Math.floor(Math.random() * 100000));
	haxe.Log.trace("new Renderer",{ fileName : "Renderer.hx", lineNumber : 72, className : "robotlegs.bender.extensions.stage3D.base.impl.Renderer", methodName : "new"});
	this._injector = context.get_injector();
	this._logger = context.getLogger(this);
};
$hxClasses["robotlegs.bender.extensions.stage3D.base.impl.Renderer"] = robotlegs.bender.extensions.stage3D.base.impl.Renderer;
robotlegs.bender.extensions.stage3D.base.impl.Renderer.__name__ = ["robotlegs","bender","extensions","stage3D","base","impl","Renderer"];
robotlegs.bender.extensions.stage3D.base.impl.Renderer.__interfaces__ = [robotlegs.bender.extensions.stage3D.base.api.IRenderer];
robotlegs.bender.extensions.stage3D.base.impl.Renderer.prototype = {
	_injector: null
	,_logger: null
	,_onReady: null
	,contextView: null
	,viewport: null
	,layers: null
	,_profile: null
	,freeFreeStage3DIndex: null
	,_stage3D: null
	,_context3D: null
	,antiAlias: null
	,onReady: null
	,stage3D: null
	,context3D: null
	,profile: null
	,numLayers: null
	,get_id: function() {
		return this._id;
	}
	,set_id: function(value) {
		return this._id = value;
	}
	,_id: null
	,init: function(profile,antiAlias) {
		if(antiAlias == null) antiAlias = 0;
		haxe.Log.trace("Renderer init",{ fileName : "Renderer.hx", lineNumber : 79, className : "robotlegs.bender.extensions.stage3D.base.impl.Renderer", methodName : "init"});
		this.antiAlias = antiAlias;
		this._profile = profile;
		this._stage3D = this.contextView.view.stage.stage3Ds.data[this.freeFreeStage3DIndex];
		this._stage3D.x = Math.random() * 2000;
		this.get_stage3D().addEventListener(openfl.events.Event.CONTEXT3D_CREATE,$bind(this,this.contextCreatedHandler));
		var renderMode = openfl.display3D.Context3DRenderMode.AUTO;
		this.get_stage3D().requestContext3D(Std.string(renderMode));
		this.freeFreeStage3DIndex++;
	}
	,contextCreatedHandler: function(e) {
		this._context3D = this.get_stage3D().context3D;
		this.get_context3D().configureBackBuffer(this.contextView.view.stage.stageWidth,this.contextView.view.stage.stageHeight,this.antiAlias,true);
		this.get_context3D().setStencilActions(1032,514,7683);
		this.viewport.init();
		this.viewport.get_onChange().add($bind(this,this.OnViewportChange));
		this.viewport.get_rect().setTo(0,0,this.contextView.view.stage.stageWidth,this.contextView.view.stage.stageHeight);
		haxe.Log.trace("context3D = " + Std.string(this.get_context3D()),{ fileName : "Renderer.hx", lineNumber : 108, className : "robotlegs.bender.extensions.stage3D.base.impl.Renderer", methodName : "contextCreatedHandler"});
		this._onReady.dispatch();
	}
	,OnViewportChange: function() {
		this.get_stage3D().x = this.viewport.get_rect().x;
		this.get_stage3D().y = this.viewport.get_rect().y;
		if(this.get_context3D() != null) {
			var width = this.viewport.get_rect().width;
			if(width < 32) width = 32;
			var height = this.viewport.get_rect().height;
			if(height < 32) height = 32;
			this.get_context3D().configureBackBuffer(width,height,this.antiAlias,true);
		}
		var _g1 = 0;
		var _g = this.layers.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.layers[i].set_rect(this.viewport.get_rect());
		}
	}
	,start: function() {
		this.contextView.view.stage.addEventListener(openfl.events.Event.ENTER_FRAME,$bind(this,this.Update));
	}
	,stop: function() {
		this.contextView.view.stage.removeEventListener(openfl.events.Event.ENTER_FRAME,$bind(this,this.Update));
	}
	,addLayer: function(layer) {
		haxe.Log.trace("addLayer = " + Std.string(layer),{ fileName : "Renderer.hx", lineNumber : 145, className : "robotlegs.bender.extensions.stage3D.base.impl.Renderer", methodName : "addLayer"});
		this.layers.push(layer);
	}
	,addLayerAt: function(layer,index) {
		haxe.Log.trace("addLayerAt = " + index + Std.string(layer),{ fileName : "Renderer.hx", lineNumber : 151, className : "robotlegs.bender.extensions.stage3D.base.impl.Renderer", methodName : "addLayerAt"});
		if(this.layers.length < index) {
			haxe.Log.trace("[Renderer, addLayerAt], index outside bounds, reverting to addLayer",{ fileName : "Renderer.hx", lineNumber : 153, className : "robotlegs.bender.extensions.stage3D.base.impl.Renderer", methodName : "addLayerAt"});
			this.addLayer(layer);
			return;
		}
		if(index == this.layers.length) {
			this.layers.push(layer);
			return;
		}
		var copyLayers = this.layers.slice();
		this.layers = new Array();
		var _g1 = 0;
		var _g = copyLayers.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(i == index) this.layers.push(layer);
			this.layers.push(copyLayers[i]);
		}
	}
	,removeLayer: function(layer) {
		var _g1 = 0;
		var _g = this.layers.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.layers[i] == layer) this.layers.splice(i,1);
		}
	}
	,getLayerIndex: function(layer) {
		var _g1 = 0;
		var _g = this.layers.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.layers[i] == layer) return i;
		}
		return -1;
	}
	,render: function() {
		this.Update(null);
	}
	,Update: function(e) {
		if(this.layers.length == 0) return;
		if(this._stage3D == null) return;
		if(this.get_context3D() == null) return;
		this.get_context3D().clear();
		var _g1 = 0;
		var _g = this.layers.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.layers[i].process();
		}
		this.get_context3D().present();
	}
	,get_onReady: function() {
		return this._onReady;
	}
	,get_stage3D: function() {
		return this._stage3D;
	}
	,get_context3D: function() {
		return this._context3D;
	}
	,get_profile: function() {
		return this._profile;
	}
	,get_numLayers: function() {
		return this.layers.length;
	}
	,__class__: robotlegs.bender.extensions.stage3D.base.impl.Renderer
	,__properties__: {set_id:"set_id",get_id:"get_id",get_numLayers:"get_numLayers",get_profile:"get_profile",get_context3D:"get_context3D",get_stage3D:"get_stage3D",get_onReady:"get_onReady"}
};
robotlegs.bender.extensions.stage3D.base.impl.Stack = function(context) {
	this.initialized = false;
	this._debug = false;
	this.context = context;
	this._injector = context.get_injector();
	this._logger = context.getLogger(this);
	this.classIDs = new Array();
	this.classIDs.push(["robotlegs.bender.extensions.stage3D.alternativa3d.impl","AlternativaLayer",null]);
	this.classIDs.push(["robotlegs.bender.extensions.stage3D.away3d.impl","AwayLayer",$bind(this,this.addAway3DAt)]);
	this.classIDs.push(["robotlegs.bender.extensions.stage3D.flare3d.impl","FlareLayer",null]);
	this.classIDs.push(["robotlegs.bender.extensions.stage3D.genome.impl","GenomeLayer",null]);
	this.classIDs.push(["robotlegs.bender.extensions.stage3D.starling.impl","StarlingLayer",$bind(this,this.addStarlingAt)]);
	this.classIDs.push(["robotlegs.bender.extensions.stage3D.zest3d.impl","ZestLayer",null]);
};
$hxClasses["robotlegs.bender.extensions.stage3D.base.impl.Stack"] = robotlegs.bender.extensions.stage3D.base.impl.Stack;
robotlegs.bender.extensions.stage3D.base.impl.Stack.__name__ = ["robotlegs","bender","extensions","stage3D","base","impl","Stack"];
robotlegs.bender.extensions.stage3D.base.impl.Stack.__interfaces__ = [robotlegs.bender.extensions.stage3D.base.api.IStack];
robotlegs.bender.extensions.stage3D.base.impl.Stack.prototype = {
	_injector: null
	,_logger: null
	,context: null
	,_debug: null
	,classIDs: null
	,initialized: null
	,contextView: null
	,renderer: null
	,away3DInitializerAvailable: null
	,starlingInitializerAvailable: null
	,alternativa3DInitializer: null
	,away3DInitializer: null
	,flare3DInitializer: null
	,genomeInitializer: null
	,starlingInitializer: null
	,zest3DInitializer: null
	,initialize: function() {
		if(this.initialized) return;
		this.initialized = true;
		this.away3DInitializer = this.createInitializer("robotlegs.bender.extensions.stage3D.away3d.impl.Away3DInitializer");
		this.away3DInitializer = this.createInitializer(this.classIDs[1][0] + ".Away3DInitializer");
		this.starlingInitializer = this.createInitializer(this.classIDs[4][0] + ".StarlingInitializer");
	}
	,createInitializer: function(classAlias) {
		var initializer;
		try {
			var InitializerClass = Type.resolveClass(classAlias);
			if(InitializerClass != null) {
				initializer = org.swiftsuspenders.utils.CallProxy.createInstance(InitializerClass,[]);
				initializer.init(this.renderer,this.contextView,this.context);
				return initializer;
			}
		} catch( e ) {
			if( js.Boot.__instanceof(e,openfl.errors.Error) ) {
				haxe.Log.trace(e,{ fileName : "Stack.hx", lineNumber : 99, className : "robotlegs.bender.extensions.stage3D.base.impl.Stack", methodName : "createInitializer"});
			} else throw(e);
		}
		return null;
	}
	,addLayer: function(LayerClass,id) {
		if(id == null) id = "";
		this.addLayerAt(LayerClass,-1,id);
	}
	,addLayerAt: function(LayerClass,index,id) {
		if(id == null) id = "";
		this.initialize();
		var addFunc = this.getAddFunc(LayerClass);
		if(addFunc != null) addFunc(LayerClass,index,id);
	}
	,getAddFunc: function(layerClass) {
		var className = Type.getClassName(layerClass);
		var _g1 = 0;
		var _g = this.classIDs.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.classIDs[i][0] + "." + this.classIDs[i][1] == className) return this.classIDs[i][2];
		}
		var superClass = Type.getSuperClass(layerClass);
		if(superClass != null) return this.getAddFunc(superClass);
		return null;
	}
	,addAway3DAt: function(AwayClass,index,id) {
		if(id == null) id = "";
		if(this.away3DInitializerAvailable == null) {
			throw new openfl.errors.Error(this.errorMsg(1));
			return;
		}
		this.away3DInitializer.addLayer(AwayClass,index,id);
	}
	,addStarlingAt: function(StarlingLayerClass,index,id) {
		if(id == null) id = "";
		if(this.starlingInitializerAvailable == null) {
			throw new openfl.errors.Error(this.errorMsg(4));
			return;
		}
		this.starlingInitializer.addLayer(StarlingLayerClass,index,id);
	}
	,get_debug: function() {
		return this._debug;
	}
	,set_debug: function(value) {
		this._debug = value;
		this.away3DInitializer.set_debug(value);
		return value;
	}
	,errorMsg: function(index) {
		return "[" + this.classIDs[index][0] + "] needs to be installed before this method can be called, eg: context.install(" + this.classIDs[index][1] + ");";
	}
	,__class__: robotlegs.bender.extensions.stage3D.base.impl.Stack
	,__properties__: {set_debug:"set_debug",get_debug:"get_debug"}
};
robotlegs.bender.extensions.stage3D.base.impl.Viewport = function() {
	this._onChange = new msignal.Signal0();
	this.lastRect = new openfl.geom.Rectangle();
	this._rect = new openfl.geom.Rectangle();
};
$hxClasses["robotlegs.bender.extensions.stage3D.base.impl.Viewport"] = robotlegs.bender.extensions.stage3D.base.impl.Viewport;
robotlegs.bender.extensions.stage3D.base.impl.Viewport.__name__ = ["robotlegs","bender","extensions","stage3D","base","impl","Viewport"];
robotlegs.bender.extensions.stage3D.base.impl.Viewport.__interfaces__ = [robotlegs.bender.extensions.stage3D.base.api.IViewport];
robotlegs.bender.extensions.stage3D.base.impl.Viewport.prototype = {
	_injector: null
	,_logger: null
	,contextView: null
	,_rect: null
	,lastRect: null
	,_onChange: null
	,onChange: null
	,Viewport: function(context) {
		this._injector = context.get_injector();
		this._logger = context.getLogger(this);
	}
	,init: function() {
		this.contextView.view.stage.addEventListener(openfl.events.Event.ENTER_FRAME,$bind(this,this.CheckForChange));
	}
	,CheckForChange: function(e) {
		if(this._rect.x != this.lastRect.x) this.get_onChange().dispatch(); else if(this._rect.y != this.lastRect.y) this.get_onChange().dispatch(); else if(this._rect.width != this.lastRect.width) this.get_onChange().dispatch(); else if(this._rect.height != this.lastRect.height) this.get_onChange().dispatch();
		this.lastRect.setTo(this._rect.x,this._rect.y,this._rect.width,this._rect.height);
	}
	,get_rect: function() {
		return this._rect;
	}
	,set_rect: function(value) {
		this._rect = value;
		return value;
	}
	,get_onChange: function() {
		return this._onChange;
	}
	,__class__: robotlegs.bender.extensions.stage3D.base.impl.Viewport
	,__properties__: {get_onChange:"get_onChange",set_rect:"set_rect",get_rect:"get_rect"}
};
robotlegs.bender.extensions.stage3D.starling.StarlingIntegrationExtension = function() {
};
$hxClasses["robotlegs.bender.extensions.stage3D.starling.StarlingIntegrationExtension"] = robotlegs.bender.extensions.stage3D.starling.StarlingIntegrationExtension;
robotlegs.bender.extensions.stage3D.starling.StarlingIntegrationExtension.__name__ = ["robotlegs","bender","extensions","stage3D","starling","StarlingIntegrationExtension"];
robotlegs.bender.extensions.stage3D.starling.StarlingIntegrationExtension.__interfaces__ = [robotlegs.bender.framework.api.IExtension];
robotlegs.bender.extensions.stage3D.starling.StarlingIntegrationExtension.prototype = {
	_uid: null
	,_context: null
	,_logger: null
	,extend: function(context) {
		this._uid = robotlegs.bender.framework.impl.UID.create(robotlegs.bender.extensions.stage3D.starling.StarlingIntegrationExtension);
		this._context = context;
		this._logger = context.getLogger(this);
		this._context.get_injector().map(robotlegs.bender.extensions.stage3D.starling.impl.StarlingInitializerAvailable).asSingleton();
		this._context.addConfigHandler(robotlegs.bender.extensions.matching.InstanceOfType.call(robotlegs.bender.extensions.stage3D.starling.impl.StarlingCollection),$bind(this,this.handleStarlingCollection));
	}
	,toString: function() {
		return this._uid;
	}
	,handleStarlingCollection: function(starlingCollection) {
		this._logger.debug("Mapping provided Starling instances...");
		this._context.get_injector().map(robotlegs.bender.extensions.stage3D.starling.impl.StarlingCollection).toValue(starlingCollection);
		var items = starlingCollection.items;
		var $it0 = items.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			var starling1 = starlingCollection.getItem(key);
			this._context.get_injector().map(starling.display.DisplayObjectContainer,key).toValue(starling1.get_stage());
		}
		this._context.get_injector().map(robotlegs.bender.extensions.stage3D.starling.api.IStarlingViewMap).toSingleton(robotlegs.bender.extensions.stage3D.starling.impl.StarlingViewMap);
		this._context.get_injector().getInstance(robotlegs.bender.extensions.stage3D.starling.api.IStarlingViewMap);
	}
	,__class__: robotlegs.bender.extensions.stage3D.starling.StarlingIntegrationExtension
};
robotlegs.bender.extensions.stage3D.starling.StarlingStageSyncExtension = function() {
	this._numStarlingsInQueue = 0;
};
$hxClasses["robotlegs.bender.extensions.stage3D.starling.StarlingStageSyncExtension"] = robotlegs.bender.extensions.stage3D.starling.StarlingStageSyncExtension;
robotlegs.bender.extensions.stage3D.starling.StarlingStageSyncExtension.__name__ = ["robotlegs","bender","extensions","stage3D","starling","StarlingStageSyncExtension"];
robotlegs.bender.extensions.stage3D.starling.StarlingStageSyncExtension.__interfaces__ = [robotlegs.bender.framework.api.IExtension];
robotlegs.bender.extensions.stage3D.starling.StarlingStageSyncExtension.prototype = {
	_uid: null
	,_context: null
	,_contextView: null
	,_logger: null
	,_contextReady: null
	,_starlingCollection: null
	,_numStarlingsInQueue: null
	,extend: function(context) {
		this._uid = robotlegs.bender.framework.impl.UID.create(robotlegs.bender.extensions.stage3D.starling.StarlingStageSyncExtension);
		this._context = context;
		this._logger = context.getLogger(this);
		this._context.addConfigHandler(robotlegs.bender.extensions.matching.InstanceOfType.call(robotlegs.bender.extensions.stage3D.starling.impl.StarlingCollection),$bind(this,this.handleStarlingCollection));
	}
	,toString: function() {
		return this._uid;
	}
	,handleStarlingCollection: function(collection) {
		if(this._starlingCollection != null) this._logger.warn("A Starling collection has already been set, ignoring {0}",[collection]);
		this._starlingCollection = collection;
		this._numStarlingsInQueue = collection.get_length();
		var $it0 = this._starlingCollection.items.iterator();
		while( $it0.hasNext() ) {
			var s = $it0.next();
			var starling = s;
			this.handleStarlingContextView(starling);
		}
	}
	,handleStarlingContextView: function(currentStarling) {
		if(currentStarling.get_stage().get_numChildren() > 0) this.initializeContext(); else {
			this._logger.debug("Starling context view is not yet on stage. Waiting...");
			currentStarling.addEventListener(starling.events.Event.CONTEXT3D_CREATE,$bind(this,this.onContextCreated));
		}
	}
	,onContextCreated: function(event) {
		this._logger.debug("Starling context view added on stage.");
		this._numStarlingsInQueue--;
		this.initializeContext();
	}
	,initializeContext: function() {
		if(this._numStarlingsInQueue > 0) return;
		this._logger.debug("Default and Starling context views are now on stage. Initializing context...");
		this._context.initialize();
	}
	,__class__: robotlegs.bender.extensions.stage3D.starling.StarlingStageSyncExtension
};
robotlegs.bender.extensions.stage3D.starling.api = {};
robotlegs.bender.extensions.stage3D.starling.api.IStarlingViewMap = function() { };
$hxClasses["robotlegs.bender.extensions.stage3D.starling.api.IStarlingViewMap"] = robotlegs.bender.extensions.stage3D.starling.api.IStarlingViewMap;
robotlegs.bender.extensions.stage3D.starling.api.IStarlingViewMap.__name__ = ["robotlegs","bender","extensions","stage3D","starling","api","IStarlingViewMap"];
robotlegs.bender.extensions.stage3D.starling.api.IStarlingViewMap.prototype = {
	addStarlingView: null
	,removeStarlingView: null
	,__class__: robotlegs.bender.extensions.stage3D.starling.api.IStarlingViewMap
};
robotlegs.bender.extensions.stage3D.starling.impl.PlaceHolderLayer = function() {
};
$hxClasses["robotlegs.bender.extensions.stage3D.starling.impl.PlaceHolderLayer"] = robotlegs.bender.extensions.stage3D.starling.impl.PlaceHolderLayer;
robotlegs.bender.extensions.stage3D.starling.impl.PlaceHolderLayer.__name__ = ["robotlegs","bender","extensions","stage3D","starling","impl","PlaceHolderLayer"];
robotlegs.bender.extensions.stage3D.starling.impl.PlaceHolderLayer.__interfaces__ = [robotlegs.bender.extensions.stage3D.base.api.ILayer];
robotlegs.bender.extensions.stage3D.starling.impl.PlaceHolderLayer.prototype = {
	_iRenderer: null
	,starling: null
	,_rect: null
	,rect: null
	,get_iRenderer: function() {
		return this._iRenderer;
	}
	,set_iRenderer: function(value) {
		return this._iRenderer = value;
	}
	,get_rect: function() {
		return this._rect;
	}
	,set_rect: function(value) {
		return this._rect = value;
	}
	,process: function() {
	}
	,__class__: robotlegs.bender.extensions.stage3D.starling.impl.PlaceHolderLayer
	,__properties__: {set_iRenderer:"set_iRenderer",get_iRenderer:"get_iRenderer",set_rect:"set_rect"}
};
robotlegs.bender.extensions.stage3D.starling.impl.StarlingCollection = function(starlingCollectionData) {
	this.starlings = (function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(0);
			this1.data = this2;
		}
		this1.length = 0;
		this1.fixed = false;
		$r = this1;
		return $r;
	}(this));
	robotlegs.bender.extensions.stage3D.base.impl.BaseCollection.call(this);
	if(starlingCollectionData != null) {
		var starling = starlingCollectionData[0];
		var viewID = starlingCollectionData[1];
		this.addItem(starling,viewID);
	}
};
$hxClasses["robotlegs.bender.extensions.stage3D.starling.impl.StarlingCollection"] = robotlegs.bender.extensions.stage3D.starling.impl.StarlingCollection;
robotlegs.bender.extensions.stage3D.starling.impl.StarlingCollection.__name__ = ["robotlegs","bender","extensions","stage3D","starling","impl","StarlingCollection"];
robotlegs.bender.extensions.stage3D.starling.impl.StarlingCollection.__super__ = robotlegs.bender.extensions.stage3D.base.impl.BaseCollection;
robotlegs.bender.extensions.stage3D.starling.impl.StarlingCollection.prototype = $extend(robotlegs.bender.extensions.stage3D.base.impl.BaseCollection.prototype,{
	starlings: null
	,addItem: function(starling,name) {
		var this1 = this.starlings;
		if(!this1.fixed) {
			this1.length++;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
			this1.data[this1.length - 1] = starling;
		}
		this1.length;
		if(this.items.exists(name) == false) {
			this.items.set(name,starling);
			this._length++;
		}
		return this._length;
	}
	,removeItem: function(name) {
		var result = this.getItem(name);
		var _g1 = 0;
		var _g = this.starlings.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.starlings.data[i] == result) {
				var this1 = this.starlings;
				var pos = i;
				var len = 1;
				if(pos < 0) pos += this1.length;
				if(pos + len > this1.length) len = this1.length - pos;
				if(len < 0) len = 0;
				var vectorData = new openfl.VectorData();
				vectorData.length = len;
				vectorData.fixed = false;
				var this2;
				this2 = new Array(len);
				vectorData.data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos,vectorData.data,0,len);
				if(len > 0) {
					this1.length -= len;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos + len,this1.data,pos,this1.length - pos);
				}
				vectorData;
			}
		}
		if(result != null) {
			this.items.remove(name);
			this._length--;
		}
		return result;
	}
	,getItem: function(name) {
		if(this.items.exists(name) == false) return null;
		var starling = this.items.get(name);
		return starling;
	}
	,__class__: robotlegs.bender.extensions.stage3D.starling.impl.StarlingCollection
});
robotlegs.bender.extensions.stage3D.starling.impl.StarlingInitializer = function() {
	robotlegs.bender.extensions.stage3D.base.impl.BaseInitializer.call(this);
};
$hxClasses["robotlegs.bender.extensions.stage3D.starling.impl.StarlingInitializer"] = robotlegs.bender.extensions.stage3D.starling.impl.StarlingInitializer;
robotlegs.bender.extensions.stage3D.starling.impl.StarlingInitializer.__name__ = ["robotlegs","bender","extensions","stage3D","starling","impl","StarlingInitializer"];
robotlegs.bender.extensions.stage3D.starling.impl.StarlingInitializer.__super__ = robotlegs.bender.extensions.stage3D.base.impl.BaseInitializer;
robotlegs.bender.extensions.stage3D.starling.impl.StarlingInitializer.prototype = $extend(robotlegs.bender.extensions.stage3D.base.impl.BaseInitializer.prototype,{
	addLayer: function(ViewClass,index,id) {
		var _g = this;
		var viewRectangle = new openfl.geom.Rectangle(0,0,this.contextView.view.stage.stageWidth,this.contextView.view.stage.stageHeight);
		if(id == "") id = this.autoID(ViewClass);
		if(starling.core.Starling.get_current() == null) {
			starling.core.Starling.set_multitouchEnabled(true);
			starling.core.Starling.set_handleLostContext(true);
		}
		haxe.Log.trace("renderer.stage3D = " + this.renderer.get_id(),{ fileName : "StarlingInitializer.hx", lineNumber : 35, className : "robotlegs.bender.extensions.stage3D.starling.impl.StarlingInitializer", methodName : "addLayer"});
		haxe.Log.trace("renderer.stage3D = " + Std.string(this.renderer.get_stage3D()),{ fileName : "StarlingInitializer.hx", lineNumber : 38, className : "robotlegs.bender.extensions.stage3D.starling.impl.StarlingInitializer", methodName : "addLayer"});
		haxe.Log.trace("renderer.context3D = " + Std.string(this.renderer.get_context3D()),{ fileName : "StarlingInitializer.hx", lineNumber : 39, className : "robotlegs.bender.extensions.stage3D.starling.impl.StarlingInitializer", methodName : "addLayer"});
		haxe.Log.trace("renderer.stage3D.context3D = " + Std.string(this.renderer.get_stage3D().context3D),{ fileName : "StarlingInitializer.hx", lineNumber : 40, className : "robotlegs.bender.extensions.stage3D.starling.impl.StarlingInitializer", methodName : "addLayer"});
		var starling1 = new starling.core.Starling(ViewClass,this.contextView.view.stage,viewRectangle,this.renderer.get_stage3D(),"auto",this.renderer.get_profile());
		starling1.set_simulateMultitouch(true);
		starling1.set_shareContext(true);
		starling1.start();
		if(this.get_debug()) starling1.set_showStats(true);
		this.context.configure(new robotlegs.bender.extensions.stage3D.starling.impl.StarlingCollection([starling1,id]));
		var placeHolderLayer = new robotlegs.bender.extensions.stage3D.starling.impl.PlaceHolderLayer();
		if(index == -1) this.renderer.addLayer(placeHolderLayer); else this.renderer.addLayerAt(placeHolderLayer,index);
		var insertIndex = this.renderer.getLayerIndex(placeHolderLayer);
		var onStarlingReady = function(e) {
			var starling1;
			starling1 = js.Boot.__cast(e.get_target() , starling.core.Starling);
			var layer;
			layer = js.Boot.__cast(starling1.get_root() , robotlegs.bender.extensions.stage3D.starling.impl.StarlingLayer);
			layer.setStarling(starling1);
			_g.renderer.removeLayer(placeHolderLayer);
			_g.renderer.addLayerAt(layer,insertIndex);
		};
		starling1.addEventListener(starling.events.Event.ROOT_CREATED,onStarlingReady);
	}
	,__class__: robotlegs.bender.extensions.stage3D.starling.impl.StarlingInitializer
});
robotlegs.bender.extensions.stage3D.starling.impl.StarlingInitializerAvailable = function() {
};
$hxClasses["robotlegs.bender.extensions.stage3D.starling.impl.StarlingInitializerAvailable"] = robotlegs.bender.extensions.stage3D.starling.impl.StarlingInitializerAvailable;
robotlegs.bender.extensions.stage3D.starling.impl.StarlingInitializerAvailable.__name__ = ["robotlegs","bender","extensions","stage3D","starling","impl","StarlingInitializerAvailable"];
robotlegs.bender.extensions.stage3D.starling.impl.StarlingInitializerAvailable.prototype = {
	__class__: robotlegs.bender.extensions.stage3D.starling.impl.StarlingInitializerAvailable
};
robotlegs.bender.extensions.stage3D.starling.impl.StarlingViewMap = function() {
};
$hxClasses["robotlegs.bender.extensions.stage3D.starling.impl.StarlingViewMap"] = robotlegs.bender.extensions.stage3D.starling.impl.StarlingViewMap;
robotlegs.bender.extensions.stage3D.starling.impl.StarlingViewMap.__name__ = ["robotlegs","bender","extensions","stage3D","starling","impl","StarlingViewMap"];
robotlegs.bender.extensions.stage3D.starling.impl.StarlingViewMap.__interfaces__ = [robotlegs.bender.extensions.stage3D.starling.api.IStarlingViewMap];
robotlegs.bender.extensions.stage3D.starling.impl.StarlingViewMap.prototype = {
	starlingCollection: null
	,mediatorMap: null
	,init: function() {
		var $it0 = this.starlingCollection.items.iterator();
		while( $it0.hasNext() ) {
			var s = $it0.next();
			if(s == null) continue;
			var starling1 = s;
			starling1.get_stage().addEventListener(starling.events.Event.ADDED,$bind(this,this.onStarlingAdded));
			starling1.get_stage().addEventListener(starling.events.Event.REMOVED,$bind(this,this.onStarlingRemoved));
			starling1.addEventListener(starling.events.Event.ROOT_CREATED,$bind(this,this.onRootCreated));
		}
	}
	,addStarlingView: function(view) {
		var isIDisplay = js.Boot.__instanceof(view,robotlegs.bender.extensions.stage3D.base.api.IDisplayObject);
		if(isIDisplay) (js.Boot.__cast(view , robotlegs.bender.extensions.stage3D.base.api.IDisplayObject)).init();
		this.mediatorMap.mediate(view);
	}
	,removeStarlingView: function(view) {
		if(js.Boot.__instanceof(view,robotlegs.bender.extensions.stage3D.base.api.IDisplayObject)) (js.Boot.__cast(view , robotlegs.bender.extensions.stage3D.base.api.IDisplayObject)).destroy();
		this.mediatorMap.unmediate(view);
	}
	,onStarlingAdded: function(event) {
		this.addStarlingView(js.Boot.__cast(event.get_target() , starling.display.DisplayObject));
	}
	,onStarlingRemoved: function(event) {
		this.removeStarlingView(js.Boot.__cast(event.get_target() , starling.display.DisplayObject));
	}
	,onRootCreated: function(event) {
		(js.Boot.__cast(event.get_target() , starling.core.Starling)).removeEventListener(starling.events.Event.ROOT_CREATED,$bind(this,this.onRootCreated));
		this.addStarlingView((js.Boot.__cast(event.get_target() , starling.core.Starling)).get_stage());
	}
	,__class__: robotlegs.bender.extensions.stage3D.starling.impl.StarlingViewMap
};
robotlegs.bender.extensions.viewManager.ManualStageObserverExtension = function() { };
$hxClasses["robotlegs.bender.extensions.viewManager.ManualStageObserverExtension"] = robotlegs.bender.extensions.viewManager.ManualStageObserverExtension;
robotlegs.bender.extensions.viewManager.ManualStageObserverExtension.__name__ = ["robotlegs","bender","extensions","viewManager","ManualStageObserverExtension"];
robotlegs.bender.extensions.viewManager.ManualStageObserverExtension.__interfaces__ = [robotlegs.bender.framework.api.IExtension];
robotlegs.bender.extensions.viewManager.ManualStageObserverExtension._manualStageObserver = null;
robotlegs.bender.extensions.viewManager.ManualStageObserverExtension._installCount = null;
robotlegs.bender.extensions.viewManager.ManualStageObserverExtension.prototype = {
	_injector: null
	,_logger: null
	,extend: function(context) {
		context.whenInitializing($bind(this,this.whenInitializing));
		context.whenDestroying($bind(this,this.whenDestroying));
		robotlegs.bender.extensions.viewManager.ManualStageObserverExtension._installCount++;
		this._injector = context.get_injector();
		this._logger = context.getLogger(this);
	}
	,whenInitializing: function() {
		if(robotlegs.bender.extensions.viewManager.ManualStageObserverExtension._manualStageObserver == null) {
			var containerRegistry = this._injector.getInstance(robotlegs.bender.extensions.viewManager.impl.ContainerRegistry);
			this._logger.debug("Creating genuine ManualStageObserver Singleton");
			robotlegs.bender.extensions.viewManager.ManualStageObserverExtension._manualStageObserver = new robotlegs.bender.extensions.viewManager.impl.ManualStageObserver(containerRegistry);
		}
	}
	,whenDestroying: function() {
		robotlegs.bender.extensions.viewManager.ManualStageObserverExtension._installCount--;
		if((function($this) {
			var $r;
			var $int = robotlegs.bender.extensions.viewManager.ManualStageObserverExtension._installCount;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) == 0) {
			this._logger.debug("Destroying genuine ManualStageObserver Singleton");
			robotlegs.bender.extensions.viewManager.ManualStageObserverExtension._manualStageObserver.destroy();
			robotlegs.bender.extensions.viewManager.ManualStageObserverExtension._manualStageObserver = null;
		}
	}
	,__class__: robotlegs.bender.extensions.viewManager.ManualStageObserverExtension
};
robotlegs.bender.extensions.viewManager.StageCrawlerExtension = function() { };
$hxClasses["robotlegs.bender.extensions.viewManager.StageCrawlerExtension"] = robotlegs.bender.extensions.viewManager.StageCrawlerExtension;
robotlegs.bender.extensions.viewManager.StageCrawlerExtension.__name__ = ["robotlegs","bender","extensions","viewManager","StageCrawlerExtension"];
robotlegs.bender.extensions.viewManager.StageCrawlerExtension.__interfaces__ = [robotlegs.bender.framework.api.IExtension];
robotlegs.bender.extensions.viewManager.StageCrawlerExtension.prototype = {
	_logger: null
	,_injector: null
	,_containerRegistry: null
	,extend: function(context) {
		this._injector = context.get_injector();
		this._logger = context.getLogger(this);
		context.afterInitializing($bind(this,this.afterInitializing));
	}
	,afterInitializing: function() {
		this._containerRegistry = this._injector.getInstance(robotlegs.bender.extensions.viewManager.impl.ContainerRegistry);
		if(this._injector.hasDirectMapping(robotlegs.bender.extensions.viewManager.api.IViewManager)) this.scanViewManagedContainers(); else this.scanContextView();
	}
	,scanViewManagedContainers: function() {
		this._logger.debug("ViewManager is installed. Checking for managed containers...");
		var viewManager = this._injector.getInstance(robotlegs.bender.extensions.viewManager.api.IViewManager);
		var _g = 0;
		var _g1 = viewManager.get_containers();
		while(_g < _g1.length) {
			var container = _g1[_g];
			++_g;
			if(container.stage != null) this.scanContainer(container);
		}
	}
	,scanContextView: function() {
		this._logger.debug("ViewManager is not installed. Checking the ContextView...");
		var contextView = this._injector.getInstance(robotlegs.bender.extensions.contextView.ContextView);
		if(contextView.view.stage != null) this.scanContainer(contextView.view);
	}
	,scanContainer: function(container) {
		var binding = this._containerRegistry.getBinding(container);
		this._logger.debug("StageCrawler scanning container {0} ...",[container]);
		new robotlegs.bender.extensions.viewManager.impl.StageCrawler(binding).scan(container);
		this._logger.debug("StageCrawler finished scanning {0}",[container]);
	}
	,__class__: robotlegs.bender.extensions.viewManager.StageCrawlerExtension
};
robotlegs.bender.extensions.viewManager.StageObserverExtension = function() { };
$hxClasses["robotlegs.bender.extensions.viewManager.StageObserverExtension"] = robotlegs.bender.extensions.viewManager.StageObserverExtension;
robotlegs.bender.extensions.viewManager.StageObserverExtension.__name__ = ["robotlegs","bender","extensions","viewManager","StageObserverExtension"];
robotlegs.bender.extensions.viewManager.StageObserverExtension.__interfaces__ = [robotlegs.bender.framework.api.IExtension];
robotlegs.bender.extensions.viewManager.StageObserverExtension._stageObserver = null;
robotlegs.bender.extensions.viewManager.StageObserverExtension._installCount = null;
robotlegs.bender.extensions.viewManager.StageObserverExtension.prototype = {
	_injector: null
	,_logger: null
	,extend: function(context) {
		context.whenInitializing($bind(this,this.whenInitializing));
		context.whenDestroying($bind(this,this.whenDestroying));
		robotlegs.bender.extensions.viewManager.StageObserverExtension._installCount++;
		this._injector = context.get_injector();
		this._logger = context.getLogger(this);
	}
	,whenInitializing: function() {
		if(robotlegs.bender.extensions.viewManager.StageObserverExtension._stageObserver == null) {
			var containerRegistry = this._injector.getInstance(robotlegs.bender.extensions.viewManager.impl.ContainerRegistry);
			this._logger.debug("Creating genuine StageObserver Singleton");
			robotlegs.bender.extensions.viewManager.StageObserverExtension._stageObserver = new robotlegs.bender.extensions.viewManager.impl.StageObserver(containerRegistry);
		}
	}
	,whenDestroying: function() {
		robotlegs.bender.extensions.viewManager.StageObserverExtension._installCount--;
		if((function($this) {
			var $r;
			var $int = robotlegs.bender.extensions.viewManager.StageObserverExtension._installCount;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) == 0) {
			this._logger.debug("Destroying genuine StageObserver Singleton");
			robotlegs.bender.extensions.viewManager.StageObserverExtension._stageObserver.destroy();
			robotlegs.bender.extensions.viewManager.StageObserverExtension._stageObserver = null;
		}
	}
	,__class__: robotlegs.bender.extensions.viewManager.StageObserverExtension
};
robotlegs.bender.extensions.viewManager.ViewManagerExtension = function() { };
$hxClasses["robotlegs.bender.extensions.viewManager.ViewManagerExtension"] = robotlegs.bender.extensions.viewManager.ViewManagerExtension;
robotlegs.bender.extensions.viewManager.ViewManagerExtension.__name__ = ["robotlegs","bender","extensions","viewManager","ViewManagerExtension"];
robotlegs.bender.extensions.viewManager.ViewManagerExtension.__interfaces__ = [robotlegs.bender.framework.api.IExtension];
robotlegs.bender.extensions.viewManager.ViewManagerExtension._containerRegistry = null;
robotlegs.bender.extensions.viewManager.ViewManagerExtension.prototype = {
	_injector: null
	,_viewManager: null
	,extend: function(context) {
		context.whenInitializing($bind(this,this.whenInitializing));
		context.whenDestroying($bind(this,this.whenDestroying));
		this._injector = context.get_injector();
		if(robotlegs.bender.extensions.viewManager.ViewManagerExtension._containerRegistry == null) robotlegs.bender.extensions.viewManager.ViewManagerExtension._containerRegistry = new robotlegs.bender.extensions.viewManager.impl.ContainerRegistry();
		this._injector.map(robotlegs.bender.extensions.viewManager.impl.ContainerRegistry).toValue(robotlegs.bender.extensions.viewManager.ViewManagerExtension._containerRegistry);
		this._injector.map(robotlegs.bender.extensions.viewManager.api.IViewManager).toSingleton(robotlegs.bender.extensions.viewManager.impl.ViewManager);
	}
	,whenInitializing: function() {
		this._viewManager = this._injector.getInstance(robotlegs.bender.extensions.viewManager.api.IViewManager);
	}
	,whenDestroying: function() {
		this._viewManager.removeAllHandlers();
		this._injector.unmap(robotlegs.bender.extensions.viewManager.api.IViewManager);
		this._injector.unmap(robotlegs.bender.extensions.viewManager.impl.ContainerRegistry);
	}
	,__class__: robotlegs.bender.extensions.viewManager.ViewManagerExtension
};
robotlegs.bender.extensions.viewManager.api.IViewManager = function() { };
$hxClasses["robotlegs.bender.extensions.viewManager.api.IViewManager"] = robotlegs.bender.extensions.viewManager.api.IViewManager;
robotlegs.bender.extensions.viewManager.api.IViewManager.__name__ = ["robotlegs","bender","extensions","viewManager","api","IViewManager"];
robotlegs.bender.extensions.viewManager.api.IViewManager.__interfaces__ = [openfl.events.IEventDispatcher];
robotlegs.bender.extensions.viewManager.api.IViewManager.prototype = {
	containers: null
	,addContainer: null
	,removeContainer: null
	,addViewHandler: null
	,removeViewHandler: null
	,removeAllHandlers: null
	,__class__: robotlegs.bender.extensions.viewManager.api.IViewManager
};
robotlegs.bender.extensions.viewManager.impl = {};
robotlegs.bender.extensions.viewManager.impl.ConfigureViewEvent = function(type,view) {
	openfl.events.Event.call(this,type,true,true);
	this._view = view;
};
$hxClasses["robotlegs.bender.extensions.viewManager.impl.ConfigureViewEvent"] = robotlegs.bender.extensions.viewManager.impl.ConfigureViewEvent;
robotlegs.bender.extensions.viewManager.impl.ConfigureViewEvent.__name__ = ["robotlegs","bender","extensions","viewManager","impl","ConfigureViewEvent"];
robotlegs.bender.extensions.viewManager.impl.ConfigureViewEvent.__super__ = openfl.events.Event;
robotlegs.bender.extensions.viewManager.impl.ConfigureViewEvent.prototype = $extend(openfl.events.Event.prototype,{
	_view: null
	,view: null
	,clone: function() {
		return new robotlegs.bender.extensions.viewManager.impl.ConfigureViewEvent(this.type,this._view);
	}
	,__class__: robotlegs.bender.extensions.viewManager.impl.ConfigureViewEvent
});
robotlegs.bender.extensions.viewManager.impl.ContainerBinding = function(container) {
	this._handlers = new Array();
	this._container = container;
	openfl.events.EventDispatcher.call(this,null);
};
$hxClasses["robotlegs.bender.extensions.viewManager.impl.ContainerBinding"] = robotlegs.bender.extensions.viewManager.impl.ContainerBinding;
robotlegs.bender.extensions.viewManager.impl.ContainerBinding.__name__ = ["robotlegs","bender","extensions","viewManager","impl","ContainerBinding"];
robotlegs.bender.extensions.viewManager.impl.ContainerBinding.__super__ = openfl.events.EventDispatcher;
robotlegs.bender.extensions.viewManager.impl.ContainerBinding.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	_parent: null
	,get_parent: function() {
		return this._parent;
	}
	,set_parent: function(value) {
		this._parent = value;
		return this._parent;
	}
	,_container: null
	,container: null
	,get_container: function() {
		return this._container;
	}
	,_handlers: null
	,addHandler: function(handler) {
		if(HxOverrides.indexOf(this._handlers,handler,0) > -1) return;
		this._handlers.push(handler);
	}
	,removeHandler: function(handler) {
		var index = HxOverrides.indexOf(this._handlers,handler,0);
		if(index > -1) {
			this._handlers.splice(index,1);
			if(this._handlers.length == 0) this.dispatchEvent(new robotlegs.bender.extensions.viewManager.impl.ContainerBindingEvent(robotlegs.bender.extensions.viewManager.impl.ContainerBindingEvent.BINDING_EMPTY));
		}
	}
	,handleView: function(view,type) {
		var length = this._handlers.length;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var handler;
			handler = js.Boot.__cast(this._handlers[i] , robotlegs.bender.extensions.viewManager.api.IViewHandler);
			handler.handleView(view,type);
		}
	}
	,__class__: robotlegs.bender.extensions.viewManager.impl.ContainerBinding
	,__properties__: {get_container:"get_container",set_parent:"set_parent",get_parent:"get_parent"}
});
robotlegs.bender.extensions.viewManager.impl.ContainerBindingEvent = function(type) {
	openfl.events.Event.call(this,type);
};
$hxClasses["robotlegs.bender.extensions.viewManager.impl.ContainerBindingEvent"] = robotlegs.bender.extensions.viewManager.impl.ContainerBindingEvent;
robotlegs.bender.extensions.viewManager.impl.ContainerBindingEvent.__name__ = ["robotlegs","bender","extensions","viewManager","impl","ContainerBindingEvent"];
robotlegs.bender.extensions.viewManager.impl.ContainerBindingEvent.__super__ = openfl.events.Event;
robotlegs.bender.extensions.viewManager.impl.ContainerBindingEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		return new robotlegs.bender.extensions.viewManager.impl.ContainerBindingEvent(this.type);
	}
	,__class__: robotlegs.bender.extensions.viewManager.impl.ContainerBindingEvent
});
robotlegs.bender.extensions.viewManager.impl.ContainerRegistry = function(target) {
	this._bindingByContainer = new haxe.ds.ObjectMap();
	this.rootBindings = new Array();
	this.bindings = new Array();
	openfl.events.EventDispatcher.call(this,target);
};
$hxClasses["robotlegs.bender.extensions.viewManager.impl.ContainerRegistry"] = robotlegs.bender.extensions.viewManager.impl.ContainerRegistry;
robotlegs.bender.extensions.viewManager.impl.ContainerRegistry.__name__ = ["robotlegs","bender","extensions","viewManager","impl","ContainerRegistry"];
robotlegs.bender.extensions.viewManager.impl.ContainerRegistry.__super__ = openfl.events.EventDispatcher;
robotlegs.bender.extensions.viewManager.impl.ContainerRegistry.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	bindings: null
	,get_bindings: function() {
		return this.bindings;
	}
	,rootBindings: null
	,get_rootBindings: function() {
		return this.rootBindings;
	}
	,_bindingByContainer: null
	,addContainer: function(container) {
		haxe.Log.trace("addContainer = " + Std.string(container),{ fileName : "ContainerRegistry.hx", lineNumber : 69, className : "robotlegs.bender.extensions.viewManager.impl.ContainerRegistry", methodName : "addContainer"});
		if(this._bindingByContainer.h[container.__id__] == null) {
			var v = this.createBinding(container);
			this._bindingByContainer.set(container,v);
			v;
		}
		return this._bindingByContainer.h[container.__id__];
	}
	,removeContainer: function(container) {
		var binding = this._bindingByContainer.h[container.__id__];
		if(binding != null) this.removeBinding(binding);
		return binding;
	}
	,findParentBinding: function(target) {
		var parent = target.parent;
		while(parent != null) {
			var binding = this._bindingByContainer.h[parent.__id__];
			if(binding != null) return binding;
			parent = parent.parent;
		}
		return null;
	}
	,getBinding: function(container) {
		return this._bindingByContainer.h[container.__id__];
	}
	,createBinding: function(container) {
		var binding = new robotlegs.bender.extensions.viewManager.impl.ContainerBinding(container);
		this.get_bindings().push(binding);
		binding.addEventListener(robotlegs.bender.extensions.viewManager.impl.ContainerBindingEvent.BINDING_EMPTY,$bind(this,this.onBindingEmpty));
		binding.set_parent(this.findParentBinding(container));
		if(binding.get_parent() == null) this.addRootBinding(binding);
		var $it0 = this._bindingByContainer.iterator();
		while( $it0.hasNext() ) {
			var childBinding = $it0.next();
			if(container.contains(childBinding.container)) {
				if(childBinding.parent == null) {
					this.removeRootBinding(js.Boot.__cast(childBinding , robotlegs.bender.extensions.viewManager.impl.ContainerBinding));
					childBinding.parent = binding;
				} else if(container.contains(childBinding.parent.get_container())) childBinding.parent = binding;
			}
		}
		this.dispatchEvent(new robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent(robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent.CONTAINER_ADD,binding.get_container()));
		return binding;
	}
	,removeBinding: function(binding) {
		var key = binding.get_container();
		this._bindingByContainer.remove(key);
		var index;
		var _this = this.get_bindings();
		index = HxOverrides.indexOf(_this,binding,0);
		this.get_bindings().splice(index,1);
		binding.removeEventListener(robotlegs.bender.extensions.viewManager.impl.ContainerBindingEvent.BINDING_EMPTY,$bind(this,this.onBindingEmpty));
		if(binding.get_parent() == null) this.removeRootBinding(binding);
		var $it0 = this._bindingByContainer.iterator();
		while( $it0.hasNext() ) {
			var childBinding = $it0.next();
			if(childBinding.parent == binding) {
				childBinding.parent = binding.get_parent();
				if(childBinding.parent == null) this.addRootBinding(js.Boot.__cast(childBinding , robotlegs.bender.extensions.viewManager.impl.ContainerBinding));
			}
		}
		this.dispatchEvent(new robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent(robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent.CONTAINER_REMOVE,binding.get_container()));
	}
	,addRootBinding: function(binding) {
		this.get_rootBindings().push(binding);
		this.dispatchEvent(new robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent(robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent.ROOT_CONTAINER_ADD,binding.get_container()));
	}
	,removeRootBinding: function(binding) {
		var index;
		var _this = this.get_rootBindings();
		index = HxOverrides.indexOf(_this,binding,0);
		this.get_rootBindings().splice(index,1);
		this.dispatchEvent(new robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent(robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent.ROOT_CONTAINER_REMOVE,binding.get_container()));
	}
	,onBindingEmpty: function(event) {
		this.removeBinding(js.Boot.__cast(event.target , robotlegs.bender.extensions.viewManager.impl.ContainerBinding));
	}
	,__class__: robotlegs.bender.extensions.viewManager.impl.ContainerRegistry
	,__properties__: {get_rootBindings:"get_rootBindings",get_bindings:"get_bindings"}
});
robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent = function(type,container) {
	openfl.events.Event.call(this,type);
	this.container = container;
};
$hxClasses["robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent"] = robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent;
robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent.__name__ = ["robotlegs","bender","extensions","viewManager","impl","ContainerRegistryEvent"];
robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent.__super__ = openfl.events.Event;
robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent.prototype = $extend(openfl.events.Event.prototype,{
	container: null
	,clone: function() {
		return new robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent(this.type,this.container);
	}
	,__class__: robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent
});
robotlegs.bender.extensions.viewManager.impl.DisplaylistTraverser = function(display) {
	this.childRemoved = new msignal.Signal1(openfl.display.DisplayObject);
	this.childAdded = new msignal.Signal1(openfl.display.DisplayObject);
	this.active = true;
	this.childTraversers = [];
	this.numChildrenRegistered = 0;
	this.display = display;
	this.display.addEventListener(openfl.events.Event.ENTER_FRAME,$bind(this,this.CheckTree));
	this.display.addEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.CheckTree));
};
$hxClasses["robotlegs.bender.extensions.viewManager.impl.DisplaylistTraverser"] = robotlegs.bender.extensions.viewManager.impl.DisplaylistTraverser;
robotlegs.bender.extensions.viewManager.impl.DisplaylistTraverser.__name__ = ["robotlegs","bender","extensions","viewManager","impl","DisplaylistTraverser"];
robotlegs.bender.extensions.viewManager.impl.DisplaylistTraverser.prototype = {
	display: null
	,numChildrenRegistered: null
	,childTraversers: null
	,active: null
	,childAdded: null
	,childRemoved: null
	,CheckTree: function(e) {
		if(this.display.parent != null && this.get_numChildrenRegistered() != this.display.get_numChildren()) this.Update();
	}
	,dispose: function() {
		if(this.display != null) this.display.removeEventListener(openfl.events.Event.ENTER_FRAME,$bind(this,this.CheckTree));
	}
	,Update: function() {
		var _g1 = 0;
		var _g = this.childTraversers.length;
		while(_g1 < _g) {
			var k = _g1++;
			this.childTraversers[k].active = false;
		}
		var _g11 = 0;
		var _g2 = this.display.get_numChildren();
		while(_g11 < _g2) {
			var i = _g11++;
			var alreadyAdded = false;
			var _g3 = 0;
			var _g21 = this.childTraversers.length;
			while(_g3 < _g21) {
				var j = _g3++;
				if(this.display.getChildAt(i) == this.childTraversers[j].display) {
					this.childTraversers[j].active = true;
					alreadyAdded = true;
					break;
				}
			}
			if(!alreadyAdded) {
				var traverser = new robotlegs.bender.extensions.viewManager.impl.DisplaylistTraverser(this.display.getChildAt(i));
				traverser.childAdded.add($bind(this,this.OnChildrenAdded));
				traverser.childRemoved.add($bind(this,this.OnChildrenRemove));
				this.childTraversers.push(traverser);
				this.childAdded.dispatch(this.display.getChildAt(i));
			}
		}
		var _g12 = 0;
		var _g4 = this.childTraversers.length;
		while(_g12 < _g4) {
			var l = _g12++;
			if(!this.childTraversers[l].active) {
				var traverserToRemove = this.childTraversers[l];
				traverserToRemove.childAdded.remove($bind(this,this.OnChildrenAdded));
				traverserToRemove.childRemoved.remove($bind(this,this.OnChildrenRemove));
				this.childTraversers.splice(l,1);
				this.childRemoved.dispatch(traverserToRemove.display);
				traverserToRemove.dispose();
			}
		}
	}
	,get_numChildrenRegistered: function() {
		return this.childTraversers.length;
	}
	,OnChildrenAdded: function(display) {
		this.childAdded.dispatch(display);
	}
	,OnChildrenRemove: function(display) {
		this.childRemoved.dispatch(display);
	}
	,__class__: robotlegs.bender.extensions.viewManager.impl.DisplaylistTraverser
	,__properties__: {get_numChildrenRegistered:"get_numChildrenRegistered"}
};
robotlegs.bender.extensions.viewManager.impl.ManualStageObserver = function(containerRegistry) {
	this._registry = containerRegistry;
	this._registry.addEventListener(robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent.CONTAINER_ADD,$bind(this,this.onContainerAdd));
	this._registry.addEventListener(robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent.CONTAINER_REMOVE,$bind(this,this.onContainerRemove));
	var _g = 0;
	var _g1 = this._registry.get_bindings();
	while(_g < _g1.length) {
		var binding = _g1[_g];
		++_g;
		this.addContainerListener(binding.get_container());
	}
};
$hxClasses["robotlegs.bender.extensions.viewManager.impl.ManualStageObserver"] = robotlegs.bender.extensions.viewManager.impl.ManualStageObserver;
robotlegs.bender.extensions.viewManager.impl.ManualStageObserver.__name__ = ["robotlegs","bender","extensions","viewManager","impl","ManualStageObserver"];
robotlegs.bender.extensions.viewManager.impl.ManualStageObserver.prototype = {
	_registry: null
	,destroy: function() {
		this._registry.removeEventListener(robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent.CONTAINER_ADD,$bind(this,this.onContainerAdd));
		this._registry.removeEventListener(robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent.CONTAINER_REMOVE,$bind(this,this.onContainerRemove));
		var _g = 0;
		var _g1 = this._registry.get_bindings();
		while(_g < _g1.length) {
			var binding = _g1[_g];
			++_g;
			this.removeContainerListener(binding.get_container());
		}
	}
	,onContainerAdd: function(event) {
		this.addContainerListener(event.container);
	}
	,onContainerRemove: function(event) {
		this.removeContainerListener(event.container);
	}
	,addContainerListener: function(container) {
		container.addEventListener(robotlegs.bender.extensions.viewManager.impl.ConfigureViewEvent.CONFIGURE_VIEW,$bind(this,this.onConfigureView));
	}
	,removeContainerListener: function(container) {
		container.removeEventListener(robotlegs.bender.extensions.viewManager.impl.ConfigureViewEvent.CONFIGURE_VIEW,$bind(this,this.onConfigureView));
	}
	,onConfigureView: function(event) {
		event.stopImmediatePropagation();
		var container;
		container = js.Boot.__cast(event.currentTarget , openfl.display.DisplayObjectContainer);
		var view;
		view = js.Boot.__cast(event.target , openfl.display.DisplayObject);
		var type = Type.getClass(view);
		this._registry.getBinding(container).handleView(view,type);
	}
	,__class__: robotlegs.bender.extensions.viewManager.impl.ManualStageObserver
};
robotlegs.bender.extensions.viewManager.impl.StageCrawler = function(containerBinding) {
	this._binding = containerBinding;
};
$hxClasses["robotlegs.bender.extensions.viewManager.impl.StageCrawler"] = robotlegs.bender.extensions.viewManager.impl.StageCrawler;
robotlegs.bender.extensions.viewManager.impl.StageCrawler.__name__ = ["robotlegs","bender","extensions","viewManager","impl","StageCrawler"];
robotlegs.bender.extensions.viewManager.impl.StageCrawler.prototype = {
	_binding: null
	,scan: function(view) {
		this.scanContainer(view);
	}
	,scanContainer: function(container) {
		this.processView(container);
		var numChildren = container.get_numChildren();
		var _g = 0;
		while(_g < numChildren) {
			var i = _g++;
			var child = container.getChildAt(i);
			if(js.Boot.__instanceof(child,openfl.display.DisplayObjectContainer)) this.scanContainer(js.Boot.__cast(child , openfl.display.DisplayObjectContainer)); else this.processView(child);
		}
	}
	,processView: function(view) {
		this._binding.handleView(view,Type.getClass(view));
	}
	,__class__: robotlegs.bender.extensions.viewManager.impl.StageCrawler
};
robotlegs.bender.extensions.viewManager.impl.StageObserver = function(containerRegistry) {
	this._filter = new EReg("^mx\\.|^spark\\.|^flash\\.","");
	this._registry = containerRegistry;
	this._registry.addEventListener(robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent.ROOT_CONTAINER_ADD,$bind(this,this.onRootContainerAdd));
	this._registry.addEventListener(robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent.ROOT_CONTAINER_REMOVE,$bind(this,this.onRootContainerRemove));
	var _g = 0;
	var _g1 = this._registry.get_rootBindings();
	while(_g < _g1.length) {
		var binding = _g1[_g];
		++_g;
		this.addRootListener(binding.get_container());
	}
};
$hxClasses["robotlegs.bender.extensions.viewManager.impl.StageObserver"] = robotlegs.bender.extensions.viewManager.impl.StageObserver;
robotlegs.bender.extensions.viewManager.impl.StageObserver.__name__ = ["robotlegs","bender","extensions","viewManager","impl","StageObserver"];
robotlegs.bender.extensions.viewManager.impl.StageObserver.prototype = {
	_filter: null
	,_registry: null
	,traver: null
	,destroy: function() {
		this._registry.removeEventListener(robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent.ROOT_CONTAINER_ADD,$bind(this,this.onRootContainerAdd));
		this._registry.removeEventListener(robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent.ROOT_CONTAINER_REMOVE,$bind(this,this.onRootContainerRemove));
		var _g = 0;
		var _g1 = this._registry.get_rootBindings();
		while(_g < _g1.length) {
			var binding = _g1[_g];
			++_g;
			this.removeRootListener(binding.get_container());
		}
	}
	,onRootContainerAdd: function(event) {
		this.addRootListener(event.container);
	}
	,onRootContainerRemove: function(event) {
		this.removeRootListener(event.container);
	}
	,addRootListener: function(container) {
		if(this.traver != null) this.traver.childAdded.remove($bind(this,this.OnChildAdded));
		this.traver = new robotlegs.bender.extensions.viewManager.impl.DisplaylistTraverser(container);
		this.traver.childAdded.add($bind(this,this.OnChildAdded));
	}
	,OnChildAdded: function(display) {
		haxe.Log.trace("add: " + Std.string(display),{ fileName : "StageObserver.hx", lineNumber : 127, className : "robotlegs.bender.extensions.viewManager.impl.StageObserver", methodName : "OnChildAdded"});
		this.addView(display);
	}
	,removeRootListener: function(container) {
		if(this.traver != null) this.traver.childAdded.remove($bind(this,this.OnChildAdded));
	}
	,addView: function(view) {
		var qcn = org.swiftsuspenders.utils.CallProxy.replaceClassName(Type.getClass(view));
		haxe.Log.trace("qcn = " + qcn,{ fileName : "StageObserver.hx", lineNumber : 154, className : "robotlegs.bender.extensions.viewManager.impl.StageObserver", methodName : "addView"});
		var filtered = this._filter.match(qcn);
		if(filtered) return;
		var type = Type.getClass(view);
		haxe.Log.trace("type = " + Std.string(type),{ fileName : "StageObserver.hx", lineNumber : 161, className : "robotlegs.bender.extensions.viewManager.impl.StageObserver", methodName : "addView"});
		var binding = this._registry.findParentBinding(view);
		haxe.Log.trace("binding.container = " + Std.string(binding.get_container()),{ fileName : "StageObserver.hx", lineNumber : 164, className : "robotlegs.bender.extensions.viewManager.impl.StageObserver", methodName : "addView"});
		haxe.Log.trace("binding = " + Std.string(binding),{ fileName : "StageObserver.hx", lineNumber : 165, className : "robotlegs.bender.extensions.viewManager.impl.StageObserver", methodName : "addView"});
		while(binding != null) {
			binding.handleView(view,type);
			binding = binding.get_parent();
		}
	}
	,__class__: robotlegs.bender.extensions.viewManager.impl.StageObserver
};
robotlegs.bender.extensions.viewManager.impl.ViewManager = function(containerRegistry) {
	this._handlers = new Array();
	this.containers = new Array();
	this._registry = containerRegistry;
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["robotlegs.bender.extensions.viewManager.impl.ViewManager"] = robotlegs.bender.extensions.viewManager.impl.ViewManager;
robotlegs.bender.extensions.viewManager.impl.ViewManager.__name__ = ["robotlegs","bender","extensions","viewManager","impl","ViewManager"];
robotlegs.bender.extensions.viewManager.impl.ViewManager.__interfaces__ = [robotlegs.bender.extensions.viewManager.api.IViewManager];
robotlegs.bender.extensions.viewManager.impl.ViewManager.__super__ = openfl.events.EventDispatcher;
robotlegs.bender.extensions.viewManager.impl.ViewManager.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	containers: null
	,get_containers: function() {
		return this.containers;
	}
	,_handlers: null
	,_registry: null
	,addContainer: function(container) {
		if(this.validContainer(container) == false) return;
		this.get_containers().push(container);
		var _g = 0;
		var _g1 = this._handlers;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			this._registry.addContainer(container).addHandler(handler);
		}
		this.dispatchEvent(new robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent(robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent.CONTAINER_ADD,container));
	}
	,removeContainer: function(container) {
		var index;
		var _this = this.get_containers();
		index = HxOverrides.indexOf(_this,container,0);
		if(index == -1) return;
		this.get_containers().splice(index,1);
		var binding = this._registry.getBinding(container);
		var _g = 0;
		var _g1 = this._handlers;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			binding.removeHandler(handler);
		}
		this.dispatchEvent(new robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent(robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent.CONTAINER_REMOVE,container));
	}
	,addViewHandler: function(handler) {
		if(HxOverrides.indexOf(this._handlers,handler,0) != -1) return;
		this._handlers.push(handler);
		var _g = 0;
		var _g1 = this.get_containers();
		while(_g < _g1.length) {
			var container = _g1[_g];
			++_g;
			this._registry.addContainer(container).addHandler(handler);
		}
		this.dispatchEvent(new robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent(robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent.HANDLER_ADD,null,handler));
	}
	,removeViewHandler: function(handler) {
		var index = HxOverrides.indexOf(this._handlers,handler,0);
		if(index == -1) return;
		this._handlers.splice(index,1);
		var _g = 0;
		var _g1 = this.get_containers();
		while(_g < _g1.length) {
			var container = _g1[_g];
			++_g;
			this._registry.getBinding(container).removeHandler(handler);
		}
		this.dispatchEvent(new robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent(robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent.HANDLER_REMOVE,null,handler));
	}
	,removeAllHandlers: function() {
		var _g = 0;
		var _g1 = this.get_containers();
		while(_g < _g1.length) {
			var container = _g1[_g];
			++_g;
			var binding = this._registry.getBinding(container);
			var _g2 = 0;
			var _g3 = this._handlers;
			while(_g2 < _g3.length) {
				var handler = _g3[_g2];
				++_g2;
				binding.removeHandler(handler);
			}
		}
	}
	,validContainer: function(container) {
		var _g = 0;
		var _g1 = this.get_containers();
		while(_g < _g1.length) {
			var registeredContainer = _g1[_g];
			++_g;
			if(container == registeredContainer) return false;
			if(registeredContainer.contains(container) || container.contains(registeredContainer)) throw new openfl.errors.Error("Containers can not be nested");
		}
		return true;
	}
	,__class__: robotlegs.bender.extensions.viewManager.impl.ViewManager
	,__properties__: {get_containers:"get_containers"}
});
robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent = function(type,container,handler) {
	openfl.events.Event.call(this,type);
	this.container = container;
	this.handler = handler;
};
$hxClasses["robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent"] = robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent;
robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent.__name__ = ["robotlegs","bender","extensions","viewManager","impl","ViewManagerEvent"];
robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent.__super__ = openfl.events.Event;
robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent.prototype = $extend(openfl.events.Event.prototype,{
	container: null
	,handler: null
	,clone: function() {
		return new robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent(this.type,this.container,this.handler);
	}
	,__class__: robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent
});
robotlegs.bender.extensions.viewProcessorMap = {};
robotlegs.bender.extensions.viewProcessorMap.ViewProcessorMapExtension = function() { };
$hxClasses["robotlegs.bender.extensions.viewProcessorMap.ViewProcessorMapExtension"] = robotlegs.bender.extensions.viewProcessorMap.ViewProcessorMapExtension;
robotlegs.bender.extensions.viewProcessorMap.ViewProcessorMapExtension.__name__ = ["robotlegs","bender","extensions","viewProcessorMap","ViewProcessorMapExtension"];
robotlegs.bender.extensions.viewProcessorMap.ViewProcessorMapExtension.__interfaces__ = [robotlegs.bender.framework.api.IExtension];
robotlegs.bender.extensions.viewProcessorMap.ViewProcessorMapExtension.prototype = {
	_injector: null
	,_viewProcessorMap: null
	,_viewManager: null
	,_viewProcessorFactory: null
	,extend: function(context) {
		context.beforeInitializing($bind(this,this.beforeInitializing));
		context.beforeDestroying($bind(this,this.beforeDestroying));
		context.whenDestroying($bind(this,this.whenDestroying));
		this._injector = context.get_injector();
		this._injector.map(robotlegs.bender.extensions.viewProcessorMap.impl.IViewProcessorFactory).toValue(new robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorFactory(this._injector.createChild()));
		this._injector.map(robotlegs.bender.extensions.viewProcessorMap.api.IViewProcessorMap).toSingleton(robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorMap);
	}
	,beforeInitializing: function() {
		this._viewProcessorMap = this._injector.getInstance(robotlegs.bender.extensions.viewProcessorMap.api.IViewProcessorMap);
		this._viewProcessorFactory = this._injector.getInstance(robotlegs.bender.extensions.viewProcessorMap.impl.IViewProcessorFactory);
		if(this._injector.satisfiesDirectly(robotlegs.bender.extensions.viewManager.api.IViewManager)) {
			this._viewManager = this._injector.getInstance(robotlegs.bender.extensions.viewManager.api.IViewManager);
			this._viewManager.addViewHandler(js.Boot.__cast(this._viewProcessorMap , robotlegs.bender.extensions.viewManager.api.IViewHandler));
		}
	}
	,beforeDestroying: function() {
		this._viewProcessorFactory.runAllUnprocessors();
		if(this._injector.satisfiesDirectly(robotlegs.bender.extensions.viewManager.api.IViewManager)) {
			this._viewManager = this._injector.getInstance(robotlegs.bender.extensions.viewManager.api.IViewManager);
			this._viewManager.removeViewHandler(js.Boot.__cast(this._viewProcessorMap , robotlegs.bender.extensions.viewManager.api.IViewHandler));
		}
	}
	,whenDestroying: function() {
		if(this._injector.satisfiesDirectly(robotlegs.bender.extensions.viewProcessorMap.api.IViewProcessorMap)) this._injector.unmap(robotlegs.bender.extensions.viewProcessorMap.api.IViewProcessorMap);
		if(this._injector.satisfiesDirectly(robotlegs.bender.extensions.viewProcessorMap.impl.IViewProcessorFactory)) this._injector.unmap(robotlegs.bender.extensions.viewProcessorMap.impl.IViewProcessorFactory);
	}
	,__class__: robotlegs.bender.extensions.viewProcessorMap.ViewProcessorMapExtension
};
robotlegs.bender.extensions.viewProcessorMap.api = {};
robotlegs.bender.extensions.viewProcessorMap.api.IViewProcessorMap = function() { };
$hxClasses["robotlegs.bender.extensions.viewProcessorMap.api.IViewProcessorMap"] = robotlegs.bender.extensions.viewProcessorMap.api.IViewProcessorMap;
robotlegs.bender.extensions.viewProcessorMap.api.IViewProcessorMap.__name__ = ["robotlegs","bender","extensions","viewProcessorMap","api","IViewProcessorMap"];
robotlegs.bender.extensions.viewProcessorMap.api.IViewProcessorMap.prototype = {
	mapMatcher: null
	,map: null
	,unmapMatcher: null
	,unmap: null
	,process: null
	,unprocess: null
	,__class__: robotlegs.bender.extensions.viewProcessorMap.api.IViewProcessorMap
};
robotlegs.bender.extensions.viewProcessorMap.api.ViewProcessorMapError = function(message) {
	openfl.errors.Error.call(this,message);
};
$hxClasses["robotlegs.bender.extensions.viewProcessorMap.api.ViewProcessorMapError"] = robotlegs.bender.extensions.viewProcessorMap.api.ViewProcessorMapError;
robotlegs.bender.extensions.viewProcessorMap.api.ViewProcessorMapError.__name__ = ["robotlegs","bender","extensions","viewProcessorMap","api","ViewProcessorMapError"];
robotlegs.bender.extensions.viewProcessorMap.api.ViewProcessorMapError.__super__ = openfl.errors.Error;
robotlegs.bender.extensions.viewProcessorMap.api.ViewProcessorMapError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: robotlegs.bender.extensions.viewProcessorMap.api.ViewProcessorMapError
});
robotlegs.bender.extensions.viewProcessorMap.dsl = {};
robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorMapper = function() { };
$hxClasses["robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorMapper"] = robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorMapper;
robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorMapper.__name__ = ["robotlegs","bender","extensions","viewProcessorMap","dsl","IViewProcessorMapper"];
robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorMapper.prototype = {
	toProcess: null
	,toInjection: null
	,toNoProcess: null
	,__class__: robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorMapper
};
robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorMapping = function() { };
$hxClasses["robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorMapping"] = robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorMapping;
robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorMapping.__name__ = ["robotlegs","bender","extensions","viewProcessorMap","dsl","IViewProcessorMapping"];
robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorMapping.prototype = {
	matcher: null
	,processorClass: null
	,guards: null
	,hooks: null
	,__class__: robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorMapping
};
robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorMappingConfig = function() { };
$hxClasses["robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorMappingConfig"] = robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorMappingConfig;
robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorMappingConfig.__name__ = ["robotlegs","bender","extensions","viewProcessorMap","dsl","IViewProcessorMappingConfig"];
robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorMappingConfig.prototype = {
	withGuards: null
	,withHooks: null
	,__class__: robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorMappingConfig
};
robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorUnmapper = function() { };
$hxClasses["robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorUnmapper"] = robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorUnmapper;
robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorUnmapper.__name__ = ["robotlegs","bender","extensions","viewProcessorMap","dsl","IViewProcessorUnmapper"];
robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorUnmapper.prototype = {
	fromProcess: null
	,fromNoProcess: null
	,fromInjection: null
	,fromAll: null
	,__class__: robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorUnmapper
};
robotlegs.bender.extensions.viewProcessorMap.impl = {};
robotlegs.bender.extensions.viewProcessorMap.impl.IViewProcessorFactory = function() { };
$hxClasses["robotlegs.bender.extensions.viewProcessorMap.impl.IViewProcessorFactory"] = robotlegs.bender.extensions.viewProcessorMap.impl.IViewProcessorFactory;
robotlegs.bender.extensions.viewProcessorMap.impl.IViewProcessorFactory.__name__ = ["robotlegs","bender","extensions","viewProcessorMap","impl","IViewProcessorFactory"];
robotlegs.bender.extensions.viewProcessorMap.impl.IViewProcessorFactory.prototype = {
	runProcessors: null
	,runUnprocessors: null
	,runAllUnprocessors: null
	,__class__: robotlegs.bender.extensions.viewProcessorMap.impl.IViewProcessorFactory
};
robotlegs.bender.extensions.viewProcessorMap.impl.IViewProcessorViewHandler = function() { };
$hxClasses["robotlegs.bender.extensions.viewProcessorMap.impl.IViewProcessorViewHandler"] = robotlegs.bender.extensions.viewProcessorMap.impl.IViewProcessorViewHandler;
robotlegs.bender.extensions.viewProcessorMap.impl.IViewProcessorViewHandler.__name__ = ["robotlegs","bender","extensions","viewProcessorMap","impl","IViewProcessorViewHandler"];
robotlegs.bender.extensions.viewProcessorMap.impl.IViewProcessorViewHandler.prototype = {
	addMapping: null
	,removeMapping: null
	,processItem: null
	,unprocessItem: null
	,__class__: robotlegs.bender.extensions.viewProcessorMap.impl.IViewProcessorViewHandler
};
robotlegs.bender.extensions.viewProcessorMap.impl.NullProcessor = function() { };
$hxClasses["robotlegs.bender.extensions.viewProcessorMap.impl.NullProcessor"] = robotlegs.bender.extensions.viewProcessorMap.impl.NullProcessor;
robotlegs.bender.extensions.viewProcessorMap.impl.NullProcessor.__name__ = ["robotlegs","bender","extensions","viewProcessorMap","impl","NullProcessor"];
robotlegs.bender.extensions.viewProcessorMap.impl.NullProcessor.prototype = {
	process: function(view,type,injector) {
	}
	,unprocess: function(view,type,injector) {
	}
	,__class__: robotlegs.bender.extensions.viewProcessorMap.impl.NullProcessor
};
robotlegs.bender.extensions.viewProcessorMap.impl.NullViewProcessorUnmapper = function() {
};
$hxClasses["robotlegs.bender.extensions.viewProcessorMap.impl.NullViewProcessorUnmapper"] = robotlegs.bender.extensions.viewProcessorMap.impl.NullViewProcessorUnmapper;
robotlegs.bender.extensions.viewProcessorMap.impl.NullViewProcessorUnmapper.__name__ = ["robotlegs","bender","extensions","viewProcessorMap","impl","NullViewProcessorUnmapper"];
robotlegs.bender.extensions.viewProcessorMap.impl.NullViewProcessorUnmapper.__interfaces__ = [robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorUnmapper];
robotlegs.bender.extensions.viewProcessorMap.impl.NullViewProcessorUnmapper.prototype = {
	fromProcess: function(processorClassOrInstance) {
	}
	,fromAll: function() {
	}
	,fromNoProcess: function() {
	}
	,fromInjection: function() {
	}
	,__class__: robotlegs.bender.extensions.viewProcessorMap.impl.NullViewProcessorUnmapper
};
robotlegs.bender.extensions.viewProcessorMap.impl.ViewInjectionProcessor = function() {
	this._injectedObjects = new haxe.ds.StringMap();
};
$hxClasses["robotlegs.bender.extensions.viewProcessorMap.impl.ViewInjectionProcessor"] = robotlegs.bender.extensions.viewProcessorMap.impl.ViewInjectionProcessor;
robotlegs.bender.extensions.viewProcessorMap.impl.ViewInjectionProcessor.__name__ = ["robotlegs","bender","extensions","viewProcessorMap","impl","ViewInjectionProcessor"];
robotlegs.bender.extensions.viewProcessorMap.impl.ViewInjectionProcessor.prototype = {
	_injectedObjects: null
	,process: function(view,type,injector) {
		if(!(function($this) {
			var $r;
			var key = org.swiftsuspenders.utils.UID.instanceID(view);
			$r = $this._injectedObjects.get(key);
			return $r;
		}(this))) this.injectAndRemember(view,injector);
	}
	,unprocess: function(view,type,injector) {
	}
	,injectAndRemember: function(view,injector) {
		injector.injectInto(view);
		var k = org.swiftsuspenders.utils.UID.instanceID(view);
		var v = view;
		this._injectedObjects.set(k,v);
		v;
	}
	,__class__: robotlegs.bender.extensions.viewProcessorMap.impl.ViewInjectionProcessor
};
robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorFactory = function(injector) {
	this._listenersByView = new haxe.ds.StringMap();
	this._injector = injector;
};
$hxClasses["robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorFactory"] = robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorFactory;
robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorFactory.__name__ = ["robotlegs","bender","extensions","viewProcessorMap","impl","ViewProcessorFactory"];
robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorFactory.__interfaces__ = [robotlegs.bender.extensions.viewProcessorMap.impl.IViewProcessorFactory];
robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorFactory.prototype = {
	_injector: null
	,_listenersByView: null
	,runProcessors: function(view,type,processorMappings) {
		this.createRemovedListener(view,type,processorMappings);
		var filter;
		var _g = 0;
		while(_g < processorMappings.length) {
			var mapping = processorMappings[_g];
			++_g;
			filter = mapping.matcher;
			this.mapTypeForFilterBinding(filter,type,view);
			this.runProcess(view,type,mapping);
			this.unmapTypeForFilterBinding(filter,type,view);
		}
	}
	,runUnprocessors: function(view,type,processorMappings) {
		var _g = 0;
		while(_g < processorMappings.length) {
			var mapping = processorMappings[_g];
			++_g;
			if(mapping.processor == null) mapping.processor = this.createProcessor(mapping.processorClass);
			mapping.processor.unprocess(view,type,this._injector);
		}
	}
	,runAllUnprocessors: function() {
		var $it0 = this._listenersByView.iterator();
		while( $it0.hasNext() ) {
			var removalHandlers = $it0.next();
			var removalHandlers2;
			removalHandlers2 = js.Boot.__cast(removalHandlers , Array);
			var iLength = removalHandlers2.length;
			var _g = 0;
			while(_g < iLength) {
				var i = _g++;
				if(Reflect.isFunction(removalHandlers2[i])) {
					var removalHandler = removalHandlers2[i];
					removalHandler(null);
				}
			}
		}
	}
	,runProcess: function(view,type,mapping) {
		if(robotlegs.bender.framework.impl.GuardsApprove.call(mapping.get_guards(),this._injector)) {
			if(mapping.get_processor() == null) mapping.set_processor(this.createProcessor(mapping.get_processorClass()));
			robotlegs.bender.framework.impl.ApplyHooks.call(mapping.get_hooks(),this._injector);
			mapping.get_processor().process(view,type,this._injector);
		}
	}
	,createProcessor: function(processorClass) {
		if(this._injector.hasMapping(processorClass)) this._injector.map(processorClass).asSingleton();
		try {
			return this._injector.getInstance(processorClass);
		} catch( error ) {
			if( js.Boot.__instanceof(error,org.swiftsuspenders.errors.InjectorInterfaceConstructionError) ) {
				var errorMsg = "The view processor " + Std.string(processorClass) + " has not been mapped in the injector, " + "and it is not possible to instantiate an interface. " + "Please map a concrete type against this interface.";
				throw new robotlegs.bender.extensions.viewProcessorMap.api.ViewProcessorMapError(errorMsg);
			} else throw(error);
		}
		return null;
	}
	,mapTypeForFilterBinding: function(filter,type,view) {
		var requiredType;
		var requiredTypes = this.requiredTypesFor(filter,type);
		var _g = 0;
		while(_g < requiredTypes.length) {
			var requiredType1 = requiredTypes[_g];
			++_g;
			this._injector.map(requiredType1).toValue(view);
		}
	}
	,unmapTypeForFilterBinding: function(filter,type,view) {
		var requiredType;
		var requiredTypes = this.requiredTypesFor(filter,type);
		var _g = 0;
		while(_g < requiredTypes.length) {
			var requiredType1 = requiredTypes[_g];
			++_g;
			if(this._injector.hasDirectMapping(requiredType1)) this._injector.unmap(requiredType1);
		}
	}
	,requiredTypesFor: function(filter,type) {
		var requiredTypes = filter.get_allOfTypes().concat(filter.get_anyOfTypes());
		if(HxOverrides.indexOf(requiredTypes,type,0) == -1) requiredTypes.push(type);
		return requiredTypes;
	}
	,createRemovedListener: function(view,type,processorMappings) {
		var viewProcessorFactoryCreateRemovedListener = new robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorFactoryCreateRemovedListener();
		viewProcessorFactoryCreateRemovedListener.init(this._listenersByView,$bind(this,this.runUnprocessors),$bind(this,this.removeHandlerFromView),view,type,processorMappings);
	}
	,removeHandlerFromView: function(view,handler) {
		if((function($this) {
			var $r;
			var key = org.swiftsuspenders.utils.UID.instanceID(view);
			$r = $this._listenersByView.get(key);
			return $r;
		}(this)) && ((function($this) {
			var $r;
			var key1 = org.swiftsuspenders.utils.UID.instanceID(view);
			$r = $this._listenersByView.get(key1);
			return $r;
		}(this))).length > 0) {
			var handlerIndex = ((function($this) {
				var $r;
				var key2 = org.swiftsuspenders.utils.UID.instanceID(view);
				$r = $this._listenersByView.get(key2);
				return $r;
			}(this))).indexOf(handler);
			((function($this) {
				var $r;
				var key3 = org.swiftsuspenders.utils.UID.instanceID(view);
				$r = $this._listenersByView.get(key3);
				return $r;
			}(this))).splice(handlerIndex,1);
			if(((function($this) {
				var $r;
				var key4 = org.swiftsuspenders.utils.UID.instanceID(view);
				$r = $this._listenersByView.get(key4);
				return $r;
			}(this))).length == 0) {
				var key5 = org.swiftsuspenders.utils.UID.instanceID(view);
				this._listenersByView.remove(key5);
			}
		}
	}
	,__class__: robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorFactory
};
robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorFactoryCreateRemovedListener = function() {
};
$hxClasses["robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorFactoryCreateRemovedListener"] = robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorFactoryCreateRemovedListener;
robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorFactoryCreateRemovedListener.__name__ = ["robotlegs","bender","extensions","viewProcessorMap","impl","ViewProcessorFactoryCreateRemovedListener"];
robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorFactoryCreateRemovedListener.prototype = {
	_listenersByView: null
	,view: null
	,type: null
	,processorMappings: null
	,runUnprocessors: null
	,removeHandlerFromView: null
	,init: function(_listenersByView,runUnprocessors,removeHandlerFromView,view,type,processorMappings) {
		this.removeHandlerFromView = removeHandlerFromView;
		this.runUnprocessors = runUnprocessors;
		this.processorMappings = processorMappings;
		this.type = type;
		this.view = view;
		this._listenersByView = _listenersByView;
		if(js.Boot.__instanceof(view,openfl.display.DisplayObject)) {
			if((function($this) {
				var $r;
				var key = org.swiftsuspenders.utils.UID.instanceID(view);
				$r = _listenersByView.get(key);
				return $r;
			}(this)) == null) {
				var k = org.swiftsuspenders.utils.UID.instanceID(view);
				var v = [];
				_listenersByView.set(k,v);
				v;
			}
			((function($this) {
				var $r;
				var key1 = org.swiftsuspenders.utils.UID.instanceID(view);
				$r = _listenersByView.get(key1);
				return $r;
			}(this))).push($bind(this,this.handler));
			(js.Boot.__cast(view , openfl.display.DisplayObject)).addEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.handler),false,0,true);
		}
	}
	,handler: function(e) {
		this.runUnprocessors(this.view,this.type,this.processorMappings);
		(js.Boot.__cast(this.view , openfl.display.DisplayObject)).removeEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.handler));
		this.removeHandlerFromView(this.view,$bind(this,this.handler));
	}
	,__class__: robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorFactoryCreateRemovedListener
};
robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorMap = function(factory,handler) {
	this.NULL_UNMAPPER = new robotlegs.bender.extensions.viewProcessorMap.impl.NullViewProcessorUnmapper();
	this._mappers = new haxe.ds.StringMap();
	if(handler != null) this._handler = handler; else this._handler = new robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorViewHandler(factory);
};
$hxClasses["robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorMap"] = robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorMap;
robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorMap.__name__ = ["robotlegs","bender","extensions","viewProcessorMap","impl","ViewProcessorMap"];
robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorMap.__interfaces__ = [robotlegs.bender.extensions.viewManager.api.IViewHandler,robotlegs.bender.extensions.viewProcessorMap.api.IViewProcessorMap];
robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorMap.prototype = {
	_mappers: null
	,_handler: null
	,NULL_UNMAPPER: null
	,mapMatcher: function(matcher) {
		if((function($this) {
			var $r;
			var key = matcher.createTypeFilter().get_descriptor();
			$r = $this._mappers.get(key);
			return $r;
		}(this)) == null) {
			var k = matcher.createTypeFilter().get_descriptor();
			var v = this.createMapper(matcher);
			this._mappers.set(k,v);
			v;
		}
		var key1 = matcher.createTypeFilter().get_descriptor();
		return this._mappers.get(key1);
	}
	,map: function(type) {
		var matcher = new robotlegs.bender.extensions.matching.TypeMatcher().allOf([type]);
		return this.mapMatcher(matcher);
	}
	,unmapMatcher: function(matcher) {
		if((function($this) {
			var $r;
			var key = matcher.createTypeFilter().get_descriptor();
			$r = $this._mappers.get(key);
			return $r;
		}(this)) != null) {
			var key1 = matcher.createTypeFilter().get_descriptor();
			return this._mappers.get(key1);
		} else return this.NULL_UNMAPPER;
	}
	,unmap: function(type) {
		var matcher = new robotlegs.bender.extensions.matching.TypeMatcher().allOf([type]);
		return this.unmapMatcher(matcher);
	}
	,process: function(item) {
		var type = Type.getClass(item);
		this._handler.processItem(item,type);
	}
	,unprocess: function(item) {
		var type = Type.getClass(item);
		this._handler.unprocessItem(item,type);
	}
	,handleView: function(view,type) {
		this._handler.processItem(view,type);
	}
	,createMapper: function(matcher) {
		return new robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorMapper(matcher.createTypeFilter(),this._handler);
	}
	,__class__: robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorMap
};
robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorMapper = function(matcher,handler,logger) {
	this._mappings = new haxe.ds.StringMap();
	this._handler = handler;
	this._matcher = matcher;
	this._logger = logger;
};
$hxClasses["robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorMapper"] = robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorMapper;
robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorMapper.__name__ = ["robotlegs","bender","extensions","viewProcessorMap","impl","ViewProcessorMapper"];
robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorMapper.__interfaces__ = [robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorUnmapper,robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorMapper];
robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorMapper.prototype = {
	_mappings: null
	,_handler: null
	,_matcher: null
	,_logger: null
	,toProcess: function(processClassOrInstance) {
		var mapping;
		var key = processClassOrInstance;
		mapping = this._mappings.get(key);
		if(mapping != null) return this.overwriteMapping(mapping,processClassOrInstance); else return this.createMapping(processClassOrInstance);
	}
	,toInjection: function() {
		return this.toProcess(robotlegs.bender.extensions.viewProcessorMap.impl.ViewInjectionProcessor);
	}
	,toNoProcess: function() {
		return this.toProcess(robotlegs.bender.extensions.viewProcessorMap.impl.NullProcessor);
	}
	,fromProcess: function(processorClassOrInstance) {
		var mapping;
		var key = processorClassOrInstance;
		mapping = this._mappings.get(key);
		if(mapping != null) this.deleteMapping(mapping);
	}
	,fromAll: function() {
		var $it0 = this._mappings.iterator();
		while( $it0.hasNext() ) {
			var processor = $it0.next();
			this.fromProcess(processor);
		}
	}
	,fromNoProcess: function() {
		this.fromProcess(robotlegs.bender.extensions.viewProcessorMap.impl.NullProcessor);
	}
	,fromInjection: function() {
		this.fromProcess(robotlegs.bender.extensions.viewProcessorMap.impl.ViewInjectionProcessor);
	}
	,createMapping: function(processor) {
		var mapping = new robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorMapping(this._matcher,processor);
		this._handler.addMapping(mapping);
		var k = processor;
		this._mappings.set(k,mapping);
		mapping;
		if(this._logger != null) this._logger.debug("{0} mapped to {1}",[this._matcher,mapping]);
		return mapping;
	}
	,deleteMapping: function(mapping) {
		this._handler.removeMapping(mapping);
		var key = mapping.get_processor();
		this._mappings.remove(key);
		if(this._logger != null) this._logger.debug("{0} unmapped from {1}",[this._matcher,mapping]);
	}
	,overwriteMapping: function(mapping,processClassOrInstance) {
		if(this._logger != null) this._logger.warn("{0} is already mapped to {1}.\n" + "If you have overridden this mapping intentionally you can use \"unmap()\" " + "prior to your replacement mapping in order to avoid seeing this message.\n",[this._matcher,mapping]);
		this.deleteMapping(mapping);
		return this.createMapping(processClassOrInstance);
	}
	,__class__: robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorMapper
};
robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorMapping = function(matcher,processor) {
	this._hooks = [];
	this._guards = [];
	this._matcher = matcher;
	this.setProcessor(processor);
};
$hxClasses["robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorMapping"] = robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorMapping;
robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorMapping.__name__ = ["robotlegs","bender","extensions","viewProcessorMap","impl","ViewProcessorMapping"];
robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorMapping.__interfaces__ = [robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorMappingConfig,robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorMapping];
robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorMapping.prototype = {
	_matcher: null
	,matcher: null
	,get_matcher: function() {
		return this._matcher;
	}
	,_processor: null
	,get_processor: function() {
		return this._processor;
	}
	,set_processor: function(value) {
		this._processor = value;
		return this._processor;
	}
	,_processorClass: null
	,processorClass: null
	,get_processorClass: function() {
		return this._processorClass;
	}
	,_guards: null
	,guards: null
	,get_guards: function() {
		return this._guards;
	}
	,_hooks: null
	,hooks: null
	,get_hooks: function() {
		return this._hooks;
	}
	,withGuards: function(guards) {
		var _g1 = 0;
		var _g = guards.length;
		while(_g1 < _g) {
			var i = _g1++;
			this._guards.push(guards[i]);
		}
		return this;
	}
	,withHooks: function(hooks) {
		var _g1 = 0;
		var _g = hooks.length;
		while(_g1 < _g) {
			var i = _g1++;
			this._hooks.push(hooks[i]);
		}
		return this;
	}
	,toString: function() {
		return "Processor " + Std.string(this._processor);
	}
	,setProcessor: function(processor) {
		if(js.Boot.__instanceof(processor,Class)) this._processorClass = js.Boot.__cast(processor , Class); else {
			this._processor = processor;
			this._processorClass = Type.getClass(this._processor);
		}
	}
	,__class__: robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorMapping
	,__properties__: {get_hooks:"get_hooks",get_guards:"get_guards",get_processorClass:"get_processorClass",set_processor:"set_processor",get_processor:"get_processor",get_matcher:"get_matcher"}
};
robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorViewHandler = function(factory) {
	this._knownMappings = new haxe.ds.StringMap();
	this._mappings = [];
	this._factory = factory;
};
$hxClasses["robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorViewHandler"] = robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorViewHandler;
robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorViewHandler.__name__ = ["robotlegs","bender","extensions","viewProcessorMap","impl","ViewProcessorViewHandler"];
robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorViewHandler.__interfaces__ = [robotlegs.bender.extensions.viewProcessorMap.impl.IViewProcessorViewHandler];
robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorViewHandler.prototype = {
	_mappings: null
	,_knownMappings: null
	,_factory: null
	,addMapping: function(mapping) {
		var index = HxOverrides.indexOf(this._mappings,mapping,0);
		if(index > -1) return;
		this._mappings.push(mapping);
		this.flushCache();
	}
	,removeMapping: function(mapping) {
		var index = HxOverrides.indexOf(this._mappings,mapping,0);
		if(index == -1) return;
		this._mappings.splice(index,1);
		this.flushCache();
	}
	,processItem: function(item,type) {
		var interestedMappings = this.getInterestedMappingsFor(item,type);
		if(interestedMappings != null) this._factory.runProcessors(item,type,interestedMappings);
	}
	,unprocessItem: function(item,type) {
		var interestedMappings = this.getInterestedMappingsFor(item,type);
		if(interestedMappings != null) this._factory.runUnprocessors(item,type,interestedMappings);
	}
	,flushCache: function() {
		this._knownMappings = new haxe.ds.StringMap();
	}
	,getInterestedMappingsFor: function(view,type) {
		var mapping;
		var id = org.swiftsuspenders.utils.UID.classID(type);
		if(this._knownMappings.get(id) == false) return null;
		if(this._knownMappings.get(id) == null) {
			this._knownMappings.set(id,false);
			false;
			var _g = 0;
			var _g1 = this._mappings;
			while(_g < _g1.length) {
				var mapping1 = _g1[_g];
				++_g;
				if(mapping1.matcher.matches(view)) {
					if(this._knownMappings.get(id) == null) {
						var v = [];
						this._knownMappings.set(id,v);
						v;
					}
					this._knownMappings.get(id).push(mapping1);
				}
			}
			if(this._knownMappings.get(id) == false) return null;
		}
		return js.Boot.__cast(this._knownMappings.get(id) , Array);
	}
	,__class__: robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorViewHandler
};
robotlegs.bender.extensions.vigilance = {};
robotlegs.bender.extensions.vigilance.VigilanceExtension = function() {
	this._messageParser = new robotlegs.bender.extensions.enhancedLogging.impl.LogMessageParser();
};
$hxClasses["robotlegs.bender.extensions.vigilance.VigilanceExtension"] = robotlegs.bender.extensions.vigilance.VigilanceExtension;
robotlegs.bender.extensions.vigilance.VigilanceExtension.__name__ = ["robotlegs","bender","extensions","vigilance","VigilanceExtension"];
robotlegs.bender.extensions.vigilance.VigilanceExtension.__interfaces__ = [robotlegs.bender.framework.api.ILogTarget,robotlegs.bender.framework.api.IExtension];
robotlegs.bender.extensions.vigilance.VigilanceExtension.prototype = {
	_messageParser: null
	,extend: function(context) {
		context.get_injector().instantiateUnmapped(robotlegs.bender.extensions.vigilance.MetadataChecker).check();
		context.addLogTarget(this);
		context.get_injector().addEventListener(org.swiftsuspenders.mapping.MappingEvent.MAPPING_OVERRIDE,$bind(this,this.mappingOverrideHandler));
	}
	,log: function(source,level,timestamp,message,params) {
		if((function($this) {
			var $r;
			var b = robotlegs.bender.framework.api.LogLevel.WARN;
			$r = (function($this) {
				var $r;
				var aNeg = b < 0;
				var bNeg = level < 0;
				$r = aNeg != bNeg?aNeg:b >= level;
				return $r;
			}($this));
			return $r;
		}(this))) new robotlegs.bender.extensions.vigilance.VigilantError(this._messageParser.parseMessage(message,params));
	}
	,mappingOverrideHandler: function(event) {
		new org.swiftsuspenders.errors.InjectorError("Injector mapping override for type " + Std.string(event.mappedType) + " with name " + event.mappedName);
	}
	,__class__: robotlegs.bender.extensions.vigilance.VigilanceExtension
};
robotlegs.bender.extensions.vigilance.MetadataChecker = function() { };
$hxClasses["robotlegs.bender.extensions.vigilance.MetadataChecker"] = robotlegs.bender.extensions.vigilance.MetadataChecker;
robotlegs.bender.extensions.vigilance.MetadataChecker.__name__ = ["robotlegs","bender","extensions","vigilance","MetadataChecker"];
robotlegs.bender.extensions.vigilance.MetadataChecker.prototype = {
	context: null
	,check: function() {
		if(this.context == null) throw new robotlegs.bender.extensions.vigilance.VigilantError("It looks like custom metadata is being ignored by your compiler. " + "If you're compiling with the Flash IDE you need to open your " + "\"Publish Settings\" and select \"Publish SWC\". " + "See: https://github.com/robotlegs/robotlegs-framework/wiki/Common-Problems");
	}
	,__class__: robotlegs.bender.extensions.vigilance.MetadataChecker
};
robotlegs.bender.extensions.vigilance.VigilantError = function(message) {
	haxe.Log.trace(message,{ fileName : "VigilantError.hx", lineNumber : 30, className : "robotlegs.bender.extensions.vigilance.VigilantError", methodName : "new"});
};
$hxClasses["robotlegs.bender.extensions.vigilance.VigilantError"] = robotlegs.bender.extensions.vigilance.VigilantError;
robotlegs.bender.extensions.vigilance.VigilantError.__name__ = ["robotlegs","bender","extensions","vigilance","VigilantError"];
robotlegs.bender.extensions.vigilance.VigilantError.prototype = {
	__class__: robotlegs.bender.extensions.vigilance.VigilantError
};
robotlegs.bender.framework.api.IContext = function() { };
$hxClasses["robotlegs.bender.framework.api.IContext"] = robotlegs.bender.framework.api.IContext;
robotlegs.bender.framework.api.IContext.__name__ = ["robotlegs","bender","framework","api","IContext"];
robotlegs.bender.framework.api.IContext.__interfaces__ = [openfl.events.IEventDispatcher];
robotlegs.bender.framework.api.IContext.prototype = {
	injector: null
	,state: null
	,uninitialized: null
	,initialized: null
	,active: null
	,suspended: null
	,destroyed: null
	,install: null
	,configure: null
	,addChild: null
	,removeChild: null
	,addConfigHandler: null
	,getLogger: null
	,addLogTarget: null
	,detain: null
	,release: null
	,initialize: null
	,suspend: null
	,resume: null
	,destroy: null
	,beforeInitializing: null
	,whenInitializing: null
	,afterInitializing: null
	,beforeSuspending: null
	,whenSuspending: null
	,afterSuspending: null
	,beforeResuming: null
	,whenResuming: null
	,afterResuming: null
	,beforeDestroying: null
	,whenDestroying: null
	,afterDestroying: null
	,__class__: robotlegs.bender.framework.api.IContext
};
robotlegs.bender.framework.api.IInjector = function() { };
$hxClasses["robotlegs.bender.framework.api.IInjector"] = robotlegs.bender.framework.api.IInjector;
robotlegs.bender.framework.api.IInjector.__name__ = ["robotlegs","bender","framework","api","IInjector"];
robotlegs.bender.framework.api.IInjector.__interfaces__ = [openfl.events.IEventDispatcher];
robotlegs.bender.framework.api.IInjector.prototype = {
	addTypeDescription: null
	,getTypeDescription: null
	,hasMapping: null
	,hasDirectMapping: null
	,map: null
	,unmap: null
	,satisfies: null
	,satisfiesDirectly: null
	,getMapping: null
	,injectInto: null
	,getInstance: null
	,getOrCreateNewInstance: null
	,instantiateUnmapped: null
	,destroyInstance: null
	,teardown: null
	,createChild: null
	,__class__: robotlegs.bender.framework.api.IInjector
};
robotlegs.bender.framework.api.ILifecycle = function() { };
$hxClasses["robotlegs.bender.framework.api.ILifecycle"] = robotlegs.bender.framework.api.ILifecycle;
robotlegs.bender.framework.api.ILifecycle.__name__ = ["robotlegs","bender","framework","api","ILifecycle"];
robotlegs.bender.framework.api.ILifecycle.__interfaces__ = [openfl.events.IEventDispatcher];
robotlegs.bender.framework.api.ILifecycle.prototype = {
	get_state: null
	,get_target: null
	,get_uninitialized: null
	,get_initialized: null
	,get_active: null
	,get_suspended: null
	,get_destroyed: null
	,initialize: null
	,suspend: null
	,resume: null
	,destroy: null
	,beforeInitializing: null
	,whenInitializing: null
	,afterInitializing: null
	,beforeSuspending: null
	,whenSuspending: null
	,afterSuspending: null
	,beforeResuming: null
	,whenResuming: null
	,afterResuming: null
	,beforeDestroying: null
	,whenDestroying: null
	,afterDestroying: null
	,__class__: robotlegs.bender.framework.api.ILifecycle
};
robotlegs.bender.framework.api.ILogger = function() { };
$hxClasses["robotlegs.bender.framework.api.ILogger"] = robotlegs.bender.framework.api.ILogger;
robotlegs.bender.framework.api.ILogger.__name__ = ["robotlegs","bender","framework","api","ILogger"];
robotlegs.bender.framework.api.ILogger.prototype = {
	debug: null
	,info: null
	,warn: null
	,error: null
	,fatal: null
	,__class__: robotlegs.bender.framework.api.ILogger
};
robotlegs.bender.framework.api.LifecycleError = function(message) {
	openfl.errors.Error.call(this,message);
};
$hxClasses["robotlegs.bender.framework.api.LifecycleError"] = robotlegs.bender.framework.api.LifecycleError;
robotlegs.bender.framework.api.LifecycleError.__name__ = ["robotlegs","bender","framework","api","LifecycleError"];
robotlegs.bender.framework.api.LifecycleError.__super__ = openfl.errors.Error;
robotlegs.bender.framework.api.LifecycleError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: robotlegs.bender.framework.api.LifecycleError
});
robotlegs.bender.framework.api.LifecycleState = function() { };
$hxClasses["robotlegs.bender.framework.api.LifecycleState"] = robotlegs.bender.framework.api.LifecycleState;
robotlegs.bender.framework.api.LifecycleState.__name__ = ["robotlegs","bender","framework","api","LifecycleState"];
robotlegs.bender.framework.api.LogLevel = function() { };
$hxClasses["robotlegs.bender.framework.api.LogLevel"] = robotlegs.bender.framework.api.LogLevel;
robotlegs.bender.framework.api.LogLevel.__name__ = ["robotlegs","bender","framework","api","LogLevel"];
robotlegs.bender.framework.api.PinEvent = function(type,instance) {
	openfl.events.Event.call(this,type);
	this._instance = instance;
};
$hxClasses["robotlegs.bender.framework.api.PinEvent"] = robotlegs.bender.framework.api.PinEvent;
robotlegs.bender.framework.api.PinEvent.__name__ = ["robotlegs","bender","framework","api","PinEvent"];
robotlegs.bender.framework.api.PinEvent.__super__ = openfl.events.Event;
robotlegs.bender.framework.api.PinEvent.prototype = $extend(openfl.events.Event.prototype,{
	_instance: null
	,instance: null
	,clone: function() {
		return new robotlegs.bender.framework.api.PinEvent(this.type,this._instance);
	}
	,__class__: robotlegs.bender.framework.api.PinEvent
});
robotlegs.bender.framework.impl = {};
robotlegs.bender.framework.impl.ApplyHooks = function() { };
$hxClasses["robotlegs.bender.framework.impl.ApplyHooks"] = robotlegs.bender.framework.impl.ApplyHooks;
robotlegs.bender.framework.impl.ApplyHooks.__name__ = ["robotlegs","bender","framework","impl","ApplyHooks"];
robotlegs.bender.framework.impl.ApplyHooks.call = function(hooks,injector) {
	var _g = 0;
	while(_g < hooks.length) {
		var hook = hooks[_g];
		++_g;
		if(Reflect.isFunction(hook)) {
			hook();
			continue;
		}
		if(js.Boot.__instanceof(hook,Class)) if(injector != null) hook = injector.instantiateUnmapped(js.Boot.__cast(hook , Class)); else hook = org.swiftsuspenders.utils.CallProxy.createInstance(hook,[]);
		hook.hook();
	}
};
robotlegs.bender.framework.impl.ClassMatcher = function() {
};
$hxClasses["robotlegs.bender.framework.impl.ClassMatcher"] = robotlegs.bender.framework.impl.ClassMatcher;
robotlegs.bender.framework.impl.ClassMatcher.__name__ = ["robotlegs","bender","framework","impl","ClassMatcher"];
robotlegs.bender.framework.impl.ClassMatcher.__interfaces__ = [robotlegs.bender.framework.api.IMatcher];
robotlegs.bender.framework.impl.ClassMatcher.prototype = {
	matches: function(item) {
		return js.Boot.__instanceof(item,Class);
	}
	,__class__: robotlegs.bender.framework.impl.ClassMatcher
};
robotlegs.bender.framework.impl.ConfigManager = function(context) {
	this._initialized = false;
	this._queue = [];
	this._configs = new haxe.ds.StringMap();
	this._objectProcessor = new robotlegs.bender.framework.impl.ObjectProcessor();
	this._context = context;
	this._injector = context.get_injector();
	this._logger = context.getLogger(this);
	this.addConfigHandler(new robotlegs.bender.framework.impl.ClassMatcher(),$bind(this,this.handleClass));
	this.addConfigHandler(new robotlegs.bender.framework.impl.ObjectMatcher(),$bind(this,this.handleObject));
	context.addEventListener(robotlegs.bender.framework.api.LifecycleEvent.INITIALIZE,$bind(this,this.initialize),false,-100);
};
$hxClasses["robotlegs.bender.framework.impl.ConfigManager"] = robotlegs.bender.framework.impl.ConfigManager;
robotlegs.bender.framework.impl.ConfigManager.__name__ = ["robotlegs","bender","framework","impl","ConfigManager"];
robotlegs.bender.framework.impl.ConfigManager.prototype = {
	_objectProcessor: null
	,_configs: null
	,_queue: null
	,_injector: null
	,_logger: null
	,_initialized: null
	,_context: null
	,addConfig: function(config) {
		var id = org.swiftsuspenders.utils.UID.instanceID(config);
		if(this._configs.get(id) == null) {
			this._configs.set(id,true);
			true;
			this._objectProcessor.processObject(config);
		}
	}
	,addConfigHandler: function(matcher,handler) {
		this._objectProcessor.addObjectHandler(matcher,handler);
	}
	,destroy: function() {
		this._context.removeEventListener(robotlegs.bender.framework.api.LifecycleEvent.INITIALIZE,$bind(this,this.initialize));
		this._objectProcessor.removeAllHandlers();
		this._queue = [];
		var $it0 = this._configs.iterator();
		while( $it0.hasNext() ) {
			var config = $it0.next();
			var key = org.swiftsuspenders.utils.UID.clearInstanceID(config);
			this._configs.remove(key);
		}
	}
	,initialize: function(event) {
		if(this._initialized == false) {
			this._initialized = true;
			this.processQueue();
		}
	}
	,handleClass: function(type) {
		if(this._initialized) {
			this._logger.debug("Already initialized. Instantiating config class {0}",[type]);
			this.processClass(type);
		} else {
			this._logger.debug("Not yet initialized. Queuing config class {0}",[type]);
			this._queue.push(type);
		}
	}
	,handleObject: function(object) {
		if(this._initialized) {
			this._logger.debug("Already initialized. Injecting into config object {0}",[object]);
			this.processObject(object);
		} else {
			this._logger.debug("Not yet initialized. Queuing config object {0}",[object]);
			this._queue.push(object);
		}
	}
	,processQueue: function() {
		var _g = 0;
		var _g1 = this._queue;
		while(_g < _g1.length) {
			var config = _g1[_g];
			++_g;
			if(js.Boot.__instanceof(config,Class)) {
				this._logger.debug("Now initializing. Instantiating config class {0}",[org.swiftsuspenders.utils.CallProxy.getClassName(config)]);
				this.processClass(js.Boot.__cast(config , Class));
			} else {
				this._logger.debug("Now initializing. Injecting into config object {0}",[org.swiftsuspenders.utils.CallProxy.getClassName(Type.getClass(config))]);
				this.processObject(config);
			}
		}
		this._queue = [];
	}
	,processClass: function(type) {
		var object;
		try {
			object = this._injector.getOrCreateNewInstance(type);
		} catch( e ) {
			if( js.Boot.__instanceof(e,openfl.errors.Error) ) {
				throw new openfl.errors.Error("Can't cast " + Std.string(type) + " to IConfig, check you are using the @:keepSub meta tag");
			} else throw(e);
		}
		if(object != null) {
			var className = org.swiftsuspenders.utils.CallProxy.getClassName(type);
			var hasFeild = org.swiftsuspenders.utils.CallProxy.hasField(object,"configure");
			if(hasFeild) {
				object['configure']();;
			}
		}
	}
	,processObject: function(object) {
		this._injector.injectInto(object);
		var hasFeild = org.swiftsuspenders.utils.CallProxy.hasField(object,"configure");
		if(hasFeild) {
			object['configure']();;
		}
	}
	,__class__: robotlegs.bender.framework.impl.ConfigManager
};
robotlegs.bender.framework.impl.Context = function() {
	this._children = [];
	this._logManager = new robotlegs.bender.framework.impl.LogManager();
	this._uid = org.swiftsuspenders.utils.UID.create(robotlegs.bender.framework.impl.Context);
	this._injector = new robotlegs.bender.framework.impl.RobotlegsInjector();
	this.setup();
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["robotlegs.bender.framework.impl.Context"] = robotlegs.bender.framework.impl.Context;
robotlegs.bender.framework.impl.Context.__name__ = ["robotlegs","bender","framework","impl","Context"];
robotlegs.bender.framework.impl.Context.__interfaces__ = [robotlegs.bender.framework.api.IContext];
robotlegs.bender.framework.impl.Context.__super__ = openfl.events.EventDispatcher;
robotlegs.bender.framework.impl.Context.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	_injector: null
	,injector: null
	,get_injector: function() {
		return this._injector;
	}
	,get_logLevel: function() {
		return this._logManager.get_logLevel();
	}
	,set_logLevel: function(value) {
		this._logManager.set_logLevel(value);
		return value;
	}
	,state: null
	,get_state: function() {
		return this._lifecycle.get_state();
	}
	,uninitialized: null
	,get_uninitialized: function() {
		return this._lifecycle.get_uninitialized();
	}
	,initialized: null
	,get_initialized: function() {
		return this._lifecycle.get_initialized();
	}
	,active: null
	,get_active: function() {
		return this._lifecycle.get_active();
	}
	,suspended: null
	,get_suspended: function() {
		return this._lifecycle.get_suspended();
	}
	,destroyed: null
	,get_destroyed: function() {
		return this._lifecycle.get_destroyed();
	}
	,_uid: null
	,_logManager: null
	,_children: null
	,_pin: null
	,_lifecycle: null
	,_configManager: null
	,_extensionInstaller: null
	,_logger: null
	,initialize: function(callback) {
		this._lifecycle.initialize(callback);
	}
	,suspend: function(callback) {
		this._lifecycle.suspend(callback);
	}
	,resume: function(callback) {
		this._lifecycle.resume(callback);
	}
	,destroy: function(callback) {
		this._lifecycle.destroy(callback);
	}
	,beforeInitializing: function(handler) {
		this._lifecycle.beforeInitializing(handler);
		return this;
	}
	,whenInitializing: function(handler) {
		this._lifecycle.whenInitializing(handler);
		return this;
	}
	,afterInitializing: function(handler) {
		this._lifecycle.afterInitializing(handler);
		return this;
	}
	,beforeSuspending: function(handler) {
		this._lifecycle.beforeSuspending(handler);
		return this;
	}
	,whenSuspending: function(handler) {
		this._lifecycle.whenSuspending(handler);
		return this;
	}
	,afterSuspending: function(handler) {
		this._lifecycle.afterSuspending(handler);
		return this;
	}
	,beforeResuming: function(handler) {
		this._lifecycle.beforeResuming(handler);
		return this;
	}
	,whenResuming: function(handler) {
		this._lifecycle.whenResuming(handler);
		return this;
	}
	,afterResuming: function(handler) {
		this._lifecycle.afterResuming(handler);
		return this;
	}
	,beforeDestroying: function(handler) {
		this._lifecycle.beforeDestroying(handler);
		return this;
	}
	,whenDestroying: function(handler) {
		this._lifecycle.whenDestroying(handler);
		return this;
	}
	,afterDestroying: function(handler) {
		this._lifecycle.afterDestroying(handler);
		return this;
	}
	,install: function(extensions) {
		if((extensions instanceof Array) && extensions.__enum__ == null) {
			var extensionsArray = extensions;
			var _g = 0;
			while(_g < extensionsArray.length) {
				var extension = extensionsArray[_g];
				++_g;
				this._extensionInstaller.install(extension);
			}
		} else {
			var extension1 = extensions;
			this._extensionInstaller.install(extension1);
		}
		return this;
	}
	,configure: function(configs) {
		if((configs instanceof Array) && configs.__enum__ == null) {
			var configsArray = configs;
			var _g = 0;
			while(_g < configsArray.length) {
				var config = configsArray[_g];
				++_g;
				this.configureObject(config);
			}
		} else this.configureObject(configs);
		return this;
	}
	,configureObject: function(config) {
		if(!js.Boot.__instanceof(config,Class)) Reflect.setProperty(config,"constructor",Type.getClass(config));
		this._configManager.addConfig(config);
	}
	,addChild: function(child) {
		if(HxOverrides.indexOf(this._children,child,0) == -1) {
			this._logger.info("Adding child context {0}",[child]);
			if(child.get_uninitialized()) this._logger.warn("Child context {0} must be uninitialized",[child]);
			if(child.get_injector().get_parent() != null) this._logger.warn("Child context {0} must not have a parent Injector",[child]);
			this._children.push(child);
			child.get_injector().set_parent(this.get_injector());
			child.addEventListener(robotlegs.bender.framework.api.LifecycleEvent.POST_DESTROY,$bind(this,this.onChildDestroy));
		}
		return this;
	}
	,removeChild: function(child) {
		var childIndex = HxOverrides.indexOf(this._children,child,0);
		if(childIndex > -1) {
			this._logger.info("Removing child context {0}",[child]);
			this._children.splice(childIndex,1);
			child.get_injector().set_parent(null);
			child.removeEventListener(robotlegs.bender.framework.api.LifecycleEvent.POST_DESTROY,$bind(this,this.onChildDestroy));
		} else this._logger.warn("Child context {0} must be a child of {1}",[child,this]);
		return this;
	}
	,addConfigHandler: function(matcher,handler) {
		this._configManager.addConfigHandler(matcher,handler);
		return this;
	}
	,getLogger: function(source) {
		var returnVal = this._logManager.getLogger(source);
		return returnVal;
	}
	,addLogTarget: function(target) {
		this._logManager.addLogTarget(target);
		return this;
	}
	,detain: function(instance) {
		this._pin.detain(instance);
		return this;
	}
	,release: function(instance) {
		this._pin.release(instance);
		return this;
	}
	,toString: function() {
		return this._uid;
	}
	,setup: function() {
		this._injector.map(robotlegs.bender.framework.api.IInjector).toValue(this._injector);
		this._injector.map(robotlegs.bender.framework.api.IContext).toValue(this);
		this._logger = this._logManager.getLogger(this);
		this._pin = new robotlegs.bender.framework.impl.Pin(this);
		this._lifecycle = new robotlegs.bender.framework.impl.Lifecycle(this);
		this._configManager = new robotlegs.bender.framework.impl.ConfigManager(this);
		this._extensionInstaller = new robotlegs.bender.framework.impl.ExtensionInstaller(this);
		this.beforeInitializing($bind(this,this.beforeInitializingCallback));
		this.afterInitializing($bind(this,this.afterInitializingCallback));
		this.beforeDestroying($bind(this,this.beforeDestroyingCallback));
		this.afterDestroying($bind(this,this.afterDestroyingCallback));
	}
	,beforeInitializingCallback: function() {
		this._logger.info("Initializing...");
	}
	,afterInitializingCallback: function() {
		this._logger.info("Initialize complete");
	}
	,beforeDestroyingCallback: function() {
		this._logger.info("Destroying...");
	}
	,afterDestroyingCallback: function() {
		this._extensionInstaller.destroy();
		this._configManager.destroy();
		this._pin.releaseAll();
		this._injector.teardown();
		this.removeChildren();
		this._logger.info("Destroy complete");
		this._logManager.removeAllTargets();
	}
	,onChildDestroy: function(event) {
		this.removeChild(js.Boot.__cast(event.target , robotlegs.bender.framework.api.IContext));
	}
	,removeChildren: function() {
		var _g = 0;
		var _g1 = this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			this.removeChild(child);
		}
		this._children = [];
	}
	,__class__: robotlegs.bender.framework.impl.Context
	,__properties__: {get_destroyed:"get_destroyed",get_suspended:"get_suspended",get_active:"get_active",get_initialized:"get_initialized",get_uninitialized:"get_uninitialized",get_state:"get_state",set_logLevel:"set_logLevel",get_logLevel:"get_logLevel",get_injector:"get_injector"}
});
robotlegs.bender.framework.impl.ExtensionInstaller = function(context) {
	this._classes = new haxe.ds.StringMap();
	this._context = context;
	this._logger = this._context.getLogger(this);
};
$hxClasses["robotlegs.bender.framework.impl.ExtensionInstaller"] = robotlegs.bender.framework.impl.ExtensionInstaller;
robotlegs.bender.framework.impl.ExtensionInstaller.__name__ = ["robotlegs","bender","framework","impl","ExtensionInstaller"];
robotlegs.bender.framework.impl.ExtensionInstaller.prototype = {
	_classes: null
	,_context: null
	,_logger: null
	,install: function(extension) {
		if(js.Boot.__instanceof(extension,Class)) {
			var extensionInstance = org.swiftsuspenders.utils.CallProxy.createInstance(extension,[]);
			this.install(extensionInstance);
		} else {
			var id = org.swiftsuspenders.utils.UID.instanceID(extension);
			var extensionClass = Type.getClass(extension);
			if(this._classes.get(id) == true) return;
			this._logger.debug("Installing extension {0}",[id]);
			this._classes.set(id,true);
			true;
			var hasExtendField = org.swiftsuspenders.utils.CallProxy.hasField(extension,"extend");
			if(hasExtendField == true) extension.extend(this._context);
		}
	}
	,destroy: function() {
		var fields = Reflect.fields(this._classes);
		var _g = 0;
		while(_g < fields.length) {
			var propertyName = fields[_g];
			++_g;
			this._classes.remove(propertyName);
		}
	}
	,__class__: robotlegs.bender.framework.impl.ExtensionInstaller
};
robotlegs.bender.framework.impl.GuardsApprove = function() { };
$hxClasses["robotlegs.bender.framework.impl.GuardsApprove"] = robotlegs.bender.framework.impl.GuardsApprove;
robotlegs.bender.framework.impl.GuardsApprove.__name__ = ["robotlegs","bender","framework","impl","GuardsApprove"];
robotlegs.bender.framework.impl.GuardsApprove.call = function(guards,injector) {
	var _g = 0;
	while(_g < guards.length) {
		var guard = guards[_g];
		++_g;
		if(Reflect.isFunction(guard)) {
			if(guard()) continue;
			return false;
		}
		if(js.Boot.__instanceof(guard,Class)) if(injector != null) guard = injector.instantiateUnmapped(js.Boot.__cast(guard , Class)); else guard = org.swiftsuspenders.utils.CallProxy.createInstance(guard,[]);
		if(guard.approve() == false) return false;
	}
	return true;
};
robotlegs.bender.framework.impl.Lifecycle = function(target) {
	this._reversedEventTypes = new haxe.ds.StringMap();
	this._state = robotlegs.bender.framework.api.LifecycleState.UNINITIALIZED;
	this._target = target;
	if(js.Boot.__cast(target , openfl.events.IEventDispatcher) != null) this._dispatcher = js.Boot.__cast(target , openfl.events.IEventDispatcher); else this._dispatcher = new openfl.events.EventDispatcher(this);
	this.configureTransitions();
};
$hxClasses["robotlegs.bender.framework.impl.Lifecycle"] = robotlegs.bender.framework.impl.Lifecycle;
robotlegs.bender.framework.impl.Lifecycle.__name__ = ["robotlegs","bender","framework","impl","Lifecycle"];
robotlegs.bender.framework.impl.Lifecycle.__interfaces__ = [robotlegs.bender.framework.api.ILifecycle];
robotlegs.bender.framework.impl.Lifecycle.prototype = {
	_state: null
	,state: null
	,get_state: function() {
		return this._state;
	}
	,_target: null
	,target: null
	,get_target: function() {
		return this._target;
	}
	,uninitialized: null
	,get_uninitialized: function() {
		return this._state == robotlegs.bender.framework.api.LifecycleState.UNINITIALIZED;
	}
	,initialized: null
	,get_initialized: function() {
		return this._state != robotlegs.bender.framework.api.LifecycleState.UNINITIALIZED && this._state != robotlegs.bender.framework.api.LifecycleState.INITIALIZING;
	}
	,active: null
	,get_active: function() {
		return this._state == robotlegs.bender.framework.api.LifecycleState.ACTIVE;
	}
	,suspended: null
	,get_suspended: function() {
		return this._state == robotlegs.bender.framework.api.LifecycleState.SUSPENDED;
	}
	,destroyed: null
	,get_destroyed: function() {
		return this._state == robotlegs.bender.framework.api.LifecycleState.DESTROYED;
	}
	,_reversedEventTypes: null
	,_reversePriority: null
	,_initialize: null
	,_suspend: null
	,_resume: null
	,_destroy: null
	,_dispatcher: null
	,initialize: function(callback) {
		this._initialize.enter(callback);
	}
	,suspend: function(callback) {
		this._suspend.enter(callback);
	}
	,resume: function(callback) {
		this._resume.enter(callback);
	}
	,destroy: function(callback) {
		this._destroy.enter(callback);
	}
	,beforeInitializing: function(handler) {
		if(!this.get_uninitialized()) this.reportError(robotlegs.bender.framework.api.LifecycleError.LATE_HANDLER_ERROR_MESSAGE);
		this._initialize.addBeforeHandler(handler);
		return this;
	}
	,whenInitializing: function(handler) {
		if(this.get_initialized()) this.reportError(robotlegs.bender.framework.api.LifecycleError.LATE_HANDLER_ERROR_MESSAGE);
		this.addEventListener(robotlegs.bender.framework.api.LifecycleEvent.INITIALIZE,this.createSyncLifecycleListener(handler,true));
		return this;
	}
	,afterInitializing: function(handler) {
		if(this.get_initialized()) this.reportError(robotlegs.bender.framework.api.LifecycleError.LATE_HANDLER_ERROR_MESSAGE);
		this.addEventListener(robotlegs.bender.framework.api.LifecycleEvent.POST_INITIALIZE,this.createSyncLifecycleListener(handler,true));
		return this;
	}
	,beforeSuspending: function(handler) {
		this._suspend.addBeforeHandler(handler);
		return this;
	}
	,whenSuspending: function(handler) {
		this.addEventListener(robotlegs.bender.framework.api.LifecycleEvent.SUSPEND,this.createSyncLifecycleListener(handler));
		return this;
	}
	,afterSuspending: function(handler) {
		this.addEventListener(robotlegs.bender.framework.api.LifecycleEvent.POST_SUSPEND,this.createSyncLifecycleListener(handler));
		return this;
	}
	,beforeResuming: function(handler) {
		this._resume.addBeforeHandler(handler);
		return this;
	}
	,whenResuming: function(handler) {
		this.addEventListener(robotlegs.bender.framework.api.LifecycleEvent.RESUME,this.createSyncLifecycleListener(handler));
		return this;
	}
	,afterResuming: function(handler) {
		this.addEventListener(robotlegs.bender.framework.api.LifecycleEvent.POST_RESUME,this.createSyncLifecycleListener(handler));
		return this;
	}
	,beforeDestroying: function(handler) {
		this._destroy.addBeforeHandler(handler);
		return this;
	}
	,whenDestroying: function(handler) {
		this.addEventListener(robotlegs.bender.framework.api.LifecycleEvent.DESTROY,this.createSyncLifecycleListener(handler,true));
		return this;
	}
	,afterDestroying: function(handler) {
		this.addEventListener(robotlegs.bender.framework.api.LifecycleEvent.POST_DESTROY,this.createSyncLifecycleListener(handler,true));
		return this;
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		priority = this.flipPriority(type,priority);
		this._dispatcher.addEventListener(type,listener,useCapture,priority,useWeakReference);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
		this._dispatcher.removeEventListener(type,listener,useCapture);
	}
	,dispatchEvent: function(event) {
		return this._dispatcher.dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		return this._dispatcher.hasEventListener(type);
	}
	,willTrigger: function(type) {
		return this._dispatcher.willTrigger(type);
	}
	,setCurrentState: function(state) {
		if(this._state == state) return;
		this._state = state;
		this.dispatchEvent(new robotlegs.bender.framework.api.LifecycleEvent(robotlegs.bender.framework.api.LifecycleEvent.STATE_CHANGE));
	}
	,addReversedEventTypes: function(types) {
		var _g1 = 0;
		var _g = types.length;
		while(_g1 < _g) {
			var i = _g1++;
			this._reversedEventTypes.set(types[i],true);
			true;
		}
	}
	,configureTransitions: function() {
		this._initialize = new robotlegs.bender.framework.impl.LifecycleTransition(robotlegs.bender.framework.api.LifecycleEvent.PRE_INITIALIZE,this).fromStates([robotlegs.bender.framework.api.LifecycleState.UNINITIALIZED]).toStates(robotlegs.bender.framework.api.LifecycleState.INITIALIZING,robotlegs.bender.framework.api.LifecycleState.ACTIVE).withEvents(robotlegs.bender.framework.api.LifecycleEvent.PRE_INITIALIZE,robotlegs.bender.framework.api.LifecycleEvent.INITIALIZE,robotlegs.bender.framework.api.LifecycleEvent.POST_INITIALIZE);
		this._suspend = new robotlegs.bender.framework.impl.LifecycleTransition(robotlegs.bender.framework.api.LifecycleEvent.PRE_SUSPEND,this).fromStates([robotlegs.bender.framework.api.LifecycleState.ACTIVE]).toStates(robotlegs.bender.framework.api.LifecycleState.SUSPENDING,robotlegs.bender.framework.api.LifecycleState.SUSPENDED).withEvents(robotlegs.bender.framework.api.LifecycleEvent.PRE_SUSPEND,robotlegs.bender.framework.api.LifecycleEvent.SUSPEND,robotlegs.bender.framework.api.LifecycleEvent.POST_SUSPEND).inReverse();
		this._resume = new robotlegs.bender.framework.impl.LifecycleTransition(robotlegs.bender.framework.api.LifecycleEvent.PRE_RESUME,this).fromStates([robotlegs.bender.framework.api.LifecycleState.SUSPENDED]).toStates(robotlegs.bender.framework.api.LifecycleState.RESUMING,robotlegs.bender.framework.api.LifecycleState.ACTIVE).withEvents(robotlegs.bender.framework.api.LifecycleEvent.PRE_RESUME,robotlegs.bender.framework.api.LifecycleEvent.RESUME,robotlegs.bender.framework.api.LifecycleEvent.POST_RESUME);
		this._destroy = new robotlegs.bender.framework.impl.LifecycleTransition(robotlegs.bender.framework.api.LifecycleEvent.PRE_DESTROY,this).fromStates([robotlegs.bender.framework.api.LifecycleState.SUSPENDED,robotlegs.bender.framework.api.LifecycleState.ACTIVE]).toStates(robotlegs.bender.framework.api.LifecycleState.DESTROYING,robotlegs.bender.framework.api.LifecycleState.DESTROYED).withEvents(robotlegs.bender.framework.api.LifecycleEvent.PRE_DESTROY,robotlegs.bender.framework.api.LifecycleEvent.DESTROY,robotlegs.bender.framework.api.LifecycleEvent.POST_DESTROY).inReverse();
	}
	,flipPriority: function(type,priority) {
		if(priority == 0 && this._reversedEventTypes.get(type)) return this._reversePriority++; else return priority;
	}
	,createSyncLifecycleListener: function(handler,once) {
		if(once == null) once = false;
		if(handler.length > 1) throw new robotlegs.bender.framework.api.LifecycleError(robotlegs.bender.framework.api.LifecycleError.SYNC_HANDLER_ARG_MISMATCH);
		var syncLifecycleListener = new robotlegs.bender.framework.impl.SyncLifecycleListener();
		return syncLifecycleListener.init(handler,once,handler.length);
	}
	,reportError: function(message) {
		var error = new robotlegs.bender.framework.api.LifecycleError(message);
		if(this.hasEventListener(robotlegs.bender.framework.api.LifecycleEvent.ERROR)) {
			var event = new robotlegs.bender.framework.api.LifecycleEvent(robotlegs.bender.framework.api.LifecycleEvent.ERROR,error);
			this.dispatchEvent(event);
		} else throw error;
	}
	,__class__: robotlegs.bender.framework.impl.Lifecycle
	,__properties__: {get_destroyed:"get_destroyed",get_suspended:"get_suspended",get_active:"get_active",get_initialized:"get_initialized",get_uninitialized:"get_uninitialized",get_target:"get_target",get_state:"get_state"}
};
robotlegs.bender.framework.impl.SyncLifecycleListener = function() {
};
$hxClasses["robotlegs.bender.framework.impl.SyncLifecycleListener"] = robotlegs.bender.framework.impl.SyncLifecycleListener;
robotlegs.bender.framework.impl.SyncLifecycleListener.__name__ = ["robotlegs","bender","framework","impl","SyncLifecycleListener"];
robotlegs.bender.framework.impl.SyncLifecycleListener.prototype = {
	once: null
	,handler: null
	,init: function(handler,once,handlerLength) {
		this.handler = handler;
		this.once = once;
		if(handlerLength == 1) return $bind(this,this.createSyncLifecycleListenerFunction);
		return $bind(this,this.createSyncLifecycleListenerFunction2);
	}
	,createSyncLifecycleListenerFunction: function(event) {
		if(this.once) (js.Boot.__cast(event.target , openfl.events.IEventDispatcher)).removeEventListener(event.type,$bind(this,this.createSyncLifecycleListenerFunction));
		this.handler(event.type);
	}
	,createSyncLifecycleListenerFunction2: function(event) {
		if(this.once) (js.Boot.__cast(event.target , openfl.events.IEventDispatcher)).removeEventListener(event.type,$bind(this,this.createSyncLifecycleListenerFunction2));
		this.handler();
	}
	,__class__: robotlegs.bender.framework.impl.SyncLifecycleListener
};
robotlegs.bender.framework.impl.LifecycleTransition = function(name,lifecycle) {
	this._reverse = false;
	this._callbacks = [];
	this._dispatcher = new robotlegs.bender.framework.impl.MessageDispatcher();
	this._fromStates = [];
	this._name = name;
	this._lifecycle = lifecycle;
};
$hxClasses["robotlegs.bender.framework.impl.LifecycleTransition"] = robotlegs.bender.framework.impl.LifecycleTransition;
robotlegs.bender.framework.impl.LifecycleTransition.__name__ = ["robotlegs","bender","framework","impl","LifecycleTransition"];
robotlegs.bender.framework.impl.LifecycleTransition.prototype = {
	_fromStates: null
	,_dispatcher: null
	,_callbacks: null
	,_name: null
	,_lifecycle: null
	,_transitionState: null
	,_finalState: null
	,_preTransitionEvent: null
	,_transitionEvent: null
	,_postTransitionEvent: null
	,_reverse: null
	,fromStates: function(states) {
		var _g = 0;
		while(_g < states.length) {
			var state = states[_g];
			++_g;
			this._fromStates.push(state);
		}
		return this;
	}
	,toStates: function(transitionState,finalState) {
		this._transitionState = transitionState;
		this._finalState = finalState;
		return this;
	}
	,withEvents: function(preTransitionEvent,transitionEvent,postTransitionEvent) {
		this._preTransitionEvent = preTransitionEvent;
		this._transitionEvent = transitionEvent;
		this._postTransitionEvent = postTransitionEvent;
		if(this._reverse) this._lifecycle.addReversedEventTypes([preTransitionEvent,transitionEvent,postTransitionEvent]);
		return this;
	}
	,inReverse: function() {
		this._reverse = true;
		this._lifecycle.addReversedEventTypes([this._preTransitionEvent,this._transitionEvent,this._postTransitionEvent]);
		return this;
	}
	,addBeforeHandler: function(handler) {
		this._dispatcher.addMessageHandler(this._name,handler);
		return this;
	}
	,enter: function(callback) {
		var _g = this;
		if(this._lifecycle.get_state() == this._finalState) {
			if(callback != null) robotlegs.bender.framework.impl.SafelyCallBack.call(callback,null,this._name);
			return;
		}
		if(this._lifecycle.get_state() == this._transitionState) {
			if(callback != null) this._callbacks.push(callback);
			return;
		}
		if(this.invalidTransition()) {
			if(callback != null) this.reportError("Invalid transition",[callback]);
			return;
		}
		var initialState = this._lifecycle.get_state();
		if(callback != null) this._callbacks.push(callback);
		this.setState(this._transitionState);
		this._dispatcher.dispatchMessage(this._name,function(error) {
			if(error) {
				_g.setState(initialState);
				_g.reportError(error,_g._callbacks);
				return;
			}
			_g.dispatch(_g._preTransitionEvent);
			_g.dispatch(_g._transitionEvent);
			_g.setState(_g._finalState);
			var callbacks = _g._callbacks.concat([]);
			_g._callbacks = [];
			var _g1 = 0;
			while(_g1 < callbacks.length) {
				var callback1 = callbacks[_g1];
				++_g1;
				robotlegs.bender.framework.impl.SafelyCallBack.call(callback1,null,_g._name);
			}
			_g.dispatch(_g._postTransitionEvent);
		},this._reverse);
	}
	,invalidTransition: function() {
		return this._fromStates.length > 0 && (function($this) {
			var $r;
			var x = $this._lifecycle.get_state();
			$r = HxOverrides.indexOf($this._fromStates,x,0);
			return $r;
		}(this)) == -1;
	}
	,setState: function(state) {
		if(state != null && state != "") this._lifecycle.setCurrentState(state);
	}
	,dispatch: function(type) {
		if(type != null && type != "" && this._lifecycle.hasEventListener(type)) this._lifecycle.dispatchEvent(new robotlegs.bender.framework.api.LifecycleEvent(type));
	}
	,reportError: function(message,callbacks) {
		var error;
		if(js.Boot.__instanceof(message,openfl.errors.Error)) error = js.Boot.__cast(message , openfl.errors.Error); else error = new openfl.errors.Error(message);
		if(this._lifecycle.hasEventListener(robotlegs.bender.framework.api.LifecycleEvent.ERROR)) {
			var event = new robotlegs.bender.framework.api.LifecycleEvent(robotlegs.bender.framework.api.LifecycleEvent.ERROR,error);
			this._lifecycle.dispatchEvent(event);
			if(callbacks != null) {
				var _g = 0;
				while(_g < callbacks.length) {
					var callback = callbacks[_g];
					++_g;
					if(callback != null) robotlegs.bender.framework.impl.SafelyCallBack.call(callback,error,this._name);
				}
				callbacks = [];
			}
		} else throw error;
	}
	,__class__: robotlegs.bender.framework.impl.LifecycleTransition
};
robotlegs.bender.framework.impl.LogManager = function() {
	this._targets = [];
	this._logLevel = robotlegs.bender.framework.api.LogLevel.INFO;
};
$hxClasses["robotlegs.bender.framework.impl.LogManager"] = robotlegs.bender.framework.impl.LogManager;
robotlegs.bender.framework.impl.LogManager.__name__ = ["robotlegs","bender","framework","impl","LogManager"];
robotlegs.bender.framework.impl.LogManager.__interfaces__ = [robotlegs.bender.framework.api.ILogTarget];
robotlegs.bender.framework.impl.LogManager.prototype = {
	_logLevel: null
	,get_logLevel: function() {
		return this._logLevel;
	}
	,set_logLevel: function(value) {
		this._logLevel = value;
		return this._logLevel;
	}
	,_targets: null
	,getLogger: function(source) {
		return new robotlegs.bender.framework.impl.Logger(source,this);
	}
	,addLogTarget: function(target) {
		this._targets.push(target);
	}
	,log: function(source,level,timestamp,message,params) {
		if((function($this) {
			var $r;
			var b = $this._logLevel;
			var aNeg = level < 0;
			var bNeg = b < 0;
			$r = aNeg != bNeg?aNeg:level > b;
			return $r;
		}(this))) return;
		var _g = 0;
		var _g1 = this._targets;
		while(_g < _g1.length) {
			var target = _g1[_g];
			++_g;
			target.log(source,level,timestamp,message,params);
		}
	}
	,removeAllTargets: function() {
		this._targets = [];
	}
	,__class__: robotlegs.bender.framework.impl.LogManager
	,__properties__: {set_logLevel:"set_logLevel",get_logLevel:"get_logLevel"}
};
robotlegs.bender.framework.impl.Logger = function(source,target) {
	this._source = source;
	this._target = target;
};
$hxClasses["robotlegs.bender.framework.impl.Logger"] = robotlegs.bender.framework.impl.Logger;
robotlegs.bender.framework.impl.Logger.__name__ = ["robotlegs","bender","framework","impl","Logger"];
robotlegs.bender.framework.impl.Logger.__interfaces__ = [robotlegs.bender.framework.api.ILogger];
robotlegs.bender.framework.impl.Logger.prototype = {
	_source: null
	,_target: null
	,debug: function(message,params) {
		this._target.log(this._source,32,openfl.Lib.getTimer(),message,params);
	}
	,info: function(message,params) {
		this._target.log(this._source,16,openfl.Lib.getTimer(),message,params);
	}
	,warn: function(message,params) {
		this._target.log(this._source,8,openfl.Lib.getTimer(),message,params);
	}
	,error: function(message,params) {
		this._target.log(this._source,4,openfl.Lib.getTimer(),message,params);
	}
	,fatal: function(message,params) {
		this._target.log(this._source,2,openfl.Lib.getTimer(),message,params);
	}
	,__class__: robotlegs.bender.framework.impl.Logger
};
robotlegs.bender.framework.impl.MessageDispatcher = function() {
	this._handlers = new haxe.ds.StringMap();
};
$hxClasses["robotlegs.bender.framework.impl.MessageDispatcher"] = robotlegs.bender.framework.impl.MessageDispatcher;
robotlegs.bender.framework.impl.MessageDispatcher.__name__ = ["robotlegs","bender","framework","impl","MessageDispatcher"];
robotlegs.bender.framework.impl.MessageDispatcher.prototype = {
	_handlers: null
	,addMessageHandler: function(message,handler) {
		var messageHandlers;
		var key = message;
		messageHandlers = this._handlers.get(key);
		if(messageHandlers != null) {
			if(HxOverrides.indexOf(messageHandlers,handler,0) == -1) messageHandlers.push(handler);
		} else {
			var k = message;
			var v = [handler];
			this._handlers.set(k,v);
			v;
		}
	}
	,hasMessageHandler: function(message) {
		var key = message;
		return this._handlers.get(key);
	}
	,removeMessageHandler: function(message,handler) {
		var messageHandlers;
		var key = message;
		messageHandlers = this._handlers.get(key);
		var index;
		if(messageHandlers != null) index = HxOverrides.indexOf(messageHandlers,handler,0); else index = -1;
		if(index != -1) {
			messageHandlers.splice(index,1);
			if(messageHandlers.length == 0) {
				var key1 = message;
				this._handlers.remove(key1);
			}
		}
	}
	,dispatchMessage: function(message,callback,reverse) {
		if(reverse == null) reverse = false;
		var handlers;
		var key = message;
		handlers = this._handlers.get(key);
		if(handlers.length > 0) {
			handlers = handlers.concat([]);
			if(!reverse) handlers.reverse();
			var messageRunner = new robotlegs.bender.framework.impl.MessageRunner(message,handlers,callback);
			messageRunner.run();
		} else if(callback != null) robotlegs.bender.framework.impl.SafelyCallBack.call(callback);
	}
	,__class__: robotlegs.bender.framework.impl.MessageDispatcher
};
robotlegs.bender.framework.impl.MessageRunner = function(message,handlers,callback) {
	this._message = message;
	this._handlers = handlers;
	this._callback = callback;
	haxe.Log.trace("_handlers = " + Std.string(this._handlers),{ fileName : "MessageDispatcher.hx", lineNumber : 128, className : "robotlegs.bender.framework.impl.MessageRunner", methodName : "new"});
};
$hxClasses["robotlegs.bender.framework.impl.MessageRunner"] = robotlegs.bender.framework.impl.MessageRunner;
robotlegs.bender.framework.impl.MessageRunner.__name__ = ["robotlegs","bender","framework","impl","MessageRunner"];
robotlegs.bender.framework.impl.MessageRunner.prototype = {
	_message: null
	,_handlers: null
	,_callback: null
	,run: function() {
		this.next();
	}
	,next: function() {
		var _g = this;
		var handler;
		while((handler = this._handlers.pop()) != null) if(handler.length == null) handler(); else if(handler.length == 0) handler(); else if(handler.length == 1) handler(this._message); else if(handler.length == 2) {
			var handled = [false];
			handler(this._message,(function(handled) {
				return function(error,msg) {
					if(handled[0]) return;
					handled[0] = true;
					if(error != null || _g._handlers.length == 0) {
						if(_g._callback != null) robotlegs.bender.framework.impl.SafelyCallBack.call(_g._callback,error,_g._message);
					} else _g.next();
				};
			})(handled));
			return;
		} else haxe.Log.trace("Bad handler signature",{ fileName : "MessageDispatcher.hx", lineNumber : 192, className : "robotlegs.bender.framework.impl.MessageRunner", methodName : "next"});
		if(this._callback != null) robotlegs.bender.framework.impl.SafelyCallBack.call(this._callback,null,this._message);
	}
	,__class__: robotlegs.bender.framework.impl.MessageRunner
};
robotlegs.bender.framework.impl.ObjectHandler = function(matcher,handler) {
	this._matcher = matcher;
	this._handler = handler;
};
$hxClasses["robotlegs.bender.framework.impl.ObjectHandler"] = robotlegs.bender.framework.impl.ObjectHandler;
robotlegs.bender.framework.impl.ObjectHandler.__name__ = ["robotlegs","bender","framework","impl","ObjectHandler"];
robotlegs.bender.framework.impl.ObjectHandler.prototype = {
	_matcher: null
	,_handler: null
	,handle: function(object) {
		if(this._matcher.matches(object)) this._handler(object);
	}
	,__class__: robotlegs.bender.framework.impl.ObjectHandler
};
robotlegs.bender.framework.impl.ObjectMatcher = function() {
};
$hxClasses["robotlegs.bender.framework.impl.ObjectMatcher"] = robotlegs.bender.framework.impl.ObjectMatcher;
robotlegs.bender.framework.impl.ObjectMatcher.__name__ = ["robotlegs","bender","framework","impl","ObjectMatcher"];
robotlegs.bender.framework.impl.ObjectMatcher.__interfaces__ = [robotlegs.bender.framework.api.IMatcher];
robotlegs.bender.framework.impl.ObjectMatcher.prototype = {
	matches: function(item) {
		return js.Boot.__instanceof(item,Class) == false;
	}
	,__class__: robotlegs.bender.framework.impl.ObjectMatcher
};
robotlegs.bender.framework.impl.ObjectProcessor = function() {
	this._handlers = [];
};
$hxClasses["robotlegs.bender.framework.impl.ObjectProcessor"] = robotlegs.bender.framework.impl.ObjectProcessor;
robotlegs.bender.framework.impl.ObjectProcessor.__name__ = ["robotlegs","bender","framework","impl","ObjectProcessor"];
robotlegs.bender.framework.impl.ObjectProcessor.prototype = {
	_handlers: null
	,addObjectHandler: function(matcher,handler) {
		this._handlers.push(new robotlegs.bender.framework.impl.ObjectHandler(matcher,handler));
	}
	,processObject: function(object) {
		var _g = 0;
		var _g1 = this._handlers;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			handler.handle(object);
		}
	}
	,removeAllHandlers: function() {
		this._handlers = [];
	}
	,__class__: robotlegs.bender.framework.impl.ObjectProcessor
};
robotlegs.bender.framework.impl.Pin = function(dispatcher) {
	this._instances = new haxe.ds.StringMap();
	this._dispatcher = dispatcher;
};
$hxClasses["robotlegs.bender.framework.impl.Pin"] = robotlegs.bender.framework.impl.Pin;
robotlegs.bender.framework.impl.Pin.__name__ = ["robotlegs","bender","framework","impl","Pin"];
robotlegs.bender.framework.impl.Pin.prototype = {
	_instances: null
	,_dispatcher: null
	,detain: function(instance) {
		if((function($this) {
			var $r;
			var key = instance;
			$r = $this._instances.get(key);
			return $r;
		}(this)) == null) {
			var k = instance;
			this._instances.set(k,true);
			true;
			this._dispatcher.dispatchEvent(new robotlegs.bender.framework.api.PinEvent(robotlegs.bender.framework.api.PinEvent.DETAIN,instance));
		}
	}
	,release: function(instance) {
		if((function($this) {
			var $r;
			var key = instance;
			$r = $this._instances.get(key);
			return $r;
		}(this))) {
			var key1 = instance;
			this._instances.remove(key1);
			this._dispatcher.dispatchEvent(new robotlegs.bender.framework.api.PinEvent(robotlegs.bender.framework.api.PinEvent.RELEASE,instance));
		}
	}
	,releaseAll: function() {
		var $it0 = this._instances.iterator();
		while( $it0.hasNext() ) {
			var instance = $it0.next();
			this.release(instance);
		}
	}
	,__class__: robotlegs.bender.framework.impl.Pin
};
robotlegs.bender.framework.impl.RobotlegsInjector = function() {
	org.swiftsuspenders.Injector.call(this);
};
$hxClasses["robotlegs.bender.framework.impl.RobotlegsInjector"] = robotlegs.bender.framework.impl.RobotlegsInjector;
robotlegs.bender.framework.impl.RobotlegsInjector.__name__ = ["robotlegs","bender","framework","impl","RobotlegsInjector"];
robotlegs.bender.framework.impl.RobotlegsInjector.__interfaces__ = [robotlegs.bender.framework.api.IInjector];
robotlegs.bender.framework.impl.RobotlegsInjector.__super__ = org.swiftsuspenders.Injector;
robotlegs.bender.framework.impl.RobotlegsInjector.prototype = $extend(org.swiftsuspenders.Injector.prototype,{
	set_parent: function(parentInjector) {
		this.set_parentInjector(js.Boot.__cast(parentInjector , robotlegs.bender.framework.impl.RobotlegsInjector));
		return js.Boot.__cast(parentInjector , robotlegs.bender.framework.api.IInjector);
	}
	,get_parent: function() {
		return js.Boot.__cast(this.get_parentInjector() , robotlegs.bender.framework.impl.RobotlegsInjector);
	}
	,createChild: function(applicationDomain) {
		var childInjector = new robotlegs.bender.framework.impl.RobotlegsInjector();
		if(applicationDomain != null) childInjector.set_applicationDomain(applicationDomain); else childInjector.set_applicationDomain(this.get_applicationDomain());
		childInjector.set_parent(this);
		return childInjector;
	}
	,__class__: robotlegs.bender.framework.impl.RobotlegsInjector
	,__properties__: $extend(org.swiftsuspenders.Injector.prototype.__properties__,{set_parent:"set_parent",get_parent:"get_parent"})
});
robotlegs.bender.framework.impl.SafelyCallBack = function() { };
$hxClasses["robotlegs.bender.framework.impl.SafelyCallBack"] = robotlegs.bender.framework.impl.SafelyCallBack;
robotlegs.bender.framework.impl.SafelyCallBack.__name__ = ["robotlegs","bender","framework","impl","SafelyCallBack"];
robotlegs.bender.framework.impl.SafelyCallBack.call = function(callback,errorMsg,message) {
	callback(errorMsg,message);
};
robotlegs.bender.framework.impl.UID = function() { };
$hxClasses["robotlegs.bender.framework.impl.UID"] = robotlegs.bender.framework.impl.UID;
robotlegs.bender.framework.impl.UID.__name__ = ["robotlegs","bender","framework","impl","UID"];
robotlegs.bender.framework.impl.UID._i = null;
robotlegs.bender.framework.impl.UID.create = function(source) {
	return org.swiftsuspenders.utils.UID.create(source);
};
robotlegs.bender.framework.impl.UID.classID = function(source) {
	return org.swiftsuspenders.utils.UID.classID(source);
};
starling.animation = {};
starling.animation.IAnimatable = function() { };
$hxClasses["starling.animation.IAnimatable"] = starling.animation.IAnimatable;
starling.animation.IAnimatable.__name__ = ["starling","animation","IAnimatable"];
starling.animation.IAnimatable.prototype = {
	advanceTime: null
	,__class__: starling.animation.IAnimatable
};
starling.animation.DelayedCall = function(call,delay,args) {
	starling.events.EventDispatcher.call(this);
	this.reset(call,delay,args);
};
$hxClasses["starling.animation.DelayedCall"] = starling.animation.DelayedCall;
starling.animation.DelayedCall.__name__ = ["starling","animation","DelayedCall"];
starling.animation.DelayedCall.__interfaces__ = [starling.animation.IAnimatable];
starling.animation.DelayedCall.fromPool = function(call,delay,args) {
	if(starling.animation.DelayedCall.sPool.length > 0) return starling.animation.DelayedCall.sPool.pop().reset(call,delay,args); else return new starling.animation.DelayedCall(call,delay,args);
};
starling.animation.DelayedCall.toPool = function(delayedCall) {
	delayedCall.mCall = null;
	delayedCall.mArgs = null;
	delayedCall.removeEventListeners();
	starling.animation.DelayedCall.sPool.push(delayedCall);
};
starling.animation.DelayedCall.__super__ = starling.events.EventDispatcher;
starling.animation.DelayedCall.prototype = $extend(starling.events.EventDispatcher.prototype,{
	mCurrentTime: null
	,mTotalTime: null
	,mCall: null
	,mArgs: null
	,mRepeatCount: null
	,isComplete: null
	,totalTime: null
	,currentTime: null
	,reset: function(call,delay,args) {
		this.mCurrentTime = 0;
		this.mTotalTime = Math.max(delay,0.0001);
		this.mCall = call;
		this.mArgs = args;
		this.mRepeatCount = 1;
		return this;
	}
	,advanceTime: function(time) {
		var previousTime = this.mCurrentTime;
		this.mCurrentTime += time;
		if(this.mCurrentTime > this.mTotalTime) this.mCurrentTime = this.mTotalTime;
		if(previousTime < this.mTotalTime && this.mCurrentTime >= this.mTotalTime) {
			var maxNumArgs = this.mArgs.length;
			haxe.Log.trace("mArgs = " + Std.string(this.mArgs),{ fileName : "DelayedCall.hx", lineNumber : 70, className : "starling.animation.DelayedCall", methodName : "advanceTime"});
			if(this.mRepeatCount == 0 || this.mRepeatCount > 1) {
				switch(maxNumArgs) {
				case 0:
					this.mCall();
					break;
				case 1:
					this.mCall(this.mArgs[0]);
					break;
				case 2:
					this.mCall(this.mArgs[0],this.mArgs[1]);
					break;
				case 3:
					this.mCall(this.mArgs[0],this.mArgs[1],this.mArgs[2]);
					break;
				case 4:
					this.mCall(this.mArgs[0],this.mArgs[1],this.mArgs[2],this.mArgs[3]);
					break;
				case 5:
					this.mCall(this.mArgs[0],this.mArgs[1],this.mArgs[2],this.mArgs[3],this.mArgs[4]);
					break;
				case 6:
					this.mCall(this.mArgs[0],this.mArgs[1],this.mArgs[2],this.mArgs[3],this.mArgs[4],this.mArgs[5]);
					break;
				case 7:
					this.mCall(this.mArgs[0],this.mArgs[1],this.mArgs[2],this.mArgs[3],this.mArgs[4],this.mArgs[5],this.mArgs[6]);
					break;
				}
				if(this.mRepeatCount > 0) this.mRepeatCount -= 1;
				this.mCurrentTime = 0;
				this.advanceTime(previousTime + time - this.mTotalTime);
			} else {
				var call = this.mCall;
				var args = this.mArgs;
				this.dispatchEventWith(starling.events.Event.REMOVE_FROM_JUGGLER);
				switch(maxNumArgs) {
				case 0:
					call();
					break;
				case 1:
					call(args[0]);
					break;
				case 2:
					call(args[0],args[1]);
					break;
				case 3:
					call(args[0],args[1],args[2]);
					break;
				case 4:
					call(args[0],args[1],args[2],args[3]);
					break;
				case 5:
					call(args[0],args[1],args[2],args[3],args[4]);
					break;
				case 6:
					call(args[0],args[1],args[2],args[3],args[4],args[5]);
					break;
				case 7:
					call(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
					break;
				}
			}
		}
	}
	,complete: function() {
		var restTime = this.mTotalTime - this.mCurrentTime;
		if(restTime > 0) this.advanceTime(restTime);
	}
	,get_isComplete: function() {
		return this.mRepeatCount == 1 && this.mCurrentTime >= this.mTotalTime;
	}
	,get_totalTime: function() {
		return this.mTotalTime;
	}
	,get_currentTime: function() {
		return this.mCurrentTime;
	}
	,get_repeatCount: function() {
		return this.mRepeatCount;
	}
	,set_repeatCount: function(value) {
		this.mRepeatCount = value;
		return value;
	}
	,__class__: starling.animation.DelayedCall
	,__properties__: {set_repeatCount:"set_repeatCount",get_repeatCount:"get_repeatCount",get_currentTime:"get_currentTime",get_totalTime:"get_totalTime",get_isComplete:"get_isComplete"}
});
starling.animation.Juggler = function() {
	this.mElapsedTime = 0;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.mObjects = this1;
	this.mObjects.fixed = false;
	if(starling.animation.Juggler.tweenSetters == null) {
		starling.animation.Juggler.tweenSetters = new Array();
		var _g = 0;
		var _g1 = Type.getInstanceFields(starling.animation.Tween);
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			if(field.indexOf("set_") == 0) starling.animation.Juggler.tweenSetters.push(HxOverrides.substr(field,4,null));
		}
		starling.animation.Juggler.tweenSetters.sort(function(a,b) {
			return Reflect.compare(a.toLowerCase(),b.toLowerCase());
		});
	}
};
$hxClasses["starling.animation.Juggler"] = starling.animation.Juggler;
starling.animation.Juggler.__name__ = ["starling","animation","Juggler"];
starling.animation.Juggler.__interfaces__ = [starling.animation.IAnimatable];
starling.animation.Juggler.prototype = {
	mObjects: null
	,mElapsedTime: null
	,elapsedTime: null
	,objects: null
	,add: function(object) {
		if(object != null && this.indexOf(this.mObjects,object) == -1) {
			var this1 = this.mObjects;
			var key = this.mObjects.length;
			if(!this1.fixed) {
				if(key >= this1.length) this1.length = key + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[key] = object;
			var dispatcher = object;
			if(dispatcher != null) dispatcher.addEventListener(starling.events.Event.REMOVE_FROM_JUGGLER,$bind(this,this.onRemove));
		}
	}
	,indexOf: function(vec,obj) {
		var _g1 = 0;
		var _g = vec.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(vec.data[i] == obj) return i;
		}
		return -1;
	}
	,contains: function(object) {
		return this.indexOf(this.mObjects,object) != -1;
	}
	,remove: function(object) {
		if(object == null) return;
		var dispatcher = object;
		if(dispatcher != null) dispatcher.removeEventListener(starling.events.Event.REMOVE_FROM_JUGGLER,$bind(this,this.onRemove));
		var index = this.indexOf(this.mObjects,object);
		if(index != -1) {
			var this1 = this.mObjects;
			if(!this1.fixed) {
				if(index >= this1.length) this1.length = index + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[index] = null;
		}
	}
	,removeTweens: function(target) {
		if(target == null) return;
		var i = this.mObjects.length - 1;
		while(i >= 0) {
			var tween = this.mObjects.data[i];
			if(tween != null && tween.get_target() == target) {
				tween.removeEventListener(starling.events.Event.REMOVE_FROM_JUGGLER,$bind(this,this.onRemove));
				var this1 = this.mObjects;
				if(!this1.fixed) {
					if(i >= this1.length) this1.length = i + 1;
					if(this1.data.length < this1.length) {
						var data;
						var this2;
						this2 = new Array(this1.data.length + 10);
						data = this2;
						haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
						this1.data = data;
					}
				}
				this1.data[i] = null;
			}
			--i;
		}
	}
	,containsTweens: function(target) {
		if(target == null) return false;
		var i = this.mObjects.length - 1;
		while(i >= 0) {
			var tween = this.mObjects.data[i];
			if(tween != null && tween.get_target() == target) return true;
			--i;
		}
		return false;
	}
	,purge: function() {
		var i = this.mObjects.length - 1;
		while(i >= 0) {
			var dispatcher = this.mObjects.data[i];
			if(dispatcher != null) dispatcher.removeEventListener(starling.events.Event.REMOVE_FROM_JUGGLER,$bind(this,this.onRemove));
			var this1 = this.mObjects;
			if(!this1.fixed) {
				if(i >= this1.length) this1.length = i + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[i] = null;
			--i;
		}
	}
	,delayCall: function(call,delay,args) {
		if(call == null) return null;
		var delayedCall = starling.animation.DelayedCall.fromPool(call,delay,args);
		delayedCall.addEventListener(starling.events.Event.REMOVE_FROM_JUGGLER,$bind(this,this.onPooledDelayedCallComplete));
		this.add(delayedCall);
		return delayedCall;
	}
	,repeatCall: function(call,interval,repeatCount,args) {
		if(repeatCount == null) repeatCount = 0;
		if(call == null) return null;
		var delayedCall = starling.animation.DelayedCall.fromPool(call,interval,args);
		delayedCall.set_repeatCount(repeatCount);
		delayedCall.addEventListener(starling.events.Event.REMOVE_FROM_JUGGLER,$bind(this,this.onPooledDelayedCallComplete));
		this.add(delayedCall);
		return delayedCall;
	}
	,onPooledDelayedCallComplete: function(event) {
		starling.animation.DelayedCall.toPool(event.get_target());
	}
	,tween: function(target,time,properties) {
		if(target == null) throw new openfl.errors.ArgumentError("target must not be null");
		var tween = starling.animation.Tween.fromPool(target,time);
		var fields = Reflect.fields(properties);
		var _g = 0;
		while(_g < fields.length) {
			var property = fields[_g];
			++_g;
			var value = Reflect.getProperty(properties,property);
			if(HxOverrides.indexOf(starling.animation.Juggler.tweenSetters,property,0) >= 0) Reflect.setProperty(tween,property,value); else {
				var currentValue = Reflect.getProperty(target,property);
				if(currentValue == null) throw new openfl.errors.ArgumentError("Invalid property: " + property);
				tween.animate(property,value);
			}
		}
		tween.addEventListener(starling.events.Event.REMOVE_FROM_JUGGLER,$bind(this,this.onPooledTweenComplete));
		this.add(tween);
		return tween;
	}
	,onPooledTweenComplete: function(event) {
		starling.animation.Tween.toPool(event.get_target());
	}
	,advanceTime: function(time) {
		var numObjects = this.mObjects.length;
		var currentIndex = 0;
		var i = 0;
		this.mElapsedTime += time;
		if(numObjects == 0) return;
		var _g = 0;
		while(_g < numObjects) {
			var i1 = _g++;
			var object = this.mObjects.data[i1];
			if(object != null) {
				if(currentIndex != i1) {
					var this1 = this.mObjects;
					if(!this1.fixed) {
						if(currentIndex >= this1.length) this1.length = currentIndex + 1;
						if(this1.data.length < this1.length) {
							var data;
							var this2;
							this2 = new Array(this1.data.length + 10);
							data = this2;
							haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
							this1.data = data;
						}
					}
					this1.data[currentIndex] = object;
					var this3 = this.mObjects;
					if(!this3.fixed) {
						if(i1 >= this3.length) this3.length = i1 + 1;
						if(this3.data.length < this3.length) {
							var data1;
							var this4;
							this4 = new Array(this3.data.length + 10);
							data1 = this4;
							haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
							this3.data = data1;
						}
					}
					this3.data[i1] = null;
				}
				object.advanceTime(time);
				++currentIndex;
			}
		}
	}
	,onRemove: function(event) {
		this.remove(event.get_target());
		var tween = null;
		try {
			tween = event.get_target();
		} catch( e ) {
			if( js.Boot.__instanceof(e,openfl.errors.Error) ) {
			} else throw(e);
		}
		if(tween != null) {
			if(tween.get_isComplete()) {
				var nextTween = Reflect.getProperty(tween,"nextTween");
				if(nextTween != null) this.add(nextTween);
			}
		}
	}
	,get_elapsedTime: function() {
		return this.mElapsedTime;
	}
	,get_objects: function() {
		var this1 = this.mObjects;
		var value = new Array();
		var _g1 = 0;
		var _g = this1.data.length;
		while(_g1 < _g) {
			var i = _g1++;
			value.push(this1.data[i]);
		}
		return value;
	}
	,__class__: starling.animation.Juggler
	,__properties__: {get_objects:"get_objects",get_elapsedTime:"get_elapsedTime"}
};
starling.animation.Transitions = function() {
	throw new starling.errors.AbstractClassError();
};
$hxClasses["starling.animation.Transitions"] = starling.animation.Transitions;
starling.animation.Transitions.__name__ = ["starling","animation","Transitions"];
starling.animation.Transitions.sTransitions = null;
starling.animation.Transitions.getTransition = function(name) {
	if(starling.animation.Transitions.sTransitions == null) starling.animation.Transitions.registerDefaults();
	return starling.animation.Transitions.sTransitions.get(name);
};
starling.animation.Transitions.register = function(name,func) {
	if(starling.animation.Transitions.sTransitions == null) starling.animation.Transitions.registerDefaults();
	starling.animation.Transitions.sTransitions.set(name,func);
	func;
};
starling.animation.Transitions.registerDefaults = function() {
	starling.animation.Transitions.sTransitions = new haxe.ds.StringMap();
	starling.animation.Transitions.register(starling.animation.Transitions.LINEAR,starling.animation.Transitions.linear);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_IN,starling.animation.Transitions.easeIn);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_OUT,starling.animation.Transitions.easeOut);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_IN_OUT,starling.animation.Transitions.easeInOut);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_OUT_IN,starling.animation.Transitions.easeOutIn);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_IN_BACK,starling.animation.Transitions.easeInBack);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_OUT_BACK,starling.animation.Transitions.easeOutBack);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_IN_OUT_BACK,starling.animation.Transitions.easeInOutBack);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_OUT_IN_BACK,starling.animation.Transitions.easeOutInBack);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_IN_ELASTIC,starling.animation.Transitions.easeInElastic);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_OUT_ELASTIC,starling.animation.Transitions.easeOutElastic);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_IN_OUT_ELASTIC,starling.animation.Transitions.easeInOutElastic);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_OUT_IN_ELASTIC,starling.animation.Transitions.easeOutInElastic);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_IN_BOUNCE,starling.animation.Transitions.easeInBounce);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_OUT_BOUNCE,starling.animation.Transitions.easeOutBounce);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_IN_OUT_BOUNCE,starling.animation.Transitions.easeInOutBounce);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_OUT_IN_BOUNCE,starling.animation.Transitions.easeOutInBounce);
};
starling.animation.Transitions.linear = function(ratio) {
	return ratio;
};
starling.animation.Transitions.easeIn = function(ratio) {
	return ratio * ratio * ratio;
};
starling.animation.Transitions.easeOut = function(ratio) {
	var invRatio = ratio - 1.0;
	return invRatio * invRatio * invRatio + 1;
};
starling.animation.Transitions.easeInOut = function(ratio) {
	return starling.animation.Transitions.easeCombined(starling.animation.Transitions.easeIn,starling.animation.Transitions.easeOut,ratio);
};
starling.animation.Transitions.easeOutIn = function(ratio) {
	return starling.animation.Transitions.easeCombined(starling.animation.Transitions.easeOut,starling.animation.Transitions.easeIn,ratio);
};
starling.animation.Transitions.easeInBack = function(ratio) {
	var s = 1.70158;
	return Math.pow(ratio,2) * ((s + 1.0) * ratio - s);
};
starling.animation.Transitions.easeOutBack = function(ratio) {
	var invRatio = ratio - 1.0;
	var s = 1.70158;
	return Math.pow(invRatio,2) * ((s + 1.0) * invRatio + s) + 1.0;
};
starling.animation.Transitions.easeInOutBack = function(ratio) {
	return starling.animation.Transitions.easeCombined(starling.animation.Transitions.easeInBack,starling.animation.Transitions.easeOutBack,ratio);
};
starling.animation.Transitions.easeOutInBack = function(ratio) {
	return starling.animation.Transitions.easeCombined(starling.animation.Transitions.easeOutBack,starling.animation.Transitions.easeInBack,ratio);
};
starling.animation.Transitions.easeInElastic = function(ratio) {
	if(ratio == 0 || ratio == 1) return ratio; else {
		var p = 0.3;
		var s = p / 4.0;
		var invRatio = ratio - 1;
		return -1. * Math.pow(2.0,10.0 * invRatio) * Math.sin((invRatio - s) * (2.0 * Math.PI) / p);
	}
};
starling.animation.Transitions.easeOutElastic = function(ratio) {
	if(ratio == 0 || ratio == 1) return ratio; else {
		var p = 0.3;
		var s = p / 4.0;
		return Math.pow(2.0,-10. * ratio) * Math.sin((ratio - s) * (2.0 * Math.PI) / p) + 1;
	}
};
starling.animation.Transitions.easeInOutElastic = function(ratio) {
	return starling.animation.Transitions.easeCombined(starling.animation.Transitions.easeInElastic,starling.animation.Transitions.easeOutElastic,ratio);
};
starling.animation.Transitions.easeOutInElastic = function(ratio) {
	return starling.animation.Transitions.easeCombined(starling.animation.Transitions.easeOutElastic,starling.animation.Transitions.easeInElastic,ratio);
};
starling.animation.Transitions.easeInBounce = function(ratio) {
	return 1.0 - starling.animation.Transitions.easeOutBounce(1.0 - ratio);
};
starling.animation.Transitions.easeOutBounce = function(ratio) {
	var s = 7.5625;
	var p = 2.75;
	var l;
	if(ratio < 1.0 / p) l = s * Math.pow(ratio,2); else if(ratio < 2.0 / p) {
		ratio -= 1.5 / p;
		l = s * Math.pow(ratio,2) + 0.75;
	} else if(ratio < 2.5 / p) {
		ratio -= 2.25 / p;
		l = s * Math.pow(ratio,2) + 0.9375;
	} else {
		ratio -= 2.625 / p;
		l = s * Math.pow(ratio,2) + 0.984375;
	}
	return l;
};
starling.animation.Transitions.easeInOutBounce = function(ratio) {
	return starling.animation.Transitions.easeCombined(starling.animation.Transitions.easeInBounce,starling.animation.Transitions.easeOutBounce,ratio);
};
starling.animation.Transitions.easeOutInBounce = function(ratio) {
	return starling.animation.Transitions.easeCombined(starling.animation.Transitions.easeOutBounce,starling.animation.Transitions.easeInBounce,ratio);
};
starling.animation.Transitions.easeCombined = function(startFunc,endFunc,ratio) {
	var dStartFunc = startFunc;
	var dEndFunc = endFunc;
	if(ratio < 0.5) return 0.5 * dStartFunc(ratio * 2.0);
	return 0.5 * dEndFunc((ratio - 0.5) * 2.0) + 0.5;
};
starling.animation.Transitions.prototype = {
	__class__: starling.animation.Transitions
};
starling.animation.Tween = function(target,time,transition) {
	if(transition == null) transition = "linear";
	starling.events.EventDispatcher.call(this);
	this.reset(target,time,transition);
};
$hxClasses["starling.animation.Tween"] = starling.animation.Tween;
starling.animation.Tween.__name__ = ["starling","animation","Tween"];
starling.animation.Tween.__interfaces__ = [starling.animation.IAnimatable];
starling.animation.Tween.getPropertyHint = function(property) {
	if(property.indexOf("color") != -1 || property.indexOf("Color") != -1) return "rgb";
	var hintMarkerIndex = property.indexOf(starling.animation.Tween.HINT_MARKER);
	if(hintMarkerIndex != -1) return HxOverrides.substr(property,hintMarkerIndex + 1,null); else return null;
};
starling.animation.Tween.getPropertyName = function(property) {
	var hintMarkerIndex = property.indexOf(starling.animation.Tween.HINT_MARKER);
	if(hintMarkerIndex != -1) return property.substring(0,hintMarkerIndex); else return property;
};
starling.animation.Tween.fromPool = function(target,time,transition) {
	if(transition == null) transition = "linear";
	if(starling.animation.Tween.sTweenPool.length > 0) return ((function($this) {
		var $r;
		var this1 = starling.animation.Tween.sTweenPool;
		var value = null;
		if(!this1.fixed) {
			if(this1.length > 0) {
				this1.length--;
				value = this1.data[this1.length];
			}
		}
		$r = value;
		return $r;
	}(this))).reset(target,time,transition); else return new starling.animation.Tween(target,time,transition);
};
starling.animation.Tween.toPool = function(tween) {
	tween.mOnStart = tween.mOnUpdate = tween.mOnRepeat = tween.mOnComplete = null;
	tween.mOnStartArgs = tween.mOnUpdateArgs = tween.mOnRepeatArgs = tween.mOnCompleteArgs = null;
	tween.mTarget = null;
	tween.mTransitionFunc = null;
	tween.removeEventListeners();
	var this1 = starling.animation.Tween.sTweenPool;
	if(!this1.fixed) {
		this1.length++;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
		this1.data[this1.length - 1] = tween;
	}
	this1.length;
};
starling.animation.Tween.__super__ = starling.events.EventDispatcher;
starling.animation.Tween.prototype = $extend(starling.events.EventDispatcher.prototype,{
	mTarget: null
	,mTransitionFunc: null
	,mTransitionName: null
	,mProperties: null
	,mStartValues: null
	,mEndValues: null
	,mUpdateFuncs: null
	,mOnStart: null
	,mOnUpdate: null
	,mOnRepeat: null
	,mOnComplete: null
	,mOnStartArgs: null
	,mOnUpdateArgs: null
	,mOnRepeatArgs: null
	,mOnCompleteArgs: null
	,mTotalTime: null
	,mCurrentTime: null
	,mProgress: null
	,mDelay: null
	,mRoundToInt: null
	,mNextTween: null
	,mRepeatCount: null
	,mRepeatDelay: null
	,mReverse: null
	,mCurrentCycle: null
	,isComplete: null
	,target: null
	,totalTime: null
	,currentTime: null
	,progress: null
	,reset: function(target,time,transition) {
		if(transition == null) transition = "linear";
		this.mTarget = target;
		this.mCurrentTime = 0.0;
		this.mTotalTime = Math.max(0.0001,time);
		this.mProgress = 0.0;
		this.mDelay = this.mRepeatDelay = 0.0;
		this.mOnStart = this.mOnUpdate = this.mOnRepeat = this.mOnComplete = null;
		this.mOnStartArgs = this.mOnUpdateArgs = this.mOnRepeatArgs = this.mOnCompleteArgs = null;
		this.mRoundToInt = this.mReverse = false;
		this.mRepeatCount = 1;
		this.mCurrentCycle = -1;
		this.mNextTween = null;
		if(typeof(transition) == "string") this.set_transition(transition); else if(Reflect.isFunction(transition)) this.set_transitionFunc(transition); else throw new openfl.errors.ArgumentError("Transition must be either a string or a function");
		if(this.mProperties != null) {
			var this1 = this.mProperties;
			if(!this1.fixed) {
				if(0 > this1.length) {
					var data;
					var this2;
					this2 = new Array(0);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,0)));
					this1.data = data;
				}
				this1.length = 0;
			}
			0;
		} else {
			var this3;
			this3 = new openfl.VectorData();
			var this4;
			this4 = new Array(0);
			this3.data = this4;
			this3.length = 0;
			this3.fixed = false;
			this.mProperties = this3;
		}
		if(this.mStartValues != null) {
			var this5 = this.mStartValues;
			if(!this5.fixed) {
				if(0 > this5.length) {
					var data1;
					var this6;
					this6 = new Array(0);
					data1 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data1,0,Std["int"](Math.min(this5.data.length,0)));
					this5.data = data1;
				}
				this5.length = 0;
			}
			0;
		} else {
			var this7;
			this7 = new openfl.VectorData();
			var this8;
			this8 = new Array(0);
			this7.data = this8;
			this7.length = 0;
			this7.fixed = false;
			this.mStartValues = this7;
		}
		if(this.mEndValues != null) {
			var this9 = this.mEndValues;
			if(!this9.fixed) {
				if(0 > this9.length) {
					var data2;
					var this10;
					this10 = new Array(0);
					data2 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data2,0,Std["int"](Math.min(this9.data.length,0)));
					this9.data = data2;
				}
				this9.length = 0;
			}
			0;
		} else {
			var this11;
			this11 = new openfl.VectorData();
			var this12;
			this12 = new Array(0);
			this11.data = this12;
			this11.length = 0;
			this11.fixed = false;
			this.mEndValues = this11;
		}
		if(this.mUpdateFuncs != null) {
			var this13 = this.mUpdateFuncs;
			if(!this13.fixed) {
				if(0 > this13.length) {
					var data3;
					var this14;
					this14 = new Array(0);
					data3 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data3,0,Std["int"](Math.min(this13.data.length,0)));
					this13.data = data3;
				}
				this13.length = 0;
			}
			0;
		} else {
			var this15;
			this15 = new openfl.VectorData();
			var this16;
			this16 = new Array(0);
			this15.data = this16;
			this15.length = 0;
			this15.fixed = false;
			this.mUpdateFuncs = this15;
		}
		return this;
	}
	,animate: function(property,endValue) {
		if(this.mTarget == null) return;
		var pos = this.mProperties.length;
		var updateFunc = this.getUpdateFuncFromProperty(property);
		var this1 = this.mProperties;
		var value = starling.animation.Tween.getPropertyName(property);
		if(!this1.fixed) {
			if(pos >= this1.length) this1.length = pos + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[pos] = value;
		var this3 = this.mStartValues;
		if(!this3.fixed) {
			if(pos >= this3.length) this3.length = pos + 1;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[pos] = Math.NaN;
		var this5 = this.mEndValues;
		if(!this5.fixed) {
			if(pos >= this5.length) this5.length = pos + 1;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[pos] = endValue;
		var this7 = this.mUpdateFuncs;
		if(!this7.fixed) {
			if(pos >= this7.length) this7.length = pos + 1;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[pos] = updateFunc;
	}
	,scaleTo: function(factor) {
		this.animate("scaleX",factor);
		this.animate("scaleY",factor);
	}
	,moveTo: function(x,y) {
		this.animate("x",x);
		this.animate("y",y);
	}
	,fadeTo: function(alpha) {
		this.animate("alpha",alpha);
	}
	,rotateTo: function(angle,type) {
		if(type == null) type = "rad";
		this.animate("rotation#" + type,angle);
	}
	,advanceTime: function(time) {
		if(time == 0 || this.mRepeatCount == 1 && this.mCurrentTime == this.mTotalTime) return;
		var i;
		var previousTime = this.mCurrentTime;
		var restTime = this.mTotalTime - this.mCurrentTime;
		var carryOverTime;
		if(time > restTime) carryOverTime = time - restTime; else carryOverTime = 0.0;
		this.mCurrentTime += time;
		if(this.mCurrentTime <= 0) return; else if(this.mCurrentTime > this.mTotalTime) this.mCurrentTime = this.mTotalTime;
		if(this.mCurrentCycle < 0 && previousTime <= 0 && this.mCurrentTime > 0) {
			this.mCurrentCycle++;
			if(this.mOnStart != null) this.mOnStart.apply(this,this.mOnStartArgs);
		}
		var ratio = this.mCurrentTime / this.mTotalTime;
		var reversed = this.mReverse && this.mCurrentCycle % 2 == 1;
		var numProperties = this.mStartValues.length;
		if(reversed) this.mProgress = this.mTransitionFunc.apply(this,[1.0 - ratio]); else this.mProgress = this.mTransitionFunc.apply(this,[ratio]);
		var _g = 0;
		while(_g < numProperties) {
			var i1 = _g++;
			if(this.mStartValues.data[i1] != this.mStartValues.data[i1]) {
				var this1 = this.mStartValues;
				var value = Reflect.getProperty(this.mTarget,this.mProperties.data[i1]);
				if(!this1.fixed) {
					if(i1 >= this1.length) this1.length = i1 + 1;
					if(this1.data.length < this1.length) {
						var data;
						var this2;
						this2 = new Array(this1.data.length + 10);
						data = this2;
						haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
						this1.data = data;
					}
				}
				this1.data[i1] = value;
			}
			this.updateFunc = this.mUpdateFuncs.data[i1];
			this.updateFunc.apply(this,[this.mProperties.data[i1],this.mStartValues.data[i1],this.mEndValues.data[i1]]);
		}
		if(this.mOnUpdate != null) this.mOnUpdate.apply(this,this.mOnUpdateArgs);
		if(previousTime < this.mTotalTime && this.mCurrentTime >= this.mTotalTime) {
			if(this.mRepeatCount == 0 || this.mRepeatCount > 1) {
				this.mCurrentTime = -this.mRepeatDelay;
				this.mCurrentCycle++;
				if(this.mRepeatCount > 1) this.mRepeatCount--;
				if(this.mOnRepeat != null) this.mOnRepeat.apply(this,this.mOnRepeatArgs);
			} else {
				var onComplete = this.mOnComplete;
				var onCompleteArgs = this.mOnCompleteArgs;
				this.dispatchEventWith(starling.events.Event.REMOVE_FROM_JUGGLER);
				if(onComplete != null) onComplete.apply(this,onCompleteArgs);
			}
		}
		if(carryOverTime != null) this.advanceTime(carryOverTime);
	}
	,getUpdateFuncFromProperty: function(property) {
		var updateFunc;
		var hint = starling.animation.Tween.getPropertyHint(property);
		if(hint == null) updateFunc = $bind(this,this.updateStandard); else switch(hint) {
		case "rgb":
			updateFunc = $bind(this,this.updateRgb);
			break;
		case "rad":
			updateFunc = $bind(this,this.updateRad);
			break;
		case "deg":
			updateFunc = $bind(this,this.updateDeg);
			break;
		default:
			haxe.Log.trace("[Starling] Ignoring unknown property hint:",{ fileName : "Tween.hx", lineNumber : 296, className : "starling.animation.Tween", methodName : "getUpdateFuncFromProperty", customParams : [hint]});
			updateFunc = $bind(this,this.updateStandard);
		}
		return updateFunc;
	}
	,updateStandard: function(property,startValue,endValue) {
		var newValue = startValue + this.mProgress * (endValue - startValue);
		if(this.mRoundToInt) newValue = Math.round(newValue);
		try {
			Reflect.setProperty(this.mTarget,property,newValue);
		} catch( e ) {
			if( js.Boot.__instanceof(e,openfl.errors.Error) ) {
			} else throw(e);
		}
	}
	,updateRgb: function(property,startValue,endValue) {
		var startColor = startValue;
		var endColor = endValue;
		var startA = startColor >> 24 & 255;
		var startR = startColor >> 16 & 255;
		var startG = startColor >> 8 & 255;
		var startB = startColor & 255;
		var endA = endColor >> 24 & 255;
		var endR = endColor >> 16 & 255;
		var endG = endColor >> 8 & 255;
		var endB = endColor & 255;
		var newA;
		newA = (function($this) {
			var $r;
			var $int = startA;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) + (function($this) {
			var $r;
			var int1 = endA - startA;
			$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
			return $r;
		}(this)) * this.mProgress;
		var newR;
		newR = (function($this) {
			var $r;
			var int2 = startR;
			$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
			return $r;
		}(this)) + (function($this) {
			var $r;
			var int3 = endR - startR;
			$r = int3 < 0?4294967296.0 + int3:int3 + 0.0;
			return $r;
		}(this)) * this.mProgress;
		var newG;
		newG = (function($this) {
			var $r;
			var int4 = startG;
			$r = int4 < 0?4294967296.0 + int4:int4 + 0.0;
			return $r;
		}(this)) + (function($this) {
			var $r;
			var int5 = endG - startG;
			$r = int5 < 0?4294967296.0 + int5:int5 + 0.0;
			return $r;
		}(this)) * this.mProgress;
		var newB;
		newB = (function($this) {
			var $r;
			var int6 = startB;
			$r = int6 < 0?4294967296.0 + int6:int6 + 0.0;
			return $r;
		}(this)) + (function($this) {
			var $r;
			var int7 = endB - startB;
			$r = int7 < 0?4294967296.0 + int7:int7 + 0.0;
			return $r;
		}(this)) * this.mProgress;
		haxe.Log.trace("CHECK",{ fileName : "Tween.hx", lineNumber : 355, className : "starling.animation.Tween", methodName : "updateRgb"});
		Reflect.setProperty(this.mTarget,property,newA << 24 | newR << 16 | newG << 8 | newB);
	}
	,updateRad: function(property,startValue,endValue) {
		this.updateAngle(Math.PI,property,startValue,endValue);
	}
	,updateDeg: function(property,startValue,endValue) {
		this.updateAngle(180,property,startValue,endValue);
	}
	,updateAngle: function(pi,property,startValue,endValue) {
		while(Math.abs(endValue - startValue) > pi) if(startValue < endValue) endValue -= 2.0 * pi; else endValue += 2.0 * pi;
		this.updateStandard(property,startValue,endValue);
	}
	,getEndValue: function(property) {
		var index;
		var this1 = this.mProperties;
		var value = -1;
		var _g1 = 0;
		var _g = this1.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this1.data[i] == property) {
				value = i;
				break;
			}
		}
		index = value;
		if(index == -1) throw new openfl.errors.ArgumentError("The property '" + property + "' is not animated"); else return this.mEndValues.data[index];
	}
	,get_isComplete: function() {
		return this.mCurrentTime >= this.mTotalTime && this.mRepeatCount == 1;
	}
	,get_target: function() {
		return this.mTarget;
	}
	,get_transition: function() {
		return this.mTransitionName;
	}
	,set_transition: function(value) {
		this.mTransitionName = value;
		this.mTransitionFunc = starling.animation.Transitions.getTransition(value);
		if(this.mTransitionFunc == null) throw new openfl.errors.ArgumentError("Invalid transiton: " + value);
		return value;
	}
	,get_transitionFunc: function() {
		return this.mTransitionFunc;
	}
	,set_transitionFunc: function(value) {
		this.mTransitionName = "custom";
		this.mTransitionFunc = value;
		return value;
	}
	,get_totalTime: function() {
		return this.mTotalTime;
	}
	,get_currentTime: function() {
		return this.mCurrentTime;
	}
	,get_progress: function() {
		return this.mProgress;
	}
	,get_delay: function() {
		return this.mDelay;
	}
	,set_delay: function(value) {
		this.mCurrentTime = this.mCurrentTime + this.mDelay - value;
		this.mDelay = value;
		return value;
	}
	,get_repeatCount: function() {
		return this.mRepeatCount;
	}
	,set_repeatCount: function(value) {
		this.mRepeatCount = value;
		return value;
	}
	,get_repeatDelay: function() {
		return this.mRepeatDelay;
	}
	,set_repeatDelay: function(value) {
		this.mRepeatDelay = value;
		return value;
	}
	,get_reverse: function() {
		return this.mReverse;
	}
	,set_reverse: function(value) {
		this.mReverse = value;
		return value;
	}
	,get_roundToInt: function() {
		return this.mRoundToInt;
	}
	,set_roundToInt: function(value) {
		this.mRoundToInt = value;
		return value;
	}
	,get_onStart: function() {
		return this.mOnStart;
	}
	,set_onStart: function(value) {
		this.mOnStart = value;
		return value;
	}
	,get_onUpdate: function() {
		return this.mOnUpdate;
	}
	,set_onUpdate: function(value) {
		this.mOnUpdate = value;
		return value;
	}
	,get_onRepeat: function() {
		return this.mOnRepeat;
	}
	,set_onRepeat: function(value) {
		this.mOnRepeat = value;
		return value;
	}
	,get_onComplete: function() {
		return this.mOnComplete;
	}
	,set_onComplete: function(value) {
		this.mOnComplete = value;
		return value;
	}
	,get_onStartArgs: function() {
		return this.mOnStartArgs;
	}
	,set_onStartArgs: function(value) {
		this.mOnStartArgs = value;
		return value;
	}
	,get_onUpdateArgs: function() {
		return this.mOnUpdateArgs;
	}
	,set_onUpdateArgs: function(value) {
		this.mOnUpdateArgs = value;
		return value;
	}
	,get_onRepeatArgs: function() {
		return this.mOnRepeatArgs;
	}
	,set_onRepeatArgs: function(value) {
		this.mOnRepeatArgs = value;
		return value;
	}
	,get_onCompleteArgs: function() {
		return this.mOnCompleteArgs;
	}
	,set_onCompleteArgs: function(value) {
		this.mOnCompleteArgs = value;
		return value;
	}
	,get_nextTween: function() {
		return this.mNextTween;
	}
	,set_nextTween: function(value) {
		this.mNextTween = value;
		return value;
	}
	,updateFunc: null
	,__class__: starling.animation.Tween
	,__properties__: {set_nextTween:"set_nextTween",get_nextTween:"get_nextTween",set_onCompleteArgs:"set_onCompleteArgs",get_onCompleteArgs:"get_onCompleteArgs",set_onRepeatArgs:"set_onRepeatArgs",get_onRepeatArgs:"get_onRepeatArgs",set_onUpdateArgs:"set_onUpdateArgs",get_onUpdateArgs:"get_onUpdateArgs",set_onStartArgs:"set_onStartArgs",get_onStartArgs:"get_onStartArgs",set_onComplete:"set_onComplete",get_onComplete:"get_onComplete",set_onRepeat:"set_onRepeat",get_onRepeat:"get_onRepeat",set_onUpdate:"set_onUpdate",get_onUpdate:"get_onUpdate",set_onStart:"set_onStart",get_onStart:"get_onStart",set_roundToInt:"set_roundToInt",get_roundToInt:"get_roundToInt",set_reverse:"set_reverse",get_reverse:"get_reverse",set_repeatDelay:"set_repeatDelay",get_repeatDelay:"get_repeatDelay",set_repeatCount:"set_repeatCount",get_repeatCount:"get_repeatCount",set_delay:"set_delay",get_delay:"get_delay",get_progress:"get_progress",get_currentTime:"get_currentTime",get_totalTime:"get_totalTime",set_transitionFunc:"set_transitionFunc",get_transitionFunc:"get_transitionFunc",set_transition:"set_transition",get_transition:"get_transition",get_target:"get_target",get_isComplete:"get_isComplete"}
});
starling.core = {};
starling.core.RenderSupport = function() {
	this.mStencilReferenceValue = 0;
	this.mMasks = (function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(0);
			this1.data = this2;
		}
		this1.length = 0;
		this1.fixed = false;
		$r = this1;
		return $r;
	}(this));
	this.mClipRectStackSize = 0;
	this.mProjectionMatrix = new openfl.geom.Matrix();
	this.mModelViewMatrix = new openfl.geom.Matrix();
	this.mMvpMatrix = new openfl.geom.Matrix();
	this.mMatrixStack = new Array();
	this.mMatrixStackSize = 0;
	this.mProjectionMatrix3D = new openfl.geom.Matrix3D();
	this.mModelViewMatrix3D = new openfl.geom.Matrix3D();
	this.mMvpMatrix3D = new openfl.geom.Matrix3D();
	this.mMatrixStack3D = new Array();
	this.mMatrixStack3DSize = 0;
	this.mDrawCount = 0;
	this.mRenderTarget = null;
	this.mBlendMode = starling.display.BlendMode.NORMAL;
	this.mClipRectStack = new Array();
	this.mCurrentQuadBatchID = 0;
	this.mQuadBatches = new Array();
	this.mQuadBatches.push(new starling.display.QuadBatch());
	this.loadIdentity();
	this.setProjectionMatrix(0,0,400,300);
};
$hxClasses["starling.core.RenderSupport"] = starling.core.RenderSupport;
starling.core.RenderSupport.__name__ = ["starling","core","RenderSupport"];
starling.core.RenderSupport.transformMatrixForObject = function(matrix,object) {
	starling.utils.MatrixUtil.prependMatrix(matrix,object.get_transformationMatrix());
};
starling.core.RenderSupport.setDefaultBlendFactors = function(premultipliedAlpha) {
	starling.core.RenderSupport.setBlendFactors(premultipliedAlpha);
};
starling.core.RenderSupport.setBlendFactors = function(premultipliedAlpha,blendMode) {
	if(blendMode == null) blendMode = "normal";
	var blendFactors = starling.display.BlendMode.getBlendFactors(blendMode,premultipliedAlpha);
	starling.core.Starling.get_Context().setBlendFactors(blendFactors[0],blendFactors[1]);
};
starling.core.RenderSupport.Clear = function(rgb,alpha) {
	if(alpha == null) alpha = 0.0;
	if(rgb == null) rgb = 0;
	starling.core.Starling.get_Context().clear(starling.utils.Color.getRed(rgb) / 255.0,starling.utils.Color.getGreen(rgb) / 255.0,starling.utils.Color.getBlue(rgb) / 255.0,alpha);
};
starling.core.RenderSupport.assembleAgal = function(vertexShader,fragmentShader,resultProgram) {
	if(resultProgram == null) {
		var context = starling.core.Starling.get_Context();
		if(context == null) throw new starling.errors.MissingContextError();
		resultProgram = context.createProgram();
	}
	var vertexByteCode = openfl.display3D._shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.VERTEX,vertexShader);
	var fragmentByteCode = openfl.display3D._shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.FRAGMENT,fragmentShader);
	resultProgram.upload(vertexByteCode,fragmentByteCode);
	return resultProgram;
};
starling.core.RenderSupport.getTextureLookupFlags = function(format,mipMapping,repeat,smoothing) {
	if(smoothing == null) smoothing = "bilinear";
	if(repeat == null) repeat = false;
	var options = ["2d",repeat?"repeat":"clamp"];
	if(format == openfl.display3D.Context3DTextureFormat.COMPRESSED) options.push("dxt1"); else if(format == openfl.display3D.Context3DTextureFormat.COMPRESSED_ALPHA) options.push("dxt5");
	if(smoothing == starling.textures.TextureSmoothing.NONE) {
		options.push("nearest");
		options.push(mipMapping?"mipnearest":"mipnone");
	} else if(smoothing == starling.textures.TextureSmoothing.BILINEAR) {
		options.push("linear");
		options.push(mipMapping?"mipnearest":"mipnone");
	} else {
		options.push("linear");
		options.push(mipMapping?"miplinear":"mipnone");
	}
	return "<" + options.join("") + ">";
};
starling.core.RenderSupport.prototype = {
	mProjectionMatrix: null
	,mModelViewMatrix: null
	,mMvpMatrix: null
	,mMatrixStack: null
	,mMatrixStackSize: null
	,mProjectionMatrix3D: null
	,mModelViewMatrix3D: null
	,mMvpMatrix3D: null
	,mMatrixStack3D: null
	,mMatrixStack3DSize: null
	,mDrawCount: null
	,mBlendMode: null
	,mRenderTarget: null
	,mClipRectStack: null
	,mClipRectStackSize: null
	,mQuadBatches: null
	,mCurrentQuadBatchID: null
	,mvpMatrix: null
	,modelViewMatrix: null
	,mvpMatrix3D: null
	,drawCount: null
	,dispose: function() {
		var _g = 0;
		var _g1 = this.mQuadBatches;
		while(_g < _g1.length) {
			var quadBatch = _g1[_g];
			++_g;
			quadBatch.dispose();
		}
	}
	,setProjectionMatrix: function(x,y,width,height,stageWidth,stageHeight,cameraPos) {
		if(stageHeight == null) stageHeight = 0;
		if(stageWidth == null) stageWidth = 0;
		if(stageWidth <= 0) stageWidth = width;
		if(stageHeight <= 0) stageHeight = height;
		if(cameraPos == null) {
			cameraPos = starling.core.RenderSupport.sPoint3D;
			cameraPos.setTo(stageWidth / 2,stageHeight / 2,stageWidth / Math.tan(0.5) * 0.5);
		}
		this.mProjectionMatrix.setTo(2.0 / width,0,0,-2. / height,-(2 * x + width) / width,(2 * y + height) / height);
		var focalLength = Math.abs(cameraPos.z);
		var offsetX = cameraPos.x - stageWidth / 2;
		var offsetY = cameraPos.y - stageHeight / 2;
		var far = focalLength * 20;
		var near = 1;
		var scaleX = stageWidth / width;
		var scaleY = stageHeight / height;
		starling.core.RenderSupport.sMatrixData[0] = 2 * focalLength / stageWidth;
		starling.core.RenderSupport.sMatrixData[5] = -2 * focalLength / stageHeight;
		starling.core.RenderSupport.sMatrixData[10] = far / (far - near);
		starling.core.RenderSupport.sMatrixData[14] = -far * near / (far - near);
		starling.core.RenderSupport.sMatrixData[11] = 1;
		starling.core.RenderSupport.sMatrixData[0] *= scaleX;
		starling.core.RenderSupport.sMatrixData[5] *= scaleY;
		starling.core.RenderSupport.sMatrixData[8] = scaleX - 1 - 2 * scaleX * (x - offsetX) / stageWidth;
		starling.core.RenderSupport.sMatrixData[9] = -scaleY + 1 + 2 * scaleY * (y - offsetY) / stageHeight;
		this.mProjectionMatrix3D.copyRawDataFrom((function($this) {
			var $r;
			var value = starling.core.RenderSupport.sMatrixData;
			var vectorData = new openfl.VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while(_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this)));
		this.mProjectionMatrix3D.prependTranslation(-stageWidth / 2.0 - offsetX,-stageHeight / 2.0 - offsetY,focalLength);
		this.applyClipRect();
	}
	,setOrthographicProjection: function(x,y,width,height) {
		haxe.Log.trace("Deprecated, use setProjectionMatrix instead",{ fileName : "RenderSupport.hx", lineNumber : 197, className : "starling.core.RenderSupport", methodName : "setOrthographicProjection"});
		this.setProjectionMatrix(x,y,width,height);
	}
	,loadIdentity: function() {
		this.mModelViewMatrix.identity();
		this.mModelViewMatrix3D.identity();
	}
	,translateMatrix: function(dx,dy) {
		starling.utils.MatrixUtil.prependTranslation(this.mModelViewMatrix,dx,dy);
	}
	,rotateMatrix: function(angle) {
		starling.utils.MatrixUtil.prependRotation(this.mModelViewMatrix,angle);
	}
	,scaleMatrix: function(sx,sy) {
		starling.utils.MatrixUtil.prependScale(this.mModelViewMatrix,sx,sy);
	}
	,prependMatrix: function(matrix) {
		starling.utils.MatrixUtil.prependMatrix(this.mModelViewMatrix,matrix);
	}
	,transformMatrix: function(object) {
		starling.utils.MatrixUtil.prependMatrix(this.mModelViewMatrix,object.get_transformationMatrix());
	}
	,pushMatrix: function() {
		if(this.mMatrixStack.length < this.mMatrixStackSize + 1) this.mMatrixStack.push(new openfl.geom.Matrix());
		this.mMatrixStack[Std["int"](this.mMatrixStackSize++)].copyFrom(this.mModelViewMatrix);
	}
	,popMatrix: function() {
		this.mModelViewMatrix.copyFrom(this.mMatrixStack[Std["int"](--this.mMatrixStackSize)]);
	}
	,resetMatrix: function() {
		this.mMatrixStackSize = 0;
		this.mMatrixStack3DSize = 0;
		this.loadIdentity();
	}
	,get_mvpMatrix: function() {
		this.mMvpMatrix.copyFrom(this.mModelViewMatrix);
		this.mMvpMatrix.concat(this.mProjectionMatrix);
		return this.mMvpMatrix;
	}
	,get_modelViewMatrix: function() {
		return this.mModelViewMatrix;
	}
	,get_projectionMatrix: function() {
		return this.mProjectionMatrix;
	}
	,set_projectionMatrix: function(value) {
		this.mProjectionMatrix.copyFrom(value);
		this.applyClipRect();
		return value;
	}
	,transformMatrix3D: function(object) {
		this.mModelViewMatrix3D.prepend(starling.utils.MatrixUtil.convertTo3D(this.mModelViewMatrix,starling.core.RenderSupport.sMatrix3D));
		this.mModelViewMatrix3D.prepend(object.get_transformationMatrix3D());
		this.mModelViewMatrix.identity();
	}
	,pushMatrix3D: function() {
		if(this.mMatrixStack3D.length < this.mMatrixStack3DSize + 1) this.mMatrixStack3D.push(new openfl.geom.Matrix3D());
		this.mMatrixStack3D[Std["int"](this.mMatrixStack3DSize++)].copyFrom(this.mModelViewMatrix3D);
	}
	,popMatrix3D: function() {
		this.mModelViewMatrix3D.copyFrom(this.mMatrixStack3D[Std["int"](--this.mMatrixStack3DSize)]);
	}
	,get_mvpMatrix3D: function() {
		if(this.mMatrixStack3DSize == 0) starling.utils.MatrixUtil.convertTo3D(this.get_mvpMatrix(),this.mMvpMatrix3D); else {
			this.mMvpMatrix3D.copyFrom(this.mProjectionMatrix3D);
			this.mMvpMatrix3D.prepend(this.mModelViewMatrix3D);
			this.mMvpMatrix3D.prepend(starling.utils.MatrixUtil.convertTo3D(this.mModelViewMatrix,starling.core.RenderSupport.sMatrix3D));
		}
		return this.mMvpMatrix3D;
	}
	,get_projectionMatrix3D: function() {
		return this.mProjectionMatrix3D;
	}
	,set_projectionMatrix3D: function(value) {
		this.mProjectionMatrix3D.copyFrom(value);
		return value;
	}
	,applyBlendMode: function(premultipliedAlpha) {
		starling.core.RenderSupport.setBlendFactors(premultipliedAlpha,this.mBlendMode);
	}
	,get_blendMode: function() {
		return this.mBlendMode;
	}
	,set_blendMode: function(value) {
		if(value != starling.display.BlendMode.AUTO) this.mBlendMode = value;
		return value;
	}
	,get_renderTarget: function() {
		return this.mRenderTarget;
	}
	,set_renderTarget: function(target) {
		this.setRenderTarget(target);
		return target;
	}
	,setRenderTarget: function(target,antiAliasing) {
		if(antiAliasing == null) antiAliasing = 0;
		this.mRenderTarget = target;
		this.applyClipRect();
		if(target != null) starling.core.Starling.get_Context().setRenderToTexture(target.get_base(),starling.utils.SystemUtil.get_supportsDepthAndStencil(),antiAliasing); else starling.core.Starling.get_Context().setRenderToBackBuffer();
	}
	,pushClipRect: function(rectangle) {
		if(this.mClipRectStack.length < this.mClipRectStackSize + 1) this.mClipRectStack.push(new openfl.geom.Rectangle());
		this.mClipRectStack[this.mClipRectStackSize].copyFrom(rectangle);
		rectangle = this.mClipRectStack[this.mClipRectStackSize];
		if(this.mClipRectStackSize > 0) starling.utils.RectangleUtil.intersect(rectangle,this.mClipRectStack[this.mClipRectStackSize - 1],rectangle);
		++this.mClipRectStackSize;
		this.applyClipRect();
		return rectangle;
	}
	,popClipRect: function() {
		if(this.mClipRectStackSize > 0) {
			--this.mClipRectStackSize;
			this.applyClipRect();
		}
	}
	,applyClipRect: function() {
		this.finishQuadBatch();
		var context = starling.core.Starling.get_Context();
		if(context == null) return;
		if(this.mClipRectStackSize > 0) {
			var width;
			var height;
			var rect = this.mClipRectStack[this.mClipRectStackSize - 1];
			if(this.mRenderTarget != null) {
				width = Std["int"](this.mRenderTarget.get_root().get_nativeWidth());
				height = Std["int"](this.mRenderTarget.get_root().get_nativeHeight());
			} else {
				width = starling.core.Starling.get_current().get_backBufferWidth();
				height = starling.core.Starling.get_current().get_backBufferHeight();
			}
			starling.utils.MatrixUtil.transformCoords(this.mProjectionMatrix,rect.x,rect.y,starling.core.RenderSupport.sPoint);
			starling.core.RenderSupport.sClipRect.x = (starling.core.RenderSupport.sPoint.x * 0.5 + 0.5) * width;
			starling.core.RenderSupport.sClipRect.y = (0.5 - starling.core.RenderSupport.sPoint.y * 0.5) * height;
			starling.utils.MatrixUtil.transformCoords(this.mProjectionMatrix,rect.get_right(),rect.get_bottom(),starling.core.RenderSupport.sPoint);
			starling.core.RenderSupport.sClipRect.set_right((starling.core.RenderSupport.sPoint.x * 0.5 + 0.5) * width);
			starling.core.RenderSupport.sClipRect.set_bottom((0.5 - starling.core.RenderSupport.sPoint.y * 0.5) * height);
			starling.core.RenderSupport.sBufferRect.setTo(0,0,width,height);
			starling.utils.RectangleUtil.intersect(starling.core.RenderSupport.sClipRect,starling.core.RenderSupport.sBufferRect,starling.core.RenderSupport.sScissorRect);
			if(starling.core.RenderSupport.sScissorRect.width < 1 || starling.core.RenderSupport.sScissorRect.height < 1) starling.core.RenderSupport.sScissorRect.setTo(0,0,1,1);
			context.setScissorRectangle(starling.core.RenderSupport.sScissorRect);
		} else context.setScissorRectangle(null);
	}
	,mMasks: null
	,mStencilReferenceValue: null
	,pushMask: function(mask) {
		var this1 = this.mMasks;
		var key = this.mMasks.length;
		if(!this1.fixed) {
			if(key >= this1.length) this1.length = key + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[key] = mask;
		this.mStencilReferenceValue++;
		var context = starling.core.Starling.get_Context();
		if(context == null) return;
		this.finishQuadBatch();
		context.setStencilActions(1032,514,7682);
		this.drawMask(mask);
		context.setStencilReferenceValue(this.mStencilReferenceValue);
		context.setStencilActions(1032,514,7680);
	}
	,popMask: function() {
		var mask;
		var this1 = this.mMasks;
		var value = null;
		if(!this1.fixed) {
			if(this1.length > 0) {
				this1.length--;
				value = this1.data[this1.length];
			}
		}
		mask = value;
		this.mStencilReferenceValue--;
		var context = starling.core.Starling.get_Context();
		if(context == null) return;
		this.finishQuadBatch();
		context.setStencilActions(1032,514,7683);
		this.drawMask(mask);
		context.setStencilReferenceValue(this.mStencilReferenceValue);
		context.setStencilActions(1032,514,7680);
	}
	,drawMask: function(mask) {
		this.pushMatrix();
		var stage = mask.get_stage();
		if(stage != null) mask.getTransformationMatrix(stage,this.mModelViewMatrix); else this.transformMatrix(mask);
		mask.render(this,0.0);
		this.finishQuadBatch();
		this.popMatrix();
	}
	,get_stencilReferenceValue: function() {
		return this.mStencilReferenceValue;
	}
	,set_stencilReferenceValue: function(value) {
		this.mStencilReferenceValue = value;
		if(starling.core.Starling.get_current().get_contextValid()) starling.core.Starling.get_Context().setStencilReferenceValue(value);
		return this.mStencilReferenceValue;
	}
	,batchQuad: function(quad,parentAlpha,texture,smoothing) {
		if(this.mQuadBatches[this.mCurrentQuadBatchID].isStateChange(quad.get_tinted(),parentAlpha,texture,smoothing,this.mBlendMode)) this.finishQuadBatch();
		this.mQuadBatches[this.mCurrentQuadBatchID].addQuad(quad,parentAlpha,texture,smoothing,this.mModelViewMatrix,this.mBlendMode);
	}
	,batchQuadBatch: function(quadBatch,parentAlpha) {
		if(this.mQuadBatches[this.mCurrentQuadBatchID].isStateChange(quadBatch.get_tinted(),parentAlpha,quadBatch.get_texture(),quadBatch.get_smoothing(),this.mBlendMode)) this.finishQuadBatch();
		this.mQuadBatches[this.mCurrentQuadBatchID].addQuadBatch(quadBatch,parentAlpha,this.mModelViewMatrix,this.mBlendMode);
	}
	,finishQuadBatch: function() {
		var currentBatch = this.mQuadBatches[this.mCurrentQuadBatchID];
		if(currentBatch.get_numQuads() != 0) {
			if(this.mMatrixStack3DSize == 0) currentBatch.renderCustom(this.mProjectionMatrix3D); else {
				this.mMvpMatrix3D.copyFrom(this.mProjectionMatrix3D);
				this.mMvpMatrix3D.prepend(this.mModelViewMatrix3D);
				currentBatch.renderCustom(this.mMvpMatrix3D);
			}
			currentBatch.reset();
			++this.mCurrentQuadBatchID;
			++this.mDrawCount;
			if(this.mQuadBatches.length <= this.mCurrentQuadBatchID) this.mQuadBatches.push(new starling.display.QuadBatch());
		}
	}
	,nextFrame: function() {
		this.resetMatrix();
		this.trimQuadBatches();
		var this1 = this.mMasks;
		if(!this1.fixed) {
			if(0 > this1.length) {
				var data;
				var this2;
				this2 = new Array(0);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,0)));
				this1.data = data;
			}
			this1.length = 0;
		}
		0;
		this.mCurrentQuadBatchID = 0;
		this.mBlendMode = starling.display.BlendMode.NORMAL;
		this.mDrawCount = 0;
	}
	,trimQuadBatches: function() {
		var numUsedBatches = this.mCurrentQuadBatchID + 1;
		var numTotalBatches = this.mQuadBatches.length;
		if(numTotalBatches >= 16 && numTotalBatches > 2 * numUsedBatches) {
			var numToRemove = numTotalBatches - numUsedBatches;
			var _g = 0;
			while(_g < numToRemove) {
				var i = _g++;
				this.mQuadBatches.pop().dispose();
			}
		}
	}
	,clear: function(rgb,alpha) {
		if(alpha == null) alpha = 0.0;
		if(rgb == null) rgb = 0;
		starling.core.RenderSupport.Clear(rgb,alpha);
	}
	,raiseDrawCount: function(value) {
		if(value == null) value = 1;
		this.mDrawCount = this.mDrawCount + value;
	}
	,get_drawCount: function() {
		return this.mDrawCount;
	}
	,__class__: starling.core.RenderSupport
	,__properties__: {set_stencilReferenceValue:"set_stencilReferenceValue",get_stencilReferenceValue:"get_stencilReferenceValue",get_drawCount:"get_drawCount",set_renderTarget:"set_renderTarget",get_renderTarget:"get_renderTarget",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_projectionMatrix3D:"set_projectionMatrix3D",get_projectionMatrix3D:"get_projectionMatrix3D",get_mvpMatrix3D:"get_mvpMatrix3D",set_projectionMatrix:"set_projectionMatrix",get_projectionMatrix:"get_projectionMatrix",get_modelViewMatrix:"get_modelViewMatrix",get_mvpMatrix:"get_mvpMatrix"}
};
starling.core.Starling = function(rootClass,stage,viewPort,stage3D,renderMode,profile) {
	if(profile == null) profile = "baselineConstrained";
	if(renderMode == null) renderMode = "auto";
	this.mShareContext = false;
	starling.events.EventDispatcher.call(this);
	if(stage == null) throw new openfl.errors.ArgumentError("Stage must not be null");
	if(viewPort == null) viewPort = new openfl.geom.Rectangle(0,0,stage.stageWidth,stage.stageHeight);
	if(stage3D == null) stage3D = stage.stage3Ds.data[0];
	starling.utils.SystemUtil.initialize();
	starling.core.Starling.sAll.push(this);
	this.makeCurrent();
	this.mRootClass = rootClass;
	this.mViewPort = viewPort;
	this.mPreviousViewPort = new openfl.geom.Rectangle();
	this.mStage3D = stage3D;
	this.mStage = new starling.display.Stage(viewPort.width | 0,viewPort.height | 0,stage.get_color());
	this.mNativeOverlay = new openfl.display.Sprite();
	this.mNativeStage = stage;
	this.mNativeStage.addChild(this.mNativeOverlay);
	this.mNativeStageContentScaleFactor = 1.0;
	this.mTouchProcessor = new starling.events.TouchProcessor(this.mStage);
	this.mJuggler = new starling.animation.Juggler();
	this.mAntiAliasing = 0;
	this.mSimulateMultitouch = false;
	this.mEnableErrorChecking = false;
	this.mSupportHighResolutions = false;
	this.mLastFrameTimestamp = openfl.Lib.getTimer() / 1000.0;
	this.mSupport = new starling.core.RenderSupport();
	var v = new haxe.ds.StringMap();
	starling.core.Starling.sContextData.set(stage3D,v);
	v;
	var this1 = starling.core.Starling.sContextData.h[stage3D.__id__];
	var v1 = new haxe.ds.StringMap();
	this1.set(starling.core.Starling.PROGRAM_DATA_NAME,v1);
	v1;
	stage.scaleMode = openfl.display.StageScaleMode.NO_SCALE;
	stage.align = openfl.display.StageAlign.TOP_LEFT;
	var _g = 0;
	var _g1 = this.get_touchEventTypes();
	while(_g < _g1.length) {
		var touchEventType = _g1[_g];
		++_g;
		stage.addEventListener(touchEventType,$bind(this,this.onTouch),false,0,true);
	}
	stage.addEventListener(openfl.events.KeyboardEvent.KEY_DOWN,$bind(this,this.onKey),false,0,true);
	stage.addEventListener(openfl.events.KeyboardEvent.KEY_UP,$bind(this,this.onKey),false,0,true);
	stage.addEventListener(openfl.events.Event.RESIZE,$bind(this,this.onResize),false,0,true);
	stage.addEventListener(openfl.events.Event.MOUSE_LEAVE,$bind(this,this.onMouseLeave),false,0,true);
	this.mStage3D.addEventListener(openfl.events.Event.CONTEXT3D_CREATE,$bind(this,this.onContextCreated),false,10,true);
	this.mStage3D.addEventListener(openfl.events.ErrorEvent.ERROR,$bind(this,this.onStage3DError),false,10,true);
	haxe.Log.trace("mStage3D " + Std.string(this.mStage3D),{ fileName : "Starling.hx", lineNumber : 352, className : "starling.core.Starling", methodName : "new"});
	haxe.Log.trace("mStage3D.x " + this.mStage3D.x,{ fileName : "Starling.hx", lineNumber : 353, className : "starling.core.Starling", methodName : "new"});
	haxe.Log.trace("mStage3D.context3D " + Std.string(this.mStage3D.context3D),{ fileName : "Starling.hx", lineNumber : 354, className : "starling.core.Starling", methodName : "new"});
	haxe.Log.trace("mStage3D.context3D.driverInfo " + this.mStage3D.context3D.driverInfo,{ fileName : "Starling.hx", lineNumber : 355, className : "starling.core.Starling", methodName : "new"});
	if(this.mStage3D.context3D != null && this.mStage3D.context3D.driverInfo != "Disposed") {
		if(profile == "auto" || (profile instanceof Array) && profile.__enum__ == null) throw new openfl.errors.ArgumentError("When sharing the context3D, " + "the actual profile has to be supplied"); else if(Object.prototype.hasOwnProperty.call(this.mStage3D.context3D,"profile")) this.mProfile = Reflect.getProperty(this.mStage3D.context3D,"profile"); else this.mProfile = profile;
		this.mShareContext = true;
		haxe.Timer.delay($bind(this,this.initialize),1);
	} else {
		if(!starling.utils.SystemUtil.get_supportsDepthAndStencil()) haxe.Log.trace("[Starling] Mask support requires 'depthAndStencil' to be enabled" + " in the application descriptor.",{ fileName : "Starling.hx", lineNumber : 374, className : "starling.core.Starling", methodName : "new"});
		this.mShareContext = false;
		this.requestContext3D(stage3D,renderMode,profile);
	}
};
$hxClasses["starling.core.Starling"] = starling.core.Starling;
starling.core.Starling.__name__ = ["starling","core","Starling"];
starling.core.Starling.__properties__ = {set_handleLostContext:"set_handleLostContext",get_handleLostContext:"get_handleLostContext",set_multitouchEnabled:"set_multitouchEnabled",get_multitouchEnabled:"get_multitouchEnabled",get_ContentScaleFactor:"get_ContentScaleFactor",get_Juggler:"get_Juggler",get_Context:"get_Context",get_all:"get_all",get_current:"get_current"}
starling.core.Starling.sCurrent = null;
starling.core.Starling.current = null;
starling.core.Starling.all = null;
starling.core.Starling.Context = null;
starling.core.Starling.Juggler = null;
starling.core.Starling.ContentScaleFactor = null;
starling.core.Starling.get_current = function() {
	return starling.core.Starling.sCurrent;
};
starling.core.Starling.get_all = function() {
	return starling.core.Starling.sAll;
};
starling.core.Starling.get_Context = function() {
	if(starling.core.Starling.sCurrent != null) return starling.core.Starling.sCurrent.get_context(); else return null;
};
starling.core.Starling.get_Juggler = function() {
	if(starling.core.Starling.sCurrent != null) return starling.core.Starling.sCurrent.get_juggler(); else return null;
};
starling.core.Starling.get_ContentScaleFactor = function() {
	if(starling.core.Starling.sCurrent != null) return starling.core.Starling.sCurrent.get_contentScaleFactor(); else return 1.0;
};
starling.core.Starling.get_multitouchEnabled = function() {
	return openfl.ui.Multitouch.get_inputMode() == openfl.ui.MultitouchInputMode.TOUCH_POINT;
};
starling.core.Starling.set_multitouchEnabled = function(value) {
	if(starling.core.Starling.sCurrent != null) throw new openfl.errors.IllegalOperationError("'multitouchEnabled' must be set before Starling instance is created"); else openfl.ui.Multitouch.set_inputMode(value?openfl.ui.MultitouchInputMode.TOUCH_POINT:openfl.ui.MultitouchInputMode.NONE);
	return value;
};
starling.core.Starling.get_handleLostContext = function() {
	return starling.core.Starling.sHandleLostContext;
};
starling.core.Starling.set_handleLostContext = function(value) {
	if(starling.core.Starling.sCurrent != null) throw new openfl.errors.IllegalOperationError("'handleLostContext' must be set before Starling instance is created"); else starling.core.Starling.sHandleLostContext = value;
	return value;
};
starling.core.Starling.__super__ = starling.events.EventDispatcher;
starling.core.Starling.prototype = $extend(starling.events.EventDispatcher.prototype,{
	mStage3D: null
	,mStage: null
	,mRootClass: null
	,mRoot: null
	,mJuggler: null
	,mSupport: null
	,mTouchProcessor: null
	,mAntiAliasing: null
	,mSimulateMultitouch: null
	,mEnableErrorChecking: null
	,mLastFrameTimestamp: null
	,mLeftMouseDown: null
	,mStatsDisplay: null
	,mShareContext: null
	,mProfile: null
	,mContext: null
	,mStarted: null
	,mRendering: null
	,mSupportHighResolutions: null
	,mViewPort: null
	,mPreviousViewPort: null
	,mClippedViewPort: null
	,mNativeStage: null
	,mNativeOverlay: null
	,mNativeStageContentScaleFactor: null
	,profiles: null
	,currentProfile: null
	,tempRenderMode: null
	,stageWidth: null
	,stageHeight: null
	,statsHAlign: null
	,statsVAlign: null
	,statsScale: null
	,touchEventTypes: null
	,programs: null
	,isStarted: null
	,juggler: null
	,context: null
	,contextData: null
	,backBufferWidth: null
	,backBufferHeight: null
	,backBufferPixelsPerPoint: null
	,contentScaleFactor: null
	,nativeOverlay: null
	,stage: null
	,stage3D: null
	,nativeStage: null
	,root: null
	,profile: null
	,contextValid: null
	,dispose: function() {
		this.stop(true);
		this.mNativeStage.removeEventListener(openfl.events.Event.ENTER_FRAME,$bind(this,this.onEnterFrame),false);
		this.mNativeStage.removeEventListener(openfl.events.KeyboardEvent.KEY_DOWN,$bind(this,this.onKey),false);
		this.mNativeStage.removeEventListener(openfl.events.KeyboardEvent.KEY_UP,$bind(this,this.onKey),false);
		this.mNativeStage.removeEventListener(openfl.events.Event.RESIZE,$bind(this,this.onResize),false);
		this.mNativeStage.removeEventListener(openfl.events.Event.MOUSE_LEAVE,$bind(this,this.onMouseLeave),false);
		this.mNativeStage.removeChild(this.mNativeOverlay);
		this.mStage3D.removeEventListener(openfl.events.Event.CONTEXT3D_CREATE,$bind(this,this.onContextCreated),false);
		this.mStage3D.removeEventListener(openfl.events.ErrorEvent.ERROR,$bind(this,this.onStage3DError),false);
		var _g = 0;
		var _g1 = this.get_touchEventTypes();
		while(_g < _g1.length) {
			var touchEventType = _g1[_g];
			++_g;
			this.mNativeStage.removeEventListener(touchEventType,$bind(this,this.onTouch),false);
		}
		if(this.mStage != null) this.mStage.dispose();
		if(this.mSupport != null) this.mSupport.dispose();
		if(this.mTouchProcessor != null) this.mTouchProcessor.dispose();
		if(starling.core.Starling.sCurrent == this) starling.core.Starling.sCurrent = null;
		if(this.mContext != null && this.mShareContext) starling.utils.StarlingUtils.execute(($_=this.mContext,$bind($_,$_.dispose)),[false]);
		var index = HxOverrides.indexOf(starling.core.Starling.sAll,this,0);
		if(index != -1) starling.core.Starling.sAll.splice(index,1);
	}
	,requestContext3D: function(stage3D,renderMode,profile) {
		this.tempRenderMode = renderMode;
		this.profiles = null;
		this.currentProfile = null;
		if(profile == "auto") this.profiles = ["standardExtended","standard","standardConstrained","baselineExtended","baseline","baselineConstrained"]; else if(typeof(profile) == "string") this.profiles = [js.Boot.__cast(profile , String)]; else if((profile instanceof Array) && profile.__enum__ == null) this.profiles = profile; else throw new openfl.errors.ArgumentError("Profile must be of type 'String' or 'Array'");
		this.mStage3D.addEventListener(openfl.events.Event.CONTEXT3D_CREATE,$bind(this,this.onCreated),false,100);
		this.mStage3D.addEventListener(openfl.events.ErrorEvent.ERROR,$bind(this,this.onError),false,100);
		this.requestNextProfile();
	}
	,requestNextProfile: function() {
		this.currentProfile = this.profiles.shift();
		try {
			starling.utils.StarlingUtils.execute(($_=this.mStage3D,$bind($_,$_.requestContext3D)),[this.tempRenderMode]);
		} catch( error ) {
			if( js.Boot.__instanceof(error,openfl.errors.Error) ) {
				if(this.profiles.length != 0) haxe.Timer.delay($bind(this,this.requestNextProfile),1); else throw error;
			} else throw(error);
		}
	}
	,onCreated: function(event) {
		var context = this.get_stage3D().context3D;
		context.setStencilActions(1032,514,7683);
		var renderModeStr = "";
		var auto = "auto";
		auto = openfl.display3D.Context3DRenderMode.AUTO[0];
		if(this.tempRenderMode == auto && this.profiles.length != 0 && context.driverInfo.indexOf("Software") != -1) this.onError(event); else {
			this.mProfile = this.currentProfile;
			this.onFinished();
		}
	}
	,onError: function(event) {
		if(this.profiles.length != 0) {
			event.stopImmediatePropagation();
			haxe.Timer.delay($bind(this,this.requestNextProfile),1);
		} else this.onFinished();
	}
	,onFinished: function() {
		this.mStage3D.removeEventListener(openfl.events.Event.CONTEXT3D_CREATE,$bind(this,this.onCreated));
		this.mStage3D.removeEventListener(openfl.events.ErrorEvent.ERROR,$bind(this,this.onError));
	}
	,initialize: function() {
		this.makeCurrent();
		this.initializeGraphicsAPI();
		haxe.Timer.delay($bind(this,this.initializeRoot),1);
		this.mTouchProcessor.set_simulateMultitouch(this.mSimulateMultitouch);
		this.mLastFrameTimestamp = openfl.Lib.getTimer() / 1000.0;
	}
	,initializeGraphicsAPI: function() {
		this.mContext = this.mStage3D.context3D;
		this.mContext.enableErrorChecking = this.mEnableErrorChecking;
		var this1 = this.get_contextData();
		var v = new haxe.ds.StringMap();
		this1.set(starling.core.Starling.PROGRAM_DATA_NAME,v);
		v;
		haxe.Log.trace("[Starling] Initialization complete.",{ fileName : "Starling.hx", lineNumber : 515, className : "starling.core.Starling", methodName : "initializeGraphicsAPI"});
		haxe.Log.trace("[Starling] Display Driver:",{ fileName : "Starling.hx", lineNumber : 516, className : "starling.core.Starling", methodName : "initializeGraphicsAPI", customParams : [this.mContext.driverInfo]});
		this.mContext.setRenderMethod($bind(this,this.onEnterFrame));
		this.updateViewPort(true);
		this.dispatchEventWith(openfl.events.Event.CONTEXT3D_CREATE,false,this.mContext);
	}
	,initializeRoot: function() {
		if(this.mRoot == null && this.mRootClass != null) {
			this.mRoot = js.Boot.__cast(Type.createInstance(this.mRootClass,[]) , starling.display.DisplayObject);
			if(this.mRoot == null) throw new openfl.errors.Error("Invalid root class: " + Std.string(this.mRootClass));
			this.mStage.addChildAt(this.mRoot,0);
			this.dispatchEventWith(starling.events.Event.ROOT_CREATED,false,this.mRoot);
		}
	}
	,nextFrame: function() {
		var now = openfl.Lib.getTimer() / 1000.0;
		var passedTime = now - this.mLastFrameTimestamp;
		this.mLastFrameTimestamp = now;
		if(passedTime > 1.0) passedTime = 1.0;
		this.advanceTime(passedTime);
		this.render();
	}
	,advanceTime: function(passedTime) {
		if(!this.get_contextValid()) return;
		this.makeCurrent();
		this.mTouchProcessor.advanceTime(passedTime);
		this.mStage.advanceTime(passedTime);
		this.mJuggler.advanceTime(passedTime);
	}
	,render: function() {
		if(!this.get_contextValid()) return;
		this.makeCurrent();
		this.updateViewPort();
		this.mSupport.nextFrame();
		var scaleX = this.mViewPort.width / this.mStage.get_stageWidth();
		var scaleY = this.mViewPort.height / this.mStage.get_stageHeight();
		this.mContext.setDepthTest(false,519);
		this.mContext.setCulling(0);
		this.mSupport.set_stencilReferenceValue(0);
		this.mSupport.set_renderTarget(null);
		this.mSupport.setProjectionMatrix(this.mViewPort.x < 0?-this.mViewPort.x / scaleX:0.0,this.mViewPort.y < 0?-this.mViewPort.y / scaleY:0.0,this.mClippedViewPort.width / scaleX,this.mClippedViewPort.height / scaleY,this.mStage.get_stageWidth(),this.mStage.get_stageHeight(),this.mStage.get_cameraPosition());
		if(this.mShareContext == false) starling.core.RenderSupport.Clear(this.mStage.get_color(),1.0);
		this.mStage.render(this.mSupport,1.0);
		this.mSupport.finishQuadBatch();
		if(this.mStatsDisplay != null) this.mStatsDisplay.set_drawCount(this.mSupport.get_drawCount());
		if(this.mShareContext == false) this.mContext.present();
	}
	,updateViewPort: function(forceUpdate) {
		if(forceUpdate == null) forceUpdate = false;
		if(forceUpdate || this.mPreviousViewPort.width != this.mViewPort.width || this.mPreviousViewPort.height != this.mViewPort.height || this.mPreviousViewPort.x != this.mViewPort.x || this.mPreviousViewPort.y != this.mViewPort.y) {
			this.mPreviousViewPort.setTo(this.mViewPort.x,this.mViewPort.y,this.mViewPort.width,this.mViewPort.height);
			this.mClippedViewPort = this.mViewPort.intersection(new openfl.geom.Rectangle(0,0,this.mNativeStage.stageWidth,this.mNativeStage.stageHeight));
			if(!this.mShareContext) {
				if(this.mProfile == "baselineConstrained") this.configureBackBuffer(32,32,this.mAntiAliasing,true);
				this.mStage3D.x = this.mClippedViewPort.x;
				this.mStage3D.y = this.mClippedViewPort.y;
				this.configureBackBuffer(this.mClippedViewPort.width | 0,this.mClippedViewPort.height | 0,this.mAntiAliasing,true,this.mSupportHighResolutions);
				if(this.mSupportHighResolutions && Object.prototype.hasOwnProperty.call(this.mNativeStage,"contentsScaleFactor")) this.mNativeStageContentScaleFactor = Reflect.getProperty(this.mNativeStage,"contentsScaleFactor"); else this.mNativeStageContentScaleFactor = 1.0;
			}
		}
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil,wantsBestResolution) {
		if(wantsBestResolution == null) wantsBestResolution = false;
		if(enableDepthAndStencil && starling.utils.SystemUtil.get_supportsDepthAndStencil()) enableDepthAndStencil = true; else enableDepthAndStencil = false;
		this.mContext.configureBackBuffer(width,height,antiAlias,enableDepthAndStencil);
	}
	,updateNativeOverlay: function() {
		this.mNativeOverlay.set_x(this.mViewPort.x);
		this.mNativeOverlay.set_y(this.mViewPort.y);
		this.mNativeOverlay.set_scaleX(this.mViewPort.width / this.mStage.get_stageWidth());
		this.mNativeOverlay.set_scaleY(this.mViewPort.height / this.mStage.get_stageHeight());
	}
	,stopWithFatalError: function(message) {
		var background = new openfl.display.Shape();
		background.get_graphics().beginFill(0,0.8);
		background.get_graphics().drawRect(0,0,this.mStage.get_stageWidth(),this.mStage.get_stageHeight());
		background.get_graphics().endFill();
		var textField = new openfl.text.TextField();
		var textFormat = new openfl.text.TextFormat("Verdana",14,16777215);
		textFormat.align = openfl.text.TextFormatAlign.CENTER;
		textField.set_defaultTextFormat(textFormat);
		textField.set_wordWrap(true);
		textField.set_width(this.mStage.get_stageWidth() * 0.75);
		textField.set_autoSize(openfl.text.TextFieldAutoSize.CENTER);
		textField.set_text(message);
		textField.set_x((this.mStage.get_stageWidth() - textField.get_width()) / 2);
		textField.set_y((this.mStage.get_stageHeight() - textField.get_height()) / 2);
		textField.set_background(true);
		textField.set_backgroundColor(5570560);
		this.updateNativeOverlay();
		this.get_nativeOverlay().addChild(background);
		this.get_nativeOverlay().addChild(textField);
		this.stop(true);
		haxe.Log.trace("[Starling]",{ fileName : "Starling.hx", lineNumber : 705, className : "starling.core.Starling", methodName : "stopWithFatalError", customParams : [message]});
		this.dispatchEventWith(starling.events.Event.FATAL_ERROR,false,message);
	}
	,makeCurrent: function() {
		starling.core.Starling.sCurrent = this;
	}
	,start: function() {
		this.mStarted = this.mRendering = true;
		this.mLastFrameTimestamp = openfl.Lib.getTimer() / 1000.0;
	}
	,stop: function(suspendRendering) {
		if(suspendRendering == null) suspendRendering = false;
		this.mStarted = false;
		this.mRendering = !suspendRendering;
	}
	,onStage3DError: function(event) {
		if(event.errorID == 3702) {
			var mode;
			if(openfl.system.Capabilities.playerType == "Desktop") mode = "renderMode"; else mode = "wmode";
			this.stopWithFatalError("Context3D not available! Possible reasons: wrong " + mode + " or missing device support.");
		} else this.stopWithFatalError("Stage3D error: " + event.text);
	}
	,onContextCreated: function(event) {
		if(!starling.core.Starling.get_handleLostContext() && this.mContext != null) {
			event.stopImmediatePropagation();
			this.stopWithFatalError("The application lost the device context!");
			haxe.Log.trace("[Starling] Enable 'Starling.handleLostContext' to avoid this error.",{ fileName : "Starling.hx", lineNumber : 760, className : "starling.core.Starling", methodName : "onContextCreated"});
		} else this.initialize();
	}
	,onEnterFrame: function(event) {
		if(!this.mShareContext) {
			if(this.mStarted) this.nextFrame(); else if(this.mRendering) this.render();
		}
		this.updateNativeOverlay();
	}
	,onKey: function(event) {
		if(this.mStarted == true) return;
		var keyEvent = new starling.events.KeyboardEvent(event.type,event.charCode,event.keyCode,event.keyLocation,event.ctrlKey,event.altKey,event.shiftKey);
		this.makeCurrent();
		this.mStage.broadcastEvent(keyEvent);
	}
	,onResize: function(event) {
		this.stageWidth = event.target.stageWidth;
		this.stageHeight = event.target.stageHeight;
		if(this.get_contextValid()) this.dispatchResizeEvent(); else this.addEventListener(openfl.events.Event.CONTEXT3D_CREATE,$bind(this,this.dispatchResizeEvent));
	}
	,dispatchResizeEvent: function() {
		this.makeCurrent();
		this.removeEventListener(openfl.events.Event.CONTEXT3D_CREATE,$bind(this,this.dispatchResizeEvent));
		this.mStage.dispatchEvent(new starling.events.ResizeEvent(openfl.events.Event.RESIZE,this.stageWidth,this.stageHeight));
	}
	,onMouseLeave: function(event) {
		this.mTouchProcessor.enqueueMouseLeftStage();
	}
	,onTouch: function(event) {
		if(this.mStarted == false) return;
		var globalX;
		var globalY;
		var touchID;
		var phase = null;
		var pressure = 1.0;
		var width = 1.0;
		var height = 1.0;
		if(js.Boot.__instanceof(event,openfl.events.MouseEvent)) {
			var mouseEvent = event;
			globalX = mouseEvent.stageX;
			globalY = mouseEvent.stageY;
			touchID = 0;
			if(event.type == openfl.events.MouseEvent.MOUSE_DOWN) this.mLeftMouseDown = true; else if(event.type == openfl.events.MouseEvent.MOUSE_UP) this.mLeftMouseDown = false;
		} else {
			var touchEvent = event;
			haxe.Log.trace("FIX",{ fileName : "Starling.hx", lineNumber : 855, className : "starling.core.Starling", methodName : "onTouch"});
			if(touchEvent.isPrimaryTouchPoint) return; else {
				globalX = touchEvent.stageX;
				globalY = touchEvent.stageY;
				touchID = touchEvent.touchPointID;
				pressure = touchEvent.pressure;
				width = touchEvent.sizeX;
				height = touchEvent.sizeY;
			}
		}
		var _g = event.type;
		switch(_g) {
		case "touchBegin":
			phase = starling.events.TouchPhase.BEGAN;
			break;
		case "touchMove":
			phase = starling.events.TouchPhase.MOVED;
			break;
		case "touchEnd":
			phase = starling.events.TouchPhase.ENDED;
			break;
		case openfl.events.MouseEvent.MOUSE_DOWN:
			phase = starling.events.TouchPhase.BEGAN;
			break;
		case openfl.events.MouseEvent.MOUSE_UP:
			phase = starling.events.TouchPhase.ENDED;
			break;
		case openfl.events.MouseEvent.MOUSE_MOVE:
			if(this.mLeftMouseDown) phase = starling.events.TouchPhase.MOVED; else phase = starling.events.TouchPhase.HOVER;
			break;
		}
		globalX = this.mStage.get_stageWidth() * (globalX - this.mViewPort.x) / this.mViewPort.width;
		globalY = this.mStage.get_stageHeight() * (globalY - this.mViewPort.y) / this.mViewPort.height;
		if(phase != null) this.mTouchProcessor.enqueue(touchID,phase,globalX,globalY,pressure,width,height);
	}
	,get_touchEventTypes: function() {
		var types = new Array();
		if(starling.core.Starling.get_multitouchEnabled() == true) {
			types.push("touchBegin");
			types.push("touchMove");
			types.push("touchEnd");
		}
		types.push(openfl.events.MouseEvent.MOUSE_DOWN);
		types.push(openfl.events.MouseEvent.MOUSE_MOVE);
		types.push(openfl.events.MouseEvent.MOUSE_UP);
		return types;
	}
	,registerProgram: function(name,vertexShader,fragmentShader) {
		this.deleteProgram(name);
		var program = this.mContext.createProgram();
		program.upload(vertexShader,fragmentShader);
		var this1 = this.get_programs();
		this1.set(name,program);
		program;
		return program;
	}
	,registerProgramFromSource: function(name,vertexShader,fragmentShader) {
		this.deleteProgram(name);
		var program = starling.core.RenderSupport.assembleAgal(vertexShader,fragmentShader);
		var this1 = this.get_programs();
		this1.set(name,program);
		program;
		return program;
	}
	,deleteProgram: function(name) {
		var program = this.getProgram(name);
		if(program != null) {
			program.dispose();
			var this1 = this.get_programs();
			this1.remove(name);
		}
	}
	,getProgram: function(name) {
		var this1 = this.get_programs();
		return this1.get(name);
	}
	,hasProgram: function(name) {
		var this1 = this.get_programs();
		return this1.exists(name);
	}
	,get_programs: function() {
		var this1 = this.get_contextData();
		return this1.get(starling.core.Starling.PROGRAM_DATA_NAME);
	}
	,get_isStarted: function() {
		return this.mStarted;
	}
	,get_juggler: function() {
		return this.mJuggler;
	}
	,get_context: function() {
		return this.mContext;
	}
	,get_contextData: function() {
		return starling.core.Starling.sContextData.h[this.mStage3D.__id__];
	}
	,get_backBufferWidth: function() {
		return this.mClippedViewPort.width | 0;
	}
	,get_backBufferHeight: function() {
		return this.mClippedViewPort.height | 0;
	}
	,get_backBufferPixelsPerPoint: function() {
		return this.mNativeStageContentScaleFactor;
	}
	,get_simulateMultitouch: function() {
		return this.mSimulateMultitouch;
	}
	,set_simulateMultitouch: function(value) {
		this.mSimulateMultitouch = value;
		if(this.mContext != null) this.mTouchProcessor.set_simulateMultitouch(value);
		return value;
	}
	,get_enableErrorChecking: function() {
		return this.mEnableErrorChecking;
	}
	,set_enableErrorChecking: function(value) {
		this.mEnableErrorChecking = value;
		if(this.mContext != null) this.mContext.enableErrorChecking = value;
		return value;
	}
	,get_antiAliasing: function() {
		return this.mAntiAliasing;
	}
	,set_antiAliasing: function(value) {
		if(this.mAntiAliasing != value) {
			this.mAntiAliasing = value;
			if(this.get_contextValid()) this.updateViewPort(true);
		}
		return value;
	}
	,get_viewPort: function() {
		return this.mViewPort;
	}
	,set_viewPort: function(value) {
		this.mViewPort = value.clone();
		return value;
	}
	,get_contentScaleFactor: function() {
		return this.mViewPort.width * this.mNativeStageContentScaleFactor / this.mStage.get_stageWidth();
	}
	,get_nativeOverlay: function() {
		return this.mNativeOverlay;
	}
	,get_showStats: function() {
		return this.mStatsDisplay != null && this.mStatsDisplay.get_parent() != null;
	}
	,set_showStats: function(value) {
		if(value == this.get_showStats()) return value;
		if(value) {
			if(this.mStatsDisplay != null) this.mStage.addChild(this.mStatsDisplay); else this.showStatsAt();
		} else this.mStatsDisplay.removeFromParent();
		return value;
	}
	,showStatsAt: function(hAlign,vAlign,scale) {
		if(scale == null) scale = 1;
		if(hAlign == null) hAlign = starling.utils.HAlign.LEFT;
		if(vAlign == null) vAlign = starling.utils.VAlign.TOP;
		this.statsHAlign = hAlign;
		this.statsVAlign = vAlign;
		this.statsScale = scale;
		if(this.mContext == null) this.addEventListener(starling.events.Event.ROOT_CREATED,$bind(this,this.onRootCreated)); else {
			if(this.mStatsDisplay == null) {
				this.mStatsDisplay = new starling.core.StatsDisplay();
				this.mStatsDisplay.set_touchable(false);
				this.mStage.addChild(this.mStatsDisplay);
			}
			var stageWidth = this.mStage.get_stageWidth();
			var stageHeight = this.mStage.get_stageHeight();
			this.mStatsDisplay.set_scaleX(this.mStatsDisplay.set_scaleY(scale));
			if(hAlign == starling.utils.HAlign.LEFT) this.mStatsDisplay.set_x(0); else if(hAlign == starling.utils.HAlign.RIGHT) this.mStatsDisplay.set_x(stageWidth - this.mStatsDisplay.get_width()); else this.mStatsDisplay.set_x((stageWidth - this.mStatsDisplay.get_width()) / 2);
			if(vAlign == starling.utils.VAlign.TOP) this.mStatsDisplay.set_y(0); else if(vAlign == starling.utils.VAlign.BOTTOM) this.mStatsDisplay.set_y(stageHeight - this.mStatsDisplay.get_height()); else this.mStatsDisplay.set_y((stageHeight - this.mStatsDisplay.get_height()) / 2);
		}
	}
	,onRootCreated: function() {
		this.showStatsAt(this.statsHAlign,this.statsVAlign,this.statsScale);
		this.removeEventListener(starling.events.Event.ROOT_CREATED,$bind(this,this.onRootCreated));
	}
	,get_stage: function() {
		return this.mStage;
	}
	,get_stage3D: function() {
		return this.mStage3D;
	}
	,get_nativeStage: function() {
		return this.mNativeStage;
	}
	,get_root: function() {
		return this.mRoot;
	}
	,get_rootClass: function() {
		return this.mRootClass;
	}
	,set_rootClass: function(value) {
		if(this.mRootClass != null && this.mRoot != null) throw new openfl.errors.Error("Root class may not change after root has been instantiated"); else if(this.mRootClass == null) {
			this.mRootClass = value;
			if(this.mContext != null) haxe.Timer.delay($bind(this,this.initializeRoot),1);
		}
		return value;
	}
	,get_shareContext: function() {
		return this.mShareContext;
	}
	,set_shareContext: function(value) {
		this.mShareContext = value;
		return value;
	}
	,get_profile: function() {
		return this.mProfile;
	}
	,get_supportHighResolutions: function() {
		return this.mSupportHighResolutions;
	}
	,set_supportHighResolutions: function(value) {
		if(this.mSupportHighResolutions != value) {
			this.mSupportHighResolutions = value;
			if(this.get_contextValid()) this.updateViewPort(true);
		}
		return value;
	}
	,get_touchProcessor: function() {
		return this.mTouchProcessor;
	}
	,set_touchProcessor: function(value) {
		if(value != this.mTouchProcessor) {
			this.mTouchProcessor.dispose();
			this.mTouchProcessor = value;
		}
		return value;
	}
	,get_contextValid: function() {
		return this.mContext != null && this.mContext.driverInfo != "Disposed";
	}
	,__class__: starling.core.Starling
	,__properties__: {get_contextValid:"get_contextValid",set_touchProcessor:"set_touchProcessor",get_touchProcessor:"get_touchProcessor",set_supportHighResolutions:"set_supportHighResolutions",get_supportHighResolutions:"get_supportHighResolutions",get_profile:"get_profile",set_shareContext:"set_shareContext",get_shareContext:"get_shareContext",set_rootClass:"set_rootClass",get_rootClass:"get_rootClass",get_root:"get_root",get_nativeStage:"get_nativeStage",get_stage3D:"get_stage3D",get_stage:"get_stage",set_showStats:"set_showStats",get_showStats:"get_showStats",get_nativeOverlay:"get_nativeOverlay",get_contentScaleFactor:"get_contentScaleFactor",set_viewPort:"set_viewPort",get_viewPort:"get_viewPort",set_antiAliasing:"set_antiAliasing",get_antiAliasing:"get_antiAliasing",set_enableErrorChecking:"set_enableErrorChecking",get_enableErrorChecking:"get_enableErrorChecking",set_simulateMultitouch:"set_simulateMultitouch",get_simulateMultitouch:"get_simulateMultitouch",get_backBufferPixelsPerPoint:"get_backBufferPixelsPerPoint",get_backBufferHeight:"get_backBufferHeight",get_backBufferWidth:"get_backBufferWidth",get_contextData:"get_contextData",get_context:"get_context",get_juggler:"get_juggler",get_isStarted:"get_isStarted",get_programs:"get_programs",get_touchEventTypes:"get_touchEventTypes"}
});
starling.core.StatsDisplay = function() {
	this.mDrawCount = 0;
	this.mMemory = 0;
	this.mFps = 0;
	this.mTotalTime = 0;
	this.mFrameCount = 0;
	this.UPDATE_INTERVAL = 0.5;
	starling.display.Sprite.call(this);
	this.mBackground = new starling.display.Quad(50,25,0);
	this.mTextField = new starling.text.TextField(48,25,"",starling.text.BitmapFont.MINI,starling.text.BitmapFont.NATIVE_SIZE,16777215);
	this.mTextField.set_x(2);
	this.mTextField.set_hAlign(starling.utils.HAlign.LEFT);
	this.mTextField.set_vAlign(starling.utils.VAlign.TOP);
	this.addChild(this.mBackground);
	this.addChild(this.mTextField);
	this.set_blendMode(starling.display.BlendMode.NONE);
	this.addEventListener(starling.events.Event.ADDED_TO_STAGE,$bind(this,this.onAddedToStage));
	this.addEventListener(starling.events.Event.REMOVED_FROM_STAGE,$bind(this,this.onRemovedFromStage));
};
$hxClasses["starling.core.StatsDisplay"] = starling.core.StatsDisplay;
starling.core.StatsDisplay.__name__ = ["starling","core","StatsDisplay"];
starling.core.StatsDisplay.__super__ = starling.display.Sprite;
starling.core.StatsDisplay.prototype = $extend(starling.display.Sprite.prototype,{
	UPDATE_INTERVAL: null
	,mBackground: null
	,mTextField: null
	,mFrameCount: null
	,mTotalTime: null
	,mFps: null
	,mMemory: null
	,mDrawCount: null
	,onAddedToStage: function() {
		this.addEventListener(starling.events.Event.ENTER_FRAME,$bind(this,this.onEnterFrame));
		this.mTotalTime = this.mFrameCount = 0;
		this.update();
	}
	,onRemovedFromStage: function() {
		this.removeEventListener(starling.events.Event.ENTER_FRAME,$bind(this,this.onEnterFrame));
	}
	,onEnterFrame: function(event) {
		this.mTotalTime += event.get_passedTime();
		this.mFrameCount++;
		if(this.mTotalTime > this.UPDATE_INTERVAL) {
			this.update();
			this.mFrameCount = 0;
			this.mTotalTime = 0;
		}
	}
	,update: function() {
		if(this.mTotalTime > 0) this.mFps = this.mFrameCount / this.mTotalTime; else this.mFps = 0;
		this.mMemory = openfl.system.System.get_totalMemory() * 0.000000954;
		this.mTextField.set_text("FPS: " + Math.floor(this.mFps) + "\nMEM: " + Math.floor(this.mMemory) + "\nDRW: " + (this.mTotalTime > 0?this.mDrawCount - 2:this.mDrawCount));
	}
	,render: function(support,parentAlpha) {
		support.finishQuadBatch();
		starling.display.Sprite.prototype.render.call(this,support,parentAlpha);
	}
	,get_drawCount: function() {
		return this.mDrawCount;
	}
	,set_drawCount: function(value) {
		this.mDrawCount = value;
		return value;
	}
	,get_fps: function() {
		return this.mFps;
	}
	,set_fps: function(value) {
		this.mFps = value;
		return value;
	}
	,get_memory: function() {
		return this.mMemory;
	}
	,set_memory: function(value) {
		this.mMemory = value;
		return value;
	}
	,__class__: starling.core.StatsDisplay
	,__properties__: $extend(starling.display.Sprite.prototype.__properties__,{set_memory:"set_memory",get_memory:"get_memory",set_fps:"set_fps",get_fps:"get_fps",set_drawCount:"set_drawCount",get_drawCount:"get_drawCount"})
});
starling.display.BlendFactor = function(name,factors) {
	this.factors = factors;
	this.name = name;
};
$hxClasses["starling.display.BlendFactor"] = starling.display.BlendFactor;
starling.display.BlendFactor.__name__ = ["starling","display","BlendFactor"];
starling.display.BlendFactor.prototype = {
	factors: null
	,name: null
	,__class__: starling.display.BlendFactor
};
starling.display.BlendMode = function() {
	throw new starling.errors.AbstractClassError();
};
$hxClasses["starling.display.BlendMode"] = starling.display.BlendMode;
starling.display.BlendMode.__name__ = ["starling","display","BlendMode"];
starling.display.BlendMode.__properties__ = {get_sBlendFactors:"get_sBlendFactors"}
starling.display.BlendMode.sBlendFactors = null;
starling.display.BlendMode._sBlendFactors = null;
starling.display.BlendMode.lastModeName = null;
starling.display.BlendMode.lastModeFactors = null;
starling.display.BlendMode.get_sBlendFactors = function() {
	if(starling.display.BlendMode._sBlendFactors == null) {
		starling.display.BlendMode._sBlendFactors = new Array();
		var map1 = new haxe.ds.StringMap();
		var value = new starling.display.BlendFactor("none",[1,0]);
		map1.set("none",value);
		var value1 = new starling.display.BlendFactor("normal",[770,771]);
		map1.set("normal",value1);
		var value2 = new starling.display.BlendFactor("add",[770,772]);
		map1.set("add",value2);
		var value3 = new starling.display.BlendFactor("multiply",[774,771]);
		map1.set("multiply",value3);
		var value4 = new starling.display.BlendFactor("screen",[770,1]);
		map1.set("screen",value4);
		var value5 = new starling.display.BlendFactor("erase",[0,771]);
		map1.set("erase",value5);
		var value6 = new starling.display.BlendFactor("below",[773,772]);
		map1.set("below",value6);
		starling.display.BlendMode._sBlendFactors.push(map1);
		var map2 = new haxe.ds.StringMap();
		var value7 = new starling.display.BlendFactor("none",[1,0]);
		map2.set("none",value7);
		var value8 = new starling.display.BlendFactor("normal",[1,771]);
		map2.set("normal",value8);
		var value9 = new starling.display.BlendFactor("add",[1,1]);
		map2.set("add",value9);
		var value10 = new starling.display.BlendFactor("multiply",[774,771]);
		map2.set("multiply",value10);
		var value11 = new starling.display.BlendFactor("screen",[1,769]);
		map2.set("screen",value11);
		var value12 = new starling.display.BlendFactor("erase",[0,771]);
		map2.set("erase",value12);
		var value13 = new starling.display.BlendFactor("below",[773,772]);
		map2.set("below",value13);
		starling.display.BlendMode._sBlendFactors.push(map2);
	}
	return starling.display.BlendMode._sBlendFactors;
};
starling.display.BlendMode.getBlendFactors = function(mode,premultipliedAlpha) {
	if(premultipliedAlpha == null) premultipliedAlpha = true;
	var vec = starling.display.BlendMode.get_sBlendFactors();
	var modeIndex = 0;
	if(premultipliedAlpha == true) modeIndex = 1;
	var modes = vec[modeIndex];
	if(starling.display.BlendMode.lastModeName != mode) starling.display.BlendMode.lastModeFactors = modes.get(mode).factors;
	starling.display.BlendMode.lastModeName = mode;
	var returnVal = starling.display.BlendMode.lastModeFactors;
	if(returnVal == null) throw new openfl.errors.ArgumentError("Invalid blend mode");
	return returnVal;
};
starling.display.BlendMode.register = function(name,sourceFactor,destFactor,premultipliedAlpha) {
	if(premultipliedAlpha == null) premultipliedAlpha = true;
	var vec = starling.display.BlendMode.get_sBlendFactors();
	var modeIndex = premultipliedAlpha;
	var modes = vec[modeIndex];
	modes.get(name).factors = [js.Boot.__cast(sourceFactor , Int),js.Boot.__cast(destFactor , Int)];
	haxe.Log.trace("CHECK",{ fileName : "BlendMode.hx", lineNumber : 167, className : "starling.display.BlendMode", methodName : "register"});
	var otherModes = vec[js.Boot.__cast(!premultipliedAlpha , Int)];
	var returnVal = Reflect.getProperty(otherModes,name);
	if(returnVal == null) Reflect.setProperty(otherModes,name,[sourceFactor,destFactor]);
};
starling.display.BlendMode.prototype = {
	__class__: starling.display.BlendMode
};
starling.display.Quad = function(width,height,color,premultipliedAlpha) {
	if(premultipliedAlpha == null) premultipliedAlpha = true;
	if(color == null) color = 16777215;
	starling.display.DisplayObject.call(this);
	if(width == 0.0 || height == 0.0) throw new openfl.errors.ArgumentError("Invalid size: width and height must not be zero");
	this.mTinted = (function($this) {
		var $r;
		var $int = color;
		$r = $int < 0?4294967296.0 + $int:$int + 0.0;
		return $r;
	}(this)) != 16777215;
	this.mVertexData = new starling.utils.VertexData(4,premultipliedAlpha);
	this.mVertexData.setPosition(0,0.0,0.0);
	this.mVertexData.setPosition(1,width,0.0);
	this.mVertexData.setPosition(2,0.0,height);
	this.mVertexData.setPosition(3,width,height);
	this.mVertexData.setUniformColor(color);
	this.onVertexDataChanged();
};
$hxClasses["starling.display.Quad"] = starling.display.Quad;
starling.display.Quad.__name__ = ["starling","display","Quad"];
starling.display.Quad.__super__ = starling.display.DisplayObject;
starling.display.Quad.prototype = $extend(starling.display.DisplayObject.prototype,{
	mTinted: null
	,mVertexData: null
	,tinted: null
	,premultipliedAlpha: null
	,onVertexDataChanged: function() {
	}
	,getBounds: function(targetSpace,resultRect) {
		if(resultRect == null) resultRect = new openfl.geom.Rectangle();
		if(targetSpace == this) {
			this.mVertexData.getPosition(3,starling.display.Quad.sHelperPoint);
			resultRect.setTo(0.0,0.0,starling.display.Quad.sHelperPoint.x,starling.display.Quad.sHelperPoint.y);
		} else if(targetSpace == this.get_parent() && this.get_rotation() == 0.0) {
			var scaleX = this.get_scaleX();
			var scaleY = this.get_scaleY();
			this.mVertexData.getPosition(3,starling.display.Quad.sHelperPoint);
			resultRect.setTo(this.get_x() - this.get_pivotX() * scaleX,this.get_y() - this.get_pivotY() * scaleY,starling.display.Quad.sHelperPoint.x * scaleX,starling.display.Quad.sHelperPoint.y * scaleY);
			if(scaleX < 0) {
				resultRect.width *= -1;
				resultRect.x -= resultRect.width;
			}
			if(scaleY < 0) {
				resultRect.height *= -1;
				resultRect.y -= resultRect.height;
			}
		} else if(this.get_is3D() && this.get_stage() != null) {
			this.get_stage().getCameraPosition(targetSpace,starling.display.Quad.sHelperPoint3D);
			this.getTransformationMatrix3D(targetSpace,starling.display.Quad.sHelperMatrix3D);
			this.mVertexData.getBoundsProjected(starling.display.Quad.sHelperMatrix3D,starling.display.Quad.sHelperPoint3D,0,4,resultRect);
		} else {
			this.getTransformationMatrix(targetSpace,starling.display.Quad.sHelperMatrix);
			this.mVertexData.getBounds(starling.display.Quad.sHelperMatrix,0,4,resultRect);
		}
		return resultRect;
	}
	,getVertexColor: function(vertexID) {
		return this.mVertexData.getColor(vertexID);
	}
	,setVertexColor: function(vertexID,color) {
		this.mVertexData.setColor(vertexID,color);
		this.onVertexDataChanged();
		if((function($this) {
			var $r;
			var $int = color;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) != 16777215) this.mTinted = true; else this.mTinted = this.mVertexData.get_tinted();
	}
	,getVertexAlpha: function(vertexID) {
		return this.mVertexData.getAlpha(vertexID);
	}
	,setVertexAlpha: function(vertexID,alpha) {
		this.mVertexData.setAlpha(vertexID,alpha);
		this.onVertexDataChanged();
		if(alpha != 1.0) this.mTinted = true; else this.mTinted = this.mVertexData.get_tinted();
	}
	,get_color: function() {
		return this.mVertexData.getColor(0);
	}
	,set_color: function(value) {
		this.mVertexData.setUniformColor(value);
		this.onVertexDataChanged();
		if((function($this) {
			var $r;
			var $int = value;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) != 16777215 || this.get_alpha() != 1.0) this.mTinted = true; else this.mTinted = this.mVertexData.get_tinted();
		return value;
	}
	,set_alpha: function(value) {
		starling.display.DisplayObject.prototype.set_alpha.call(this,value);
		if(value < 1.0) this.mTinted = true; else this.mTinted = this.mVertexData.get_tinted();
		return value;
	}
	,copyVertexDataTo: function(targetData,targetVertexID) {
		if(targetVertexID == null) targetVertexID = 0;
		this.mVertexData.copyTo(targetData,targetVertexID);
	}
	,copyVertexDataTransformedTo: function(targetData,targetVertexID,matrix) {
		if(targetVertexID == null) targetVertexID = 0;
		this.mVertexData.copyTransformedTo(targetData,targetVertexID,matrix,0,4);
	}
	,render: function(support,parentAlpha) {
		support.batchQuad(this,parentAlpha);
	}
	,get_tinted: function() {
		return this.mTinted;
	}
	,get_premultipliedAlpha: function() {
		return this.mVertexData.get_premultipliedAlpha();
	}
	,__class__: starling.display.Quad
	,__properties__: $extend(starling.display.DisplayObject.prototype.__properties__,{get_premultipliedAlpha:"get_premultipliedAlpha",get_tinted:"get_tinted",set_color:"set_color",get_color:"get_color"})
});
starling.display.Image = function(texture) {
	if(texture != null) {
		var frame = texture.get_frame();
		var width;
		if(frame != null) width = frame.width; else width = texture.get_width();
		var height;
		if(frame != null) height = frame.height; else height = texture.get_height();
		var pma = texture.get_premultipliedAlpha();
		starling.display.Quad.call(this,width,height,16777215,pma);
		this.mVertexData.setTexCoords(0,0.0,0.0);
		this.mVertexData.setTexCoords(1,1.0,0.0);
		this.mVertexData.setTexCoords(2,0.0,1.0);
		this.mVertexData.setTexCoords(3,1.0,1.0);
		this.mTexture = texture;
		this.mSmoothing = starling.textures.TextureSmoothing.BILINEAR;
		this.mVertexDataCache = new starling.utils.VertexData(4,pma);
		this.mVertexDataCacheInvalid = true;
	} else throw new openfl.errors.ArgumentError("Texture cannot be null");
};
$hxClasses["starling.display.Image"] = starling.display.Image;
starling.display.Image.__name__ = ["starling","display","Image"];
starling.display.Image.fromBitmap = function(bitmap,generateMipMaps,scale) {
	if(scale == null) scale = 1;
	if(generateMipMaps == null) generateMipMaps = true;
	return new starling.display.Image(starling.textures.Texture.fromBitmap(bitmap,generateMipMaps,false,scale));
};
starling.display.Image.__super__ = starling.display.Quad;
starling.display.Image.prototype = $extend(starling.display.Quad.prototype,{
	mTexture: null
	,mSmoothing: null
	,mVertexDataCache: null
	,mVertexDataCacheInvalid: null
	,onVertexDataChanged: function() {
		this.mVertexDataCacheInvalid = true;
	}
	,readjustSize: function() {
		var frame = this.get_texture().get_frame();
		var width;
		if(frame != null) width = frame.width; else width = this.get_texture().get_width();
		var height;
		if(frame != null) height = frame.height; else height = this.get_texture().get_height();
		this.mVertexData.setPosition(0,0.0,0.0);
		this.mVertexData.setPosition(1,width,0.0);
		this.mVertexData.setPosition(2,0.0,height);
		this.mVertexData.setPosition(3,width,height);
		this.onVertexDataChanged();
	}
	,setTexCoords: function(vertexID,coords) {
		this.mVertexData.setTexCoords(vertexID,coords.x,coords.y);
		this.onVertexDataChanged();
	}
	,setTexCoordsTo: function(vertexID,u,v) {
		this.mVertexData.setTexCoords(vertexID,u,v);
		this.onVertexDataChanged();
	}
	,getTexCoords: function(vertexID,resultPoint) {
		if(resultPoint == null) resultPoint = new openfl.geom.Point();
		this.mVertexData.getTexCoords(vertexID,resultPoint);
		return resultPoint;
	}
	,copyVertexDataTo: function(targetData,targetVertexID) {
		if(targetVertexID == null) targetVertexID = 0;
		this.copyVertexDataTransformedTo(targetData,targetVertexID,null);
	}
	,copyVertexDataTransformedTo: function(targetData,targetVertexID,matrix) {
		if(targetVertexID == null) targetVertexID = 0;
		if(this.mVertexDataCacheInvalid) {
			this.mVertexDataCacheInvalid = false;
			this.mVertexData.copyTo(this.mVertexDataCache);
			this.mTexture.adjustVertexData(this.mVertexDataCache,0,4);
		}
		this.mVertexDataCache.copyTransformedTo(targetData,targetVertexID,matrix,0,4);
	}
	,get_texture: function() {
		return this.mTexture;
	}
	,set_texture: function(value) {
		if(value == null) throw new openfl.errors.ArgumentError("Texture cannot be null"); else if(value != this.mTexture) {
			this.mTexture = value;
			this.mVertexData.setPremultipliedAlpha(this.mTexture.get_premultipliedAlpha());
			this.mVertexDataCache.setPremultipliedAlpha(this.mTexture.get_premultipliedAlpha(),false);
			this.onVertexDataChanged();
		}
		return value;
	}
	,get_smoothing: function() {
		return this.mSmoothing;
	}
	,set_smoothing: function(value) {
		if(starling.textures.TextureSmoothing.isValid(value)) this.mSmoothing = value; else throw new openfl.errors.ArgumentError("Invalid smoothing mode: " + value);
		return value;
	}
	,render: function(support,parentAlpha) {
		support.batchQuad(this,parentAlpha,this.mTexture,this.mSmoothing);
	}
	,__class__: starling.display.Image
	,__properties__: $extend(starling.display.Quad.prototype.__properties__,{set_smoothing:"set_smoothing",get_smoothing:"get_smoothing",set_texture:"set_texture",get_texture:"get_texture"})
});
starling.display.MovieClip = function(textures,fps) {
	if(fps == null) fps = 12;
	this.mSoundTransform = null;
	if(textures.length > 0) {
		starling.display.Image.call(this,textures.data[0]);
		this.init((function($this) {
			var $r;
			var value = new Array();
			{
				var _g1 = 0;
				var _g = textures.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value.push(textures.data[i]);
				}
			}
			$r = value;
			return $r;
		}(this)),fps);
	} else throw new openfl.errors.ArgumentError("Empty texture array");
};
$hxClasses["starling.display.MovieClip"] = starling.display.MovieClip;
starling.display.MovieClip.__name__ = ["starling","display","MovieClip"];
starling.display.MovieClip.__interfaces__ = [starling.animation.IAnimatable];
starling.display.MovieClip.__super__ = starling.display.Image;
starling.display.MovieClip.prototype = $extend(starling.display.Image.prototype,{
	mTextures: null
	,mSounds: null
	,mDurations: null
	,mStartTimes: null
	,mDefaultFrameDuration: null
	,mCurrentTime: null
	,mCurrentFrame: null
	,mLoop: null
	,mPlaying: null
	,mMuted: null
	,mSoundTransform: null
	,totalTime: null
	,currentTime: null
	,numFrames: null
	,isPlaying: null
	,isComplete: null
	,init: function(textures,fps) {
		if(fps <= 0) throw new openfl.errors.ArgumentError("Invalid fps: " + fps);
		var numFrames = textures.length;
		this.mDefaultFrameDuration = 1.0 / fps;
		this.mLoop = true;
		this.mPlaying = true;
		this.mCurrentTime = 0.0;
		this.mCurrentFrame = 0;
		this.mTextures = textures.concat(new Array());
		haxe.Log.trace("CHECK INIT LENGTH IS NOT NEEDED",{ fileName : "MovieClip.hx", lineNumber : 99, className : "starling.display.MovieClip", methodName : "init"});
		this.mSounds = new Array();
		this.mDurations = new Array();
		this.mStartTimes = new Array();
		var _g = 0;
		while(_g < numFrames) {
			var i = _g++;
			this.mDurations[i] = this.mDefaultFrameDuration;
			this.mStartTimes[i] = i * this.mDefaultFrameDuration;
		}
	}
	,addFrame: function(texture,sound,duration) {
		if(duration == null) duration = -1;
		this.addFrameAt(this.get_numFrames(),texture,sound,duration);
	}
	,addFrameAt: function(frameID,texture,sound,duration) {
		if(duration == null) duration = -1;
		if(frameID < 0 || frameID > this.get_numFrames()) throw new openfl.errors.ArgumentError("Invalid frame id");
		if(duration < 0) duration = this.mDefaultFrameDuration;
		this.mTextures.splice(frameID,0,texture);
		this.mSounds.splice(frameID,0,sound);
		this.mDurations.splice(frameID,0,duration);
		if(frameID > 0 && frameID == this.get_numFrames()) this.mStartTimes[frameID] = this.mStartTimes[frameID - 1 | 0] + this.mDurations[frameID - 1 | 0]; else this.updateStartTimes();
	}
	,removeFrameAt: function(frameID) {
		if(frameID < 0 || frameID >= this.get_numFrames()) throw new openfl.errors.ArgumentError("Invalid frame id");
		if(this.get_numFrames() == 1) throw new openfl.errors.IllegalOperationError("Movie clip must not be empty");
		this.mTextures.splice(frameID,1);
		this.mSounds.splice(frameID,1);
		this.mDurations.splice(frameID,1);
		this.updateStartTimes();
	}
	,getFrameTexture: function(frameID) {
		if(frameID < 0 || frameID >= this.get_numFrames()) throw new openfl.errors.ArgumentError("Invalid frame id");
		return this.mTextures[frameID];
	}
	,setFrameTexture: function(frameID,texture) {
		if(frameID < 0 || frameID >= this.get_numFrames()) throw new openfl.errors.ArgumentError("Invalid frame id");
		this.mTextures[frameID] = texture;
	}
	,getFrameSound: function(frameID) {
		if(frameID < 0 || frameID >= this.get_numFrames()) throw new openfl.errors.ArgumentError("Invalid frame id");
		return this.mSounds[frameID];
	}
	,setFrameSound: function(frameID,sound) {
		if(frameID < 0 || frameID >= this.get_numFrames()) throw new openfl.errors.ArgumentError("Invalid frame id");
		this.mSounds[frameID] = sound;
	}
	,getFrameDuration: function(frameID) {
		if(frameID < 0 || frameID >= this.get_numFrames()) throw new openfl.errors.ArgumentError("Invalid frame id");
		return this.mDurations[frameID];
	}
	,setFrameDuration: function(frameID,duration) {
		if(frameID < 0 || frameID >= this.get_numFrames()) throw new openfl.errors.ArgumentError("Invalid frame id");
		this.mDurations[frameID] = duration;
		this.updateStartTimes();
	}
	,play: function() {
		this.mPlaying = true;
	}
	,pause: function() {
		this.mPlaying = false;
	}
	,stop: function() {
		this.mPlaying = false;
		this.set_currentFrame(0);
	}
	,updateStartTimes: function() {
		var numFrames = this.get_numFrames();
		this.mStartTimes = [];
		this.mStartTimes[0] = 0;
		var _g = 1;
		while(_g < numFrames) {
			var i = _g++;
			this.mStartTimes[i] = this.mStartTimes[i - 1 | 0] + this.mDurations[i - 1 | 0];
		}
	}
	,advanceTime: function(passedTime) {
		if(!this.mPlaying || passedTime <= 0.0) return;
		var finalFrame;
		var previousFrame = this.mCurrentFrame;
		var restTime = 0.0;
		var breakAfterFrame = false;
		var dispatchCompleteEvent = false;
		var totalTime = this.get_totalTime();
		if(this.mLoop && this.mCurrentTime >= totalTime) {
			this.mCurrentTime = 0.0;
			this.mCurrentFrame = 0;
		}
		if(this.mCurrentTime < totalTime) {
			this.mCurrentTime += passedTime;
			finalFrame = this.mTextures.length - 1;
			while(this.mCurrentTime > this.mStartTimes[this.mCurrentFrame] + this.mDurations[this.mCurrentFrame]) {
				if(this.mCurrentFrame == finalFrame) {
					if(this.mLoop && !this.hasEventListener(starling.events.Event.COMPLETE)) {
						this.mCurrentTime -= totalTime;
						this.mCurrentFrame = 0;
					} else {
						breakAfterFrame = true;
						restTime = this.mCurrentTime - totalTime;
						dispatchCompleteEvent = true;
						this.mCurrentFrame = finalFrame;
						this.mCurrentTime = totalTime;
					}
				} else this.mCurrentFrame++;
				var sound = this.mSounds[this.mCurrentFrame];
				if(sound != null && !this.mMuted) sound.play(0,0,this.mSoundTransform);
				if(breakAfterFrame) break;
			}
			if(this.mCurrentFrame == finalFrame && this.mCurrentTime == totalTime) dispatchCompleteEvent = true;
		}
		if(this.mCurrentFrame != previousFrame) this.set_texture(this.mTextures[this.mCurrentFrame]);
		if(dispatchCompleteEvent) this.dispatchEventWith(starling.events.Event.COMPLETE);
		if(this.mLoop && restTime > 0.0) this.advanceTime(restTime);
	}
	,get_totalTime: function() {
		var numFrames = this.mTextures.length;
		return this.mStartTimes[numFrames - 1 | 0] + this.mDurations[numFrames - 1 | 0];
	}
	,get_currentTime: function() {
		return this.mCurrentTime;
	}
	,get_numFrames: function() {
		return this.mTextures.length;
	}
	,get_loop: function() {
		return this.mLoop;
	}
	,set_loop: function(value) {
		this.mLoop = value;
		return value;
	}
	,get_muted: function() {
		return this.mMuted;
	}
	,set_muted: function(value) {
		this.mMuted = value;
		return value;
	}
	,get_soundTransform: function() {
		return this.mSoundTransform;
	}
	,set_soundTransform: function(value) {
		this.mSoundTransform = value;
		return value;
	}
	,get_currentFrame: function() {
		return this.mCurrentFrame;
	}
	,set_currentFrame: function(value) {
		this.mCurrentFrame = value;
		this.mCurrentTime = 0.0;
		var _g = 0;
		while(_g < value) {
			var i = _g++;
			this.mCurrentTime += this.getFrameDuration(i);
		}
		this.set_texture(this.mTextures[this.mCurrentFrame]);
		if(!this.mMuted && this.mSounds[this.mCurrentFrame] != null) this.mSounds[this.mCurrentFrame].play();
		return value;
	}
	,get_fps: function() {
		return 1.0 / this.mDefaultFrameDuration;
	}
	,set_fps: function(value) {
		if(value <= 0) throw new openfl.errors.ArgumentError("Invalid fps: " + value);
		var newFrameDuration = 1.0 / value;
		var acceleration = newFrameDuration / this.mDefaultFrameDuration;
		this.mCurrentTime *= acceleration;
		this.mDefaultFrameDuration = newFrameDuration;
		var _g1 = 0;
		var _g = this.get_numFrames();
		while(_g1 < _g) {
			var i = _g1++;
			this.mDurations[i] *= acceleration;
		}
		this.updateStartTimes();
		return value;
	}
	,get_isPlaying: function() {
		if(this.mPlaying) return this.mLoop || this.mCurrentTime < this.get_totalTime(); else return false;
	}
	,get_isComplete: function() {
		return !this.mLoop && this.mCurrentTime >= this.get_totalTime();
	}
	,__class__: starling.display.MovieClip
	,__properties__: $extend(starling.display.Image.prototype.__properties__,{get_isComplete:"get_isComplete",get_isPlaying:"get_isPlaying",set_fps:"set_fps",get_fps:"get_fps",set_currentFrame:"set_currentFrame",get_currentFrame:"get_currentFrame",set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_muted:"set_muted",get_muted:"get_muted",set_loop:"set_loop",get_loop:"get_loop",get_numFrames:"get_numFrames",get_currentTime:"get_currentTime",get_totalTime:"get_totalTime"})
});
starling.display.QuadBatch = function() {
	starling.display.DisplayObject.call(this);
	this.mVertexData = new starling.utils.VertexData(0,true);
	var value = new Array();
	var vectorData = new openfl.VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(value.length);
	vec = this1;
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = value[i];
	}
	vectorData.data = vec;
	this.mIndexData = vectorData;
	this.mIndexData.fixed = false;
	this.mNumQuads = 0;
	this.mTinted = false;
	this.mSyncRequired = false;
	this.mBatchable = false;
	starling.core.Starling.get_current().get_stage3D().addEventListener(starling.events.Event.CONTEXT3D_CREATE,$bind(this,this.onContextCreated),false,0,true);
};
$hxClasses["starling.display.QuadBatch"] = starling.display.QuadBatch;
starling.display.QuadBatch.__name__ = ["starling","display","QuadBatch"];
starling.display.QuadBatch.__properties__ = {set_sRenderAlpha:"set_sRenderAlpha",get_sRenderAlpha:"get_sRenderAlpha"}
starling.display.QuadBatch.sRenderAlpha = null;
starling.display.QuadBatch.compile = function(object,quadBatches) {
	starling.display.QuadBatch.compileObject(object,quadBatches,-1,new openfl.geom.Matrix());
};
starling.display.QuadBatch.optimize = function(quadBatches) {
	var batch1;
	var batch2;
	var _g1 = 0;
	var _g = quadBatches.length;
	while(_g1 < _g) {
		var i = _g1++;
		batch1 = quadBatches[i];
		haxe.Log.trace("CHECK",{ fileName : "QuadBatch.hx", lineNumber : 528, className : "starling.display.QuadBatch", methodName : "optimize"});
		var _g3 = i + 1;
		var _g2 = quadBatches.length;
		while(_g3 < _g2) {
			var k = _g3++;
			var j = quadBatches.length - 1 - k;
			batch2 = quadBatches[j];
			if(!batch1.isStateChange(batch2.get_tinted(),1.0,batch2.get_texture(),batch2.get_smoothing(),batch2.get_blendMode())) {
				batch1.addQuadBatch(batch2);
				batch2.dispose();
				quadBatches.splice(j,1);
			}
		}
	}
};
starling.display.QuadBatch.compileObject = function(object,quadBatches,quadBatchID,transformationMatrix,alpha,blendMode,ignoreCurrentFilter) {
	if(ignoreCurrentFilter == null) ignoreCurrentFilter = false;
	if(alpha == null) alpha = 1.0;
	if(js.Boot.__instanceof(object,starling.display.Sprite3D)) throw new openfl.errors.IllegalOperationError("Sprite3D objects cannot be flattened");
	var i;
	var quadBatch;
	var isRootObject = false;
	var objectAlpha = object.get_alpha();
	var container = object;
	var quad = object;
	var batch = object;
	var filter = object.get_filter();
	if(quadBatchID == -1) {
		isRootObject = true;
		quadBatchID = 0;
		objectAlpha = 1.0;
		blendMode = object.get_blendMode();
		ignoreCurrentFilter = true;
		if(quadBatches.length == 0) quadBatches.push(new starling.display.QuadBatch()); else quadBatches[0].reset();
	} else {
		if(object.get_mask() != null) haxe.Log.trace("[Starling] Masks are ignored on children of a flattened sprite.",{ fileName : "QuadBatch.hx", lineNumber : 574, className : "starling.display.QuadBatch", methodName : "compileObject"});
		if(js.Boot.__instanceof(object,starling.display.Sprite) && (js.Boot.__cast(object , starling.display.Sprite)).get_clipRect() != null) haxe.Log.trace("[Starling] ClipRects are ignored on children of a flattened sprite.",{ fileName : "QuadBatch.hx", lineNumber : 577, className : "starling.display.QuadBatch", methodName : "compileObject"});
	}
	if(filter != null && ignoreCurrentFilter) {
		if(filter.get_mode() == starling.filters.FragmentFilterMode.ABOVE) quadBatchID = starling.display.QuadBatch.compileObject(object,quadBatches,quadBatchID,transformationMatrix,alpha,blendMode,true);
		quadBatchID = starling.display.QuadBatch.compileObject(filter.compile(object),quadBatches,quadBatchID,transformationMatrix,alpha,blendMode);
		if(filter.get_mode() == starling.filters.FragmentFilterMode.BELOW) quadBatchID = starling.display.QuadBatch.compileObject(object,quadBatches,quadBatchID,transformationMatrix,alpha,blendMode,true);
	} else if(container != null) {
		var numChildren = container.get_numChildren();
		var childMatrix = new openfl.geom.Matrix();
		var _g = 0;
		while(_g < numChildren) {
			var i1 = _g++;
			var child = container.getChildAt(i1);
			if(child.get_hasVisibleArea()) {
				var childBlendMode;
				if(child.get_blendMode() == starling.display.BlendMode.AUTO) childBlendMode = blendMode; else childBlendMode = child.get_blendMode();
				childMatrix.copyFrom(transformationMatrix);
				starling.core.RenderSupport.transformMatrixForObject(childMatrix,child);
				quadBatchID = starling.display.QuadBatch.compileObject(child,quadBatches,quadBatchID,childMatrix,alpha * objectAlpha,childBlendMode);
			}
		}
	} else if(quad != null || batch != null) {
		var texture;
		var smoothing;
		var tinted;
		var numQuads;
		if(quad != null) {
			var image = quad;
			if(image != null) texture = image.get_texture(); else texture = null;
			if(image != null) smoothing = image.get_smoothing(); else smoothing = null;
			tinted = quad.get_tinted();
			numQuads = 1;
		} else {
			texture = batch.mTexture;
			smoothing = batch.mSmoothing;
			tinted = batch.mTinted;
			numQuads = batch.mNumQuads;
		}
		quadBatch = quadBatches[quadBatchID];
		if(quadBatch.isStateChange(tinted,alpha * objectAlpha,texture,smoothing,blendMode,numQuads)) {
			quadBatchID++;
			if(quadBatches.length <= quadBatchID) quadBatches.push(new starling.display.QuadBatch());
			quadBatch = quadBatches[quadBatchID];
			quadBatch.reset();
		}
		if(quad != null) quadBatch.addQuad(quad,alpha,texture,smoothing,transformationMatrix,blendMode); else quadBatch.addQuadBatch(batch,alpha,transformationMatrix,blendMode);
	} else throw new openfl.errors.Error("Unsupported display object: " + Type.getClassName(Type.getClass(object)));
	if(isRootObject) {
		haxe.Log.trace("CHECK",{ fileName : "QuadBatch.hx", lineNumber : 663, className : "starling.display.QuadBatch", methodName : "compileObject"});
		var _g1 = quadBatchID + 1;
		var _g2 = quadBatches.length;
		while(_g1 < _g2) {
			var j = _g1++;
			var i2 = quadBatches.length - j - 1;
			quadBatches.pop().dispose();
		}
	}
	return quadBatchID;
};
starling.display.QuadBatch.get_sRenderAlpha = function() {
	if(starling.display.QuadBatch.sRenderAlpha == null) {
		starling.display.QuadBatch.set_sRenderAlpha((function($this) {
			var $r;
			var this1;
			this1 = new openfl.VectorData();
			{
				var this2;
				this2 = new Array(0);
				this1.data = this2;
			}
			this1.length = 0;
			this1.fixed = false;
			$r = this1;
			return $r;
		}(this)));
		var this3 = starling.display.QuadBatch.sRenderAlpha;
		if(!this3.fixed) {
			this3.length++;
			if(this3.data.length < this3.length) {
				var data;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
				this3.data = data;
			}
			this3.data[this3.length - 1] = 1;
		}
		this3.length;
		var this5 = starling.display.QuadBatch.sRenderAlpha;
		if(!this5.fixed) {
			this5.length++;
			if(this5.data.length < this5.length) {
				var data1;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data1 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data1,0,this5.data.length);
				this5.data = data1;
			}
			this5.data[this5.length - 1] = 1;
		}
		this5.length;
		var this7 = starling.display.QuadBatch.sRenderAlpha;
		if(!this7.fixed) {
			this7.length++;
			if(this7.data.length < this7.length) {
				var data2;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data2 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data2,0,this7.data.length);
				this7.data = data2;
			}
			this7.data[this7.length - 1] = 1;
		}
		this7.length;
		var this9 = starling.display.QuadBatch.sRenderAlpha;
		if(!this9.fixed) {
			this9.length++;
			if(this9.data.length < this9.length) {
				var data3;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data3 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data3,0,this9.data.length);
				this9.data = data3;
			}
			this9.data[this9.length - 1] = 1;
		}
		this9.length;
	}
	return starling.display.QuadBatch.sRenderAlpha;
};
starling.display.QuadBatch.set_sRenderAlpha = function(value) {
	return starling.display.QuadBatch.sRenderAlpha = value;
};
starling.display.QuadBatch.getImageProgramName = function(tinted,mipMap,repeat,format,smoothing) {
	if(smoothing == null) smoothing = "bilinear";
	if(repeat == null) repeat = false;
	if(mipMap == null) mipMap = true;
	if(format == null) format = openfl.display3D.Context3DTextureFormat.BGRA;
	var bitField = 0;
	if(tinted) bitField = bitField | 1;
	if(mipMap) bitField = bitField | 2;
	if(repeat) bitField = bitField | 4;
	if(smoothing == starling.textures.TextureSmoothing.NONE) bitField = bitField | 8; else if(smoothing == starling.textures.TextureSmoothing.TRILINEAR) bitField = bitField | 16;
	if(format == openfl.display3D.Context3DTextureFormat.COMPRESSED) bitField = bitField | 32; else if(format == openfl.display3D.Context3DTextureFormat.COMPRESSED_ALPHA) bitField = bitField | 64;
	var name = starling.display.QuadBatch.sProgramNameCache.get(bitField);
	if(name == null) {
		name = "QB_i." + StringTools.hex(bitField);
		starling.display.QuadBatch.sProgramNameCache.set(bitField,name);
		name;
	}
	return name;
};
starling.display.QuadBatch.__super__ = starling.display.DisplayObject;
starling.display.QuadBatch.prototype = $extend(starling.display.DisplayObject.prototype,{
	mNumQuads: null
	,mSyncRequired: null
	,mBatchable: null
	,mTinted: null
	,mTexture: null
	,mSmoothing: null
	,mVertexBuffer: null
	,mIndexData: null
	,mIndexBuffer: null
	,mVertexData: null
	,numQuads: null
	,tinted: null
	,texture: null
	,smoothing: null
	,premultipliedAlpha: null
	,dispose: function() {
		starling.core.Starling.get_current().get_stage3D().removeEventListener(starling.events.Event.CONTEXT3D_CREATE,$bind(this,this.onContextCreated));
		this.destroyBuffers();
		this.mVertexData.set_numVertices(0);
		var this1 = this.mIndexData;
		if(!this1.fixed) {
			if(0 > this1.length) {
				var data;
				var this2;
				this2 = new Array(0);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,0)));
				this1.data = data;
			}
			this1.length = 0;
		}
		0;
		this.mNumQuads = 0;
		starling.display.DisplayObject.prototype.dispose.call(this);
	}
	,onContextCreated: function(event) {
		this.createBuffers();
	}
	,onVertexDataChanged: function() {
		this.mSyncRequired = true;
	}
	,clone: function() {
		var clone = new starling.display.QuadBatch();
		clone.mVertexData = this.mVertexData.clone(0,this.mNumQuads * 4);
		var this1 = this.mIndexData;
		var pos = 0;
		var end = this.mNumQuads * 6;
		if(pos < 0) pos += this1.length;
		if(end <= 0) end += this1.length;
		if(end > this1.length) end = this1.length;
		var length = end - pos;
		if(length <= 0 || length > this1.length) length = this1.length;
		var vectorData = new openfl.VectorData();
		vectorData.length = end - pos;
		vectorData.fixed = true;
		var this2;
		this2 = new Array(length);
		vectorData.data = this2;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos,vectorData.data,0,length);
		clone.mIndexData = vectorData;
		clone.mNumQuads = this.mNumQuads;
		clone.mTinted = this.mTinted;
		clone.mTexture = this.mTexture;
		clone.mSmoothing = this.mSmoothing;
		clone.mSyncRequired = true;
		clone.set_blendMode(this.get_blendMode());
		clone.set_alpha(this.get_alpha());
		return clone;
	}
	,expand: function() {
		var oldCapacity = this.get_capacity();
		if(oldCapacity >= starling.display.QuadBatch.MAX_NUM_QUADS) throw new openfl.errors.Error("Exceeded maximum number of quads!");
		this.set_capacity(oldCapacity < 8?16:oldCapacity * 2);
	}
	,createBuffers: function() {
		this.destroyBuffers();
		var numVertices = this.mVertexData.get_numVertices();
		var numIndices = this.mIndexData.length;
		var context = starling.core.Starling.get_Context();
		if(numVertices == 0) return;
		if(context == null) throw new starling.errors.MissingContextError();
		this.mVertexBuffer = context.createVertexBuffer(numVertices,starling.utils.VertexData.ELEMENTS_PER_VERTEX);
		this.mVertexBuffer.uploadFromVector(this.mVertexData.get_rawData(),0,numVertices);
		this.mIndexBuffer = context.createIndexBuffer(numIndices);
		this.mIndexBuffer.uploadFromVector(this.mIndexData,0,numIndices);
		this.mSyncRequired = false;
	}
	,destroyBuffers: function() {
		if(this.mVertexBuffer != null) {
			this.mVertexBuffer.dispose();
			this.mVertexBuffer = null;
		}
		if(this.mIndexBuffer != null) {
			this.mIndexBuffer.dispose();
			this.mIndexBuffer = null;
		}
	}
	,syncBuffers: function() {
		if(this.mVertexBuffer == null) this.createBuffers(); else {
			this.mVertexBuffer.uploadFromVector(this.mVertexData.get_rawData(),0,this.mVertexData.get_numVertices());
			this.mSyncRequired = false;
		}
	}
	,renderCustom: function(mvpMatrix,parentAlpha,blendMode) {
		if(parentAlpha == null) parentAlpha = 1.0;
		if(this.mNumQuads == 0) return;
		if(this.mSyncRequired) this.syncBuffers();
		var pma = this.mVertexData.get_premultipliedAlpha();
		var context = starling.core.Starling.get_Context();
		var tinted = this.mTinted || parentAlpha != 1.0;
		var this1 = starling.display.QuadBatch.get_sRenderAlpha();
		var value;
		var this2 = starling.display.QuadBatch.get_sRenderAlpha();
		var value1;
		var this3 = starling.display.QuadBatch.get_sRenderAlpha();
		if(!this3.fixed) {
			if(2 >= this3.length) this3.length = 3;
			if(this3.data.length < this3.length) {
				var data;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
				this3.data = data;
			}
		}
		if(pma) value1 = this3.data[2] = parentAlpha; else value1 = this3.data[2] = 1.0;
		if(!this2.fixed) {
			if(1 >= this2.length) this2.length = 2;
			if(this2.data.length < this2.length) {
				var data1;
				var this5;
				this5 = new Array(this2.data.length + 10);
				data1 = this5;
				haxe.ds._Vector.Vector_Impl_.blit(this2.data,0,data1,0,this2.data.length);
				this2.data = data1;
			}
		}
		value = this2.data[1] = value1;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data2;
				var this6;
				this6 = new Array(this1.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data2,0,this1.data.length);
				this1.data = data2;
			}
		}
		this1.data[0] = value;
		var this7 = starling.display.QuadBatch.get_sRenderAlpha();
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = parentAlpha;
		starling.core.RenderSupport.setBlendFactors(pma,blendMode != null?blendMode:this.get_blendMode());
		context.setProgram(this.getProgram(tinted));
		if(this.mTexture == null || tinted) context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.VERTEX,0,(function($this) {
			var $r;
			var this9 = starling.display.QuadBatch.get_sRenderAlpha();
			var value2 = new Array();
			{
				var _g1 = 0;
				var _g = this9.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value2.push(this9.data[i]);
				}
			}
			$r = value2;
			return $r;
		}(this)),1);
		context.setProgramConstantsFromMatrix(openfl.display3D.Context3DProgramType.VERTEX,1,mvpMatrix,true);
		context.setVertexBufferAt(0,this.mVertexBuffer,starling.utils.VertexData.POSITION_OFFSET,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
		if(this.mTexture == null || tinted) context.setVertexBufferAt(1,this.mVertexBuffer,starling.utils.VertexData.COLOR_OFFSET,openfl.display3D.Context3DVertexBufferFormat.FLOAT_4);
		if(this.mTexture != null) {
			context.setTextureAt(0,this.mTexture.get_base());
			context.setVertexBufferAt(2,this.mVertexBuffer,starling.utils.VertexData.TEXCOORD_OFFSET,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
		}
		context.drawTriangles(this.mIndexBuffer,0,this.mNumQuads * 2);
		if(this.mTexture != null) {
			context.setTextureAt(0,null);
			context.setVertexBufferAt(2,null);
		}
		context.setVertexBufferAt(1,null);
		context.setVertexBufferAt(0,null);
	}
	,reset: function() {
		this.mNumQuads = 0;
		this.mTexture = null;
		this.mSmoothing = null;
		this.mSyncRequired = true;
	}
	,addImage: function(image,parentAlpha,modelViewMatrix,blendMode) {
		if(parentAlpha == null) parentAlpha = 1.0;
		this.addQuad(image,parentAlpha,image.get_texture(),image.get_smoothing(),modelViewMatrix,blendMode);
	}
	,addQuad: function(quad,parentAlpha,texture,smoothing,modelViewMatrix,blendMode) {
		if(parentAlpha == null) parentAlpha = 1.0;
		if(modelViewMatrix == null) modelViewMatrix = quad.get_transformationMatrix();
		var alpha = parentAlpha * quad.get_alpha();
		var vertexID = this.mNumQuads * 4;
		if(this.mNumQuads + 1 > this.mVertexData.get_numVertices() / 4) this.expand();
		if(this.mNumQuads == 0) {
			this.set_blendMode(blendMode != null?blendMode:quad.get_blendMode());
			this.mTexture = texture;
			if(texture != null) this.mTinted = quad.get_tinted() || parentAlpha != 1.0; else this.mTinted = false;
			this.mSmoothing = smoothing;
			this.mVertexData.setPremultipliedAlpha(quad.get_premultipliedAlpha());
		}
		quad.copyVertexDataTransformedTo(this.mVertexData,vertexID,modelViewMatrix);
		if(alpha != 1.0) this.mVertexData.scaleAlpha(vertexID,alpha,4);
		this.mSyncRequired = true;
		this.mNumQuads++;
	}
	,addQuadBatch: function(quadBatch,parentAlpha,modelViewMatrix,blendMode) {
		if(parentAlpha == null) parentAlpha = 1.0;
		if(modelViewMatrix == null) modelViewMatrix = quadBatch.get_transformationMatrix();
		var tinted = quadBatch.mTinted || parentAlpha != 1.0;
		var alpha = parentAlpha * quadBatch.get_alpha();
		var vertexID = this.mNumQuads * 4;
		var numQuads = quadBatch.get_numQuads();
		if(this.mNumQuads + numQuads > this.get_capacity()) this.set_capacity(this.mNumQuads + numQuads);
		if(this.mNumQuads == 0) {
			this.set_blendMode(blendMode != null?blendMode:quadBatch.get_blendMode());
			this.mTexture = quadBatch.mTexture;
			this.mTinted = tinted;
			this.mSmoothing = quadBatch.mSmoothing;
			this.mVertexData.setPremultipliedAlpha(quadBatch.mVertexData.get_premultipliedAlpha(),false);
		}
		quadBatch.mVertexData.copyTransformedTo(this.mVertexData,vertexID,modelViewMatrix,0,numQuads * 4);
		if(alpha != 1.0) this.mVertexData.scaleAlpha(vertexID,alpha,numQuads * 4);
		this.mSyncRequired = true;
		this.mNumQuads += numQuads;
	}
	,isStateChange: function(tinted,parentAlpha,texture,smoothing,blendMode,numQuads) {
		if(numQuads == null) numQuads = 1;
		if(this.mNumQuads == 0) return false; else if(this.mNumQuads + numQuads > starling.display.QuadBatch.MAX_NUM_QUADS) return true; else if(this.mTexture == null && texture == null) return this.get_blendMode() != blendMode; else if(this.mTexture != null && texture != null) return this.mTexture.get_base() != texture.get_base() || this.mTexture.get_repeat() != texture.get_repeat() || this.mSmoothing != smoothing || this.mTinted != (tinted || parentAlpha != 1.0) || this.get_blendMode() != blendMode; else return true;
	}
	,transformQuad: function(quadID,matrix) {
		this.mVertexData.transformVertex(quadID * 4,matrix,4);
		this.mSyncRequired = true;
	}
	,getVertexColor: function(quadID,vertexID) {
		return this.mVertexData.getColor(quadID * 4 + vertexID);
	}
	,setVertexColor: function(quadID,vertexID,color) {
		this.mVertexData.setColor(quadID * 4 + vertexID,color);
		this.mSyncRequired = true;
	}
	,getVertexAlpha: function(quadID,vertexID) {
		return this.mVertexData.getAlpha(quadID * 4 + vertexID);
	}
	,setVertexAlpha: function(quadID,vertexID,alpha) {
		this.mVertexData.setAlpha(quadID * 4 + vertexID,alpha);
		this.mSyncRequired = true;
	}
	,getQuadColor: function(quadID) {
		return this.mVertexData.getColor(quadID * 4);
	}
	,setQuadColor: function(quadID,color) {
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			this.mVertexData.setColor(quadID * 4 + i,color);
		}
		this.mSyncRequired = true;
	}
	,getQuadAlpha: function(quadID) {
		return this.mVertexData.getAlpha(quadID * 4);
	}
	,setQuadAlpha: function(quadID,alpha) {
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			this.mVertexData.setAlpha(quadID * 4 + i,alpha);
		}
		this.mSyncRequired = true;
	}
	,setQuad: function(quadID,quad) {
		var matrix = quad.get_transformationMatrix();
		var alpha = quad.get_alpha();
		var vertexID = quadID * 4 | 0;
		quad.copyVertexDataTransformedTo(this.mVertexData,vertexID,matrix);
		if(alpha != 1.0) this.mVertexData.scaleAlpha(vertexID,alpha,4);
		this.mSyncRequired = true;
	}
	,getQuadBounds: function(quadID,transformationMatrix,resultRect) {
		return this.mVertexData.getBounds(transformationMatrix,quadID * 4,4,resultRect);
	}
	,getBounds: function(targetSpace,resultRect) {
		if(resultRect == null) resultRect = new openfl.geom.Rectangle();
		var transformationMatrix;
		if(targetSpace == this) transformationMatrix = null; else transformationMatrix = this.getTransformationMatrix(targetSpace,starling.display.QuadBatch.sHelperMatrix);
		return this.mVertexData.getBounds(transformationMatrix,0,this.mNumQuads * 4,resultRect);
	}
	,render: function(support,parentAlpha) {
		if(this.mNumQuads != null) {
			if(this.mBatchable) support.batchQuadBatch(this,parentAlpha); else {
				support.finishQuadBatch();
				support.raiseDrawCount();
				this.renderCustom(support.get_mvpMatrix3D(),this.get_alpha() * parentAlpha,support.get_blendMode());
			}
		}
	}
	,get_numQuads: function() {
		return this.mNumQuads;
	}
	,get_tinted: function() {
		return this.mTinted;
	}
	,get_texture: function() {
		return this.mTexture;
	}
	,get_smoothing: function() {
		return this.mSmoothing;
	}
	,get_premultipliedAlpha: function() {
		return this.mVertexData.get_premultipliedAlpha();
	}
	,get_batchable: function() {
		return this.mBatchable;
	}
	,set_batchable: function(value) {
		this.mBatchable = value;
		return value;
	}
	,get_capacity: function() {
		return Std["int"](this.mVertexData.get_numVertices() / 4);
	}
	,set_capacity: function(value) {
		var oldCapacity = this.get_capacity();
		if(value == oldCapacity) return value; else if(value == 0) throw new openfl.errors.Error("Capacity must be > 0"); else if(value > starling.display.QuadBatch.MAX_NUM_QUADS) value = starling.display.QuadBatch.MAX_NUM_QUADS;
		if(this.mNumQuads > value) this.mNumQuads = value;
		this.mVertexData.set_numVertices(value * 4);
		var this1 = this.mIndexData;
		var value1 = value * 6;
		if(!this1.fixed) {
			if(value1 > this1.length) {
				var data;
				var this2;
				this2 = new Array(value1);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,value1)));
				this1.data = data;
			}
			this1.length = value1;
		}
		value1;
		var _g = oldCapacity;
		while(_g < value) {
			var i = _g++;
			var this3 = this.mIndexData;
			var key = i * 6 | 0;
			if(!this3.fixed) {
				if(key >= this3.length) this3.length = key + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[key] = i * 4;
			var this5 = this.mIndexData;
			var key1 = i * 6 + 1 | 0;
			if(!this5.fixed) {
				if(key1 >= this5.length) this5.length = key1 + 1;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[key1] = i * 4 + 1;
			var this7 = this.mIndexData;
			var key2 = i * 6 + 2 | 0;
			if(!this7.fixed) {
				if(key2 >= this7.length) this7.length = key2 + 1;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[key2] = i * 4 + 2;
			var this9 = this.mIndexData;
			var key3 = i * 6 + 3 | 0;
			if(!this9.fixed) {
				if(key3 >= this9.length) this9.length = key3 + 1;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[key3] = i * 4 + 1;
			var this11 = this.mIndexData;
			var key4 = i * 6 + 4 | 0;
			if(!this11.fixed) {
				if(key4 >= this11.length) this11.length = key4 + 1;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[key4] = i * 4 + 3;
			var this13 = this.mIndexData;
			var key5 = i * 6 + 5 | 0;
			if(!this13.fixed) {
				if(key5 >= this13.length) this13.length = key5 + 1;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[key5] = i * 4 + 2;
		}
		this.destroyBuffers();
		this.mSyncRequired = true;
		return value;
	}
	,getProgram: function(tinted) {
		var target = starling.core.Starling.get_current();
		var programName = starling.display.QuadBatch.QUAD_PROGRAM_NAME;
		if(this.mTexture != null) programName = starling.display.QuadBatch.getImageProgramName(tinted,this.mTexture.get_mipMapping(),this.mTexture.get_repeat(),this.mTexture.get_format(),this.mSmoothing);
		var program = target.getProgram(programName);
		if(program == null) {
			var vertexShader;
			var fragmentShader;
			if(this.mTexture == null) {
				vertexShader = "m44 op, va0, vc1 \n" + "mul v0, va1, vc0 \n";
				fragmentShader = "mov oc, v0       \n";
			} else {
				if(tinted) vertexShader = "m44 op, va0, vc1 \n" + "mul v0, va1, vc0 \n" + "mov v1, va2      \n"; else vertexShader = "m44 op, va0, vc1 \n" + "mov v1, va2      \n";
				if(tinted) fragmentShader = "tex ft1,  v1, fs0 <???> \n" + "mul  oc, ft1,  v0       \n"; else fragmentShader = "tex  oc,  v1, fs0 <???> \n";
				fragmentShader = StringTools.replace(fragmentShader,"<???>",starling.core.RenderSupport.getTextureLookupFlags(this.mTexture.get_format(),this.mTexture.get_mipMapping(),this.mTexture.get_repeat(),this.get_smoothing()));
			}
			program = target.registerProgramFromSource(programName,vertexShader,fragmentShader);
		}
		return program;
	}
	,__class__: starling.display.QuadBatch
	,__properties__: $extend(starling.display.DisplayObject.prototype.__properties__,{set_capacity:"set_capacity",get_capacity:"get_capacity",set_batchable:"set_batchable",get_batchable:"get_batchable",get_premultipliedAlpha:"get_premultipliedAlpha",get_smoothing:"get_smoothing",get_texture:"get_texture",get_tinted:"get_tinted",get_numQuads:"get_numQuads"})
});
starling.display.Sprite3D = function() {
	starling.display.DisplayObjectContainer.call(this);
	this.mScaleZ = 1.0;
	this.mRotationX = this.mRotationY = this.mPivotZ = this.mZ = 0.0;
	this.mTransformationMatrix = new openfl.geom.Matrix();
	this.mTransformationMatrix3D = new openfl.geom.Matrix3D();
	this.setIs3D(true);
	this.addEventListener(starling.events.Event.ADDED,$bind(this,this.onAddedChild));
	this.addEventListener(starling.events.Event.REMOVED,$bind(this,this.onRemovedChild));
};
$hxClasses["starling.display.Sprite3D"] = starling.display.Sprite3D;
starling.display.Sprite3D.__name__ = ["starling","display","Sprite3D"];
starling.display.Sprite3D.__super__ = starling.display.DisplayObjectContainer;
starling.display.Sprite3D.prototype = $extend(starling.display.DisplayObjectContainer.prototype,{
	mRotationX: null
	,mRotationY: null
	,mScaleZ: null
	,mPivotZ: null
	,mZ: null
	,mTransformationChanged: null
	,is2D: null
	,render: function(support,parentAlpha) {
		if(this.mZ > -starling.display.Sprite3D.E && this.mZ < starling.display.Sprite3D.E && this.mRotationX > -starling.display.Sprite3D.E && this.mRotationX < starling.display.Sprite3D.E && this.mRotationY > -starling.display.Sprite3D.E && this.mRotationY < starling.display.Sprite3D.E && this.mPivotZ > -starling.display.Sprite3D.E && this.mPivotZ < starling.display.Sprite3D.E) starling.display.DisplayObjectContainer.prototype.render.call(this,support,parentAlpha); else {
			support.finishQuadBatch();
			support.pushMatrix3D();
			support.transformMatrix3D(this);
			starling.display.DisplayObjectContainer.prototype.render.call(this,support,parentAlpha);
			support.finishQuadBatch();
			support.popMatrix3D();
		}
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) forTouch = false;
		if(this.mZ > -starling.display.Sprite3D.E && this.mZ < starling.display.Sprite3D.E && this.mRotationX > -starling.display.Sprite3D.E && this.mRotationX < starling.display.Sprite3D.E && this.mRotationY > -starling.display.Sprite3D.E && this.mRotationY < starling.display.Sprite3D.E && this.mPivotZ > -starling.display.Sprite3D.E && this.mPivotZ < starling.display.Sprite3D.E) return starling.display.DisplayObjectContainer.prototype.hitTest.call(this,localPoint,forTouch); else {
			if(forTouch && (!this.get_visible() || !this.get_touchable())) return null;
			starling.display.Sprite3D.sHelperMatrix.copyFrom(this.get_transformationMatrix3D());
			starling.display.Sprite3D.sHelperMatrix.invert();
			this.get_stage().getCameraPosition(this,starling.display.Sprite3D.sHelperPoint);
			starling.utils.MatrixUtil.transformCoords3D(starling.display.Sprite3D.sHelperMatrix,localPoint.x,localPoint.y,0,starling.display.Sprite3D.sHelperPointAlt);
			starling.utils.MathUtil.intersectLineWithXYPlane(starling.display.Sprite3D.sHelperPoint,starling.display.Sprite3D.sHelperPointAlt,localPoint);
			return starling.display.DisplayObjectContainer.prototype.hitTest.call(this,localPoint,forTouch);
		}
	}
	,onAddedChild: function(event) {
		this.recursivelySetIs3D(event.get_target(),true);
	}
	,onRemovedChild: function(event) {
		this.recursivelySetIs3D(event.get_target(),false);
	}
	,recursivelySetIs3D: function(object,value) {
		if(js.Boot.__instanceof(object,starling.display.Sprite3D)) return;
		if(js.Boot.__instanceof(object,starling.display.DisplayObjectContainer)) {
			var container = object;
			var numChildren = container.get_numChildren();
			var _g = 0;
			while(_g < numChildren) {
				var i = _g++;
				this.recursivelySetIs3D(container.getChildAt(i),value);
			}
		}
		object.setIs3D(value);
	}
	,updateMatrices: function() {
		var x = this.get_x();
		var y = this.get_y();
		var scaleX = this.get_scaleX();
		var scaleY = this.get_scaleY();
		var pivotX = this.get_pivotX();
		var pivotY = this.get_pivotY();
		var rotationZ = this.get_rotation();
		this.mTransformationMatrix3D.identity();
		if(scaleX != 1.0 || scaleY != 1.0 || this.mScaleZ != 1.0) this.mTransformationMatrix3D.appendScale(scaleX || starling.display.Sprite3D.E,scaleY || starling.display.Sprite3D.E,this.get_scaleZ() || starling.display.Sprite3D.E);
		if(this.mRotationX != 0.0) this.mTransformationMatrix3D.appendRotation(starling.utils.StarlingUtils.rad2deg(this.mRotationX),new openfl.geom.Vector3D(1,0,0),null);
		if(this.mRotationY != 0.0) this.mTransformationMatrix3D.appendRotation(starling.utils.StarlingUtils.rad2deg(this.mRotationY),new openfl.geom.Vector3D(0,1,0),null);
		if(rotationZ != 0.0) this.mTransformationMatrix3D.appendRotation(starling.utils.StarlingUtils.rad2deg(rotationZ),new openfl.geom.Vector3D(0,0,1),null);
		if(x != 0.0 || y != 0.0 || this.mZ != 0.0) this.mTransformationMatrix3D.appendTranslation(x,y,this.mZ);
		if(pivotX != 0.0 || pivotY != 0.0 || this.mPivotZ != 0.0) this.mTransformationMatrix3D.prependTranslation(-pivotX,-pivotY,-this.mPivotZ);
		if(this.mZ > -starling.display.Sprite3D.E && this.mZ < starling.display.Sprite3D.E && this.mRotationX > -starling.display.Sprite3D.E && this.mRotationX < starling.display.Sprite3D.E && this.mRotationY > -starling.display.Sprite3D.E && this.mRotationY < starling.display.Sprite3D.E && this.mPivotZ > -starling.display.Sprite3D.E && this.mPivotZ < starling.display.Sprite3D.E) starling.utils.MatrixUtil.convertTo2D(this.mTransformationMatrix3D,this.mTransformationMatrix); else this.mTransformationMatrix.identity();
	}
	,get_is2D: function() {
		return this.mZ > -starling.display.Sprite3D.E && this.mZ < starling.display.Sprite3D.E && this.mRotationX > -starling.display.Sprite3D.E && this.mRotationX < starling.display.Sprite3D.E && this.mRotationY > -starling.display.Sprite3D.E && this.mRotationY < starling.display.Sprite3D.E && this.mPivotZ > -starling.display.Sprite3D.E && this.mPivotZ < starling.display.Sprite3D.E;
	}
	,get_transformationMatrix: function() {
		if(this.mTransformationChanged) {
			this.updateMatrices();
			this.mTransformationChanged = false;
		}
		return this.mTransformationMatrix;
	}
	,set_transformationMatrix: function(value) {
		starling.display.DisplayObjectContainer.prototype.set_transformationMatrix.call(this,value);
		this.mRotationX = this.mRotationY = this.mPivotZ = this.mZ = 0;
		this.mTransformationChanged = true;
		return value;
	}
	,get_transformationMatrix3D: function() {
		if(this.mTransformationChanged) {
			this.updateMatrices();
			this.mTransformationChanged = false;
		}
		return this.mTransformationMatrix3D;
	}
	,set_x: function(value) {
		starling.display.DisplayObjectContainer.prototype.set_x.call(this,value);
		this.mTransformationChanged = true;
		return value;
	}
	,set_y: function(value) {
		starling.display.DisplayObjectContainer.prototype.set_y.call(this,value);
		this.mTransformationChanged = true;
		return value;
	}
	,get_z: function() {
		return this.mZ;
	}
	,set_z: function(value) {
		this.mZ = value;
		this.mTransformationChanged = true;
		return value;
	}
	,set_pivotX: function(value) {
		starling.display.DisplayObjectContainer.prototype.set_pivotX.call(this,value);
		this.mTransformationChanged = true;
		return value;
	}
	,set_pivotY: function(value) {
		starling.display.DisplayObjectContainer.prototype.set_pivotY.call(this,value);
		this.mTransformationChanged = true;
		return value;
	}
	,get_pivotZ: function() {
		return this.mPivotZ;
	}
	,set_pivotZ: function(value) {
		this.mPivotZ = value;
		this.mTransformationChanged = true;
		return value;
	}
	,set_scaleX: function(value) {
		starling.display.DisplayObjectContainer.prototype.set_scaleX.call(this,value);
		this.mTransformationChanged = true;
		return value;
	}
	,set_scaleY: function(value) {
		starling.display.DisplayObjectContainer.prototype.set_scaleY.call(this,value);
		this.mTransformationChanged = true;
		return value;
	}
	,get_scaleZ: function() {
		return this.mScaleZ;
	}
	,set_scaleZ: function(value) {
		this.mScaleZ = value;
		this.mTransformationChanged = true;
		return value;
	}
	,set_skewX: function(value) {
		throw new openfl.errors.Error("3D objects do not support skewing");
		return value;
	}
	,set_skewY: function(value) {
		throw new openfl.errors.Error("3D objects do not support skewing");
		return value;
	}
	,set_rotation: function(value) {
		starling.display.DisplayObjectContainer.prototype.set_rotation.call(this,value);
		this.mTransformationChanged = true;
		return value;
	}
	,get_rotationX: function() {
		return this.mRotationX;
	}
	,set_rotationX: function(value) {
		this.mRotationX = starling.utils.MathUtil.normalizeAngle(value);
		this.mTransformationChanged = true;
		return value;
	}
	,get_rotationY: function() {
		return this.mRotationY;
	}
	,set_rotationY: function(value) {
		this.mRotationY = starling.utils.MathUtil.normalizeAngle(value);
		this.mTransformationChanged = true;
		return value;
	}
	,get_rotationZ: function() {
		return this.get_rotation();
	}
	,set_rotationZ: function(value) {
		this.set_rotation(value);
		return value;
	}
	,__class__: starling.display.Sprite3D
	,__properties__: $extend(starling.display.DisplayObjectContainer.prototype.__properties__,{set_rotationZ:"set_rotationZ",get_rotationZ:"get_rotationZ",set_rotationY:"set_rotationY",get_rotationY:"get_rotationY",set_rotationX:"set_rotationX",get_rotationX:"get_rotationX",set_scaleZ:"set_scaleZ",get_scaleZ:"get_scaleZ",set_pivotZ:"set_pivotZ",get_pivotZ:"get_pivotZ",set_z:"set_z",get_z:"get_z",get_is2D:"get_is2D"})
});
starling.display.Stage = function(width,height,color) {
	if(color == null) color = 0;
	starling.display.DisplayObjectContainer.call(this);
	this.mWidth = width;
	this.mHeight = height;
	this.mColor = color;
	this.mFieldOfView = 1.0;
	this.mProjectionOffset = new openfl.geom.Point();
	this.mCameraPosition = new openfl.geom.Vector3D();
	this.mEnterFrameEvent = new starling.events.EnterFrameEvent(starling.events.Event.ENTER_FRAME,0.0);
	this.mEnterFrameListeners = new Array();
};
$hxClasses["starling.display.Stage"] = starling.display.Stage;
starling.display.Stage.__name__ = ["starling","display","Stage"];
starling.display.Stage.__super__ = starling.display.DisplayObjectContainer;
starling.display.Stage.prototype = $extend(starling.display.DisplayObjectContainer.prototype,{
	mWidth: null
	,mHeight: null
	,mColor: null
	,mFieldOfView: null
	,mProjectionOffset: null
	,mCameraPosition: null
	,mEnterFrameEvent: null
	,mEnterFrameListeners: null
	,cameraPosition: null
	,advanceTime: function(passedTime) {
		this.mEnterFrameEvent.reset(starling.events.Event.ENTER_FRAME,false,passedTime);
		this.broadcastEvent(this.mEnterFrameEvent);
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) forTouch = false;
		if(forTouch && (!this.get_visible() || !this.get_touchable())) return null;
		if(localPoint.x < 0 || localPoint.x > this.mWidth || localPoint.y < 0 || localPoint.y > this.mHeight) return null;
		var target = starling.display.DisplayObjectContainer.prototype.hitTest.call(this,localPoint,forTouch);
		if(target == null) target = this;
		return target;
	}
	,drawToBitmapData: function(destination,transparent) {
		if(transparent == null) transparent = true;
		var support = new starling.core.RenderSupport();
		var star = starling.core.Starling.get_current();
		if(destination == null) {
			var width = star.get_backBufferWidth() * star.get_backBufferPixelsPerPoint();
			var height = star.get_backBufferHeight() * star.get_backBufferPixelsPerPoint();
			destination = new openfl.display.BitmapData(width,height,transparent);
		}
		support.set_renderTarget(null);
		support.setProjectionMatrix(0,0,this.mWidth,this.mHeight,this.mWidth,this.mHeight,this.get_cameraPosition());
		if(transparent) support.clear(); else support.clear(this.mColor,1);
		this.render(support,1.0);
		support.finishQuadBatch();
		support.dispose();
		starling.core.Starling.get_current().get_context().drawToBitmapData(destination);
		starling.core.Starling.get_current().get_context().present();
		return destination;
	}
	,getCameraPosition: function(space,result) {
		this.getTransformationMatrix3D(space,starling.display.Stage.sHelperMatrix);
		return starling.utils.MatrixUtil.transformCoords3D(starling.display.Stage.sHelperMatrix,this.mWidth / 2 + this.mProjectionOffset.x,this.mHeight / 2 + this.mProjectionOffset.y,-this.get_focalLength(),result);
	}
	,addEnterFrameListener: function(listener) {
		this.mEnterFrameListeners.push(listener);
	}
	,removeEnterFrameListener: function(listener) {
		var index = HxOverrides.indexOf(this.mEnterFrameListeners,listener,0);
		if(index >= 0) this.mEnterFrameListeners.splice(index,1);
	}
	,getChildEventListeners: function(object,eventType,listeners) {
		if(eventType == starling.events.Event.ENTER_FRAME && object == this) {
			var length = this.mEnterFrameListeners.length;
			var _g = 0;
			while(_g < length) {
				var i = _g++;
				listeners[listeners.length] = this.mEnterFrameListeners[i];
			}
		} else listeners = starling.display.DisplayObjectContainer.prototype.getChildEventListeners.call(this,object,eventType,listeners);
		return listeners;
	}
	,set_width: function(value) {
		throw new openfl.errors.IllegalOperationError("Cannot set width of stage");
		return value;
	}
	,set_height: function(value) {
		throw new openfl.errors.IllegalOperationError("Cannot set height of stage");
		return value;
	}
	,set_x: function(value) {
		throw new openfl.errors.IllegalOperationError("Cannot set x-coordinate of stage");
		return value;
	}
	,set_y: function(value) {
		throw new openfl.errors.IllegalOperationError("Cannot set y-coordinate of stage");
		return value;
	}
	,set_scaleX: function(value) {
		throw new openfl.errors.IllegalOperationError("Cannot scale stage");
		return value;
	}
	,set_scaleY: function(value) {
		throw new openfl.errors.IllegalOperationError("Cannot scale stage");
		return value;
	}
	,set_rotation: function(value) {
		throw new openfl.errors.IllegalOperationError("Cannot rotate stage");
		return value;
	}
	,set_skewX: function(value) {
		throw new openfl.errors.IllegalOperationError("Cannot skew stage");
		return value;
	}
	,set_skewY: function(value) {
		throw new openfl.errors.IllegalOperationError("Cannot skew stage");
		return value;
	}
	,set_filter: function(value) {
		throw new openfl.errors.IllegalOperationError("Cannot add filter to stage. Add it to 'root' instead!");
		return value;
	}
	,get_color: function() {
		return this.mColor;
	}
	,set_color: function(value) {
		this.mColor = value;
		return value;
	}
	,get_stageWidth: function() {
		return this.mWidth;
	}
	,set_stageWidth: function(value) {
		this.mWidth = value;
		return value;
	}
	,get_stageHeight: function() {
		return this.mHeight;
	}
	,set_stageHeight: function(value) {
		this.mHeight = value;
		return value;
	}
	,get_focalLength: function() {
		return this.mWidth / (2 * Math.tan(this.mFieldOfView / 2));
	}
	,set_focalLength: function(value) {
		this.mFieldOfView = 2 * Math.atan(this.get_stageWidth() / (2 * value));
		return value;
	}
	,get_fieldOfView: function() {
		return this.mFieldOfView;
	}
	,set_fieldOfView: function(value) {
		this.mFieldOfView = value;
		return value;
	}
	,get_projectionOffset: function() {
		return this.mProjectionOffset;
	}
	,set_projectionOffset: function(value) {
		this.mProjectionOffset.setTo(value.x,value.y);
		return value;
	}
	,get_cameraPosition: function() {
		return this.getCameraPosition(null,this.mCameraPosition);
	}
	,__class__: starling.display.Stage
	,__properties__: $extend(starling.display.DisplayObjectContainer.prototype.__properties__,{get_cameraPosition:"get_cameraPosition",set_projectionOffset:"set_projectionOffset",get_projectionOffset:"get_projectionOffset",set_fieldOfView:"set_fieldOfView",get_fieldOfView:"get_fieldOfView",set_focalLength:"set_focalLength",get_focalLength:"get_focalLength",set_stageHeight:"set_stageHeight",get_stageHeight:"get_stageHeight",set_stageWidth:"set_stageWidth",get_stageWidth:"get_stageWidth",set_color:"set_color",get_color:"get_color"})
});
starling.errors = {};
starling.errors.AbstractClassError = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "Cannot instantiate abstract class";
	openfl.errors.Error.call(this,message,id);
};
$hxClasses["starling.errors.AbstractClassError"] = starling.errors.AbstractClassError;
starling.errors.AbstractClassError.__name__ = ["starling","errors","AbstractClassError"];
starling.errors.AbstractClassError.__super__ = openfl.errors.Error;
starling.errors.AbstractClassError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: starling.errors.AbstractClassError
});
starling.errors.AbstractMethodError = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "Method needs to be implemented in subclass";
	openfl.errors.Error.call(this,message,id);
};
$hxClasses["starling.errors.AbstractMethodError"] = starling.errors.AbstractMethodError;
starling.errors.AbstractMethodError.__name__ = ["starling","errors","AbstractMethodError"];
starling.errors.AbstractMethodError.__super__ = openfl.errors.Error;
starling.errors.AbstractMethodError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: starling.errors.AbstractMethodError
});
starling.errors.MissingContextError = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "Starling context is missing";
	openfl.errors.Error.call(this,message,id);
};
$hxClasses["starling.errors.MissingContextError"] = starling.errors.MissingContextError;
starling.errors.MissingContextError.__name__ = ["starling","errors","MissingContextError"];
starling.errors.MissingContextError.__super__ = openfl.errors.Error;
starling.errors.MissingContextError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: starling.errors.MissingContextError
});
starling.errors.NotSupportedError = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "";
	openfl.errors.Error.call(this,message,id);
};
$hxClasses["starling.errors.NotSupportedError"] = starling.errors.NotSupportedError;
starling.errors.NotSupportedError.__name__ = ["starling","errors","NotSupportedError"];
starling.errors.NotSupportedError.__super__ = openfl.errors.Error;
starling.errors.NotSupportedError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: starling.errors.NotSupportedError
});
starling.events.Event = function(type,bubbles,data) {
	if(bubbles == null) bubbles = false;
	this.mType = type;
	this.mBubbles = bubbles;
	this.mData = data;
};
$hxClasses["starling.events.Event"] = starling.events.Event;
starling.events.Event.__name__ = ["starling","events","Event"];
starling.events.Event.fromPool = function(type,bubbles,data) {
	if(bubbles == null) bubbles = false;
	if(starling.events.Event.sEventPool.length > 0) return starling.events.Event.sEventPool.pop().reset(type,bubbles,data); else return new starling.events.Event(type,bubbles,data);
};
starling.events.Event.toPool = function(event) {
	event.mData = event.mTarget = event.mCurrentTarget = null;
	starling.events.Event.sEventPool[starling.events.Event.sEventPool.length] = event;
};
starling.events.Event.prototype = {
	mTarget: null
	,mCurrentTarget: null
	,mType: null
	,mBubbles: null
	,mStopsPropagation: null
	,mStopsImmediatePropagation: null
	,mData: null
	,bubbles: null
	,target: null
	,currentTarget: null
	,type: null
	,data: null
	,stopsPropagation: null
	,stopsImmediatePropagation: null
	,stopPropagation: function() {
		this.mStopsPropagation = true;
	}
	,stopImmediatePropagation: function() {
		this.mStopsPropagation = this.mStopsImmediatePropagation = true;
	}
	,toString: function() {
		var name = Type.getClassName(Type.getClass(this));
		haxe.Log.trace("CHECK name = " + name.split(".").pop(),{ fileName : "Event.hx", lineNumber : 133, className : "starling.events.Event", methodName : "toString"});
		return starling.utils.StarlingUtils.formatString("[{0} type=\"{1}\" bubbles={2}]",[name.split(".").pop(),this.mType,this.mBubbles]);
	}
	,get_bubbles: function() {
		return this.mBubbles;
	}
	,get_target: function() {
		return this.mTarget;
	}
	,get_currentTarget: function() {
		return this.mCurrentTarget;
	}
	,get_type: function() {
		return this.mType;
	}
	,get_data: function() {
		return this.mData;
	}
	,setTarget: function(value) {
		this.mTarget = value;
	}
	,setCurrentTarget: function(value) {
		this.mCurrentTarget = value;
	}
	,setData: function(value) {
		this.mData = value;
	}
	,get_stopsPropagation: function() {
		return this.mStopsPropagation;
	}
	,get_stopsImmediatePropagation: function() {
		return this.mStopsImmediatePropagation;
	}
	,reset: function(type,bubbles,data) {
		if(bubbles == null) bubbles = false;
		this.mType = type;
		this.mBubbles = bubbles;
		this.mData = data;
		this.mTarget = this.mCurrentTarget = null;
		this.mStopsPropagation = this.mStopsImmediatePropagation = false;
		return this;
	}
	,__class__: starling.events.Event
	,__properties__: {get_stopsImmediatePropagation:"get_stopsImmediatePropagation",get_stopsPropagation:"get_stopsPropagation",get_data:"get_data",get_type:"get_type",get_currentTarget:"get_currentTarget",get_target:"get_target",get_bubbles:"get_bubbles"}
};
starling.events.EnterFrameEvent = function(type,passedTime,bubbles) {
	if(bubbles == null) bubbles = false;
	starling.events.Event.call(this,type,bubbles,passedTime);
};
$hxClasses["starling.events.EnterFrameEvent"] = starling.events.EnterFrameEvent;
starling.events.EnterFrameEvent.__name__ = ["starling","events","EnterFrameEvent"];
starling.events.EnterFrameEvent.__super__ = starling.events.Event;
starling.events.EnterFrameEvent.prototype = $extend(starling.events.Event.prototype,{
	passedTime: null
	,get_passedTime: function() {
		return this.get_data();
	}
	,__class__: starling.events.EnterFrameEvent
	,__properties__: $extend(starling.events.Event.prototype.__properties__,{get_passedTime:"get_passedTime"})
});
starling.events.KeyboardEvent = function(type,charCode,keyCode,keyLocation,ctrlKey,altKey,shiftKey) {
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(keyCode == null) keyCode = 0;
	if(charCode == null) charCode = 0;
	starling.events.Event.call(this,type,false,keyCode);
	this.mCharCode = charCode;
	this.mKeyCode = keyCode;
	this.mKeyLocation = keyLocation;
	this.mCtrlKey = ctrlKey;
	this.mAltKey = altKey;
	this.mShiftKey = shiftKey;
};
$hxClasses["starling.events.KeyboardEvent"] = starling.events.KeyboardEvent;
starling.events.KeyboardEvent.__name__ = ["starling","events","KeyboardEvent"];
starling.events.KeyboardEvent.__super__ = starling.events.Event;
starling.events.KeyboardEvent.prototype = $extend(starling.events.Event.prototype,{
	mCharCode: null
	,mKeyCode: null
	,mKeyLocation: null
	,mAltKey: null
	,mCtrlKey: null
	,mShiftKey: null
	,mIsDefaultPrevented: null
	,charCode: null
	,keyCode: null
	,keyLocation: null
	,altKey: null
	,ctrlKey: null
	,shiftKey: null
	,preventDefault: function() {
		this.mIsDefaultPrevented = true;
	}
	,isDefaultPrevented: function() {
		return this.mIsDefaultPrevented;
	}
	,get_charCode: function() {
		return this.mCharCode;
	}
	,get_keyCode: function() {
		return this.mKeyCode;
	}
	,get_keyLocation: function() {
		return this.mKeyLocation;
	}
	,get_altKey: function() {
		return this.mAltKey;
	}
	,get_ctrlKey: function() {
		return this.mCtrlKey;
	}
	,get_shiftKey: function() {
		return this.mShiftKey;
	}
	,__class__: starling.events.KeyboardEvent
	,__properties__: $extend(starling.events.Event.prototype.__properties__,{get_shiftKey:"get_shiftKey",get_ctrlKey:"get_ctrlKey",get_altKey:"get_altKey",get_keyLocation:"get_keyLocation",get_keyCode:"get_keyCode",get_charCode:"get_charCode"})
});
starling.events.ResizeEvent = function(type,width,height,bubbles) {
	if(bubbles == null) bubbles = false;
	starling.events.Event.call(this,type,bubbles,new openfl.geom.Point(width,height));
};
$hxClasses["starling.events.ResizeEvent"] = starling.events.ResizeEvent;
starling.events.ResizeEvent.__name__ = ["starling","events","ResizeEvent"];
starling.events.ResizeEvent.__super__ = starling.events.Event;
starling.events.ResizeEvent.prototype = $extend(starling.events.Event.prototype,{
	width: null
	,height: null
	,get_width: function() {
		return (js.Boot.__cast(this.get_data() , openfl.geom.Point)).x | 0;
	}
	,get_height: function() {
		return (js.Boot.__cast(this.get_data() , openfl.geom.Point)).y | 0;
	}
	,__class__: starling.events.ResizeEvent
	,__properties__: $extend(starling.events.Event.prototype.__properties__,{get_height:"get_height",get_width:"get_width"})
});
starling.events.Touch = function(id) {
	this.mPhase = "";
	this.mID = id;
	this.mTapCount = 0;
	this.mPhase = starling.events.TouchPhase.HOVER;
	this.mPressure = this.mWidth = this.mHeight = 1.0;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.mBubbleChain = this1;
};
$hxClasses["starling.events.Touch"] = starling.events.Touch;
starling.events.Touch.__name__ = ["starling","events","Touch"];
starling.events.Touch.prototype = {
	mID: null
	,mGlobalX: null
	,mGlobalY: null
	,mPreviousGlobalX: null
	,mPreviousGlobalY: null
	,mTapCount: null
	,mPhase: null
	,mTarget: null
	,mTimestamp: null
	,mPressure: null
	,mWidth: null
	,mHeight: null
	,mBubbleChain: null
	,id: null
	,previousGlobalX: null
	,previousGlobalY: null
	,bubbleChain: null
	,getLocation: function(space,resultPoint) {
		starling.events.Touch.sHelperPoint.setTo(this.mGlobalX,this.mGlobalY);
		return space.globalToLocal(starling.events.Touch.sHelperPoint,resultPoint);
	}
	,getPreviousLocation: function(space,resultPoint) {
		starling.events.Touch.sHelperPoint.setTo(this.mPreviousGlobalX,this.mPreviousGlobalY);
		return space.globalToLocal(starling.events.Touch.sHelperPoint,resultPoint);
	}
	,getMovement: function(space,resultPoint) {
		if(resultPoint == null) resultPoint = new openfl.geom.Point();
		this.getLocation(space,resultPoint);
		var x = resultPoint.x;
		var y = resultPoint.y;
		this.getPreviousLocation(space,resultPoint);
		resultPoint.x = x - resultPoint.x;
		resultPoint.y = y - resultPoint.y;
		return resultPoint;
	}
	,isTouching: function(target) {
		return (function($this) {
			var $r;
			var this1 = $this.mBubbleChain;
			var value = -1;
			{
				var _g1 = 0;
				var _g = this1.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(this1.data[i] == target) {
						value = i;
						break;
					}
				}
			}
			$r = value;
			return $r;
		}(this)) != -1;
	}
	,toString: function() {
		return starling.utils.StarlingUtils.formatString("Touch {0}: globalX={1}, globalY={2}, phase={3}",[this.mID,this.mGlobalX,this.mGlobalY,this.mPhase]);
	}
	,clone: function() {
		var clone = new starling.events.Touch(this.mID);
		clone.mGlobalX = this.mGlobalX;
		clone.mGlobalY = this.mGlobalY;
		clone.mPreviousGlobalX = this.mPreviousGlobalX;
		clone.mPreviousGlobalY = this.mPreviousGlobalY;
		clone.mPhase = this.mPhase;
		clone.mTapCount = this.mTapCount;
		clone.mTimestamp = this.mTimestamp;
		clone.mPressure = this.mPressure;
		clone.mWidth = this.mWidth;
		clone.mHeight = this.mHeight;
		clone.set_target(this.mTarget);
		return clone;
	}
	,updateBubbleChain: function() {
		if(this.mTarget != null) {
			var length = 1;
			var element = this.mTarget;
			var this1 = this.mBubbleChain;
			if(!this1.fixed) {
				if(1 > this1.length) {
					var data;
					var this2;
					this2 = new Array(1);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,1)));
					this1.data = data;
				}
				this1.length = 1;
			}
			1;
			var this3 = this.mBubbleChain;
			if(!this3.fixed) {
				if(0 >= this3.length) this3.length = 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[0] = element;
			while((element = element.get_parent()) != null) {
				var this5 = this.mBubbleChain;
				var key = Std["int"](length++);
				if(!this5.fixed) {
					if(key >= this5.length) this5.length = key + 1;
					if(this5.data.length < this5.length) {
						var data2;
						var this6;
						this6 = new Array(this5.data.length + 10);
						data2 = this6;
						haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
						this5.data = data2;
					}
				}
				this5.data[key] = element;
			}
		} else {
			var this7 = this.mBubbleChain;
			if(!this7.fixed) {
				if(0 > this7.length) {
					var data3;
					var this8;
					this8 = new Array(0);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,Std["int"](Math.min(this7.data.length,0)));
					this7.data = data3;
				}
				this7.length = 0;
			}
			0;
		}
	}
	,get_id: function() {
		return this.mID;
	}
	,get_previousGlobalX: function() {
		return this.mPreviousGlobalX;
	}
	,get_previousGlobalY: function() {
		return this.mPreviousGlobalY;
	}
	,get_globalX: function() {
		return this.mGlobalX;
	}
	,set_globalX: function(value) {
		if(this.mGlobalX != this.mGlobalX) this.mPreviousGlobalX = value; else this.mPreviousGlobalX = this.mGlobalX;
		this.mGlobalX = value;
		return value;
	}
	,get_globalY: function() {
		return this.mGlobalY;
	}
	,set_globalY: function(value) {
		if(this.mGlobalY != this.mGlobalY) this.mPreviousGlobalY = value; else this.mPreviousGlobalY = this.mGlobalY;
		this.mGlobalY = value;
		return value;
	}
	,get_tapCount: function() {
		return this.mTapCount;
	}
	,set_tapCount: function(value) {
		this.mTapCount = value;
		return value;
	}
	,get_phase: function() {
		return this.mPhase;
	}
	,set_phase: function(value) {
		this.mPhase = value;
		return value;
	}
	,get_target: function() {
		return this.mTarget;
	}
	,set_target: function(value) {
		if(this.mTarget != value) {
			this.mTarget = value;
			this.updateBubbleChain();
		}
		return value;
	}
	,get_timestamp: function() {
		return this.mTimestamp;
	}
	,set_timestamp: function(value) {
		this.mTimestamp = value;
		return value;
	}
	,get_pressure: function() {
		return this.mPressure;
	}
	,set_pressure: function(value) {
		this.mPressure = value;
		return value;
	}
	,get_width: function() {
		return this.mWidth;
	}
	,set_width: function(value) {
		this.mWidth = value;
		return value;
	}
	,get_height: function() {
		return this.mHeight;
	}
	,set_height: function(value) {
		this.mHeight = value;
		return value;
	}
	,dispatchEvent: function(event) {
		if(this.mTarget != null) event.dispatch(this.mBubbleChain);
	}
	,get_bubbleChain: function() {
		var this1 = this.mBubbleChain;
		var a;
		var this2;
		var this3;
		this3 = new openfl.VectorData();
		var this4;
		this4 = new Array(0);
		this3.data = this4;
		this3.length = 0;
		this3.fixed = false;
		this2 = this3;
		a = this2;
		var vectorData = new openfl.VectorData();
		if(a != null) vectorData.length = this1.length + a.length; else vectorData.length = this1.length;
		vectorData.fixed = false;
		var this5;
		this5 = new Array(vectorData.length);
		vectorData.data = this5;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
		if(a != null) haxe.ds._Vector.Vector_Impl_.blit(a.data,0,vectorData.data,this1.length,a.length);
		return vectorData;
	}
	,__class__: starling.events.Touch
	,__properties__: {get_bubbleChain:"get_bubbleChain",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_pressure:"set_pressure",get_pressure:"get_pressure",set_timestamp:"set_timestamp",get_timestamp:"get_timestamp",set_target:"set_target",get_target:"get_target",set_phase:"set_phase",get_phase:"get_phase",set_tapCount:"set_tapCount",get_tapCount:"get_tapCount",set_globalY:"set_globalY",get_globalY:"get_globalY",set_globalX:"set_globalX",get_globalX:"get_globalX",get_previousGlobalY:"get_previousGlobalY",get_previousGlobalX:"get_previousGlobalX",get_id:"get_id"}
};
starling.events.TouchEvent = function(type,touches,shiftKey,ctrlKey,bubbles) {
	if(bubbles == null) bubbles = true;
	if(ctrlKey == null) ctrlKey = false;
	if(shiftKey == null) shiftKey = false;
	starling.events.Event.call(this,type,bubbles,touches);
	this.mShiftKey = shiftKey;
	this.mCtrlKey = ctrlKey;
	this.mTimestamp = -1.0;
	this.mVisitedObjects = new Array();
	var numTouches = touches.length;
	var _g = 0;
	while(_g < numTouches) {
		var i = _g++;
		if(touches.data[i].get_timestamp() > this.mTimestamp) this.mTimestamp = touches.data[i].get_timestamp();
	}
};
$hxClasses["starling.events.TouchEvent"] = starling.events.TouchEvent;
starling.events.TouchEvent.__name__ = ["starling","events","TouchEvent"];
starling.events.TouchEvent.__super__ = starling.events.Event;
starling.events.TouchEvent.prototype = $extend(starling.events.Event.prototype,{
	mShiftKey: null
	,mCtrlKey: null
	,mTimestamp: null
	,mVisitedObjects: null
	,timestamp: null
	,touches: null
	,shiftKey: null
	,ctrlKey: null
	,getTouches: function(target,phase,result) {
		if(result == null) {
			var this1;
			this1 = new openfl.VectorData();
			var this2;
			this2 = new Array(0);
			this1.data = this2;
			this1.length = 0;
			this1.fixed = false;
			result = this1;
		}
		var allTouches = this.get_data();
		var numTouches = allTouches.length;
		var _g = 0;
		while(_g < numTouches) {
			var i = _g++;
			var touch = allTouches.data[i];
			var correctTarget = touch.isTouching(target);
			var correctPhase = phase == null || phase == touch.get_phase();
			if(correctTarget && correctPhase) {
				var key = result.length;
				if(!result.fixed) {
					if(key >= result.length) result.length = key + 1;
					if(result.data.length < result.length) {
						var data;
						var this3;
						this3 = new Array(result.data.length + 10);
						data = this3;
						haxe.ds._Vector.Vector_Impl_.blit(result.data,0,data,0,result.data.length);
						result.data = data;
					}
				}
				result.data[key] = touch;
			}
		}
		return result;
	}
	,getTouch: function(target,phase,id) {
		if(id == null) id = -1;
		starling.events.TouchEvent.sTouches = this.getTouches(target,phase,starling.events.TouchEvent.sTouches);
		var numTouches = starling.events.TouchEvent.sTouches.length;
		if(numTouches > 0) {
			var touch = null;
			if(id < 0) touch = starling.events.TouchEvent.sTouches.data[0]; else {
				var _g = 0;
				while(_g < numTouches) {
					var i = _g++;
					if(starling.events.TouchEvent.sTouches.data[i].get_id() == id) {
						touch = starling.events.TouchEvent.sTouches.data[i];
						break;
					}
				}
			}
			var this1 = starling.events.TouchEvent.sTouches;
			if(!this1.fixed) {
				if(0 > this1.length) {
					var data;
					var this2;
					this2 = new Array(0);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,0)));
					this1.data = data;
				}
				this1.length = 0;
			}
			0;
			return touch;
		} else return null;
	}
	,interactsWith: function(target) {
		var result = false;
		starling.events.TouchEvent.sTouches = this.getTouches(target,null,starling.events.TouchEvent.sTouches);
		var _g1 = 0;
		var _g = starling.events.TouchEvent.sTouches.length;
		while(_g1 < _g) {
			var j = _g1++;
			var i = starling.events.TouchEvent.sTouches.length - 1 - j;
			if(starling.events.TouchEvent.sTouches.data[i].get_phase() != starling.events.TouchPhase.ENDED) {
				result = true;
				break;
			}
		}
		var this1 = starling.events.TouchEvent.sTouches;
		if(!this1.fixed) {
			if(0 > this1.length) {
				var data;
				var this2;
				this2 = new Array(0);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,0)));
				this1.data = data;
			}
			this1.length = 0;
		}
		0;
		return result;
	}
	,dispatch: function(chain) {
		if(chain != null && chain.length) {
			var chainLength;
			if(this.get_bubbles()) chainLength = chain.length; else chainLength = 1;
			var previousTarget = this.get_target();
			var eventDispatcher = chain.data[0];
			this.setTarget(eventDispatcher);
			var _g = 0;
			while(_g < chainLength) {
				var i = _g++;
				var chainElement = chain.data[i];
				if(HxOverrides.indexOf(this.mVisitedObjects,chainElement,0) == -1) {
					var stopPropagation = chainElement.invokeEvent(this);
					this.mVisitedObjects[this.mVisitedObjects.length] = chainElement;
					if(stopPropagation) break;
				}
			}
			this.setTarget(previousTarget);
		}
	}
	,get_timestamp: function() {
		return this.mTimestamp;
	}
	,get_touches: function() {
		return this.get_data().concat();
	}
	,get_shiftKey: function() {
		return this.mShiftKey;
	}
	,get_ctrlKey: function() {
		return this.mCtrlKey;
	}
	,__class__: starling.events.TouchEvent
	,__properties__: $extend(starling.events.Event.prototype.__properties__,{get_ctrlKey:"get_ctrlKey",get_shiftKey:"get_shiftKey",get_touches:"get_touches",get_timestamp:"get_timestamp"})
});
starling.events.TouchMarker = function() {
	starling.display.Sprite.call(this);
	this.mCenter = new openfl.geom.Point();
	this.mTexture = this.createTexture();
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var marker = new starling.display.Image(this.mTexture);
		marker.set_pivotX(this.mTexture.get_width() / 2);
		marker.set_pivotY(this.mTexture.get_height() / 2);
		marker.set_touchable(false);
		this.addChild(marker);
	}
};
$hxClasses["starling.events.TouchMarker"] = starling.events.TouchMarker;
starling.events.TouchMarker.__name__ = ["starling","events","TouchMarker"];
starling.events.TouchMarker.__super__ = starling.display.Sprite;
starling.events.TouchMarker.prototype = $extend(starling.display.Sprite.prototype,{
	mCenter: null
	,mTexture: null
	,realMarker: null
	,mockMarker: null
	,realX: null
	,realY: null
	,mockX: null
	,mockY: null
	,dispose: function() {
		this.mTexture.dispose();
		starling.display.Sprite.prototype.dispose.call(this);
	}
	,moveMarker: function(x,y,withCenter) {
		if(withCenter == null) withCenter = false;
		if(withCenter) {
			this.mCenter.x += x - this.get_realMarker().get_x();
			this.mCenter.y += y - this.get_realMarker().get_y();
		}
		this.get_realMarker().set_x(x);
		this.get_realMarker().set_y(y);
		this.get_mockMarker().set_x(2 * this.mCenter.x - x);
		this.get_mockMarker().set_y(2 * this.mCenter.y - y);
	}
	,moveCenter: function(x,y) {
		this.mCenter.x = x;
		this.mCenter.y = y;
		this.moveMarker(this.get_realX(),this.get_realY());
	}
	,createTexture: function() {
		var scale = starling.core.Starling.get_ContentScaleFactor();
		var radius = 12 * scale;
		var width = 32 * scale | 0;
		var height = 32 * scale | 0;
		var thickness = 1.5 * scale;
		var shape = new openfl.display.Shape();
		shape.get_graphics().lineStyle(thickness,0,0.3);
		shape.get_graphics().drawCircle(width / 2,height / 2,radius + thickness);
		shape.get_graphics().beginFill(16777215,0.4);
		shape.get_graphics().lineStyle(thickness,16777215);
		shape.get_graphics().drawCircle(width / 2,height / 2,radius);
		shape.get_graphics().endFill();
		var bmpData = new openfl.display.BitmapData(width,height,true,0);
		bmpData.draw(shape);
		return starling.textures.Texture.fromBitmapData(bmpData,false,false,scale);
	}
	,get_realMarker: function() {
		return this.getChildAt(0);
	}
	,get_mockMarker: function() {
		return this.getChildAt(1);
	}
	,get_realX: function() {
		return this.get_realMarker().get_x();
	}
	,get_realY: function() {
		return this.get_realMarker().get_y();
	}
	,get_mockX: function() {
		return this.get_mockMarker().get_x();
	}
	,get_mockY: function() {
		return this.get_mockMarker().get_y();
	}
	,__class__: starling.events.TouchMarker
	,__properties__: $extend(starling.display.Sprite.prototype.__properties__,{get_mockY:"get_mockY",get_mockX:"get_mockX",get_realY:"get_realY",get_realX:"get_realX",get_mockMarker:"get_mockMarker",get_realMarker:"get_realMarker"})
});
starling.events.TouchPhase = function() {
	throw new starling.errors.AbstractClassError();
};
$hxClasses["starling.events.TouchPhase"] = starling.events.TouchPhase;
starling.events.TouchPhase.__name__ = ["starling","events","TouchPhase"];
starling.events.TouchPhase.prototype = {
	__class__: starling.events.TouchPhase
};
starling.events.TouchProcessor = function(stage) {
	this.mCurrentTouches = (function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(0);
			this1.data = this2;
		}
		this1.length = 0;
		this1.fixed = false;
		$r = this1;
		return $r;
	}(this));
	this.mMultitapDistance = 25;
	this.mMultitapTime = 0.3;
	this.mCtrlDown = false;
	this.mShiftDown = false;
	this.mRoot = this.mStage = stage;
	this.mElapsedTime = 0.0;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.mQueue = this1;
	this.mLastTaps = new Array();
	var this3 = this.mCurrentTouches;
	if(!this3.fixed) {
		if(0 > this3.length) {
			var data;
			var this4;
			this4 = new Array(0);
			data = this4;
			haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,Std["int"](Math.min(this3.data.length,0)));
			this3.data = data;
		}
		this3.length = 0;
	}
	0;
	this.mStage.addEventListener(starling.events.KeyboardEvent.KEY_DOWN,$bind(this,this.onKey));
	this.mStage.addEventListener(starling.events.KeyboardEvent.KEY_UP,$bind(this,this.onKey));
	this.monitorInterruptions(true);
};
$hxClasses["starling.events.TouchProcessor"] = starling.events.TouchProcessor;
starling.events.TouchProcessor.__name__ = ["starling","events","TouchProcessor"];
starling.events.TouchProcessor.prototype = {
	mStage: null
	,mRoot: null
	,mElapsedTime: null
	,mTouchMarker: null
	,mLastTaps: null
	,mShiftDown: null
	,mCtrlDown: null
	,mMultitapTime: null
	,mMultitapDistance: null
	,mQueue: null
	,mCurrentTouches: null
	,stage: null
	,numCurrentTouches: null
	,dispose: function() {
		this.monitorInterruptions(false);
		this.mStage.removeEventListener(starling.events.KeyboardEvent.KEY_DOWN,$bind(this,this.onKey));
		this.mStage.removeEventListener(starling.events.KeyboardEvent.KEY_UP,$bind(this,this.onKey));
		if(this.mTouchMarker != null) this.mTouchMarker.dispose();
	}
	,advanceTime: function(passedTime) {
		var touch;
		this.mElapsedTime += passedTime;
		var this1 = starling.events.TouchProcessor.sUpdatedTouches;
		if(!this1.fixed) {
			if(0 > this1.length) {
				var data;
				var this2;
				this2 = new Array(0);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,0)));
				this1.data = data;
			}
			this1.length = 0;
		}
		0;
		var len = this.mQueue.length;
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			var j = len - 1 - i;
			var mQueueItem = this.mQueue.data[j];
			if(mQueueItem == null) continue;
			var _g1 = 0;
			var _g2 = this.mCurrentTouches;
			while(_g1 < _g2.length) {
				var touch1 = _g2.data[_g1];
				++_g1;
				if(touch1.get_phase() == starling.events.TouchPhase.BEGAN || touch1.get_phase() == starling.events.TouchPhase.MOVED) touch1.set_phase(starling.events.TouchPhase.STATIONARY);
			}
			while(this.mQueue.length > 0 && this.containsTouchWithID((function($this) {
				var $r;
				var this3 = starling.events.TouchProcessor.sUpdatedTouches;
				var value = new Array();
				{
					var _g11 = 0;
					var _g3 = this3.data.length;
					while(_g11 < _g3) {
						var i1 = _g11++;
						value.push(this3.data[i1]);
					}
				}
				$r = value;
				return $r;
			}(this)),mQueueItem[0]) == false) {
				var touchArgs;
				var this4 = this.mQueue;
				var value1 = null;
				if(!this4.fixed) {
					if(this4.length > 0) {
						this4.length--;
						value1 = this4.data[this4.length];
					}
				}
				touchArgs = value1;
				touch = this.createOrUpdateTouch(touchArgs[0],touchArgs[1],touchArgs[2],touchArgs[3],touchArgs[4],touchArgs[5],touchArgs[6]);
				var this5 = starling.events.TouchProcessor.sUpdatedTouches;
				var key = starling.events.TouchProcessor.sUpdatedTouches.length;
				if(!this5.fixed) {
					if(key >= this5.length) this5.length = key + 1;
					if(this5.data.length < this5.length) {
						var data1;
						var this6;
						this6 = new Array(this5.data.length + 10);
						data1 = this6;
						haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data1,0,this5.data.length);
						this5.data = data1;
					}
				}
				this5.data[key] = touch;
			}
			this.processTouches(starling.events.TouchProcessor.sUpdatedTouches,this.mShiftDown,this.mCtrlDown);
			var _g21 = 0;
			var _g12 = this.mCurrentTouches.length;
			while(_g21 < _g12) {
				var k = _g21++;
				var i2 = this.mCurrentTouches.length - k - 1;
				if(this.mCurrentTouches.data[i2].get_phase() == starling.events.TouchPhase.ENDED) {
					var this7 = this.mCurrentTouches;
					var pos = i2;
					var len1 = 1;
					if(pos < 0) pos += this7.length;
					if(pos + len1 > this7.length) len1 = this7.length - pos;
					if(len1 < 0) len1 = 0;
					var vectorData = new openfl.VectorData();
					vectorData.length = len1;
					vectorData.fixed = false;
					var this8;
					this8 = new Array(len1);
					vectorData.data = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,pos,vectorData.data,0,len1);
					if(len1 > 0) {
						this7.length -= len1;
						haxe.ds._Vector.Vector_Impl_.blit(this7.data,pos + len1,this7.data,pos,this7.length - pos);
					}
					vectorData;
				}
			}
			var this9;
			this9 = new openfl.VectorData();
			var this10;
			this10 = new Array(0);
			this9.data = this10;
			this9.length = 0;
			this9.fixed = false;
			starling.events.TouchProcessor.sUpdatedTouches = this9;
		}
		var this11;
		this11 = new openfl.VectorData();
		var this12;
		this12 = new Array(0);
		this11.data = this12;
		this11.length = 0;
		this11.fixed = false;
		this.mQueue = this11;
	}
	,processTouches: function(touches,shiftDown,ctrlDown) {
		var this1 = starling.events.TouchProcessor.sHoveringTouchData;
		if(!this1.fixed) {
			if(0 > this1.length) {
				var data;
				var this2;
				this2 = new Array(0);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,0)));
				this1.data = data;
			}
			this1.length = 0;
		}
		0;
		var touchEvent = new starling.events.TouchEvent(starling.events.TouchEvent.TOUCH,this.mCurrentTouches,shiftDown,ctrlDown);
		var touch;
		var _g = 0;
		while(_g < touches.length) {
			var touch1 = touches.data[_g];
			++_g;
			if(touch1.get_phase() == starling.events.TouchPhase.HOVER && touch1.get_target() != null) {
				var this3 = starling.events.TouchProcessor.sHoveringTouchData;
				var key = starling.events.TouchProcessor.sHoveringTouchData.length;
				var value = { touch : touch1, target : touch1.get_target(), bubbleChain : touch1.get_bubbleChain()};
				if(!this3.fixed) {
					if(key >= this3.length) this3.length = key + 1;
					if(this3.data.length < this3.length) {
						var data1;
						var this4;
						this4 = new Array(this3.data.length + 10);
						data1 = this4;
						haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
						this3.data = data1;
					}
				}
				this3.data[key] = value;
			}
			if(touch1.get_phase() == starling.events.TouchPhase.HOVER || touch1.get_phase() == starling.events.TouchPhase.BEGAN) {
				starling.events.TouchProcessor.sHelperPoint.setTo(touch1.get_globalX(),touch1.get_globalY());
				touch1.set_target(this.mRoot.hitTest(starling.events.TouchProcessor.sHelperPoint,true));
			}
		}
		var _g1 = 0;
		var _g11 = starling.events.TouchProcessor.sHoveringTouchData;
		while(_g1 < _g11.length) {
			var touchData = _g11.data[_g1];
			++_g1;
			var touch2 = touchData.touch;
			if(touch2 != touchData.target) touchEvent.dispatch(touchData.bubbleChain);
		}
		var _g2 = 0;
		while(_g2 < touches.length) {
			var touch3 = touches.data[_g2];
			++_g2;
			touch3.dispatchEvent(touchEvent);
		}
	}
	,enqueue: function(touchID,phase,globalX,globalY,pressure,width,height) {
		if(height == null) height = 1.0;
		if(width == null) width = 1.0;
		if(pressure == null) pressure = 1.0;
		var $arguments = [touchID,phase,globalX,globalY,pressure,width,height];
		var this1 = this.mQueue;
		if(!this1.fixed) {
			this1.length++;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,1,this1.data.length);
				this1.data = data;
			} else haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,this1.data,1,this1.length - 1);
			this1.data[0] = $arguments;
		}
		if(this.mCtrlDown && this.get_simulateMultitouch() && touchID == 0) {
			this.mTouchMarker.moveMarker(globalX,globalY,this.mShiftDown);
			var this3 = this.mQueue;
			var x = [1,phase,this.mTouchMarker.get_mockX(),this.mTouchMarker.get_mockY()];
			if(!this3.fixed) {
				this3.length++;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,1,this3.data.length);
					this3.data = data1;
				} else haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,this3.data,1,this3.length - 1);
				this3.data[0] = x;
			}
		}
	}
	,enqueueMouseLeftStage: function() {
		var mouse = this.getCurrentTouch(0);
		if(mouse == null || mouse.get_phase() != starling.events.TouchPhase.HOVER) return;
		var offset = 1;
		var exitX = mouse.get_globalX();
		var exitY = mouse.get_globalY();
		var distLeft = mouse.get_globalX();
		var distRight = this.mStage.get_stageWidth() - distLeft;
		var distTop = mouse.get_globalY();
		var distBottom = this.mStage.get_stageHeight() - distTop;
		var minDist = this.min([distLeft,distRight,distTop,distBottom]);
		if(minDist == distLeft) exitX = -offset; else if(minDist == distRight) exitX = this.mStage.get_stageWidth() + offset; else if(minDist == distTop) exitY = -offset; else exitY = this.mStage.get_stageHeight() + offset;
		this.enqueue(0,starling.events.TouchPhase.HOVER,exitX,exitY);
	}
	,min: function(value) {
		var minValue = Math.POSITIVE_INFINITY;
		var minIndex = 0;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(value[i] < minValue) {
				minValue = value[i];
				minIndex = i;
			}
		}
		return value[minIndex];
	}
	,createOrUpdateTouch: function(touchID,phase,globalX,globalY,pressure,width,height) {
		if(height == null) height = 1.0;
		if(width == null) width = 1.0;
		if(pressure == null) pressure = 1.0;
		var touch = this.getCurrentTouch(touchID);
		if(touch == null) {
			touch = new starling.events.Touch(touchID);
			this.addCurrentTouch(touch);
		}
		touch.set_globalX(globalX);
		touch.set_globalY(globalY);
		touch.set_phase(phase);
		touch.set_timestamp(this.mElapsedTime);
		touch.set_pressure(pressure);
		touch.set_width(width);
		touch.set_height(height);
		if(phase == starling.events.TouchPhase.BEGAN) this.updateTapCount(touch);
		return touch;
	}
	,updateTapCount: function(touch) {
		var nearbyTap = null;
		var minSqDist = this.mMultitapDistance * this.mMultitapDistance;
		var _g = 0;
		var _g1 = this.mLastTaps;
		while(_g < _g1.length) {
			var tap = _g1[_g];
			++_g;
			var sqDist = Math.pow(tap.get_globalX() - touch.get_globalX(),2) + Math.pow(tap.get_globalY() - touch.get_globalY(),2);
			if(sqDist <= minSqDist) {
				nearbyTap = tap;
				break;
			}
		}
		if(nearbyTap != null) {
			touch.set_tapCount(nearbyTap.get_tapCount() + 1);
			this.mLastTaps.splice(HxOverrides.indexOf(this.mLastTaps,nearbyTap,0),1);
		} else touch.set_tapCount(1);
		this.mLastTaps.push(touch.clone());
	}
	,addCurrentTouch: function(touch) {
		var _g1 = 0;
		var _g = this.mCurrentTouches.length;
		while(_g1 < _g) {
			var j = _g1++;
			var i = this.mCurrentTouches.length - j - 1;
			if(this.mCurrentTouches.data[i].get_id() == touch.get_id()) {
				var this1 = this.mCurrentTouches;
				var pos = i;
				var len = 1;
				if(pos < 0) pos += this1.length;
				if(pos + len > this1.length) len = this1.length - pos;
				if(len < 0) len = 0;
				var vectorData = new openfl.VectorData();
				vectorData.length = len;
				vectorData.fixed = false;
				var this2;
				this2 = new Array(len);
				vectorData.data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos,vectorData.data,0,len);
				if(len > 0) {
					this1.length -= len;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos + len,this1.data,pos,this1.length - pos);
				}
				vectorData;
			}
		}
		if(touch != null) {
			var this3 = this.mCurrentTouches;
			if(!this3.fixed) {
				this3.length++;
				if(this3.data.length < this3.length) {
					var data;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
					this3.data = data;
				}
				this3.data[this3.length - 1] = touch;
			}
			this3.length;
		}
	}
	,getCurrentTouch: function(touchID) {
		var _g = 0;
		var _g1 = this.mCurrentTouches;
		while(_g < _g1.length) {
			var touch = _g1.data[_g];
			++_g;
			if(touch.get_id() == touchID) return touch;
		}
		return null;
	}
	,containsTouchWithID: function(touches,touchID) {
		var _g = 0;
		while(_g < touches.length) {
			var touch = touches[_g];
			++_g;
			if(touch.get_id() == touchID) return true;
		}
		return false;
	}
	,get_simulateMultitouch: function() {
		return this.mTouchMarker != null;
	}
	,set_simulateMultitouch: function(value) {
		if(this.get_simulateMultitouch() == value) return value;
		if(value) {
			this.mTouchMarker = new starling.events.TouchMarker();
			this.mTouchMarker.set_visible(false);
			this.mStage.addChild(this.mTouchMarker);
		} else {
			this.mTouchMarker.removeFromParent(true);
			this.mTouchMarker = null;
		}
		return value;
	}
	,get_multitapTime: function() {
		return this.mMultitapTime;
	}
	,set_multitapTime: function(value) {
		this.mMultitapTime = value;
		return value;
	}
	,get_multitapDistance: function() {
		return this.mMultitapDistance;
	}
	,set_multitapDistance: function(value) {
		this.mMultitapDistance = value;
		return value;
	}
	,get_root: function() {
		return this.mRoot;
	}
	,set_root: function(value) {
		this.mRoot = value;
		return value;
	}
	,get_stage: function() {
		return this.mStage;
	}
	,get_numCurrentTouches: function() {
		return this.mCurrentTouches.length;
	}
	,onKey: function(event) {
		if((function($this) {
			var $r;
			var a = event.get_keyCode();
			$r = (function($this) {
				var $r;
				var $int = a;
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}($this)) == 17;
			return $r;
		}(this)) || (function($this) {
			var $r;
			var a1 = event.get_keyCode();
			$r = (function($this) {
				var $r;
				var int1 = a1;
				$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
				return $r;
			}($this)) == 15;
			return $r;
		}(this))) {
			var wasCtrlDown = this.mCtrlDown;
			this.mCtrlDown = event.get_type() == starling.events.KeyboardEvent.KEY_DOWN;
			if(this.get_simulateMultitouch() && wasCtrlDown != this.mCtrlDown) {
				this.mTouchMarker.set_visible(this.mCtrlDown);
				this.mTouchMarker.moveCenter(this.mStage.get_stageWidth() / 2,this.mStage.get_stageHeight() / 2);
				var mouseTouch = this.getCurrentTouch(0);
				var mockedTouch = this.getCurrentTouch(1);
				if(mouseTouch != null) this.mTouchMarker.moveMarker(mouseTouch.get_globalX(),mouseTouch.get_globalY());
				if(wasCtrlDown && mockedTouch != null && mockedTouch.get_phase() != starling.events.TouchPhase.ENDED) {
					var this1 = this.mQueue;
					var x = [1,starling.events.TouchPhase.ENDED,mockedTouch.get_globalX(),mockedTouch.get_globalY()];
					if(!this1.fixed) {
						this1.length++;
						if(this1.data.length < this1.length) {
							var data;
							var this2;
							this2 = new Array(this1.length + 10);
							data = this2;
							haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,1,this1.data.length);
							this1.data = data;
						} else haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,this1.data,1,this1.length - 1);
						this1.data[0] = x;
					}
				} else if(this.mCtrlDown && mouseTouch != null) {
					if(mouseTouch.get_phase() == starling.events.TouchPhase.HOVER || mouseTouch.get_phase() == starling.events.TouchPhase.ENDED) {
						var this3 = this.mQueue;
						var x1 = [1,starling.events.TouchPhase.HOVER,this.mTouchMarker.get_mockX(),this.mTouchMarker.get_mockY()];
						if(!this3.fixed) {
							this3.length++;
							if(this3.data.length < this3.length) {
								var data1;
								var this4;
								this4 = new Array(this3.length + 10);
								data1 = this4;
								haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,1,this3.data.length);
								this3.data = data1;
							} else haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,this3.data,1,this3.length - 1);
							this3.data[0] = x1;
						}
					} else {
						var this5 = this.mQueue;
						var x2 = [1,starling.events.TouchPhase.BEGAN,this.mTouchMarker.get_mockX(),this.mTouchMarker.get_mockY()];
						if(!this5.fixed) {
							this5.length++;
							if(this5.data.length < this5.length) {
								var data2;
								var this6;
								this6 = new Array(this5.length + 10);
								data2 = this6;
								haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,1,this5.data.length);
								this5.data = data2;
							} else haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,this5.data,1,this5.length - 1);
							this5.data[0] = x2;
						}
					}
				}
			}
		} else if((function($this) {
			var $r;
			var a2 = event.get_keyCode();
			$r = (function($this) {
				var $r;
				var int2 = a2;
				$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
				return $r;
			}($this)) == 16;
			return $r;
		}(this))) this.mShiftDown = event.get_type() == starling.events.KeyboardEvent.KEY_DOWN;
	}
	,monitorInterruptions: function(enable) {
		haxe.Log.trace("ONLY RUN WHEN PUBLISHING FOR AIR",{ fileName : "TouchProcessor.hx", lineNumber : 477, className : "starling.events.TouchProcessor", methodName : "monitorInterruptions"});
	}
	,onInterruption: function(event) {
		if(this.mCurrentTouches.length > 0) {
			var _g = 0;
			var _g1 = this.mCurrentTouches;
			while(_g < _g1.length) {
				var touch = _g1.data[_g];
				++_g;
				if(touch.get_phase() == starling.events.TouchPhase.BEGAN || touch.get_phase() == starling.events.TouchPhase.MOVED || touch.get_phase() == starling.events.TouchPhase.STATIONARY) touch.set_phase(starling.events.TouchPhase.ENDED);
			}
			this.processTouches(this.mCurrentTouches,this.mShiftDown,this.mCtrlDown);
		}
		var this1 = this.mCurrentTouches;
		if(!this1.fixed) {
			if(0 > this1.length) {
				var data;
				var this2;
				this2 = new Array(0);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,0)));
				this1.data = data;
			}
			this1.length = 0;
		}
		0;
		var this3;
		this3 = new openfl.VectorData();
		var this4;
		this4 = new Array(0);
		this3.data = this4;
		this3.length = 0;
		this3.fixed = false;
		this.mQueue = this3;
	}
	,__class__: starling.events.TouchProcessor
	,__properties__: {get_numCurrentTouches:"get_numCurrentTouches",get_stage:"get_stage",set_root:"set_root",get_root:"get_root",set_multitapDistance:"set_multitapDistance",get_multitapDistance:"get_multitapDistance",set_multitapTime:"set_multitapTime",get_multitapTime:"get_multitapTime",set_simulateMultitouch:"set_simulateMultitouch",get_simulateMultitouch:"get_simulateMultitouch"}
};
starling.filters = {};
starling.filters.FragmentFilter = function(numPasses,resolution) {
	if(resolution == null) resolution = 1.0;
	if(numPasses == null) numPasses = 1;
	this.mHelperRect2 = new openfl.geom.Rectangle();
	this.mHelperRect = new openfl.geom.Rectangle();
	this.mHelperMatrix3D = new openfl.geom.Matrix3D();
	this.mHelperMatrix = new openfl.geom.Matrix();
	this.mMvpConstantID = 0;
	this.mBaseTextureID = 0;
	this.mTexCoordsAtID = 1;
	this.mVertexPosAtID = 0;
	this.STD_FRAGMENT_SHADER = "tex oc, v0, fs0 <2d, clamp, linear, mipnone>";
	this.STD_VERTEX_SHADER = "m44 op, va0, vc0 \n" + "mov v0, va1      \n";
	this.PMA = true;
	this.MIN_TEXTURE_SIZE = 64;
	var name = Type.getClassName(Type.getClass(this));
	haxe.Log.trace("CHECK name = " + name,{ fileName : "FragmentFilter.hx", lineNumber : 150, className : "starling.filters.FragmentFilter", methodName : "new"});
	if(openfl.system.Capabilities.isDebugger && name == "starling.filters.FragmentFilter") throw new starling.errors.AbstractClassError();
	if(numPasses < 1) throw new openfl.errors.ArgumentError("At least one pass is required.");
	this.mNumPasses = numPasses;
	this.mMarginX = this.mMarginY = 0.0;
	this.mOffsetX = this.mOffsetY = 0;
	this.mResolution = resolution;
	this.mPassTextures = new Array();
	this.mMode = starling.filters.FragmentFilterMode.REPLACE;
	this.mVertexData = new starling.utils.VertexData(4);
	this.mVertexData.setTexCoords(0,0,0);
	this.mVertexData.setTexCoords(1,1,0);
	this.mVertexData.setTexCoords(2,0,1);
	this.mVertexData.setTexCoords(3,1,1);
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.mIndexData = this1;
	var this3 = this.mIndexData;
	if(!this3.fixed) {
		this3.length++;
		if(this3.data.length < this3.length) {
			var data;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data = this4;
			haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
			this3.data = data;
		}
		this3.data[this3.length - 1] = 0;
	}
	this3.length;
	var this5 = this.mIndexData;
	if(!this5.fixed) {
		this5.length++;
		if(this5.data.length < this5.length) {
			var data1;
			var this6;
			this6 = new Array(this5.data.length + 10);
			data1 = this6;
			haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data1,0,this5.data.length);
			this5.data = data1;
		}
		this5.data[this5.length - 1] = 1;
	}
	this5.length;
	var this7 = this.mIndexData;
	if(!this7.fixed) {
		this7.length++;
		if(this7.data.length < this7.length) {
			var data2;
			var this8;
			this8 = new Array(this7.data.length + 10);
			data2 = this8;
			haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data2,0,this7.data.length);
			this7.data = data2;
		}
		this7.data[this7.length - 1] = 2;
	}
	this7.length;
	var this9 = this.mIndexData;
	if(!this9.fixed) {
		this9.length++;
		if(this9.data.length < this9.length) {
			var data3;
			var this10;
			this10 = new Array(this9.data.length + 10);
			data3 = this10;
			haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data3,0,this9.data.length);
			this9.data = data3;
		}
		this9.data[this9.length - 1] = 1;
	}
	this9.length;
	var this11 = this.mIndexData;
	if(!this11.fixed) {
		this11.length++;
		if(this11.data.length < this11.length) {
			var data4;
			var this12;
			this12 = new Array(this11.data.length + 10);
			data4 = this12;
			haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data4,0,this11.data.length);
			this11.data = data4;
		}
		this11.data[this11.length - 1] = 3;
	}
	this11.length;
	var this13 = this.mIndexData;
	if(!this13.fixed) {
		this13.length++;
		if(this13.data.length < this13.length) {
			var data5;
			var this14;
			this14 = new Array(this13.data.length + 10);
			data5 = this14;
			haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data5,0,this13.data.length);
			this13.data = data5;
		}
		this13.data[this13.length - 1] = 4;
	}
	this13.length;
	this.mIndexData.fixed = true;
	if(starling.core.Starling.get_current().get_contextValid()) this.createPrograms();
	starling.core.Starling.get_current().get_stage3D().addEventListener(starling.events.Event.CONTEXT3D_CREATE,$bind(this,this.onContextCreated),false,0,true);
};
$hxClasses["starling.filters.FragmentFilter"] = starling.filters.FragmentFilter;
starling.filters.FragmentFilter.__name__ = ["starling","filters","FragmentFilter"];
starling.filters.FragmentFilter.prototype = {
	MIN_TEXTURE_SIZE: null
	,PMA: null
	,STD_VERTEX_SHADER: null
	,STD_FRAGMENT_SHADER: null
	,mVertexPosAtID: null
	,mTexCoordsAtID: null
	,mBaseTextureID: null
	,mMvpConstantID: null
	,mNumPasses: null
	,mPassTextures: null
	,mMode: null
	,mResolution: null
	,mMarginX: null
	,mMarginY: null
	,mOffsetX: null
	,mOffsetY: null
	,mVertexData: null
	,mVertexBuffer: null
	,mIndexData: null
	,mIndexBuffer: null
	,mCacheRequested: null
	,mCache: null
	,mHelperMatrix: null
	,mHelperMatrix3D: null
	,mHelperRect: null
	,mHelperRect2: null
	,isCached: null
	,dispose: function() {
		starling.core.Starling.get_current().get_stage3D().removeEventListener(starling.events.Event.CONTEXT3D_CREATE,$bind(this,this.onContextCreated));
		if(this.mVertexBuffer != null) this.mVertexBuffer.dispose();
		if(this.mIndexBuffer != null) this.mIndexBuffer.dispose();
		this.disposePassTextures();
		this.disposeCache();
	}
	,onContextCreated: function(event) {
		this.mVertexBuffer = null;
		this.mIndexBuffer = null;
		this.disposePassTextures();
		this.createPrograms();
		if(this.mCache != null) this.cache();
	}
	,render: function(object,support,parentAlpha) {
		if(this.get_mode() == starling.filters.FragmentFilterMode.ABOVE) object.render(support,parentAlpha);
		if(this.mCacheRequested) {
			this.mCacheRequested = false;
			this.mCache = this.renderPasses(object,support,1.0,true);
			this.disposePassTextures();
		}
		if(this.mCache != null) this.mCache.render(support,parentAlpha); else this.renderPasses(object,support,parentAlpha,false);
		if(this.get_mode() == starling.filters.FragmentFilterMode.BELOW) object.render(support,parentAlpha);
	}
	,renderPasses: function(object,support,parentAlpha,intoCache) {
		if(intoCache == null) intoCache = false;
		var passTexture;
		var cacheTexture = null;
		var context = starling.core.Starling.get_Context();
		var targetSpace = object.get_stage();
		var stage = starling.core.Starling.get_current().get_stage();
		var scale = starling.core.Starling.get_current().get_contentScaleFactor();
		var projMatrix = this.mHelperMatrix;
		var projMatrix3D = this.mHelperMatrix3D;
		var bounds = this.mHelperRect;
		var boundsPot = this.mHelperRect2;
		if(context == null) throw new starling.errors.MissingContextError();
		this.calculateBounds(object,targetSpace,this.mResolution * scale,!intoCache,bounds,boundsPot);
		if(bounds.isEmpty()) {
			this.disposePassTextures();
			if(intoCache) return new starling.display.QuadBatch(); else return null;
		}
		this.updateBuffers(context,boundsPot);
		this.updatePassTextures(boundsPot.width,boundsPot.height,this.mResolution * scale);
		support.finishQuadBatch();
		support.raiseDrawCount(this.mNumPasses);
		support.pushMatrix();
		support.pushMatrix3D();
		projMatrix.copyFrom(support.get_projectionMatrix());
		projMatrix3D.copyFrom(support.get_projectionMatrix3D());
		var previousRenderTarget = support.get_renderTarget();
		if(previousRenderTarget != null && !starling.utils.SystemUtil.get_supportsRelaxedTargetClearRequirement()) throw new openfl.errors.IllegalOperationError("To nest filters, you need at least Flash Player / AIR version 15.");
		if(intoCache) cacheTexture = starling.textures.Texture.empty(boundsPot.width,boundsPot.height,this.PMA,false,true,this.mResolution * scale);
		support.set_renderTarget(this.mPassTextures[0]);
		support.clear();
		support.set_blendMode(starling.display.BlendMode.NORMAL);
		support.setProjectionMatrix(bounds.x,bounds.y,boundsPot.width,boundsPot.height,stage.get_stageWidth(),stage.get_stageHeight(),stage.get_cameraPosition());
		object.render(support,parentAlpha);
		support.finishQuadBatch();
		starling.core.RenderSupport.setBlendFactors(this.PMA);
		support.loadIdentity();
		support.pushClipRect(bounds);
		context.setVertexBufferAt(this.mVertexPosAtID,this.mVertexBuffer,starling.utils.VertexData.POSITION_OFFSET,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
		context.setVertexBufferAt(this.mTexCoordsAtID,this.mVertexBuffer,starling.utils.VertexData.TEXCOORD_OFFSET,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
		var _g1 = 0;
		var _g = this.mNumPasses;
		while(_g1 < _g) {
			var i = _g1++;
			if(i < this.mNumPasses - 1) {
				support.set_renderTarget(this.getPassTexture(i + 1));
				support.clear();
			} else if(intoCache) {
				support.set_renderTarget(cacheTexture);
				support.clear();
			} else {
				support.set_projectionMatrix(projMatrix);
				support.set_projectionMatrix3D(projMatrix3D);
				support.set_renderTarget(previousRenderTarget);
				support.translateMatrix(this.mOffsetX,this.mOffsetY);
				support.set_blendMode(object.get_blendMode());
				support.applyBlendMode(this.PMA);
			}
			passTexture = this.getPassTexture(i);
			context.setProgramConstantsFromMatrix(openfl.display3D.Context3DProgramType.VERTEX,this.mMvpConstantID,support.get_mvpMatrix3D(),true);
			context.setTextureAt(this.mBaseTextureID,passTexture.get_base());
			this.activate(i,context,passTexture);
			context.drawTriangles(this.mIndexBuffer,0,2);
			this.deactivate(i,context,passTexture);
		}
		context.setVertexBufferAt(this.mVertexPosAtID,null);
		context.setVertexBufferAt(this.mTexCoordsAtID,null);
		context.setTextureAt(this.mBaseTextureID,null);
		support.popMatrix();
		support.popMatrix3D();
		support.popClipRect();
		if(intoCache) {
			support.set_renderTarget(previousRenderTarget);
			support.get_projectionMatrix().copyFrom(projMatrix);
			support.get_projectionMatrix3D().copyFrom(projMatrix3D);
			var quadBatch = new starling.display.QuadBatch();
			var image = new starling.display.Image(cacheTexture);
			object.getTransformationMatrix(targetSpace,starling.filters.FragmentFilter.sTransformationMatrix).invert();
			starling.utils.MatrixUtil.prependTranslation(starling.filters.FragmentFilter.sTransformationMatrix,bounds.x + this.mOffsetX,bounds.y + this.mOffsetY);
			quadBatch.addImage(image,1.0,starling.filters.FragmentFilter.sTransformationMatrix);
			return quadBatch;
		} else return null;
	}
	,updateBuffers: function(context,bounds) {
		this.mVertexData.setPosition(0,bounds.x,bounds.y);
		this.mVertexData.setPosition(1,bounds.get_right(),bounds.y);
		this.mVertexData.setPosition(2,bounds.x,bounds.get_bottom());
		this.mVertexData.setPosition(3,bounds.get_right(),bounds.get_bottom());
		if(this.mVertexBuffer == null) {
			this.mVertexBuffer = context.createVertexBuffer(4,starling.utils.VertexData.ELEMENTS_PER_VERTEX);
			this.mIndexBuffer = context.createIndexBuffer(6);
			this.mIndexBuffer.uploadFromVector(this.mIndexData,0,6);
		}
		this.mVertexBuffer.uploadFromVector(this.mVertexData.get_rawData(),0,4);
	}
	,updatePassTextures: function(width,height,scale) {
		var numPassTextures;
		if(this.mNumPasses > 1) numPassTextures = 2; else numPassTextures = 1;
		var needsUpdate = this.mPassTextures.length != numPassTextures || Math.abs(this.mPassTextures[0].get_nativeWidth() - width * scale) > 0.1 || Math.abs(this.mPassTextures[0].get_nativeHeight() - height * scale) > 0.1;
		if(needsUpdate) {
			this.disposePassTextures();
			var _g = 0;
			while(_g < numPassTextures) {
				var i = _g++;
				this.mPassTextures[i] = starling.textures.Texture.empty(width,height,this.PMA,false,true,scale);
			}
		}
	}
	,getPassTexture: function(pass) {
		return this.mPassTextures[pass % 2];
	}
	,calculateBounds: function(object,targetSpace,scale,intersectWithStage,resultRect,resultPotRect) {
		var stage;
		var marginX = this.mMarginX;
		var marginY = this.mMarginY;
		if(js.Boot.__instanceof(targetSpace,starling.display.Stage)) {
			stage = targetSpace;
			if(object == stage || object == object.get_root()) {
				marginX = marginY = 0;
				resultRect.setTo(0,0,stage.get_stageWidth(),stage.get_stageHeight());
			} else object.getBounds(stage,resultRect);
			if(intersectWithStage) {
				starling.filters.FragmentFilter.sStageBounds.setTo(0,0,stage.get_stageWidth(),stage.get_stageHeight());
				starling.utils.RectangleUtil.intersect(resultRect,starling.filters.FragmentFilter.sStageBounds,resultRect);
			}
		} else object.getBounds(targetSpace,resultRect);
		if(!resultRect.isEmpty()) {
			resultRect.inflate(marginX,marginY);
			var minSize = this.MIN_TEXTURE_SIZE / scale | 0;
			var minWidth;
			if(resultRect.width > minSize) minWidth = resultRect.width; else minWidth = minSize;
			var minHeight;
			if(resultRect.height > minSize) minHeight = resultRect.height; else minHeight = minSize;
			resultPotRect.setTo(resultRect.x,resultRect.y,starling.utils.StarlingUtils.getNextPowerOfTwo(minWidth * scale) / scale,starling.utils.StarlingUtils.getNextPowerOfTwo(minHeight * scale) / scale);
		}
	}
	,disposePassTextures: function() {
		var _g = 0;
		var _g1 = this.mPassTextures;
		while(_g < _g1.length) {
			var texture = _g1[_g];
			++_g;
			texture.dispose();
		}
		this.mPassTextures = new Array();
	}
	,disposeCache: function() {
		if(this.mCache != null) {
			if(this.mCache.get_texture() != null) this.mCache.get_texture().dispose();
			this.mCache.dispose();
			this.mCache = null;
		}
	}
	,createPrograms: function() {
		throw new openfl.errors.Error("Method has to be implemented in subclass!");
	}
	,activate: function(pass,context,texture) {
		throw new openfl.errors.Error("Method has to be implemented in subclass!");
	}
	,deactivate: function(pass,context,texture) {
	}
	,assembleAgal: function(fragmentShader,vertexShader) {
		if(fragmentShader == null) fragmentShader = this.STD_FRAGMENT_SHADER;
		if(vertexShader == null) vertexShader = this.STD_VERTEX_SHADER;
		return starling.core.RenderSupport.assembleAgal(vertexShader,fragmentShader);
	}
	,cache: function() {
		this.mCacheRequested = true;
		this.disposeCache();
	}
	,clearCache: function() {
		this.mCacheRequested = false;
		this.disposeCache();
	}
	,compile: function(object) {
		if(this.mCache != null) return this.mCache; else {
			var support;
			var stage = object.get_stage();
			var quadBatch;
			support = new starling.core.RenderSupport();
			object.getTransformationMatrix(stage,support.get_modelViewMatrix());
			quadBatch = this.renderPasses(object,support,1.0,true);
			support.dispose();
			return quadBatch;
		}
	}
	,get_isCached: function() {
		return this.mCache != null || this.mCacheRequested;
	}
	,get_resolution: function() {
		return this.mResolution;
	}
	,set_resolution: function(value) {
		if(value <= 0) throw new openfl.errors.ArgumentError("Resolution must be > 0"); else this.mResolution = value;
		return value;
	}
	,get_mode: function() {
		return this.mMode;
	}
	,set_mode: function(value) {
		this.mMode = value;
		return value;
	}
	,get_offsetX: function() {
		return this.mOffsetX;
	}
	,set_offsetX: function(value) {
		this.mOffsetX = value;
		return value;
	}
	,get_offsetY: function() {
		return this.mOffsetY;
	}
	,set_offsetY: function(value) {
		this.mOffsetY = value;
		return value;
	}
	,get_marginX: function() {
		return this.mMarginX;
	}
	,set_marginX: function(value) {
		this.mMarginX = value;
		return value;
	}
	,get_marginY: function() {
		return this.mMarginY;
	}
	,set_marginY: function(value) {
		this.mMarginY = value;
		return value;
	}
	,set_numPasses: function(value) {
		this.mNumPasses = value;
		return value;
	}
	,get_numPasses: function() {
		return this.mNumPasses;
	}
	,get_vertexPosAtID: function() {
		return this.mVertexPosAtID;
	}
	,set_vertexPosAtID: function(value) {
		this.mVertexPosAtID = value;
		return value;
	}
	,get_texCoordsAtID: function() {
		return this.mTexCoordsAtID;
	}
	,set_texCoordsAtID: function(value) {
		this.mTexCoordsAtID = value;
		return value;
	}
	,get_baseTextureID: function() {
		return this.mBaseTextureID;
	}
	,set_baseTextureID: function(value) {
		this.mBaseTextureID = value;
		return value;
	}
	,get_mvpConstantID: function() {
		return this.mMvpConstantID;
	}
	,set_mvpConstantID: function(value) {
		this.mMvpConstantID = value;
		return value;
	}
	,__class__: starling.filters.FragmentFilter
	,__properties__: {set_mvpConstantID:"set_mvpConstantID",get_mvpConstantID:"get_mvpConstantID",set_baseTextureID:"set_baseTextureID",get_baseTextureID:"get_baseTextureID",set_texCoordsAtID:"set_texCoordsAtID",get_texCoordsAtID:"get_texCoordsAtID",set_vertexPosAtID:"set_vertexPosAtID",get_vertexPosAtID:"get_vertexPosAtID",set_numPasses:"set_numPasses",get_numPasses:"get_numPasses",set_marginY:"set_marginY",get_marginY:"get_marginY",set_marginX:"set_marginX",get_marginX:"get_marginX",set_offsetY:"set_offsetY",get_offsetY:"get_offsetY",set_offsetX:"set_offsetX",get_offsetX:"get_offsetX",set_mode:"set_mode",get_mode:"get_mode",set_resolution:"set_resolution",get_resolution:"get_resolution",get_isCached:"get_isCached"}
};
starling.filters.FragmentFilterMode = function() {
	throw new starling.errors.AbstractClassError();
};
$hxClasses["starling.filters.FragmentFilterMode"] = starling.filters.FragmentFilterMode;
starling.filters.FragmentFilterMode.__name__ = ["starling","filters","FragmentFilterMode"];
starling.filters.FragmentFilterMode.prototype = {
	__class__: starling.filters.FragmentFilterMode
};
starling.text = {};
starling.text.BitmapChar = function(id,texture,xOffset,yOffset,xAdvance) {
	this.mCharID = id;
	this.mTexture = texture;
	this.mXOffset = xOffset;
	this.mYOffset = yOffset;
	this.mXAdvance = xAdvance;
	this.mKernings = null;
};
$hxClasses["starling.text.BitmapChar"] = starling.text.BitmapChar;
starling.text.BitmapChar.__name__ = ["starling","text","BitmapChar"];
starling.text.BitmapChar.prototype = {
	mTexture: null
	,mCharID: null
	,mXOffset: null
	,mYOffset: null
	,mXAdvance: null
	,mKernings: null
	,charID: null
	,xOffset: null
	,yOffset: null
	,xAdvance: null
	,texture: null
	,width: null
	,height: null
	,addKerning: function(charID,amount) {
		if(this.mKernings == null) this.mKernings = new haxe.ds.IntMap();
		this.mKernings.set(charID,amount);
		amount;
	}
	,getKerning: function(charID) {
		if(this.mKernings == null || this.mKernings.get(charID) == null) return 0.0; else return this.mKernings.get(charID);
	}
	,createImage: function() {
		return new starling.display.Image(this.mTexture);
	}
	,get_charID: function() {
		return this.mCharID;
	}
	,get_xOffset: function() {
		return this.mXOffset;
	}
	,get_yOffset: function() {
		return this.mYOffset;
	}
	,get_xAdvance: function() {
		return this.mXAdvance;
	}
	,get_texture: function() {
		return this.mTexture;
	}
	,get_width: function() {
		return this.mTexture.get_width();
	}
	,get_height: function() {
		return this.mTexture.get_height();
	}
	,__class__: starling.text.BitmapChar
	,__properties__: {get_height:"get_height",get_width:"get_width",get_texture:"get_texture",get_xAdvance:"get_xAdvance",get_yOffset:"get_yOffset",get_xOffset:"get_xOffset",get_charID:"get_charID"}
};
starling.text.BitmapFont = function(texture,fontXml) {
	this.mLineHeight = 0;
	if(texture == null && fontXml == null) {
		texture = starling.text.MiniBitmapFont.get_texture();
		fontXml = starling.text.MiniBitmapFont.get_xml();
	} else if(texture != null && fontXml == null) throw new openfl.errors.ArgumentError("fontXml cannot be null!");
	this.mName = "unknown";
	this.mLineHeight = this.mSize = this.mBaseline = 14;
	this.mOffsetX = this.mOffsetY = 0.0;
	this.mTexture = texture;
	this.mChars = new haxe.ds.IntMap();
	this.mHelperImage = new starling.display.Image(texture);
	this.parseFontXml(fontXml);
};
$hxClasses["starling.text.BitmapFont"] = starling.text.BitmapFont;
starling.text.BitmapFont.__name__ = ["starling","text","BitmapFont"];
starling.text.BitmapFont.prototype = {
	mTexture: null
	,mChars: null
	,mName: null
	,mSize: null
	,mLineHeight: null
	,mBaseline: null
	,mOffsetX: null
	,mOffsetY: null
	,mHelperImage: null
	,name: null
	,size: null
	,texture: null
	,dispose: function() {
		if(this.mTexture != null) this.mTexture.dispose();
	}
	,parseFontXml: function(fontXml) {
		var scale = this.mTexture.get_scale();
		var frame = this.mTexture.get_frame();
		var frameX;
		if(frame != null) frameX = frame.x; else frameX = 0;
		var frameY;
		if(frame != null) frameY = frame.y; else frameY = 0;
		var $it0 = fontXml.elementsNamed("font");
		while( $it0.hasNext() ) {
			var font = $it0.next();
			if(font.nodeType == Xml.Element) {
				var $it1 = font.elementsNamed("info");
				while( $it1.hasNext() ) {
					var info = $it1.next();
					if(info.nodeType == Xml.Element) {
						this.mName = info.get("face");
						this.mSize = Std.parseFloat(info.get("size")) / scale;
						if(info.get("smooth") == "0") this.set_smoothing(starling.textures.TextureSmoothing.NONE);
						if(this.mSize <= 0) {
							haxe.Log.trace("[Starling] Warning: invalid font size in '" + this.mName + "' font.",{ fileName : "BitmapFont.hx", lineNumber : 142, className : "starling.text.BitmapFont", methodName : "parseFontXml"});
							if(this.mSize == 0.0) this.mSize = 16.0; else this.mSize = this.mSize * -1.0;
						}
					}
				}
				var $it2 = font.elementsNamed("common");
				while( $it2.hasNext() ) {
					var common = $it2.next();
					if(common.nodeType == Xml.Element) {
						this.mLineHeight = Std.parseFloat(common.get("lineHeight")) / scale;
						this.mBaseline = Std.parseFloat(common.get("base")) / scale;
					}
				}
				var $it3 = font.elementsNamed("chars");
				while( $it3.hasNext() ) {
					var chars = $it3.next();
					if(chars.nodeType == Xml.Element) {
						var $it4 = chars.elementsNamed("char");
						while( $it4.hasNext() ) {
							var $char = $it4.next();
							if($char.nodeType == Xml.Element) {
								var id = Std.parseInt($char.get("id"));
								var xOffset = Std.parseFloat($char.get("xoffset")) / scale;
								var yOffset = Std.parseFloat($char.get("yoffset")) / scale;
								var xAdvance = Std.parseFloat($char.get("xadvance")) / scale;
								var region = new openfl.geom.Rectangle();
								region.x = Std.parseFloat($char.get("x")) / scale + frameX;
								region.y = Std.parseFloat($char.get("y")) / scale + frameY;
								region.width = Std.parseFloat($char.get("width")) / scale;
								region.height = Std.parseFloat($char.get("height")) / scale;
								var texture = starling.textures.Texture.fromTexture(this.mTexture,region);
								var bitmapChar = new starling.text.BitmapChar(id,texture,xOffset,yOffset,xAdvance);
								this.addChar(id,bitmapChar);
							}
						}
					}
				}
				var $it5 = font.elementsNamed("kernings");
				while( $it5.hasNext() ) {
					var kernings = $it5.next();
					if(kernings.nodeType == Xml.Element) {
						var $it6 = kernings.elementsNamed("kerning");
						while( $it6.hasNext() ) {
							var kerning = $it6.next();
							if(kerning.nodeType == Xml.Element) {
								var first = Std.parseInt(kerning.get("first"));
								var second = Std.parseInt(kerning.get("second"));
								var amount = Std.parseFloat(kerning.get("amount")) / scale;
								if(this.mChars.exists(second)) this.getChar(second).addKerning(first,amount);
							}
						}
					}
				}
			}
		}
	}
	,getChar: function(charID) {
		return this.mChars.get(charID);
	}
	,addChar: function(charID,bitmapChar) {
		this.mChars.set(charID,bitmapChar);
		bitmapChar;
	}
	,getCharIDs: function(result) {
		if(result == null) result = new Array();
		var keys = this.mChars.keys();
		while( keys.hasNext() ) {
			var k = keys.next();
			var key = k;
			result[result.length] = key;
		}
		return result;
	}
	,hasChars: function(text) {
		if(text == null) return true;
		var charID;
		var numChars = text.length;
		var _g = 0;
		while(_g < numChars) {
			var i = _g++;
			charID = HxOverrides.cca(text,i);
			if(charID != starling.text.BitmapFont.CHAR_SPACE && charID != starling.text.BitmapFont.CHAR_TAB && charID != starling.text.BitmapFont.CHAR_NEWLINE && charID != starling.text.BitmapFont.CHAR_CARRIAGE_RETURN && this.getChar(charID) == null) return false;
		}
		return true;
	}
	,createSprite: function(width,height,text,fontSize,color,hAlign,vAlign,autoScale,kerning) {
		if(kerning == null) kerning = true;
		if(autoScale == null) autoScale = true;
		if(color == null) color = 16777215;
		if(fontSize == null) fontSize = -1;
		if(hAlign == null) hAlign = starling.utils.HAlign.CENTER;
		if(vAlign == null) vAlign = starling.utils.VAlign.CENTER;
		var charLocations = this.arrangeChars(width,height,text,fontSize,hAlign,vAlign,autoScale,kerning);
		var numChars = charLocations.length;
		var sprite = new starling.display.Sprite();
		var _g = 0;
		while(_g < numChars) {
			var i = _g++;
			var charLocation = charLocations[i];
			var $char = charLocation["char"].createImage();
			$char.set_x(charLocation.x);
			$char.set_y(charLocation.y);
			$char.set_scaleX($char.set_scaleY(charLocation.scale));
			$char.set_color(color);
			sprite.addChild($char);
		}
		starling.text.CharLocation.rechargePool();
		return sprite;
	}
	,fillQuadBatch: function(quadBatch,width,height,text,fontSize,color,hAlign,vAlign,autoScale,kerning) {
		if(kerning == null) kerning = true;
		if(autoScale == null) autoScale = true;
		if(color == null) color = 16777215;
		if(fontSize == null) fontSize = -1;
		if(hAlign == null) hAlign = starling.utils.HAlign.CENTER;
		if(vAlign == null) vAlign = starling.utils.VAlign.CENTER;
		var charLocations = this.arrangeChars(width,height,text,fontSize,hAlign,vAlign,autoScale,kerning);
		var numChars = charLocations.length;
		this.mHelperImage.set_color(color);
		var _g = 0;
		while(_g < numChars) {
			var i = _g++;
			var charLocation = charLocations[i];
			this.mHelperImage.set_texture(charLocation["char"].get_texture());
			this.mHelperImage.readjustSize();
			this.mHelperImage.set_x(charLocation.x);
			this.mHelperImage.set_y(charLocation.y);
			this.mHelperImage.set_scaleX(this.mHelperImage.set_scaleY(charLocation.scale));
			quadBatch.addImage(this.mHelperImage);
		}
		starling.text.CharLocation.rechargePool();
	}
	,arrangeChars: function(width,height,text,fontSize,hAlign,vAlign,autoScale,kerning) {
		if(kerning == null) kerning = true;
		if(autoScale == null) autoScale = true;
		if(fontSize == null) fontSize = -1;
		if(hAlign == null) hAlign = starling.utils.HAlign.CENTER;
		if(vAlign == null) vAlign = starling.utils.VAlign.CENTER;
		if(text == null || text.length == 0) {
			var this1 = starling.text.CharLocation.vectorFromPool();
			var value = new Array();
			var _g1 = 0;
			var _g = this1.data.length;
			while(_g1 < _g) {
				var i = _g1++;
				value.push(this1.data[i]);
			}
			return value;
		}
		if(fontSize < 0) fontSize *= -this.mSize;
		var finished = false;
		var charLocation;
		var numChars;
		var containerWidth = 0;
		var containerHeight = 0;
		var scale = 1;
		var currentX = 0;
		var currentY = 0;
		while(!finished) {
			var this2 = starling.text.BitmapFont.sLines;
			if(!this2.fixed) {
				if(0 > this2.length) {
					var data;
					var this3;
					this3 = new Array(0);
					data = this3;
					haxe.ds._Vector.Vector_Impl_.blit(this2.data,0,data,0,Std["int"](Math.min(this2.data.length,0)));
					this2.data = data;
				}
				this2.length = 0;
			}
			0;
			scale = fontSize / this.mSize;
			containerWidth = width / scale;
			containerHeight = height / scale;
			if(this.mLineHeight <= containerHeight) {
				var lastWhiteSpace = -1;
				var lastCharID = -1;
				currentX = 0;
				currentY = 0;
				var currentLine;
				var this4 = starling.text.CharLocation.vectorFromPool();
				var value1 = new Array();
				var _g11 = 0;
				var _g2 = this4.data.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					value1.push(this4.data[i1]);
				}
				currentLine = value1;
				numChars = text.length;
				var _g3 = 0;
				while(_g3 < numChars) {
					var i2 = _g3++;
					var lineFull = false;
					var charID = HxOverrides.cca(text,i2);
					var $char = this.getChar(charID);
					if(charID == starling.text.BitmapFont.CHAR_NEWLINE || charID == starling.text.BitmapFont.CHAR_CARRIAGE_RETURN) lineFull = true; else if($char == null) haxe.Log.trace("[Starling] Missing character: " + charID,{ fileName : "BitmapFont.hx", lineNumber : 353, className : "starling.text.BitmapFont", methodName : "arrangeChars"}); else {
						if(charID == starling.text.BitmapFont.CHAR_SPACE || charID == starling.text.BitmapFont.CHAR_TAB) lastWhiteSpace = i2;
						if(kerning) currentX += $char.getKerning(lastCharID);
						charLocation = starling.text.CharLocation.instanceFromPool($char);
						charLocation.x = currentX + $char.get_xOffset();
						charLocation.y = currentY + $char.get_yOffset();
						currentLine[currentLine.length] = charLocation;
						currentX += $char.get_xAdvance();
						lastCharID = charID;
						if(charLocation.x + $char.get_width() > containerWidth) {
							if(autoScale && lastWhiteSpace == -1) break;
							var numCharsToRemove;
							if(lastWhiteSpace == -1) numCharsToRemove = 1; else numCharsToRemove = i2 - lastWhiteSpace;
							var removeIndex = currentLine.length - numCharsToRemove;
							currentLine.splice(removeIndex,numCharsToRemove);
							if(currentLine.length == 0) break;
							lineFull = true;
						}
					}
					if(i2 == numChars - 1) {
						var this5 = starling.text.BitmapFont.sLines;
						var key = starling.text.BitmapFont.sLines.length;
						if(!this5.fixed) {
							if(key >= this5.length) this5.length = key + 1;
							if(this5.data.length < this5.length) {
								var data1;
								var this6;
								this6 = new Array(this5.data.length + 10);
								data1 = this6;
								haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data1,0,this5.data.length);
								this5.data = data1;
							}
						}
						this5.data[key] = currentLine;
						finished = true;
					} else if(lineFull) {
						var this7 = starling.text.BitmapFont.sLines;
						var key1 = starling.text.BitmapFont.sLines.length;
						if(!this7.fixed) {
							if(key1 >= this7.length) this7.length = key1 + 1;
							if(this7.data.length < this7.length) {
								var data2;
								var this8;
								this8 = new Array(this7.data.length + 10);
								data2 = this8;
								haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data2,0,this7.data.length);
								this7.data = data2;
							}
						}
						this7.data[key1] = currentLine;
						if(lastWhiteSpace == i2) currentLine.pop();
						if(currentY + 2 * this.mLineHeight <= containerHeight) {
							var this9 = starling.text.CharLocation.vectorFromPool();
							var value2 = new Array();
							var _g12 = 0;
							var _g4 = this9.data.length;
							while(_g12 < _g4) {
								var i3 = _g12++;
								value2.push(this9.data[i3]);
							}
							currentLine = value2;
							currentX = 0;
							currentY += this.mLineHeight;
							lastWhiteSpace = -1;
							lastCharID = -1;
						} else break;
					}
				}
			}
			if(autoScale && !finished && fontSize > 3) fontSize -= 1; else finished = true;
		}
		var finalLocations;
		var this10 = starling.text.CharLocation.vectorFromPool();
		var value3 = new Array();
		var _g13 = 0;
		var _g5 = this10.data.length;
		while(_g13 < _g5) {
			var i4 = _g13++;
			value3.push(this10.data[i4]);
		}
		finalLocations = value3;
		var numLines = starling.text.BitmapFont.sLines.length;
		var bottom = currentY + this.mLineHeight;
		var yOffset = 0;
		if(vAlign == starling.utils.VAlign.BOTTOM) yOffset = containerHeight - bottom | 0; else if(vAlign == starling.utils.VAlign.CENTER) yOffset = (containerHeight - bottom) / 2 | 0;
		var _g6 = 0;
		while(_g6 < numLines) {
			var lineID = _g6++;
			var line = starling.text.BitmapFont.sLines.data[lineID];
			numChars = line.length;
			if(numChars == 0) continue;
			var xOffset = 0;
			var lastLocation = line[line.length - 1];
			var right = lastLocation.x - lastLocation["char"].get_xOffset() + lastLocation["char"].get_xAdvance();
			if(hAlign == starling.utils.HAlign.RIGHT) xOffset = containerWidth - right | 0; else if(hAlign == starling.utils.HAlign.CENTER) xOffset = (containerWidth - right) / 2 | 0;
			var _g14 = 0;
			while(_g14 < numChars) {
				var c = _g14++;
				charLocation = line[c];
				charLocation.x = scale * (charLocation.x + xOffset + this.mOffsetX);
				charLocation.y = scale * (charLocation.y + yOffset + this.mOffsetY);
				charLocation.scale = scale;
				if(charLocation["char"].get_width() > 0 && charLocation["char"].get_height() > 0) finalLocations[finalLocations.length] = charLocation;
			}
		}
		return finalLocations;
	}
	,get_name: function() {
		return this.mName;
	}
	,get_size: function() {
		return this.mSize;
	}
	,get_lineHeight: function() {
		return this.mLineHeight;
	}
	,set_lineHeight: function(value) {
		this.mLineHeight = value;
		return value;
	}
	,get_smoothing: function() {
		return this.mHelperImage.get_smoothing();
	}
	,set_smoothing: function(value) {
		this.mHelperImage.set_smoothing(value);
		return value;
	}
	,get_baseline: function() {
		return this.mBaseline;
	}
	,set_baseline: function(value) {
		this.mBaseline = value;
		return value;
	}
	,get_offsetX: function() {
		return this.mOffsetX;
	}
	,set_offsetX: function(value) {
		this.mOffsetX = value;
		return value;
	}
	,get_offsetY: function() {
		return this.mOffsetY;
	}
	,set_offsetY: function(value) {
		this.mOffsetY = value;
		return value;
	}
	,get_texture: function() {
		return this.mTexture;
	}
	,__class__: starling.text.BitmapFont
	,__properties__: {get_texture:"get_texture",set_offsetY:"set_offsetY",get_offsetY:"get_offsetY",set_offsetX:"set_offsetX",get_offsetX:"get_offsetX",set_baseline:"set_baseline",get_baseline:"get_baseline",set_smoothing:"set_smoothing",get_smoothing:"get_smoothing",set_lineHeight:"set_lineHeight",get_lineHeight:"get_lineHeight",get_size:"get_size",get_name:"get_name"}
};
starling.text.CharLocation = function($char) {
	this.reset($char);
};
$hxClasses["starling.text.CharLocation"] = starling.text.CharLocation;
starling.text.CharLocation.__name__ = ["starling","text","CharLocation"];
starling.text.CharLocation.instanceFromPool = function($char) {
	var instance;
	if(starling.text.CharLocation.sInstancePool.length > 0) instance = starling.text.CharLocation.sInstancePool.pop(); else instance = new starling.text.CharLocation($char);
	instance.reset($char);
	starling.text.CharLocation.sInstanceLoan[starling.text.CharLocation.sInstanceLoan.length] = instance;
	return instance;
};
starling.text.CharLocation.vectorFromPool = function() {
	var vector;
	if(starling.text.CharLocation.sVectorPool.length > 0) vector = starling.text.CharLocation.sVectorPool.pop(); else {
		var value = [];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(value.length);
		vec = this1;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = value[i];
		}
		vectorData.data = vec;
		vector = vectorData;
	}
	if(!vector.fixed) {
		if(0 > vector.length) {
			var data;
			var this2;
			this2 = new Array(0);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(vector.data,0,data,0,Std["int"](Math.min(vector.data.length,0)));
			vector.data = data;
		}
		vector.length = 0;
	}
	0;
	starling.text.CharLocation.sVectorLoan[starling.text.CharLocation.sVectorLoan.length] = vector;
	return vector;
};
starling.text.CharLocation.rechargePool = function() {
	var instance;
	var vector;
	while(starling.text.CharLocation.sInstanceLoan.length > 0) {
		instance = starling.text.CharLocation.sInstanceLoan.pop();
		instance["char"] = null;
		starling.text.CharLocation.sInstancePool[starling.text.CharLocation.sInstancePool.length] = instance;
	}
	while(starling.text.CharLocation.sVectorLoan.length > 0) {
		vector = starling.text.CharLocation.sVectorLoan.pop();
		if(!vector.fixed) {
			if(0 > vector.length) {
				var data;
				var this1;
				this1 = new Array(0);
				data = this1;
				haxe.ds._Vector.Vector_Impl_.blit(vector.data,0,data,0,Std["int"](Math.min(vector.data.length,0)));
				vector.data = data;
			}
			vector.length = 0;
		}
		0;
		starling.text.CharLocation.sVectorPool[starling.text.CharLocation.sVectorPool.length] = vector;
	}
};
starling.text.CharLocation.prototype = {
	'char': null
	,scale: null
	,x: null
	,y: null
	,reset: function($char) {
		this["char"] = $char;
		return this;
	}
	,__class__: starling.text.CharLocation
};
starling.text.MiniBitmapFont = function() { };
$hxClasses["starling.text.MiniBitmapFont"] = starling.text.MiniBitmapFont;
starling.text.MiniBitmapFont.__name__ = ["starling","text","MiniBitmapFont"];
starling.text.MiniBitmapFont.__properties__ = {get_xml:"get_xml",get_texture:"get_texture"}
starling.text.MiniBitmapFont.texture = null;
starling.text.MiniBitmapFont.xml = null;
starling.text.MiniBitmapFont.get_texture = function() {
	var bitmapData = starling.text.MiniBitmapFont.getBitmapData();
	var texture = starling.textures.Texture.fromBitmapData(bitmapData,false);
	bitmapData.dispose();
	bitmapData = null;
	texture.get_root().set_onRestore(function() {
		bitmapData = starling.text.MiniBitmapFont.getBitmapData();
		texture.get_root().uploadBitmapData(bitmapData);
		bitmapData.dispose();
		bitmapData = null;
	});
	return texture;
};
starling.text.MiniBitmapFont.getBitmapData = function() {
	var bmpData = new openfl.display.BitmapData(starling.text.MiniBitmapFont.BITMAP_WIDTH,starling.text.MiniBitmapFont.BITMAP_HEIGHT);
	var bmpBytes = new lime.utils.ByteArray();
	var numBytes = starling.text.MiniBitmapFont.BITMAP_DATA.length;
	var _g = 0;
	while(_g < numBytes) {
		var i = _g++;
		bmpBytes.writeUnsignedInt(starling.text.MiniBitmapFont.BITMAP_DATA[i]);
	}
	bmpBytes.uncompress();
	bmpData.setPixels(new openfl.geom.Rectangle(0,0,starling.text.MiniBitmapFont.BITMAP_WIDTH,starling.text.MiniBitmapFont.BITMAP_HEIGHT),bmpBytes);
	bmpBytes.clear();
	return bmpData;
};
starling.text.MiniBitmapFont.get_xml = function() {
	return starling.text.MiniBitmapFont.XML_DATA;
};
starling.text.TextField = function(width,height,text,fontName,fontSize,color,bold) {
	if(bold == null) bold = false;
	if(color == null) color = 0;
	if(fontSize == null) fontSize = 12;
	if(fontName == null) fontName = "Verdana";
	starling.display.DisplayObjectContainer.call(this);
	if(text != null) this.mText = text; else this.mText = "";
	this.mFontSize = fontSize;
	this.mColor = color;
	this.mHAlign = starling.utils.HAlign.CENTER;
	this.mVAlign = starling.utils.VAlign.CENTER;
	this.mBorder = null;
	this.mKerning = true;
	this.mBold = bold;
	this.mAutoSize = starling.text.TextFieldAutoSize.NONE;
	this.mHitArea = new openfl.geom.Rectangle(0,0,width,height);
	this.set_fontName(fontName.toLowerCase());
	this.addEventListener(starling.events.Event.FLATTEN,$bind(this,this.onFlatten));
};
$hxClasses["starling.text.TextField"] = starling.text.TextField;
starling.text.TextField.__name__ = ["starling","text","TextField"];
starling.text.TextField.__properties__ = {get_bitmapFonts:"get_bitmapFonts",set_defaultTextureFormat:"set_defaultTextureFormat",get_defaultTextureFormat:"get_defaultTextureFormat"}
starling.text.TextField.sDefaultTextureFormat = null;
starling.text.TextField.bitmapFonts = null;
starling.text.TextField.get_defaultTextureFormat = function() {
	if(starling.text.TextField.sDefaultTextureFormat == null) starling.text.TextField.sDefaultTextureFormat = openfl.display3D.Context3DTextureFormat.BGRA;
	return starling.text.TextField.sDefaultTextureFormat;
};
starling.text.TextField.set_defaultTextureFormat = function(value) {
	starling.text.TextField.sDefaultTextureFormat = value;
	return value;
};
starling.text.TextField.registerBitmapFont = function(bitmapFont,name) {
	if(name == null) name = bitmapFont.get_name();
	var this1 = starling.text.TextField.get_bitmapFonts();
	var k = name.toLowerCase();
	this1.set(k,bitmapFont);
	bitmapFont;
	return name;
};
starling.text.TextField.unregisterBitmapFont = function(name,dispose) {
	if(dispose == null) dispose = true;
	name = name.toLowerCase();
	if(dispose && (function($this) {
		var $r;
		var this1 = starling.text.TextField.get_bitmapFonts();
		$r = this1.get(name);
		return $r;
	}(this)) != null) ((function($this) {
		var $r;
		var this2 = starling.text.TextField.get_bitmapFonts();
		$r = this2.get(name);
		return $r;
	}(this))).dispose();
	var this3 = starling.text.TextField.get_bitmapFonts();
	this3.remove(name);
};
starling.text.TextField.getBitmapFont = function(name) {
	var this1 = starling.text.TextField.get_bitmapFonts();
	var key = name.toLowerCase();
	return this1.get(key);
};
starling.text.TextField.get_bitmapFonts = function() {
	var fonts;
	var this1 = starling.core.Starling.get_current().get_contextData();
	fonts = this1.get(starling.text.TextField.BITMAP_FONT_DATA_NAME);
	if(fonts == null) {
		fonts = new haxe.ds.StringMap();
		var this2 = starling.core.Starling.get_current().get_contextData();
		this2.set(starling.text.TextField.BITMAP_FONT_DATA_NAME,fonts);
		fonts;
	}
	return fonts;
};
starling.text.TextField.__super__ = starling.display.DisplayObjectContainer;
starling.text.TextField.prototype = $extend(starling.display.DisplayObjectContainer.prototype,{
	mFontSize: null
	,mColor: null
	,mText: null
	,mFontName: null
	,mHAlign: null
	,mVAlign: null
	,mBold: null
	,mItalic: null
	,mUnderline: null
	,mAutoScale: null
	,mAutoSize: null
	,mKerning: null
	,mNativeFilters: null
	,mRequiresRedraw: null
	,mIsRenderedText: null
	,mIsHtmlText: null
	,mTextBounds: null
	,mBatchable: null
	,mHitArea: null
	,mBorder: null
	,mImage: null
	,mQuadBatch: null
	,isHorizontalAutoSize: null
	,isVerticalAutoSize: null
	,textBounds: null
	,dispose: function() {
		this.removeEventListener(starling.events.Event.FLATTEN,$bind(this,this.onFlatten));
		if(this.mImage != null) this.mImage.get_texture().dispose();
		if(this.mQuadBatch != null) this.mQuadBatch.dispose();
		starling.display.DisplayObjectContainer.prototype.dispose.call(this);
	}
	,onFlatten: function() {
		if(this.mRequiresRedraw) this.redraw();
	}
	,render: function(support,parentAlpha) {
		if(this.mRequiresRedraw) this.redraw();
		starling.display.DisplayObjectContainer.prototype.render.call(this,support,parentAlpha);
	}
	,redraw: function() {
		if(this.mRequiresRedraw) {
			if(this.mIsRenderedText) this.createRenderedContents(); else this.createComposedContents();
			this.updateBorder();
			this.mRequiresRedraw = false;
		}
	}
	,createRenderedContents: function() {
		var _g = this;
		if(this.mQuadBatch != null) {
			this.mQuadBatch.removeFromParent(true);
			this.mQuadBatch = null;
		}
		if(this.mTextBounds == null) this.mTextBounds = new openfl.geom.Rectangle();
		var texture;
		var scale = starling.core.Starling.get_ContentScaleFactor();
		var bitmapData = this.renderText(scale,this.mTextBounds);
		var format = starling.text.TextField.sDefaultTextureFormat;
		var maxTextureSize = starling.textures.Texture.get_maxSize();
		var shrinkHelper = 0;
		while(bitmapData.width > maxTextureSize || bitmapData.height > maxTextureSize) {
			scale *= Math.min((maxTextureSize - shrinkHelper) / bitmapData.width,(maxTextureSize - shrinkHelper) / bitmapData.height);
			bitmapData.dispose();
			bitmapData = this.renderText(scale,this.mTextBounds);
			shrinkHelper += 1;
		}
		this.mHitArea.width = bitmapData.width / scale;
		this.mHitArea.height = bitmapData.height / scale;
		texture = starling.textures.Texture.fromBitmapData(bitmapData,false,false,scale,format);
		texture.get_root().set_onRestore(function() {
			if(_g.mTextBounds == null) _g.mTextBounds = new openfl.geom.Rectangle();
			bitmapData = _g.renderText(scale,_g.mTextBounds);
			texture.get_root().uploadBitmapData(_g.renderText(scale,_g.mTextBounds));
			bitmapData.dispose();
			bitmapData = null;
		});
		bitmapData.dispose();
		bitmapData = null;
		if(this.mImage == null) {
			this.mImage = new starling.display.Image(texture);
			this.mImage.set_touchable(false);
			this.addChild(this.mImage);
		} else {
			this.mImage.get_texture().dispose();
			this.mImage.set_texture(texture);
			this.mImage.readjustSize();
		}
	}
	,formatText: function(textField,textFormat) {
	}
	,renderText: function(scale,resultTextBounds) {
		var width = this.mHitArea.width * scale;
		var height = this.mHitArea.height * scale;
		var hAlign = this.mHAlign;
		var vAlign = this.mVAlign;
		if(this.get_isHorizontalAutoSize()) {
			width = Math.POSITIVE_INFINITY;
			hAlign = starling.utils.HAlign.LEFT;
		}
		if(this.get_isVerticalAutoSize()) {
			height = Math.POSITIVE_INFINITY;
			vAlign = starling.utils.VAlign.TOP;
		}
		var align = openfl.text.TextFormatAlign.CENTER;
		if(hAlign == starling.utils.HAlign.LEFT) align = openfl.text.TextFormatAlign.LEFT; else if(hAlign == starling.utils.HAlign.RIGHT) align = openfl.text.TextFormatAlign.RIGHT;
		var textFormat = new openfl.text.TextFormat(this.mFontName,this.mFontSize * scale,this.mColor,this.mBold,this.mItalic,this.mUnderline,null,null,align);
		textFormat.kerning = this.mKerning;
		starling.text.TextField.sNativeTextField.set_defaultTextFormat(textFormat);
		starling.text.TextField.sNativeTextField.set_width(width);
		starling.text.TextField.sNativeTextField.set_height(height);
		starling.text.TextField.sNativeTextField.antiAliasType = openfl.text.AntiAliasType.ADVANCED;
		starling.text.TextField.sNativeTextField.selectable = false;
		starling.text.TextField.sNativeTextField.multiline = true;
		starling.text.TextField.sNativeTextField.set_wordWrap(true);
		if(this.mIsHtmlText) starling.text.TextField.sNativeTextField.set_htmlText(this.mText); else starling.text.TextField.sNativeTextField.set_text(this.mText);
		starling.text.TextField.sNativeTextField.embedFonts = true;
		starling.text.TextField.sNativeTextField.set_filters(this.mNativeFilters);
		if(starling.text.TextField.sNativeTextField.get_textWidth() == 0.0 || starling.text.TextField.sNativeTextField.get_textHeight() == 0.0) starling.text.TextField.sNativeTextField.embedFonts = false;
		this.formatText(starling.text.TextField.sNativeTextField,textFormat);
		if(this.mAutoScale) this.autoScaleNativeTextField(starling.text.TextField.sNativeTextField);
		var textWidth = starling.text.TextField.sNativeTextField.get_textWidth();
		var textHeight = starling.text.TextField.sNativeTextField.get_textHeight();
		textHeight *= starling.text.TextField.sNativeTextField.get_numLines();
		if(this.get_isHorizontalAutoSize()) starling.text.TextField.sNativeTextField.set_width(width = Math.ceil(textWidth + 5));
		if(this.get_isVerticalAutoSize()) starling.text.TextField.sNativeTextField.set_height(height = Math.ceil(textHeight + 4));
		if(width < 1) width = 1.0;
		if(height < 1) height = 1.0;
		var textOffsetX = 0.0;
		if(hAlign == starling.utils.HAlign.LEFT) textOffsetX = 2; else if(hAlign == starling.utils.HAlign.CENTER) textOffsetX = (width - textWidth) / 2.0; else if(hAlign == starling.utils.HAlign.RIGHT) textOffsetX = width - textWidth - 2;
		var textOffsetY = 0.0;
		if(vAlign == starling.utils.VAlign.TOP) textOffsetY = 2; else if(vAlign == starling.utils.VAlign.CENTER) textOffsetY = (height - textHeight) / 2.0; else if(vAlign == starling.utils.VAlign.BOTTOM) textOffsetY = height - textHeight - 2;
		var filterOffset = this.calculateFilterOffset(starling.text.TextField.sNativeTextField,hAlign,vAlign);
		var bitmapData = new openfl.display.BitmapData(width | 0,height | 0,true,0);
		var drawMatrix = new openfl.geom.Matrix(1,0,0,1,filterOffset.x,filterOffset.y + textOffsetY - 2);
		var drawWithQualityFunc;
		if(Object.prototype.hasOwnProperty.call(bitmapData,"drawWithQuality")) drawWithQualityFunc = Reflect.getProperty(bitmapData,"drawWithQuality"); else drawWithQualityFunc = null;
		if(Reflect.isFunction(drawWithQualityFunc)) {
			var func = drawWithQualityFunc;
			func.apply(bitmapData,[starling.text.TextField.sNativeTextField,drawMatrix,null,null,null,false,openfl.display.StageQuality.MEDIUM]);
		} else bitmapData.draw(starling.text.TextField.sNativeTextField,drawMatrix);
		starling.text.TextField.sNativeTextField.set_text("");
		resultTextBounds.setTo((textOffsetX + filterOffset.x) / scale,(textOffsetY + filterOffset.y) / scale,textWidth / scale,textHeight / scale);
		return bitmapData;
	}
	,autoScaleNativeTextField: function(textField) {
		var size = textField.get_defaultTextFormat().size;
		var maxHeight = Std["int"](textField.get_height() - 4);
		var maxWidth = Std["int"](textField.get_width() - 4);
		while(textField.get_textWidth() > maxWidth || textField.get_textHeight() > maxHeight) {
			if(size <= 4) break;
			var format = textField.get_defaultTextFormat();
			format.size = size--;
			textField.set_defaultTextFormat(format);
			if(this.mIsHtmlText) textField.set_htmlText(this.mText); else textField.set_text(this.mText);
		}
	}
	,calculateFilterOffset: function(textField,hAlign,vAlign) {
		var resultOffset = new openfl.geom.Point();
		var filters = textField.get_filters();
		if(filters != null && filters.length > 0) {
			var textWidth = textField.get_textWidth();
			var textHeight = textField.get_textHeight();
			var bounds = new openfl.geom.Rectangle();
			var _g = 0;
			while(_g < filters.length) {
				var filter = filters[_g];
				++_g;
				var blurX;
				if(Object.prototype.hasOwnProperty.call(filter,"blurX")) blurX = Reflect.getProperty(filter,"blurX"); else blurX = 0;
				var blurY;
				if(Object.prototype.hasOwnProperty.call(filter,"blurY")) blurY = Reflect.getProperty(filter,"blurY"); else blurY = 0;
				var angleDeg;
				if(Object.prototype.hasOwnProperty.call(filter,"angle")) angleDeg = Reflect.getProperty(filter,"angle"); else angleDeg = 0;
				var distance;
				if(Object.prototype.hasOwnProperty.call(filter,"distance")) distance = Reflect.getProperty(filter,"distance"); else distance = 0;
				var angle = starling.utils.StarlingUtils.deg2rad(angleDeg);
				var marginX = blurX * 1.33;
				var marginY = blurY * 1.33;
				var offsetX = Math.cos(angle) * distance - marginX / 2.0;
				var offsetY = Math.sin(angle) * distance - marginY / 2.0;
				var filterBounds = new openfl.geom.Rectangle(offsetX,offsetY,textWidth + marginX,textHeight + marginY);
				bounds = bounds.union(filterBounds);
			}
			if(hAlign == starling.utils.HAlign.LEFT && bounds.x < 0) resultOffset.x = -bounds.x; else if(hAlign == starling.utils.HAlign.RIGHT && bounds.y > 0) resultOffset.x = -(bounds.get_right() - textWidth);
			if(vAlign == starling.utils.VAlign.TOP && bounds.y < 0) resultOffset.y = -bounds.y; else if(vAlign == starling.utils.VAlign.BOTTOM && bounds.y > 0) resultOffset.y = -(bounds.get_bottom() - textHeight);
		}
		return resultOffset;
	}
	,createComposedContents: function() {
		if(this.mImage != null) {
			this.mImage.removeFromParent(true);
			this.mImage.get_texture().dispose();
			this.mImage = null;
		}
		if(this.mQuadBatch == null) {
			this.mQuadBatch = new starling.display.QuadBatch();
			this.mQuadBatch.set_touchable(false);
			this.addChild(this.mQuadBatch);
		} else this.mQuadBatch.reset();
		var bitmapFont = starling.text.TextField.getBitmapFont(this.mFontName);
		if(bitmapFont == null) throw new openfl.errors.Error("Bitmap font not registered: " + this.mFontName);
		var width = this.mHitArea.width;
		var height = this.mHitArea.height;
		var hAlign = this.mHAlign;
		var vAlign = this.mVAlign;
		if(this.get_isHorizontalAutoSize()) {
			width = Math.POSITIVE_INFINITY;
			hAlign = starling.utils.HAlign.LEFT;
		}
		if(this.get_isVerticalAutoSize()) {
			height = Math.POSITIVE_INFINITY;
			vAlign = starling.utils.VAlign.TOP;
		}
		bitmapFont.fillQuadBatch(this.mQuadBatch,width,height,this.mText,this.mFontSize,this.mColor,hAlign,vAlign,this.mAutoScale,this.mKerning);
		this.mQuadBatch.set_batchable(this.mBatchable);
		if(this.mAutoSize == starling.text.TextFieldAutoSize.NONE) this.mTextBounds = null; else {
			this.mTextBounds = this.mQuadBatch.getBounds(this.mQuadBatch,this.mTextBounds);
			if(this.get_isHorizontalAutoSize()) this.mHitArea.width = this.mTextBounds.x + this.mTextBounds.width;
			if(this.get_isVerticalAutoSize()) this.mHitArea.height = this.mTextBounds.y + this.mTextBounds.height;
		}
	}
	,updateBorder: function() {
		if(this.mBorder == null) return;
		var width = this.mHitArea.width;
		var height = this.mHitArea.height;
		var topLine = this.mBorder.getChildAt(0);
		var rightLine = this.mBorder.getChildAt(1);
		var bottomLine = this.mBorder.getChildAt(2);
		var leftLine = this.mBorder.getChildAt(3);
		topLine.set_width(width);
		topLine.set_height(1);
		bottomLine.set_width(width);
		bottomLine.set_height(1);
		leftLine.set_width(1);
		leftLine.set_height(height);
		rightLine.set_width(1);
		rightLine.set_height(height);
		rightLine.set_x(width - 1);
		bottomLine.set_y(height - 1);
		topLine.set_color(rightLine.set_color(bottomLine.set_color(leftLine.set_color(this.mColor))));
	}
	,get_isHorizontalAutoSize: function() {
		return this.mAutoSize == starling.text.TextFieldAutoSize.HORIZONTAL || this.mAutoSize == starling.text.TextFieldAutoSize.BOTH_DIRECTIONS;
	}
	,get_isVerticalAutoSize: function() {
		return this.mAutoSize == starling.text.TextFieldAutoSize.VERTICAL || this.mAutoSize == starling.text.TextFieldAutoSize.BOTH_DIRECTIONS;
	}
	,get_textBounds: function() {
		if(this.mRequiresRedraw) this.redraw();
		if(this.mTextBounds == null) this.mTextBounds = this.mQuadBatch.getBounds(this.mQuadBatch);
		return this.mTextBounds.clone();
	}
	,getBounds: function(targetSpace,resultRect) {
		if(this.mRequiresRedraw) this.redraw();
		this.getTransformationMatrix(targetSpace,starling.text.TextField.sHelperMatrix);
		return starling.utils.RectangleUtil.getBounds(this.mHitArea,starling.text.TextField.sHelperMatrix,resultRect);
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) forTouch = false;
		if(forTouch && (!this.get_visible() || !this.get_touchable())) return null; else if(this.mHitArea.containsPoint(localPoint) && this.hitTestMask(localPoint)) return this; else return null;
	}
	,set_width: function(value) {
		this.mHitArea.width = value;
		this.mRequiresRedraw = true;
		return value;
	}
	,set_height: function(value) {
		this.mHitArea.height = value;
		this.mRequiresRedraw = true;
		return value;
	}
	,get_text: function() {
		return this.mText;
	}
	,set_text: function(value) {
		if(value == null) value = "";
		if(this.mText != value) {
			this.mText = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_fontName: function() {
		return this.mFontName;
	}
	,set_fontName: function(value) {
		if(this.mFontName != value) {
			if(value == starling.text.BitmapFont.MINI && (function($this) {
				var $r;
				var this1 = starling.text.TextField.get_bitmapFonts();
				$r = this1.get(value);
				return $r;
			}(this)) == null) starling.text.TextField.registerBitmapFont(new starling.text.BitmapFont());
			this.mFontName = value;
			this.mRequiresRedraw = true;
			this.mIsRenderedText = starling.text.TextField.getBitmapFont(value) == null;
		}
		return value;
	}
	,get_fontSize: function() {
		return this.mFontSize;
	}
	,set_fontSize: function(value) {
		if(this.mFontSize != value) {
			this.mFontSize = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_color: function() {
		return this.mColor;
	}
	,set_color: function(value) {
		if((function($this) {
			var $r;
			var $int = $this.mColor;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) != (function($this) {
			var $r;
			var int1 = value;
			$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
			return $r;
		}(this))) {
			this.mColor = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_hAlign: function() {
		return this.mHAlign;
	}
	,set_hAlign: function(value) {
		if(!js.Boot.__instanceof(value,starling.utils.HAlign)) throw new openfl.errors.ArgumentError("Invalid horizontal align: " + Std.string(value));
		if(this.mHAlign != value) {
			this.mHAlign = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_vAlign: function() {
		return this.mVAlign;
	}
	,set_vAlign: function(value) {
		if(!js.Boot.__instanceof(value,starling.utils.VAlign)) throw new openfl.errors.ArgumentError("Invalid vertical align: " + Std.string(value));
		if(this.mVAlign != value) {
			this.mVAlign = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_border: function() {
		return this.mBorder != null;
	}
	,set_border: function(value) {
		if(value && this.mBorder == null) {
			this.mBorder = new starling.display.Sprite();
			this.addChild(this.mBorder);
			var _g = 0;
			while(_g < 4) {
				var i = _g++;
				this.mBorder.addChild(new starling.display.Quad(1.0,1.0));
			}
			this.updateBorder();
		} else if(!value && this.mBorder != null) {
			this.mBorder.removeFromParent(true);
			this.mBorder = null;
		}
		return value;
	}
	,get_bold: function() {
		return this.mBold;
	}
	,set_bold: function(value) {
		if(this.mBold != value) {
			this.mBold = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_italic: function() {
		return this.mItalic;
	}
	,set_italic: function(value) {
		if(this.mItalic != value) {
			this.mItalic = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_underline: function() {
		return this.mUnderline;
	}
	,set_underline: function(value) {
		if(this.mUnderline != value) {
			this.mUnderline = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_kerning: function() {
		return this.mKerning;
	}
	,set_kerning: function(value) {
		if(this.mKerning != value) {
			this.mKerning = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_autoScale: function() {
		return this.mAutoScale;
	}
	,set_autoScale: function(value) {
		if(this.mAutoScale != value) {
			this.mAutoScale = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_autoSize: function() {
		return this.mAutoSize;
	}
	,set_autoSize: function(value) {
		if(this.mAutoSize != value) {
			this.mAutoSize = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_batchable: function() {
		return this.mBatchable;
	}
	,set_batchable: function(value) {
		this.mBatchable = value;
		if(this.mQuadBatch != null) this.mQuadBatch.set_batchable(value);
		return value;
	}
	,get_nativeFilters: function() {
		return this.mNativeFilters;
	}
	,set_nativeFilters: function(value) {
		this.mNativeFilters = value.concat([]);
		this.mRequiresRedraw = true;
		return value;
	}
	,get_isHtmlText: function() {
		return this.mIsHtmlText;
	}
	,set_isHtmlText: function(value) {
		if(this.mIsHtmlText != value) {
			this.mIsHtmlText = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,__class__: starling.text.TextField
	,__properties__: $extend(starling.display.DisplayObjectContainer.prototype.__properties__,{set_isHtmlText:"set_isHtmlText",get_isHtmlText:"get_isHtmlText",set_nativeFilters:"set_nativeFilters",get_nativeFilters:"get_nativeFilters",set_batchable:"set_batchable",get_batchable:"get_batchable",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_autoScale:"set_autoScale",get_autoScale:"get_autoScale",set_kerning:"set_kerning",get_kerning:"get_kerning",set_underline:"set_underline",get_underline:"get_underline",set_italic:"set_italic",get_italic:"get_italic",set_bold:"set_bold",get_bold:"get_bold",set_border:"set_border",get_border:"get_border",set_vAlign:"set_vAlign",get_vAlign:"get_vAlign",set_hAlign:"set_hAlign",get_hAlign:"get_hAlign",set_color:"set_color",get_color:"get_color",set_fontSize:"set_fontSize",get_fontSize:"get_fontSize",set_fontName:"set_fontName",get_fontName:"get_fontName",set_text:"set_text",get_text:"get_text",get_textBounds:"get_textBounds",get_isVerticalAutoSize:"get_isVerticalAutoSize",get_isHorizontalAutoSize:"get_isHorizontalAutoSize"})
});
starling.text.TextFieldAutoSize = function() {
	throw new starling.errors.AbstractClassError();
};
$hxClasses["starling.text.TextFieldAutoSize"] = starling.text.TextFieldAutoSize;
starling.text.TextFieldAutoSize.__name__ = ["starling","text","TextFieldAutoSize"];
starling.text.TextFieldAutoSize.prototype = {
	__class__: starling.text.TextFieldAutoSize
};
starling.textures = {};
starling.textures.AtfData = function(data) {
	if(!starling.textures.AtfData.isAtfData(data)) throw new openfl.errors.ArgumentError("Invalid ATF data");
	haxe.Log.trace("CHECK",{ fileName : "AtfData.hx", lineNumber : 40, className : "starling.textures.AtfData", methodName : "new"});
	data.position = 6;
	if(data.readByte() == 255) data.position = 12; else data.position = 6;
	var format = data.readUnsignedByte();
	var _g = format & 127;
	switch(_g) {
	case 0:
		break;
	case 1:
		this.mFormat = openfl.display3D.Context3DTextureFormat.BGRA;
		break;
	case 2:
		break;
	case 3:
		this.mFormat = openfl.display3D.Context3DTextureFormat.COMPRESSED;
		break;
	case 4:
		break;
	case 5:
		this.mFormat = "compressedAlpha";
		break;
	default:
		throw new openfl.errors.Error("Invalid ATF format");
	}
	this.mWidth = Math.pow(2,data.readUnsignedByte());
	this.mHeight = Math.pow(2,data.readUnsignedByte());
	this.mNumTextures = data.readUnsignedByte();
	this.mIsCubeMap = (function($this) {
		var $r;
		var $int = format & 128;
		$r = $int < 0?4294967296.0 + $int:$int + 0.0;
		return $r;
	}(this)) != 0;
	this.mData = data;
	data.position = 5;
	var d5 = data.readByte();
	var d6 = data.readByte();
	if(d5 != 0 && d6 == 255) {
		data.position = 5;
		var d51 = data.readByte();
		var emptyMipmaps = (d51 & 1) == 1;
		var numTextures = d51 >> 1 & 127;
		if(emptyMipmaps) this.mNumTextures = 1; else this.mNumTextures = numTextures;
	}
};
$hxClasses["starling.textures.AtfData"] = starling.textures.AtfData;
starling.textures.AtfData.__name__ = ["starling","textures","AtfData"];
starling.textures.AtfData.isAtfData = function(data) {
	if(data.length < 3) return false; else {
		var charCodeStr = data.readByte();
		charCodeStr += data.readByte();
		charCodeStr += data.readByte();
		var signature = String.fromCharCode(Std.parseInt(charCodeStr));
		return signature == "ATF";
	}
};
starling.textures.AtfData.prototype = {
	mFormat: null
	,mWidth: null
	,mHeight: null
	,mNumTextures: null
	,mIsCubeMap: null
	,mData: null
	,format: null
	,width: null
	,height: null
	,numTextures: null
	,isCubeMap: null
	,data: null
	,get_format: function() {
		return this.mFormat;
	}
	,get_width: function() {
		return this.mWidth;
	}
	,get_height: function() {
		return this.mHeight;
	}
	,get_numTextures: function() {
		return this.mNumTextures;
	}
	,get_isCubeMap: function() {
		return this.mIsCubeMap;
	}
	,get_data: function() {
		return this.mData;
	}
	,__class__: starling.textures.AtfData
	,__properties__: {get_data:"get_data",get_isCubeMap:"get_isCubeMap",get_numTextures:"get_numTextures",get_height:"get_height",get_width:"get_width",get_format:"get_format"}
};
starling.textures.Texture = function() {
	var name = Type.getClassName(Type.getClass(this));
	if(openfl.system.Capabilities.isDebugger && name == "starling.textures.Texture") throw new starling.errors.AbstractClassError();
};
$hxClasses["starling.textures.Texture"] = starling.textures.Texture;
starling.textures.Texture.__name__ = ["starling","textures","Texture"];
starling.textures.Texture.__properties__ = {get_maxSize:"get_maxSize"}
starling.textures.Texture.maxSize = null;
starling.textures.Texture.fromData = function(data,options) {
	var texture = null;
	if(js.Boot.__instanceof(data,openfl.display.Bitmap)) data = (js.Boot.__cast(data , openfl.display.Bitmap)).bitmapData;
	if(options == null) options = new starling.textures.TextureOptions();
	if(js.Boot.__instanceof(data,Class)) texture = starling.textures.Texture.fromEmbeddedAsset(data,options.get_mipMapping(),options.get_optimizeForRenderToTexture(),options.get_scale(),options.get_format(),options.get_repeat()); else if(js.Boot.__instanceof(data,openfl.display.BitmapData)) texture = starling.textures.Texture.fromBitmapData(data,options.get_mipMapping(),options.get_optimizeForRenderToTexture(),options.get_scale(),options.get_format(),options.get_repeat()); else if(js.Boot.__instanceof(data,lime.utils.ByteArray)) texture = starling.textures.Texture.fromAtfData(data,options.get_scale(),options.get_mipMapping(),options.get_onReady(),options.get_repeat()); else throw new openfl.errors.ArgumentError("Unsupported 'data' type: " + Type.getClassName(Type.getClass(data)));
	return texture;
};
starling.textures.Texture.fromEmbeddedAsset = function(assetClass,mipMapping,optimizeForRenderToTexture,scale,format,repeat) {
	if(repeat == null) repeat = false;
	if(scale == null) scale = 1;
	if(optimizeForRenderToTexture == null) optimizeForRenderToTexture = false;
	if(mipMapping == null) mipMapping = true;
	if(format == null) format = openfl.display3D.Context3DTextureFormat.BGRA;
	var texture;
	var asset = Type.createInstance(assetClass,[]);
	if(js.Boot.__instanceof(asset,openfl.display.Bitmap)) {
		texture = starling.textures.Texture.fromBitmap(asset,mipMapping,optimizeForRenderToTexture,scale,format,repeat);
		texture.get_root().set_onRestore(function() {
			texture.get_root().uploadBitmap(Type.createInstance(assetClass,[]));
		});
	} else if(js.Boot.__instanceof(asset,lime.utils.ByteArray)) {
		texture = starling.textures.Texture.fromAtfData(asset,scale,mipMapping,null,repeat);
		texture.get_root().set_onRestore(function() {
			texture.get_root().uploadAtfData(Type.createInstance(assetClass,[]));
		});
	} else throw new openfl.errors.ArgumentError("Invalid asset type: " + Type.getClassName(Type.getClass(asset)));
	asset = null;
	return texture;
};
starling.textures.Texture.fromBitmap = function(bitmap,generateMipMaps,optimizeForRenderToTexture,scale,format,repeat) {
	if(repeat == null) repeat = false;
	if(scale == null) scale = 1;
	if(optimizeForRenderToTexture == null) optimizeForRenderToTexture = false;
	if(generateMipMaps == null) generateMipMaps = true;
	if(format == null) format = openfl.display3D.Context3DTextureFormat.BGRA;
	return starling.textures.Texture.fromBitmapData(bitmap.bitmapData,generateMipMaps,optimizeForRenderToTexture,scale,format,repeat);
};
starling.textures.Texture.fromBitmapData = function(data,generateMipMaps,optimizeForRenderToTexture,scale,format,repeat) {
	if(repeat == null) repeat = false;
	if(scale == null) scale = 1;
	if(optimizeForRenderToTexture == null) optimizeForRenderToTexture = false;
	if(generateMipMaps == null) generateMipMaps = true;
	if(format == null) format = openfl.display3D.Context3DTextureFormat.BGRA;
	var colorsArePremultipliedWithAlpha;
	colorsArePremultipliedWithAlpha = false;
	var texture = starling.textures.Texture.empty(data.width / scale,data.height / scale,colorsArePremultipliedWithAlpha,generateMipMaps,optimizeForRenderToTexture,scale,format,repeat);
	texture.get_root().uploadBitmapData(data);
	texture.get_root().set_onRestore(function() {
		texture.get_root().uploadBitmapData(data);
	});
	return texture;
};
starling.textures.Texture.fromAtfData = function(data,scale,useMipMaps,async,repeat) {
	if(repeat == null) repeat = false;
	if(useMipMaps == null) useMipMaps = true;
	if(scale == null) scale = 1;
	var context = starling.core.Starling.get_Context();
	if(context == null) throw new starling.errors.MissingContextError();
	var atfData = new starling.textures.AtfData(data);
	var nativeTexture = context.createTexture(atfData.get_width(),atfData.get_height(),atfData.get_format(),false);
	var concreteTexture = new starling.textures.ConcreteTexture(nativeTexture,atfData.get_format(),atfData.get_width(),atfData.get_height(),useMipMaps && atfData.get_numTextures() > 1,false,false,scale,repeat);
	concreteTexture.uploadAtfData(data,0,async);
	concreteTexture.set_onRestore(function() {
		concreteTexture.uploadAtfData(data,0);
	});
	return concreteTexture;
};
starling.textures.Texture.fromNetStream = function(stream,scale,onComplete) {
	if(scale == null) scale = 1;
	var metaData = Reflect.getProperty(stream,"onMetaData");
	if(stream.client == stream && !metaData) stream.client = { onMetaData : function(md) {
	}};
	return starling.textures.Texture.fromVideoAttachment("NetStream",stream,scale,onComplete);
};
starling.textures.Texture.fromVideoAttachment = function(type,attachment,scale,onComplete) {
	var TEXTURE_READY = "textureReady";
	if(!starling.utils.SystemUtil.get_supportsVideoTexture()) throw new starling.errors.NotSupportedError("Video Textures are not supported on this platform");
	var context = starling.core.Starling.get_Context();
	if(context == null) throw new starling.errors.MissingContextError();
	var func = Reflect.getProperty(context,"createVideoTexture");
	var base = func.apply(context,[]);
	var baseFunc = Reflect.getProperty(base,"attach" + type);
	baseFunc.apply(base,[attachment]);
	var texture = new starling.textures.ConcreteVideoTexture(base,scale);
	texture.set_onRestore(function() {
		texture.get_root().attachVideo(type,attachment);
	});
	base.addEventListener(TEXTURE_READY,function(event) {
		starling.utils.StarlingUtils.execute(onComplete,[texture]);
	});
	return texture;
};
starling.textures.Texture.fromColor = function(width,height,color,optimizeForRenderToTexture,scale,format) {
	if(scale == null) scale = -1;
	if(optimizeForRenderToTexture == null) optimizeForRenderToTexture = false;
	if(color == null) color = -1;
	if(format == null) format = openfl.display3D.Context3DTextureFormat.BGRA;
	var texture = starling.textures.Texture.empty(width,height,true,false,optimizeForRenderToTexture,scale,format);
	texture.get_root().clear(color,starling.utils.Color.getAlpha(color) / 255.0);
	texture.get_root().set_onRestore(function() {
		texture.get_root().clear(color,starling.utils.Color.getAlpha(color) / 255.0);
	});
	return texture;
};
starling.textures.Texture.empty = function(width,height,premultipliedAlpha,mipMapping,optimizeForRenderToTexture,scale,format,repeat) {
	if(repeat == null) repeat = false;
	if(scale == null) scale = -1;
	if(optimizeForRenderToTexture == null) optimizeForRenderToTexture = false;
	if(mipMapping == null) mipMapping = true;
	if(premultipliedAlpha == null) premultipliedAlpha = true;
	if(scale <= 0) scale = starling.core.Starling.get_ContentScaleFactor();
	if(format == null) format = openfl.display3D.Context3DTextureFormat.BGRA;
	var actualWidth;
	var actualHeight;
	var nativeTexture;
	var context = starling.core.Starling.get_Context();
	if(context == null) throw new starling.errors.MissingContextError();
	var origWidth = width * scale | 0;
	var origHeight = height * scale | 0;
	var useRectTexture = !mipMapping && !repeat && starling.core.Starling.get_current().get_profile() != "baselineConstrained" && Object.prototype.hasOwnProperty.call(context,"createRectangleTexture") && format != openfl.display3D.Context3DTextureFormat.COMPRESSED && format != openfl.display3D.Context3DTextureFormat.COMPRESSED_ALPHA;
	if(useRectTexture) {
		actualWidth = Math.ceil(origWidth - 0.000000001);
		actualHeight = Math.ceil(origHeight - 0.000000001);
		nativeTexture = context.createRectangleTexture(actualWidth,actualHeight,format,optimizeForRenderToTexture);
	} else {
		actualWidth = starling.utils.StarlingUtils.getNextPowerOfTwo(origWidth);
		actualHeight = starling.utils.StarlingUtils.getNextPowerOfTwo(origHeight);
		nativeTexture = context.createTexture(actualWidth,actualHeight,format,optimizeForRenderToTexture);
	}
	var concreteTexture = new starling.textures.ConcreteTexture(nativeTexture,format,actualWidth,actualHeight,mipMapping,premultipliedAlpha,optimizeForRenderToTexture,scale,repeat);
	concreteTexture.set_onRestore($bind(concreteTexture,concreteTexture.clear));
	if(actualWidth - origWidth < 0.001 && actualHeight - origHeight < 0.001) return concreteTexture; else return new starling.textures.SubTexture(concreteTexture,new openfl.geom.Rectangle(0,0,width,height),true);
};
starling.textures.Texture.fromTexture = function(texture,region,frame,rotated) {
	if(rotated == null) rotated = false;
	return new starling.textures.SubTexture(texture,region,false,frame,rotated);
};
starling.textures.Texture.get_maxSize = function() {
	var target = starling.core.Starling.get_current();
	var profile;
	if(target != null) profile = target.get_profile(); else profile = "baseline";
	if(profile == "baseline" || profile == "baselineConstrained") return 2048; else return 4096;
};
starling.textures.Texture.prototype = {
	frame: null
	,repeat: null
	,width: null
	,height: null
	,nativeWidth: null
	,nativeHeight: null
	,scale: null
	,base: null
	,root: null
	,format: null
	,mipMapping: null
	,premultipliedAlpha: null
	,dispose: function() {
	}
	,adjustVertexData: function(vertexData,vertexID,count) {
	}
	,adjustTexCoords: function(texCoords,startIndex,stride,count) {
		if(count == null) count = -1;
		if(stride == null) stride = 0;
		if(startIndex == null) startIndex = 0;
		return texCoords;
	}
	,get_frame: function() {
		return null;
	}
	,get_repeat: function() {
		return false;
	}
	,get_width: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,get_nativeWidth: function() {
		return 0;
	}
	,get_nativeHeight: function() {
		return 0;
	}
	,get_scale: function() {
		return 1.0;
	}
	,get_base: function() {
		return null;
	}
	,get_root: function() {
		return null;
	}
	,get_format: function() {
		return openfl.display3D.Context3DTextureFormat.BGRA;
	}
	,get_mipMapping: function() {
		return false;
	}
	,get_premultipliedAlpha: function() {
		return false;
	}
	,__class__: starling.textures.Texture
	,__properties__: {get_premultipliedAlpha:"get_premultipliedAlpha",get_mipMapping:"get_mipMapping",get_format:"get_format",get_root:"get_root",get_base:"get_base",get_scale:"get_scale",get_nativeHeight:"get_nativeHeight",get_nativeWidth:"get_nativeWidth",get_height:"get_height",get_width:"get_width",get_repeat:"get_repeat",get_frame:"get_frame"}
};
starling.textures.ConcreteTexture = function(base,format,width,height,mipMapping,premultipliedAlpha,optimizedForRenderTexture,scale,repeat) {
	if(repeat == null) repeat = false;
	if(scale == null) scale = 1;
	if(optimizedForRenderTexture == null) optimizedForRenderTexture = false;
	starling.textures.Texture.call(this);
	if(scale <= 0) this.mScale = 1.0; else this.mScale = scale;
	this.mBase = base;
	this.mFormat = format;
	this.mWidth = width;
	this.mHeight = height;
	this.mMipMapping = mipMapping;
	this.mPremultipliedAlpha = premultipliedAlpha;
	this.mOptimizedForRenderTexture = optimizedForRenderTexture;
	this.mRepeat = repeat;
	this.mOnRestore = null;
	this.mDataUploaded = false;
	this.mTextureReadyCallback = null;
};
$hxClasses["starling.textures.ConcreteTexture"] = starling.textures.ConcreteTexture;
starling.textures.ConcreteTexture.__name__ = ["starling","textures","ConcreteTexture"];
starling.textures.ConcreteTexture.__super__ = starling.textures.Texture;
starling.textures.ConcreteTexture.prototype = $extend(starling.textures.Texture.prototype,{
	mBase: null
	,mFormat: null
	,mWidth: null
	,mHeight: null
	,mMipMapping: null
	,mPremultipliedAlpha: null
	,mOptimizedForRenderTexture: null
	,mScale: null
	,mRepeat: null
	,mOnRestore: null
	,mDataUploaded: null
	,mTextureReadyCallback: null
	,optimizedForRenderTexture: null
	,dispose: function() {
		if(this.mBase != null) {
			this.mBase.removeEventListener(starling.textures.ConcreteTexture.TEXTURE_READY,$bind(this,this.onTextureReady));
			this.mBase.dispose();
		}
		this.set_onRestore(null);
		starling.textures.Texture.prototype.dispose.call(this);
	}
	,uploadBitmap: function(bitmap) {
		this.uploadBitmapData(bitmap.bitmapData);
	}
	,uploadBitmapData: function(data) {
		var potData = null;
		if(data.width != this.mWidth || data.height != this.mHeight) {
			potData = new openfl.display.BitmapData(this.mWidth,this.mHeight,true,0);
			potData.copyPixels(data,data.rect,starling.textures.ConcreteTexture.sOrigin);
			data = potData;
		}
		if(js.Boot.__instanceof(this.mBase,openfl.display3D.textures.Texture)) {
			var potTexture = this.mBase;
			potTexture.uploadFromBitmapData(data);
			if(this.mMipMapping && data.width > 1 && data.height > 1) {
				var currentWidth = data.width >> 1;
				var currentHeight = data.height >> 1;
				var level = 1;
				var canvas = new openfl.display.BitmapData(currentWidth,currentHeight,true,0);
				var transform = new openfl.geom.Matrix(.5,0,0,.5);
				var bounds = new openfl.geom.Rectangle();
				while(currentWidth >= 1 || currentHeight >= 1) {
					bounds.width = currentWidth;
					bounds.height = currentHeight;
					canvas.fillRect(bounds,0);
					canvas.draw(data,transform,null,null,null,true);
					potTexture.uploadFromBitmapData(canvas,level++);
					transform.scale(0.5,0.5);
					currentWidth = currentWidth >> 1;
					currentHeight = currentHeight >> 1;
				}
				canvas.dispose();
			}
		} else if(js.Boot.__instanceof(this.mBase,openfl.display3D.textures.RectangleTexture)) {
			haxe.Log.trace("CHECK",{ fileName : "ConcreteTexture.hx", lineNumber : 147, className : "starling.textures.ConcreteTexture", methodName : "uploadBitmapData"});
			var rectangleTexture = this.mBase;
			if(rectangleTexture != null) rectangleTexture.uploadFromBitmapData(data);
		} else haxe.Log.trace("FIX",{ fileName : "ConcreteTexture.hx", lineNumber : 161, className : "starling.textures.ConcreteTexture", methodName : "uploadBitmapData"});
		if(potData != null) potData.dispose();
		this.mDataUploaded = true;
	}
	,uploadAtfData: function(data,offset,async) {
		if(offset == null) offset = 0;
		var isAsync = Reflect.isFunction(async) || async == true;
		var potTexture = this.mBase;
		if(potTexture == null) throw new openfl.errors.Error("This texture type does not support ATF data");
		if(Reflect.isFunction(async)) {
			this.mTextureReadyCallback = async;
			this.mBase.addEventListener(starling.textures.ConcreteTexture.TEXTURE_READY,$bind(this,this.onTextureReady));
		}
		potTexture.uploadCompressedTextureFromByteArray(data,offset,isAsync);
		this.mDataUploaded = true;
	}
	,attachNetStream: function(netStream,onComplete) {
		this.attachVideo("NetStream",netStream,onComplete);
	}
	,attachVideo: function(type,attachment,onComplete) {
		var name = Type.getClassName(Type.getClass(this.mBase));
		if(name == "flash.display3D.textures.VideoTexture") {
			this.mDataUploaded = true;
			this.mTextureReadyCallback = onComplete;
			haxe.Log.trace("CHECK",{ fileName : "ConcreteTexture.hx", lineNumber : 216, className : "starling.textures.ConcreteTexture", methodName : "attachVideo"});
			var attach = Reflect.field(this.mBase,"attach" + type);
			if(attach != null) attach.apply(this.mBase,[attachment]);
			this.mBase.addEventListener(starling.textures.ConcreteTexture.TEXTURE_READY,$bind(this,this.onTextureReady));
		} else throw new openfl.errors.Error("This texture type does not support " + type + " data");
	}
	,onTextureReady: function(event) {
		this.mBase.removeEventListener(starling.textures.ConcreteTexture.TEXTURE_READY,$bind(this,this.onTextureReady));
		starling.utils.StarlingUtils.execute(this.mTextureReadyCallback,[this]);
		this.mTextureReadyCallback = null;
	}
	,onContextCreated: function() {
		this.createBase();
		if(this.mOnRestore != null) this.mOnRestore();
		if(!this.mDataUploaded) this.clear();
	}
	,createBase: function() {
		var context = starling.core.Starling.get_Context();
		var name = Type.getClassName(Type.getClass(this.mBase));
		if(name == "flash.display3D.textures.Texture" || name == "openfl.display3D.textures.Texture") this.mBase = context.createTexture(this.mWidth,this.mHeight,this.mFormat,this.mOptimizedForRenderTexture); else if(name == "flash.display3D.textures.RectangleTexture" || name == "openfl.display3D.textures.RectangleTexture") this.mBase = context.createRectangleTexture(this.mWidth,this.mHeight,this.mFormat,this.mOptimizedForRenderTexture); else throw new starling.errors.NotSupportedError("Texture type not supported: " + name);
		this.mDataUploaded = false;
	}
	,clear: function(color,alpha) {
		if(alpha == null) alpha = 0.0;
		if(color == null) color = 0;
		var context = starling.core.Starling.get_Context();
		if(context == null) throw new starling.errors.MissingContextError();
		if(this.mPremultipliedAlpha && alpha < 1.0) color = starling.utils.Color.rgb(Std["int"](starling.utils.Color.getRed(color) * alpha),Std["int"](starling.utils.Color.getGreen(color) * alpha),Std["int"](starling.utils.Color.getBlue(color) * alpha));
		context.setRenderToTexture(this.mBase);
		try {
			starling.core.RenderSupport.Clear(color,alpha);
		} catch( e ) {
			if( js.Boot.__instanceof(e,openfl.errors.Error) ) {
			} else throw(e);
		}
		context.setRenderToBackBuffer();
		this.mDataUploaded = true;
	}
	,get_optimizedForRenderTexture: function() {
		return this.mOptimizedForRenderTexture;
	}
	,get_onRestore: function() {
		return this.mOnRestore;
	}
	,set_onRestore: function(value) {
		starling.core.Starling.get_current().removeEventListener(starling.events.Event.CONTEXT3D_CREATE,$bind(this,this.onContextCreated));
		if(starling.core.Starling.get_handleLostContext() && value != null) {
			this.mOnRestore = value;
			starling.core.Starling.get_current().addEventListener(starling.events.Event.CONTEXT3D_CREATE,$bind(this,this.onContextCreated));
		} else this.mOnRestore = null;
		return value;
	}
	,get_base: function() {
		return this.mBase;
	}
	,get_root: function() {
		return this;
	}
	,get_format: function() {
		return this.mFormat;
	}
	,get_width: function() {
		return this.mWidth / this.mScale;
	}
	,get_height: function() {
		return this.mHeight / this.mScale;
	}
	,get_nativeWidth: function() {
		return this.mWidth;
	}
	,get_nativeHeight: function() {
		return this.mHeight;
	}
	,get_scale: function() {
		return this.mScale;
	}
	,get_mipMapping: function() {
		return this.mMipMapping;
	}
	,get_premultipliedAlpha: function() {
		return this.mPremultipliedAlpha;
	}
	,get_repeat: function() {
		return this.mRepeat;
	}
	,__class__: starling.textures.ConcreteTexture
	,__properties__: $extend(starling.textures.Texture.prototype.__properties__,{set_onRestore:"set_onRestore",get_onRestore:"get_onRestore",get_optimizedForRenderTexture:"get_optimizedForRenderTexture"})
});
starling.textures.ConcreteVideoTexture = function(base,scale) {
	if(scale == null) scale = 1;
	var format = openfl.display3D.Context3DTextureFormat.BGRA;
	haxe.Log.trace("CHECK",{ fileName : "ConcreteVideoTexture.hx", lineNumber : 30, className : "starling.textures.ConcreteVideoTexture", methodName : "new"});
	var width = 0;
	var height = 0;
	if(Object.prototype.hasOwnProperty.call(base,"videoWidth")) width = Reflect.getProperty(base,"videoWidth");
	if(Object.prototype.hasOwnProperty.call(base,"videoHeight")) height = Reflect.getProperty(base,"videoHeight");
	starling.textures.ConcreteTexture.call(this,base,format,width,height,false,false,false,scale,false);
	var name = Type.getClassName(Type.getClass(base));
	haxe.Log.trace("CHECK name = " + name,{ fileName : "ConcreteVideoTexture.hx", lineNumber : 39, className : "starling.textures.ConcreteVideoTexture", methodName : "new"});
	if(name != "flash.display3D.textures.VideoTexture") throw new openfl.errors.ArgumentError("'base' must be VideoTexture");
};
$hxClasses["starling.textures.ConcreteVideoTexture"] = starling.textures.ConcreteVideoTexture;
starling.textures.ConcreteVideoTexture.__name__ = ["starling","textures","ConcreteVideoTexture"];
starling.textures.ConcreteVideoTexture.__super__ = starling.textures.ConcreteTexture;
starling.textures.ConcreteVideoTexture.prototype = $extend(starling.textures.ConcreteTexture.prototype,{
	get_nativeWidth: function() {
		return Reflect.getProperty(this.get_base(),"videoWidth");
	}
	,get_nativeHeight: function() {
		return Reflect.getProperty(this.get_base(),"videoHeight");
	}
	,get_width: function() {
		return this.get_nativeWidth() / this.get_scale();
	}
	,get_height: function() {
		return this.get_nativeHeight() / this.get_scale();
	}
	,__class__: starling.textures.ConcreteVideoTexture
});
starling.textures.SubTexture = function(_parent,region,ownsParent,frame,rotated) {
	if(rotated == null) rotated = false;
	if(ownsParent == null) ownsParent = false;
	this.mTransformationMatrix = new openfl.geom.Matrix();
	starling.textures.Texture.call(this);
	this.mParent = _parent;
	if(region != null) this.mRegion = region.clone(); else this.mRegion = new openfl.geom.Rectangle(0,0,_parent.get_width(),_parent.get_height());
	if(frame != null) this.mFrame = frame.clone(); else this.mFrame = null;
	this.mOwnsParent = ownsParent;
	this.mRotated = rotated;
	if(rotated) this.mWidth = this.mRegion.height; else this.mWidth = this.mRegion.width;
	if(rotated) this.mHeight = this.mRegion.width; else this.mHeight = this.mRegion.height;
	this.mTransformationMatrix = new openfl.geom.Matrix();
	if(rotated) {
		this.mTransformationMatrix.translate(0,-1);
		this.mTransformationMatrix.rotate(Math.PI / 2.0);
	}
	if(this.mFrame != null && (this.mFrame.x > 0 || this.mFrame.y > 0 || this.mFrame.get_right() < this.mRegion.width || this.mFrame.get_bottom() < this.mRegion.height)) haxe.Log.trace("[Starling] Warning: frames inside the texture's region are unsupported.",{ fileName : "SubTexture.hx", lineNumber : 102, className : "starling.textures.SubTexture", methodName : "new"});
	this.mTransformationMatrix.scale(this.mRegion.width / this.mParent.get_width(),this.mRegion.height / this.mParent.get_height());
	this.mTransformationMatrix.translate(this.mRegion.x / this.mParent.get_width(),this.mRegion.y / this.mParent.get_height());
};
$hxClasses["starling.textures.SubTexture"] = starling.textures.SubTexture;
starling.textures.SubTexture.__name__ = ["starling","textures","SubTexture"];
starling.textures.SubTexture.__properties__ = {set_sMatrix:"set_sMatrix",get_sMatrix:"get_sMatrix"}
starling.textures.SubTexture._sMatrix = null;
starling.textures.SubTexture.get_sMatrix = function() {
	if(starling.textures.SubTexture._sMatrix == null) starling.textures.SubTexture._sMatrix = new openfl.geom.Matrix(1,0,0,1,0,0);
	return starling.textures.SubTexture._sMatrix;
};
starling.textures.SubTexture.set_sMatrix = function(value) {
	return starling.textures.SubTexture._sMatrix = value;
};
starling.textures.SubTexture.__super__ = starling.textures.Texture;
starling.textures.SubTexture.prototype = $extend(starling.textures.Texture.prototype,{
	mParent: null
	,mOwnsParent: null
	,mRegion: null
	,mFrame: null
	,mRotated: null
	,mWidth: null
	,mHeight: null
	,mTransformationMatrix: null
	,parent: null
	,ownsParent: null
	,rotated: null
	,region: null
	,clipping: null
	,transformationMatrix: null
	,dispose: function() {
		if(this.mOwnsParent) this.mParent.dispose();
		starling.textures.Texture.prototype.dispose.call(this);
	}
	,adjustVertexData: function(vertexData,vertexID,count) {
		var startIndex = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.TEXCOORD_OFFSET;
		var stride = starling.utils.VertexData.ELEMENTS_PER_VERTEX - 2;
		vertexData.set_rawData((function($this) {
			var $r;
			var value = $this.adjustTexCoords((function($this) {
				var $r;
				var this1 = vertexData.get_rawData();
				var value1 = new Array();
				{
					var _g1 = 0;
					var _g = this1.data.length;
					while(_g1 < _g) {
						var i = _g1++;
						value1.push(this1.data[i]);
					}
				}
				$r = value1;
				return $r;
			}($this)),startIndex,stride,count);
			var vectorData = new openfl.VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this2;
				this2 = new Array(value.length);
				vec = this2;
				var _g11 = 0;
				var _g2 = value.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					vec[i1] = value[i1];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this)));
		if(this.mFrame != null) {
			if(count != 4) throw new openfl.errors.ArgumentError("Textures with a frame can only be used on quads");
			var deltaRight = this.mFrame.width + this.mFrame.x - this.mWidth;
			var deltaBottom = this.mFrame.height + this.mFrame.y - this.mHeight;
			vertexData.translateVertex(vertexID,-this.mFrame.x,-this.mFrame.y);
			vertexData.translateVertex(vertexID + 1,-deltaRight,-this.mFrame.y);
			vertexData.translateVertex(vertexID + 2,-this.mFrame.x,-deltaBottom);
			vertexData.translateVertex(vertexID + 3,-deltaRight,-deltaBottom);
		}
	}
	,adjustTexCoords: function(texCoords,startIndex,stride,count) {
		if(count == null) count = -1;
		if(stride == null) stride = 0;
		if(startIndex == null) startIndex = 0;
		if(count < 0) count = (texCoords.length - startIndex - 2) / (stride + 2) + 1 | 0;
		var endIndex = startIndex + count * (2 + stride);
		var texture = this;
		var u;
		var v;
		starling.textures.SubTexture.get_sMatrix().identity();
		while(texture != null) {
			if(texture.mTransformationMatrix != null) starling.textures.SubTexture.get_sMatrix().concat(texture.mTransformationMatrix);
			try {
				texture = texture.mParent;
			} catch( e ) {
				if( js.Boot.__instanceof(e,openfl.errors.Error) ) {
					texture = null;
				} else throw(e);
			}
		}
		var i = startIndex;
		while(i < endIndex) {
			u = texCoords[i];
			v = texCoords[js.Boot.__cast(i + 1 , Int)];
			starling.utils.MatrixUtil.transformCoords(starling.textures.SubTexture.get_sMatrix(),u,v,starling.textures.SubTexture.sTexCoords);
			texCoords[i] = starling.textures.SubTexture.sTexCoords.x;
			texCoords[js.Boot.__cast(i + 1 , Int)] = starling.textures.SubTexture.sTexCoords.y;
			i += 2 + stride;
		}
		return texCoords;
	}
	,get_parent: function() {
		return this.mParent;
	}
	,get_ownsParent: function() {
		return this.mOwnsParent;
	}
	,get_rotated: function() {
		return this.mRotated;
	}
	,get_region: function() {
		return this.mRegion;
	}
	,get_clipping: function() {
		var topLeft = new openfl.geom.Point();
		var bottomRight = new openfl.geom.Point();
		starling.utils.MatrixUtil.transformCoords(this.mTransformationMatrix,0.0,0.0,topLeft);
		starling.utils.MatrixUtil.transformCoords(this.mTransformationMatrix,1.0,1.0,bottomRight);
		var clipping = new openfl.geom.Rectangle(topLeft.x,topLeft.y,bottomRight.x - topLeft.x,bottomRight.y - topLeft.y);
		starling.utils.RectangleUtil.normalize(clipping);
		return clipping;
	}
	,get_transformationMatrix: function() {
		return this.mTransformationMatrix;
	}
	,get_base: function() {
		return this.mParent.get_base();
	}
	,get_root: function() {
		return this.mParent.get_root();
	}
	,get_format: function() {
		return this.mParent.get_format();
	}
	,get_width: function() {
		return this.mWidth;
	}
	,get_height: function() {
		return this.mHeight;
	}
	,get_nativeWidth: function() {
		return this.mWidth * this.get_scale();
	}
	,get_nativeHeight: function() {
		return this.mHeight * this.get_scale();
	}
	,get_mipMapping: function() {
		return this.mParent.get_mipMapping();
	}
	,get_premultipliedAlpha: function() {
		return this.mParent.get_premultipliedAlpha();
	}
	,get_scale: function() {
		return this.mParent.get_scale();
	}
	,get_repeat: function() {
		return this.mParent.get_repeat();
	}
	,get_frame: function() {
		return this.mFrame;
	}
	,__class__: starling.textures.SubTexture
	,__properties__: $extend(starling.textures.Texture.prototype.__properties__,{get_transformationMatrix:"get_transformationMatrix",get_clipping:"get_clipping",get_region:"get_region",get_rotated:"get_rotated",get_ownsParent:"get_ownsParent",get_parent:"get_parent"})
});
starling.textures.TextureAtlas = function(texture,atlasXml) {
	this.mSubTextures = new haxe.ds.StringMap();
	this.mAtlasTexture = texture;
	if(atlasXml != null) this.parseAtlasXml(atlasXml);
};
$hxClasses["starling.textures.TextureAtlas"] = starling.textures.TextureAtlas;
starling.textures.TextureAtlas.__name__ = ["starling","textures","TextureAtlas"];
starling.textures.TextureAtlas.parseBool = function(value) {
	return value.toLowerCase() == "true";
};
starling.textures.TextureAtlas.prototype = {
	mAtlasTexture: null
	,mSubTextures: null
	,mSubTextureNames: null
	,texture: null
	,dispose: function() {
		this.mAtlasTexture.dispose();
	}
	,parseAtlasXml: function(atlasXml) {
		haxe.Log.trace("FIX",{ fileName : "TextureAtlas.hx", lineNumber : 105, className : "starling.textures.TextureAtlas", methodName : "parseAtlasXml"});
		var scale = this.mAtlasTexture.get_scale();
		var region = new openfl.geom.Rectangle();
		var frame = new openfl.geom.Rectangle();
		var $it0 = atlasXml.firstElement().iterator();
		while( $it0.hasNext() ) {
			var element = $it0.next();
			if(element.nodeType == Xml.Element) {
				var subTexture = element;
				var name = starling.utils.StarlingUtils.cleanMasterString(subTexture.get("name"));
				var x = Std.parseFloat(subTexture.get("x")) / scale;
				var y = Std.parseFloat(subTexture.get("y")) / scale;
				var width = Std.parseFloat(subTexture.get("width")) / scale;
				var height = Std.parseFloat(subTexture.get("height")) / scale;
				var frameX = Std.parseFloat(subTexture.get("frameX")) / scale;
				var frameY = Std.parseFloat(subTexture.get("frameY")) / scale;
				var frameWidth = Std.parseFloat(subTexture.get("frameWidth")) / scale;
				var frameHeight = Std.parseFloat(subTexture.get("frameHeight")) / scale;
				var rotatedStr = subTexture.get("rotated");
				var rotated = false;
				if(rotatedStr != null && rotatedStr.toLowerCase() == "true") rotated = true;
				region.setTo(x,y,width,height);
				frame.setTo(frameX,frameY,frameWidth,frameHeight);
				if(frameWidth > 0 && frameHeight > 0) this.addRegion(name,region,frame,rotated); else this.addRegion(name,region,null,rotated);
			}
		}
	}
	,getTexture: function(name) {
		return this.mSubTextures.get(name);
	}
	,getTextures: function(prefix,result) {
		if(prefix == null) prefix = "";
		if(result == null) result = new Array();
		var _g = 0;
		var _g1 = this.getNames(prefix,(function($this) {
			var $r;
			var this1 = starling.textures.TextureAtlas.sNames;
			var value = new Array();
			{
				var _g11 = 0;
				var _g2 = this1.data.length;
				while(_g11 < _g2) {
					var i = _g11++;
					value.push(this1.data[i]);
				}
			}
			$r = value;
			return $r;
		}(this)));
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			result[result.length] = this.getTexture(name);
		}
		var this2 = starling.textures.TextureAtlas.sNames;
		if(!this2.fixed) {
			if(0 > this2.length) {
				var data;
				var this3;
				this3 = new Array(0);
				data = this3;
				haxe.ds._Vector.Vector_Impl_.blit(this2.data,0,data,0,Std["int"](Math.min(this2.data.length,0)));
				this2.data = data;
			}
			this2.length = 0;
		}
		0;
		return result;
	}
	,getNames: function(prefix,result) {
		if(prefix == null) prefix = "";
		var name;
		if(result == null) result = new Array();
		haxe.Log.trace("FIX SORT",{ fileName : "TextureAtlas.hx", lineNumber : 165, className : "starling.textures.TextureAtlas", methodName : "getNames"});
		if(this.mSubTextureNames == null) this.mSubTextureNames = this.mSubTextures.keys();
		var $it0 = this.mSubTextureNames;
		while( $it0.hasNext() ) {
			var key = $it0.next();
			if(key.indexOf(prefix) == 0) result.push(key);
		}
		return result;
	}
	,getRegion: function(name) {
		var subTexture = this.mSubTextures.get(name);
		if(subTexture != null) return subTexture.get_region(); else return null;
	}
	,getFrame: function(name) {
		var subTexture = this.mSubTextures.get(name);
		if(subTexture != null) return subTexture.get_frame(); else return null;
	}
	,getRotation: function(name) {
		var subTexture = this.mSubTextures.get(name);
		if(subTexture != null) return subTexture.get_rotated(); else return false;
	}
	,addRegion: function(name,region,frame,rotated) {
		if(rotated == null) rotated = false;
		var v = new starling.textures.SubTexture(this.mAtlasTexture,region,false,frame,rotated);
		this.mSubTextures.set(name,v);
		v;
		this.mSubTextureNames = null;
	}
	,removeRegion: function(name) {
		var subTexture = this.mSubTextures.get(name);
		if(subTexture != null) subTexture.dispose();
		this.mSubTextures.remove(name);
		this.mSubTextureNames = null;
	}
	,get_texture: function() {
		return this.mAtlasTexture;
	}
	,__class__: starling.textures.TextureAtlas
	,__properties__: {get_texture:"get_texture"}
};
starling.textures.TextureOptions = function(scale,mipMapping,format,repeat) {
	if(repeat == null) repeat = false;
	if(mipMapping == null) mipMapping = false;
	if(scale == null) scale = 1.0;
	this.mRepeat = false;
	this.mOnReady = null;
	this.mOptimizeForRenderToTexture = false;
	if(format == null) format = openfl.display3D.Context3DTextureFormat.BGRA;
	this.mScale = scale;
	this.mFormat = format;
	this.mMipMapping = mipMapping;
	this.mRepeat = repeat;
};
$hxClasses["starling.textures.TextureOptions"] = starling.textures.TextureOptions;
starling.textures.TextureOptions.__name__ = ["starling","textures","TextureOptions"];
starling.textures.TextureOptions.prototype = {
	mScale: null
	,mFormat: null
	,mMipMapping: null
	,mOptimizeForRenderToTexture: null
	,mOnReady: null
	,mRepeat: null
	,clone: function() {
		var clone = new starling.textures.TextureOptions(this.mScale,this.mMipMapping,this.mFormat,this.mRepeat);
		clone.mOptimizeForRenderToTexture = this.mOptimizeForRenderToTexture;
		clone.mOnReady = this.mOnReady;
		return clone;
	}
	,get_scale: function() {
		return this.mScale;
	}
	,set_scale: function(value) {
		if(value > 0) this.mScale = value; else this.mScale = starling.core.Starling.get_ContentScaleFactor();
		return value;
	}
	,get_format: function() {
		return this.mFormat;
	}
	,set_format: function(value) {
		this.mFormat = value;
		return value;
	}
	,get_mipMapping: function() {
		return this.mMipMapping;
	}
	,set_mipMapping: function(value) {
		this.mMipMapping = value;
		return value;
	}
	,get_optimizeForRenderToTexture: function() {
		return this.mOptimizeForRenderToTexture;
	}
	,set_optimizeForRenderToTexture: function(value) {
		this.mOptimizeForRenderToTexture = value;
		return value;
	}
	,get_repeat: function() {
		return this.mRepeat;
	}
	,set_repeat: function(value) {
		this.mRepeat = value;
		return value;
	}
	,get_onReady: function() {
		return this.mOnReady;
	}
	,set_onReady: function(value) {
		this.mOnReady = value;
		return value;
	}
	,__class__: starling.textures.TextureOptions
	,__properties__: {set_onReady:"set_onReady",get_onReady:"get_onReady",set_repeat:"set_repeat",get_repeat:"get_repeat",set_optimizeForRenderToTexture:"set_optimizeForRenderToTexture",get_optimizeForRenderToTexture:"get_optimizeForRenderToTexture",set_mipMapping:"set_mipMapping",get_mipMapping:"get_mipMapping",set_format:"set_format",get_format:"get_format",set_scale:"set_scale",get_scale:"get_scale"}
};
starling.textures.TextureSmoothing = function() {
	throw new starling.errors.AbstractClassError();
};
$hxClasses["starling.textures.TextureSmoothing"] = starling.textures.TextureSmoothing;
starling.textures.TextureSmoothing.__name__ = ["starling","textures","TextureSmoothing"];
starling.textures.TextureSmoothing.isValid = function(smoothing) {
	return smoothing == starling.textures.TextureSmoothing.NONE || smoothing == starling.textures.TextureSmoothing.BILINEAR || smoothing == starling.textures.TextureSmoothing.TRILINEAR;
};
starling.textures.TextureSmoothing.prototype = {
	__class__: starling.textures.TextureSmoothing
};
starling.utils = {};
starling.utils.AssetManager = function(scaleFactor,useMipmaps) {
	if(useMipmaps == null) useMipmaps = false;
	if(scaleFactor == null) scaleFactor = 1;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.mQueue = this1;
	this.mDefaultTextureOptions = new starling.textures.TextureOptions(scaleFactor,useMipmaps);
	this.mTextures = new haxe.ds.StringMap();
	this.mAtlases = new haxe.ds.StringMap();
	this.mSounds = new haxe.ds.StringMap();
	this.mXmls = new haxe.ds.StringMap();
	this.mObjects = new haxe.ds.StringMap();
	this.mByteArrays = new haxe.ds.StringMap();
	this.mNumConnections = 1;
	this.mVerbose = true;
	starling.events.EventDispatcher.call(this);
};
$hxClasses["starling.utils.AssetManager"] = starling.utils.AssetManager;
starling.utils.AssetManager.__name__ = ["starling","utils","AssetManager"];
starling.utils.AssetManager.__super__ = starling.events.EventDispatcher;
starling.utils.AssetManager.prototype = $extend(starling.events.EventDispatcher.prototype,{
	mStarling: null
	,mNumLostTextures: null
	,mNumRestoredTextures: null
	,mNumLoadingQueues: null
	,mDefaultTextureOptions: null
	,mCheckPolicyFile: null
	,mKeepAtlasXmls: null
	,mKeepFontXmls: null
	,mNumConnections: null
	,mVerbose: null
	,mQueue: null
	,mTextures: null
	,mAtlases: null
	,mSounds: null
	,mXmls: null
	,mObjects: null
	,mByteArrays: null
	,queue: null
	,numQueuedAssets: null
	,isLoading: null
	,dispose: function() {
		var $it0 = this.mTextures.iterator();
		while( $it0.hasNext() ) {
			var texture = $it0.next();
			texture.dispose();
		}
		var $it1 = this.mAtlases.iterator();
		while( $it1.hasNext() ) {
			var atlas = $it1.next();
			atlas.dispose();
		}
		var $it2 = this.mByteArrays.iterator();
		while( $it2.hasNext() ) {
			var byteArray = $it2.next();
			byteArray.clear();
		}
	}
	,getTexture: function(name) {
		if(this.mTextures.exists(name)) return this.mTextures.get(name); else {
			var $it0 = this.mAtlases.iterator();
			while( $it0.hasNext() ) {
				var atlas = $it0.next();
				var texture = atlas.getTexture(name);
				if(texture != null) return texture;
			}
			return null;
		}
	}
	,getTextures: function(prefix,result) {
		if(prefix == null) prefix = "";
		if(result == null) result = new Array();
		var names = this.getTextureNames(prefix,(function($this) {
			var $r;
			var this1 = starling.utils.AssetManager.sNames;
			var value = new Array();
			{
				var _g1 = 0;
				var _g = this1.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value.push(this1.data[i]);
				}
			}
			$r = value;
			return $r;
		}(this)));
		var _g2 = 0;
		while(_g2 < names.length) {
			var name = names[_g2];
			++_g2;
			result[result.length] = this.getTexture(name);
		}
		var this2 = starling.utils.AssetManager.sNames;
		if(!this2.fixed) {
			if(0 > this2.length) {
				var data;
				var this3;
				this3 = new Array(0);
				data = this3;
				haxe.ds._Vector.Vector_Impl_.blit(this2.data,0,data,0,Std["int"](Math.min(this2.data.length,0)));
				this2.data = data;
			}
			this2.length = 0;
		}
		0;
		return result;
	}
	,getTextureNames: function(prefix,result) {
		if(prefix == null) prefix = "";
		result = this.getDictionaryKeys(this.mTextures,prefix,result);
		var $it0 = this.mAtlases.iterator();
		while( $it0.hasNext() ) {
			var atlas = $it0.next();
			result = atlas.getNames(prefix,result);
		}
		result.sort(function(a,b) {
			a = a.toLowerCase();
			b = b.toLowerCase();
			if(a < b) return -1;
			if(a > b) return 1;
			return 0;
		});
		return result;
	}
	,getTextureAtlas: function(name) {
		return this.mAtlases.get(name);
	}
	,getSound: function(name) {
		return this.mSounds.get(name);
	}
	,getSoundNames: function(prefix,result) {
		if(prefix == null) prefix = "";
		return this.getDictionaryKeys(this.mSounds,prefix,result);
	}
	,playSound: function(name,startTime,loops,transform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0;
		if(this.mSounds.exists(name)) return this.getSound(name).play(startTime,loops,transform); else return null;
	}
	,getXml: function(name) {
		return this.mXmls.get(name);
	}
	,getXmlNames: function(prefix,result) {
		if(prefix == null) prefix = "";
		return this.getDictionaryKeys(this.mXmls,prefix,result);
	}
	,getObject: function(name) {
		return this.mObjects.get(name);
	}
	,getObjectNames: function(prefix,result) {
		if(prefix == null) prefix = "";
		return this.getDictionaryKeys(this.mObjects,prefix,result);
	}
	,getByteArray: function(name) {
		return this.mByteArrays.get(name);
	}
	,getByteArrayNames: function(prefix,result) {
		if(prefix == null) prefix = "";
		return this.getDictionaryKeys(this.mByteArrays,prefix,result);
	}
	,addTexture: function(name,texture) {
		this.log("Adding texture '" + name + "'");
		if(this.mTextures.exists(name)) {
			this.log("Warning: name was already in use; the previous texture will be replaced.");
			this.mTextures.get(name).dispose();
		}
		this.mTextures.set(name,texture);
		texture;
	}
	,addTextureAtlas: function(name,atlas) {
		this.log("Adding texture atlas '" + name + "'");
		if(this.mAtlases.exists(name)) {
			this.log("Warning: name was already in use; the previous atlas will be replaced.");
			this.mAtlases.get(name).dispose();
		}
		this.mAtlases.set(name,atlas);
		atlas;
	}
	,addSound: function(name,sound) {
		this.log("Adding sound '" + name + "'");
		if(this.mSounds.exists(name)) this.log("Warning: name was already in use; the previous sound will be replaced.");
		this.mSounds.set(name,sound);
		sound;
	}
	,addXml: function(name,xml) {
		this.log("Adding Xml '" + name + "'");
		if(this.mXmls.exists(name)) this.log("Warning: name was already in use; the previous Xml will be replaced.");
		this.mXmls.set(name,xml);
		xml;
	}
	,addObject: function(name,object) {
		this.log("Adding object '" + name + "'");
		if(this.mObjects.exists(name)) this.log("Warning: name was already in use; the previous object will be replaced.");
		var v = object;
		this.mObjects.set(name,v);
		v;
	}
	,addByteArray: function(name,byteArray) {
		this.log("Adding byte array '" + name + "'");
		if(this.mByteArrays.exists(name)) {
			this.log("Warning: name was already in use; the previous byte array will be replaced.");
			this.mByteArrays.get(name).clear();
		}
		this.mByteArrays.set(name,byteArray);
		byteArray;
	}
	,removeTexture: function(name,dispose) {
		if(dispose == null) dispose = true;
		this.log("Removing texture '" + name + "'");
		if(dispose && this.mTextures.exists(name)) this.mTextures.get(name).dispose();
		this.mTextures.remove(name);
	}
	,removeTextureAtlas: function(name,dispose) {
		if(dispose == null) dispose = true;
		this.log("Removing texture atlas '" + name + "'");
		if(dispose && this.mAtlases.exists(name)) this.mAtlases.get(name).dispose();
		this.mAtlases.remove(name);
	}
	,removeSound: function(name) {
		this.log("Removing sound '" + name + "'");
		this.mSounds.remove(name);
	}
	,removeXml: function(name,dispose) {
		if(dispose == null) dispose = true;
		this.log("Removing xml '" + name + "'");
		if(dispose && this.mXmls.exists(name)) this.mXmls.remove(name);
	}
	,removeObject: function(name) {
		this.log("Removing object '" + name + "'");
		this.mObjects.remove(name);
	}
	,removeByteArray: function(name,dispose) {
		if(dispose == null) dispose = true;
		this.log("Removing byte array '" + name + "'");
		if(dispose && this.mByteArrays.exists(name)) this.mByteArrays.get(name).clear();
		this.mByteArrays.remove(name);
	}
	,purgeQueue: function() {
		var this1 = this.mQueue;
		if(!this1.fixed) {
			if(0 > this1.length) {
				var data;
				var this2;
				this2 = new Array(0);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,0)));
				this1.data = data;
			}
			this1.length = 0;
		}
		0;
		this.dispatchEventWith(starling.events.Event.CANCEL);
	}
	,purge: function() {
		this.log("Purging all assets, emptying queue");
		this.purgeQueue();
		this.dispose();
		this.mTextures = new haxe.ds.StringMap();
		this.mAtlases = new haxe.ds.StringMap();
		this.mSounds = new haxe.ds.StringMap();
		this.mXmls = new haxe.ds.StringMap();
		this.mObjects = new haxe.ds.StringMap();
		this.mByteArrays = new haxe.ds.StringMap();
	}
	,enqueue: function(rawAssets) {
		haxe.Log.trace("FIX",{ fileName : "AssetManager.hx", lineNumber : 517, className : "starling.utils.AssetManager", methodName : "enqueue"});
		if((rawAssets instanceof Array) && rawAssets.__enum__ == null) {
			var rawAssetsArray = rawAssets;
			var _g1 = 0;
			var _g = rawAssetsArray.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.enqueueItem(rawAssetsArray[i]);
			}
		} else this.enqueueItem(rawAssets);
	}
	,enqueueItem: function(rawAssets) {
		var fields = Reflect.fields(rawAssets);
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			var child = Reflect.getProperty(rawAssets,field);
			if((child instanceof Array) && child.__enum__ == null) this.enqueue(child); else if(typeof(child) == "string" || js.Boot.__instanceof(child,openfl.net.URLRequest)) this.enqueueWithName(child); else this.log("Ignoring unsupported asset type: " + Type.getClassName(Type.getClass(child)));
		}
	}
	,enqueueWithName: function(asset,name,options) {
		haxe.Log.trace("CHECK",{ fileName : "AssetManager.hx", lineNumber : 597, className : "starling.utils.AssetManager", methodName : "enqueueWithName"});
		if(Type.getClassName(Type.getClass(asset)) == "flash.filesystem.File") asset = StringTools.urlDecode(Reflect.getProperty(asset,"url"));
		if(name == null) name = this.getName(asset);
		if(options == null) options = this.mDefaultTextureOptions.clone(); else options = options.clone();
		this.log("Enqueuing '" + name + "'");
		var this1 = this.mQueue;
		if(!this1.fixed) {
			this1.length++;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
			this1.data[this1.length - 1] = { name : name, asset : asset, options : options};
		}
		this1.length;
		return name;
	}
	,loadQueue: function(onProgress) {
		var _g = this;
		if(onProgress == null) throw new openfl.errors.ArgumentError("Argument 'onProgress' must not be null");
		if(this.mQueue.length == 0) {
			onProgress(1.0);
			return;
		}
		this.mStarling = starling.core.Starling.get_current();
		if(this.mStarling == null || this.mStarling.get_context() == null) throw new openfl.errors.Error("The Starling instance needs to be ready before assets can be loaded.");
		var PROGRESS_PART_ASSETS = 0.9;
		var PROGRESS_PART_XMLS = 1.0 - PROGRESS_PART_ASSETS;
		var i;
		var canceled = false;
		var xmls = new Array();
		var assetInfos;
		var this1 = this.mQueue;
		var a;
		var this2;
		var this3;
		this3 = new openfl.VectorData();
		var this4;
		this4 = new Array(0);
		this3.data = this4;
		this3.length = 0;
		this3.fixed = false;
		this2 = this3;
		a = this2;
		var vectorData = new openfl.VectorData();
		if(a != null) vectorData.length = this1.length + a.length; else vectorData.length = this1.length;
		vectorData.fixed = false;
		var this5;
		this5 = new Array(vectorData.length);
		vectorData.data = this5;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
		if(a != null) haxe.ds._Vector.Vector_Impl_.blit(a.data,0,vectorData.data,this1.length,a.length);
		assetInfos = vectorData;
		var assetCount = this.mQueue.length;
		var assetProgress = new Array();
		var assetIndex = 0;
		var updateAssetProgress = null;
		var loadQueueElement = null;
		var loadNextQueueElement = null;
		var processXmls = null;
		var processXml = null;
		var cancel = null;
		var finish = null;
		updateAssetProgress = function(index,progress) {
			assetProgress[index] = progress;
			var sum = 0.0;
			var len = assetProgress.length;
			var _g1 = 0;
			while(_g1 < len) {
				var i1 = _g1++;
				sum += assetProgress[i1];
			}
			onProgress(sum / len * PROGRESS_PART_ASSETS);
		};
		loadQueueElement = function(index1,assetInfo) {
			if(canceled) return;
			var onElementProgress = function(progress1) {
				updateAssetProgress(index1,progress1 * 0.8);
			};
			var onElementLoaded = function() {
				updateAssetProgress(index1,1.0);
				assetCount--;
				if(assetCount > 0) loadNextQueueElement(); else processXmls();
			};
			_g.processRawAsset(assetInfo.name,assetInfo.asset,assetInfo.options,xmls,onElementProgress,onElementLoaded);
		};
		loadNextQueueElement = function() {
			if(assetIndex < assetInfos.length) {
				var index2 = assetIndex++;
				loadQueueElement(index2,assetInfos.data[index2]);
			}
		};
		processXmls = function() {
			haxe.Log.trace("FIX",{ fileName : "AssetManager.hx", lineNumber : 717, className : "starling.utils.AssetManager", methodName : "loadQueue"});
			haxe.Timer.delay(function() {
				processXml(0);
			},1);
		};
		processXml = function(index3) {
			if(canceled) return; else if(index3 == xmls.length) {
				finish();
				return;
			}
			haxe.Log.trace("FIX",{ fileName : "AssetManager.hx", lineNumber : 737, className : "starling.utils.AssetManager", methodName : "loadQueue"});
			var name;
			var texture;
			var xml = xmls[index3];
			var rootNode = "";
			var xmlProgress = (index3 + 1) / (xmls.length + 1);
			var firstElement = xml.firstElement();
			if(firstElement.nodeType == Xml.Element) rootNode = firstElement.get_nodeName();
			if(rootNode == "TextureAtlas") {
				name = firstElement.get("imagePath").split(".")[0];
				texture = _g.getTexture(name);
				if(texture != null) {
					_g.addTextureAtlas(name,new starling.textures.TextureAtlas(texture,xml));
					_g.removeTexture(name,false);
					if(_g.mKeepAtlasXmls) _g.addXml(name,xml);
				} else _g.log("Cannot create atlas: texture '" + name + "' is missing.");
			} else if(rootNode == "font") {
				name = "";
				var $it0 = xml.elementsNamed("font");
				while( $it0.hasNext() ) {
					var font = $it0.next();
					if(font.nodeType == Xml.Element) {
						var $it1 = font.elementsNamed("pages");
						while( $it1.hasNext() ) {
							var pages = $it1.next();
							if(pages.nodeType == Xml.Element) {
								var $it2 = pages.elementsNamed("page");
								while( $it2.hasNext() ) {
									var page = $it2.next();
									if(page.nodeType == Xml.Element) name = page.get("file").split(".")[0];
								}
							}
						}
					}
				}
				texture = _g.getTexture(name);
				if(texture != null) {
					_g.log("Adding bitmap font '" + name + "'");
					starling.text.TextField.registerBitmapFont(new starling.text.BitmapFont(texture,xml),name);
					_g.removeTexture(name,false);
					if(_g.mKeepFontXmls) _g.addXml(name,xml);
				} else _g.log("Cannot create bitmap font: texture '" + name + "' is missing.");
			} else throw new openfl.errors.Error("Xml contents not recognized: " + rootNode);
			onProgress(PROGRESS_PART_ASSETS + PROGRESS_PART_XMLS * xmlProgress);
			haxe.Timer.delay(function() {
				processXml(index3 + 1);
			},1);
		};
		cancel = function() {
			_g.removeEventListener(starling.events.Event.CANCEL,cancel);
			_g.mNumLoadingQueues--;
			canceled = true;
		};
		finish = function() {
			openfl.system.System.gc();
			haxe.Timer.delay(function() {
				if(!canceled) {
					cancel();
					onProgress(1.0);
				}
			},1);
		};
		var _g2 = 0;
		while(_g2 < assetCount) {
			var i2 = _g2++;
			assetProgress[i2] = 0.0;
		}
		var _g11 = 0;
		var _g3 = this.mNumConnections;
		while(_g11 < _g3) {
			var i3 = _g11++;
			loadNextQueueElement();
		}
		var this6 = this.mQueue;
		if(!this6.fixed) {
			if(0 > this6.length) {
				var data;
				var this7;
				this7 = new Array(0);
				data = this7;
				haxe.ds._Vector.Vector_Impl_.blit(this6.data,0,data,0,Std["int"](Math.min(this6.data.length,0)));
				this6.data = data;
			}
			this6.length = 0;
		}
		0;
		this.mNumLoadingQueues++;
		this.addEventListener(starling.events.Event.CANCEL,cancel);
	}
	,processRawAsset: function(name,rawAsset,options,xmls,onProgress,onComplete) {
		var _g = this;
		var canceled = false;
		var process = null;
		var progress = null;
		var cancel = null;
		process = function(asset) {
			var texture;
			var bytes;
			var object = null;
			var xml = null;
			_g.mStarling.makeCurrent();
			if(canceled) {
			} else if(asset == null) onComplete(); else if(js.Boot.__instanceof(asset,openfl.media.Sound)) {
				_g.addSound(name,asset);
				onComplete();
			} else if(js.Boot.__instanceof(asset,Xml)) {
				haxe.Log.trace("CHECK",{ fileName : "AssetManager.hx", lineNumber : 878, className : "starling.utils.AssetManager", methodName : "processRawAsset"});
				xml = asset;
				var firstNodeName = "";
				if(xml.firstElement().nodeType == Xml.Element) firstNodeName = xml.firstElement().get_nodeName();
				if(firstNodeName == "TextureAtlas" || firstNodeName == "font") xmls.push(xml); else _g.addXml(name,xml);
				onComplete();
			} else if(starling.core.Starling.get_handleLostContext() && _g.mStarling.get_context().driverInfo == "Disposed") {
				_g.log("Context lost while processing assets, retrying ...");
				haxe.Timer.delay(function() {
					process(asset);
				},1);
				return;
			} else if(js.Boot.__instanceof(asset,openfl.display.Bitmap)) {
				texture = starling.textures.Texture.fromData(asset,options);
				texture.get_root().set_onRestore(function() {
					_g.mNumLostTextures++;
					_g.loadRawAsset(rawAsset,null,function(asset1) {
						try {
							texture.get_root().uploadBitmap(asset1);
						} catch( e ) {
							if( js.Boot.__instanceof(e,openfl.errors.Error) ) {
								_g.log("Texture restoration failed: " + e.message);
							} else throw(e);
						}
						asset1.bitmapData.dispose();
						_g.mNumRestoredTextures++;
						if(_g.mNumLostTextures == _g.mNumRestoredTextures) _g.dispatchEventWith(starling.events.Event.TEXTURES_RESTORED);
					});
				});
				asset.bitmapData.dispose();
				_g.addTexture(name,texture);
				onComplete();
			} else if(js.Boot.__instanceof(asset,openfl.display.BitmapData)) {
				texture = starling.textures.Texture.fromData(asset,options);
				texture.get_root().set_onRestore(function() {
					_g.mNumLostTextures++;
					_g.loadRawAsset(rawAsset,null,function(asset2) {
						try {
							texture.get_root().uploadBitmapData(asset2);
						} catch( e1 ) {
							if( js.Boot.__instanceof(e1,openfl.errors.Error) ) {
								_g.log("Texture restoration failed: " + e1.message);
							} else throw(e1);
						}
						asset2.dispose();
						_g.mNumRestoredTextures++;
						if(_g.mNumLostTextures == _g.mNumRestoredTextures) _g.dispatchEventWith(starling.events.Event.TEXTURES_RESTORED);
					});
				});
				asset.dispose();
				_g.addTexture(name,texture);
				onComplete();
			} else if(js.Boot.__instanceof(asset,lime.utils.ByteArray)) {
				bytes = asset;
				if(starling.textures.AtfData.isAtfData(bytes)) {
					options.set_onReady(_g.prependCallback(options.get_onReady(),onComplete));
					texture = starling.textures.Texture.fromData(bytes,options);
					texture.get_root().set_onRestore(function() {
						_g.mNumLostTextures++;
						_g.loadRawAsset(rawAsset,null,function(asset3) {
							try {
								texture.get_root().uploadAtfData(asset3,0,true);
							} catch( e2 ) {
								if( js.Boot.__instanceof(e2,openfl.errors.Error) ) {
									_g.log("Texture restoration failed: " + e2.message);
								} else throw(e2);
							}
							asset3.clear();
							_g.mNumRestoredTextures++;
							if(_g.mNumLostTextures == _g.mNumRestoredTextures) _g.dispatchEventWith(starling.events.Event.TEXTURES_RESTORED);
						});
					});
					bytes.clear();
					_g.addTexture(name,texture);
				} else if(_g.byteArrayStartsWith(bytes,"{") || _g.byteArrayStartsWith(bytes,"[")) haxe.Log.trace("FIX",{ fileName : "AssetManager.hx", lineNumber : 976, className : "starling.utils.AssetManager", methodName : "processRawAsset"}); else if(_g.byteArrayStartsWith(bytes,"<")) haxe.Log.trace("FIX",{ fileName : "AssetManager.hx", lineNumber : 991, className : "starling.utils.AssetManager", methodName : "processRawAsset"}); else {
					_g.addByteArray(name,bytes);
					onComplete();
				}
			} else {
				_g.addObject(name,asset);
				onComplete();
			}
			asset = null;
			bytes = null;
			_g.removeEventListener(starling.events.Event.CANCEL,cancel);
		};
		progress = function(ratio) {
			if(!canceled) onProgress(ratio);
		};
		cancel = function() {
			canceled = true;
		};
		this.addEventListener(starling.events.Event.CANCEL,cancel);
		this.loadRawAsset(rawAsset,progress,process);
	}
	,loadRawAsset: function(rawAsset,onProgress,onComplete) {
		var _g = this;
		var onIoError = null;
		var onSecurityError = null;
		var onHttpResponseStatus = null;
		var onLoadProgress = null;
		var onUrlLoaderComplete = null;
		var onLoaderComplete = null;
		var complete = null;
		var extension = null;
		var loaderInfo = null;
		var urlLoader = null;
		var urlRequest = null;
		var url = null;
		onIoError = function(event) {
			_g.log("IO error: " + event.text);
			_g.dispatchEventWith(starling.events.Event.IO_ERROR,false,url);
			complete(null);
		};
		onSecurityError = function(event1) {
			_g.log("security error: " + event1.text);
			_g.dispatchEventWith(starling.events.Event.SECURITY_ERROR,false,url);
			complete(null);
		};
		onHttpResponseStatus = function(event2) {
			haxe.Log.trace("FIX",{ fileName : "AssetManager.hx", lineNumber : 1082, className : "starling.utils.AssetManager", methodName : "loadRawAsset"});
		};
		onLoadProgress = function(event3) {
			if(onProgress != null && event3.bytesTotal > 0) onProgress(event3.bytesLoaded / event3.bytesTotal);
		};
		onUrlLoaderComplete = function(event4) {
			var bytes = _g.transformData(urlLoader.data,url);
			var sound;
			if(bytes == null) {
				complete(null);
				return;
			}
			if(extension != null) extension = extension.toLowerCase();
			switch(extension) {
			case "mpeg":
				break;
			case "mp3":
				sound = new openfl.media.Sound();
				sound.loadCompressedDataFromByteArray(bytes,bytes.length);
				bytes.clear();
				complete(sound);
				break;
			case "jpg":
				break;
			case "jpeg":
				break;
			case "png":
				break;
			case "gif":
				var loaderContext = new openfl.system.LoaderContext(_g.mCheckPolicyFile);
				var loader = new openfl.display.Loader();
				loaderInfo = loader.contentLoaderInfo;
				loaderInfo.addEventListener(openfl.events.IOErrorEvent.IO_ERROR,onIoError);
				loaderInfo.addEventListener(starling.events.Event.COMPLETE,onLoaderComplete);
				loader.loadBytes(bytes);
				break;
			default:
				complete(bytes);
			}
		};
		onLoaderComplete = function(event5) {
			urlLoader.data.clear();
			complete(event5.target.content);
		};
		complete = function(asset) {
			if(urlLoader != null) {
				urlLoader.removeEventListener(openfl.events.IOErrorEvent.IO_ERROR,onIoError);
				urlLoader.removeEventListener(openfl.events.SecurityErrorEvent.SECURITY_ERROR,onSecurityError);
				urlLoader.removeEventListener(starling.utils.AssetManager.HTTP_RESPONSE_STATUS,onHttpResponseStatus);
				urlLoader.removeEventListener(openfl.events.ProgressEvent.PROGRESS,onLoadProgress);
				urlLoader.removeEventListener(starling.events.Event.COMPLETE,onUrlLoaderComplete);
			}
			if(loaderInfo != null) {
				loaderInfo.removeEventListener(openfl.events.IOErrorEvent.IO_ERROR,onIoError);
				loaderInfo.removeEventListener(starling.events.Event.COMPLETE,onLoaderComplete);
			}
			haxe.Log.trace("SystemUtil.isDesktop = " + Std.string(starling.utils.SystemUtil.get_isDesktop()),{ fileName : "AssetManager.hx", lineNumber : 1165, className : "starling.utils.AssetManager", methodName : "loadRawAsset"});
			haxe.Log.trace("CHECK THIS IS NEEDED",{ fileName : "AssetManager.hx", lineNumber : 1167, className : "starling.utils.AssetManager", methodName : "loadRawAsset"});
			onComplete(asset);
		};
		if(js.Boot.__instanceof(rawAsset,Class)) haxe.Timer.delay(function() {
			complete(Type.createInstance(rawAsset,[]));
		},1); else if(typeof(rawAsset) == "string" || js.Boot.__instanceof(rawAsset,openfl.net.URLRequest)) {
			if(typeof(rawAsset) == "string") urlRequest = new openfl.net.URLRequest(rawAsset); else urlRequest = rawAsset;
			url = urlRequest.url;
			extension = this.getExtensionFromUrl(url);
			urlLoader = new openfl.net.URLLoader();
			urlLoader.set_dataFormat(openfl.net.URLLoaderDataFormat.BINARY);
			urlLoader.addEventListener(openfl.events.IOErrorEvent.IO_ERROR,onIoError);
			urlLoader.addEventListener(openfl.events.SecurityErrorEvent.SECURITY_ERROR,onSecurityError);
			urlLoader.addEventListener(starling.utils.AssetManager.HTTP_RESPONSE_STATUS,onHttpResponseStatus);
			urlLoader.addEventListener(openfl.events.ProgressEvent.PROGRESS,onLoadProgress);
			urlLoader.addEventListener(starling.events.Event.COMPLETE,onUrlLoaderComplete);
			urlLoader.load(urlRequest);
		} else if(js.Boot.__instanceof(rawAsset,Dynamic)) haxe.Timer.delay(function() {
			complete(rawAsset);
		},1);
	}
	,getName: function(rawAsset) {
		var name = null;
		if(typeof(rawAsset) == "string") name = js.Boot.__cast(rawAsset , String); else if(js.Boot.__instanceof(rawAsset,openfl.net.URLRequest)) name = (js.Boot.__cast(rawAsset , openfl.net.URLRequest)).url;
		if(name != null) {
			name = StringTools.replace(name,"%20"," ");
			name = this.getBasenameFromUrl(name);
			if(name != null) return name; else throw new openfl.errors.ArgumentError("Could not extract name from String '" + Std.string(rawAsset) + "'");
		} else {
			name = Type.getClassName(Type.getClass(rawAsset));
			throw new openfl.errors.ArgumentError("Cannot extract names for objects of type '" + name + "'");
		}
	}
	,transformData: function(data,url) {
		return data;
	}
	,log: function(message) {
		if(this.mVerbose) haxe.Log.trace("[AssetManager]",{ fileName : "AssetManager.hx", lineNumber : 1257, className : "starling.utils.AssetManager", methodName : "log", customParams : [message]});
	}
	,byteArrayStartsWith: function(bytes,$char) {
		var start = 0;
		var length = bytes.length;
		var wanted = HxOverrides.cca($char,0);
		var b0 = 0;
		var b1 = 0;
		var b2 = 0;
		var b3 = 0;
		var pass = false;
		if(pass == false && length >= 4) {
			bytes.position = 0;
			b0 = bytes.readByte();
			b1 = bytes.readByte();
			b2 = bytes.readByte();
			b3 = bytes.readByte();
			if(b0 == 0 && b1 == 0 && b2 == 254 && b3 == 255 || b0 == 255 && b1 == 254 && b2 == 0 && b3 == 0) {
				start = 4;
				pass = true;
			}
		}
		if(pass == false && length >= 3) {
			bytes.position = 0;
			b0 = bytes.readByte();
			b1 = bytes.readByte();
			b2 = bytes.readByte();
			if(b0 == 239 && b1 == 187 && b2 == 191) {
				start = 3;
				pass = true;
			}
		}
		if(pass == false && length >= 2) {
			bytes.position = 0;
			b0 = bytes.readByte();
			b1 = bytes.readByte();
			if(b0 == 254 && b1 == 255 || b0 == 255 && b1 == 254) {
				start = 2;
				pass = true;
			}
		}
		bytes.position = start;
		var _g = start;
		while(_g < length) {
			var i = _g++;
			var $byte = bytes.readByte();
			if($byte == 0 || $byte == 10 || $byte == 13 || $byte == 32) continue; else return $byte == wanted;
		}
		return false;
	}
	,getDictionaryKeys: function(map,prefix,result) {
		if(prefix == null) prefix = "";
		if(result == null) result = new Array();
		haxe.Log.trace("CHECK!",{ fileName : "AssetManager.hx", lineNumber : 1326, className : "starling.utils.AssetManager", methodName : "getDictionaryKeys"});
		var $it0 = map.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			if(key.indexOf(prefix) == 0) result.push(key);
		}
		haxe.Log.trace("CHECK Array.CASEINSENSITIVE is needed",{ fileName : "AssetManager.hx", lineNumber : 1341, className : "starling.utils.AssetManager", methodName : "getDictionaryKeys"});
		return result;
	}
	,getHttpHeader: function(headers,headerName) {
		if(headers != null) {
			var _g1 = 0;
			var _g = headers.length;
			while(_g1 < _g) {
				var i = _g1++;
				var header = headers[i];
				if(Reflect.getProperty(header,"name") == headerName) return Reflect.getProperty(header,"value");
			}
		}
		return null;
	}
	,getBasenameFromUrl: function(url) {
		haxe.Log.trace("RESTORE REGEX",{ fileName : "AssetManager.hx", lineNumber : 1364, className : "starling.utils.AssetManager", methodName : "getBasenameFromUrl"});
		var split = url.split("/");
		var returnVal = split[split.length - 1];
		var split1 = url.split(".");
		return split1[0];
	}
	,getExtensionFromUrl: function(url) {
		haxe.Log.trace("RESTORE REGEX",{ fileName : "AssetManager.hx", lineNumber : 1377, className : "starling.utils.AssetManager", methodName : "getExtensionFromUrl"});
		var split = url.split("/");
		var returnVal = split[split.length - 1];
		var split1 = url.split(".");
		return split1[split1.length - 1];
	}
	,prependCallback: function(oldCallback,newCallback) {
		if(oldCallback == null) return newCallback; else if(newCallback == null) return oldCallback; else return function() {
			newCallback();
			oldCallback();
		};
	}
	,get_queue: function() {
		var this1 = this.mQueue;
		var value = new Array();
		var _g1 = 0;
		var _g = this1.data.length;
		while(_g1 < _g) {
			var i = _g1++;
			value.push(this1.data[i]);
		}
		return value;
	}
	,get_numQueuedAssets: function() {
		return this.mQueue.length;
	}
	,get_verbose: function() {
		return this.mVerbose;
	}
	,set_verbose: function(value) {
		this.mVerbose = value;
		return value;
	}
	,get_isLoading: function() {
		return this.mNumLoadingQueues > 0;
	}
	,get_useMipMaps: function() {
		return this.mDefaultTextureOptions.get_mipMapping();
	}
	,set_useMipMaps: function(value) {
		this.mDefaultTextureOptions.set_mipMapping(value);
		return value;
	}
	,get_textureRepeat: function() {
		return this.mDefaultTextureOptions.get_repeat();
	}
	,set_textureRepeat: function(value) {
		this.mDefaultTextureOptions.set_repeat(value);
		return value;
	}
	,get_scaleFactor: function() {
		return this.mDefaultTextureOptions.get_scale();
	}
	,set_scaleFactor: function(value) {
		this.mDefaultTextureOptions.set_scale(value);
		return value;
	}
	,get_textureFormat: function() {
		return this.mDefaultTextureOptions.get_format();
	}
	,set_textureFormat: function(value) {
		this.mDefaultTextureOptions.set_format(value);
		return value;
	}
	,get_checkPolicyFile: function() {
		return this.mCheckPolicyFile;
	}
	,set_checkPolicyFile: function(value) {
		this.mCheckPolicyFile = value;
		return value;
	}
	,get_keepAtlasXmls: function() {
		return this.mKeepAtlasXmls;
	}
	,set_keepAtlasXmls: function(value) {
		this.mKeepAtlasXmls = value;
		return value;
	}
	,get_keepFontXmls: function() {
		return this.mKeepFontXmls;
	}
	,set_keepFontXmls: function(value) {
		this.mKeepFontXmls = value;
		return value;
	}
	,get_numConnections: function() {
		return this.mNumConnections;
	}
	,set_numConnections: function(value) {
		this.mNumConnections = value;
		return value;
	}
	,__class__: starling.utils.AssetManager
	,__properties__: {set_numConnections:"set_numConnections",get_numConnections:"get_numConnections",set_keepFontXmls:"set_keepFontXmls",get_keepFontXmls:"get_keepFontXmls",set_keepAtlasXmls:"set_keepAtlasXmls",get_keepAtlasXmls:"get_keepAtlasXmls",set_checkPolicyFile:"set_checkPolicyFile",get_checkPolicyFile:"get_checkPolicyFile",set_textureFormat:"set_textureFormat",get_textureFormat:"get_textureFormat",set_scaleFactor:"set_scaleFactor",get_scaleFactor:"get_scaleFactor",set_textureRepeat:"set_textureRepeat",get_textureRepeat:"get_textureRepeat",set_useMipMaps:"set_useMipMaps",get_useMipMaps:"get_useMipMaps",get_isLoading:"get_isLoading",set_verbose:"set_verbose",get_verbose:"get_verbose",get_numQueuedAssets:"get_numQueuedAssets",get_queue:"get_queue"}
});
starling.utils.Color = function() {
	throw new starling.errors.AbstractClassError();
};
$hxClasses["starling.utils.Color"] = starling.utils.Color;
starling.utils.Color.__name__ = ["starling","utils","Color"];
starling.utils.Color.getAlpha = function(color) {
	return color >> 24 & 255;
};
starling.utils.Color.getRed = function(color) {
	return color >> 16 & 255;
};
starling.utils.Color.getGreen = function(color) {
	return color >> 8 & 255;
};
starling.utils.Color.getBlue = function(color) {
	return color & 255;
};
starling.utils.Color.rgb = function(red,green,blue) {
	return red << 16 | green << 8 | blue;
};
starling.utils.Color.argb = function(alpha,red,green,blue) {
	return alpha << 24 | red << 16 | green << 8 | blue;
};
starling.utils.Color.prototype = {
	__class__: starling.utils.Color
};
starling.utils.HAlign = $hxClasses["starling.utils.HAlign"] = { __ename__ : true, __constructs__ : ["LEFT","RIGHT","CENTER"] };
starling.utils.HAlign.LEFT = ["LEFT",0];
starling.utils.HAlign.LEFT.toString = $estr;
starling.utils.HAlign.LEFT.__enum__ = starling.utils.HAlign;
starling.utils.HAlign.RIGHT = ["RIGHT",1];
starling.utils.HAlign.RIGHT.toString = $estr;
starling.utils.HAlign.RIGHT.__enum__ = starling.utils.HAlign;
starling.utils.HAlign.CENTER = ["CENTER",2];
starling.utils.HAlign.CENTER.toString = $estr;
starling.utils.HAlign.CENTER.__enum__ = starling.utils.HAlign;
starling.utils.MathUtil = function() {
	throw new starling.errors.AbstractClassError();
};
$hxClasses["starling.utils.MathUtil"] = starling.utils.MathUtil;
starling.utils.MathUtil.__name__ = ["starling","utils","MathUtil"];
starling.utils.MathUtil.intersectLineWithXYPlane = function(pointA,pointB,resultPoint) {
	if(resultPoint == null) resultPoint = new openfl.geom.Point();
	var vectorX = pointB.x - pointA.x;
	var vectorY = pointB.y - pointA.y;
	var vectorZ = pointB.z - pointA.z;
	var lambda = -pointA.z / vectorZ;
	resultPoint.x = pointA.x + lambda * vectorX;
	resultPoint.y = pointA.y + lambda * vectorY;
	return resultPoint;
};
starling.utils.MathUtil.normalizeAngle = function(angle) {
	angle = angle % starling.utils.MathUtil.TWO_PI;
	if(angle < -Math.PI) angle += starling.utils.MathUtil.TWO_PI;
	if(angle > Math.PI) angle -= starling.utils.MathUtil.TWO_PI;
	return angle;
};
starling.utils.MathUtil.clamp = function(value,min,max) {
	if(value < min) return min; else if(value > max) return max; else return value;
};
starling.utils.MathUtil.prototype = {
	__class__: starling.utils.MathUtil
};
starling.utils.MatrixUtil = function() {
	throw new starling.errors.AbstractClassError();
};
$hxClasses["starling.utils.MatrixUtil"] = starling.utils.MatrixUtil;
starling.utils.MatrixUtil.__name__ = ["starling","utils","MatrixUtil"];
starling.utils.MatrixUtil.__properties__ = {get_sRawData:"get_sRawData"}
starling.utils.MatrixUtil._sRawData = null;
starling.utils.MatrixUtil.sRawData = null;
starling.utils.MatrixUtil.convertTo3D = function(matrix,resultMatrix) {
	if(resultMatrix == null) resultMatrix = new openfl.geom.Matrix3D();
	var this1 = starling.utils.MatrixUtil.get_sRawData();
	if(!this1.fixed) {
		if(0 >= this1.length) this1.length = 1;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
	}
	this1.data[0] = matrix.a;
	var this3 = starling.utils.MatrixUtil.get_sRawData();
	if(!this3.fixed) {
		if(1 >= this3.length) this3.length = 2;
		if(this3.data.length < this3.length) {
			var data1;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data1 = this4;
			haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
			this3.data = data1;
		}
	}
	this3.data[1] = matrix.b;
	var this5 = starling.utils.MatrixUtil.get_sRawData();
	if(!this5.fixed) {
		if(4 >= this5.length) this5.length = 5;
		if(this5.data.length < this5.length) {
			var data2;
			var this6;
			this6 = new Array(this5.data.length + 10);
			data2 = this6;
			haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
			this5.data = data2;
		}
	}
	this5.data[4] = matrix.c;
	var this7 = starling.utils.MatrixUtil.get_sRawData();
	if(!this7.fixed) {
		if(5 >= this7.length) this7.length = 6;
		if(this7.data.length < this7.length) {
			var data3;
			var this8;
			this8 = new Array(this7.data.length + 10);
			data3 = this8;
			haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
			this7.data = data3;
		}
	}
	this7.data[5] = matrix.d;
	var this9 = starling.utils.MatrixUtil.get_sRawData();
	if(!this9.fixed) {
		if(12 >= this9.length) this9.length = 13;
		if(this9.data.length < this9.length) {
			var data4;
			var this10;
			this10 = new Array(this9.data.length + 10);
			data4 = this10;
			haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
			this9.data = data4;
		}
	}
	this9.data[12] = matrix.tx;
	var this11 = starling.utils.MatrixUtil.get_sRawData();
	if(!this11.fixed) {
		if(13 >= this11.length) this11.length = 14;
		if(this11.data.length < this11.length) {
			var data5;
			var this12;
			this12 = new Array(this11.data.length + 10);
			data5 = this12;
			haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
			this11.data = data5;
		}
	}
	this11.data[13] = matrix.ty;
	resultMatrix.copyRawDataFrom(starling.utils.MatrixUtil.get_sRawData());
	return resultMatrix;
};
starling.utils.MatrixUtil.convertTo2D = function(matrix3D,resultMatrix) {
	if(resultMatrix == null) resultMatrix = new openfl.geom.Matrix();
	matrix3D.copyRawDataTo(starling.utils.MatrixUtil.sRawData2);
	resultMatrix.a = starling.utils.MatrixUtil.sRawData2.data[0];
	resultMatrix.b = starling.utils.MatrixUtil.sRawData2.data[1];
	resultMatrix.c = starling.utils.MatrixUtil.sRawData2.data[4];
	resultMatrix.d = starling.utils.MatrixUtil.sRawData2.data[5];
	resultMatrix.tx = starling.utils.MatrixUtil.sRawData2.data[12];
	resultMatrix.ty = starling.utils.MatrixUtil.sRawData2.data[13];
	return resultMatrix;
};
starling.utils.MatrixUtil.transformPoint = function(matrix,point,resultPoint) {
	return starling.utils.MatrixUtil.transformCoords(matrix,point.x,point.y,resultPoint);
};
starling.utils.MatrixUtil.transformPoint3D = function(matrix,point,resultPoint) {
	return starling.utils.MatrixUtil.transformCoords3D(matrix,point.x,point.y,point.z,resultPoint);
};
starling.utils.MatrixUtil.transformCoords = function(matrix,x,y,resultPoint) {
	if(resultPoint == null) resultPoint = new openfl.geom.Point();
	resultPoint.x = matrix.a * x + matrix.c * y + matrix.tx;
	resultPoint.y = matrix.d * y + matrix.b * x + matrix.ty;
	return resultPoint;
};
starling.utils.MatrixUtil.transformCoords3D = function(matrix,x,y,z,resultPoint) {
	if(resultPoint == null) resultPoint = new openfl.geom.Vector3D();
	matrix.copyRawDataTo(starling.utils.MatrixUtil.sRawData2);
	resultPoint.x = x * starling.utils.MatrixUtil.sRawData2.data[0] + y * starling.utils.MatrixUtil.sRawData2.data[4] + z * starling.utils.MatrixUtil.sRawData2.data[8] + starling.utils.MatrixUtil.sRawData2.data[12];
	resultPoint.y = x * starling.utils.MatrixUtil.sRawData2.data[1] + y * starling.utils.MatrixUtil.sRawData2.data[5] + z * starling.utils.MatrixUtil.sRawData2.data[9] + starling.utils.MatrixUtil.sRawData2.data[13];
	resultPoint.z = x * starling.utils.MatrixUtil.sRawData2.data[2] + y * starling.utils.MatrixUtil.sRawData2.data[6] + z * starling.utils.MatrixUtil.sRawData2.data[10] + starling.utils.MatrixUtil.sRawData2.data[14];
	resultPoint.w = x * starling.utils.MatrixUtil.sRawData2.data[3] + y * starling.utils.MatrixUtil.sRawData2.data[7] + z * starling.utils.MatrixUtil.sRawData2.data[11] + starling.utils.MatrixUtil.sRawData2.data[15];
	return resultPoint;
};
starling.utils.MatrixUtil.skew = function(matrix,skewX,skewY) {
	var sinX = Math.sin(skewX);
	var cosX = Math.cos(skewX);
	var sinY = Math.sin(skewY);
	var cosY = Math.cos(skewY);
	matrix.setTo(matrix.a * cosY - matrix.b * sinX,matrix.a * sinY + matrix.b * cosX,matrix.c * cosY - matrix.d * sinX,matrix.c * sinY + matrix.d * cosX,matrix.tx * cosY - matrix.ty * sinX,matrix.tx * sinY + matrix.ty * cosX);
};
starling.utils.MatrixUtil.prependMatrix = function(base,prep) {
	base.setTo(base.a * prep.a + base.c * prep.b,base.b * prep.a + base.d * prep.b,base.a * prep.c + base.c * prep.d,base.b * prep.c + base.d * prep.d,base.tx + base.a * prep.tx + base.c * prep.ty,base.ty + base.b * prep.tx + base.d * prep.ty);
};
starling.utils.MatrixUtil.prependTranslation = function(matrix,tx,ty) {
	matrix.tx += matrix.a * tx + matrix.c * ty;
	matrix.ty += matrix.b * tx + matrix.d * ty;
};
starling.utils.MatrixUtil.prependScale = function(matrix,sx,sy) {
	matrix.setTo(matrix.a * sx,matrix.b * sx,matrix.c * sy,matrix.d * sy,matrix.tx,matrix.ty);
};
starling.utils.MatrixUtil.prependRotation = function(matrix,angle) {
	var sin = Math.sin(angle);
	var cos = Math.cos(angle);
	matrix.setTo(matrix.a * cos + matrix.c * sin,matrix.b * cos + matrix.d * sin,matrix.c * cos - matrix.a * sin,matrix.d * cos - matrix.b * sin,matrix.tx,matrix.ty);
};
starling.utils.MatrixUtil.prependSkew = function(matrix,skewX,skewY) {
	var sinX = Math.sin(skewX);
	var cosX = Math.cos(skewX);
	var sinY = Math.sin(skewY);
	var cosY = Math.cos(skewY);
	matrix.setTo(matrix.a * cosY + matrix.c * sinY,matrix.b * cosY + matrix.d * sinY,matrix.c * cosX - matrix.a * sinX,matrix.d * cosX - matrix.b * sinX,matrix.tx,matrix.ty);
};
starling.utils.MatrixUtil.get_sRawData = function() {
	if(starling.utils.MatrixUtil._sRawData == null) {
		var this1;
		this1 = new openfl.VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		starling.utils.MatrixUtil._sRawData = this1;
		var this3 = starling.utils.MatrixUtil._sRawData;
		if(!this3.fixed) {
			this3.length++;
			if(this3.data.length < this3.length) {
				var data;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
				this3.data = data;
			}
			this3.data[this3.length - 1] = 1.0;
		}
		this3.length;
		var this5 = starling.utils.MatrixUtil._sRawData;
		if(!this5.fixed) {
			this5.length++;
			if(this5.data.length < this5.length) {
				var data1;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data1 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data1,0,this5.data.length);
				this5.data = data1;
			}
			this5.data[this5.length - 1] = 0.0;
		}
		this5.length;
		var this7 = starling.utils.MatrixUtil._sRawData;
		if(!this7.fixed) {
			this7.length++;
			if(this7.data.length < this7.length) {
				var data2;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data2 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data2,0,this7.data.length);
				this7.data = data2;
			}
			this7.data[this7.length - 1] = 0.0;
		}
		this7.length;
		var this9 = starling.utils.MatrixUtil._sRawData;
		if(!this9.fixed) {
			this9.length++;
			if(this9.data.length < this9.length) {
				var data3;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data3 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data3,0,this9.data.length);
				this9.data = data3;
			}
			this9.data[this9.length - 1] = 0.0;
		}
		this9.length;
		var this11 = starling.utils.MatrixUtil._sRawData;
		if(!this11.fixed) {
			this11.length++;
			if(this11.data.length < this11.length) {
				var data4;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data4 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data4,0,this11.data.length);
				this11.data = data4;
			}
			this11.data[this11.length - 1] = 0.0;
		}
		this11.length;
		var this13 = starling.utils.MatrixUtil._sRawData;
		if(!this13.fixed) {
			this13.length++;
			if(this13.data.length < this13.length) {
				var data5;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data5 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data5,0,this13.data.length);
				this13.data = data5;
			}
			this13.data[this13.length - 1] = 1.0;
		}
		this13.length;
		var this15 = starling.utils.MatrixUtil._sRawData;
		if(!this15.fixed) {
			this15.length++;
			if(this15.data.length < this15.length) {
				var data6;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data6 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data6,0,this15.data.length);
				this15.data = data6;
			}
			this15.data[this15.length - 1] = 0.0;
		}
		this15.length;
		var this17 = starling.utils.MatrixUtil._sRawData;
		if(!this17.fixed) {
			this17.length++;
			if(this17.data.length < this17.length) {
				var data7;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data7 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data7,0,this17.data.length);
				this17.data = data7;
			}
			this17.data[this17.length - 1] = 0.0;
		}
		this17.length;
		var this19 = starling.utils.MatrixUtil._sRawData;
		if(!this19.fixed) {
			this19.length++;
			if(this19.data.length < this19.length) {
				var data8;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data8 = this20;
				haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data8,0,this19.data.length);
				this19.data = data8;
			}
			this19.data[this19.length - 1] = 0.0;
		}
		this19.length;
		var this21 = starling.utils.MatrixUtil._sRawData;
		if(!this21.fixed) {
			this21.length++;
			if(this21.data.length < this21.length) {
				var data9;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data9 = this22;
				haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data9,0,this21.data.length);
				this21.data = data9;
			}
			this21.data[this21.length - 1] = 0.0;
		}
		this21.length;
		var this23 = starling.utils.MatrixUtil._sRawData;
		if(!this23.fixed) {
			this23.length++;
			if(this23.data.length < this23.length) {
				var data10;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data10 = this24;
				haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data10,0,this23.data.length);
				this23.data = data10;
			}
			this23.data[this23.length - 1] = 1.0;
		}
		this23.length;
		var this25 = starling.utils.MatrixUtil._sRawData;
		if(!this25.fixed) {
			this25.length++;
			if(this25.data.length < this25.length) {
				var data11;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data11 = this26;
				haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data11,0,this25.data.length);
				this25.data = data11;
			}
			this25.data[this25.length - 1] = 0.0;
		}
		this25.length;
		var this27 = starling.utils.MatrixUtil._sRawData;
		if(!this27.fixed) {
			this27.length++;
			if(this27.data.length < this27.length) {
				var data12;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data12 = this28;
				haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data12,0,this27.data.length);
				this27.data = data12;
			}
			this27.data[this27.length - 1] = 0.0;
		}
		this27.length;
		var this29 = starling.utils.MatrixUtil._sRawData;
		if(!this29.fixed) {
			this29.length++;
			if(this29.data.length < this29.length) {
				var data13;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data13 = this30;
				haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data13,0,this29.data.length);
				this29.data = data13;
			}
			this29.data[this29.length - 1] = 0.0;
		}
		this29.length;
		var this31 = starling.utils.MatrixUtil._sRawData;
		if(!this31.fixed) {
			this31.length++;
			if(this31.data.length < this31.length) {
				var data14;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data14 = this32;
				haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data14,0,this31.data.length);
				this31.data = data14;
			}
			this31.data[this31.length - 1] = 0.0;
		}
		this31.length;
		var this33 = starling.utils.MatrixUtil._sRawData;
		if(!this33.fixed) {
			this33.length++;
			if(this33.data.length < this33.length) {
				var data15;
				var this34;
				this34 = new Array(this33.data.length + 10);
				data15 = this34;
				haxe.ds._Vector.Vector_Impl_.blit(this33.data,0,data15,0,this33.data.length);
				this33.data = data15;
			}
			this33.data[this33.length - 1] = 1.0;
		}
		this33.length;
	}
	return starling.utils.MatrixUtil._sRawData;
};
starling.utils.MatrixUtil.prototype = {
	__class__: starling.utils.MatrixUtil
};
starling.utils.RectangleUtil = function() {
	throw new starling.errors.AbstractClassError();
};
$hxClasses["starling.utils.RectangleUtil"] = starling.utils.RectangleUtil;
starling.utils.RectangleUtil.__name__ = ["starling","utils","RectangleUtil"];
starling.utils.RectangleUtil.__properties__ = {get_sPositions:"get_sPositions"}
starling.utils.RectangleUtil._sPositions = null;
starling.utils.RectangleUtil.sPositions = null;
starling.utils.RectangleUtil.intersect = function(rect1,rect2,resultRect) {
	if(resultRect == null) resultRect = new openfl.geom.Rectangle();
	var left;
	if(rect1.x > rect2.x) left = rect1.x; else left = rect2.x;
	var right;
	if(rect1.get_right() < rect2.get_right()) right = rect1.get_right(); else right = rect2.get_right();
	var top;
	if(rect1.y > rect2.y) top = rect1.y; else top = rect2.y;
	var bottom;
	if(rect1.get_bottom() < rect2.get_bottom()) bottom = rect1.get_bottom(); else bottom = rect2.get_bottom();
	if(left > right || top > bottom) resultRect.setEmpty(); else resultRect.setTo(left,top,right - left,bottom - top);
	return resultRect;
};
starling.utils.RectangleUtil.fit = function(rectangle,into,scaleMode,pixelPerfect,resultRect) {
	if(pixelPerfect == null) pixelPerfect = false;
	if(scaleMode == null) scaleMode = "showAll";
	if(!starling.utils.ScaleMode.isValid(scaleMode)) throw new openfl.errors.ArgumentError("Invalid scaleMode: " + scaleMode);
	if(resultRect == null) resultRect = new openfl.geom.Rectangle();
	var width = rectangle.width;
	var height = rectangle.height;
	var factorX = into.width / width;
	var factorY = into.height / height;
	var factor = 1.0;
	if(scaleMode == starling.utils.ScaleMode.SHOW_ALL) {
		if(factorX < factorY) factor = factorX; else factor = factorY;
		if(pixelPerfect) factor = starling.utils.RectangleUtil.nextSuitableScaleFactor(factor,false);
	} else if(scaleMode == starling.utils.ScaleMode.NO_BORDER) {
		if(factorX > factorY) factor = factorX; else factor = factorY;
		if(pixelPerfect) factor = starling.utils.RectangleUtil.nextSuitableScaleFactor(factor,true);
	}
	width *= factor;
	height *= factor;
	resultRect.setTo(into.x + (into.width - width) / 2,into.y + (into.height - height) / 2,width,height);
	return resultRect;
};
starling.utils.RectangleUtil.nextSuitableScaleFactor = function(factor,up) {
	var divisor = 1.0;
	if(up) {
		if(factor >= 0.5) return Math.ceil(factor); else while(1.0 / (divisor + 1) > factor) ++divisor;
	} else if(factor >= 1.0) return Math.floor(factor); else while(1.0 / divisor > factor) ++divisor;
	return 1.0 / divisor;
};
starling.utils.RectangleUtil.normalize = function(rect) {
	if(rect.width < 0) {
		rect.width = -rect.width;
		rect.x -= rect.width;
	}
	if(rect.height < 0) {
		rect.height = -rect.height;
		rect.y -= rect.height;
	}
};
starling.utils.RectangleUtil.getBounds = function(rectangle,transformationMatrix,resultRect) {
	if(resultRect == null) resultRect = new openfl.geom.Rectangle();
	var minX = Math.POSITIVE_INFINITY;
	var maxX = Math.NEGATIVE_INFINITY;
	var minY = Math.POSITIVE_INFINITY;
	var maxY = Math.NEGATIVE_INFINITY;
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		starling.utils.MatrixUtil.transformCoords(transformationMatrix,starling.utils.RectangleUtil.get_sPositions()[i].x * rectangle.width,starling.utils.RectangleUtil.get_sPositions()[i].y * rectangle.height,starling.utils.RectangleUtil.sHelperPoint);
		if(minX > starling.utils.RectangleUtil.sHelperPoint.x) minX = starling.utils.RectangleUtil.sHelperPoint.x;
		if(maxX < starling.utils.RectangleUtil.sHelperPoint.x) maxX = starling.utils.RectangleUtil.sHelperPoint.x;
		if(minY > starling.utils.RectangleUtil.sHelperPoint.y) minY = starling.utils.RectangleUtil.sHelperPoint.y;
		if(maxY < starling.utils.RectangleUtil.sHelperPoint.y) maxY = starling.utils.RectangleUtil.sHelperPoint.y;
	}
	resultRect.setTo(minX,minY,maxX - minX,maxY - minY);
	return resultRect;
};
starling.utils.RectangleUtil.get_sPositions = function() {
	if(starling.utils.RectangleUtil._sPositions == null) {
		starling.utils.RectangleUtil._sPositions = new Array();
		starling.utils.RectangleUtil._sPositions.push(new openfl.geom.Point(0,0));
		starling.utils.RectangleUtil._sPositions.push(new openfl.geom.Point(1,0));
		starling.utils.RectangleUtil._sPositions.push(new openfl.geom.Point(0,1));
		starling.utils.RectangleUtil._sPositions.push(new openfl.geom.Point(1,1));
	}
	return starling.utils.RectangleUtil._sPositions;
};
starling.utils.RectangleUtil.prototype = {
	__class__: starling.utils.RectangleUtil
};
starling.utils.ScaleMode = function() {
	throw new starling.errors.AbstractClassError();
};
$hxClasses["starling.utils.ScaleMode"] = starling.utils.ScaleMode;
starling.utils.ScaleMode.__name__ = ["starling","utils","ScaleMode"];
starling.utils.ScaleMode.isValid = function(scaleMode) {
	return scaleMode == starling.utils.ScaleMode.NONE || scaleMode == starling.utils.ScaleMode.NO_BORDER || scaleMode == starling.utils.ScaleMode.SHOW_ALL;
};
starling.utils.ScaleMode.prototype = {
	__class__: starling.utils.ScaleMode
};
starling.utils.StarlingUtils = function() {
};
$hxClasses["starling.utils.StarlingUtils"] = starling.utils.StarlingUtils;
starling.utils.StarlingUtils.__name__ = ["starling","utils","StarlingUtils"];
starling.utils.StarlingUtils.cleanMasterString = function(str) {
	return HxOverrides.substr("_" + str,1,null);
};
starling.utils.StarlingUtils.deg2rad = function(deg) {
	return deg / 180.0 * Math.PI;
};
starling.utils.StarlingUtils.execute = function(func,args) {
	if(func != null) {
		var i;
		var length = Reflect.getProperty(func,"length");
		var maxNumArgs = args.length;
		var _g = args.length;
		while(_g < maxNumArgs) {
			var i1 = _g++;
			args[i1] = null;
		}
		switch(maxNumArgs) {
		case 0:
			func();
			break;
		case 1:
			func(args[0]);
			break;
		case 2:
			func(args[0],args[1]);
			break;
		case 3:
			func(args[0],args[1],args[2]);
			break;
		case 4:
			func(args[0],args[1],args[2],args[3]);
			break;
		case 5:
			func(args[0],args[1],args[2],args[3],args[4]);
			break;
		case 6:
			func(args[0],args[1],args[2],args[3],args[4],args[5]);
			break;
		case 7:
			func(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
			break;
		}
	}
};
starling.utils.StarlingUtils.formatString = function(format,args) {
	haxe.Log.trace("CHECK",{ fileName : "StarlingUtils.hx", lineNumber : 80, className : "starling.utils.StarlingUtils", methodName : "formatString"});
	var _g1 = 0;
	var _g = args.length;
	while(_g1 < _g) {
		var i = _g1++;
		var r = new EReg("\\{" + i + "\\}","g");
		format = r.replace(format,args[i]);
	}
	return format;
};
starling.utils.StarlingUtils.getNextPowerOfTwo = function(number) {
	var c1 = ((number | 0) === number);
	var c2 = number > 0;
	var c3 = (number & number - 1) == 0;
	if(c1 && c2 && c3) return number | 0; else {
		var result = 1;
		number -= 0.000000001;
		while(result < number) result <<= 1;
		return result;
	}
};
starling.utils.StarlingUtils.rad2deg = function(rad) {
	return rad / Math.PI * 180.0;
};
starling.utils.StarlingUtils.transformCoords = function(matrix,x,y,resultPoint) {
	if(!starling.utils.StarlingUtils.deprecationNotified) {
		starling.utils.StarlingUtils.deprecationNotified = true;
		haxe.Log.trace("[Starling] The method 'transformCoords' is deprecated. " + "Please use 'MatrixUtil.transformCoords' instead.",{ fileName : "StarlingUtils.hx", lineNumber : 127, className : "starling.utils.StarlingUtils", methodName : "transformCoords"});
	}
	if(resultPoint == null) resultPoint = new openfl.geom.Point();
	resultPoint.x = matrix.a * x + matrix.c * y + matrix.tx;
	resultPoint.y = matrix.d * y + matrix.b * x + matrix.ty;
	return resultPoint;
};
starling.utils.StarlingUtils.prototype = {
	__class__: starling.utils.StarlingUtils
};
starling.utils.SystemUtil = function() {
	throw new starling.errors.AbstractClassError();
};
$hxClasses["starling.utils.SystemUtil"] = starling.utils.SystemUtil;
starling.utils.SystemUtil.__name__ = ["starling","utils","SystemUtil"];
starling.utils.SystemUtil.__properties__ = {get_supportsVideoTexture:"get_supportsVideoTexture",get_supportsDepthAndStencil:"get_supportsDepthAndStencil",get_supportsRelaxedTargetClearRequirement:"get_supportsRelaxedTargetClearRequirement",get_version:"get_version",get_platform:"get_platform",get_isDesktop:"get_isDesktop",get_isAIR:"get_isAIR",get_isApplicationActive:"get_isApplicationActive"}
starling.utils.SystemUtil.sPlatform = null;
starling.utils.SystemUtil.sVersion = null;
starling.utils.SystemUtil.sAIR = null;
starling.utils.SystemUtil.isApplicationActive = null;
starling.utils.SystemUtil.isAIR = null;
starling.utils.SystemUtil.isDesktop = null;
starling.utils.SystemUtil.platform = null;
starling.utils.SystemUtil.version = null;
starling.utils.SystemUtil.supportsRelaxedTargetClearRequirement = null;
starling.utils.SystemUtil.supportsDepthAndStencil = null;
starling.utils.SystemUtil.supportsVideoTexture = null;
starling.utils.SystemUtil.initialize = function() {
	if(starling.utils.SystemUtil.sInitialized) return;
	starling.utils.SystemUtil.sInitialized = true;
	var _this = openfl.system.Capabilities.get_version();
	starling.utils.SystemUtil.sPlatform = HxOverrides.substr(_this,0,3);
	var _this1 = openfl.system.Capabilities.get_version();
	starling.utils.SystemUtil.sVersion = HxOverrides.substr(_this1,4,null);
	haxe.Log.trace("FIX",{ fileName : "SystemUtil.hx", lineNumber : 54, className : "starling.utils.SystemUtil", methodName : "initialize"});
	starling.utils.SystemUtil.sAIR = false;
};
starling.utils.SystemUtil.onActivate = function(event) {
	starling.utils.SystemUtil.sApplicationActive = true;
	var _g = 0;
	var _g1 = starling.utils.SystemUtil.sWaitingCalls;
	while(_g < _g1.length) {
		var call = _g1[_g];
		++_g;
		call[0].apply(null,call[1]);
	}
	starling.utils.SystemUtil.sWaitingCalls = new Array();
};
starling.utils.SystemUtil.onDeactivate = function(event) {
	starling.utils.SystemUtil.sApplicationActive = false;
};
starling.utils.SystemUtil.executeWhenApplicationIsActive = function(call,args) {
	starling.utils.SystemUtil.initialize();
	if(starling.utils.SystemUtil.sApplicationActive) call.apply(null,args); else starling.utils.SystemUtil.sWaitingCalls.push([call,args]);
};
starling.utils.SystemUtil.get_isApplicationActive = function() {
	starling.utils.SystemUtil.initialize();
	return starling.utils.SystemUtil.sApplicationActive;
};
starling.utils.SystemUtil.get_isAIR = function() {
	starling.utils.SystemUtil.initialize();
	return starling.utils.SystemUtil.sAIR;
};
starling.utils.SystemUtil.get_isDesktop = function() {
	starling.utils.SystemUtil.initialize();
	return new EReg("(WIN|MAC|LNX)","").match(starling.utils.SystemUtil.sPlatform);
};
starling.utils.SystemUtil.get_platform = function() {
	starling.utils.SystemUtil.initialize();
	return starling.utils.SystemUtil.sPlatform;
};
starling.utils.SystemUtil.get_version = function() {
	starling.utils.SystemUtil.initialize();
	return starling.utils.SystemUtil.sVersion;
};
starling.utils.SystemUtil.get_supportsRelaxedTargetClearRequirement = function() {
	haxe.Log.trace("FIX",{ fileName : "SystemUtil.hx", lineNumber : 149, className : "starling.utils.SystemUtil", methodName : "get_supportsRelaxedTargetClearRequirement"});
	return true;
};
starling.utils.SystemUtil.get_supportsDepthAndStencil = function() {
	return starling.utils.SystemUtil.sSupportsDepthAndStencil;
};
starling.utils.SystemUtil.get_supportsVideoTexture = function() {
	return Object.prototype.hasOwnProperty.call(openfl.display3D.Context3D,"supportsVideoTexture");
};
starling.utils.SystemUtil.prototype = {
	__class__: starling.utils.SystemUtil
};
starling.utils.VAlign = $hxClasses["starling.utils.VAlign"] = { __ename__ : true, __constructs__ : ["TOP","CENTER","BOTTOM"] };
starling.utils.VAlign.TOP = ["TOP",0];
starling.utils.VAlign.TOP.toString = $estr;
starling.utils.VAlign.TOP.__enum__ = starling.utils.VAlign;
starling.utils.VAlign.CENTER = ["CENTER",1];
starling.utils.VAlign.CENTER.toString = $estr;
starling.utils.VAlign.CENTER.__enum__ = starling.utils.VAlign;
starling.utils.VAlign.BOTTOM = ["BOTTOM",2];
starling.utils.VAlign.BOTTOM.toString = $estr;
starling.utils.VAlign.BOTTOM.__enum__ = starling.utils.VAlign;
starling.utils.VertexData = function(numVertices,premultipliedAlpha) {
	if(premultipliedAlpha == null) premultipliedAlpha = false;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.mRawData = this1;
	this.mPremultipliedAlpha = premultipliedAlpha;
	this.set_numVertices(numVertices);
};
$hxClasses["starling.utils.VertexData"] = starling.utils.VertexData;
starling.utils.VertexData.__name__ = ["starling","utils","VertexData"];
starling.utils.VertexData.prototype = {
	mRawData: null
	,mPremultipliedAlpha: null
	,mNumVertices: null
	,tinted: null
	,clone: function(vertexID,numVertices) {
		if(numVertices == null) numVertices = -1;
		if(vertexID == null) vertexID = 0;
		if(numVertices < 0 || vertexID + numVertices > this.mNumVertices) numVertices = this.mNumVertices - vertexID;
		var clone = new starling.utils.VertexData(0,this.mPremultipliedAlpha);
		clone.mNumVertices = numVertices;
		var this1 = this.mRawData;
		var pos = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX;
		var end = numVertices * starling.utils.VertexData.ELEMENTS_PER_VERTEX;
		if(pos < 0) pos += this1.length;
		if(end <= 0) end += this1.length;
		if(end > this1.length) end = this1.length;
		var length = end - pos;
		if(length <= 0 || length > this1.length) length = this1.length;
		var vectorData = new openfl.VectorData();
		vectorData.length = end - pos;
		vectorData.fixed = true;
		var this2;
		this2 = new Array(length);
		vectorData.data = this2;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos,vectorData.data,0,length);
		clone.mRawData = vectorData;
		clone.mRawData.fixed = true;
		return clone;
	}
	,copyTo: function(targetData,targetVertexID,vertexID,numVertices) {
		if(numVertices == null) numVertices = -1;
		if(vertexID == null) vertexID = 0;
		if(targetVertexID == null) targetVertexID = 0;
		this.copyTransformedTo(targetData,targetVertexID,null,vertexID,numVertices);
	}
	,copyTransformedTo: function(targetData,targetVertexID,matrix,vertexID,numVertices) {
		if(numVertices == null) numVertices = -1;
		if(vertexID == null) vertexID = 0;
		if(targetVertexID == null) targetVertexID = 0;
		if(numVertices < 0 || vertexID + numVertices > this.mNumVertices) numVertices = this.mNumVertices - vertexID;
		var x;
		var y;
		var targetRawData = targetData.mRawData;
		var targetIndex = targetVertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX;
		var sourceIndex = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX;
		var sourceEnd = (vertexID + numVertices) * starling.utils.VertexData.ELEMENTS_PER_VERTEX;
		if(matrix != null) while(sourceIndex < sourceEnd) {
			var index = sourceIndex++;
			x = this.mRawData.data[index];
			var index1 = sourceIndex++;
			y = this.mRawData.data[index1];
			var key = targetIndex++;
			if(!targetRawData.fixed) {
				if(key >= targetRawData.length) targetRawData.length = key + 1;
				if(targetRawData.data.length < targetRawData.length) {
					var data;
					var this1;
					this1 = new Array(targetRawData.data.length + 10);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(targetRawData.data,0,data,0,targetRawData.data.length);
					targetRawData.data = data;
				}
			}
			targetRawData.data[key] = matrix.a * x + matrix.c * y + matrix.tx;
			var key1 = targetIndex++;
			if(!targetRawData.fixed) {
				if(key1 >= targetRawData.length) targetRawData.length = key1 + 1;
				if(targetRawData.data.length < targetRawData.length) {
					var data1;
					var this2;
					this2 = new Array(targetRawData.data.length + 10);
					data1 = this2;
					haxe.ds._Vector.Vector_Impl_.blit(targetRawData.data,0,data1,0,targetRawData.data.length);
					targetRawData.data = data1;
				}
			}
			targetRawData.data[key1] = matrix.d * y + matrix.b * x + matrix.ty;
			var key2 = targetIndex++;
			var value;
			var index2 = sourceIndex++;
			value = this.mRawData.data[index2];
			if(!targetRawData.fixed) {
				if(key2 >= targetRawData.length) targetRawData.length = key2 + 1;
				if(targetRawData.data.length < targetRawData.length) {
					var data2;
					var this3;
					this3 = new Array(targetRawData.data.length + 10);
					data2 = this3;
					haxe.ds._Vector.Vector_Impl_.blit(targetRawData.data,0,data2,0,targetRawData.data.length);
					targetRawData.data = data2;
				}
			}
			targetRawData.data[key2] = value;
			var key3 = targetIndex++;
			var value1;
			var index3 = sourceIndex++;
			value1 = this.mRawData.data[index3];
			if(!targetRawData.fixed) {
				if(key3 >= targetRawData.length) targetRawData.length = key3 + 1;
				if(targetRawData.data.length < targetRawData.length) {
					var data3;
					var this4;
					this4 = new Array(targetRawData.data.length + 10);
					data3 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(targetRawData.data,0,data3,0,targetRawData.data.length);
					targetRawData.data = data3;
				}
			}
			targetRawData.data[key3] = value1;
			var key4 = targetIndex++;
			var value2;
			var index4 = sourceIndex++;
			value2 = this.mRawData.data[index4];
			if(!targetRawData.fixed) {
				if(key4 >= targetRawData.length) targetRawData.length = key4 + 1;
				if(targetRawData.data.length < targetRawData.length) {
					var data4;
					var this5;
					this5 = new Array(targetRawData.data.length + 10);
					data4 = this5;
					haxe.ds._Vector.Vector_Impl_.blit(targetRawData.data,0,data4,0,targetRawData.data.length);
					targetRawData.data = data4;
				}
			}
			targetRawData.data[key4] = value2;
			var key5 = targetIndex++;
			var value3;
			var index5 = sourceIndex++;
			value3 = this.mRawData.data[index5];
			if(!targetRawData.fixed) {
				if(key5 >= targetRawData.length) targetRawData.length = key5 + 1;
				if(targetRawData.data.length < targetRawData.length) {
					var data5;
					var this6;
					this6 = new Array(targetRawData.data.length + 10);
					data5 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(targetRawData.data,0,data5,0,targetRawData.data.length);
					targetRawData.data = data5;
				}
			}
			targetRawData.data[key5] = value3;
			var key6 = targetIndex++;
			var value4;
			var index6 = sourceIndex++;
			value4 = this.mRawData.data[index6];
			if(!targetRawData.fixed) {
				if(key6 >= targetRawData.length) targetRawData.length = key6 + 1;
				if(targetRawData.data.length < targetRawData.length) {
					var data6;
					var this7;
					this7 = new Array(targetRawData.data.length + 10);
					data6 = this7;
					haxe.ds._Vector.Vector_Impl_.blit(targetRawData.data,0,data6,0,targetRawData.data.length);
					targetRawData.data = data6;
				}
			}
			targetRawData.data[key6] = value4;
			var key7 = targetIndex++;
			var value5;
			var index7 = sourceIndex++;
			value5 = this.mRawData.data[index7];
			if(!targetRawData.fixed) {
				if(key7 >= targetRawData.length) targetRawData.length = key7 + 1;
				if(targetRawData.data.length < targetRawData.length) {
					var data7;
					var this8;
					this8 = new Array(targetRawData.data.length + 10);
					data7 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(targetRawData.data,0,data7,0,targetRawData.data.length);
					targetRawData.data = data7;
				}
			}
			targetRawData.data[key7] = value5;
		} else while(sourceIndex < sourceEnd) {
			var key8 = targetIndex++;
			var value6;
			var index8 = sourceIndex++;
			value6 = this.mRawData.data[index8];
			if(!targetRawData.fixed) {
				if(key8 >= targetRawData.length) targetRawData.length = key8 + 1;
				if(targetRawData.data.length < targetRawData.length) {
					var data8;
					var this9;
					this9 = new Array(targetRawData.data.length + 10);
					data8 = this9;
					haxe.ds._Vector.Vector_Impl_.blit(targetRawData.data,0,data8,0,targetRawData.data.length);
					targetRawData.data = data8;
				}
			}
			targetRawData.data[key8] = value6;
		}
	}
	,append: function(data) {
		this.mRawData.fixed = false;
		var targetIndex = this.mRawData.length;
		var rawData = data.mRawData;
		var rawDataLength = rawData.length;
		var _g = 0;
		while(_g < rawDataLength) {
			var i = _g++;
			var this1 = this.mRawData;
			var key = targetIndex++;
			if(!this1.fixed) {
				if(key >= this1.length) this1.length = key + 1;
				if(this1.data.length < this1.length) {
					var data1;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data1 = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data1,0,this1.data.length);
					this1.data = data1;
				}
			}
			this1.data[key] = rawData.data[i];
		}
		this.mNumVertices += data.get_numVertices();
		this.mRawData.fixed = true;
	}
	,setPosition: function(vertexID,x,y) {
		var offset = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.POSITION_OFFSET;
		var this1 = this.mRawData;
		if(!this1.fixed) {
			if(offset >= this1.length) this1.length = offset + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[offset] = x;
		var this3 = this.mRawData;
		var key = offset + 1;
		if(!this3.fixed) {
			if(key >= this3.length) this3.length = key + 1;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[key] = y;
	}
	,getPosition: function(vertexID,position) {
		var offset = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.POSITION_OFFSET;
		position.x = this.mRawData.data[offset];
		position.y = this.mRawData.data[offset + 1];
	}
	,setColorAndAlpha: function(vertexID,color,alpha) {
		if(alpha < 0.001) alpha = 0.001; else if(alpha > 1.0) alpha = 1.0;
		var offset = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.COLOR_OFFSET;
		var multiplier;
		if(this.mPremultipliedAlpha) multiplier = alpha; else multiplier = 1.0;
		var this1 = this.mRawData;
		if(!this1.fixed) {
			if(offset >= this1.length) this1.length = offset + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[offset] = (function($this) {
			var $r;
			var $int = color >> 16 & 255;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) / 255.0 * multiplier;
		var this3 = this.mRawData;
		var key = offset + 1 | 0;
		if(!this3.fixed) {
			if(key >= this3.length) this3.length = key + 1;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[key] = (function($this) {
			var $r;
			var int1 = color >> 8 & 255;
			$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
			return $r;
		}(this)) / 255.0 * multiplier;
		var this5 = this.mRawData;
		var key1 = offset + 2 | 0;
		if(!this5.fixed) {
			if(key1 >= this5.length) this5.length = key1 + 1;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[key1] = (function($this) {
			var $r;
			var int2 = color & 255;
			$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
			return $r;
		}(this)) / 255.0 * multiplier;
		var this7 = this.mRawData;
		var key2 = offset + 3 | 0;
		if(!this7.fixed) {
			if(key2 >= this7.length) this7.length = key2 + 1;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[key2] = alpha;
	}
	,setColor: function(vertexID,color) {
		var offset = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.COLOR_OFFSET;
		var multiplier;
		if(this.mPremultipliedAlpha) multiplier = this.mRawData.data[offset + 3 | 0]; else multiplier = 1.0;
		var this1 = this.mRawData;
		if(!this1.fixed) {
			if(offset >= this1.length) this1.length = offset + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[offset] = (function($this) {
			var $r;
			var $int = color >> 16 & 255;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) / 255.0 * multiplier;
		var this3 = this.mRawData;
		var key = offset + 1 | 0;
		if(!this3.fixed) {
			if(key >= this3.length) this3.length = key + 1;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[key] = (function($this) {
			var $r;
			var int1 = color >> 8 & 255;
			$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
			return $r;
		}(this)) / 255.0 * multiplier;
		var this5 = this.mRawData;
		var key1 = offset + 2 | 0;
		if(!this5.fixed) {
			if(key1 >= this5.length) this5.length = key1 + 1;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[key1] = (function($this) {
			var $r;
			var int2 = color & 255;
			$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
			return $r;
		}(this)) / 255.0 * multiplier;
	}
	,getColor: function(vertexID) {
		var offset = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.COLOR_OFFSET;
		var divisor;
		if(this.mPremultipliedAlpha) divisor = this.mRawData.data[offset + 3 | 0]; else divisor = 1.0;
		if(divisor == 0) return 0; else {
			var red = this.mRawData.data[offset] / divisor;
			var green = this.mRawData.data[offset + 1 | 0] / divisor;
			var blue = this.mRawData.data[offset + 2 | 0] / divisor;
			return (red * 255 | 0) << 16 | (green * 255 | 0) << 8 | (blue * 255 | 0);
		}
	}
	,setAlpha: function(vertexID,alpha) {
		if(this.mPremultipliedAlpha) this.setColorAndAlpha(vertexID,this.getColor(vertexID),alpha); else {
			var this1 = this.mRawData;
			var key = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.COLOR_OFFSET + 3 | 0;
			if(!this1.fixed) {
				if(key >= this1.length) this1.length = key + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[key] = alpha;
		}
	}
	,getAlpha: function(vertexID) {
		var offset = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.COLOR_OFFSET + 3;
		return this.mRawData.data[offset];
	}
	,setTexCoords: function(vertexID,u,v) {
		var offset = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.TEXCOORD_OFFSET;
		var this1 = this.mRawData;
		if(!this1.fixed) {
			if(offset >= this1.length) this1.length = offset + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[offset] = u;
		var this3 = this.mRawData;
		var key = offset + 1 | 0;
		if(!this3.fixed) {
			if(key >= this3.length) this3.length = key + 1;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[key] = v;
	}
	,getTexCoords: function(vertexID,texCoords) {
		var offset = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.TEXCOORD_OFFSET;
		texCoords.x = this.mRawData.data[offset] | 0;
		texCoords.y = this.mRawData.data[offset + 1 | 0] | 0;
		if ("undefined" === typeof texCoords.x) texCoords.x = 0;;
		if ("undefined" === typeof texCoords.y) texCoords.y = 0;;
	}
	,translateVertex: function(vertexID,deltaX,deltaY) {
		var offset = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.POSITION_OFFSET;
		var _g = offset;
		var this1 = this.mRawData;
		if(!this1.fixed) {
			if(_g >= this1.length) this1.length = _g + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[_g] = this.mRawData.data[_g] + deltaX;
		var _g1 = offset + 1 | 0;
		var this3 = this.mRawData;
		if(!this3.fixed) {
			if(_g1 >= this3.length) this3.length = _g1 + 1;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[_g1] = this.mRawData.data[_g1] + deltaY;
	}
	,transformVertex: function(vertexID,matrix,numVertices) {
		if(numVertices == null) numVertices = 1;
		var x;
		var y;
		var offset = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.POSITION_OFFSET;
		var _g = 0;
		while(_g < numVertices) {
			var i = _g++;
			x = this.mRawData.data[offset];
			y = this.mRawData.data[offset + 1 | 0];
			var this1 = this.mRawData;
			if(!this1.fixed) {
				if(offset >= this1.length) this1.length = offset + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[offset] = matrix.a * x + matrix.c * y + matrix.tx;
			var this3 = this.mRawData;
			var key = offset + 1 | 0;
			if(!this3.fixed) {
				if(key >= this3.length) this3.length = key + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[key] = matrix.d * y + matrix.b * x + matrix.ty;
			offset += starling.utils.VertexData.ELEMENTS_PER_VERTEX;
		}
	}
	,setUniformColor: function(color) {
		var _g1 = 0;
		var _g = this.mNumVertices;
		while(_g1 < _g) {
			var i = _g1++;
			this.setColor(i,color);
		}
	}
	,setUniformAlpha: function(alpha) {
		var _g1 = 0;
		var _g = this.mNumVertices;
		while(_g1 < _g) {
			var i = _g1++;
			this.setAlpha(i,alpha);
		}
	}
	,scaleAlpha: function(vertexID,factor,numVertices) {
		if(numVertices == null) numVertices = 1;
		if(factor == 1.0) return;
		if(numVertices < 0 || vertexID + numVertices > this.mNumVertices) numVertices = this.mNumVertices - vertexID;
		var i;
		if(this.mPremultipliedAlpha) {
			var _g = 0;
			while(_g < numVertices) {
				var i1 = _g++;
				this.setAlpha(vertexID + i1,this.getAlpha(vertexID + i1) * factor);
			}
		} else {
			var offset = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.COLOR_OFFSET + 3;
			var _g1 = 0;
			while(_g1 < numVertices) {
				var i2 = _g1++;
				var _g11 = offset + i2 * starling.utils.VertexData.ELEMENTS_PER_VERTEX | 0;
				var this1 = this.mRawData;
				if(!this1.fixed) {
					if(_g11 >= this1.length) this1.length = _g11 + 1;
					if(this1.data.length < this1.length) {
						var data;
						var this2;
						this2 = new Array(this1.data.length + 10);
						data = this2;
						haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
						this1.data = data;
					}
				}
				this1.data[_g11] = this.mRawData.data[_g11] * factor;
			}
		}
	}
	,getBounds: function(transformationMatrix,vertexID,numVertices,resultRect) {
		if(numVertices == null) numVertices = -1;
		if(vertexID == null) vertexID = 0;
		if(resultRect == null) resultRect = new openfl.geom.Rectangle();
		if(numVertices < 0 || vertexID + numVertices > this.mNumVertices) numVertices = this.mNumVertices - vertexID;
		if(numVertices == 0) {
			if(transformationMatrix == null) resultRect.setEmpty(); else {
				starling.utils.MatrixUtil.transformCoords(transformationMatrix,0,0,starling.utils.VertexData.sHelperPoint);
				resultRect.setTo(starling.utils.VertexData.sHelperPoint.x,starling.utils.VertexData.sHelperPoint.y,0,0);
			}
		} else {
			var minX = Math.POSITIVE_INFINITY;
			var maxX = Math.NEGATIVE_INFINITY;
			var minY = Math.POSITIVE_INFINITY;
			var maxY = Math.NEGATIVE_INFINITY;
			var offset = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.POSITION_OFFSET;
			var x;
			var y;
			var i;
			if(transformationMatrix == null) {
				var _g = 0;
				while(_g < numVertices) {
					var i1 = _g++;
					x = this.mRawData.data[offset];
					y = this.mRawData.data[offset + 1 | 0];
					offset += starling.utils.VertexData.ELEMENTS_PER_VERTEX;
					if(minX > x) minX = x;
					if(maxX < x) maxX = x;
					if(minY > y) minY = y;
					if(maxY < y) maxY = y;
				}
			} else {
				var _g1 = 0;
				while(_g1 < numVertices) {
					var i2 = _g1++;
					x = this.mRawData.data[offset];
					y = this.mRawData.data[offset + 1 | 0];
					offset += starling.utils.VertexData.ELEMENTS_PER_VERTEX;
					starling.utils.MatrixUtil.transformCoords(transformationMatrix,x,y,starling.utils.VertexData.sHelperPoint);
					if(minX > starling.utils.VertexData.sHelperPoint.x) minX = starling.utils.VertexData.sHelperPoint.x;
					if(maxX < starling.utils.VertexData.sHelperPoint.x) maxX = starling.utils.VertexData.sHelperPoint.x;
					if(minY > starling.utils.VertexData.sHelperPoint.y) minY = starling.utils.VertexData.sHelperPoint.y;
					if(maxY < starling.utils.VertexData.sHelperPoint.y) maxY = starling.utils.VertexData.sHelperPoint.y;
				}
			}
			resultRect.setTo(minX,minY,maxX - minX,maxY - minY);
		}
		return resultRect;
	}
	,getBoundsProjected: function(transformationMatrix,camPos,vertexID,numVertices,resultRect) {
		if(numVertices == null) numVertices = -1;
		if(vertexID == null) vertexID = 0;
		if(camPos == null) throw new openfl.errors.ArgumentError("camPos must not be null");
		if(resultRect == null) resultRect = new openfl.geom.Rectangle();
		if(numVertices < 0 || vertexID + numVertices > this.mNumVertices) numVertices = this.mNumVertices - vertexID;
		if(numVertices == 0) {
			if(transformationMatrix != null) starling.utils.MatrixUtil.transformCoords3D(transformationMatrix,0,0,0,starling.utils.VertexData.sHelperPoint3D); else starling.utils.VertexData.sHelperPoint3D.setTo(0,0,0);
			starling.utils.MathUtil.intersectLineWithXYPlane(camPos,starling.utils.VertexData.sHelperPoint3D,starling.utils.VertexData.sHelperPoint);
			resultRect.setTo(starling.utils.VertexData.sHelperPoint.x,starling.utils.VertexData.sHelperPoint.y,0,0);
		} else {
			var minX = Math.POSITIVE_INFINITY;
			var maxX = Math.NEGATIVE_INFINITY;
			var minY = Math.POSITIVE_INFINITY;
			var maxY = Math.NEGATIVE_INFINITY;
			var offset = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.POSITION_OFFSET;
			var x;
			var y;
			var i;
			var _g = 0;
			while(_g < numVertices) {
				var i1 = _g++;
				x = this.mRawData.data[offset];
				y = this.mRawData.data[offset + 1 | 0];
				offset += starling.utils.VertexData.ELEMENTS_PER_VERTEX;
				if(transformationMatrix != null) starling.utils.MatrixUtil.transformCoords3D(transformationMatrix,x,y,0,starling.utils.VertexData.sHelperPoint3D); else starling.utils.VertexData.sHelperPoint3D.setTo(x,y,0);
				starling.utils.MathUtil.intersectLineWithXYPlane(camPos,starling.utils.VertexData.sHelperPoint3D,starling.utils.VertexData.sHelperPoint);
				if(minX > starling.utils.VertexData.sHelperPoint.x) minX = starling.utils.VertexData.sHelperPoint.x;
				if(maxX < starling.utils.VertexData.sHelperPoint.x) maxX = starling.utils.VertexData.sHelperPoint.x;
				if(minY > starling.utils.VertexData.sHelperPoint.y) minY = starling.utils.VertexData.sHelperPoint.y;
				if(maxY < starling.utils.VertexData.sHelperPoint.y) maxY = starling.utils.VertexData.sHelperPoint.y;
			}
			resultRect.setTo(minX,minY,maxX - minX,maxY - minY);
		}
		return resultRect;
	}
	,toString: function() {
		var result = "[VertexData \n";
		var position = new openfl.geom.Point();
		var texCoords = new openfl.geom.Point();
		var _g1 = 0;
		var _g = this.get_numVertices();
		while(_g1 < _g) {
			var i = _g1++;
			this.getPosition(i,position);
			this.getTexCoords(i,texCoords);
			result += "  [Vertex " + i + ": " + "x=" + Math.floor(position.x) + ", " + "y=" + Math.floor(position.y) + ", " + "a=" + js.Boot.__cast(Math.floor(this.getAlpha(i) * 10) / 10 , Float) + ", " + "u=" + js.Boot.__cast(Math.floor(texCoords.x * 1000) / 1000 , Float) + ", " + "v=" + js.Boot.__cast(Math.floor(texCoords.y * 1000) / 1000 , Float) + "]" + (i == this.get_numVertices() - 1?"\n":",\n");
		}
		result += "]";
		return result;
	}
	,get_tinted: function() {
		var offset = starling.utils.VertexData.COLOR_OFFSET;
		var _g1 = 0;
		var _g = this.mNumVertices;
		while(_g1 < _g) {
			var i = _g1++;
			var _g2 = 0;
			while(_g2 < 4) {
				var j = _g2++;
				if(this.mRawData.data[offset + j | 0] != 1.0) return true;
			}
			offset += starling.utils.VertexData.ELEMENTS_PER_VERTEX;
		}
		return false;
	}
	,setPremultipliedAlpha: function(value,updateData) {
		if(updateData == null) updateData = true;
		if(value == this.mPremultipliedAlpha) return;
		if(updateData) {
			var dataLength = this.mNumVertices * starling.utils.VertexData.ELEMENTS_PER_VERTEX;
			var i = starling.utils.VertexData.COLOR_OFFSET;
			while(i < dataLength) {
				var alpha = this.mRawData.data[i + 3 | 0];
				var divisor;
				if(this.mPremultipliedAlpha) divisor = alpha; else divisor = 1.0;
				var multiplier;
				if(value) multiplier = alpha; else multiplier = 1.0;
				if(divisor != 0) {
					var this1 = this.mRawData;
					if(!this1.fixed) {
						if(i >= this1.length) this1.length = i + 1;
						if(this1.data.length < this1.length) {
							var data;
							var this2;
							this2 = new Array(this1.data.length + 10);
							data = this2;
							haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
							this1.data = data;
						}
					}
					this1.data[i] = this.mRawData.data[i] / divisor * multiplier;
					var this3 = this.mRawData;
					var key = i + 1 | 0;
					if(!this3.fixed) {
						if(key >= this3.length) this3.length = key + 1;
						if(this3.data.length < this3.length) {
							var data1;
							var this4;
							this4 = new Array(this3.data.length + 10);
							data1 = this4;
							haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
							this3.data = data1;
						}
					}
					this3.data[key] = this.mRawData.data[i + 1 | 0] / divisor * multiplier;
					var this5 = this.mRawData;
					var key1 = i + 2 | 0;
					if(!this5.fixed) {
						if(key1 >= this5.length) this5.length = key1 + 1;
						if(this5.data.length < this5.length) {
							var data2;
							var this6;
							this6 = new Array(this5.data.length + 10);
							data2 = this6;
							haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
							this5.data = data2;
						}
					}
					this5.data[key1] = this.mRawData.data[i + 2 | 0] / divisor * multiplier;
				}
				i += starling.utils.VertexData.ELEMENTS_PER_VERTEX;
			}
		}
		this.mPremultipliedAlpha = value;
	}
	,get_premultipliedAlpha: function() {
		return this.mPremultipliedAlpha;
	}
	,set_premultipliedAlpha: function(value) {
		this.setPremultipliedAlpha(value);
		return value;
	}
	,get_numVertices: function() {
		return this.mNumVertices;
	}
	,set_numVertices: function(value) {
		this.mRawData.fixed = false;
		var currentLength = 0;
		var this1 = this.mRawData;
		var value1 = value * starling.utils.VertexData.ELEMENTS_PER_VERTEX;
		if(!this1.fixed) {
			if(value1 > this1.length) {
				var data;
				var this2;
				this2 = new Array(value1);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,value1)));
				this1.data = data;
			}
			this1.length = value1;
		}
		value1;
		if(this.mRawData.length > currentLength) {
			var _g1 = 0;
			var _g = this.mRawData.length;
			while(_g1 < _g) {
				var j = _g1++;
				if ("undefined" === typeof this.mRawData.data[j]) this.mRawData.data[j] = 0;;
			}
		}
		var startIndex = this.mNumVertices * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.COLOR_OFFSET + 3;
		var endIndex = this.mRawData.length;
		var i = startIndex;
		while(i < endIndex) {
			var this3 = this.mRawData;
			if(!this3.fixed) {
				if(i >= this3.length) this3.length = i + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[i] = 1.0;
			i += starling.utils.VertexData.ELEMENTS_PER_VERTEX;
		}
		this.mNumVertices = value;
		this.mRawData.fixed = true;
		return value;
	}
	,get_rawData: function() {
		return this.mRawData;
	}
	,set_rawData: function(value) {
		this.mRawData = value;
		return value;
	}
	,__class__: starling.utils.VertexData
	,__properties__: {set_rawData:"set_rawData",get_rawData:"get_rawData",set_numVertices:"set_numVertices",get_numVertices:"get_numVertices",set_premultipliedAlpha:"set_premultipliedAlpha",get_premultipliedAlpha:"get_premultipliedAlpha",get_tinted:"get_tinted"}
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
if(Array.prototype.indexOf) HxOverrides.indexOf = function(a,o,i) {
	return Array.prototype.indexOf.call(a,o,i);
};
Math.NaN = Number.NaN;
Math.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;
Math.POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
$hxClasses.Math = Math;
Math.isFinite = function(i) {
	return isFinite(i);
};
Math.isNaN = function(i1) {
	return isNaN(i1);
};
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = ["String"];
$hxClasses.Array = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses.Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
Xml.Element = "element";
Xml.PCData = "pcdata";
Xml.CData = "cdata";
Xml.Comment = "comment";
Xml.DocType = "doctype";
Xml.ProcessingInstruction = "processingInstruction";
Xml.Document = "document";
var this1;
this1 = new Array(256);
lime.graphics.utils.ImageDataUtil.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	lime.graphics.utils.ImageDataUtil.__alpha16[i] = i * 65536 / 255 | 0;
}
var this2;
this2 = new Array(510);
lime.graphics.utils.ImageDataUtil.__clamp = this2;
var _g1 = 0;
while(_g1 < 255) {
	var i1 = _g1++;
	lime.graphics.utils.ImageDataUtil.__clamp[i1] = i1;
}
var _g11 = 255;
var _g2 = 511;
while(_g11 < _g2) {
	var i2 = _g11++;
	lime.graphics.utils.ImageDataUtil.__clamp[i2] = 255;
}
msignal.SlotList.NIL = new msignal.SlotList(null,null);
if(window.createjs != null) createjs.Sound.alternateExtensions = ["ogg","mp3","wav"];
openfl.ui.Multitouch.maxTouchPoints = 2;
openfl.ui.Multitouch.supportedGestures = null;
openfl.ui.Multitouch.supportsGestureEvents = false;
openfl.display.DisplayObject.__instanceCount = 0;
openfl.display.DisplayObject.__worldRenderDirty = 0;
openfl.display.DisplayObject.__worldTransformDirty = 0;
away3d.Away3D.WEBSITE_URL = "http://www.away3d.com";
away3d.Away3D.MAJOR_VERSION = 4;
away3d.Away3D.MINOR_VERSION = 1;
away3d.Away3D.REVISION = 5;
away3d.library.assets.NamedAssetBase.DEFAULT_NAMESPACE = "default";
away3d.core.managers.AGALProgram3DCache._currentId = 0;
openfl.events.Event.ACTIVATE = "activate";
openfl.events.Event.ADDED = "added";
openfl.events.Event.ADDED_TO_STAGE = "addedToStage";
openfl.events.Event.CANCEL = "cancel";
openfl.events.Event.CHANGE = "change";
openfl.events.Event.CLOSE = "close";
openfl.events.Event.COMPLETE = "complete";
openfl.events.Event.CONNECT = "connect";
openfl.events.Event.CONTEXT3D_CREATE = "context3DCreate";
openfl.events.Event.DEACTIVATE = "deactivate";
openfl.events.Event.ENTER_FRAME = "enterFrame";
openfl.events.Event.ID3 = "id3";
openfl.events.Event.INIT = "init";
openfl.events.Event.MOUSE_LEAVE = "mouseLeave";
openfl.events.Event.OPEN = "open";
openfl.events.Event.REMOVED = "removed";
openfl.events.Event.REMOVED_FROM_STAGE = "removedFromStage";
openfl.events.Event.RENDER = "render";
openfl.events.Event.RESIZE = "resize";
openfl.events.Event.SCROLL = "scroll";
openfl.events.Event.SELECT = "select";
openfl.events.Event.SOUND_COMPLETE = "soundComplete";
openfl.events.Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
openfl.events.Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
openfl.events.Event.TAB_INDEX_CHANGE = "tabIndexChange";
openfl.events.Event.UNLOAD = "unload";
away3d.events.MouseEvent3D.MOUSE_OVER = "mouseOver3d";
away3d.events.MouseEvent3D.MOUSE_OUT = "mouseOut3d";
away3d.events.MouseEvent3D.MOUSE_UP = "mouseUp3d";
away3d.events.MouseEvent3D.MOUSE_DOWN = "mouseDown3d";
away3d.events.MouseEvent3D.MOUSE_MOVE = "mouseMove3d";
away3d.events.MouseEvent3D.CLICK = "click3d";
away3d.events.MouseEvent3D.DOUBLE_CLICK = "doubleClick3d";
away3d.events.MouseEvent3D.MOUSE_WHEEL = "mouseWheel3d";
away3d.core.managers.Mouse3DManager._viewCount = 0;
away3d.core.managers.Mouse3DManager._queuedEvents = new Array();
away3d.core.managers.Mouse3DManager._mouseUp = new away3d.events.MouseEvent3D(away3d.events.MouseEvent3D.MOUSE_UP);
away3d.core.managers.Mouse3DManager._mouseClick = new away3d.events.MouseEvent3D(away3d.events.MouseEvent3D.CLICK);
away3d.core.managers.Mouse3DManager._mouseOut = new away3d.events.MouseEvent3D(away3d.events.MouseEvent3D.MOUSE_OUT);
away3d.core.managers.Mouse3DManager._mouseDown = new away3d.events.MouseEvent3D(away3d.events.MouseEvent3D.MOUSE_DOWN);
away3d.core.managers.Mouse3DManager._mouseMove = new away3d.events.MouseEvent3D(away3d.events.MouseEvent3D.MOUSE_MOVE);
away3d.core.managers.Mouse3DManager._mouseOver = new away3d.events.MouseEvent3D(away3d.events.MouseEvent3D.MOUSE_OVER);
away3d.core.managers.Mouse3DManager._mouseWheel = new away3d.events.MouseEvent3D(away3d.events.MouseEvent3D.MOUSE_WHEEL);
away3d.core.managers.Mouse3DManager._mouseDoubleClick = new away3d.events.MouseEvent3D(away3d.events.MouseEvent3D.DOUBLE_CLICK);
away3d.core.managers.Mouse3DManager._previousCollidingView = -1;
away3d.core.managers.Mouse3DManager._collidingView = -1;
away3d.core.managers.Stage3DManager._numStageProxies = 0;
openfl.geom.Matrix.__identity = new openfl.geom.Matrix();
away3d.core.managers.Stage3DProxy._frameEventDriver = new openfl.display.Shape();
away3d.core.managers.Stage3DProxy._vbCount = 0;
away3d.core.managers.Stage3DProxy._ibCount = 0;
away3d.core.managers.Stage3DProxy._vbUploadCount = 0;
away3d.core.managers.Stage3DProxy._ibUploadCount = 0;
away3d.core.managers.Stage3DProxy._bmpUploadCount = 0;
away3d.core.managers.Stage3DProxy._atfUploadCount = 0;
away3d.core.managers.Touch3DManager._collidingObjectFromTouchId = new haxe.ds.IntMap();
away3d.core.managers.Touch3DManager._previousCollidingObjectFromTouchId = new haxe.ds.IntMap();
away3d.core.managers.Touch3DManager._queuedEvents = (function($this) {
	var $r;
	var this1;
	this1 = new openfl.VectorData();
	{
		var this2;
		this2 = new Array(0);
		this1.data = this2;
	}
	this1.length = 0;
	this1.fixed = false;
	$r = this1;
	return $r;
}(this));
away3d.core.math.MathConsts.RADIANS_TO_DEGREES = 180 / Math.PI;
away3d.core.math.MathConsts.DEGREES_TO_RADIANS = Math.PI / 180;
away3d.core.math.Plane3D.ALIGN_ANY = 0;
away3d.core.math.Plane3D.ALIGN_XY_AXIS = 1;
away3d.core.math.Plane3D.ALIGN_YZ_AXIS = 2;
away3d.core.math.Plane3D.ALIGN_XZ_AXIS = 3;
away3d.core.math.PlaneClassification.BACK = 0;
away3d.core.math.PlaneClassification.FRONT = 1;
away3d.core.math.PlaneClassification.IN = 0;
away3d.core.math.PlaneClassification.OUT = 1;
away3d.core.math.PlaneClassification.INTERSECT = 2;
away3d.core.traverse.PartitionTraverser._collectionMark = 0;
away3d.core.pick.ShaderPicker.MOUSE_SCISSOR_RECT = new openfl.geom.Rectangle(0,0,1,1);
openfl.display.LoaderInfo.__rootURL = window.document.URL;
openfl.system.ApplicationDomain.currentDomain = new openfl.system.ApplicationDomain(null);
openfl.Lib.current = new openfl.display.MovieClip();
openfl.Lib.__sentWarnings = new haxe.ds.StringMap();
lime.system.System.__moduleNames = null;
away3d.core.pick.PickingType.SHADER = new away3d.core.pick.ShaderPicker();
away3d.core.pick.PickingType.RAYCAST_FIRST_ENCOUNTERED = new away3d.core.pick.RaycastPicker(false);
away3d.core.pick.PickingType.RAYCAST_BEST_HIT = new away3d.core.pick.RaycastPicker(true);
away3d.core.render.DefaultRenderer.RTT_PASSES = 1;
away3d.core.render.DefaultRenderer.SCREEN_PASSES = 2;
away3d.core.render.DefaultRenderer.ALL_PASSES = 3;
away3d.debug.Debug.active = false;
away3d.debug.Debug.warningsAsErrors = false;
openfl.errors.Error.DEFAULT_TO_STRING = "Error";
away3d.events.Asset3DEvent.ASSET_COMPLETE = "assetComplete";
away3d.events.Asset3DEvent.ENTITY_COMPLETE = "entityComplete";
away3d.events.Asset3DEvent.SKYBOX_COMPLETE = "skyboxComplete";
away3d.events.Asset3DEvent.CAMERA_COMPLETE = "cameraComplete";
away3d.events.Asset3DEvent.MESH_COMPLETE = "meshComplete";
away3d.events.Asset3DEvent.GEOMETRY_COMPLETE = "geometryComplete";
away3d.events.Asset3DEvent.SKELETON_COMPLETE = "skeletonComplete";
away3d.events.Asset3DEvent.SKELETON_POSE_COMPLETE = "skeletonPoseComplete";
away3d.events.Asset3DEvent.CONTAINER_COMPLETE = "containerComplete";
away3d.events.Asset3DEvent.TEXTURE_COMPLETE = "textureComplete";
away3d.events.Asset3DEvent.TEXTURE_PROJECTOR_COMPLETE = "textureProjectorComplete";
away3d.events.Asset3DEvent.MATERIAL_COMPLETE = "materialComplete";
away3d.events.Asset3DEvent.ANIMATOR_COMPLETE = "animatorComplete";
away3d.events.Asset3DEvent.ANIMATION_SET_COMPLETE = "animationSetComplete";
away3d.events.Asset3DEvent.ANIMATION_STATE_COMPLETE = "animationStateComplete";
away3d.events.Asset3DEvent.ANIMATION_NODE_COMPLETE = "animationNodeComplete";
away3d.events.Asset3DEvent.STATE_TRANSITION_COMPLETE = "stateTransitionComplete";
away3d.events.Asset3DEvent.SEGMENT_SET_COMPLETE = "segmentSetComplete";
away3d.events.Asset3DEvent.LIGHT_COMPLETE = "lightComplete";
away3d.events.Asset3DEvent.LIGHTPICKER_COMPLETE = "lightPickerComplete";
away3d.events.Asset3DEvent.EFFECTMETHOD_COMPLETE = "effectMethodComplete";
away3d.events.Asset3DEvent.SHADOWMAPMETHOD_COMPLETE = "shadowMapMethodComplete";
away3d.events.Asset3DEvent.ASSET_RENAME = "assetRename";
away3d.events.Asset3DEvent.ASSET_CONFLICT_RESOLVED = "assetConflictResolved";
away3d.events.Asset3DEvent.TEXTURE_SIZE_ERROR = "textureSizeError";
away3d.events.CameraEvent.LENS_CHANGED = "lensChanged";
away3d.events.GeometryEvent.SUB_GEOMETRY_ADDED = "SubGeometryAdded";
away3d.events.GeometryEvent.SUB_GEOMETRY_REMOVED = "SubGeometryRemoved";
away3d.events.GeometryEvent.BOUNDS_INVALID = "BoundsInvalid";
away3d.events.LensEvent.MATRIX_CHANGED = "matrixChanged";
away3d.events.LightEvent.CASTS_SHADOW_CHANGE = "castsShadowChange";
away3d.events.Object3DEvent.VISIBLITY_UPDATED = "visiblityUpdated";
away3d.events.Object3DEvent.SCENETRANSFORM_CHANGED = "scenetransformChanged";
away3d.events.Object3DEvent.SCENE_CHANGED = "sceneChanged";
away3d.events.Object3DEvent.POSITION_CHANGED = "positionChanged";
away3d.events.Object3DEvent.ROTATION_CHANGED = "rotationChanged";
away3d.events.Object3DEvent.SCALE_CHANGED = "scaleChanged";
away3d.events.Scene3DEvent.ADDED_TO_SCENE = "addedToScene";
away3d.events.Scene3DEvent.REMOVED_FROM_SCENE = "removedFromScene";
away3d.events.Scene3DEvent.PARTITION_CHANGED = "partitionChanged";
away3d.events.ShadingMethodEvent.SHADER_INVALIDATED = "ShaderInvalidated";
away3d.events.Stage3DEvent.CONTEXT3D_CREATED = "Context3DCreated";
away3d.events.Stage3DEvent.CONTEXT3D_DISPOSED = "Context3DDisposed";
away3d.events.Stage3DEvent.CONTEXT3D_RECREATED = "Context3DRecreated";
away3d.events.Stage3DEvent.VIEWPORT_UPDATED = "ViewportUpdated";
away3d.events.TouchEvent3D.TOUCH_END = "touchEnd3d";
away3d.events.TouchEvent3D.TOUCH_BEGIN = "touchBegin3d";
away3d.events.TouchEvent3D.TOUCH_MOVE = "touchMove3d";
away3d.events.TouchEvent3D.TOUCH_OUT = "touchOut3d";
away3d.events.TouchEvent3D.TOUCH_OVER = "touchOver3d";
away3d.library.assets.Asset3DType.ENTITY = "entity";
away3d.library.assets.Asset3DType.SKYBOX = "skybox";
away3d.library.assets.Asset3DType.CAMERA = "camera";
away3d.library.assets.Asset3DType.SEGMENT_SET = "segmentSet";
away3d.library.assets.Asset3DType.MESH = "mesh";
away3d.library.assets.Asset3DType.GEOMETRY = "geometry";
away3d.library.assets.Asset3DType.SKELETON = "skeleton";
away3d.library.assets.Asset3DType.SKELETON_POSE = "skeletonPose";
away3d.library.assets.Asset3DType.CONTAINER = "container";
away3d.library.assets.Asset3DType.TEXTURE = "texture";
away3d.library.assets.Asset3DType.TEXTURE_PROJECTOR = "textureProjector";
away3d.library.assets.Asset3DType.MATERIAL = "material";
away3d.library.assets.Asset3DType.ANIMATION_SET = "animationSet";
away3d.library.assets.Asset3DType.ANIMATION_STATE = "animationState";
away3d.library.assets.Asset3DType.ANIMATION_NODE = "animationNode";
away3d.library.assets.Asset3DType.ANIMATOR = "animator";
away3d.library.assets.Asset3DType.STATE_TRANSITION = "stateTransition";
away3d.library.assets.Asset3DType.LIGHT = "light";
away3d.library.assets.Asset3DType.LIGHT_PICKER = "lightPicker";
away3d.library.assets.Asset3DType.SHADOW_MAP_METHOD = "shadowMapMethod";
away3d.library.assets.Asset3DType.EFFECTS_METHOD = "effectsMethod";
away3d.materials.MaterialBase.MATERIAL_ID_COUNT = 0;
away3d.materials.LightSources.LIGHTS = 1;
away3d.materials.LightSources.PROBES = 2;
away3d.materials.LightSources.ALL = 3;
away3d.materials.compilation.RegisterPool._regPool = new haxe.ds.StringMap();
away3d.materials.compilation.RegisterPool._regCompsPool = new haxe.ds.StringMap();
away3d.materials.compilation.ShaderRegisterElement.COMPONENTS = ["x","y","z","w"];
away3d.materials.passes.MaterialPassBase._previousUsedStreams = [0,0,0,0,0,0,0,0];
away3d.materials.passes.MaterialPassBase._previousUsedTexs = [0,0,0,0,0,0,0,0];
away3d.materials.passes.SegmentPass.ONE_VECTOR = (function($this) {
	var $r;
	var a = [1.0,1.0,1.0,1.0];
	var vectorData = new openfl.VectorData();
	vectorData.length = a.length;
	vectorData.fixed = true;
	{
		var vec;
		var this1;
		this1 = new Array(a.length);
		vec = this1;
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = a[i];
		}
		vectorData.data = vec;
	}
	$r = vectorData;
	return $r;
}(this));
away3d.materials.passes.SegmentPass.FRONT_VECTOR = (function($this) {
	var $r;
	var a = [0.0,0.0,-1.0,0.0];
	var vectorData = new openfl.VectorData();
	vectorData.length = a.length;
	vectorData.fixed = true;
	{
		var vec;
		var this1;
		this1 = new Array(a.length);
		vec = this1;
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = a[i];
		}
		vectorData.data = vec;
	}
	$r = vectorData;
	return $r;
}(this));
away3d.materials.utils.MipmapGenerator._matrix = new openfl.geom.Matrix();
away3d.materials.utils.MipmapGenerator._rect = new openfl.geom.Rectangle();
away3d.textures.BitmapTexture._mipMaps = [];
away3d.textures.BitmapTexture._mipMapUses = [];
away3d.tools.utils.TextureUtils.MAX_SIZE = 4096;
com.imagination.core.utils.device.DeviceInfo._tabletScreenMinimumInches = 7;
com.imagination.core.view.BaseViewConfig.__meta__ = { fields : { context : { inject : null}, commandMap : { inject : null}, mediatorMap : { inject : null}, stack : { inject : null}, renderer : { inject : null}, contextView : { inject : null}}};
com.imagination.core.view.BaseViewConfig.__rtti = "<class path=\"com.imagination.core.view.BaseViewConfig\" params=\"\">\n\t<implements path=\"robotlegs.bender.framework.api.IConfig\"/>\n\t<context public=\"1\">\n\t\t<c path=\"robotlegs.bender.framework.api.IContext\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</context>\n\t<commandMap public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.signalCommandMap.api.ISignalCommandMap\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</commandMap>\n\t<mediatorMap public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.mediatorMap.api.IMediatorMap\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</mediatorMap>\n\t<stack public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.stage3D.base.api.IStack\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</stack>\n\t<renderer public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.stage3D.base.api.IRenderer\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</renderer>\n\t<contextView public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.contextView.ContextView\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</contextView>\n\t<profile><c path=\"String\"/></profile>\n\t<antiAlias><x path=\"Int\"/></antiAlias>\n\t<configure public=\"1\" set=\"method\" line=\"30\"><f a=\"\"><x path=\"Void\"/></f></configure>\n\t<init set=\"method\" line=\"35\"><f a=\"\"><x path=\"Void\"/></f></init>\n\t<OnContext3DReady set=\"method\" line=\"42\"><f a=\"\"><x path=\"Void\"/></f></OnContext3DReady>\n\t<mapMediators set=\"method\" line=\"49\"><f a=\"\"><x path=\"Void\"/></f></mapMediators>\n\t<initView set=\"method\" line=\"54\"><f a=\"\"><x path=\"Void\"/></f></initView>\n\t<new public=\"1\" set=\"method\" line=\"24\"><f a=\"?profile:?antiAlias\" v=\"'baselineExtended':0\">\n\t<c path=\"String\"/>\n\t<x path=\"Int\"/>\n\t<x path=\"Void\"/>\n</f></new>\n\t<meta><m n=\":rtti\"/></meta>\n</class>";
com.imagination.robotlegs.starling.commands.CommandConfig.__meta__ = { fields : { commandMap : { inject : null}, injector : { inject : null}}};
com.imagination.robotlegs.starling.commands.CommandConfig.__rtti = "<class path=\"com.imagination.robotlegs.starling.commands.CommandConfig\" params=\"\">\n\t<implements path=\"robotlegs.bender.framework.api.IConfig\"/>\n\t<commandMap public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.signalCommandMap.api.ISignalCommandMap\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</commandMap>\n\t<injector public=\"1\">\n\t\t<c path=\"robotlegs.bender.framework.api.IInjector\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</injector>\n\t<configure public=\"1\" set=\"method\" line=\"23\"><f a=\"\"><x path=\"Void\"/></f></configure>\n\t<new public=\"1\" set=\"method\" line=\"21\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
robotlegs.bender.bundles.mvcs.Command.__rtti = "<class path=\"robotlegs.bender.bundles.mvcs.Command\" params=\"\">\n\t<implements path=\"robotlegs.bender.extensions.commandCenter.api.ICommand\"/>\n\t<execute public=\"1\" set=\"method\" line=\"31\"><f a=\"\"><x path=\"Void\"/></f></execute>\n\t<meta>\n\t\t<m n=\":keepSub\"/>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
com.imagination.robotlegs.starling.commands.keyboard.KeyboardCommand.__meta__ = { fields : { sceneModel : { inject : null}, keyboardMap : { inject : null}}};
com.imagination.robotlegs.starling.commands.keyboard.KeyboardCommand.__rtti = "<class path=\"com.imagination.robotlegs.starling.commands.keyboard.KeyboardCommand\" params=\"\">\n\t<extends path=\"robotlegs.bender.bundles.mvcs.Command\"/>\n\t<sceneModel public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.imag.impl.model.scene.SceneModel\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</sceneModel>\n\t<keyboardMap public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.imag.api.services.keyboard.IKeyboardMap\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</keyboardMap>\n\t<execute public=\"1\" set=\"method\" line=\"22\" override=\"1\"><f a=\"\"><x path=\"Void\"/></f></execute>\n\t<SetScene set=\"method\" line=\"27\"><f a=\"uri\">\n\t<c path=\"String\"/>\n\t<x path=\"Void\"/>\n</f></SetScene>\n\t<new public=\"1\" set=\"method\" line=\"20\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
com.imagination.robotlegs.starling.definitions.scene.SceneIDs.__rtti = "<class path=\"com.imagination.robotlegs.starling.definitions.scene.SceneIDs\" params=\"\">\n\t<XXX public=\"1\" line=\"12\" static=\"1\"><c path=\"String\"/></XXX>\n\t<new public=\"1\" set=\"method\" line=\"14\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
com.imagination.robotlegs.starling.definitions.scene.SceneIDs.XXX = "scene xxx";
com.imagination.robotlegs.starling.model.ModelConfig.__meta__ = { fields : { injector : { inject : null}, configModel : { inject : null}}};
com.imagination.robotlegs.starling.model.ModelConfig.__rtti = "<class path=\"com.imagination.robotlegs.starling.model.ModelConfig\" params=\"\">\n\t<implements path=\"robotlegs.bender.framework.api.IConfig\"/>\n\t<injector public=\"1\">\n\t\t<c path=\"robotlegs.bender.framework.api.IInjector\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</injector>\n\t<configModel public=\"1\">\n\t\t<c path=\"com.imagination.robotlegs.starling.model.config.ConfigModel\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</configModel>\n\t<configure public=\"1\" set=\"method\" line=\"22\"><f a=\"\"><x path=\"Void\"/></f></configure>\n\t<new public=\"1\" set=\"method\" line=\"20\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.imag.impl.model.config.BaseConfigModel.__rtti = "<class path=\"robotlegs.bender.extensions.imag.impl.model.config.BaseConfigModel\" params=\"\">\n\t<_configURL line=\"11\" static=\"1\"><c path=\"String\"/></_configURL>\n\t<configURL public=\"1\" get=\"accessor\" set=\"accessor\"><c path=\"String\"/></configURL>\n\t<get_configURL public=\"1\" set=\"method\" line=\"16\"><f a=\"\"><c path=\"String\"/></f></get_configURL>\n\t<set_configURL public=\"1\" set=\"method\" line=\"21\"><f a=\"value\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></set_configURL>\n\t<new public=\"1\" set=\"method\" line=\"14\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.imag.impl.model.config.BaseConfigModel._configURL = "xml/config.xml";
com.imagination.robotlegs.starling.model.config.ConfigModel.__rtti = "<class path=\"com.imagination.robotlegs.starling.model.config.ConfigModel\" params=\"\">\n\t<extends path=\"robotlegs.bender.extensions.imag.impl.model.config.BaseConfigModel\"/>\n\t<implements path=\"robotlegs.bender.extensions.imag.api.model.config.IConfigModel\"/>\n\t<new public=\"1\" set=\"method\" line=\"16\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
com.imagination.robotlegs.starling.model.example.ExampleModel.__rtti = "<class path=\"com.imagination.robotlegs.starling.model.example.ExampleModel\" params=\"\">\n\t<_value><x path=\"Int\"/></_value>\n\t<change public=\"1\" line=\"14\"><c path=\"msignal.Signal0\"/></change>\n\t<value public=\"1\" get=\"accessor\" set=\"accessor\"><x path=\"Int\"/></value>\n\t<get_value public=\"1\" set=\"method\" line=\"22\"><f a=\"\"><x path=\"Int\"/></f></get_value>\n\t<set_value public=\"1\" set=\"method\" line=\"27\"><f a=\"value\">\n\t<x path=\"Int\"/>\n\t<x path=\"Int\"/>\n</f></set_value>\n\t<new public=\"1\" set=\"method\" line=\"17\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
com.imagination.robotlegs.starling.services.ServiceConfig.__meta__ = { fields : { injector : { inject : null}}};
com.imagination.robotlegs.starling.services.ServiceConfig.__rtti = "<class path=\"com.imagination.robotlegs.starling.services.ServiceConfig\" params=\"\">\n\t<implements path=\"robotlegs.bender.framework.api.IConfig\"/>\n\t<injector public=\"1\">\n\t\t<c path=\"robotlegs.bender.framework.api.IInjector\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</injector>\n\t<configure public=\"1\" set=\"method\" line=\"20\"><f a=\"\"><x path=\"Void\"/></f></configure>\n\t<new public=\"1\" set=\"method\" line=\"18\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
com.imagination.robotlegs.starling.services.example.ExampleService.__rtti = "<class path=\"com.imagination.robotlegs.starling.services.example.ExampleService\" params=\"\">\n\t<new public=\"1\" set=\"method\" line=\"12\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
com.imagination.robotlegs.starling.view.ViewConfig.__meta__ = { fields : { context : { inject : null}, commandMap : { inject : null}, mediatorMap : { inject : null}, stack : { inject : null}, renderer : { inject : null}, contextView : { inject : null}}};
com.imagination.robotlegs.starling.view.ViewConfig.__rtti = "<class path=\"com.imagination.robotlegs.starling.view.ViewConfig\" params=\"\">\n\t<implements path=\"robotlegs.bender.framework.api.IConfig\"/>\n\t<context public=\"1\">\n\t\t<c path=\"robotlegs.bender.framework.api.IContext\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</context>\n\t<commandMap public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.signalCommandMap.api.ISignalCommandMap\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</commandMap>\n\t<mediatorMap public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.mediatorMap.api.IMediatorMap\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</mediatorMap>\n\t<stack public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.stage3D.base.api.IStack\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</stack>\n\t<renderer public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.stage3D.base.api.IRenderer\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</renderer>\n\t<contextView public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.contextView.ContextView\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</contextView>\n\t<configure public=\"1\" set=\"method\" line=\"47\"><f a=\"\"><x path=\"Void\"/></f></configure>\n\t<init set=\"method\" line=\"52\"><f a=\"\"><x path=\"Void\"/></f></init>\n\t<OnContext3DReady set=\"method\" line=\"59\"><f a=\"\"><x path=\"Void\"/></f></OnContext3DReady>\n\t<mapMediators set=\"method\" line=\"66\"><f a=\"\"><x path=\"Void\"/></f></mapMediators>\n\t<initView set=\"method\" line=\"76\"><f a=\"\"><x path=\"Void\"/></f></initView>\n\t<new public=\"1\" set=\"method\" line=\"42\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
com.imagination.robotlegs.starling.view.away3d.MainAwayLayer.__rtti = "<class path=\"com.imagination.robotlegs.starling.view.away3d.MainAwayLayer\" params=\"\">\n\t<extends path=\"robotlegs.bender.extensions.stage3D.away3d.impl.AwayLayer\"/>\n\t<exampleAwayObject><c path=\"com.imagination.robotlegs.starling.view.away3d.display.ExampleAwayObject\"/></exampleAwayObject>\n\t<initialize public=\"1\" set=\"method\" line=\"27\"><f a=\"\"><x path=\"Void\"/></f></initialize>\n\t<Update set=\"method\" line=\"45\"><f a=\"e\">\n\t<c path=\"openfl.events.Event\"/>\n\t<x path=\"Void\"/>\n</f></Update>\n\t<process public=\"1\" set=\"method\" line=\"50\" override=\"1\"><f a=\"\"><x path=\"Void\"/></f></process>\n\t<new public=\"1\" set=\"method\" line=\"22\"><f a=\"profile\">\n\t<c path=\"String\"/>\n\t<x path=\"Void\"/>\n</f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
com.imagination.robotlegs.starling.view.away3d.MainAwayLayer2.__rtti = "<class path=\"com.imagination.robotlegs.starling.view.away3d.MainAwayLayer2\" params=\"\">\n\t<extends path=\"robotlegs.bender.extensions.stage3D.away3d.impl.AwayLayer\"/>\n\t<exampleAwayObject><c path=\"com.imagination.robotlegs.starling.view.away3d.display.ExampleAwayObject\"/></exampleAwayObject>\n\t<initialize public=\"1\" set=\"method\" line=\"27\"><f a=\"\"><x path=\"Void\"/></f></initialize>\n\t<Update set=\"method\" line=\"36\"><f a=\"e\">\n\t<c path=\"openfl.events.Event\"/>\n\t<x path=\"Void\"/>\n</f></Update>\n\t<process public=\"1\" set=\"method\" line=\"41\" override=\"1\"><f a=\"\"><x path=\"Void\"/></f></process>\n\t<new public=\"1\" set=\"method\" line=\"22\"><f a=\"profile\">\n\t<c path=\"String\"/>\n\t<x path=\"Void\"/>\n</f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
robotlegs.bender.bundles.mvcs.Mediator.__meta__ = { fields : { eventMap : { inject : null}, eventDispatcher : { inject : null}}};
robotlegs.bender.bundles.mvcs.Mediator.__rtti = "<class path=\"robotlegs.bender.bundles.mvcs.Mediator\" params=\"\">\n\t<implements path=\"robotlegs.bender.extensions.mediatorMap.api.IMediator\"/>\n\t<eventMap public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.localEventMap.api.IEventMap\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</eventMap>\n\t<eventDispatcher public=\"1\">\n\t\t<c path=\"openfl.events.IEventDispatcher\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</eventDispatcher>\n\t<_viewComponent><d/></_viewComponent>\n\t<set_viewComponent public=\"1\" set=\"method\" line=\"39\"><f a=\"view\">\n\t<d/>\n\t<x path=\"Void\"/>\n</f></set_viewComponent>\n\t<initialize public=\"1\" set=\"method\" line=\"51\"><f a=\"\"><x path=\"Void\"/></f></initialize>\n\t<destroy public=\"1\" set=\"method\" line=\"58\"><f a=\"\"><x path=\"Void\"/></f></destroy>\n\t<postDestroy public=\"1\" set=\"method\" line=\"66\"><f a=\"\"><x path=\"Void\"/></f></postDestroy>\n\t<addViewListener set=\"method\" line=\"75\"><f a=\"eventString:listener:?eventClass\" v=\"::null\">\n\t<c path=\"String\"/>\n\t<d/>\n\t<x path=\"Class\"><d/></x>\n\t<x path=\"Void\"/>\n</f></addViewListener>\n\t<addContextListener set=\"method\" line=\"80\"><f a=\"eventString:listener:?eventClass\" v=\"::null\">\n\t<c path=\"String\"/>\n\t<d/>\n\t<x path=\"Class\"><d/></x>\n\t<x path=\"Void\"/>\n</f></addContextListener>\n\t<removeViewListener set=\"method\" line=\"85\"><f a=\"eventString:listener:?eventClass\" v=\"::null\">\n\t<c path=\"String\"/>\n\t<d/>\n\t<x path=\"Class\"><d/></x>\n\t<x path=\"Void\"/>\n</f></removeViewListener>\n\t<removeContextListener set=\"method\" line=\"90\"><f a=\"eventString:listener:?eventClass\" v=\"::null\">\n\t<c path=\"String\"/>\n\t<d/>\n\t<x path=\"Class\"><d/></x>\n\t<x path=\"Void\"/>\n</f></removeContextListener>\n\t<dispatch set=\"method\" line=\"95\"><f a=\"event\">\n\t<c path=\"openfl.events.Event\"/>\n\t<x path=\"Void\"/>\n</f></dispatch>\n\t<meta>\n\t\t<m n=\":keepSub\"/>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
com.imagination.robotlegs.starling.view.away3d.MainAwayLayerMediator.__meta__ = { fields : { view : { inject : null}}};
com.imagination.robotlegs.starling.view.away3d.MainAwayLayerMediator.__rtti = "<class path=\"com.imagination.robotlegs.starling.view.away3d.MainAwayLayerMediator\" params=\"\">\n\t<extends path=\"robotlegs.bender.bundles.mvcs.Mediator\"/>\n\t<view public=\"1\">\n\t\t<c path=\"com.imagination.robotlegs.starling.view.away3d.MainAwayLayer\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</view>\n\t<initialize public=\"1\" set=\"method\" line=\"21\" override=\"1\"><f a=\"\"><x path=\"Void\"/></f></initialize>\n\t<new public=\"1\" set=\"method\" line=\"16\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
com.imagination.robotlegs.starling.view.away3d.MainAwayLayerMediator2.__meta__ = { fields : { view : { inject : null}}};
com.imagination.robotlegs.starling.view.away3d.MainAwayLayerMediator2.__rtti = "<class path=\"com.imagination.robotlegs.starling.view.away3d.MainAwayLayerMediator2\" params=\"\">\n\t<extends path=\"robotlegs.bender.bundles.mvcs.Mediator\"/>\n\t<view public=\"1\">\n\t\t<c path=\"com.imagination.robotlegs.starling.view.away3d.MainAwayLayer2\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</view>\n\t<initialize public=\"1\" set=\"method\" line=\"21\" override=\"1\"><f a=\"\"><x path=\"Void\"/></f></initialize>\n\t<new public=\"1\" set=\"method\" line=\"16\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
com.imagination.robotlegs.starling.view.away3d.display.ExampleAwayObject.__rtti = "<class path=\"com.imagination.robotlegs.starling.view.away3d.display.ExampleAwayObject\" params=\"\">\n\t<extends path=\"away3d.containers.ObjectContainer3D\"/>\n\t<cubes><x path=\"openfl.Vector\"><c path=\"away3d.entities.Mesh\"/></x></cubes>\n\t<colour><x path=\"UInt\"/></colour>\n\t<depth><x path=\"Int\"/></depth>\n\t<initialize public=\"1\" set=\"method\" line=\"33\"><f a=\"\"><x path=\"Void\"/></f></initialize>\n\t<update public=\"1\" set=\"method\" line=\"57\"><f a=\"\"><x path=\"Void\"/></f></update>\n\t<new public=\"1\" set=\"method\" line=\"25\"><f a=\"?depth:?colour\" v=\"1000:16777215\">\n\t<x path=\"Int\"/>\n\t<x path=\"UInt\"/>\n\t<x path=\"Void\"/>\n</f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
com.imagination.robotlegs.starling.view.away3d.display.ExampleAwayObjectMediator.__meta__ = { fields : { view : { inject : null}}};
com.imagination.robotlegs.starling.view.away3d.display.ExampleAwayObjectMediator.__rtti = "<class path=\"com.imagination.robotlegs.starling.view.away3d.display.ExampleAwayObjectMediator\" params=\"\">\n\t<extends path=\"robotlegs.bender.bundles.mvcs.Mediator\"/>\n\t<view public=\"1\">\n\t\t<c path=\"com.imagination.robotlegs.starling.view.away3d.display.ExampleAwayObject\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</view>\n\t<initialize public=\"1\" set=\"method\" line=\"21\" override=\"1\"><f a=\"\"><x path=\"Void\"/></f></initialize>\n\t<new public=\"1\" set=\"method\" line=\"16\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
starling.events.EventDispatcher.sBubbleChains = new Array();
starling.display.DisplayObject.sAncestors = (function($this) {
	var $r;
	var this1;
	this1 = new openfl.VectorData();
	{
		var this2;
		this2 = new Array(0);
		this1.data = this2;
	}
	this1.length = 0;
	this1.fixed = false;
	$r = this1;
	return $r;
}(this));
starling.display.DisplayObject.sHelperPoint = new openfl.geom.Point();
starling.display.DisplayObject.sHelperPoint3D = new openfl.geom.Vector3D();
starling.display.DisplayObject.sHelperRect = new openfl.geom.Rectangle();
starling.display.DisplayObject.sHelperMatrix = new openfl.geom.Matrix();
starling.display.DisplayObject.sHelperMatrixAlt = new openfl.geom.Matrix();
starling.display.DisplayObject.sHelperMatrix3D = new openfl.geom.Matrix3D();
starling.display.DisplayObject.sHelperMatrixAlt3D = new openfl.geom.Matrix3D();
starling.display.DisplayObjectContainer.sHelperMatrix = new openfl.geom.Matrix();
starling.display.DisplayObjectContainer.sHelperPoint = new openfl.geom.Point();
starling.display.DisplayObjectContainer.sBroadcastListeners = (function($this) {
	var $r;
	var this1;
	this1 = new openfl.VectorData();
	{
		var this2;
		this2 = new Array(0);
		this1.data = this2;
	}
	this1.length = 0;
	this1.fixed = false;
	$r = this1;
	return $r;
}(this));
starling.display.DisplayObjectContainer.sSortBuffer = (function($this) {
	var $r;
	var this1;
	this1 = new openfl.VectorData();
	{
		var this2;
		this2 = new Array(0);
		this1.data = this2;
	}
	this1.length = 0;
	this1.fixed = false;
	$r = this1;
	return $r;
}(this));
starling.display.Sprite.sHelperMatrix = new openfl.geom.Matrix();
starling.display.Sprite.sHelperPoint = new openfl.geom.Point();
starling.display.Sprite.sHelperRect = new openfl.geom.Rectangle();
robotlegs.bender.extensions.stage3D.starling.impl.StarlingLayer.__rtti = "<class path=\"robotlegs.bender.extensions.stage3D.starling.impl.StarlingLayer\" params=\"\">\n\t<extends path=\"starling.display.Sprite\"/>\n\t<implements path=\"robotlegs.bender.extensions.stage3D.base.api.ILayer\"/>\n\t<_iRenderer><c path=\"robotlegs.bender.extensions.stage3D.base.api.IRenderer\"/></_iRenderer>\n\t<starling><c path=\"starling.core.Starling\"/></starling>\n\t<rect public=\"1\" get=\"null\" set=\"accessor\"><c path=\"openfl.geom.Rectangle\"/></rect>\n\t<iRenderer public=\"1\" get=\"accessor\" set=\"accessor\"><c path=\"robotlegs.bender.extensions.stage3D.base.api.IRenderer\"/></iRenderer>\n\t<process public=\"1\" set=\"method\" line=\"27\"><f a=\"\"><x path=\"Void\"/></f></process>\n\t<setStarling public=\"1\" set=\"method\" line=\"32\"><f a=\"starling\">\n\t<c path=\"starling.core.Starling\"/>\n\t<x path=\"Void\"/>\n</f></setStarling>\n\t<set_rect public=\"1\" set=\"method\" line=\"37\"><f a=\"rect\">\n\t<c path=\"openfl.geom.Rectangle\"/>\n\t<c path=\"openfl.geom.Rectangle\"/>\n</f></set_rect>\n\t<set_iRenderer public=\"1\" set=\"method\" line=\"45\"><f a=\"value\">\n\t<c path=\"robotlegs.bender.extensions.stage3D.base.api.IRenderer\"/>\n\t<c path=\"robotlegs.bender.extensions.stage3D.base.api.IRenderer\"/>\n</f></set_iRenderer>\n\t<get_iRenderer public=\"1\" set=\"method\" line=\"50\"><f a=\"\"><c path=\"robotlegs.bender.extensions.stage3D.base.api.IRenderer\"/></f></get_iRenderer>\n\t<new public=\"1\" set=\"method\" line=\"22\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
com.imagination.robotlegs.starling.view.starling.CheckerboardStarlingLayer.__rtti = "<class path=\"com.imagination.robotlegs.starling.view.starling.CheckerboardStarlingLayer\" params=\"\">\n\t<extends path=\"robotlegs.bender.extensions.stage3D.starling.impl.StarlingLayer\"/>\n\t<initialize public=\"1\" set=\"method\" line=\"26\"><f a=\"\"><x path=\"Void\"/></f></initialize>\n\t<new public=\"1\" set=\"method\" line=\"21\"><f a=\"\"><x path=\"Void\"/></f></new>\n</class>";
com.imagination.robotlegs.starling.view.starling.CheckerboardStarlingLayerMediator.__meta__ = { fields : { view : { inject : null}}};
com.imagination.robotlegs.starling.view.starling.CheckerboardStarlingLayerMediator.__rtti = "<class path=\"com.imagination.robotlegs.starling.view.starling.CheckerboardStarlingLayerMediator\" params=\"\">\n\t<extends path=\"robotlegs.bender.bundles.mvcs.Mediator\"/>\n\t<view public=\"1\">\n\t\t<c path=\"com.imagination.robotlegs.starling.view.starling.CheckerboardStarlingLayer\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</view>\n\t<initialize public=\"1\" set=\"method\" line=\"17\" override=\"1\"><f a=\"\"><x path=\"Void\"/></f></initialize>\n\t<new public=\"1\" set=\"method\" line=\"12\"><f a=\"\"><x path=\"Void\"/></f></new>\n</class>";
com.imagination.robotlegs.starling.view.starling.MainStarlingLayer.__rtti = "<class path=\"com.imagination.robotlegs.starling.view.starling.MainStarlingLayer\" params=\"\">\n\t<extends path=\"robotlegs.bender.extensions.stage3D.starling.impl.StarlingLayer\"/>\n\t<time line=\"21\"><x path=\"Float\"/></time>\n\t<assets><c path=\"starling.utils.AssetManager\"/></assets>\n\t<mMovies><x path=\"openfl.Vector\"><c path=\"starling.display.MovieClip\"/></x></mMovies>\n\t<initialize public=\"1\" set=\"method\" line=\"30\"><f a=\"\"><x path=\"Void\"/></f></initialize>\n\t<onComplete set=\"method\" line=\"46\"><f a=\"assets\">\n\t<c path=\"starling.utils.AssetManager\"/>\n\t<x path=\"Void\"/>\n</f></onComplete>\n\t<Update set=\"method\" line=\"67\"><f a=\"e\">\n\t<c path=\"starling.events.EnterFrameEvent\"/>\n\t<x path=\"Void\"/>\n</f></Update>\n\t<new public=\"1\" set=\"method\" line=\"25\"><f a=\"\"><x path=\"Void\"/></f></new>\n</class>";
com.imagination.robotlegs.starling.view.starling.MainStarlingLayerMediator.__meta__ = { fields : { view : { inject : null}}};
com.imagination.robotlegs.starling.view.starling.MainStarlingLayerMediator.__rtti = "<class path=\"com.imagination.robotlegs.starling.view.starling.MainStarlingLayerMediator\" params=\"\">\n\t<extends path=\"robotlegs.bender.bundles.mvcs.Mediator\"/>\n\t<view public=\"1\">\n\t\t<c path=\"com.imagination.robotlegs.starling.view.starling.MainStarlingLayer\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</view>\n\t<initialize public=\"1\" set=\"method\" line=\"18\" override=\"1\"><f a=\"\"><x path=\"Void\"/></f></initialize>\n\t<new public=\"1\" set=\"method\" line=\"13\"><f a=\"\"><x path=\"Void\"/></f></new>\n</class>";
haxe.ds.ObjectMap.count = 0;
haxe.xml.Parser.escapes = (function($this) {
	var $r;
	var h = new haxe.ds.StringMap();
	h.set("lt","<");
	h.set("gt",">");
	h.set("amp","&");
	h.set("quot","\"");
	h.set("apos","'");
	h.set("nbsp",String.fromCharCode(160));
	$r = h;
	return $r;
}(this));
js.Boot.__toStr = {}.toString;
lime.Assets.cache = new lime.AssetCache();
lime.Assets.libraries = new haxe.ds.StringMap();
lime.Assets.initialized = false;
lime._Assets.AssetType_Impl_.BINARY = "BINARY";
lime._Assets.AssetType_Impl_.FONT = "FONT";
lime._Assets.AssetType_Impl_.IMAGE = "IMAGE";
lime._Assets.AssetType_Impl_.MUSIC = "MUSIC";
lime._Assets.AssetType_Impl_.SOUND = "SOUND";
lime._Assets.AssetType_Impl_.TEMPLATE = "TEMPLATE";
lime._Assets.AssetType_Impl_.TEXT = "TEXT";
lime.app.Preloader.images = new haxe.ds.StringMap();
lime.app.Preloader.loaders = new haxe.ds.StringMap();
lime.audio.openal.AL.NONE = 0;
lime.audio.openal.AL.FALSE = 0;
lime.audio.openal.AL.TRUE = 1;
lime.audio.openal.AL.SOURCE_RELATIVE = 514;
lime.audio.openal.AL.CONE_INNER_ANGLE = 4097;
lime.audio.openal.AL.CONE_OUTER_ANGLE = 4098;
lime.audio.openal.AL.PITCH = 4099;
lime.audio.openal.AL.POSITION = 4100;
lime.audio.openal.AL.DIRECTION = 4101;
lime.audio.openal.AL.VELOCITY = 4102;
lime.audio.openal.AL.LOOPING = 4103;
lime.audio.openal.AL.BUFFER = 4105;
lime.audio.openal.AL.GAIN = 4106;
lime.audio.openal.AL.MIN_GAIN = 4109;
lime.audio.openal.AL.MAX_GAIN = 4110;
lime.audio.openal.AL.ORIENTATION = 4111;
lime.audio.openal.AL.SOURCE_STATE = 4112;
lime.audio.openal.AL.INITIAL = 4113;
lime.audio.openal.AL.PLAYING = 4114;
lime.audio.openal.AL.PAUSED = 4115;
lime.audio.openal.AL.STOPPED = 4116;
lime.audio.openal.AL.BUFFERS_QUEUED = 4117;
lime.audio.openal.AL.BUFFERS_PROCESSED = 4118;
lime.audio.openal.AL.REFERENCE_DISTANCE = 4128;
lime.audio.openal.AL.ROLLOFF_FACTOR = 4129;
lime.audio.openal.AL.CONE_OUTER_GAIN = 4130;
lime.audio.openal.AL.MAX_DISTANCE = 4131;
lime.audio.openal.AL.SEC_OFFSET = 4132;
lime.audio.openal.AL.SAMPLE_OFFSET = 4133;
lime.audio.openal.AL.BYTE_OFFSET = 4134;
lime.audio.openal.AL.SOURCE_TYPE = 4135;
lime.audio.openal.AL.STATIC = 4136;
lime.audio.openal.AL.STREAMING = 4137;
lime.audio.openal.AL.UNDETERMINED = 4144;
lime.audio.openal.AL.FORMAT_MONO8 = 4352;
lime.audio.openal.AL.FORMAT_MONO16 = 4353;
lime.audio.openal.AL.FORMAT_STEREO8 = 4354;
lime.audio.openal.AL.FORMAT_STEREO16 = 4355;
lime.audio.openal.AL.FREQUENCY = 8193;
lime.audio.openal.AL.BITS = 8194;
lime.audio.openal.AL.CHANNELS = 8195;
lime.audio.openal.AL.SIZE = 8196;
lime.audio.openal.AL.NO_ERROR = 0;
lime.audio.openal.AL.INVALID_NAME = 40961;
lime.audio.openal.AL.INVALID_ENUM = 40962;
lime.audio.openal.AL.INVALID_VALUE = 40963;
lime.audio.openal.AL.INVALID_OPERATION = 40964;
lime.audio.openal.AL.OUT_OF_MEMORY = 40965;
lime.audio.openal.AL.VENDOR = 45057;
lime.audio.openal.AL.VERSION = 45058;
lime.audio.openal.AL.RENDERER = 45059;
lime.audio.openal.AL.EXTENSIONS = 45060;
lime.audio.openal.AL.DOPPLER_FACTOR = 49152;
lime.audio.openal.AL.SPEED_OF_SOUND = 49155;
lime.audio.openal.AL.DOPPLER_VELOCITY = 49153;
lime.audio.openal.AL.DISTANCE_MODEL = 53248;
lime.audio.openal.AL.INVERSE_DISTANCE = 53249;
lime.audio.openal.AL.INVERSE_DISTANCE_CLAMPED = 53250;
lime.audio.openal.AL.LINEAR_DISTANCE = 53251;
lime.audio.openal.AL.LINEAR_DISTANCE_CLAMPED = 53252;
lime.audio.openal.AL.EXPONENT_DISTANCE = 53253;
lime.audio.openal.AL.EXPONENT_DISTANCE_CLAMPED = 53254;
lime.audio.openal.ALC.FALSE = 0;
lime.audio.openal.ALC.TRUE = 1;
lime.audio.openal.ALC.FREQUENCY = 4103;
lime.audio.openal.ALC.REFRESH = 4104;
lime.audio.openal.ALC.SYNC = 4105;
lime.audio.openal.ALC.MONO_SOURCES = 4112;
lime.audio.openal.ALC.STEREO_SOURCES = 4113;
lime.audio.openal.ALC.NO_ERROR = 0;
lime.audio.openal.ALC.INVALID_DEVICE = 40961;
lime.audio.openal.ALC.INVALID_CONTEXT = 40962;
lime.audio.openal.ALC.INVALID_ENUM = 40963;
lime.audio.openal.ALC.INVALID_VALUE = 40964;
lime.audio.openal.ALC.OUT_OF_MEMORY = 40965;
lime.audio.openal.ALC.ATTRIBUTES_SIZE = 4098;
lime.audio.openal.ALC.ALL_ATTRIBUTES = 4099;
lime.audio.openal.ALC.DEFAULT_DEVICE_SPECIFIER = 4100;
lime.audio.openal.ALC.DEVICE_SPECIFIER = 4101;
lime.audio.openal.ALC.EXTENSIONS = 4102;
lime.audio.openal.ALC.ENUMERATE_ALL_EXT = 1;
lime.audio.openal.ALC.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
lime.audio.openal.ALC.ALL_DEVICES_SPECIFIER = 4115;
lime.graphics.Image.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
lime.graphics.opengl.GL.DEPTH_BUFFER_BIT = 256;
lime.graphics.opengl.GL.STENCIL_BUFFER_BIT = 1024;
lime.graphics.opengl.GL.COLOR_BUFFER_BIT = 16384;
lime.graphics.opengl.GL.POINTS = 0;
lime.graphics.opengl.GL.LINES = 1;
lime.graphics.opengl.GL.LINE_LOOP = 2;
lime.graphics.opengl.GL.LINE_STRIP = 3;
lime.graphics.opengl.GL.TRIANGLES = 4;
lime.graphics.opengl.GL.TRIANGLE_STRIP = 5;
lime.graphics.opengl.GL.TRIANGLE_FAN = 6;
lime.graphics.opengl.GL.ZERO = 0;
lime.graphics.opengl.GL.ONE = 1;
lime.graphics.opengl.GL.SRC_COLOR = 768;
lime.graphics.opengl.GL.ONE_MINUS_SRC_COLOR = 769;
lime.graphics.opengl.GL.SRC_ALPHA = 770;
lime.graphics.opengl.GL.ONE_MINUS_SRC_ALPHA = 771;
lime.graphics.opengl.GL.DST_ALPHA = 772;
lime.graphics.opengl.GL.ONE_MINUS_DST_ALPHA = 773;
lime.graphics.opengl.GL.DST_COLOR = 774;
lime.graphics.opengl.GL.ONE_MINUS_DST_COLOR = 775;
lime.graphics.opengl.GL.SRC_ALPHA_SATURATE = 776;
lime.graphics.opengl.GL.FUNC_ADD = 32774;
lime.graphics.opengl.GL.BLEND_EQUATION = 32777;
lime.graphics.opengl.GL.BLEND_EQUATION_RGB = 32777;
lime.graphics.opengl.GL.BLEND_EQUATION_ALPHA = 34877;
lime.graphics.opengl.GL.FUNC_SUBTRACT = 32778;
lime.graphics.opengl.GL.FUNC_REVERSE_SUBTRACT = 32779;
lime.graphics.opengl.GL.BLEND_DST_RGB = 32968;
lime.graphics.opengl.GL.BLEND_SRC_RGB = 32969;
lime.graphics.opengl.GL.BLEND_DST_ALPHA = 32970;
lime.graphics.opengl.GL.BLEND_SRC_ALPHA = 32971;
lime.graphics.opengl.GL.CONSTANT_COLOR = 32769;
lime.graphics.opengl.GL.ONE_MINUS_CONSTANT_COLOR = 32770;
lime.graphics.opengl.GL.CONSTANT_ALPHA = 32771;
lime.graphics.opengl.GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
lime.graphics.opengl.GL.BLEND_COLOR = 32773;
lime.graphics.opengl.GL.ARRAY_BUFFER = 34962;
lime.graphics.opengl.GL.ELEMENT_ARRAY_BUFFER = 34963;
lime.graphics.opengl.GL.ARRAY_BUFFER_BINDING = 34964;
lime.graphics.opengl.GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
lime.graphics.opengl.GL.STREAM_DRAW = 35040;
lime.graphics.opengl.GL.STATIC_DRAW = 35044;
lime.graphics.opengl.GL.DYNAMIC_DRAW = 35048;
lime.graphics.opengl.GL.BUFFER_SIZE = 34660;
lime.graphics.opengl.GL.BUFFER_USAGE = 34661;
lime.graphics.opengl.GL.CURRENT_VERTEX_ATTRIB = 34342;
lime.graphics.opengl.GL.FRONT = 1028;
lime.graphics.opengl.GL.BACK = 1029;
lime.graphics.opengl.GL.FRONT_AND_BACK = 1032;
lime.graphics.opengl.GL.CULL_FACE = 2884;
lime.graphics.opengl.GL.BLEND = 3042;
lime.graphics.opengl.GL.DITHER = 3024;
lime.graphics.opengl.GL.STENCIL_TEST = 2960;
lime.graphics.opengl.GL.DEPTH_TEST = 2929;
lime.graphics.opengl.GL.SCISSOR_TEST = 3089;
lime.graphics.opengl.GL.POLYGON_OFFSET_FILL = 32823;
lime.graphics.opengl.GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
lime.graphics.opengl.GL.SAMPLE_COVERAGE = 32928;
lime.graphics.opengl.GL.NO_ERROR = 0;
lime.graphics.opengl.GL.INVALID_ENUM = 1280;
lime.graphics.opengl.GL.INVALID_VALUE = 1281;
lime.graphics.opengl.GL.INVALID_OPERATION = 1282;
lime.graphics.opengl.GL.OUT_OF_MEMORY = 1285;
lime.graphics.opengl.GL.CW = 2304;
lime.graphics.opengl.GL.CCW = 2305;
lime.graphics.opengl.GL.LINE_WIDTH = 2849;
lime.graphics.opengl.GL.ALIASED_POINT_SIZE_RANGE = 33901;
lime.graphics.opengl.GL.ALIASED_LINE_WIDTH_RANGE = 33902;
lime.graphics.opengl.GL.CULL_FACE_MODE = 2885;
lime.graphics.opengl.GL.FRONT_FACE = 2886;
lime.graphics.opengl.GL.DEPTH_RANGE = 2928;
lime.graphics.opengl.GL.DEPTH_WRITEMASK = 2930;
lime.graphics.opengl.GL.DEPTH_CLEAR_VALUE = 2931;
lime.graphics.opengl.GL.DEPTH_FUNC = 2932;
lime.graphics.opengl.GL.STENCIL_CLEAR_VALUE = 2961;
lime.graphics.opengl.GL.STENCIL_FUNC = 2962;
lime.graphics.opengl.GL.STENCIL_FAIL = 2964;
lime.graphics.opengl.GL.STENCIL_PASS_DEPTH_FAIL = 2965;
lime.graphics.opengl.GL.STENCIL_PASS_DEPTH_PASS = 2966;
lime.graphics.opengl.GL.STENCIL_REF = 2967;
lime.graphics.opengl.GL.STENCIL_VALUE_MASK = 2963;
lime.graphics.opengl.GL.STENCIL_WRITEMASK = 2968;
lime.graphics.opengl.GL.STENCIL_BACK_FUNC = 34816;
lime.graphics.opengl.GL.STENCIL_BACK_FAIL = 34817;
lime.graphics.opengl.GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
lime.graphics.opengl.GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
lime.graphics.opengl.GL.STENCIL_BACK_REF = 36003;
lime.graphics.opengl.GL.STENCIL_BACK_VALUE_MASK = 36004;
lime.graphics.opengl.GL.STENCIL_BACK_WRITEMASK = 36005;
lime.graphics.opengl.GL.VIEWPORT = 2978;
lime.graphics.opengl.GL.SCISSOR_BOX = 3088;
lime.graphics.opengl.GL.COLOR_CLEAR_VALUE = 3106;
lime.graphics.opengl.GL.COLOR_WRITEMASK = 3107;
lime.graphics.opengl.GL.UNPACK_ALIGNMENT = 3317;
lime.graphics.opengl.GL.PACK_ALIGNMENT = 3333;
lime.graphics.opengl.GL.MAX_TEXTURE_SIZE = 3379;
lime.graphics.opengl.GL.MAX_VIEWPORT_DIMS = 3386;
lime.graphics.opengl.GL.SUBPIXEL_BITS = 3408;
lime.graphics.opengl.GL.RED_BITS = 3410;
lime.graphics.opengl.GL.GREEN_BITS = 3411;
lime.graphics.opengl.GL.BLUE_BITS = 3412;
lime.graphics.opengl.GL.ALPHA_BITS = 3413;
lime.graphics.opengl.GL.DEPTH_BITS = 3414;
lime.graphics.opengl.GL.STENCIL_BITS = 3415;
lime.graphics.opengl.GL.POLYGON_OFFSET_UNITS = 10752;
lime.graphics.opengl.GL.POLYGON_OFFSET_FACTOR = 32824;
lime.graphics.opengl.GL.TEXTURE_BINDING_2D = 32873;
lime.graphics.opengl.GL.SAMPLE_BUFFERS = 32936;
lime.graphics.opengl.GL.SAMPLES = 32937;
lime.graphics.opengl.GL.SAMPLE_COVERAGE_VALUE = 32938;
lime.graphics.opengl.GL.SAMPLE_COVERAGE_INVERT = 32939;
lime.graphics.opengl.GL.COMPRESSED_TEXTURE_FORMATS = 34467;
lime.graphics.opengl.GL.DONT_CARE = 4352;
lime.graphics.opengl.GL.FASTEST = 4353;
lime.graphics.opengl.GL.NICEST = 4354;
lime.graphics.opengl.GL.GENERATE_MIPMAP_HINT = 33170;
lime.graphics.opengl.GL.BYTE = 5120;
lime.graphics.opengl.GL.UNSIGNED_BYTE = 5121;
lime.graphics.opengl.GL.SHORT = 5122;
lime.graphics.opengl.GL.UNSIGNED_SHORT = 5123;
lime.graphics.opengl.GL.INT = 5124;
lime.graphics.opengl.GL.UNSIGNED_INT = 5125;
lime.graphics.opengl.GL.FLOAT = 5126;
lime.graphics.opengl.GL.DEPTH_COMPONENT = 6402;
lime.graphics.opengl.GL.ALPHA = 6406;
lime.graphics.opengl.GL.RGB = 6407;
lime.graphics.opengl.GL.RGBA = 6408;
lime.graphics.opengl.GL.LUMINANCE = 6409;
lime.graphics.opengl.GL.LUMINANCE_ALPHA = 6410;
lime.graphics.opengl.GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
lime.graphics.opengl.GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
lime.graphics.opengl.GL.UNSIGNED_SHORT_5_6_5 = 33635;
lime.graphics.opengl.GL.FRAGMENT_SHADER = 35632;
lime.graphics.opengl.GL.VERTEX_SHADER = 35633;
lime.graphics.opengl.GL.MAX_VERTEX_ATTRIBS = 34921;
lime.graphics.opengl.GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
lime.graphics.opengl.GL.MAX_VARYING_VECTORS = 36348;
lime.graphics.opengl.GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
lime.graphics.opengl.GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
lime.graphics.opengl.GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
lime.graphics.opengl.GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
lime.graphics.opengl.GL.SHADER_TYPE = 35663;
lime.graphics.opengl.GL.DELETE_STATUS = 35712;
lime.graphics.opengl.GL.LINK_STATUS = 35714;
lime.graphics.opengl.GL.VALIDATE_STATUS = 35715;
lime.graphics.opengl.GL.ATTACHED_SHADERS = 35717;
lime.graphics.opengl.GL.ACTIVE_UNIFORMS = 35718;
lime.graphics.opengl.GL.ACTIVE_ATTRIBUTES = 35721;
lime.graphics.opengl.GL.SHADING_LANGUAGE_VERSION = 35724;
lime.graphics.opengl.GL.CURRENT_PROGRAM = 35725;
lime.graphics.opengl.GL.NEVER = 512;
lime.graphics.opengl.GL.LESS = 513;
lime.graphics.opengl.GL.EQUAL = 514;
lime.graphics.opengl.GL.LEQUAL = 515;
lime.graphics.opengl.GL.GREATER = 516;
lime.graphics.opengl.GL.NOTEQUAL = 517;
lime.graphics.opengl.GL.GEQUAL = 518;
lime.graphics.opengl.GL.ALWAYS = 519;
lime.graphics.opengl.GL.KEEP = 7680;
lime.graphics.opengl.GL.REPLACE = 7681;
lime.graphics.opengl.GL.INCR = 7682;
lime.graphics.opengl.GL.DECR = 7683;
lime.graphics.opengl.GL.INVERT = 5386;
lime.graphics.opengl.GL.INCR_WRAP = 34055;
lime.graphics.opengl.GL.DECR_WRAP = 34056;
lime.graphics.opengl.GL.VENDOR = 7936;
lime.graphics.opengl.GL.RENDERER = 7937;
lime.graphics.opengl.GL.VERSION = 7938;
lime.graphics.opengl.GL.NEAREST = 9728;
lime.graphics.opengl.GL.LINEAR = 9729;
lime.graphics.opengl.GL.NEAREST_MIPMAP_NEAREST = 9984;
lime.graphics.opengl.GL.LINEAR_MIPMAP_NEAREST = 9985;
lime.graphics.opengl.GL.NEAREST_MIPMAP_LINEAR = 9986;
lime.graphics.opengl.GL.LINEAR_MIPMAP_LINEAR = 9987;
lime.graphics.opengl.GL.TEXTURE_MAG_FILTER = 10240;
lime.graphics.opengl.GL.TEXTURE_MIN_FILTER = 10241;
lime.graphics.opengl.GL.TEXTURE_WRAP_S = 10242;
lime.graphics.opengl.GL.TEXTURE_WRAP_T = 10243;
lime.graphics.opengl.GL.TEXTURE_2D = 3553;
lime.graphics.opengl.GL.TEXTURE = 5890;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP = 34067;
lime.graphics.opengl.GL.TEXTURE_BINDING_CUBE_MAP = 34068;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
lime.graphics.opengl.GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
lime.graphics.opengl.GL.TEXTURE0 = 33984;
lime.graphics.opengl.GL.TEXTURE1 = 33985;
lime.graphics.opengl.GL.TEXTURE2 = 33986;
lime.graphics.opengl.GL.TEXTURE3 = 33987;
lime.graphics.opengl.GL.TEXTURE4 = 33988;
lime.graphics.opengl.GL.TEXTURE5 = 33989;
lime.graphics.opengl.GL.TEXTURE6 = 33990;
lime.graphics.opengl.GL.TEXTURE7 = 33991;
lime.graphics.opengl.GL.TEXTURE8 = 33992;
lime.graphics.opengl.GL.TEXTURE9 = 33993;
lime.graphics.opengl.GL.TEXTURE10 = 33994;
lime.graphics.opengl.GL.TEXTURE11 = 33995;
lime.graphics.opengl.GL.TEXTURE12 = 33996;
lime.graphics.opengl.GL.TEXTURE13 = 33997;
lime.graphics.opengl.GL.TEXTURE14 = 33998;
lime.graphics.opengl.GL.TEXTURE15 = 33999;
lime.graphics.opengl.GL.TEXTURE16 = 34000;
lime.graphics.opengl.GL.TEXTURE17 = 34001;
lime.graphics.opengl.GL.TEXTURE18 = 34002;
lime.graphics.opengl.GL.TEXTURE19 = 34003;
lime.graphics.opengl.GL.TEXTURE20 = 34004;
lime.graphics.opengl.GL.TEXTURE21 = 34005;
lime.graphics.opengl.GL.TEXTURE22 = 34006;
lime.graphics.opengl.GL.TEXTURE23 = 34007;
lime.graphics.opengl.GL.TEXTURE24 = 34008;
lime.graphics.opengl.GL.TEXTURE25 = 34009;
lime.graphics.opengl.GL.TEXTURE26 = 34010;
lime.graphics.opengl.GL.TEXTURE27 = 34011;
lime.graphics.opengl.GL.TEXTURE28 = 34012;
lime.graphics.opengl.GL.TEXTURE29 = 34013;
lime.graphics.opengl.GL.TEXTURE30 = 34014;
lime.graphics.opengl.GL.TEXTURE31 = 34015;
lime.graphics.opengl.GL.ACTIVE_TEXTURE = 34016;
lime.graphics.opengl.GL.REPEAT = 10497;
lime.graphics.opengl.GL.CLAMP_TO_EDGE = 33071;
lime.graphics.opengl.GL.MIRRORED_REPEAT = 33648;
lime.graphics.opengl.GL.FLOAT_VEC2 = 35664;
lime.graphics.opengl.GL.FLOAT_VEC3 = 35665;
lime.graphics.opengl.GL.FLOAT_VEC4 = 35666;
lime.graphics.opengl.GL.INT_VEC2 = 35667;
lime.graphics.opengl.GL.INT_VEC3 = 35668;
lime.graphics.opengl.GL.INT_VEC4 = 35669;
lime.graphics.opengl.GL.BOOL = 35670;
lime.graphics.opengl.GL.BOOL_VEC2 = 35671;
lime.graphics.opengl.GL.BOOL_VEC3 = 35672;
lime.graphics.opengl.GL.BOOL_VEC4 = 35673;
lime.graphics.opengl.GL.FLOAT_MAT2 = 35674;
lime.graphics.opengl.GL.FLOAT_MAT3 = 35675;
lime.graphics.opengl.GL.FLOAT_MAT4 = 35676;
lime.graphics.opengl.GL.SAMPLER_2D = 35678;
lime.graphics.opengl.GL.SAMPLER_CUBE = 35680;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
lime.graphics.opengl.GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
lime.graphics.opengl.GL.POINT_SPRITE = 34913;
lime.graphics.opengl.GL.COMPILE_STATUS = 35713;
lime.graphics.opengl.GL.LOW_FLOAT = 36336;
lime.graphics.opengl.GL.MEDIUM_FLOAT = 36337;
lime.graphics.opengl.GL.HIGH_FLOAT = 36338;
lime.graphics.opengl.GL.LOW_INT = 36339;
lime.graphics.opengl.GL.MEDIUM_INT = 36340;
lime.graphics.opengl.GL.HIGH_INT = 36341;
lime.graphics.opengl.GL.FRAMEBUFFER = 36160;
lime.graphics.opengl.GL.RENDERBUFFER = 36161;
lime.graphics.opengl.GL.RGBA4 = 32854;
lime.graphics.opengl.GL.RGB5_A1 = 32855;
lime.graphics.opengl.GL.RGB565 = 36194;
lime.graphics.opengl.GL.DEPTH_COMPONENT16 = 33189;
lime.graphics.opengl.GL.STENCIL_INDEX = 6401;
lime.graphics.opengl.GL.STENCIL_INDEX8 = 36168;
lime.graphics.opengl.GL.DEPTH_STENCIL = 34041;
lime.graphics.opengl.GL.RENDERBUFFER_WIDTH = 36162;
lime.graphics.opengl.GL.RENDERBUFFER_HEIGHT = 36163;
lime.graphics.opengl.GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
lime.graphics.opengl.GL.RENDERBUFFER_RED_SIZE = 36176;
lime.graphics.opengl.GL.RENDERBUFFER_GREEN_SIZE = 36177;
lime.graphics.opengl.GL.RENDERBUFFER_BLUE_SIZE = 36178;
lime.graphics.opengl.GL.RENDERBUFFER_ALPHA_SIZE = 36179;
lime.graphics.opengl.GL.RENDERBUFFER_DEPTH_SIZE = 36180;
lime.graphics.opengl.GL.RENDERBUFFER_STENCIL_SIZE = 36181;
lime.graphics.opengl.GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
lime.graphics.opengl.GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
lime.graphics.opengl.GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
lime.graphics.opengl.GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
lime.graphics.opengl.GL.COLOR_ATTACHMENT0 = 36064;
lime.graphics.opengl.GL.DEPTH_ATTACHMENT = 36096;
lime.graphics.opengl.GL.STENCIL_ATTACHMENT = 36128;
lime.graphics.opengl.GL.DEPTH_STENCIL_ATTACHMENT = 33306;
lime.graphics.opengl.GL.NONE = 0;
lime.graphics.opengl.GL.FRAMEBUFFER_COMPLETE = 36053;
lime.graphics.opengl.GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
lime.graphics.opengl.GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
lime.graphics.opengl.GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
lime.graphics.opengl.GL.FRAMEBUFFER_UNSUPPORTED = 36061;
lime.graphics.opengl.GL.FRAMEBUFFER_BINDING = 36006;
lime.graphics.opengl.GL.RENDERBUFFER_BINDING = 36007;
lime.graphics.opengl.GL.MAX_RENDERBUFFER_SIZE = 34024;
lime.graphics.opengl.GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
lime.graphics.opengl.GL.UNPACK_FLIP_Y_WEBGL = 37440;
lime.graphics.opengl.GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
lime.graphics.opengl.GL.CONTEXT_LOST_WEBGL = 37442;
lime.graphics.opengl.GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
lime.graphics.opengl.GL.BROWSER_DEFAULT_WEBGL = 37444;
lime.math._ColorMatrix.ColorMatrix_Impl_.__identity = [1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0];
lime.math.Matrix3.__identity = new lime.math.Matrix3();
lime.math._Matrix4.Matrix4_Impl_.__identity = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
lime.net._URLRequestMethod.URLRequestMethod_Impl_.DELETE = "DELETE";
lime.net._URLRequestMethod.URLRequestMethod_Impl_.GET = "GET";
lime.net._URLRequestMethod.URLRequestMethod_Impl_.HEAD = "HEAD";
lime.net._URLRequestMethod.URLRequestMethod_Impl_.OPTIONS = "OPTIONS";
lime.net._URLRequestMethod.URLRequestMethod_Impl_.POST = "POST";
lime.net._URLRequestMethod.URLRequestMethod_Impl_.PUT = "PUT";
lime.system._System.SystemDirectory_Impl_.APPLICATION = 0;
lime.system._System.SystemDirectory_Impl_.APPLICATION_STORAGE = 1;
lime.system._System.SystemDirectory_Impl_.DESKTOP = 2;
lime.system._System.SystemDirectory_Impl_.DOCUMENTS = 3;
lime.system._System.SystemDirectory_Impl_.FONTS = 4;
lime.system._System.SystemDirectory_Impl_.USER = 5;
lime.text._TextDirection.TextDirection_Impl_.INVALID = 0;
lime.text._TextDirection.TextDirection_Impl_.LEFT_TO_RIGHT = 4;
lime.text._TextDirection.TextDirection_Impl_.RIGHT_TO_LEFT = 5;
lime.text._TextDirection.TextDirection_Impl_.TOP_TO_BOTTOM = 6;
lime.text._TextDirection.TextDirection_Impl_.BOTTOM_TO_TOP = 7;
lime.text._TextScript.TextScript_Impl_.COMMON = "Zyyy";
lime.text._TextScript.TextScript_Impl_.INHERITED = "Zinh";
lime.text._TextScript.TextScript_Impl_.UNKNOWN = "Zzzz";
lime.text._TextScript.TextScript_Impl_.ARABIC = "Arab";
lime.text._TextScript.TextScript_Impl_.ARMENIAN = "Armn";
lime.text._TextScript.TextScript_Impl_.BENGALI = "Beng";
lime.text._TextScript.TextScript_Impl_.CYRILLIC = "Cyrl";
lime.text._TextScript.TextScript_Impl_.DEVANAGARI = "Deva";
lime.text._TextScript.TextScript_Impl_.GEORGIAN = "Geor";
lime.text._TextScript.TextScript_Impl_.GREEK = "Grek";
lime.text._TextScript.TextScript_Impl_.GUJARATI = "Gujr";
lime.text._TextScript.TextScript_Impl_.GURMUKHI = "Guru";
lime.text._TextScript.TextScript_Impl_.HANGUL = "Hang";
lime.text._TextScript.TextScript_Impl_.HAN = "Hani";
lime.text._TextScript.TextScript_Impl_.HEBREW = "Hebr";
lime.text._TextScript.TextScript_Impl_.HIRAGANA = "Hira";
lime.text._TextScript.TextScript_Impl_.KANNADA = "Knda";
lime.text._TextScript.TextScript_Impl_.KATAKANA = "Kana";
lime.text._TextScript.TextScript_Impl_.LAO = "Laoo";
lime.text._TextScript.TextScript_Impl_.LATIN = "Latn";
lime.text._TextScript.TextScript_Impl_.MALAYALAM = "Mlym";
lime.text._TextScript.TextScript_Impl_.ORIYA = "Orya";
lime.text._TextScript.TextScript_Impl_.TAMIL = "Taml";
lime.text._TextScript.TextScript_Impl_.TELUGA = "Telu";
lime.text._TextScript.TextScript_Impl_.THAI = "Thai";
lime.text._TextScript.TextScript_Impl_.TIBETAN = "Tibt";
lime.text._TextScript.TextScript_Impl_.BOPOMOFO = "Bopo";
lime.text._TextScript.TextScript_Impl_.BRAILLE = "Brai";
lime.text._TextScript.TextScript_Impl_.CANADIAN_SYLLABICS = "Cans";
lime.text._TextScript.TextScript_Impl_.CHEROKEE = "Cher";
lime.text._TextScript.TextScript_Impl_.ETHIOPIC = "Ethi";
lime.text._TextScript.TextScript_Impl_.KHMER = "Khmr";
lime.text._TextScript.TextScript_Impl_.MONGOLIAN = "Mong";
lime.text._TextScript.TextScript_Impl_.MYANMAR = "Mymr";
lime.text._TextScript.TextScript_Impl_.OGHAM = "Ogam";
lime.text._TextScript.TextScript_Impl_.RUNIC = "Runr";
lime.text._TextScript.TextScript_Impl_.SINHALA = "Sinh";
lime.text._TextScript.TextScript_Impl_.SYRIAC = "Syrc";
lime.text._TextScript.TextScript_Impl_.THAANA = "Thaa";
lime.text._TextScript.TextScript_Impl_.YI = "Yiii";
lime.text._TextScript.TextScript_Impl_.DESERET = "Dsrt";
lime.text._TextScript.TextScript_Impl_.GOTHIC = "Goth";
lime.text._TextScript.TextScript_Impl_.OLD_ITALIC = "Ital";
lime.text._TextScript.TextScript_Impl_.BUHID = "Buhd";
lime.text._TextScript.TextScript_Impl_.HANUNOO = "Hano";
lime.text._TextScript.TextScript_Impl_.TAGALOG = "Tglg";
lime.text._TextScript.TextScript_Impl_.TAGBANWA = "Tagb";
lime.text._TextScript.TextScript_Impl_.CYPRIOT = "Cprt";
lime.text._TextScript.TextScript_Impl_.LIMBU = "Limb";
lime.text._TextScript.TextScript_Impl_.LINEAR_B = "Linb";
lime.text._TextScript.TextScript_Impl_.OSMANYA = "Osma";
lime.text._TextScript.TextScript_Impl_.SHAVIAN = "Shaw";
lime.text._TextScript.TextScript_Impl_.TAI_LE = "Tale";
lime.text._TextScript.TextScript_Impl_.UGARITIC = "Ugar";
lime.text._TextScript.TextScript_Impl_.BUGINESE = "Bugi";
lime.text._TextScript.TextScript_Impl_.COPTIC = "Copt";
lime.text._TextScript.TextScript_Impl_.GLAGOLITIC = "Glag";
lime.text._TextScript.TextScript_Impl_.KHAROSHTHI = "Khar";
lime.text._TextScript.TextScript_Impl_.NEW_TAI_LUE = "Talu";
lime.text._TextScript.TextScript_Impl_.OLD_PERSIAN = "Xpeo";
lime.text._TextScript.TextScript_Impl_.SYLOTI_NAGRI = "Sylo";
lime.text._TextScript.TextScript_Impl_.TIFINAGH = "Tfng";
lime.text._TextScript.TextScript_Impl_.BALINESE = "Bali";
lime.text._TextScript.TextScript_Impl_.CUNEIFORM = "Xsux";
lime.text._TextScript.TextScript_Impl_.NKO = "Nkoo";
lime.text._TextScript.TextScript_Impl_.PHAGS_PA = "Phag";
lime.text._TextScript.TextScript_Impl_.PHOENICIAN = "Phnx";
lime.text._TextScript.TextScript_Impl_.CARIAN = "Cari";
lime.text._TextScript.TextScript_Impl_.CHAM = "Cham";
lime.text._TextScript.TextScript_Impl_.KAYAH_LI = "Kali";
lime.text._TextScript.TextScript_Impl_.LEPCHA = "Lepc";
lime.text._TextScript.TextScript_Impl_.LYCIAN = "Lyci";
lime.text._TextScript.TextScript_Impl_.LYDIAN = "Lydi";
lime.text._TextScript.TextScript_Impl_.OL_CHIKI = "Olck";
lime.text._TextScript.TextScript_Impl_.REJANG = "Rjng";
lime.text._TextScript.TextScript_Impl_.SAURASHTRA = "Saur";
lime.text._TextScript.TextScript_Impl_.SUNDANESE = "Sund";
lime.text._TextScript.TextScript_Impl_.VAI = "Vaii";
lime.text._TextScript.TextScript_Impl_.AVESTAN = "Avst";
lime.text._TextScript.TextScript_Impl_.BAMUM = "Bamu";
lime.text._TextScript.TextScript_Impl_.EGYPTIAN_HIEROGLYPHS = "Egyp";
lime.text._TextScript.TextScript_Impl_.IMPERIAL_ARAMAIC = "Armi";
lime.text._TextScript.TextScript_Impl_.INSCRIPTIONAL_PAHLAVI = "Phli";
lime.text._TextScript.TextScript_Impl_.INSCRIPTIONAL_PARTHIAN = "Prti";
lime.text._TextScript.TextScript_Impl_.JAVANESE = "Java";
lime.text._TextScript.TextScript_Impl_.KAITHI = "Kthi";
lime.text._TextScript.TextScript_Impl_.LISU = "Lisu";
lime.text._TextScript.TextScript_Impl_.MEETEI_MAYEK = "Mtei";
lime.text._TextScript.TextScript_Impl_.OLD_SOUTH_ARABIAN = "Sarb";
lime.text._TextScript.TextScript_Impl_.OLD_TURKIC = "Orkh";
lime.text._TextScript.TextScript_Impl_.SAMARITAN = "Samr";
lime.text._TextScript.TextScript_Impl_.TAI_THAM = "Lana";
lime.text._TextScript.TextScript_Impl_.TAI_VIET = "Tavt";
lime.text._TextScript.TextScript_Impl_.BATAK = "Batk";
lime.text._TextScript.TextScript_Impl_.BRAHMI = "Brah";
lime.text._TextScript.TextScript_Impl_.MANDAIC = "Mand";
lime.text._TextScript.TextScript_Impl_.CHAKMA = "Cakm";
lime.text._TextScript.TextScript_Impl_.MEROITIC_CURSIVE = "Merc";
lime.text._TextScript.TextScript_Impl_.MEROITIC_HIEROGLYPHS = "Mero";
lime.text._TextScript.TextScript_Impl_.MIAO = "Plrd";
lime.text._TextScript.TextScript_Impl_.SHARADA = "Shrd";
lime.text._TextScript.TextScript_Impl_.SORA_SOMPENG = "Sora";
lime.text._TextScript.TextScript_Impl_.TAKRI = "Takr";
lime.text._TextScript.TextScript_Impl_.BASSA_VAH = "Bass";
lime.text._TextScript.TextScript_Impl_.CAUCASIAN_ALBANIAN = "Aghb";
lime.text._TextScript.TextScript_Impl_.DUPLOYAN = "Dupl";
lime.text._TextScript.TextScript_Impl_.ELBASAN = "Elba";
lime.text._TextScript.TextScript_Impl_.GRANTHA = "Gran";
lime.text._TextScript.TextScript_Impl_.KHOJKI = "Khoj";
lime.text._TextScript.TextScript_Impl_.KHUDAWADI = "Sind";
lime.text._TextScript.TextScript_Impl_.LINEAR_A = "Lina";
lime.text._TextScript.TextScript_Impl_.MAHAJANI = "Mahj";
lime.text._TextScript.TextScript_Impl_.MANICHAEAN = "Mani";
lime.text._TextScript.TextScript_Impl_.MENDE_KIKAKUI = "Mend";
lime.text._TextScript.TextScript_Impl_.MODI = "Modi";
lime.text._TextScript.TextScript_Impl_.MRO = "Mroo";
lime.text._TextScript.TextScript_Impl_.NABATAEAN = "Nbat";
lime.text._TextScript.TextScript_Impl_.OLD_NORTH_ARABIAN = "Narb";
lime.text._TextScript.TextScript_Impl_.OLD_PERMIC = "Perm";
lime.text._TextScript.TextScript_Impl_.PAHAWH_HMONG = "Hmng";
lime.text._TextScript.TextScript_Impl_.PALMYRENE = "Palm";
lime.text._TextScript.TextScript_Impl_.PAU_CIN_HAU = "Pauc";
lime.text._TextScript.TextScript_Impl_.PSALTER_PAHLAVI = "Phlp";
lime.text._TextScript.TextScript_Impl_.SIDDHAM = "Sidd";
lime.text._TextScript.TextScript_Impl_.TIRHUTA = "Tirh";
lime.text._TextScript.TextScript_Impl_.WARANG_CITI = "Wara";
lime.ui.Gamepad.devices = new haxe.ds.IntMap();
lime.ui._GamepadAxis.GamepadAxis_Impl_.LEFT_X = 0;
lime.ui._GamepadAxis.GamepadAxis_Impl_.LEFT_Y = 1;
lime.ui._GamepadAxis.GamepadAxis_Impl_.RIGHT_X = 2;
lime.ui._GamepadAxis.GamepadAxis_Impl_.RIGHT_Y = 3;
lime.ui._GamepadAxis.GamepadAxis_Impl_.TRIGGER_LEFT = 4;
lime.ui._GamepadAxis.GamepadAxis_Impl_.TRIGGER_RIGHT = 5;
lime.ui._GamepadButton.GamepadButton_Impl_.A = 0;
lime.ui._GamepadButton.GamepadButton_Impl_.B = 1;
lime.ui._GamepadButton.GamepadButton_Impl_.X = 2;
lime.ui._GamepadButton.GamepadButton_Impl_.Y = 3;
lime.ui._GamepadButton.GamepadButton_Impl_.BACK = 4;
lime.ui._GamepadButton.GamepadButton_Impl_.GUIDE = 5;
lime.ui._GamepadButton.GamepadButton_Impl_.START = 6;
lime.ui._GamepadButton.GamepadButton_Impl_.LEFT_STICK = 7;
lime.ui._GamepadButton.GamepadButton_Impl_.RIGHT_STICK = 8;
lime.ui._GamepadButton.GamepadButton_Impl_.LEFT_SHOULDER = 9;
lime.ui._GamepadButton.GamepadButton_Impl_.RIGHT_SHOULDER = 10;
lime.ui._GamepadButton.GamepadButton_Impl_.DPAD_UP = 11;
lime.ui._GamepadButton.GamepadButton_Impl_.DPAD_DOWN = 12;
lime.ui._GamepadButton.GamepadButton_Impl_.DPAD_LEFT = 13;
lime.ui._GamepadButton.GamepadButton_Impl_.DPAD_RIGHT = 14;
lime.ui._KeyCode.KeyCode_Impl_.UNKNOWN = 0;
lime.ui._KeyCode.KeyCode_Impl_.BACKSPACE = 8;
lime.ui._KeyCode.KeyCode_Impl_.TAB = 9;
lime.ui._KeyCode.KeyCode_Impl_.RETURN = 13;
lime.ui._KeyCode.KeyCode_Impl_.ESCAPE = 27;
lime.ui._KeyCode.KeyCode_Impl_.SPACE = 32;
lime.ui._KeyCode.KeyCode_Impl_.EXCLAMATION = 33;
lime.ui._KeyCode.KeyCode_Impl_.QUOTE = 34;
lime.ui._KeyCode.KeyCode_Impl_.HASH = 35;
lime.ui._KeyCode.KeyCode_Impl_.DOLLAR = 36;
lime.ui._KeyCode.KeyCode_Impl_.PERCENT = 37;
lime.ui._KeyCode.KeyCode_Impl_.AMPERSAND = 38;
lime.ui._KeyCode.KeyCode_Impl_.SINGLE_QUOTE = 39;
lime.ui._KeyCode.KeyCode_Impl_.LEFT_PARENTHESIS = 40;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT_PARENTHESIS = 41;
lime.ui._KeyCode.KeyCode_Impl_.ASTERISK = 42;
lime.ui._KeyCode.KeyCode_Impl_.PLUS = 43;
lime.ui._KeyCode.KeyCode_Impl_.COMMA = 44;
lime.ui._KeyCode.KeyCode_Impl_.MINUS = 45;
lime.ui._KeyCode.KeyCode_Impl_.PERIOD = 46;
lime.ui._KeyCode.KeyCode_Impl_.SLASH = 47;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_0 = 48;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_1 = 49;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_2 = 50;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_3 = 51;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_4 = 52;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_5 = 53;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_6 = 54;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_7 = 55;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_8 = 56;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_9 = 57;
lime.ui._KeyCode.KeyCode_Impl_.COLON = 58;
lime.ui._KeyCode.KeyCode_Impl_.SEMICOLON = 59;
lime.ui._KeyCode.KeyCode_Impl_.LESS_THAN = 60;
lime.ui._KeyCode.KeyCode_Impl_.EQUALS = 61;
lime.ui._KeyCode.KeyCode_Impl_.GREATER_THAN = 62;
lime.ui._KeyCode.KeyCode_Impl_.QUESTION = 63;
lime.ui._KeyCode.KeyCode_Impl_.AT = 64;
lime.ui._KeyCode.KeyCode_Impl_.LEFT_BRACKET = 91;
lime.ui._KeyCode.KeyCode_Impl_.BACKSLASH = 92;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT_BRACKET = 93;
lime.ui._KeyCode.KeyCode_Impl_.CARET = 94;
lime.ui._KeyCode.KeyCode_Impl_.UNDERSCORE = 95;
lime.ui._KeyCode.KeyCode_Impl_.GRAVE = 96;
lime.ui._KeyCode.KeyCode_Impl_.A = 97;
lime.ui._KeyCode.KeyCode_Impl_.B = 98;
lime.ui._KeyCode.KeyCode_Impl_.C = 99;
lime.ui._KeyCode.KeyCode_Impl_.D = 100;
lime.ui._KeyCode.KeyCode_Impl_.E = 101;
lime.ui._KeyCode.KeyCode_Impl_.F = 102;
lime.ui._KeyCode.KeyCode_Impl_.G = 103;
lime.ui._KeyCode.KeyCode_Impl_.H = 104;
lime.ui._KeyCode.KeyCode_Impl_.I = 105;
lime.ui._KeyCode.KeyCode_Impl_.J = 106;
lime.ui._KeyCode.KeyCode_Impl_.K = 107;
lime.ui._KeyCode.KeyCode_Impl_.L = 108;
lime.ui._KeyCode.KeyCode_Impl_.M = 109;
lime.ui._KeyCode.KeyCode_Impl_.N = 110;
lime.ui._KeyCode.KeyCode_Impl_.O = 111;
lime.ui._KeyCode.KeyCode_Impl_.P = 112;
lime.ui._KeyCode.KeyCode_Impl_.Q = 113;
lime.ui._KeyCode.KeyCode_Impl_.R = 114;
lime.ui._KeyCode.KeyCode_Impl_.S = 115;
lime.ui._KeyCode.KeyCode_Impl_.T = 116;
lime.ui._KeyCode.KeyCode_Impl_.U = 117;
lime.ui._KeyCode.KeyCode_Impl_.V = 118;
lime.ui._KeyCode.KeyCode_Impl_.W = 119;
lime.ui._KeyCode.KeyCode_Impl_.X = 120;
lime.ui._KeyCode.KeyCode_Impl_.Y = 121;
lime.ui._KeyCode.KeyCode_Impl_.Z = 122;
lime.ui._KeyCode.KeyCode_Impl_.DELETE = 127;
lime.ui._KeyCode.KeyCode_Impl_.CAPS_LOCK = 1073741881;
lime.ui._KeyCode.KeyCode_Impl_.F1 = 1073741882;
lime.ui._KeyCode.KeyCode_Impl_.F2 = 1073741883;
lime.ui._KeyCode.KeyCode_Impl_.F3 = 1073741884;
lime.ui._KeyCode.KeyCode_Impl_.F4 = 1073741885;
lime.ui._KeyCode.KeyCode_Impl_.F5 = 1073741886;
lime.ui._KeyCode.KeyCode_Impl_.F6 = 1073741887;
lime.ui._KeyCode.KeyCode_Impl_.F7 = 1073741888;
lime.ui._KeyCode.KeyCode_Impl_.F8 = 1073741889;
lime.ui._KeyCode.KeyCode_Impl_.F9 = 1073741890;
lime.ui._KeyCode.KeyCode_Impl_.F10 = 1073741891;
lime.ui._KeyCode.KeyCode_Impl_.F11 = 1073741892;
lime.ui._KeyCode.KeyCode_Impl_.F12 = 1073741893;
lime.ui._KeyCode.KeyCode_Impl_.PRINT_SCREEN = 1073741894;
lime.ui._KeyCode.KeyCode_Impl_.SCROLL_LOCK = 1073741895;
lime.ui._KeyCode.KeyCode_Impl_.PAUSE = 1073741896;
lime.ui._KeyCode.KeyCode_Impl_.INSERT = 1073741897;
lime.ui._KeyCode.KeyCode_Impl_.HOME = 1073741898;
lime.ui._KeyCode.KeyCode_Impl_.PAGE_UP = 1073741899;
lime.ui._KeyCode.KeyCode_Impl_.END = 1073741901;
lime.ui._KeyCode.KeyCode_Impl_.PAGE_DOWN = 1073741902;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT = 1073741903;
lime.ui._KeyCode.KeyCode_Impl_.LEFT = 1073741904;
lime.ui._KeyCode.KeyCode_Impl_.DOWN = 1073741905;
lime.ui._KeyCode.KeyCode_Impl_.UP = 1073741906;
lime.ui._KeyCode.KeyCode_Impl_.NUM_LOCK = 1073741907;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_DIVIDE = 1073741908;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MULTIPLY = 1073741909;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MINUS = 1073741910;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_PLUS = 1073741911;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_ENTER = 1073741912;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_1 = 1073741913;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_2 = 1073741914;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_3 = 1073741915;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_4 = 1073741916;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_5 = 1073741917;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_6 = 1073741918;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_7 = 1073741919;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_8 = 1073741920;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_9 = 1073741921;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_0 = 1073741922;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_PERIOD = 1073741923;
lime.ui._KeyCode.KeyCode_Impl_.APPLICATION = 1073741925;
lime.ui._KeyCode.KeyCode_Impl_.POWER = 1073741926;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_EQUALS = 1073741927;
lime.ui._KeyCode.KeyCode_Impl_.F13 = 1073741928;
lime.ui._KeyCode.KeyCode_Impl_.F14 = 1073741929;
lime.ui._KeyCode.KeyCode_Impl_.F15 = 1073741930;
lime.ui._KeyCode.KeyCode_Impl_.F16 = 1073741931;
lime.ui._KeyCode.KeyCode_Impl_.F17 = 1073741932;
lime.ui._KeyCode.KeyCode_Impl_.F18 = 1073741933;
lime.ui._KeyCode.KeyCode_Impl_.F19 = 1073741934;
lime.ui._KeyCode.KeyCode_Impl_.F20 = 1073741935;
lime.ui._KeyCode.KeyCode_Impl_.F21 = 1073741936;
lime.ui._KeyCode.KeyCode_Impl_.F22 = 1073741937;
lime.ui._KeyCode.KeyCode_Impl_.F23 = 1073741938;
lime.ui._KeyCode.KeyCode_Impl_.F24 = 1073741939;
lime.ui._KeyCode.KeyCode_Impl_.EXECUTE = 1073741940;
lime.ui._KeyCode.KeyCode_Impl_.HELP = 1073741941;
lime.ui._KeyCode.KeyCode_Impl_.MENU = 1073741942;
lime.ui._KeyCode.KeyCode_Impl_.SELECT = 1073741943;
lime.ui._KeyCode.KeyCode_Impl_.STOP = 1073741944;
lime.ui._KeyCode.KeyCode_Impl_.AGAIN = 1073741945;
lime.ui._KeyCode.KeyCode_Impl_.UNDO = 1073741946;
lime.ui._KeyCode.KeyCode_Impl_.CUT = 1073741947;
lime.ui._KeyCode.KeyCode_Impl_.COPY = 1073741948;
lime.ui._KeyCode.KeyCode_Impl_.PASTE = 1073741949;
lime.ui._KeyCode.KeyCode_Impl_.FIND = 1073741950;
lime.ui._KeyCode.KeyCode_Impl_.MUTE = 1073741951;
lime.ui._KeyCode.KeyCode_Impl_.VOLUME_UP = 1073741952;
lime.ui._KeyCode.KeyCode_Impl_.VOLUME_DOWN = 1073741953;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_COMMA = 1073741957;
lime.ui._KeyCode.KeyCode_Impl_.ALT_ERASE = 1073741977;
lime.ui._KeyCode.KeyCode_Impl_.SYSTEM_REQUEST = 1073741978;
lime.ui._KeyCode.KeyCode_Impl_.CANCEL = 1073741979;
lime.ui._KeyCode.KeyCode_Impl_.CLEAR = 1073741980;
lime.ui._KeyCode.KeyCode_Impl_.PRIOR = 1073741981;
lime.ui._KeyCode.KeyCode_Impl_.RETURN2 = 1073741982;
lime.ui._KeyCode.KeyCode_Impl_.SEPARATOR = 1073741983;
lime.ui._KeyCode.KeyCode_Impl_.OUT = 1073741984;
lime.ui._KeyCode.KeyCode_Impl_.OPER = 1073741985;
lime.ui._KeyCode.KeyCode_Impl_.CLEAR_AGAIN = 1073741986;
lime.ui._KeyCode.KeyCode_Impl_.CRSEL = 1073741987;
lime.ui._KeyCode.KeyCode_Impl_.EXSEL = 1073741988;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_00 = 1073742000;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_000 = 1073742001;
lime.ui._KeyCode.KeyCode_Impl_.THOUSAND_SEPARATOR = 1073742002;
lime.ui._KeyCode.KeyCode_Impl_.DECIMAL_SEPARATOR = 1073742003;
lime.ui._KeyCode.KeyCode_Impl_.CURRENCY_UNIT = 1073742004;
lime.ui._KeyCode.KeyCode_Impl_.CURRENCY_SUBUNIT = 1073742005;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_LEFT_PARENTHESIS = 1073742006;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_RIGHT_PARENTHESIS = 1073742007;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_LEFT_BRACE = 1073742008;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_RIGHT_BRACE = 1073742009;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_TAB = 1073742010;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_BACKSPACE = 1073742011;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_A = 1073742012;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_B = 1073742013;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_C = 1073742014;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_D = 1073742015;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_E = 1073742016;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_F = 1073742017;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_XOR = 1073742018;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_POWER = 1073742019;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_PERCENT = 1073742020;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_LESS_THAN = 1073742021;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_GREATER_THAN = 1073742022;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_AMPERSAND = 1073742023;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_DOUBLE_AMPERSAND = 1073742024;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_VERTICAL_BAR = 1073742025;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_DOUBLE_VERTICAL_BAR = 1073742026;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_COLON = 1073742027;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_HASH = 1073742028;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_SPACE = 1073742029;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_AT = 1073742030;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_EXCLAMATION = 1073742031;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_STORE = 1073742032;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_RECALL = 1073742033;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_CLEAR = 1073742034;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_ADD = 1073742035;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_SUBTRACT = 1073742036;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_MULTIPLY = 1073742037;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_DIVIDE = 1073742038;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_PLUS_MINUS = 1073742039;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_CLEAR = 1073742040;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_CLEAR_ENTRY = 1073742041;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_BINARY = 1073742042;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_OCTAL = 1073742043;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_DECIMAL = 1073742044;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_HEXADECIMAL = 1073742045;
lime.ui._KeyCode.KeyCode_Impl_.LEFT_CTRL = 1073742048;
lime.ui._KeyCode.KeyCode_Impl_.LEFT_SHIFT = 1073742049;
lime.ui._KeyCode.KeyCode_Impl_.LEFT_ALT = 1073742050;
lime.ui._KeyCode.KeyCode_Impl_.LEFT_META = 1073742051;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT_CTRL = 1073742052;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT_SHIFT = 1073742053;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT_ALT = 1073742054;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT_META = 1073742055;
lime.ui._KeyCode.KeyCode_Impl_.MODE = 1073742081;
lime.ui._KeyCode.KeyCode_Impl_.AUDIO_NEXT = 1073742082;
lime.ui._KeyCode.KeyCode_Impl_.AUDIO_PREVIOUS = 1073742083;
lime.ui._KeyCode.KeyCode_Impl_.AUDIO_STOP = 1073742084;
lime.ui._KeyCode.KeyCode_Impl_.AUDIO_PLAY = 1073742085;
lime.ui._KeyCode.KeyCode_Impl_.AUDIO_MUTE = 1073742086;
lime.ui._KeyCode.KeyCode_Impl_.MEDIA_SELECT = 1073742087;
lime.ui._KeyCode.KeyCode_Impl_.WWW = 1073742088;
lime.ui._KeyCode.KeyCode_Impl_.MAIL = 1073742089;
lime.ui._KeyCode.KeyCode_Impl_.CALCULATOR = 1073742090;
lime.ui._KeyCode.KeyCode_Impl_.COMPUTER = 1073742091;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_SEARCH = 1073742092;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_HOME = 1073742093;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_BACK = 1073742094;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_FORWARD = 1073742095;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_STOP = 1073742096;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_REFRESH = 1073742097;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_BOOKMARKS = 1073742098;
lime.ui._KeyCode.KeyCode_Impl_.BRIGHTNESS_DOWN = 1073742099;
lime.ui._KeyCode.KeyCode_Impl_.BRIGHTNESS_UP = 1073742100;
lime.ui._KeyCode.KeyCode_Impl_.DISPLAY_SWITCH = 1073742101;
lime.ui._KeyCode.KeyCode_Impl_.BACKLIGHT_TOGGLE = 1073742102;
lime.ui._KeyCode.KeyCode_Impl_.BACKLIGHT_DOWN = 1073742103;
lime.ui._KeyCode.KeyCode_Impl_.BACKLIGHT_UP = 1073742104;
lime.ui._KeyCode.KeyCode_Impl_.EJECT = 1073742105;
lime.ui._KeyCode.KeyCode_Impl_.SLEEP = 1073742106;
lime.ui._KeyModifier.KeyModifier_Impl_.NONE = 0;
lime.ui._KeyModifier.KeyModifier_Impl_.LEFT_SHIFT = 1;
lime.ui._KeyModifier.KeyModifier_Impl_.RIGHT_SHIFT = 2;
lime.ui._KeyModifier.KeyModifier_Impl_.LEFT_CTRL = 64;
lime.ui._KeyModifier.KeyModifier_Impl_.RIGHT_CTRL = 128;
lime.ui._KeyModifier.KeyModifier_Impl_.LEFT_ALT = 256;
lime.ui._KeyModifier.KeyModifier_Impl_.RIGHT_ALT = 512;
lime.ui._KeyModifier.KeyModifier_Impl_.LEFT_META = 1024;
lime.ui._KeyModifier.KeyModifier_Impl_.RIGHT_META = 2048;
lime.ui._KeyModifier.KeyModifier_Impl_.NUM_LOCK = 4096;
lime.ui._KeyModifier.KeyModifier_Impl_.CAPS_LOCK = 8192;
lime.ui._KeyModifier.KeyModifier_Impl_.MODE = 16384;
lime.ui._KeyModifier.KeyModifier_Impl_.CTRL = 192;
lime.ui._KeyModifier.KeyModifier_Impl_.SHIFT = 3;
lime.ui._KeyModifier.KeyModifier_Impl_.ALT = 768;
lime.ui._KeyModifier.KeyModifier_Impl_.META = 3072;
lime.utils.ByteArray.lime_byte_array_overwrite_file = lime.system.System.load("lime","lime_byte_array_overwrite_file",2);
lime.utils.ByteArray.lime_byte_array_read_file = lime.system.System.load("lime","lime_byte_array_read_file",1);
lime.utils.ByteArray.lime_lzma_decode = lime.system.System.load("lime","lime_lzma_decode",1);
lime.utils.ByteArray.lime_lzma_encode = lime.system.System.load("lime","lime_lzma_encode",1);
openfl.Assets.cache = new openfl.AssetCache();
openfl.Assets.dispatcher = new openfl.events.EventDispatcher();
openfl._Assets.AssetType_Impl_.BINARY = "BINARY";
openfl._Assets.AssetType_Impl_.FONT = "FONT";
openfl._Assets.AssetType_Impl_.IMAGE = "IMAGE";
openfl._Assets.AssetType_Impl_.MOVIE_CLIP = "MOVIE_CLIP";
openfl._Assets.AssetType_Impl_.MUSIC = "MUSIC";
openfl._Assets.AssetType_Impl_.SOUND = "SOUND";
openfl._Assets.AssetType_Impl_.TEMPLATE = "TEMPLATE";
openfl._Assets.AssetType_Impl_.TEXT = "TEXT";
openfl._internal.aglsl.Context3D.defaultsampler = new openfl._internal.aglsl.Sampler();
openfl._internal.aglsl.Context3D.driverInfo = "Call getter function instead";
openfl._internal.aglsl.Context3D.enableErrorChecking = false;
openfl._internal.aglsl.Context3D.maxfragconstants = 28;
openfl._internal.aglsl.Context3D.maxstreams = 8;
openfl._internal.aglsl.Context3D.maxtemp = 8;
openfl._internal.aglsl.Context3D.maxtextures = 8;
openfl._internal.aglsl.Context3D.maxvertexconstants = 128;
openfl._internal.aglsl.Context3D.resources = [];
openfl._internal.renderer.canvas.CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl._internal.renderer.canvas.CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL = null;
openfl._internal.renderer.opengl.GLRenderer.glContextId = 0;
openfl._internal.renderer.opengl.GLRenderer.glContexts = [];
openfl._internal.renderer.opengl.GLTextField.bitmapData = new haxe.ds.ObjectMap();
openfl._internal.renderer.opengl.GLTextField.glyphs = new haxe.ds.ObjectMap();
openfl._internal.renderer.opengl.GLTextField.tilesheets = new haxe.ds.ObjectMap();
openfl._internal.renderer.opengl.GLTextField.tileIDs = new haxe.ds.ObjectMap();
openfl._internal.renderer.opengl.shaders2.Shader.UID = 0;
openfl._internal.renderer.opengl.shaders2._DefaultShader.Attrib_Impl_.Position = "aPosition";
openfl._internal.renderer.opengl.shaders2._DefaultShader.Attrib_Impl_.TexCoord = "aTexCoord0";
openfl._internal.renderer.opengl.shaders2._DefaultShader.Attrib_Impl_.Color = "aColor";
openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_.Sampler = "uSampler0";
openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_.ProjectionVector = "uProjectionVector";
openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_.OffsetVector = "uOffsetVector";
openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_.Color = "uColor";
openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_.Alpha = "uAlpha";
openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_.ColorMultiplier = "uColorMultiplier";
openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_.ColorOffset = "uColorOffset";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Attrib_Impl_.Position = "aPosition";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Attrib_Impl_.TexCoord = "aTexCoord0";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Attrib_Impl_.Color = "aColor";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_.UseTexture = "uUseTexture";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_.Sampler = "uSampler0";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_.ProjectionVector = "uProjectionVector";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_.OffsetVector = "uOffsetVector";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_.Color = "uColor";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_.Alpha = "uAlpha";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_.ColorMultiplier = "uColorMultiplier";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_.ColorOffset = "uColorOffset";
openfl._internal.renderer.opengl.shaders2._FillShader.Attrib_Impl_.Position = "aPosition";
openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_.TranslationMatrix = "uTranslationMatrix";
openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_.ProjectionVector = "uProjectionVector";
openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_.OffsetVector = "uOffsetVector";
openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_.Color = "uColor";
openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_.Alpha = "uAlpha";
openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_.ColorMultiplier = "uColorMultiplier";
openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_.ColorOffset = "uColorOffset";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Attrib_Impl_.Position = "aPosition";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.TranslationMatrix = "uTranslationMatrix";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.PatternMatrix = "uPatternMatrix";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.PatternTL = "uPatternTL";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.PatternBR = "uPatternBR";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.Sampler = "uSampler0";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.ProjectionVector = "uProjectionVector";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.OffsetVector = "uOffsetVector";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.Color = "uColor";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.Alpha = "uAlpha";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.ColorMultiplier = "uColorMultiplier";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.ColorOffset = "uColorOffset";
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Attrib_Impl_.Position = "aPosition";
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Attrib_Impl_.Color = "aColor";
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Uniform_Impl_.TranslationMatrix = "uTranslationMatrix";
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Uniform_Impl_.ProjectionVector = "uProjectionVector";
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Uniform_Impl_.OffsetVector = "uOffsetVector";
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Uniform_Impl_.Alpha = "uAlpha";
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Uniform_Impl_.ColorMultiplier = "uColorMultiplier";
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Uniform_Impl_.ColorOffset = "uColorOffset";
openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding = 0;
openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex = 0;
openfl._internal.renderer.opengl.utils._DrawPath.WindingRule_Impl_.EVEN_ODD = 0;
openfl._internal.renderer.opengl.utils._DrawPath.WindingRule_Impl_.NON_ZERO = 1;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.fillVertexAttributes = [new openfl._internal.renderer.opengl.utils.VertexAttribute(2,5126,false,"aPosition")];
openfl._internal.renderer.opengl.utils.GraphicsRenderer.drawTrianglesVertexAttributes = [new openfl._internal.renderer.opengl.utils.VertexAttribute(2,5126,false,"aPosition"),new openfl._internal.renderer.opengl.utils.VertexAttribute(2,5126,false,"aTexCoord0"),new openfl._internal.renderer.opengl.utils.VertexAttribute(4,5121,true,"aColor")];
openfl._internal.renderer.opengl.utils.GraphicsRenderer.primitiveVertexAttributes = [new openfl._internal.renderer.opengl.utils.VertexAttribute(2,5126,false,"aPosition"),new openfl._internal.renderer.opengl.utils.VertexAttribute(4,5126,false,"aColor")];
openfl._internal.renderer.opengl.utils.GraphicsRenderer.graphicsDataPool = [];
openfl._internal.renderer.opengl.utils.GraphicsRenderer.bucketPool = [];
openfl._internal.renderer.opengl.utils.GraphicsRenderer.SIN45 = 0.70710678118654752440084436210485;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.TAN22 = 0.4142135623730950488016887242097;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectPosition = new openfl.geom.Point();
openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds = new openfl.geom.Rectangle();
openfl._internal.renderer.opengl.utils._GraphicsRenderer.RenderMode_Impl_.DEFAULT = 0;
openfl._internal.renderer.opengl.utils._GraphicsRenderer.RenderMode_Impl_.STENCIL = 1;
openfl._internal.renderer.opengl.utils.SpriteBatch.VERTS_PER_SPRITE = 4;
openfl._internal.renderer.opengl.utils._VertexAttribute.ElementType_Impl_.BYTE = 5120;
openfl._internal.renderer.opengl.utils._VertexAttribute.ElementType_Impl_.UNSIGNED_BYTE = 5121;
openfl._internal.renderer.opengl.utils._VertexAttribute.ElementType_Impl_.SHORT = 5122;
openfl._internal.renderer.opengl.utils._VertexAttribute.ElementType_Impl_.UNSIGNED_SHORT = 5123;
openfl._internal.renderer.opengl.utils._VertexAttribute.ElementType_Impl_.FLOAT = 5126;
openfl.display.Graphics.TILE_SCALE = 1;
openfl.display.Graphics.TILE_ROTATION = 2;
openfl.display.Graphics.TILE_RGB = 4;
openfl.display.Graphics.TILE_ALPHA = 8;
openfl.display.Graphics.TILE_TRANS_2x2 = 16;
openfl.display.Graphics.TILE_RECT = 32;
openfl.display.Graphics.TILE_ORIGIN = 64;
openfl.display.Graphics.TILE_BLEND_NORMAL = 0;
openfl.display.Graphics.TILE_BLEND_ADD = 65536;
openfl.display.GraphicsPathCommand.LINE_TO = 2;
openfl.display.GraphicsPathCommand.MOVE_TO = 1;
openfl.display.GraphicsPathCommand.CURVE_TO = 3;
openfl.display.GraphicsPathCommand.WIDE_LINE_TO = 5;
openfl.display.GraphicsPathCommand.WIDE_MOVE_TO = 4;
openfl.display.GraphicsPathCommand.NO_OP = 0;
openfl.display.GraphicsPathCommand.CUBIC_CURVE_TO = 6;
openfl.display.OpenGLView.CONTEXT_LOST = "glcontextlost";
openfl.display.OpenGLView.CONTEXT_RESTORED = "glcontextrestored";
openfl.display.Tilesheet.TILE_SCALE = 1;
openfl.display.Tilesheet.TILE_ROTATION = 2;
openfl.display.Tilesheet.TILE_RGB = 4;
openfl.display.Tilesheet.TILE_ALPHA = 8;
openfl.display.Tilesheet.TILE_TRANS_2x2 = 16;
openfl.display.Tilesheet.TILE_RECT = 32;
openfl.display.Tilesheet.TILE_ORIGIN = 64;
openfl.display.Tilesheet.TILE_BLEND_NORMAL = 0;
openfl.display.Tilesheet.TILE_BLEND_ADD = 65536;
openfl.display.Tilesheet.TILE_BLEND_MULTIPLY = 131072;
openfl.display.Tilesheet.TILE_BLEND_SCREEN = 262144;
openfl.display.Tilesheet.TILE_BLEND_SUBTRACT = 524288;
openfl.display.Tilesheet.__defaultPoint = new openfl.geom.Point(0,0);
openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT = 34046;
openfl.display3D.Context3D.MAX_SAMPLERS = 8;
openfl.display3D.Context3D.MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047;
openfl.display3D.Context3D.anisotropySupportTested = false;
openfl.display3D.Context3D.supportsAnisotropy = false;
openfl.display3D.Context3D.maxSupportedAnisotropy = 256;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.DESTINATION_ALPHA = 772;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.DESTINATION_COLOR = 774;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.ONE = 1;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.ONE_MINUS_DESTINATION_ALPHA = 773;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.ONE_MINUS_DESTINATION_COLOR = 775;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.ONE_MINUS_SOURCE_ALPHA = 771;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.ONE_MINUS_SOURCE_COLOR = 769;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.SOURCE_ALPHA = 770;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.SOURCE_COLOR = 768;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.ZERO = 0;
openfl.display3D.Context3DClearMask.ALL = 17664;
openfl.display3D.Context3DClearMask.COLOR = 16384;
openfl.display3D.Context3DClearMask.DEPTH = 256;
openfl.display3D.Context3DClearMask.STENCIL = 1024;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.ALWAYS = 519;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.EQUAL = 514;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.GREATER = 516;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.GREATER_EQUAL = 518;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.LESS = 513;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.LESS_EQUAL = 515;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.NEVER = 512;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.NOT_EQUAL = 517;
openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_.DECREMENT_SATURATE = 7683;
openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_.DECREMENT_WRAP = 34056;
openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_.INCREMENT_SATURATE = 7682;
openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_.INCREMENT_WRAP = 34055;
openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_.INVERT = 5386;
openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_.KEEP = 7680;
openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_.SET = 7681;
openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_.ZERO = 0;
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.BACK = 1028;
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.FRONT = 1029;
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.FRONT_AND_BACK = 1032;
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.NONE = 0;
openfl.events.TextEvent.LINK = "link";
openfl.events.TextEvent.TEXT_INPUT = "textInput";
openfl.events.ErrorEvent.ERROR = "error";
openfl.events.FocusEvent.FOCUS_IN = "focusIn";
openfl.events.FocusEvent.FOCUS_OUT = "focusOut";
openfl.events.FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
openfl.events.FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";
openfl.events.HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
openfl.events.HTTPStatusEvent.HTTP_STATUS = "httpStatus";
openfl.events.IOErrorEvent.IO_ERROR = "ioError";
openfl.events.KeyboardEvent.KEY_DOWN = "keyDown";
openfl.events.KeyboardEvent.KEY_UP = "keyUp";
openfl.events.MouseEvent.CLICK = "click";
openfl.events.MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl.events.MouseEvent.MIDDLE_CLICK = "middleClick";
openfl.events.MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
openfl.events.MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
openfl.events.MouseEvent.MOUSE_DOWN = "mouseDown";
openfl.events.MouseEvent.MOUSE_MOVE = "mouseMove";
openfl.events.MouseEvent.MOUSE_OUT = "mouseOut";
openfl.events.MouseEvent.MOUSE_OVER = "mouseOver";
openfl.events.MouseEvent.MOUSE_UP = "mouseUp";
openfl.events.MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl.events.MouseEvent.RIGHT_CLICK = "rightClick";
openfl.events.MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl.events.MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl.events.MouseEvent.ROLL_OUT = "rollOut";
openfl.events.MouseEvent.ROLL_OVER = "rollOver";
openfl.events.MouseEvent.__buttonDown = [false,false,false];
openfl.events.NetStatusEvent.NET_STATUS = "netStatus";
openfl.events.ProgressEvent.PROGRESS = "progress";
openfl.events.ProgressEvent.SOCKET_DATA = "socketData";
openfl.events.SecurityErrorEvent.SECURITY_ERROR = "securityError";
openfl.events.TouchEvent.TOUCH_BEGIN = "touchBegin";
openfl.events.TouchEvent.TOUCH_END = "touchEnd";
openfl.events.TouchEvent.TOUCH_MOVE = "touchMove";
openfl.events.TouchEvent.TOUCH_OUT = "touchOut";
openfl.events.TouchEvent.TOUCH_OVER = "touchOver";
openfl.events.TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
openfl.events.TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
openfl.events.TouchEvent.TOUCH_TAP = "touchTap";
openfl.media.Sound.__registeredSounds = new haxe.ds.StringMap();
openfl.net.NetConnection.CONNECT_SUCCESS = "connectSuccess";
openfl.net.URLRequestMethod.DELETE = "DELETE";
openfl.net.URLRequestMethod.GET = "GET";
openfl.net.URLRequestMethod.HEAD = "HEAD";
openfl.net.URLRequestMethod.OPTIONS = "OPTIONS";
openfl.net.URLRequestMethod.POST = "POST";
openfl.net.URLRequestMethod.PUT = "PUT";
openfl.system.Capabilities.avHardwareDisable = true;
openfl.system.Capabilities.cpuArchitecture = "";
openfl.system.Capabilities.hasAccessibility = false;
openfl.system.Capabilities.hasAudio = true;
openfl.system.Capabilities.hasAudioEncoder = false;
openfl.system.Capabilities.hasEmbeddedVideo = false;
openfl.system.Capabilities.hasIME = false;
openfl.system.Capabilities.hasMP3 = false;
openfl.system.Capabilities.hasPrinting = false;
openfl.system.Capabilities.hasScreenBroadcast = false;
openfl.system.Capabilities.hasScreenPlayback = false;
openfl.system.Capabilities.hasStreamingAudio = false;
openfl.system.Capabilities.hasStreamingVideo = false;
openfl.system.Capabilities.hasTLS = true;
openfl.system.Capabilities.hasVideoEncoder = false;
openfl.system.Capabilities.isDebugger = false;
openfl.system.Capabilities.isEmbeddedInAcrobat = false;
openfl.system.Capabilities.localFileReadDisable = true;
openfl.system.Capabilities.manufacturer = "OpenFL Contributors";
openfl.system.Capabilities.maxLevelIDC = 0;
openfl.system.Capabilities.playerType = "OpenFL";
openfl.system.Capabilities.screenColor = "color";
openfl.system.Capabilities.serverString = "";
openfl.system.Capabilities.supports32BitProcesses = false;
openfl.system.Capabilities.supports64BitProcesses = false;
openfl.system.Capabilities.touchscreenType = openfl.system.TouchscreenType.FINGER;
openfl.system.SecurityDomain.currentDomain = new openfl.system.SecurityDomain();
openfl.system.System.useCodePage = false;
openfl.text.Font.__registeredFonts = new Array();
openfl.text.TextField.__utf8_endline_code = 10;
openfl.text.TextField.ASCENDER = 0;
openfl.text.TextField.DESCENDER = 1;
openfl.text.TextField.LINE_HEIGHT = 2;
openfl.text.TextField.LEADING = 3;
openfl.ui._KeyLocation.KeyLocation_Impl_.STANDARD = 0;
openfl.ui._KeyLocation.KeyLocation_Impl_.LEFT = 1;
openfl.ui._KeyLocation.KeyLocation_Impl_.RIGHT = 2;
openfl.ui._KeyLocation.KeyLocation_Impl_.NUM_PAD = 3;
openfl.ui.Keyboard.NUMBER_0 = 48;
openfl.ui.Keyboard.NUMBER_1 = 49;
openfl.ui.Keyboard.NUMBER_2 = 50;
openfl.ui.Keyboard.NUMBER_3 = 51;
openfl.ui.Keyboard.NUMBER_4 = 52;
openfl.ui.Keyboard.NUMBER_5 = 53;
openfl.ui.Keyboard.NUMBER_6 = 54;
openfl.ui.Keyboard.NUMBER_7 = 55;
openfl.ui.Keyboard.NUMBER_8 = 56;
openfl.ui.Keyboard.NUMBER_9 = 57;
openfl.ui.Keyboard.A = 65;
openfl.ui.Keyboard.B = 66;
openfl.ui.Keyboard.C = 67;
openfl.ui.Keyboard.D = 68;
openfl.ui.Keyboard.E = 69;
openfl.ui.Keyboard.F = 70;
openfl.ui.Keyboard.G = 71;
openfl.ui.Keyboard.H = 72;
openfl.ui.Keyboard.I = 73;
openfl.ui.Keyboard.J = 74;
openfl.ui.Keyboard.K = 75;
openfl.ui.Keyboard.L = 76;
openfl.ui.Keyboard.M = 77;
openfl.ui.Keyboard.N = 78;
openfl.ui.Keyboard.O = 79;
openfl.ui.Keyboard.P = 80;
openfl.ui.Keyboard.Q = 81;
openfl.ui.Keyboard.R = 82;
openfl.ui.Keyboard.S = 83;
openfl.ui.Keyboard.T = 84;
openfl.ui.Keyboard.U = 85;
openfl.ui.Keyboard.V = 86;
openfl.ui.Keyboard.W = 87;
openfl.ui.Keyboard.X = 88;
openfl.ui.Keyboard.Y = 89;
openfl.ui.Keyboard.Z = 90;
openfl.ui.Keyboard.NUMPAD_0 = 96;
openfl.ui.Keyboard.NUMPAD_1 = 97;
openfl.ui.Keyboard.NUMPAD_2 = 98;
openfl.ui.Keyboard.NUMPAD_3 = 99;
openfl.ui.Keyboard.NUMPAD_4 = 100;
openfl.ui.Keyboard.NUMPAD_5 = 101;
openfl.ui.Keyboard.NUMPAD_6 = 102;
openfl.ui.Keyboard.NUMPAD_7 = 103;
openfl.ui.Keyboard.NUMPAD_8 = 104;
openfl.ui.Keyboard.NUMPAD_9 = 105;
openfl.ui.Keyboard.NUMPAD_MULTIPLY = 106;
openfl.ui.Keyboard.NUMPAD_ADD = 107;
openfl.ui.Keyboard.NUMPAD_ENTER = 108;
openfl.ui.Keyboard.NUMPAD_SUBTRACT = 109;
openfl.ui.Keyboard.NUMPAD_DECIMAL = 110;
openfl.ui.Keyboard.NUMPAD_DIVIDE = 111;
openfl.ui.Keyboard.F1 = 112;
openfl.ui.Keyboard.F2 = 113;
openfl.ui.Keyboard.F3 = 114;
openfl.ui.Keyboard.F4 = 115;
openfl.ui.Keyboard.F5 = 116;
openfl.ui.Keyboard.F6 = 117;
openfl.ui.Keyboard.F7 = 118;
openfl.ui.Keyboard.F8 = 119;
openfl.ui.Keyboard.F9 = 120;
openfl.ui.Keyboard.F10 = 121;
openfl.ui.Keyboard.F11 = 122;
openfl.ui.Keyboard.F12 = 123;
openfl.ui.Keyboard.F13 = 124;
openfl.ui.Keyboard.F14 = 125;
openfl.ui.Keyboard.F15 = 126;
openfl.ui.Keyboard.BACKSPACE = 8;
openfl.ui.Keyboard.TAB = 9;
openfl.ui.Keyboard.ALTERNATE = 18;
openfl.ui.Keyboard.ENTER = 13;
openfl.ui.Keyboard.COMMAND = 15;
openfl.ui.Keyboard.SHIFT = 16;
openfl.ui.Keyboard.CONTROL = 17;
openfl.ui.Keyboard.BREAK = 19;
openfl.ui.Keyboard.CAPS_LOCK = 20;
openfl.ui.Keyboard.NUMPAD = 21;
openfl.ui.Keyboard.ESCAPE = 27;
openfl.ui.Keyboard.SPACE = 32;
openfl.ui.Keyboard.PAGE_UP = 33;
openfl.ui.Keyboard.PAGE_DOWN = 34;
openfl.ui.Keyboard.END = 35;
openfl.ui.Keyboard.HOME = 36;
openfl.ui.Keyboard.LEFT = 37;
openfl.ui.Keyboard.RIGHT = 39;
openfl.ui.Keyboard.UP = 38;
openfl.ui.Keyboard.DOWN = 40;
openfl.ui.Keyboard.INSERT = 45;
openfl.ui.Keyboard.DELETE = 46;
openfl.ui.Keyboard.NUMLOCK = 144;
openfl.ui.Keyboard.SEMICOLON = 186;
openfl.ui.Keyboard.EQUAL = 187;
openfl.ui.Keyboard.COMMA = 188;
openfl.ui.Keyboard.MINUS = 189;
openfl.ui.Keyboard.PERIOD = 190;
openfl.ui.Keyboard.SLASH = 191;
openfl.ui.Keyboard.BACKQUOTE = 192;
openfl.ui.Keyboard.LEFTBRACKET = 219;
openfl.ui.Keyboard.BACKSLASH = 220;
openfl.ui.Keyboard.RIGHTBRACKET = 221;
openfl.ui.Keyboard.QUOTE = 222;
openfl.utils.Endian.BIG_ENDIAN = "bigEndian";
openfl.utils.Endian.LITTLE_ENDIAN = "littleEndian";
org.swiftsuspenders.InjectionEvent.POST_INSTANTIATE = "postInstantiate";
org.swiftsuspenders.InjectionEvent.PRE_CONSTRUCT = "preConstruct";
org.swiftsuspenders.InjectionEvent.POST_CONSTRUCT = "postConstruct";
org.swiftsuspenders.Injector.INJECTION_POINTS_CACHE = new haxe.ds.StringMap();
org.swiftsuspenders.Injector._baseTypes = org.swiftsuspenders.Injector.initBaseTypeMappingIds([Dynamic,Array,Class,Float,Int,_UInt.UInt_Impl_,String]);
org.swiftsuspenders.mapping.MappingEvent.PRE_MAPPING_CREATE = "preMappingCreate";
org.swiftsuspenders.mapping.MappingEvent.POST_MAPPING_CREATE = "postMappingCreate";
org.swiftsuspenders.mapping.MappingEvent.PRE_MAPPING_CHANGE = "preMappingChange";
org.swiftsuspenders.mapping.MappingEvent.POST_MAPPING_CHANGE = "postMappingChange";
org.swiftsuspenders.mapping.MappingEvent.POST_MAPPING_REMOVE = "postMappingRemove";
org.swiftsuspenders.mapping.MappingEvent.MAPPING_OVERRIDE = "mappingOverride";
org.swiftsuspenders.reflection.DescribeTypeRTTIReflector.__rtti = "<class path=\"org.swiftsuspenders.reflection.DescribeTypeRTTIReflector\" params=\"\">\n\t<implements path=\"org.swiftsuspenders.reflection.Reflector\"/>\n\t<_currentFactoryXML><c path=\"Xml\"/></_currentFactoryXML>\n\t<_currentFactoryXMLFast><c path=\"haxe.xml.Fast\"/></_currentFactoryXMLFast>\n\t<constructorElem><c path=\"haxe.xml.Fast\"/></constructorElem>\n\t<rtti><c path=\"String\"/></rtti>\n\t<extendPath><c path=\"String\"/></extendPath>\n\t<extendDescribeTypeReflector><c path=\"org.swiftsuspenders.reflection.DescribeTypeRTTIReflector\"/></extendDescribeTypeReflector>\n\t<extendTypeDescription><c path=\"org.swiftsuspenders.typedescriptions.TypeDescription\"/></extendTypeDescription>\n\t<getClass public=\"1\" set=\"method\" line=\"46\"><f a=\"value\">\n\t<d/>\n\t<x path=\"Class\"><d/></x>\n</f></getClass>\n\t<getFQCN public=\"1\" set=\"method\" line=\"72\"><f a=\"value:?replaceColons\" v=\":false\">\n\t<d/>\n\t<x path=\"Bool\"/>\n\t<c path=\"String\"/>\n</f></getFQCN>\n\t<typeImplements public=\"1\" set=\"method\" line=\"102\"><f a=\"type:superType\">\n\t<x path=\"Class\"><d/></x>\n\t<x path=\"Class\"><d/></x>\n\t<x path=\"Bool\"/>\n</f></typeImplements>\n\t<classExtendsOrImplements public=\"1\" set=\"method\" line=\"112\"><f a=\"classOrClassName:superClass\">\n\t<d/>\n\t<x path=\"Class\"><d/></x>\n\t<x path=\"Bool\"/>\n</f></classExtendsOrImplements>\n\t<describeInjections public=\"1\" set=\"method\" line=\"145\"><f a=\"_type\">\n\t<x path=\"Class\"><d/></x>\n\t<c path=\"org.swiftsuspenders.typedescriptions.TypeDescription\"/>\n</f></describeInjections>\n\t<isInterface set=\"method\" line=\"197\"><f a=\"type\">\n\t<x path=\"Class\"><d/></x>\n\t<x path=\"Bool\"/>\n</f></isInterface>\n\t<addCtorInjectionPoint set=\"method\" line=\"217\"><f a=\"description:type\">\n\t<c path=\"org.swiftsuspenders.typedescriptions.TypeDescription\"/>\n\t<x path=\"Class\"><d/></x>\n\t<x path=\"Void\"/>\n</f></addCtorInjectionPoint>\n\t<parametersFromXml set=\"method\" line=\"248\"><f a=\"x\">\n\t<c path=\"Xml\"/>\n\t<c path=\"Array\"><c path=\"String\"/></c>\n</f></parametersFromXml>\n\t<addFieldInjectionPoints set=\"method\" line=\"278\"><f a=\"description:type\">\n\t<c path=\"org.swiftsuspenders.typedescriptions.TypeDescription\"/>\n\t<x path=\"Class\"><d/></x>\n\t<x path=\"Void\"/>\n</f></addFieldInjectionPoints>\n\t<addMethodInjectionPoints set=\"method\" line=\"362\"><f a=\"description:type\">\n\t<c path=\"org.swiftsuspenders.typedescriptions.TypeDescription\"/>\n\t<x path=\"Class\"><d/></x>\n\t<x path=\"Void\"/>\n</f></addMethodInjectionPoints>\n\t<addPostConstructMethodPoints set=\"method\" line=\"380\"><f a=\"description:type\">\n\t<c path=\"org.swiftsuspenders.typedescriptions.TypeDescription\"/>\n\t<x path=\"Class\"><d/></x>\n\t<x path=\"Void\"/>\n</f></addPostConstructMethodPoints>\n\t<addPreDestroyMethodPoints set=\"method\" line=\"391\"><f a=\"description:type\">\n\t<c path=\"org.swiftsuspenders.typedescriptions.TypeDescription\"/>\n\t<x path=\"Class\"><d/></x>\n\t<x path=\"Void\"/>\n</f></addPreDestroyMethodPoints>\n\t<gatherOrderedInjectionPointsForTag set=\"method\" line=\"409\"><f a=\"injectionPointType:tag:type\">\n\t<x path=\"Class\"><d/></x>\n\t<c path=\"String\"/>\n\t<x path=\"Class\"><d/></x>\n\t<c path=\"Array\"><d/></c>\n</f></gatherOrderedInjectionPointsForTag>\n\t<new public=\"1\" set=\"method\" line=\"41\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta>\n\t\t<m n=\":keepSub\"/>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
org.swiftsuspenders.utils.UID.classRefs = new haxe.ds.StringMap();
robotlegs.bender.bundles.ImagBundle.VERSION = "1.2";
robotlegs.bender.extensions.contextView.ContextView.__rtti = "<class path=\"robotlegs.bender.extensions.contextView.ContextView\" params=\"\">\n\t<view public=\"1\"><c path=\"openfl.display.DisplayObjectContainer\"/></view>\n\t<new public=\"1\" set=\"method\" line=\"43\"><f a=\"view\">\n\t<c path=\"openfl.display.DisplayObjectContainer\"/>\n\t<x path=\"Void\"/>\n</f></new>\n\t<meta>\n\t\t<m n=\":keepSub\"/>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.contextView.ContextViewListenerConfig.__meta__ = { fields : { contextView : { inject : null}, viewManager : { inject : null}}};
robotlegs.bender.extensions.contextView.ContextViewListenerConfig.__rtti = "<class path=\"robotlegs.bender.extensions.contextView.ContextViewListenerConfig\" params=\"\">\n\t<implements path=\"robotlegs.bender.framework.api.IConfig\"/>\n\t<contextView public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.contextView.ContextView\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</contextView>\n\t<viewManager public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.viewManager.api.IViewManager\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</viewManager>\n\t<configure public=\"1\" set=\"method\" line=\"44\"><f a=\"\"><x path=\"Void\"/></f></configure>\n\t<new public=\"1\" set=\"method\" line=\"33\">\n\t\t<f a=\"\"><x path=\"Void\"/></f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</new>\n\t<meta>\n\t\t<m n=\":keepSub\"/>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.eventCommandMap.impl.EventCommandMap.__rtti = "<class path=\"robotlegs.bender.extensions.eventCommandMap.impl.EventCommandMap\" params=\"\">\n\t<implements path=\"robotlegs.bender.extensions.eventCommandMap.api.IEventCommandMap\"/>\n\t<_mappingProcessors line=\"32\"><c path=\"Array\"><d/></c></_mappingProcessors>\n\t<_injector><c path=\"robotlegs.bender.framework.api.IInjector\"/></_injector>\n\t<_dispatcher><c path=\"openfl.events.IEventDispatcher\"/></_dispatcher>\n\t<_triggerMap><c path=\"robotlegs.bender.extensions.commandCenter.impl.CommandTriggerMap\"/></_triggerMap>\n\t<_logger><c path=\"robotlegs.bender.framework.api.ILogger\"/></_logger>\n\t<map public=\"1\" set=\"method\" line=\"64\"><f a=\"type:?eventClass\" v=\":null\">\n\t<c path=\"String\"/>\n\t<x path=\"Class\"><d/></x>\n\t<c path=\"robotlegs.bender.extensions.commandCenter.dsl.ICommandMapper\"/>\n</f></map>\n\t<unmap public=\"1\" set=\"method\" line=\"72\"><f a=\"type:?eventClass\" v=\":null\">\n\t<c path=\"String\"/>\n\t<x path=\"Class\"><d/></x>\n\t<c path=\"robotlegs.bender.extensions.commandCenter.dsl.ICommandUnmapper\"/>\n</f></unmap>\n\t<addMappingProcessor public=\"1\" set=\"method\" line=\"80\"><f a=\"handler\">\n\t<f a=\"\"><x path=\"Void\"/></f>\n\t<c path=\"robotlegs.bender.extensions.eventCommandMap.api.IEventCommandMap\"/>\n</f></addMappingProcessor>\n\t<getKey set=\"method\" line=\"91\"><f a=\"type:eventClass\">\n\t<c path=\"String\"/>\n\t<x path=\"Class\"><d/></x>\n\t<c path=\"String\"/>\n</f></getKey>\n\t<getTrigger set=\"method\" line=\"96\"><f a=\"type:eventClass\">\n\t<c path=\"String\"/>\n\t<x path=\"Class\"><d/></x>\n\t<c path=\"robotlegs.bender.extensions.eventCommandMap.impl.EventCommandTrigger\"/>\n</f></getTrigger>\n\t<createTrigger set=\"method\" line=\"101\"><f a=\"type:eventClass\">\n\t<c path=\"String\"/>\n\t<x path=\"Class\"><d/></x>\n\t<c path=\"robotlegs.bender.extensions.eventCommandMap.impl.EventCommandTrigger\"/>\n</f></createTrigger>\n\t<new public=\"1\" set=\"method\" line=\"49\"><f a=\"context:dispatcher\">\n\t<c path=\"robotlegs.bender.framework.api.IContext\"/>\n\t<c path=\"openfl.events.IEventDispatcher\"/>\n\t<x path=\"Void\"/>\n</f></new>\n\t<meta>\n\t\t<m n=\":keepSub\"/>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
robotlegs.bender.framework.api.LifecycleEvent.ERROR = "_error";
robotlegs.bender.framework.api.LifecycleEvent.STATE_CHANGE = "stateChange";
robotlegs.bender.framework.api.LifecycleEvent.PRE_INITIALIZE = "preInitialize";
robotlegs.bender.framework.api.LifecycleEvent.INITIALIZE = "initialize";
robotlegs.bender.framework.api.LifecycleEvent.POST_INITIALIZE = "postInitialize";
robotlegs.bender.framework.api.LifecycleEvent.PRE_SUSPEND = "preSuspend";
robotlegs.bender.framework.api.LifecycleEvent.SUSPEND = "suspend";
robotlegs.bender.framework.api.LifecycleEvent.POST_SUSPEND = "postSuspend";
robotlegs.bender.framework.api.LifecycleEvent.PRE_RESUME = "preResume";
robotlegs.bender.framework.api.LifecycleEvent.RESUME = "resume";
robotlegs.bender.framework.api.LifecycleEvent.POST_RESUME = "postResume";
robotlegs.bender.framework.api.LifecycleEvent.PRE_DESTROY = "preDestroy";
robotlegs.bender.framework.api.LifecycleEvent.DESTROY = "destroy";
robotlegs.bender.framework.api.LifecycleEvent.POST_DESTROY = "postDestroy";
robotlegs.bender.extensions.eventDispatcher.impl.LifecycleEventRelay.TYPES = [robotlegs.bender.framework.api.LifecycleEvent.STATE_CHANGE,robotlegs.bender.framework.api.LifecycleEvent.PRE_INITIALIZE,robotlegs.bender.framework.api.LifecycleEvent.INITIALIZE,robotlegs.bender.framework.api.LifecycleEvent.POST_INITIALIZE,robotlegs.bender.framework.api.LifecycleEvent.PRE_SUSPEND,robotlegs.bender.framework.api.LifecycleEvent.SUSPEND,robotlegs.bender.framework.api.LifecycleEvent.POST_SUSPEND,robotlegs.bender.framework.api.LifecycleEvent.PRE_RESUME,robotlegs.bender.framework.api.LifecycleEvent.RESUME,robotlegs.bender.framework.api.LifecycleEvent.POST_RESUME,robotlegs.bender.framework.api.LifecycleEvent.PRE_DESTROY,robotlegs.bender.framework.api.LifecycleEvent.DESTROY,robotlegs.bender.framework.api.LifecycleEvent.POST_DESTROY];
robotlegs.bender.extensions.imag.impl.commands.ExecuteImagCommands.__meta__ = { fields : { commandMap : { inject : null}, injector : { inject : null}, configModel : { inject : null}, initializeAppSignal : { inject : null}, loadConfigSignal : { inject : null}}};
robotlegs.bender.extensions.imag.impl.commands.ExecuteImagCommands.__rtti = "<class path=\"robotlegs.bender.extensions.imag.impl.commands.ExecuteImagCommands\" params=\"\">\n\t<implements path=\"robotlegs.bender.framework.api.IConfig\"/>\n\t<commandMap public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.signalCommandMap.api.ISignalCommandMap\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</commandMap>\n\t<injector public=\"1\">\n\t\t<c path=\"robotlegs.bender.framework.api.IInjector\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</injector>\n\t<configModel public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.imag.api.model.config.IConfigModel\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</configModel>\n\t<initializeAppSignal public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.imag.impl.signals.InitializeAppSignal\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</initializeAppSignal>\n\t<loadConfigSignal public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.imag.impl.signals.LoadConfigSignal\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</loadConfigSignal>\n\t<configure public=\"1\" set=\"method\" line=\"40\"><f a=\"\"><x path=\"Void\"/></f></configure>\n\t<setupSwfCommands set=\"method\" line=\"61\"><f a=\"\"><x path=\"Void\"/></f></setupSwfCommands>\n\t<new public=\"1\" set=\"method\" line=\"35\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.imag.impl.commands.config.ConfigCommand.__meta__ = { fields : { configModel : { inject : null}, appSetupCompleteSignal : { inject : null}}};
robotlegs.bender.extensions.imag.impl.commands.config.ConfigCommand.__rtti = "<class path=\"robotlegs.bender.extensions.imag.impl.commands.config.ConfigCommand\" params=\"\">\n\t<extends path=\"robotlegs.bender.bundles.mvcs.Command\"/>\n\t<configModel public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.imag.api.model.config.IConfigModel\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</configModel>\n\t<appSetupCompleteSignal public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.imag.impl.signals.AppSetupCompleteSignal\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</appSetupCompleteSignal>\n\t<xmlLoaderService public=\"1\"><c path=\"robotlegs.bender.extensions.imag.impl.utils.loaders.XMLLoaderService\"/></xmlLoaderService>\n\t<xmlToTypedObject public=\"1\"><c path=\"robotlegs.bender.extensions.imag.impl.utils.parsers.XMLToTypedObject\"/></xmlToTypedObject>\n\t<loadCount line=\"26\"><x path=\"Int\"/></loadCount>\n\t<totalAssets line=\"27\"><x path=\"Int\"/></totalAssets>\n\t<execute public=\"1\" set=\"method\" line=\"35\" override=\"1\"><f a=\"\"><x path=\"Void\"/></f></execute>\n\t<load set=\"method\" line=\"76\"><f a=\"url\">\n\t<c path=\"String\"/>\n\t<x path=\"Void\"/>\n</f></load>\n\t<OnLoadComplete set=\"method\" line=\"82\"><f a=\"data:id\">\n\t<c path=\"Xml\"/>\n\t<c path=\"String\"/>\n\t<x path=\"Void\"/>\n</f></OnLoadComplete>\n\t<AllFilesLoaded set=\"method\" line=\"92\"><f a=\"\"><x path=\"Void\"/></f></AllFilesLoaded>\n\t<new public=\"1\" set=\"method\" line=\"29\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.imag.impl.commands.fullscreen.HTMLFullscreenCommand.__meta__ = { fields : { contextView : { inject : null}}};
robotlegs.bender.extensions.imag.impl.commands.fullscreen.HTMLFullscreenCommand.__rtti = "<class path=\"robotlegs.bender.extensions.imag.impl.commands.fullscreen.HTMLFullscreenCommand\" params=\"\">\n\t<extends path=\"robotlegs.bender.bundles.mvcs.Command\"/>\n\t<contextView public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.contextView.ContextView\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</contextView>\n\t<execute public=\"1\" set=\"method\" line=\"26\" override=\"1\"><f a=\"\"><x path=\"Void\"/></f></execute>\n\t<OnEndTouchFullscreen set=\"method\" line=\"36\"><f a=\"e\">\n\t<c path=\"openfl.events.TouchEvent\"/>\n\t<x path=\"Void\"/>\n</f></OnEndTouchFullscreen>\n\t<OnDoubleClickFullscreen set=\"method\" line=\"42\"><f a=\"e\">\n\t<c path=\"openfl.events.MouseEvent\"/>\n\t<x path=\"Void\"/>\n</f></OnDoubleClickFullscreen>\n\t<GoFullScreen set=\"method\" line=\"54\"><f a=\"\"><x path=\"Void\"/></f></GoFullScreen>\n\t<toggleFullScreen set=\"method\" line=\"77\"><f a=\"\"><x path=\"Void\"/></f></toggleFullScreen>\n\t<new public=\"1\" set=\"method\" line=\"24\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta><m n=\":keepSub\"/></meta>\n</class>";
robotlegs.bender.extensions.imag.impl.commands.stageSetup.StageSetupCommand.__meta__ = { fields : { contextView : { inject : null}}};
robotlegs.bender.extensions.imag.impl.commands.stageSetup.StageSetupCommand.__rtti = "<class path=\"robotlegs.bender.extensions.imag.impl.commands.stageSetup.StageSetupCommand\" params=\"\">\n\t<extends path=\"robotlegs.bender.bundles.mvcs.Command\"/>\n\t<contextView public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.contextView.ContextView\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</contextView>\n\t<execute public=\"1\" set=\"method\" line=\"24\" override=\"1\"><f a=\"\"><x path=\"Void\"/></f></execute>\n\t<new public=\"1\" set=\"method\" line=\"19\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.imag.impl.commands.viewportResize.FullStageViewportCommand.__meta__ = { fields : { viewport : { inject : null}, contextView : { inject : null}}};
robotlegs.bender.extensions.imag.impl.commands.viewportResize.FullStageViewportCommand.__rtti = "<class path=\"robotlegs.bender.extensions.imag.impl.commands.viewportResize.FullStageViewportCommand\" params=\"\">\n\t<extends path=\"robotlegs.bender.bundles.mvcs.Command\"/>\n\t<viewport public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.stage3D.base.api.IViewport\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</viewport>\n\t<contextView public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.contextView.ContextView\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</contextView>\n\t<stage><t path=\"flash.display.Stage\"/></stage>\n\t<resizeCount><x path=\"Int\"/></resizeCount>\n\t<canvas><c path=\"js.html.CanvasElement\"/></canvas>\n\t<div><c path=\"js.html.DivElement\"/></div>\n\t<execute public=\"1\" set=\"method\" line=\"39\" override=\"1\"><f a=\"\"><x path=\"Void\"/></f></execute>\n\t<OnStageResize set=\"method\" line=\"50\"><f a=\"e\">\n\t<t path=\"flash.events.Event\"/>\n\t<x path=\"Void\"/>\n</f></OnStageResize>\n\t<OnWindowResize set=\"method\" line=\"56\"><f a=\"event\">\n\t<c path=\"js.html.Event\"/>\n\t<x path=\"Void\"/>\n</f></OnWindowResize>\n\t<JSResizer set=\"method\" line=\"62\"><f a=\"e\">\n\t<t path=\"flash.events.Event\"/>\n\t<x path=\"Void\"/>\n</f></JSResizer>\n\t<UpdateWindowDimensions set=\"method\" line=\"71\"><f a=\"\"><x path=\"Void\"/></f></UpdateWindowDimensions>\n\t<new public=\"1\" set=\"method\" line=\"34\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.imag.impl.model.activity.ActivityModel.__meta__ = { fields : { contextView : { inject : null}}};
robotlegs.bender.extensions.imag.impl.model.scene.SceneModel.__rtti = "<class path=\"robotlegs.bender.extensions.imag.impl.model.scene.SceneModel\" params=\"\">\n\t<_scene line=\"14\"><c path=\"Array\"><x path=\"Int\"/></c></_scene>\n\t<change public=\"1\" line=\"15\"><c path=\"msignal.Signal0\"/></change>\n\t<_uri><c path=\"String\"/></_uri>\n\t<uri public=\"1\" get=\"accessor\" set=\"accessor\"><c path=\"String\"/></uri>\n\t<init public=\"1\" set=\"method\" line=\"25\"><f a=\"\"><x path=\"Void\"/></f></init>\n\t<get_uri set=\"method\" line=\"30\"><f a=\"\"><c path=\"String\"/></f></get_uri>\n\t<set_uri set=\"method\" line=\"35\"><f a=\"value\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></set_uri>\n\t<new public=\"1\" set=\"method\" line=\"20\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta><m n=\":rtti\"/></meta>\n</class>";
robotlegs.bender.extensions.imag.impl.services.keyboard.KeyboardMap.__meta__ = { fields : { contextView : { inject : null}}};
robotlegs.bender.extensions.imag.impl.services.keyboard.KeyboardMap.__rtti = "<class path=\"robotlegs.bender.extensions.imag.impl.services.keyboard.KeyboardMap\" params=\"\">\n\t<extends path=\"openfl.events.EventDispatcher\"/>\n\t<implements path=\"robotlegs.bender.extensions.imag.api.services.keyboard.IKeyboardMap\"/>\n\t<ACTION_DOWN public=\"1\" line=\"27\" static=\"1\"><c path=\"String\"/></ACTION_DOWN>\n\t<ACTION_UP public=\"1\" line=\"28\" static=\"1\"><c path=\"String\"/></ACTION_UP>\n\t<contextView public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.contextView.ContextView\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</contextView>\n\t<initiated line=\"21\"><x path=\"Bool\"/></initiated>\n\t<_keyLookup><x path=\"Map\">\n\t<x path=\"Int\"/>\n\t<c path=\"Array\"><c path=\"robotlegs.bender.extensions.imag.impl.services.keyboard.Shortcut\"/></c>\n</x></_keyLookup>\n\t<_charLookup><x path=\"Map\">\n\t<c path=\"String\"/>\n\t<c path=\"Array\"><c path=\"robotlegs.bender.extensions.imag.impl.services.keyboard.Shortcut\"/></c>\n</x></_charLookup>\n\t<_shortcuts><c path=\"Array\"><c path=\"robotlegs.bender.extensions.imag.impl.services.keyboard.Shortcut\"/></c></_shortcuts>\n\t<_traceKeyIDs line=\"29\"><x path=\"Bool\"/></_traceKeyIDs>\n\t<strBooleanMaps line=\"31\"><x path=\"Map\">\n\t<c path=\"String\"/>\n\t<c path=\"robotlegs.bender.extensions.imag.impl.services.keyboard.BoolMap\"/>\n</x></strBooleanMaps>\n\t<intBooleanMaps line=\"32\"><x path=\"Map\">\n\t<x path=\"Int\"/>\n\t<c path=\"robotlegs.bender.extensions.imag.impl.services.keyboard.BoolMap\"/>\n</x></intBooleanMaps>\n\t<init set=\"method\" line=\"39\"><f a=\"\"><x path=\"Void\"/></f></init>\n\t<OnKeyDown set=\"method\" line=\"52\"><f a=\"e\">\n\t<c path=\"openfl.events.KeyboardEvent\"/>\n\t<x path=\"Void\"/>\n</f></OnKeyDown>\n\t<OnKeyUp set=\"method\" line=\"61\"><f a=\"e\">\n\t<c path=\"openfl.events.KeyboardEvent\"/>\n\t<x path=\"Void\"/>\n</f></OnKeyUp>\n\t<map public=\"1\" set=\"method\" line=\"69\"><f a=\"callback:charOrKeycode:?options\" v=\"::null\">\n\t<d/>\n\t<d/>\n\t<d/>\n\t<x path=\"Void\"/>\n</f></map>\n\t<mapBool public=\"1\" set=\"method\" line=\"84\"><f a=\"object:property:charOrKeycode:?options\" v=\":::null\">\n\t<d/>\n\t<c path=\"String\"/>\n\t<d/>\n\t<d/>\n\t<x path=\"Void\"/>\n</f></mapBool>\n\t<booleanMapStr set=\"method\" line=\"90\"><f a=\"charOrKeycode\">\n\t<c path=\"String\"/>\n\t<c path=\"robotlegs.bender.extensions.imag.impl.services.keyboard.BoolMap\"/>\n</f></booleanMapStr>\n\t<booleanMapInt set=\"method\" line=\"98\"><f a=\"charOrKeycode\">\n\t<x path=\"Int\"/>\n\t<c path=\"robotlegs.bender.extensions.imag.impl.services.keyboard.BoolMap\"/>\n</f></booleanMapInt>\n\t<addCharShortcut set=\"method\" line=\"106\"><f a=\"callback:char:?options\" v=\"::null\">\n\t<d/>\n\t<c path=\"String\"/>\n\t<d/>\n\t<x path=\"Void\"/>\n</f></addCharShortcut>\n\t<addKeyShortcut set=\"method\" line=\"110\"><f a=\"callback:key:?options\" v=\"::null\">\n\t<d/>\n\t<x path=\"Int\"/>\n\t<d/>\n\t<x path=\"Void\"/>\n</f></addKeyShortcut>\n\t<addShortcut set=\"method\" line=\"114\"><f a=\"callback:chars:keys:type:?options\" v=\"::::null\">\n\t<d/>\n\t<c path=\"Array\"><c path=\"String\"/></c>\n\t<c path=\"Array\"><x path=\"Int\"/></c>\n\t<d/>\n\t<d/>\n\t<x path=\"Void\"/>\n</f></addShortcut>\n\t<executeList set=\"method\" line=\"141\"><f a=\"shortcuts:e\">\n\t<c path=\"Array\"><c path=\"robotlegs.bender.extensions.imag.impl.services.keyboard.Shortcut\"/></c>\n\t<c path=\"openfl.events.KeyboardEvent\"/>\n\t<x path=\"Void\"/>\n</f></executeList>\n\t<addToList set=\"method\" line=\"153\"><f a=\"lookup:key:shortcut\">\n\t<d/>\n\t<d/>\n\t<c path=\"robotlegs.bender.extensions.imag.impl.services.keyboard.Shortcut\"/>\n\t<c path=\"Array\"><c path=\"robotlegs.bender.extensions.imag.impl.services.keyboard.Shortcut\"/></c>\n</f></addToList>\n\t<traceKeyIDs public=\"1\" get=\"accessor\" set=\"accessor\"><x path=\"Bool\"/></traceKeyIDs>\n\t<get_traceKeyIDs public=\"1\" set=\"method\" line=\"176\"><f a=\"\"><x path=\"Bool\"/></f></get_traceKeyIDs>\n\t<set_traceKeyIDs public=\"1\" set=\"method\" line=\"181\"><f a=\"value\">\n\t<x path=\"Bool\"/>\n\t<x path=\"Bool\"/>\n</f></set_traceKeyIDs>\n\t<new public=\"1\" set=\"method\" line=\"34\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.imag.impl.services.keyboard.KeyboardMap.ACTION_DOWN = "keyDown";
robotlegs.bender.extensions.imag.impl.services.keyboard.KeyboardMap.ACTION_UP = "keyUp";
robotlegs.bender.extensions.imag.impl.signals.AppSetupCompleteSignal.__rtti = "<class path=\"robotlegs.bender.extensions.imag.impl.signals.AppSetupCompleteSignal\" params=\"\">\n\t<extends path=\"msignal.Signal0\"/>\n\t<new public=\"1\" set=\"method\" line=\"14\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.imag.impl.signals.InitializeAppSignal.__rtti = "<class path=\"robotlegs.bender.extensions.imag.impl.signals.InitializeAppSignal\" params=\"\">\n\t<extends path=\"msignal.Signal0\"/>\n\t<new public=\"1\" set=\"method\" line=\"14\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.imag.impl.signals.LoadConfigSignal.__rtti = "<class path=\"robotlegs.bender.extensions.imag.impl.signals.LoadConfigSignal\" params=\"\">\n\t<extends path=\"msignal.Signal0\"/>\n\t<new public=\"1\" set=\"method\" line=\"14\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.localEventMap.impl.EventMap.__rtti = "<class path=\"robotlegs.bender.extensions.localEventMap.impl.EventMap\" params=\"\">\n\t<implements path=\"robotlegs.bender.extensions.localEventMap.api.IEventMap\"/>\n\t<_listeners line=\"27\"><c path=\"Array\"><c path=\"robotlegs.bender.extensions.localEventMap.impl.EventMapConfig\"/></c></_listeners>\n\t<_suspendedListeners line=\"29\"><c path=\"Array\"><c path=\"robotlegs.bender.extensions.localEventMap.impl.EventMapConfig\"/></c></_suspendedListeners>\n\t<_suspended line=\"31\"><x path=\"Bool\"/></_suspended>\n\t<mapListener public=\"1\" set=\"method\" line=\"40\"><f a=\"dispatcher:eventString:listener:?eventClass:?useCapture:?priority:?useWeakReference\" v=\":::null:false:0:true\">\n\t<c path=\"openfl.events.IEventDispatcher\"/>\n\t<c path=\"String\"/>\n\t<d/>\n\t<x path=\"Class\"><d/></x>\n\t<x path=\"Bool\"/>\n\t<x path=\"Int\"/>\n\t<x path=\"Bool\"/>\n\t<x path=\"Void\"/>\n</f></mapListener>\n\t<unmapListener public=\"1\" set=\"method\" line=\"89\"><f a=\"dispatcher:eventString:listener:?eventClass:?useCapture\" v=\":::null:false\">\n\t<c path=\"openfl.events.IEventDispatcher\"/>\n\t<c path=\"String\"/>\n\t<d/>\n\t<x path=\"Class\"><d/></x>\n\t<x path=\"Bool\"/>\n\t<x path=\"Void\"/>\n</f></unmapListener>\n\t<unmapListeners public=\"1\" set=\"method\" line=\"120\"><f a=\"\"><x path=\"Void\"/></f></unmapListeners>\n\t<suspend public=\"1\" set=\"method\" line=\"139\"><f a=\"\"><x path=\"Void\"/></f></suspend>\n\t<resume public=\"1\" set=\"method\" line=\"159\"><f a=\"\"><x path=\"Void\"/></f></resume>\n\t<routeEventToListener set=\"method\" line=\"187\"><f a=\"event:listener:originalEventClass\">\n\t<c path=\"openfl.events.Event\"/>\n\t<d/>\n\t<x path=\"Class\"><d/></x>\n\t<x path=\"Void\"/>\n</f></routeEventToListener>\n\t<new public=\"1\" set=\"method\" line=\"20\">\n\t\t<f a=\"\"><x path=\"Void\"/></f>\n\t\t<meta><m n=\":compilerGenerated\"/></meta>\n\t</new>\n\t<meta>\n\t\t<m n=\":keepSub\"/>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.matching.TypeMatcherError.EMPTY_MATCHER = "An empty matcher will create a filter which matches nothing. You should specify at least one condition for the filter.";
robotlegs.bender.extensions.matching.TypeMatcherError.SEALED_MATCHER = "This matcher has been sealed and can no longer be configured.";
robotlegs.bender.extensions.mediatorMap.impl.MediatorManager.flexAvailable = false;
robotlegs.bender.extensions.mediatorMap.impl.MediatorManager.CREATION_COMPLETE = "creationComplete";
robotlegs.bender.extensions.mediatorMap.impl.MediatorMap.__rtti = "<class path=\"robotlegs.bender.extensions.mediatorMap.impl.MediatorMap\" params=\"\">\n\t<implements path=\"robotlegs.bender.extensions.viewManager.api.IViewHandler\"/>\n\t<implements path=\"robotlegs.bender.extensions.mediatorMap.api.IMediatorMap\"/>\n\t<_mappers line=\"34\"><x path=\"Map\">\n\t<c path=\"String\"/>\n\t<d/>\n</x></_mappers>\n\t<_logger><c path=\"robotlegs.bender.framework.api.ILogger\"/></_logger>\n\t<_factory><c path=\"robotlegs.bender.extensions.mediatorMap.impl.MediatorFactory\"/></_factory>\n\t<_viewHandler><c path=\"robotlegs.bender.extensions.mediatorMap.impl.MediatorViewHandler\"/></_viewHandler>\n\t<NULL_UNMAPPER line=\"42\"><c path=\"robotlegs.bender.extensions.mediatorMap.impl.NullMediatorUnmapper\"/></NULL_UNMAPPER>\n\t<mapMatcher public=\"1\" set=\"method\" line=\"65\"><f a=\"matcher\">\n\t<c path=\"robotlegs.bender.extensions.matching.ITypeMatcher\"/>\n\t<c path=\"robotlegs.bender.extensions.mediatorMap.dsl.IMediatorMapper\"/>\n</f></mapMatcher>\n\t<map public=\"1\" set=\"method\" line=\"78\"><f a=\"type\">\n\t<x path=\"Class\"><d/></x>\n\t<c path=\"robotlegs.bender.extensions.mediatorMap.dsl.IMediatorMapper\"/>\n</f></map>\n\t<unmapMatcher public=\"1\" set=\"method\" line=\"86\"><f a=\"matcher\">\n\t<c path=\"robotlegs.bender.extensions.matching.ITypeMatcher\"/>\n\t<c path=\"robotlegs.bender.extensions.mediatorMap.dsl.IMediatorUnmapper\"/>\n</f></unmapMatcher>\n\t<unmap public=\"1\" set=\"method\" line=\"97\"><f a=\"type\">\n\t<x path=\"Class\"><d/></x>\n\t<c path=\"robotlegs.bender.extensions.mediatorMap.dsl.IMediatorUnmapper\"/>\n</f></unmap>\n\t<handleView public=\"1\" set=\"method\" line=\"105\"><f a=\"view:type\">\n\t<c path=\"openfl.display.DisplayObject\"/>\n\t<x path=\"Class\"><d/></x>\n\t<x path=\"Void\"/>\n</f></handleView>\n\t<mediate public=\"1\" set=\"method\" line=\"113\"><f a=\"item\">\n\t<d/>\n\t<x path=\"Void\"/>\n</f></mediate>\n\t<unmediate public=\"1\" set=\"method\" line=\"121\"><f a=\"item\">\n\t<d/>\n\t<x path=\"Void\"/>\n</f></unmediate>\n\t<unmediateAll public=\"1\" set=\"method\" line=\"129\"><f a=\"\"><x path=\"Void\"/></f></unmediateAll>\n\t<createMapper set=\"method\" line=\"138\"><f a=\"matcher\">\n\t<c path=\"robotlegs.bender.extensions.matching.ITypeMatcher\"/>\n\t<c path=\"robotlegs.bender.extensions.mediatorMap.dsl.IMediatorMapper\"/>\n</f></createMapper>\n\t<new public=\"1\" set=\"method\" line=\"51\"><f a=\"context\">\n\t<c path=\"robotlegs.bender.framework.api.IContext\"/>\n\t<x path=\"Void\"/>\n</f></new>\n\t<meta>\n\t\t<m n=\":keepSub\"/>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.modularity.impl.ModularContextEvent.CONTEXT_ADD = "contextAdd";
robotlegs.bender.extensions.signalCommandMap.impl.SignalCommandMap.__rtti = "<class path=\"robotlegs.bender.extensions.signalCommandMap.impl.SignalCommandMap\" params=\"\">\n\t<implements path=\"robotlegs.bender.extensions.signalCommandMap.api.ISignalCommandMap\"/>\n\t<_mappingProcessors line=\"31\"><c path=\"Array\"><d/></c></_mappingProcessors>\n\t<_injector><c path=\"robotlegs.bender.framework.api.IInjector\"/></_injector>\n\t<_triggerMap><c path=\"robotlegs.bender.extensions.commandCenter.impl.CommandTriggerMap\"/></_triggerMap>\n\t<_logger><c path=\"robotlegs.bender.framework.api.ILogger\"/></_logger>\n\t<map public=\"1\" set=\"method\" line=\"60\"><f a=\"signalClass\">\n\t<x path=\"Class\"><d/></x>\n\t<c path=\"robotlegs.bender.extensions.commandCenter.dsl.ICommandMapper\"/>\n</f></map>\n\t<unmap public=\"1\" set=\"method\" line=\"68\"><f a=\"signalClass\">\n\t<x path=\"Class\"><d/></x>\n\t<c path=\"robotlegs.bender.extensions.commandCenter.dsl.ICommandUnmapper\"/>\n</f></unmap>\n\t<addMappingProcessor public=\"1\" set=\"method\" line=\"73\"><f a=\"handler\">\n\t<d/>\n\t<c path=\"robotlegs.bender.extensions.signalCommandMap.api.ISignalCommandMap\"/>\n</f></addMappingProcessor>\n\t<getTrigger set=\"method\" line=\"84\"><f a=\"signalClass\">\n\t<x path=\"Class\"><d/></x>\n\t<c path=\"robotlegs.bender.extensions.signalCommandMap.impl.SignalCommandTrigger\"/>\n</f></getTrigger>\n\t<getKey set=\"method\" line=\"89\"><f a=\"signalClass\">\n\t<x path=\"Class\"><d/></x>\n\t<c path=\"String\"/>\n</f></getKey>\n\t<createTrigger set=\"method\" line=\"94\"><f a=\"signalClass\">\n\t<x path=\"Class\"><d/></x>\n\t<c path=\"robotlegs.bender.extensions.commandCenter.api.ICommandTrigger\"/>\n</f></createTrigger>\n\t<new public=\"1\" set=\"method\" line=\"46\"><f a=\"context\">\n\t<c path=\"robotlegs.bender.framework.api.IContext\"/>\n\t<x path=\"Void\"/>\n</f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.stage3D.away3d.impl.Away3DInitializer.__rtti = "<class path=\"robotlegs.bender.extensions.stage3D.away3d.impl.Away3DInitializer\" params=\"\">\n\t<extends path=\"robotlegs.bender.extensions.stage3D.base.impl.BaseInitializer\"/>\n\t<addLayer public=\"1\" set=\"method\" line=\"21\" override=\"1\"><f a=\"ViewClass:index:id\">\n\t<x path=\"Class\"><d/></x>\n\t<x path=\"Int\"/>\n\t<c path=\"String\"/>\n\t<x path=\"Void\"/>\n</f></addLayer>\n\t<new public=\"1\" set=\"method\" line=\"16\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.stage3D.away3d.impl.Away3DInitializerAvailable.__rtti = "<class path=\"robotlegs.bender.extensions.stage3D.away3d.impl.Away3DInitializerAvailable\" params=\"\">\n\t<Away3DInitializerAvailable public=\"1\" set=\"method\" line=\"12\"><f a=\"\"><x path=\"Void\"/></f></Away3DInitializerAvailable>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.stage3D.away3d.impl.Away3DViewMap.__meta__ = { fields : { awayCollection : { inject : null}, mediatorMap : { inject : null}, init : { postConstruct : null}}};
robotlegs.bender.extensions.stage3D.away3d.impl.Away3DViewMap.__rtti = "<class path=\"robotlegs.bender.extensions.stage3D.away3d.impl.Away3DViewMap\" params=\"\">\n\t<implements path=\"robotlegs.bender.extensions.stage3D.away3d.api.IAway3DViewMap\"/>\n\t<awayCollection public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.stage3D.away3d.impl.AwayCollection\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</awayCollection>\n\t<mediatorMap public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.mediatorMap.api.IMediatorMap\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</mediatorMap>\n\t<Away3DViewMap public=\"1\" set=\"method\" line=\"46\"><f a=\"\"><x path=\"Void\"/></f></Away3DViewMap>\n\t<init public=\"1\" set=\"method\" line=\"54\">\n\t\t<f a=\"\"><x path=\"Void\"/></f>\n\t\t<meta><m n=\"postConstruct\"/></meta>\n\t</init>\n\t<addAway3DView public=\"1\" set=\"method\" line=\"74\"><f a=\"view\">\n\t<d/>\n\t<x path=\"Void\"/>\n</f></addAway3DView>\n\t<removeAway3DView public=\"1\" set=\"method\" line=\"90\"><f a=\"view\">\n\t<d/>\n\t<x path=\"Void\"/>\n</f></removeAway3DView>\n\t<validateView set=\"method\" line=\"113\"><f a=\"view\">\n\t<d/>\n\t<x path=\"Bool\"/>\n</f></validateView>\n\t<onSceneAdded set=\"method\" line=\"126\"><f a=\"event\">\n\t<c path=\"away3d.events.Scene3DEvent\"/>\n\t<x path=\"Void\"/>\n</f></onSceneAdded>\n\t<onSceneRemoved set=\"method\" line=\"136\"><f a=\"event\">\n\t<c path=\"away3d.events.Scene3DEvent\"/>\n\t<x path=\"Void\"/>\n</f></onSceneRemoved>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.stage3D.base.impl.BaseCollection.__rtti = "<class path=\"robotlegs.bender.extensions.stage3D.base.impl.BaseCollection\" params=\"\">\n\t<_length line=\"24\"><x path=\"UInt\"/></_length>\n\t<items public=\"1\" line=\"26\"><x path=\"Map\">\n\t<c path=\"String\"/>\n\t<d/>\n</x></items>\n\t<length public=\"1\" get=\"accessor\" set=\"null\"><x path=\"UInt\"/></length>\n\t<get_length set=\"method\" line=\"48\"><f a=\"\"><x path=\"UInt\"/></f></get_length>\n\t<new public=\"1\" set=\"method\" line=\"11\">\n\t\t<f a=\"\"><x path=\"Void\"/></f>\n\t\t<meta><m n=\":compilerGenerated\"/></meta>\n\t</new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.stage3D.away3d.impl.AwayCollection.__rtti = "<class path=\"robotlegs.bender.extensions.stage3D.away3d.impl.AwayCollection\" params=\"\">\n\t<extends path=\"robotlegs.bender.extensions.stage3D.base.impl.BaseCollection\"/>\n\t<view3Ds public=\"1\" line=\"42\"><c path=\"Array\"><c path=\"away3d.containers.View3D\"/></c></view3Ds>\n\t<addItem public=\"1\" set=\"method\" line=\"44\"><f a=\"view3D:name\">\n\t<c path=\"away3d.containers.View3D\"/>\n\t<c path=\"String\"/>\n\t<x path=\"UInt\"/>\n</f></addItem>\n\t<removeItem public=\"1\" set=\"method\" line=\"63\"><f a=\"name\">\n\t<c path=\"String\"/>\n\t<c path=\"away3d.containers.View3D\"/>\n</f></removeItem>\n\t<getItem public=\"1\" set=\"method\" line=\"88\"><f a=\"name\">\n\t<c path=\"String\"/>\n\t<c path=\"away3d.containers.View3D\"/>\n</f></getItem>\n\t<new public=\"1\" set=\"method\" line=\"14\"><f a=\"awayCollectionData\">\n\t<c path=\"Array\"><d/></c>\n\t<x path=\"Void\"/>\n</f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.stage3D.base.impl.Renderer.__meta__ = { fields : { contextView : { inject : null}, viewport : { inject : null}}};
robotlegs.bender.extensions.stage3D.base.impl.Renderer.__rtti = "<class path=\"robotlegs.bender.extensions.stage3D.base.impl.Renderer\" params=\"\">\n\t<implements path=\"robotlegs.bender.extensions.stage3D.base.api.IRenderer\"/>\n\t<_injector><c path=\"robotlegs.bender.framework.api.IInjector\"/></_injector>\n\t<_logger><c path=\"robotlegs.bender.framework.api.ILogger\"/></_logger>\n\t<_onReady line=\"33\"><c path=\"msignal.Signal0\"/></_onReady>\n\t<contextView public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.contextView.ContextView\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</contextView>\n\t<viewport public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.stage3D.base.api.IViewport\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</viewport>\n\t<layers line=\"38\"><c path=\"Array\"><c path=\"robotlegs.bender.extensions.stage3D.base.api.ILayer\"/></c></layers>\n\t<_profile><d/></_profile>\n\t<freeFreeStage3DIndex line=\"42\"><x path=\"Int\"/></freeFreeStage3DIndex>\n\t<_stage3D><c path=\"openfl.display.Stage3D\"/></_stage3D>\n\t<_context3D><c path=\"openfl.display3D.Context3D\"/></_context3D>\n\t<antiAlias public=\"1\"><x path=\"Int\"/></antiAlias>\n\t<onReady public=\"1\" get=\"accessor\" set=\"null\"><c path=\"msignal.Signal0\"/></onReady>\n\t<stage3D public=\"1\" get=\"accessor\" set=\"null\"><c path=\"openfl.display.Stage3D\"/></stage3D>\n\t<context3D public=\"1\" get=\"accessor\" set=\"null\"><c path=\"openfl.display3D.Context3D\"/></context3D>\n\t<profile public=\"1\" get=\"accessor\" set=\"null\"><c path=\"String\"/></profile>\n\t<numLayers public=\"1\" get=\"accessor\" set=\"null\"><x path=\"Int\"/></numLayers>\n\t<get_id set=\"method\" line=\"54\"><f a=\"\"><x path=\"Int\"/></f></get_id>\n\t<set_id set=\"method\" line=\"59\"><f a=\"value\">\n\t<x path=\"Int\"/>\n\t<x path=\"Int\"/>\n</f></set_id>\n\t<_id public=\"1\"><x path=\"Int\"/></_id>\n\t<id public=\"1\" get=\"accessor\" set=\"accessor\"><x path=\"Int\"/></id>\n\t<init public=\"1\" set=\"method\" line=\"77\"><f a=\"profile:?antiAlias\" v=\":0\">\n\t<d/>\n\t<x path=\"Int\"/>\n\t<x path=\"Void\"/>\n</f></init>\n\t<contextCreatedHandler set=\"method\" line=\"93\"><f a=\"e\">\n\t<c path=\"openfl.events.Event\"/>\n\t<x path=\"Void\"/>\n</f></contextCreatedHandler>\n\t<OnViewportChange set=\"method\" line=\"113\"><f a=\"\"><x path=\"Void\"/></f></OnViewportChange>\n\t<start public=\"1\" set=\"method\" line=\"133\"><f a=\"\"><x path=\"Void\"/></f></start>\n\t<stop public=\"1\" set=\"method\" line=\"138\"><f a=\"\"><x path=\"Void\"/></f></stop>\n\t<addLayer public=\"1\" set=\"method\" line=\"143\"><f a=\"layer\">\n\t<c path=\"robotlegs.bender.extensions.stage3D.base.api.ILayer\"/>\n\t<x path=\"Void\"/>\n</f></addLayer>\n\t<addLayerAt public=\"1\" set=\"method\" line=\"149\"><f a=\"layer:index\">\n\t<c path=\"robotlegs.bender.extensions.stage3D.base.api.ILayer\"/>\n\t<x path=\"Int\"/>\n\t<x path=\"Void\"/>\n</f></addLayerAt>\n\t<removeLayer public=\"1\" set=\"method\" line=\"176\"><f a=\"layer\">\n\t<c path=\"robotlegs.bender.extensions.stage3D.base.api.ILayer\"/>\n\t<x path=\"Void\"/>\n</f></removeLayer>\n\t<getLayerIndex public=\"1\" set=\"method\" line=\"186\"><f a=\"layer\">\n\t<c path=\"robotlegs.bender.extensions.stage3D.base.api.ILayer\"/>\n\t<x path=\"Int\"/>\n</f></getLayerIndex>\n\t<render public=\"1\" set=\"method\" line=\"197\"><f a=\"\"><x path=\"Void\"/></f></render>\n\t<Update set=\"method\" line=\"202\"><f a=\"e\">\n\t<c path=\"openfl.events.Event\"/>\n\t<x path=\"Void\"/>\n</f></Update>\n\t<get_onReady public=\"1\" set=\"method\" line=\"215\"><f a=\"\"><c path=\"msignal.Signal0\"/></f></get_onReady>\n\t<get_stage3D public=\"1\" set=\"method\" line=\"220\"><f a=\"\"><c path=\"openfl.display.Stage3D\"/></f></get_stage3D>\n\t<get_context3D public=\"1\" set=\"method\" line=\"225\"><f a=\"\"><c path=\"openfl.display3D.Context3D\"/></f></get_context3D>\n\t<get_profile public=\"1\" set=\"method\" line=\"230\"><f a=\"\"><c path=\"String\"/></f></get_profile>\n\t<get_numLayers public=\"1\" set=\"method\" line=\"235\"><f a=\"\"><x path=\"Int\"/></f></get_numLayers>\n\t<new public=\"1\" set=\"method\" line=\"69\"><f a=\"context\">\n\t<c path=\"robotlegs.bender.framework.api.IContext\"/>\n\t<x path=\"Void\"/>\n</f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.stage3D.base.impl.Stack.__meta__ = { fields : { contextView : { inject : null}, renderer : { inject : null}, away3DInitializerAvailable : { inject : ["optional=true"]}, starlingInitializerAvailable : { inject : ["optional=true"]}}};
robotlegs.bender.extensions.stage3D.base.impl.Stack.__rtti = "<class path=\"robotlegs.bender.extensions.stage3D.base.impl.Stack\" params=\"\">\n\t<implements path=\"robotlegs.bender.extensions.stage3D.base.api.IStack\"/>\n\t<_injector><c path=\"robotlegs.bender.framework.api.IInjector\"/></_injector>\n\t<_logger><c path=\"robotlegs.bender.framework.api.ILogger\"/></_logger>\n\t<context><c path=\"robotlegs.bender.framework.api.IContext\"/></context>\n\t<_debug line=\"29\"><x path=\"Bool\"/></_debug>\n\t<classIDs><c path=\"Array\"><c path=\"Array\"><d/></c></c></classIDs>\n\t<initialized line=\"31\"><x path=\"Bool\"/></initialized>\n\t<debug public=\"1\" get=\"accessor\" set=\"accessor\"><x path=\"Bool\"/></debug>\n\t<contextView public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.contextView.ContextView\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</contextView>\n\t<renderer public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.stage3D.base.api.IRenderer\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</renderer>\n\t<away3DInitializerAvailable public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.stage3D.away3d.impl.Away3DInitializerAvailable\"/>\n\t\t<meta><m n=\"inject\"><e>\"optional=true\"</e></m></meta>\n\t</away3DInitializerAvailable>\n\t<starlingInitializerAvailable public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.stage3D.starling.impl.StarlingInitializerAvailable\"/>\n\t\t<meta><m n=\"inject\"><e>\"optional=true\"</e></m></meta>\n\t</starlingInitializerAvailable>\n\t<alternativa3DInitializer public=\"1\"><c path=\"robotlegs.bender.extensions.stage3D.base.impl.BaseInitializer\"/></alternativa3DInitializer>\n\t<away3DInitializer public=\"1\"><c path=\"robotlegs.bender.extensions.stage3D.base.impl.BaseInitializer\"/></away3DInitializer>\n\t<flare3DInitializer public=\"1\"><c path=\"robotlegs.bender.extensions.stage3D.base.impl.BaseInitializer\"/></flare3DInitializer>\n\t<genomeInitializer public=\"1\"><c path=\"robotlegs.bender.extensions.stage3D.base.impl.BaseInitializer\"/></genomeInitializer>\n\t<starlingInitializer public=\"1\"><c path=\"robotlegs.bender.extensions.stage3D.base.impl.BaseInitializer\"/></starlingInitializer>\n\t<zest3DInitializer public=\"1\"><c path=\"robotlegs.bender.extensions.stage3D.base.impl.BaseInitializer\"/></zest3DInitializer>\n\t<initialize set=\"method\" line=\"70\"><f a=\"\"><x path=\"Void\"/></f></initialize>\n\t<createInitializer set=\"method\" line=\"85\"><f a=\"classAlias\">\n\t<c path=\"String\"/>\n\t<c path=\"robotlegs.bender.extensions.stage3D.base.impl.BaseInitializer\"/>\n</f></createInitializer>\n\t<addLayer public=\"1\" set=\"method\" line=\"108\"><f a=\"LayerClass:?id\" v=\":''\">\n\t<x path=\"Class\"><d/></x>\n\t<c path=\"String\"/>\n\t<x path=\"Void\"/>\n</f></addLayer>\n\t<addLayerAt public=\"1\" set=\"method\" line=\"113\"><f a=\"LayerClass:index:?id\" v=\"::''\">\n\t<x path=\"Class\"><d/></x>\n\t<x path=\"Int\"/>\n\t<c path=\"String\"/>\n\t<x path=\"Void\"/>\n</f></addLayerAt>\n\t<getAddFunc set=\"method\" line=\"122\"><f a=\"layerClass\">\n\t<x path=\"Class\"><d/></x>\n\t<f a=\"::\">\n\t\t<x path=\"Class\"><d/></x>\n\t\t<x path=\"Int\"/>\n\t\t<c path=\"String\"/>\n\t\t<x path=\"Void\"/>\n\t</f>\n</f></getAddFunc>\n\t<addAway3DAt set=\"method\" line=\"162\"><f a=\"AwayClass:index:?id\" v=\"::''\">\n\t<x path=\"Class\"><d/></x>\n\t<x path=\"Int\"/>\n\t<c path=\"String\"/>\n\t<x path=\"Void\"/>\n</f></addAway3DAt>\n\t<addStarlingAt set=\"method\" line=\"188\"><f a=\"StarlingLayerClass:index:?id\" v=\"::''\">\n\t<x path=\"Class\"><d/></x>\n\t<x path=\"Int\"/>\n\t<c path=\"String\"/>\n\t<x path=\"Void\"/>\n</f></addStarlingAt>\n\t<get_debug public=\"1\" set=\"method\" line=\"209\"><f a=\"\"><x path=\"Bool\"/></f></get_debug>\n\t<set_debug public=\"1\" set=\"method\" line=\"214\"><f a=\"value\">\n\t<x path=\"Bool\"/>\n\t<x path=\"Bool\"/>\n</f></set_debug>\n\t<errorMsg set=\"method\" line=\"223\"><f a=\"index\">\n\t<x path=\"Int\"/>\n\t<c path=\"String\"/>\n</f></errorMsg>\n\t<new public=\"1\" set=\"method\" line=\"55\"><f a=\"context\">\n\t<c path=\"robotlegs.bender.framework.api.IContext\"/>\n\t<x path=\"Void\"/>\n</f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.stage3D.base.impl.Viewport.__meta__ = { fields : { contextView : { inject : null}}};
robotlegs.bender.extensions.stage3D.base.impl.Viewport.__rtti = "<class path=\"robotlegs.bender.extensions.stage3D.base.impl.Viewport\" params=\"\">\n\t<implements path=\"robotlegs.bender.extensions.stage3D.base.api.IViewport\"/>\n\t<_injector><c path=\"robotlegs.bender.framework.api.IInjector\"/></_injector>\n\t<_logger><c path=\"robotlegs.bender.framework.api.ILogger\"/></_logger>\n\t<contextView public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.contextView.ContextView\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</contextView>\n\t<_rect line=\"27\"><c path=\"openfl.geom.Rectangle\"/></_rect>\n\t<lastRect line=\"28\"><c path=\"openfl.geom.Rectangle\"/></lastRect>\n\t<_onChange line=\"30\"><c path=\"msignal.Signal0\"/></_onChange>\n\t<rect public=\"1\" get=\"accessor\" set=\"accessor\"><c path=\"openfl.geom.Rectangle\"/></rect>\n\t<onChange public=\"1\" get=\"accessor\" set=\"null\"><c path=\"msignal.Signal0\"/></onChange>\n\t<Viewport public=\"1\" set=\"method\" line=\"38\"><f a=\"context\">\n\t<c path=\"robotlegs.bender.framework.api.IContext\"/>\n\t<x path=\"Void\"/>\n</f></Viewport>\n\t<init public=\"1\" set=\"method\" line=\"45\"><f a=\"\"><x path=\"Void\"/></f></init>\n\t<CheckForChange set=\"method\" line=\"50\"><f a=\"e\">\n\t<c path=\"openfl.events.Event\"/>\n\t<x path=\"Void\"/>\n</f></CheckForChange>\n\t<get_rect public=\"1\" set=\"method\" line=\"59\"><f a=\"\"><c path=\"openfl.geom.Rectangle\"/></f></get_rect>\n\t<set_rect public=\"1\" set=\"method\" line=\"64\"><f a=\"value\">\n\t<c path=\"openfl.geom.Rectangle\"/>\n\t<c path=\"openfl.geom.Rectangle\"/>\n</f></set_rect>\n\t<get_onChange public=\"1\" set=\"method\" line=\"70\"><f a=\"\"><c path=\"msignal.Signal0\"/></f></get_onChange>\n\t<new public=\"1\" set=\"method\" line=\"17\">\n\t\t<f a=\"\"><x path=\"Void\"/></f>\n\t\t<meta><m n=\":compilerGenerated\"/></meta>\n\t</new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.stage3D.starling.StarlingIntegrationExtension.__rtti = "<class path=\"robotlegs.bender.extensions.stage3D.starling.StarlingIntegrationExtension\" params=\"\">\n\t<implements path=\"robotlegs.bender.framework.api.IExtension\"/>\n\t<_uid><c path=\"String\"/></_uid>\n\t<_context><c path=\"robotlegs.bender.framework.api.IContext\"/></_context>\n\t<_logger><c path=\"robotlegs.bender.framework.api.ILogger\"/></_logger>\n\t<extend public=\"1\" set=\"method\" line=\"52\"><f a=\"context\">\n\t<c path=\"robotlegs.bender.framework.api.IContext\"/>\n\t<x path=\"Void\"/>\n</f></extend>\n\t<toString public=\"1\" set=\"method\" line=\"69\"><f a=\"\"><c path=\"String\"/></f></toString>\n\t<handleStarlingCollection set=\"method\" line=\"84\"><f a=\"starlingCollection\">\n\t<c path=\"robotlegs.bender.extensions.stage3D.starling.impl.StarlingCollection\"/>\n\t<x path=\"Void\"/>\n</f></handleStarlingCollection>\n\t<new public=\"1\" set=\"method\" line=\"45\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.stage3D.starling.StarlingStageSyncExtension.__rtti = "<class path=\"robotlegs.bender.extensions.stage3D.starling.StarlingStageSyncExtension\" params=\"\">\n\t<implements path=\"robotlegs.bender.framework.api.IExtension\"/>\n\t<_uid><c path=\"String\"/></_uid>\n\t<_context><c path=\"robotlegs.bender.framework.api.IContext\"/></_context>\n\t<_contextView><t path=\"flash.display.DisplayObjectContainer\"/></_contextView>\n\t<_logger><c path=\"robotlegs.bender.framework.api.ILogger\"/></_logger>\n\t<_contextReady><x path=\"Bool\"/></_contextReady>\n\t<_starlingCollection><c path=\"robotlegs.bender.extensions.stage3D.starling.impl.StarlingCollection\"/></_starlingCollection>\n\t<_numStarlingsInQueue line=\"58\"><x path=\"Int\"/></_numStarlingsInQueue>\n\t<extend public=\"1\" set=\"method\" line=\"67\"><f a=\"context\">\n\t<c path=\"robotlegs.bender.framework.api.IContext\"/>\n\t<x path=\"Void\"/>\n</f></extend>\n\t<toString public=\"1\" set=\"method\" line=\"80\"><f a=\"\"><c path=\"String\"/></f></toString>\n\t<handleStarlingCollection set=\"method\" line=\"98\"><f a=\"collection\">\n\t<c path=\"robotlegs.bender.extensions.stage3D.starling.impl.StarlingCollection\"/>\n\t<x path=\"Void\"/>\n</f></handleStarlingCollection>\n\t<handleStarlingContextView set=\"method\" line=\"120\"><f a=\"currentStarling\">\n\t<c path=\"starling.core.Starling\"/>\n\t<x path=\"Void\"/>\n</f></handleStarlingContextView>\n\t<onContextCreated set=\"method\" line=\"139\"><f a=\"event\">\n\t<c path=\"starling.events.Event\"/>\n\t<x path=\"Void\"/>\n</f></onContextCreated>\n\t<initializeContext set=\"method\" line=\"155\"><f a=\"\"><x path=\"Void\"/></f></initializeContext>\n\t<new public=\"1\" set=\"method\" line=\"60\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.stage3D.starling.impl.StarlingCollection.__rtti = "<class path=\"robotlegs.bender.extensions.stage3D.starling.impl.StarlingCollection\" params=\"\">\n\t<extends path=\"robotlegs.bender.extensions.stage3D.base.impl.BaseCollection\"/>\n\t<starlings public=\"1\" line=\"48\"><x path=\"openfl.Vector\"><c path=\"starling.core.Starling\"/></x></starlings>\n\t<addItem public=\"1\" set=\"method\" line=\"50\"><f a=\"starling:name\">\n\t<c path=\"starling.core.Starling\"/>\n\t<c path=\"String\"/>\n\t<x path=\"UInt\"/>\n</f></addItem>\n\t<removeItem public=\"1\" set=\"method\" line=\"68\"><f a=\"name\">\n\t<c path=\"String\"/>\n\t<c path=\"starling.core.Starling\"/>\n</f></removeItem>\n\t<getItem public=\"1\" set=\"method\" line=\"92\"><f a=\"name\">\n\t<c path=\"String\"/>\n\t<c path=\"starling.core.Starling\"/>\n</f></getItem>\n\t<new public=\"1\" set=\"method\" line=\"21\"><f a=\"starlingCollectionData\">\n\t<c path=\"Array\"><d/></c>\n\t<x path=\"Void\"/>\n</f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.stage3D.starling.impl.StarlingInitializer.__rtti = "<class path=\"robotlegs.bender.extensions.stage3D.starling.impl.StarlingInitializer\" params=\"\">\n\t<extends path=\"robotlegs.bender.extensions.stage3D.base.impl.BaseInitializer\"/>\n\t<addLayer public=\"1\" set=\"method\" line=\"24\" override=\"1\"><f a=\"ViewClass:index:id\">\n\t<x path=\"Class\"><d/></x>\n\t<x path=\"Int\"/>\n\t<c path=\"String\"/>\n\t<x path=\"Void\"/>\n</f></addLayer>\n\t<new public=\"1\" set=\"method\" line=\"19\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.stage3D.starling.impl.StarlingInitializerAvailable.__rtti = "<class path=\"robotlegs.bender.extensions.stage3D.starling.impl.StarlingInitializerAvailable\" params=\"\">\n\t<new public=\"1\" set=\"method\" line=\"12\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.stage3D.starling.impl.StarlingViewMap.__meta__ = { fields : { starlingCollection : { inject : null}, mediatorMap : { inject : null}, init : { postConstruct : null}}};
robotlegs.bender.extensions.stage3D.starling.impl.StarlingViewMap.__rtti = "<class path=\"robotlegs.bender.extensions.stage3D.starling.impl.StarlingViewMap\" params=\"\">\n\t<implements path=\"robotlegs.bender.extensions.stage3D.starling.api.IStarlingViewMap\"/>\n\t<starlingCollection public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.stage3D.starling.impl.StarlingCollection\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</starlingCollection>\n\t<mediatorMap public=\"1\">\n\t\t<c path=\"robotlegs.bender.extensions.mediatorMap.api.IMediatorMap\"/>\n\t\t<meta><m n=\"inject\"/></meta>\n\t</mediatorMap>\n\t<init public=\"1\" set=\"method\" line=\"39\">\n\t\t<f a=\"\"><x path=\"Void\"/></f>\n\t\t<meta><m n=\"postConstruct\"/></meta>\n\t</init>\n\t<addStarlingView public=\"1\" set=\"method\" line=\"59\"><f a=\"view\">\n\t<c path=\"starling.display.DisplayObject\"/>\n\t<x path=\"Void\"/>\n</f></addStarlingView>\n\t<removeStarlingView public=\"1\" set=\"method\" line=\"69\"><f a=\"view\">\n\t<c path=\"starling.display.DisplayObject\"/>\n\t<x path=\"Void\"/>\n</f></removeStarlingView>\n\t<onStarlingAdded set=\"method\" line=\"85\"><f a=\"event\">\n\t<c path=\"starling.events.Event\"/>\n\t<x path=\"Void\"/>\n</f></onStarlingAdded>\n\t<onStarlingRemoved set=\"method\" line=\"95\"><f a=\"event\">\n\t<c path=\"starling.events.Event\"/>\n\t<x path=\"Void\"/>\n</f></onStarlingRemoved>\n\t<onRootCreated set=\"method\" line=\"106\"><f a=\"event\">\n\t<c path=\"starling.events.Event\"/>\n\t<x path=\"Void\"/>\n</f></onRootCreated>\n\t<new public=\"1\" set=\"method\" line=\"33\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.viewManager.impl.ConfigureViewEvent.CONFIGURE_VIEW = "configureView";
robotlegs.bender.extensions.viewManager.impl.ContainerBindingEvent.BINDING_EMPTY = "bindingEmpty";
robotlegs.bender.extensions.viewManager.impl.ContainerRegistry.__rtti = "<class path=\"robotlegs.bender.extensions.viewManager.impl.ContainerRegistry\" params=\"\">\n\t<extends path=\"openfl.events.EventDispatcher\"/>\n\t<bindings public=\"1\" get=\"accessor\" set=\"null\" line=\"32\"><c path=\"Array\"><c path=\"robotlegs.bender.extensions.viewManager.impl.ContainerBinding\"/></c></bindings>\n\t<get_bindings public=\"1\" set=\"method\" line=\"36\"><f a=\"\"><c path=\"Array\"><c path=\"robotlegs.bender.extensions.viewManager.impl.ContainerBinding\"/></c></f></get_bindings>\n\t<rootBindings public=\"1\" get=\"accessor\" set=\"null\" line=\"42\"><c path=\"Array\"><c path=\"robotlegs.bender.extensions.viewManager.impl.ContainerBinding\"/></c></rootBindings>\n\t<get_rootBindings public=\"1\" set=\"method\" line=\"47\"><f a=\"\"><c path=\"Array\"><c path=\"robotlegs.bender.extensions.viewManager.impl.ContainerBinding\"/></c></f></get_rootBindings>\n\t<_bindingByContainer line=\"56\"><x path=\"Map\">\n\t<c path=\"openfl.display.DisplayObject\"/>\n\t<d/>\n</x></_bindingByContainer>\n\t<addContainer public=\"1\" set=\"method\" line=\"65\"><f a=\"container\">\n\t<c path=\"openfl.display.DisplayObjectContainer\"/>\n\t<c path=\"robotlegs.bender.extensions.viewManager.impl.ContainerBinding\"/>\n</f></addContainer>\n\t<removeContainer public=\"1\" set=\"method\" line=\"79\"><f a=\"container\">\n\t<c path=\"openfl.display.DisplayObjectContainer\"/>\n\t<c path=\"robotlegs.bender.extensions.viewManager.impl.ContainerBinding\"/>\n</f></removeContainer>\n\t<findParentBinding public=\"1\" set=\"method\" line=\"91\"><f a=\"target\">\n\t<c path=\"openfl.display.DisplayObject\"/>\n\t<c path=\"robotlegs.bender.extensions.viewManager.impl.ContainerBinding\"/>\n</f></findParentBinding>\n\t<getBinding public=\"1\" set=\"method\" line=\"109\"><f a=\"container\">\n\t<c path=\"openfl.display.DisplayObjectContainer\"/>\n\t<c path=\"robotlegs.bender.extensions.viewManager.impl.ContainerBinding\"/>\n</f></getBinding>\n\t<createBinding set=\"method\" line=\"118\"><f a=\"container\">\n\t<c path=\"openfl.display.DisplayObjectContainer\"/>\n\t<c path=\"robotlegs.bender.extensions.viewManager.impl.ContainerBinding\"/>\n</f></createBinding>\n\t<removeBinding set=\"method\" line=\"157\"><f a=\"binding\">\n\t<c path=\"robotlegs.bender.extensions.viewManager.impl.ContainerBinding\"/>\n\t<x path=\"Void\"/>\n</f></removeBinding>\n\t<addRootBinding set=\"method\" line=\"192\"><f a=\"binding\">\n\t<c path=\"robotlegs.bender.extensions.viewManager.impl.ContainerBinding\"/>\n\t<x path=\"Void\"/>\n</f></addRootBinding>\n\t<removeRootBinding set=\"method\" line=\"198\"><f a=\"binding\">\n\t<c path=\"robotlegs.bender.extensions.viewManager.impl.ContainerBinding\"/>\n\t<x path=\"Void\"/>\n</f></removeRootBinding>\n\t<onBindingEmpty set=\"method\" line=\"205\"><f a=\"event\">\n\t<c path=\"robotlegs.bender.extensions.viewManager.impl.ContainerBindingEvent\"/>\n\t<x path=\"Void\"/>\n</f></onBindingEmpty>\n\t<new public=\"1\" set=\"method\" line=\"24\"><f a=\"?target\">\n\t<c path=\"openfl.events.IEventDispatcher\"/>\n\t<x path=\"Void\"/>\n</f></new>\n\t<meta>\n\t\t<m n=\":meta\"><e>'???'</e></m>\n\t\t<m n=\":meta\"><e>'???'</e></m>\n\t\t<m n=\":meta\"><e>'???'</e></m>\n\t\t<m n=\":meta\"><e>'???'</e></m>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent.CONTAINER_ADD = "containerAdd";
robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent.CONTAINER_REMOVE = "containerRemove";
robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent.ROOT_CONTAINER_ADD = "rootContainerAdd";
robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent.ROOT_CONTAINER_REMOVE = "rootContainerRemove";
robotlegs.bender.extensions.viewManager.impl.ViewManager.__rtti = "<class path=\"robotlegs.bender.extensions.viewManager.impl.ViewManager\" params=\"\">\n\t<extends path=\"openfl.events.EventDispatcher\"/>\n\t<implements path=\"robotlegs.bender.extensions.viewManager.api.IViewManager\"/>\n\t<containers public=\"1\" get=\"accessor\" set=\"null\" line=\"33\"><c path=\"Array\"><c path=\"openfl.display.DisplayObjectContainer\"/></c></containers>\n\t<get_containers public=\"1\" set=\"method\" line=\"34\"><f a=\"\"><c path=\"Array\"><c path=\"openfl.display.DisplayObjectContainer\"/></c></f></get_containers>\n\t<_handlers line=\"50\"><c path=\"Array\"><c path=\"robotlegs.bender.extensions.viewManager.api.IViewHandler\"/></c></_handlers>\n\t<_registry><c path=\"robotlegs.bender.extensions.viewManager.impl.ContainerRegistry\"/></_registry>\n\t<addContainer public=\"1\" set=\"method\" line=\"74\"><f a=\"container\">\n\t<c path=\"openfl.display.DisplayObjectContainer\"/>\n\t<x path=\"Void\"/>\n</f></addContainer>\n\t<removeContainer public=\"1\" set=\"method\" line=\"91\"><f a=\"container\">\n\t<c path=\"openfl.display.DisplayObjectContainer\"/>\n\t<x path=\"Void\"/>\n</f></removeContainer>\n\t<addViewHandler public=\"1\" set=\"method\" line=\"110\"><f a=\"handler\">\n\t<c path=\"robotlegs.bender.extensions.viewManager.api.IViewHandler\"/>\n\t<x path=\"Void\"/>\n</f></addViewHandler>\n\t<removeViewHandler public=\"1\" set=\"method\" line=\"127\"><f a=\"handler\">\n\t<c path=\"robotlegs.bender.extensions.viewManager.api.IViewHandler\"/>\n\t<x path=\"Void\"/>\n</f></removeViewHandler>\n\t<removeAllHandlers public=\"1\" set=\"method\" line=\"145\"><f a=\"\"><x path=\"Void\"/></f></removeAllHandlers>\n\t<validContainer set=\"method\" line=\"161\"><f a=\"container\">\n\t<c path=\"openfl.display.DisplayObjectContainer\"/>\n\t<x path=\"Bool\"/>\n</f></validContainer>\n\t<new public=\"1\" set=\"method\" line=\"61\"><f a=\"containerRegistry\">\n\t<c path=\"robotlegs.bender.extensions.viewManager.impl.ContainerRegistry\"/>\n\t<x path=\"Void\"/>\n</f></new>\n\t<meta>\n\t\t<m n=\":meta\"><e>'???'</e></m>\n\t\t<m n=\":meta\"><e>'???'</e></m>\n\t\t<m n=\":meta\"><e>'???'</e></m>\n\t\t<m n=\":meta\"><e>'???'</e></m>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent.CONTAINER_ADD = "containerAdd";
robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent.CONTAINER_REMOVE = "containerRemove";
robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent.HANDLER_ADD = "handlerAdd";
robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent.HANDLER_REMOVE = "handlerRemove";
robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorMap.__rtti = "<class path=\"robotlegs.bender.extensions.viewProcessorMap.impl.ViewProcessorMap\" params=\"\">\n\t<implements path=\"robotlegs.bender.extensions.viewManager.api.IViewHandler\"/>\n\t<implements path=\"robotlegs.bender.extensions.viewProcessorMap.api.IViewProcessorMap\"/>\n\t<_mappers line=\"32\"><x path=\"Map\">\n\t<c path=\"String\"/>\n\t<d/>\n</x></_mappers>\n\t<_handler><c path=\"robotlegs.bender.extensions.viewProcessorMap.impl.IViewProcessorViewHandler\"/></_handler>\n\t<NULL_UNMAPPER line=\"36\"><c path=\"robotlegs.bender.extensions.viewProcessorMap.impl.NullViewProcessorUnmapper\"/></NULL_UNMAPPER>\n\t<mapMatcher public=\"1\" set=\"method\" line=\"58\"><f a=\"matcher\">\n\t<c path=\"robotlegs.bender.extensions.matching.ITypeMatcher\"/>\n\t<c path=\"robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorMapper\"/>\n</f></mapMatcher>\n\t<map public=\"1\" set=\"method\" line=\"70\"><f a=\"type\">\n\t<x path=\"Class\"><d/></x>\n\t<c path=\"robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorMapper\"/>\n</f></map>\n\t<unmapMatcher public=\"1\" set=\"method\" line=\"79\"><f a=\"matcher\">\n\t<c path=\"robotlegs.bender.extensions.matching.ITypeMatcher\"/>\n\t<c path=\"robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorUnmapper\"/>\n</f></unmapMatcher>\n\t<unmap public=\"1\" set=\"method\" line=\"89\"><f a=\"type\">\n\t<x path=\"Class\"><d/></x>\n\t<c path=\"robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorUnmapper\"/>\n</f></unmap>\n\t<process public=\"1\" set=\"method\" line=\"98\"><f a=\"item\">\n\t<d/>\n\t<x path=\"Void\"/>\n</f></process>\n\t<unprocess public=\"1\" set=\"method\" line=\"107\"><f a=\"item\">\n\t<d/>\n\t<x path=\"Void\"/>\n</f></unprocess>\n\t<handleView public=\"1\" set=\"method\" line=\"116\"><f a=\"view:type\">\n\t<c path=\"openfl.display.DisplayObject\"/>\n\t<x path=\"Class\"><d/></x>\n\t<x path=\"Void\"/>\n</f></handleView>\n\t<createMapper set=\"method\" line=\"125\"><f a=\"matcher\">\n\t<c path=\"robotlegs.bender.extensions.matching.ITypeMatcher\"/>\n\t<c path=\"robotlegs.bender.extensions.viewProcessorMap.dsl.IViewProcessorMapper\"/>\n</f></createMapper>\n\t<new public=\"1\" set=\"method\" line=\"45\"><f a=\"factory:?handler\" v=\":null\">\n\t<c path=\"robotlegs.bender.extensions.viewProcessorMap.impl.IViewProcessorFactory\"/>\n\t<c path=\"robotlegs.bender.extensions.viewProcessorMap.impl.IViewProcessorViewHandler\"/>\n\t<x path=\"Void\"/>\n</f></new>\n\t<meta>\n\t\t<m n=\":rtti\"/>\n\t\t<m n=\":keepSub\"/>\n\t</meta>\n</class>";
robotlegs.bender.extensions.vigilance.MetadataChecker.__meta__ = { fields : { context : { inject : ["optional=true"]}}};
robotlegs.bender.extensions.vigilance.MetadataChecker.__rtti = "<class path=\"robotlegs.bender.extensions.vigilance.MetadataChecker\" params=\"\" module=\"robotlegs.bender.extensions.vigilance.VigilanceExtension\">\n\t<context public=\"1\">\n\t\t<c path=\"robotlegs.bender.framework.api.IContext\"/>\n\t\t<meta><m n=\"inject\"><e>\"optional=true\"</e></m></meta>\n\t</context>\n\t<check public=\"1\" set=\"method\" line=\"79\"><f a=\"\"><x path=\"Void\"/></f></check>\n\t<meta>\n\t\t<m n=\":keepSub\"/>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
robotlegs.bender.framework.api.LifecycleError.SYNC_HANDLER_ARG_MISMATCH = "When and After handlers must accept 0 or 1 arguments";
robotlegs.bender.framework.api.LifecycleError.LATE_HANDLER_ERROR_MESSAGE = "Handler added late and will never fire";
robotlegs.bender.framework.api.LifecycleState.UNINITIALIZED = "uninitialized";
robotlegs.bender.framework.api.LifecycleState.INITIALIZING = "initializing";
robotlegs.bender.framework.api.LifecycleState.ACTIVE = "active";
robotlegs.bender.framework.api.LifecycleState.SUSPENDING = "suspending";
robotlegs.bender.framework.api.LifecycleState.SUSPENDED = "suspended";
robotlegs.bender.framework.api.LifecycleState.RESUMING = "resuming";
robotlegs.bender.framework.api.LifecycleState.DESTROYING = "destroying";
robotlegs.bender.framework.api.LifecycleState.DESTROYED = "destroyed";
robotlegs.bender.framework.api.LogLevel.FATAL = 2;
robotlegs.bender.framework.api.LogLevel.ERROR = 4;
robotlegs.bender.framework.api.LogLevel.WARN = 8;
robotlegs.bender.framework.api.LogLevel.INFO = 16;
robotlegs.bender.framework.api.LogLevel.DEBUG = 32;
robotlegs.bender.framework.api.LogLevel.NAME = [0,0,"FATAL",0,"ERROR",0,0,0,"WARN",0,0,0,0,0,0,0,"INFO",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"DEBUG"];
robotlegs.bender.framework.api.PinEvent.DETAIN = "detain";
robotlegs.bender.framework.api.PinEvent.RELEASE = "release";
starling.animation.DelayedCall.sPool = new Array();
starling.animation.Juggler.tweenSetters = null;
starling.animation.Transitions.LINEAR = "linear";
starling.animation.Transitions.EASE_IN = "easeIn";
starling.animation.Transitions.EASE_OUT = "easeOut";
starling.animation.Transitions.EASE_IN_OUT = "easeInOut";
starling.animation.Transitions.EASE_OUT_IN = "easeOutIn";
starling.animation.Transitions.EASE_IN_BACK = "easeInBack";
starling.animation.Transitions.EASE_OUT_BACK = "easeOutBack";
starling.animation.Transitions.EASE_IN_OUT_BACK = "easeInOutBack";
starling.animation.Transitions.EASE_OUT_IN_BACK = "easeOutInBack";
starling.animation.Transitions.EASE_IN_ELASTIC = "easeInElastic";
starling.animation.Transitions.EASE_OUT_ELASTIC = "easeOutElastic";
starling.animation.Transitions.EASE_IN_OUT_ELASTIC = "easeInOutElastic";
starling.animation.Transitions.EASE_OUT_IN_ELASTIC = "easeOutInElastic";
starling.animation.Transitions.EASE_IN_BOUNCE = "easeInBounce";
starling.animation.Transitions.EASE_OUT_BOUNCE = "easeOutBounce";
starling.animation.Transitions.EASE_IN_OUT_BOUNCE = "easeInOutBounce";
starling.animation.Transitions.EASE_OUT_IN_BOUNCE = "easeOutInBounce";
starling.animation.Tween.HINT_MARKER = "#";
starling.animation.Tween.sTweenPool = (function($this) {
	var $r;
	var this1;
	this1 = new openfl.VectorData();
	{
		var this2;
		this2 = new Array(0);
		this1.data = this2;
	}
	this1.length = 0;
	this1.fixed = false;
	$r = this1;
	return $r;
}(this));
starling.core.RenderSupport.sPoint = new openfl.geom.Point();
starling.core.RenderSupport.sPoint3D = new openfl.geom.Vector3D();
starling.core.RenderSupport.sClipRect = new openfl.geom.Rectangle();
starling.core.RenderSupport.sBufferRect = new openfl.geom.Rectangle();
starling.core.RenderSupport.sScissorRect = new openfl.geom.Rectangle();
starling.core.RenderSupport.sMatrix3D = new openfl.geom.Matrix3D();
starling.core.RenderSupport.sMatrixData = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
starling.core.Starling.VERSION = "1.6.1";
starling.core.Starling.PROGRAM_DATA_NAME = "Starling.programs";
starling.core.Starling.sHandleLostContext = true;
starling.core.Starling.sContextData = new haxe.ds.ObjectMap();
starling.core.Starling.sAll = new Array();
starling.display.BlendMode.AUTO = "auto";
starling.display.BlendMode.NONE = "none";
starling.display.BlendMode.NORMAL = "normal";
starling.display.BlendMode.ADD = "add";
starling.display.BlendMode.MULTIPLY = "multiply";
starling.display.BlendMode.SCREEN = "screen";
starling.display.BlendMode.ERASE = "erase";
starling.display.BlendMode.BELOW = "below";
starling.display.Quad.sHelperPoint = new openfl.geom.Point();
starling.display.Quad.sHelperPoint3D = new openfl.geom.Vector3D();
starling.display.Quad.sHelperMatrix = new openfl.geom.Matrix();
starling.display.Quad.sHelperMatrix3D = new openfl.geom.Matrix3D();
starling.display.QuadBatch.MAX_NUM_QUADS = 16383;
starling.display.QuadBatch.QUAD_PROGRAM_NAME = "QB_q";
starling.display.QuadBatch.sHelperMatrix = new openfl.geom.Matrix();
starling.display.QuadBatch.sProgramNameCache = new haxe.ds.IntMap();
starling.display.Sprite3D.E = 0.00001;
starling.display.Sprite3D.sHelperPoint = new openfl.geom.Vector3D();
starling.display.Sprite3D.sHelperPointAlt = new openfl.geom.Vector3D();
starling.display.Sprite3D.sHelperMatrix = new openfl.geom.Matrix3D();
starling.display.Stage.sHelperMatrix = new openfl.geom.Matrix3D();
starling.events.Event.ADDED = "added";
starling.events.Event.ADDED_TO_STAGE = "addedToStage";
starling.events.Event.ENTER_FRAME = "enterFrame";
starling.events.Event.REMOVED = "removed";
starling.events.Event.REMOVED_FROM_STAGE = "removedFromStage";
starling.events.Event.TRIGGERED = "triggered";
starling.events.Event.FLATTEN = "flatten";
starling.events.Event.RESIZE = "resize";
starling.events.Event.COMPLETE = "complete";
starling.events.Event.CONTEXT3D_CREATE = "context3DCreate";
starling.events.Event.ROOT_CREATED = "rootCreated";
starling.events.Event.REMOVE_FROM_JUGGLER = "removeFromJuggler";
starling.events.Event.TEXTURES_RESTORED = "texturesRestored";
starling.events.Event.IO_ERROR = "ioError";
starling.events.Event.SECURITY_ERROR = "securityError";
starling.events.Event.PARSE_ERROR = "parseError";
starling.events.Event.FATAL_ERROR = "fatalError";
starling.events.Event.CHANGE = "change";
starling.events.Event.CANCEL = "cancel";
starling.events.Event.SCROLL = "scroll";
starling.events.Event.OPEN = "open";
starling.events.Event.CLOSE = "close";
starling.events.Event.SELECT = "select";
starling.events.Event.READY = "ready";
starling.events.Event.sEventPool = new Array();
starling.events.EnterFrameEvent.ENTER_FRAME = "enterFrame";
starling.events.KeyboardEvent.KEY_UP = "keyUp";
starling.events.KeyboardEvent.KEY_DOWN = "keyDown";
starling.events.ResizeEvent.RESIZE = "resize";
starling.events.Touch.sHelperMatrix = new openfl.geom.Matrix();
starling.events.Touch.sHelperPoint = new openfl.geom.Point();
starling.events.TouchEvent.TOUCH = "touch";
starling.events.TouchEvent.sTouches = (function($this) {
	var $r;
	var this1;
	this1 = new openfl.VectorData();
	{
		var this2;
		this2 = new Array(0);
		this1.data = this2;
	}
	this1.length = 0;
	this1.fixed = false;
	$r = this1;
	return $r;
}(this));
starling.events.TouchPhase.__meta__ = { obj : { 'final' : null}};
starling.events.TouchPhase.HOVER = "hover";
starling.events.TouchPhase.BEGAN = "began";
starling.events.TouchPhase.MOVED = "moved";
starling.events.TouchPhase.STATIONARY = "stationary";
starling.events.TouchPhase.ENDED = "ended";
starling.events.TouchProcessor.sUpdatedTouches = (function($this) {
	var $r;
	var this1;
	this1 = new openfl.VectorData();
	{
		var this2;
		this2 = new Array(0);
		this1.data = this2;
	}
	this1.length = 0;
	this1.fixed = false;
	$r = this1;
	return $r;
}(this));
starling.events.TouchProcessor.sHoveringTouchData = (function($this) {
	var $r;
	var this1;
	this1 = new openfl.VectorData();
	{
		var this2;
		this2 = new Array(0);
		this1.data = this2;
	}
	this1.length = 0;
	this1.fixed = false;
	$r = this1;
	return $r;
}(this));
starling.events.TouchProcessor.sHelperPoint = new openfl.geom.Point();
starling.filters.FragmentFilter.sStageBounds = new openfl.geom.Rectangle();
starling.filters.FragmentFilter.sTransformationMatrix = new openfl.geom.Matrix();
starling.filters.FragmentFilterMode.BELOW = "below";
starling.filters.FragmentFilterMode.REPLACE = "replace";
starling.filters.FragmentFilterMode.ABOVE = "above";
starling.text.BitmapFont.NATIVE_SIZE = -1;
starling.text.BitmapFont.MINI = "mini";
starling.text.BitmapFont.CHAR_SPACE = 32;
starling.text.BitmapFont.CHAR_TAB = 9;
starling.text.BitmapFont.CHAR_NEWLINE = 10;
starling.text.BitmapFont.CHAR_CARRIAGE_RETURN = 13;
starling.text.BitmapFont.sLines = (function($this) {
	var $r;
	var this1;
	this1 = new openfl.VectorData();
	{
		var this2;
		this2 = new Array(0);
		this1.data = this2;
	}
	this1.length = 0;
	this1.fixed = false;
	$r = this1;
	return $r;
}(this));
starling.text.CharLocation.sInstancePool = new Array();
starling.text.CharLocation.sVectorPool = new Array();
starling.text.CharLocation.sInstanceLoan = new Array();
starling.text.CharLocation.sVectorLoan = new Array();
starling.text.MiniBitmapFont.BITMAP_WIDTH = 128;
starling.text.MiniBitmapFont.BITMAP_HEIGHT = 64;
starling.text.MiniBitmapFont.BITMAP_DATA = [2027613533,3413039936,202148514,2266925598,4206886452,4286853117,2034947,3202703399,352977282,2957757964,3113652880,2158068882,1468709156,2268063717,2779310143,2101025806,3416509055,4215794539,3602168838,1038056207,1932393374,3182285627,3086802234,1741291262,2017257123,3395280843,984074419,3049693147,3986077023,1055013549,1806563255,1754714962,1577746187,1124058786,3888759258,2482229043,2916583666,3743065328,866060213,1695195001,2401582068,3113347901,2616521596,1053798161,2093370968,4229025683,560451479,854767518,2610241322,4279041348,4181572480,4031244973,587139110,1081376765,962217926,783603325,3605526425,4102001916,289204733,2635140255,3453981695,3487854373,2132197241,3164775074,4257640328,770238970,144664537,707141570,2934433071,871272893,512964596,808491899,481894297,3095982481,3598364156,1710636358,2904016319,1751040139,596966466,1363963692,465815609,315567311,4290666159,4086022551,179721458,2221734970,3942224988,1519355876,3292323782,3933427230,3314199893,3736227348,3846038425,603088884,2677349227,3207069327,3555275967,3063054283,3064577213,3412044179,693642210,4280513949,762928717,1802215333,3774849674,4221155330,970959395,557220237,2107226136,3509822982,3403284788,4265820019,898597576,991077243,2091615904,3334716888,633599866,4218780109,2216000376,834870947,2118009742,1362731961,236280636,1274945142,1458729366,797960805,3289369720,2103717340,3946406003,2676522889,1624104606,1156993903,3186170404,2254499071,1204911924,1314218830,3307086392,2824275959,3839865679,2073394964,1873329433,1754205930,1528429545,1631106062,2263272465,4220497047,3522893765,3641376303,707451487,3452496787,1390653868,2620555793,1027328684,3419683476,3662193703,765701986,3808279132,786403271,3824435837,713234896,4261856399,3471930731,3993492879,1447960461,1398434593,1914230187,2398643285,4156374464,3859339207,3220700061,3373248762,3186030434,1315917060,2809852481,4008553903,4105611953,1599499652,3513857591,877854499,4198259455,3648560077,2838035419,3255594190,2465578457,4263505201,534904657,2889261598,1358214576,1069250354,3870010557,2628896583,3448610878,442343309,1024736866,4015119133,3250867279,1513359261,2442089596,1944476762,735490552,426990058,4234106111,1204305707,3330995265,2398649368,4221048123,1724669255,3801115709,3489328790,3896402933,3696936939,2836983295,3656750393,3349724512,3810416287,3654997608,4284455103,2294939563,4207697932,642748805,2476981639,2319419898,572956615,3833238940,964924880,2081600351,3572458416,2056247513,1951368808,2133449703,2783728628,512866577,913279200,1678129016,3488578991,3373952929,2562996951,3666058925,1664169178,1943591935,750675303,154399903,2571590890,852654952,4117307766,1971649621,4180195820,1222535348,4283953215,2880662236,2717410980,1175907705,1157322027,505963121,2631540616,3661227656,3591803353,2624126821,1948662907,3596065103,1147387734,256773959,1173572460,2361957471,4210876076,3080180620,3464801210,3821654259,1465302035,2851185457,3143266144,3793180414,3368833103,4274670712,3473819108,3487569332,773123355,1618635668,2570176190,2075248691,1740805534,288646743,1837597401,603556968,3182536872,673184603,3088757053,2897054404,3192651316,2885335802,1057233368,1118437241,4182126463,3110464775,3313191614,2360987274,735505357,2992631425,2360928811,4187834527,279183208,1586420003,1174008423,4062987589,1162167621,1162167621,1162167621,1162167621,1174119799,787274608];
starling.text.MiniBitmapFont.XML_DATA = null;
starling.text.TextField.BITMAP_FONT_DATA_NAME = "starling.display.TextField.BitmapFonts";
starling.text.TextField.sHelperMatrix = new openfl.geom.Matrix();
starling.text.TextField.sNativeTextField = new openfl.text.TextField();
starling.text.TextFieldAutoSize.NONE = "none";
starling.text.TextFieldAutoSize.HORIZONTAL = "horizontal";
starling.text.TextFieldAutoSize.VERTICAL = "vertical";
starling.text.TextFieldAutoSize.BOTH_DIRECTIONS = "bothDirections";
starling.textures.ConcreteTexture.TEXTURE_READY = "textureReady";
starling.textures.ConcreteTexture.sOrigin = new openfl.geom.Point();
starling.textures.SubTexture.sTexCoords = new openfl.geom.Point();
starling.textures.TextureAtlas.sNames = (function($this) {
	var $r;
	var this1;
	this1 = new openfl.VectorData();
	{
		var this2;
		this2 = new Array(0);
		this1.data = this2;
	}
	this1.length = 0;
	this1.fixed = false;
	$r = this1;
	return $r;
}(this));
starling.textures.TextureSmoothing.NONE = "none";
starling.textures.TextureSmoothing.BILINEAR = "bilinear";
starling.textures.TextureSmoothing.TRILINEAR = "trilinear";
starling.utils.AssetManager.HTTP_RESPONSE_STATUS = "httpResponseStatus";
starling.utils.AssetManager.sNames = (function($this) {
	var $r;
	var this1;
	this1 = new openfl.VectorData();
	{
		var this2;
		this2 = new Array(0);
		this1.data = this2;
	}
	this1.length = 0;
	this1.fixed = false;
	$r = this1;
	return $r;
}(this));
starling.utils.AssetManager.NAME_REGEX = new EReg("([^\\?/\\\\]+?)(?:\\.([\\w\\-]+))?(?:\\?.*)?$","");
starling.utils.Color.WHITE = 16777215;
starling.utils.Color.SILVER = 12632256;
starling.utils.Color.GRAY = 8421504;
starling.utils.Color.BLACK = 0;
starling.utils.Color.RED = 16711680;
starling.utils.Color.MAROON = 8388608;
starling.utils.Color.YELLOW = 16776960;
starling.utils.Color.OLIVE = 8421376;
starling.utils.Color.LIME = 65280;
starling.utils.Color.GREEN = 32768;
starling.utils.Color.AQUA = 65535;
starling.utils.Color.TEAL = 32896;
starling.utils.Color.BLUE = 255;
starling.utils.Color.NAVY = 128;
starling.utils.Color.FUCHSIA = 16711935;
starling.utils.Color.PURPLE = 8388736;
starling.utils.MathUtil.TWO_PI = Math.PI * 2.0;
starling.utils.MatrixUtil.sRawData2 = (function($this) {
	var $r;
	var this1;
	this1 = new openfl.VectorData();
	{
		var this2;
		this2 = new Array(16);
		this1.data = this2;
	}
	this1.length = 16;
	this1.fixed = true;
	$r = this1;
	return $r;
}(this));
starling.utils.RectangleUtil.sHelperPoint = new openfl.geom.Point();
starling.utils.ScaleMode.NONE = "none";
starling.utils.ScaleMode.NO_BORDER = "noBorder";
starling.utils.ScaleMode.SHOW_ALL = "showAll";
starling.utils.StarlingUtils.deprecationNotified = false;
starling.utils.SystemUtil.sInitialized = false;
starling.utils.SystemUtil.sApplicationActive = true;
starling.utils.SystemUtil.sWaitingCalls = new Array();
starling.utils.SystemUtil.sSupportsDepthAndStencil = true;
starling.utils.VertexData.ELEMENTS_PER_VERTEX = 8;
starling.utils.VertexData.POSITION_OFFSET = 0;
starling.utils.VertexData.COLOR_OFFSET = 2;
starling.utils.VertexData.TEXCOORD_OFFSET = 6;
starling.utils.VertexData.sHelperPoint = new openfl.geom.Point();
starling.utils.VertexData.sHelperPoint3D = new openfl.geom.Vector3D();
ApplicationMain.main();
})(typeof window != "undefined" ? window : exports);
